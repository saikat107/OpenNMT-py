========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 12
Wrong
========================================================================
False

0
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

1
Tree	( v / value - / )
Code	( v / value - / )
Distance : 19

2
Tree	( value / value - / )
Code	( value / value - / )
Distance : 20

3
Tree	(
Code	(
Distance : 23

4
Tree	compiler
Code	compiler
Distance : 24

5
Tree	null
Code	null
Distance : 24

6
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

7
Tree	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

8
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

9
Tree	( value / value - /= )
Code	( value / value - /= )
Distance : 20

10
Tree	( value / v - / )
Code	( value / v - / )
Distance : 19

11
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( paint , stroke . of () ) ; this . value = value ; }
Code	{ super ( paint , stroke . of () ) ; this . value = value ; }
Distance : 6

1
Tree	{ super ( paint , stroke ) ; this . value = new value ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = new value ( value ) ; }
Distance : 10

2
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

3
Tree	{ super ( paint ? relativeAccuracy : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

4
Tree	{ super ( paint . relativeAccuracy () , stroke ) ; this . value = value ; }
Code	{ super ( paint . relativeAccuracy () , stroke ) ; this . value = value ; }
Distance : 7

5
Tree	{ super ( paint ) ; this . value = value ; private }
Code	{ super ( paint ) ; this . value = value ; private }
Distance : 9

6
Tree	{ super ( paint . getLifeCycleStage () , stroke ) ; this . value = value ; }
Code	{ super ( paint . getLifeCycleStage () , stroke ) ; this . value = value ; }
Distance : 7

7
Tree	{ super ( alpha , stroke ) ; this . value = value ; }
Code	{ super ( alpha , stroke ) ; this . value = value ; }
Distance : 7

8
Tree	{ super ( System.out , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( System.out , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

9
Tree	{ super ( Token.PARAM_LIST , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( Token.PARAM_LIST , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

10
Tree	{ super ( paint ) ; this . value = new value [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new value [ NUMBER_CONSTANT ] ; }
Distance : 12

11
Tree	{ super ( null , null , stroke , null ) ; this . value = value ; }
Code	{ super ( null , null , stroke , null ) ; this . value = value ; }
Distance : 6

12
Tree	{ super ( ComposableFunction.SIN ( paint ) , stroke ) ; this . value = value ; }
Code	{ super ( ComposableFunction.SIN ( paint ) , stroke ) ; this . value = value ; }
Distance : 8

13
Tree	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Distance : 11

14
Tree	{ super ( paint ) ; this . value = new value ( value ) ; }
Code	{ super ( paint ) ; this . value = new value ( value ) ; }
Distance : 12

15
Tree	{ super ( IllegalArgumentException ( paint ) , stroke ) ; this . value = value ; }
Code	{ super ( IllegalArgumentException ( paint ) , stroke ) ; this . value = value ; }
Distance : 8

16
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new double [] { value } ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new double [] { value } ; }
Distance : 13

17
Tree	{ super ( paint ) ; this . value = new value <> () ; }
Code	{ super ( paint ) ; this . value = new value <> () ; }
Distance : 11

18
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

19
Tree	{ super ( paint ) ; this . value = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( paint ) ; this . value = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

20
Tree	{ super ( paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint ) ; this . value = new double [] { value } ; }
Distance : 13

21
Tree	{ super ( paint ? stroke : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? stroke : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 7

22
Tree	{ super ( outlineStroke ) ; this . value = value ; }
Code	{ super ( outlineStroke ) ; this . value = value ; }
Distance : 8

23
Tree	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 11

24
Tree	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = new double [] { value } ; }
Distance : 10

25
Tree	{ super ( paint ? relativeAccuracy : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

26
Tree	{ super ( paint , stroke . transpiledFeatures () ) ; this . value = value ; }
Code	{ super ( paint , stroke . transpiledFeatures () ) ; this . value = value ; }
Distance : 6

27
Tree	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 10

28
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

29
Tree	{ super ( System.out , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( System.out , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

30
Tree	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Distance : 7

31
Tree	{ super ( checkNotNull ( paint ) , stroke ) ; this . value = value ; }
Code	{ super ( checkNotNull ( paint ) , stroke ) ; this . value = value ; }
Distance : 8

32
Tree	{ super ( paint ) ; this . value = value . value ( value ) ; }
Code	{ super ( paint ) ; this . value = value . value ( value ) ; }
Distance : 13

33
Tree	{ super ( paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint ) ; this . value = new int [] { value } ; }
Distance : 13

34
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

35
Tree	{ super ( System.out , stroke ) ; this . value = value . value () ; }
Code	{ super ( System.out , stroke ) ; this . value = value . value () ; }
Distance : 10

36
Tree	{ super ( paint , getStartMillis ( value ) ) ; this . value = value ; }
Code	{ super ( paint , getStartMillis ( value ) ) ; this . value = value ; }
Distance : 7

37
Tree	{ super ( stroke , stroke ) ; this . value = value ; }
Code	{ super ( stroke , stroke ) ; this . value = value ; }
Distance : 7

38
Tree	{ super ( paint ) ; this . value = new IllegalArgumentException ( value ) ; }
Code	{ super ( paint ) ; this . value = new IllegalArgumentException ( value ) ; }
Distance : 12

39
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

40
Tree	{ super ( paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 11

41
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = value ; }
Distance : 6

42
Tree	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Distance : 7

43
Tree	{ super ( paint ) ; this . value = ( alpha ) value . value () ; }
Code	{ super ( paint ) ; this . value = ( alpha ) value . value () ; }
Distance : 11

44
Tree	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

45
Tree	{ super ( null , stroke , paint , alpha , stroke , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , stroke , alpha ) ; this . value = value ; }
Distance : 5

46
Tree	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Distance : 6

47
Tree	{ super ( stroke ) ; this . value = value ; }
Code	{ super ( stroke ) ; this . value = value ; }
Distance : 8

48
Tree	{ super ( paint ) ; this . value = value . valueOf () ; }
Code	{ super ( paint ) ; this . value = value . valueOf () ; }
Distance : 11

49
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Distance : 4

50
Tree	{ super ( paint ) ; this . value = value . valueOf ( value ) ; }
Code	{ super ( paint ) ; this . value = value . valueOf ( value ) ; }
Distance : 13

51
Tree	{ super ( stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke ) ; this . value = value . value () ; }
Distance : 11

52
Tree	{ super ( alpha ) ; this . value = value ; }
Code	{ super ( alpha ) ; this . value = value ; }
Distance : 8

53
Tree	{ super ( paint ) ; this . value = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( paint ) ; this . value = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

54
Tree	{ super ( paint , stroke ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke ) ; this . value = value . valueOf () ; }
Distance : 9

55
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = getName ( value ) ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = getName ( value ) ; }
Distance : 6

56
Tree	{ super ( paint , getEndMillis ( value ) ) ; this . value = value ; }
Code	{ super ( paint , getEndMillis ( value ) ) ; this . value = value ; }
Distance : 7

57
Tree	{ super ( paint , stroke ) ; this . value = getDimension ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = getDimension ( value ) ; }
Distance : 9

58
Tree	{ super ( paint , relativeAccuracy ( value ) ) ; this . value = value ; }
Code	{ super ( paint , relativeAccuracy ( value ) ) ; this . value = value ; }
Distance : 7

59
Tree	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

60
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value . value () ; }
Distance : 7

61
Tree	{ super ( paint ) ; this . value = value ; }
Code	{ super ( paint ) ; this . value = value ; }
Distance : 8

62
Tree	{ super ( paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke ) ; this . value = value ; }
Distance : 6

63
Tree	{ super ( stroke != null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( stroke != null ? stroke : stroke ) ; this . value = value ; }
Distance : 8

64
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Distance : 7

65
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Distance : 8

66
Tree	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Distance : 8

67
Tree	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Code	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Distance : 9

68
Tree	{ super ( paint , stroke ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = checkNotNull ( value ) ; }
Distance : 9

69
Tree	{ super ( paint , stroke , paint ) ; this . value = getName ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = getName ( value ) ; }
Distance : 8

70
Tree	{ super ( paint ) ; this . value = new SinFunction [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new SinFunction [ NUMBER_CONSTANT ] ; }
Distance : 13

71
Tree	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = value ; }
Distance : 5

72
Tree	{ super ( paint , stroke ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getFirstChild () ; }
Distance : 9

73
Tree	{ super ( alpha , stroke ) ; }
Code	{ super ( alpha , stroke ) ; }
Distance : 13

74
Tree	{ super ( Token.PARAM_LIST , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

75
Tree	{ super ( System.out , stroke ) ; this . value = value ; }
Code	{ super ( System.out , stroke ) ; this . value = value ; }
Distance : 7

76
Tree	{ this ( paint , false ) ; }
Code	{ this ( paint , false ) ; }
Distance : 14

77
Tree	{ super ( paint != null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : stroke ) ; this . value = value ; }
Distance : 8

78
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . valueOf () ; }
Distance : 6

79
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value . value () ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value . value () ; }
Distance : 10

80
Tree	{ super ( paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke ) ; this . value = value . value () ; }
Distance : 9

81
Tree	{ super ( paint , stroke ) ; this . value = new SinFunction ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = new SinFunction ( value ) ; }
Distance : 10

82
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 6

83
Tree	{ super ( System.out , stroke , paint ) ; this . value = value ; }
Code	{ super ( System.out , stroke , paint ) ; this . value = value ; }
Distance : 6

84
Tree	{ super ( paint ) ; this . value = new ThreadSafeDelegatingErrorManager ( value ) ; }
Code	{ super ( paint ) ; this . value = new ThreadSafeDelegatingErrorManager ( value ) ; }
Distance : 12

85
Tree	{ super ( paint , stroke ) ; this . value = new Returns ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = new Returns ( value ) ; }
Distance : 10

86
Tree	{ super ( paint , stroke ( value ) ) ; this . value = value ; }
Code	{ super ( paint , stroke ( value ) ) ; this . value = value ; }
Distance : 6

87
Tree	{ this ( paint , true ) ; }
Code	{ this ( paint , true ) ; }
Distance : 14

88
Tree	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

89
Tree	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

90
Tree	{ super ( paint . stroke () , stroke ) ; this . value = value ; }
Code	{ super ( paint . stroke () , stroke ) ; this . value = value ; }
Distance : 6

91
Tree	{ super ( stroke == null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( stroke == null ? stroke : stroke ) ; this . value = value ; }
Distance : 8

92
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Distance : 7

93
Tree	{ super ( paint ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint ) ; this . value = getValue ( value ) ; }
Distance : 11

94
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

95
Tree	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = value ; }
Distance : 6

96
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = getValue ( value ) ; }
Distance : 6

97
Tree	{ this ( stroke , false ) ; }
Code	{ this ( stroke , false ) ; }
Distance : 14

98
Tree	{ super ( paint , stroke . paint () ) ; this . value = value ; }
Code	{ super ( paint , stroke . paint () ) ; this . value = value ; }
Distance : 6

99
Tree	{ super ( NUMBER_CONSTANT , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

100
Tree	{ super ( paint ) ; stroke = SerialUtils ; }
Code	{ super ( paint ) ; stroke = SerialUtils ; }
Distance : 12

101
Tree	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

102
Tree	{ super ( alpha != null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( alpha != null ? stroke : stroke ) ; this . value = value ; }
Distance : 9

103
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 6

104
Tree	{ super ( paint ) ; this . value = value ; else }
Code	{ super ( paint ) ; this . value = value ; else }
Distance : 9

105
Tree	{ super ( paint , stroke , paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 8

106
Tree	{ super ( outlineStroke , stroke ) ; }
Code	{ super ( outlineStroke , stroke ) ; }
Distance : 13

107
Tree	{ super ( paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value ; }
Distance : 5

108
Tree	{ super ( paint ) ; this . value = value . getFirstChild ( value ) ; }
Code	{ super ( paint ) ; this . value = value . getFirstChild ( value ) ; }
Distance : 13

109
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value . value () ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value . value () ; }
Distance : 10

110
Tree	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( null , stroke , paint , alpha , alpha , stroke ) ; this . value = new double [] { value } ; }
Distance : 10

111
Tree	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Distance : 10

112
Tree	{ super ( stroke , stroke ) ; }
Code	{ super ( stroke , stroke ) ; }
Distance : 13

113
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

114
Tree	{ super ( null , null , alpha , null ) ; this . value = value ; }
Code	{ super ( null , null , alpha , null ) ; this . value = value ; }
Distance : 6

115
Tree	{ super ( paint , stroke , paint ) ; this . value = getDimension ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = getDimension ( value ) ; }
Distance : 8

116
Tree	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value . value () ; }
Code	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value . value () ; }
Distance : 10

117
Tree	{ super ( paint , stroke ) ; this . value = new HashSet [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke ) ; this . value = new HashSet [ NUMBER_CONSTANT ] ; }
Distance : 11

118
Tree	{ super ( paint , stroke ) ; this . value = new value [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke ) ; this . value = new value [ NUMBER_CONSTANT ] ; }
Distance : 10

119
Tree	{ super ( paint , stroke ) ; this . value = getName ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = getName ( value ) ; }
Distance : 9

120
Tree	{ super ( alpha == null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( alpha == null ? stroke : stroke ) ; this . value = value ; }
Distance : 9

121
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Distance : 3

122
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = value ; }
Distance : 9

123
Tree	{ super ( STRING_CONSTANT ) ; this . value = value ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = value ; }
Distance : 9

124
Tree	{ super ( paint ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint ) ; this . value = value . getFirstChild () ; }
Distance : 11

125
Tree	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Distance : 6

126
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Distance : 6

127
Tree	{ super ( stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke ) ; this . value = new double [] { value } ; }
Distance : 13

128
Tree	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = new int [] { value } ; }
Code	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = new int [] { value } ; }
Distance : 10

129
Tree	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

130
Tree	{ super ( paint , stroke ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = getValue ( value ) ; }
Distance : 9

131
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

132
Tree	{ super ( paint , stroke . checkedFeatures () ) ; this . value = value ; }
Code	{ super ( paint , stroke . checkedFeatures () ) ; this . value = value ; }
Distance : 6

133
Tree	{ super ( NUMBER_CONSTANT , stroke , alpha , alpha ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , stroke , alpha , alpha ) ; this . value = value ; }
Distance : 4

134
Tree	{ super ( null , alpha , null , null ) ; this . value = value ; }
Code	{ super ( null , alpha , null , null ) ; this . value = value ; }
Distance : 6

135
Tree	{ super ( paint , stroke ) ; this . value = new SinFunction [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke ) ; this . value = new SinFunction [ NUMBER_CONSTANT ] ; }
Distance : 11

136
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = value ; }
Distance : 6

137
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new float [] { value } ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new float [] { value } ; }
Distance : 13

138
Tree	{ super ( paint , stroke , paint ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . valueOf () ; }
Distance : 8

139
Tree	{ super ( paint ) ; this . value = value . value () ; }
Code	{ super ( paint ) ; this . value = value . value () ; }
Distance : 11

140
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

141
Tree	{ super ( paint , stroke , paint ) ; this . value = new SinFunction [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new SinFunction [ NUMBER_CONSTANT ] ; }
Distance : 10

142
Tree	{ super ( paint ) ; this . value = new ThreadSafeDelegatingErrorManager <> () ; }
Code	{ super ( paint ) ; this . value = new ThreadSafeDelegatingErrorManager <> () ; }
Distance : 12

143
Tree	{ super ( paint , stroke , paint ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . toLowerCase () ; }
Distance : 8

144
Tree	{ super ( getStartMillis ( paint ) , stroke ) ; this . value = value ; }
Code	{ super ( getStartMillis ( paint ) , stroke ) ; this . value = value ; }
Distance : 8

145
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new short [] { value } ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new short [] { value } ; }
Distance : 13

146
Tree	{ super ( null , stroke , null , null ) ; this . value = value ; }
Code	{ super ( null , stroke , null , null ) ; this . value = value ; }
Distance : 5

147
Tree	{ super ( paint ) ; this . value = new Returns <> () ; }
Code	{ super ( paint ) ; this . value = new Returns <> () ; }
Distance : 12

148
Tree	{ super ( paint . isScript () , stroke ) ; this . value = value ; }
Code	{ super ( paint . isScript () , stroke ) ; this . value = value ; }
Distance : 7

149
Tree	{ super ( paint == null ? stroke : alpha ) ; this . value = value ; }
Code	{ super ( paint == null ? stroke : alpha ) ; this . value = value ; }
Distance : 7

150
Tree	{ super ( paint , stroke , paint ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = getValue ( value ) ; }
Distance : 8

151
Tree	{ super ( paint ) ; this . value = new Returns [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new Returns [ NUMBER_CONSTANT ] ; }
Distance : 13

152
Tree	{ super ( paint == null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( paint == null ? stroke : stroke ) ; this . value = value ; }
Distance : 8

153
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

154
Tree	{ super ( null , null , stroke , null ) ; this . stroke = value ; }
Code	{ super ( null , null , stroke , null ) ; this . stroke = value ; }
Distance : 7

155
Tree	{ super ( STRING_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = stroke ; }
Distance : 10

156
Tree	{ super ( alpha ) ; this . value = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( alpha ) ; this . value = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

157
Tree	{ super ( paint ) ; this . value = value ; if }
Code	{ super ( paint ) ; this . value = value ; if }
Distance : 9

158
Tree	{ super ( paint ) ; this . value = round ( value ) ; }
Code	{ super ( paint ) ; this . value = round ( value ) ; }
Distance : 11

159
Tree	{ super ( paint ) ; stroke = stroke ; }
Code	{ super ( paint ) ; stroke = stroke ; }
Distance : 12

160
Tree	{ super ( alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha ) ; this . value = new double [] { value } ; }
Distance : 13

161
Tree	{ super ( paint ) ; stroke = transpiledFeatures ; }
Code	{ super ( paint ) ; stroke = transpiledFeatures ; }
Distance : 12

162
Tree	{ super ( paint ) ; this . value = new Returns ( value ) ; }
Code	{ super ( paint ) ; this . value = new Returns ( value ) ; }
Distance : 12

163
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 9

164
Tree	{ super ( paint ) ; this . value = getName ( value ) ; }
Code	{ super ( paint ) ; this . value = getName ( value ) ; }
Distance : 11

165
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new int [] { value } ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = new int [] { value } ; }
Distance : 13

166
Tree	{ super ( NUMBER_CONSTANT , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

167
Tree	{ super ( paint ) ; this . value = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 13

168
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

169
Tree	{ super ( null , stroke , null , null ) ; this . stroke = value ; }
Code	{ super ( null , stroke , null , null ) ; this . stroke = value ; }
Distance : 6

170
Tree	{ super ( paint , stroke , paint ) ; this . value = new Returns [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new Returns [ NUMBER_CONSTANT ] ; }
Distance : 10

171
Tree	{ super ( null , null , stroke , null ) ; this . alpha = value ; }
Code	{ super ( null , null , stroke , null ) ; this . alpha = value ; }
Distance : 7

172
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . toLowerCase () ; }
Distance : 6

173
Tree	{ super ( paint != null ? stroke : alpha ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : alpha ) ; this . value = value ; }
Distance : 7

174
Tree	{ super ( paint ) ; this . value = ( stroke ) value . value () ; }
Code	{ super ( paint ) ; this . value = ( stroke ) value . value () ; }
Distance : 12

175
Tree	{ super ( paint , stroke , paint ) ; this . value = new value [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new value [ NUMBER_CONSTANT ] ; }
Distance : 9

176
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Distance : 8

177
Tree	{ super ( paint , stroke ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint , stroke ) ; this . value = value . toLowerCase () ; }
Distance : 9

178
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

179
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = getDimension ( value ) ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = getDimension ( value ) ; }
Distance : 6

180
Tree	{ super ( paint ) ; this . value = new IllegalArgumentException <> () ; }
Code	{ super ( paint ) ; this . value = new IllegalArgumentException <> () ; }
Distance : 12

181
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getFirstChild () ; }
Distance : 8

182
Tree	{ super ( paint ) ; stroke = AllowedSolutions.ANY_SIDE ; }
Code	{ super ( paint ) ; stroke = AllowedSolutions.ANY_SIDE ; }
Distance : 12

183
Tree	{ super ( System.out , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( System.out , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

184
Tree	{ super ( STRING_CONSTANT ) ; this . value = alpha ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = alpha ; }
Distance : 10

185
Tree	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = value ; }
Distance : 5

186
Tree	{ super ( STRING_CONSTANT ) ; this . value = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = paint ; }
Distance : 10

187
Tree	{ super ( paint ) ; this . value = ( paint ) value . value () ; }
Code	{ super ( paint ) ; this . value = ( paint ) value . value () ; }
Distance : 12

188
Tree	{ super ( stroke ) ; this . value = value . value ( value ) ; }
Code	{ super ( stroke ) ; this . value = value . value ( value ) ; }
Distance : 13

189
Tree	{ super ( paint ) ; this . value = ( value ) value . value () ; }
Code	{ super ( paint ) ; this . value = ( value ) value . value () ; }
Distance : 12

190
Tree	{ super ( NUMBER_CONSTANT , stroke , paint , stroke ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , stroke , paint , stroke ) ; this . value = value ; }
Distance : 5

191
Tree	{ this ( alpha , false ) ; }
Code	{ this ( alpha , false ) ; }
Distance : 15

192
Tree	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( null , stroke , paint , stroke , alpha , alpha ) ; this . value = new double [] { value } ; }
Distance : 10

193
Tree	{ super ( paint , stroke ) ; this . value = new HashSet ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = new HashSet ( value ) ; }
Distance : 10

194
Tree	{ super ( stroke ) ; this . value = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( stroke ) ; this . value = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

195
Tree	{ super ( paint , stroke ) ; this . value = new Returns [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke ) ; this . value = new Returns [ NUMBER_CONSTANT ] ; }
Distance : 11

196
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = alpha ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = alpha ; }
Distance : 9

197
Tree	{ super ( paint , stroke , paint ) ; this . value = new HashSet [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new HashSet [ NUMBER_CONSTANT ] ; }
Distance : 10

198
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Distance : 9

199
Tree	{ super ( null , stroke , null , null ) ; this . value = alpha ; }
Code	{ super ( null , stroke , null , null ) ; this . value = alpha ; }
Distance : 6

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( index () == null ) { return; }
Code	if ( index () == null ) { return; }
Distance : 14

1
Tree	if ( index . getParent () ) { return; }
Code	if ( index . getParent () ) { return; }
Distance : 14

2
Tree	if ( index . abs () ) { return; }
Code	if ( index . abs () ) { return; }
Distance : 14

3
Tree	if ( ! index . getParent ( index ) ) { return; }
Code	if ( ! index . getParent ( index ) ) { return; }
Distance : 15

4
Tree	if ( index . getParent ( index ) ) { return; }
Code	if ( index . getParent ( index ) ) { return; }
Distance : 14

5
Tree	if ( index . toBooleanObject () ) { return; }
Code	if ( index . toBooleanObject () ) { return; }
Distance : 14

6
Tree	if ( index ) { continue; }
Code	if ( index ) { continue; }
Distance : 13

7
Tree	if ( index ) { super(); }
Code	if ( index ) { super(); }
Distance : 13

8
Tree	if ( index != null && index != return; ) { return; }
Code	if ( index != null && index != return; ) { return; }
Distance : 15

9
Tree	if ( index != null && index < NUMBER_CONSTANT ) { break; }
Code	if ( index != null && index < NUMBER_CONSTANT ) { break; }
Distance : 15

10
Tree	if ( ! types ( index , STRING_CONSTANT ) ) { return; }
Code	if ( ! types ( index , STRING_CONSTANT ) ) { return; }
Distance : 15

11
Tree	if ( STRING_CONSTANT + index . getTolerance ( index ) + STRING_CONSTANT ) { return; }
Code	if ( STRING_CONSTANT + index . getTolerance ( index ) + STRING_CONSTANT ) { return; }
Distance : 13

12
Tree	if ( ! this . returnFalse () ) { return; }
Code	if ( ! this . returnFalse () ) { return; }
Distance : 16

13
Tree	if ( values.length ( index ) ) { return; }
Code	if ( values.length ( index ) ) { return; }
Distance : 15

14
Tree	if ( index . abs ( index , false ) ) { return; }
Code	if ( index . abs ( index , false ) ) { return; }
Distance : 14

15
Tree	if ( this . returnZero () ) { return; }
Code	if ( this . returnZero () ) { return; }
Distance : 15

16
Tree	if ( ! index . abs ( STRING_CONSTANT ) ) { return; }
Code	if ( ! index . abs ( STRING_CONSTANT ) ) { return; }
Distance : 14

17
Tree	if ( ! getDataset () ) { return; }
Code	if ( ! getDataset () ) { return; }
Distance : 14

18
Tree	if ( this . getClass () ) { return; }
Code	if ( this . getClass () ) { return; }
Distance : 15

19
Tree	if ( ! index . abs ( index ) ) { return; }
Code	if ( ! index . abs ( index ) ) { return; }
Distance : 15

20
Tree	if ( ! isPowerOf2 ( index , index ) ) { return; }
Code	if ( ! isPowerOf2 ( index , index ) ) { return; }
Distance : 15

21
Tree	if ( index . getParent ( index , false ) ) { return; }
Code	if ( index . getParent ( index , false ) ) { return; }
Distance : 14

22
Tree	if ( ! isPowerOf2 ) { return; }
Code	if ( ! isPowerOf2 ) { return; }
Distance : 14

23
Tree	if ( ! index . valueOf ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . valueOf ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

24
Tree	if ( ! index . getParent ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . getParent ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

25
Tree	if ( index . abs ( index ) > index ) { return; }
Code	if ( index . abs ( index ) > index ) { return; }
Distance : 14

26
Tree	if ( index . getParent ( index ) == null ) { return; }
Code	if ( index . getParent ( index ) == null ) { return; }
Distance : 14

27
Tree	if ( ! index . getParent ( index , false ) ) { return; }
Code	if ( ! index . getParent ( index , false ) ) { return; }
Distance : 15

28
Tree	if ( ! isPowerOf2 () ) { return; }
Code	if ( ! isPowerOf2 () ) { return; }
Distance : 14

29
Tree	if ( ! index . getParent ( STRING_CONSTANT ) ) { return; }
Code	if ( ! index . getParent ( STRING_CONSTANT ) ) { return; }
Distance : 14

30
Tree	if ( values.length ) { return; }
Code	if ( values.length ) { return; }
Distance : 14

31
Tree	if ( index != null && index < NUMBER_CONSTANT ) { return; }
Code	if ( index != null && index < NUMBER_CONSTANT ) { return; }
Distance : 15

32
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

33
Tree	if ( values.length () ) { return; }
Code	if ( values.length () ) { return; }
Distance : 14

34
Tree	if ( index == d.length ) { return; }
Code	if ( index == d.length ) { return; }
Distance : 13

35
Tree	if ( child.parent ) { return; }
Code	if ( child.parent ) { return; }
Distance : 14

36
Tree	if ( index . toBooleanObject ( index ) > index ) { return; }
Code	if ( index . toBooleanObject ( index ) > index ) { return; }
Distance : 14

37
Tree	if ( index >= NUMBER_CONSTANT ) { return; }
Code	if ( index >= NUMBER_CONSTANT ) { return; }
Distance : 12

38
Tree	if ( isNaN ( index , index ) ) { return; }
Code	if ( isNaN ( index , index ) ) { return; }
Distance : 15

39
Tree	if ( values.length () > index ) { return; }
Code	if ( values.length () > index ) { return; }
Distance : 15

40
Tree	if ( ! this . returnZero () ) { return; }
Code	if ( ! this . returnZero () ) { return; }
Distance : 16

41
Tree	if ( isNaN ( index ) ) { return; }
Code	if ( isNaN ( index ) ) { return; }
Distance : 15

42
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

43
Tree	if ( index . getParent ( STRING_CONSTANT ) ) { return; }
Code	if ( index . getParent ( STRING_CONSTANT ) ) { return; }
Distance : 13

44
Tree	if ( d.length ) { return; }
Code	if ( d.length ) { return; }
Distance : 14

45
Tree	if ( index != null < index . getParent ( index ) ) { return; }
Code	if ( index != null < index . getParent ( index ) ) { return; }
Distance : 14

46
Tree	if ( index != null && index < NUMBER_CONSTANT ) { continue; }
Code	if ( index != null && index < NUMBER_CONSTANT ) { continue; }
Distance : 15

47
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

48
Tree	if ( ! index . valueOf ( index , false ) ) { return; }
Code	if ( ! index . valueOf ( index , false ) ) { return; }
Distance : 15

49
Tree	if ( ! STRING_CONSTANT . index ( index ) ) { return; }
Code	if ( ! STRING_CONSTANT . index ( index ) ) { return; }
Distance : 15

50
Tree	if ( index . isNaN () ) { return; }
Code	if ( index . isNaN () ) { return; }
Distance : 14

51
Tree	if ( ! isPowerOf2 ( index , STRING_CONSTANT ) ) { return; }
Code	if ( ! isPowerOf2 ( index , STRING_CONSTANT ) ) { return; }
Distance : 15

52
Tree	if ( this . backgroundPaint () ) { return; }
Code	if ( this . backgroundPaint () ) { return; }
Distance : 15

53
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; break; }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; break; }
Distance : 11

54
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

55
Tree	if ( ! f.length ) { return; }
Code	if ( ! f.length ) { return; }
Distance : 14

56
Tree	if ( index >= NUMBER_CONSTANT ) { super(); }
Code	if ( index >= NUMBER_CONSTANT ) { super(); }
Distance : 12

57
Tree	if ( ! index . toBooleanObject ( index ) ) { return; }
Code	if ( ! index . toBooleanObject ( index ) ) { return; }
Distance : 15

58
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

59
Tree	if ( index != null < index . toBooleanObject ( index ) ) { return; }
Code	if ( index != null < index . toBooleanObject ( index ) ) { return; }
Distance : 14

60
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

61
Tree	if ( index != null < index . getTimeZone ( TimeZones.GMT_ID , index , index ) ) { return; }
Code	if ( index != null < index . getTimeZone ( TimeZones.GMT_ID , index , index ) ) { return; }
Distance : 15

62
Tree	if ( index >= NUMBER_CONSTANT ) { break; }
Code	if ( index >= NUMBER_CONSTANT ) { break; }
Distance : 12

63
Tree	if ( index == Double.NaN ) { return; }
Code	if ( index == Double.NaN ) { return; }
Distance : 13

64
Tree	if ( index ( index , index ) ) { return; }
Code	if ( index ( index , index ) ) { return; }
Distance : 14

65
Tree	if ( key < NUMBER_CONSTANT ) {}
Code	if ( key < NUMBER_CONSTANT ) {}
Distance : 14

66
Tree	if ( ! index . toBooleanObject ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . toBooleanObject ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

67
Tree	if ( isNaN () == null ) { return; }
Code	if ( isNaN () == null ) { return; }
Distance : 15

68
Tree	if ( ! index . toBooleanObject ( index ) ) { return; }
Code	if ( ! index . toBooleanObject ( index ) ) { return; }
Distance : 15

69
Tree	if ( STRING_CONSTANT + index . getDataset ( index ) + STRING_CONSTANT ) { return; }
Code	if ( STRING_CONSTANT + index . getDataset ( index ) + STRING_CONSTANT ) { return; }
Distance : 13

70
Tree	if ( index < NUMBER_CONSTANT ) { throw key . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , index ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw key . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , index ) ; }
Distance : 8

71
Tree	if ( ! index . toBooleanObject () ) { return; }
Code	if ( ! index . toBooleanObject () ) { return; }
Distance : 15

72
Tree	if ( index . isNaN ( index , false ) ) { return; }
Code	if ( index . isNaN ( index , false ) ) { return; }
Distance : 14

73
Tree	if ( values.length () == null ) { return; }
Code	if ( values.length () == null ) { return; }
Distance : 15

74
Tree	if ( index . isNaN ( STRING_CONSTANT ) ) { return; }
Code	if ( index . isNaN ( STRING_CONSTANT ) ) { return; }
Distance : 13

75
Tree	if ( ! types ( index ) ) { return; }
Code	if ( ! types ( index ) ) { return; }
Distance : 15

76
Tree	if ( index < NUMBER_CONSTANT ) { break; }
Code	if ( index < NUMBER_CONSTANT ) { break; }
Distance : 11

77
Tree	if ( index ( index ) ) { return; }
Code	if ( index ( index ) ) { return; }
Distance : 14

78
Tree	if ( index . toBooleanObject ( index , false ) ) { return; }
Code	if ( index . toBooleanObject ( index , false ) ) { return; }
Distance : 14

79
Tree	if ( child.parent != null ) { return; }
Code	if ( child.parent != null ) { return; }
Distance : 14

80
Tree	if ( d.length != null ) { return; }
Code	if ( d.length != null ) { return; }
Distance : 14

81
Tree	if ( index . abs ( index ) ) { return; }
Code	if ( index . abs ( index ) ) { return; }
Distance : 14

82
Tree	if ( index ) { return; }
Code	if ( index ) { return; }
Distance : 13

83
Tree	if ( ! index . abs ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . abs ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

84
Tree	if ( ! STRING_CONSTANT . toBooleanObject ( index ) ) { return; }
Code	if ( ! STRING_CONSTANT . toBooleanObject ( index ) ) { return; }
Distance : 15

85
Tree	if ( index != null ) { break; }
Code	if ( index != null ) { break; }
Distance : 13

86
Tree	if ( index . isNaN ( index ) > index ) { return; }
Code	if ( index . isNaN ( index ) > index ) { return; }
Distance : 14

87
Tree	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Distance : 15

88
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

89
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

90
Tree	if ( index <= NUMBER_CONSTANT ) { return; }
Code	if ( index <= NUMBER_CONSTANT ) { return; }
Distance : 12

91
Tree	if ( ! isPowerOf2 ( index ) ) { return; }
Code	if ( ! isPowerOf2 ( index ) ) { return; }
Distance : 15

92
Tree	if ( index != data.length ) { return; }
Code	if ( index != data.length ) { return; }
Distance : 13

93
Tree	if ( index () > index ) { return; }
Code	if ( index () > index ) { return; }
Distance : 14

94
Tree	if ( ! STRING_CONSTANT . valueOf ( index ) ) { return; }
Code	if ( ! STRING_CONSTANT . valueOf ( index ) ) { return; }
Distance : 15

95
Tree	if ( ! index . toBooleanObject ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . toBooleanObject ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

96
Tree	if ( index . abs () == null ) { return; }
Code	if ( index . abs () == null ) { return; }
Distance : 15

97
Tree	if ( ! index . valueOf () ) { return; }
Code	if ( ! index . valueOf () ) { return; }
Distance : 15

98
Tree	if ( values.length != null ) { return; }
Code	if ( values.length != null ) { return; }
Distance : 14

99
Tree	if ( index ) { return; }
Code	if ( index ) { return; }
Distance : 13

100
Tree	if ( ! STRING_CONSTANT . size ( index ) ) { return; }
Code	if ( ! STRING_CONSTANT . size ( index ) ) { return; }
Distance : 15

101
Tree	if ( ! index . abs ( index ) ) { return; }
Code	if ( ! index . abs ( index ) ) { return; }
Distance : 15

102
Tree	if ( ! getDataset ( STRING_CONSTANT ) ) { return; }
Code	if ( ! getDataset ( STRING_CONSTANT ) ) { return; }
Distance : 14

103
Tree	if ( index . isNaN ( index ) == null ) { return; }
Code	if ( index . isNaN ( index ) == null ) { return; }
Distance : 14

104
Tree	if ( STRING_CONSTANT + index . abs ( index ) + STRING_CONSTANT ) { return; }
Code	if ( STRING_CONSTANT + index . abs ( index ) + STRING_CONSTANT ) { return; }
Distance : 13

105
Tree	if ( index . toBooleanObject ( STRING_CONSTANT ) ) { return; }
Code	if ( index . toBooleanObject ( STRING_CONSTANT ) ) { return; }
Distance : 13

106
Tree	if ( index . abs ( index ) == null ) { return; }
Code	if ( index . abs ( index ) == null ) { return; }
Distance : 14

107
Tree	if ( ! getDataset ( index , STRING_CONSTANT ) ) { return; }
Code	if ( ! getDataset ( index , STRING_CONSTANT ) ) { return; }
Distance : 15

108
Tree	if ( ! index . abs () ) { return; }
Code	if ( ! index . abs () ) { return; }
Distance : 15

109
Tree	if ( index . getParent ( index ) > index ) { return; }
Code	if ( index . getParent ( index ) > index ) { return; }
Distance : 14

110
Tree	if ( ! index . toBooleanObject ( STRING_CONSTANT ) ) { return; }
Code	if ( ! index . toBooleanObject ( STRING_CONSTANT ) ) { return; }
Distance : 14

111
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

112
Tree	if ( ! index ( index ) ) { return; }
Code	if ( ! index ( index ) ) { return; }
Distance : 15

113
Tree	if ( index . toBooleanObject ( index ) == null ) { return; }
Code	if ( index . toBooleanObject ( index ) == null ) { return; }
Distance : 14

114
Tree	if ( index == IncrementalCheckMode.GENERATE_IJS ) { return; }
Code	if ( index == IncrementalCheckMode.GENERATE_IJS ) { return; }
Distance : 13

115
Tree	if ( index . abs ( STRING_CONSTANT ) ) { return; }
Code	if ( index . abs ( STRING_CONSTANT ) ) { return; }
Distance : 13

116
Tree	if ( ! allDefinitionsEquivalent ( STRING_CONSTANT ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( STRING_CONSTANT ) ) { return; }
Distance : 14

117
Tree	if ( index != null && index != null ) { return; }
Code	if ( index != null && index != null ) { return; }
Distance : 15

118
Tree	if ( index () ) { return; }
Code	if ( index () ) { return; }
Distance : 13

119
Tree	if ( ! this . getClass () ) { return; }
Code	if ( ! this . getClass () ) { return; }
Distance : 16

120
Tree	if ( index . isNaN ( index ) ) { return; }
Code	if ( index . isNaN ( index ) ) { return; }
Distance : 14

121
Tree	if ( index != index ) { break; }
Code	if ( index != index ) { break; }
Distance : 13

122
Tree	if ( ! index . getParent () ) { return; }
Code	if ( ! index . getParent () ) { return; }
Distance : 15

123
Tree	if ( index != f.length ) { return; }
Code	if ( index != f.length ) { return; }
Distance : 13

124
Tree	if ( ! getDataset ( index ) ) { return; }
Code	if ( ! getDataset ( index ) ) { return; }
Distance : 15

125
Tree	if ( index . getParent () == null ) { return; }
Code	if ( index . getParent () == null ) { return; }
Distance : 15

126
Tree	if ( index > index ) { return; }
Code	if ( index > index ) { return; }
Distance : 13

127
Tree	if ( ! index . abs ( index , false ) ) { return; }
Code	if ( ! index . abs ( index , false ) ) { return; }
Distance : 15

128
Tree	if ( this . returnFalse () ) { return; }
Code	if ( this . returnFalse () ) { return; }
Distance : 15

129
Tree	if ( STRING_CONSTANT + index . valueOf ( index ) + STRING_CONSTANT ) { return; }
Code	if ( STRING_CONSTANT + index . valueOf ( index ) + STRING_CONSTANT ) { return; }
Distance : 13

130
Tree	if ( this == index ) { return; }
Code	if ( this == index ) { return; }
Distance : 14

131
Tree	if ( index != v.length ) { return; }
Code	if ( index != v.length ) { return; }
Distance : 13

132
Tree	if ( abs ( index ) ) { return; }
Code	if ( abs ( index ) ) { return; }
Distance : 15

133
Tree	if ( ! getDataset ( index , index ) ) { return; }
Code	if ( ! getDataset ( index , index ) ) { return; }
Distance : 15

134
Tree	if ( ! index . valueOf ( STRING_CONSTANT ) ) { return; }
Code	if ( ! index . valueOf ( STRING_CONSTANT ) ) { return; }
Distance : 14

135
Tree	if ( ! this . getTime () ) { return; }
Code	if ( ! this . getTime () ) { return; }
Distance : 16

136
Tree	if ( ! index . toBooleanObject ( index , false ) ) { return; }
Code	if ( ! index . toBooleanObject ( index , false ) ) { return; }
Distance : 15

137
Tree	if ( index . toBooleanObject ( index ) ) { return; }
Code	if ( index . toBooleanObject ( index ) ) { return; }
Distance : 14

138
Tree	if ( index != IncrementalCheckMode.GENERATE_IJS ) { return; }
Code	if ( index != IncrementalCheckMode.GENERATE_IJS ) { return; }
Distance : 13

139
Tree	if ( ! allDefinitionsEquivalent () ) { return; }
Code	if ( ! allDefinitionsEquivalent () ) { return; }
Distance : 14

140
Tree	if ( ! types () ) { return; }
Code	if ( ! types () ) { return; }
Distance : 14

141
Tree	if ( ! isPowerOf2 ( STRING_CONSTANT ) ) { return; }
Code	if ( ! isPowerOf2 ( STRING_CONSTANT ) ) { return; }
Distance : 14

142
Tree	if ( ! index . valueOf ( index ) ) { return; }
Code	if ( ! index . valueOf ( index ) ) { return; }
Distance : 15

143
Tree	if ( index . isNaN () == null ) { return; }
Code	if ( index . isNaN () == null ) { return; }
Distance : 15

144
Tree	if ( ! values.length ) { return; }
Code	if ( ! values.length ) { return; }
Distance : 14

145
Tree	if ( index > index ) { super(); }
Code	if ( index > index ) { super(); }
Distance : 13

146
Tree	if ( ! index . valueOf ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . valueOf ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

147
Tree	if ( index < NUMBER_CONSTANT ) {}
Code	if ( index < NUMBER_CONSTANT ) {}
Distance : 13

148
Tree	if ( ! index . abs ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . abs ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

149
Tree	if ( ! allDefinitionsEquivalent ( index , STRING_CONSTANT ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( index , STRING_CONSTANT ) ) { return; }
Distance : 15

150
Tree	if ( index . toBooleanObject () == null ) { return; }
Code	if ( index . toBooleanObject () == null ) { return; }
Distance : 15

151
Tree	if ( ! key ( index ) ) { return; }
Code	if ( ! key ( index ) ) { return; }
Distance : 15

152
Tree	if ( values.length == IncrementalCheckMode.GENERATE_IJS ) { return; }
Code	if ( values.length == IncrementalCheckMode.GENERATE_IJS ) { return; }
Distance : 14

153
Tree	if ( ! index . getParent ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . getParent ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

154
Tree	if ( index <= NUMBER_CONSTANT ) { break; }
Code	if ( index <= NUMBER_CONSTANT ) { break; }
Distance : 12

155
Tree	if ( index <= NUMBER_CONSTANT ) { continue; }
Code	if ( index <= NUMBER_CONSTANT ) { continue; }
Distance : 12

156
Tree	if ( ! index . valueOf ( index ) ) { return; }
Code	if ( ! index . valueOf ( index ) ) { return; }
Distance : 15

157
Tree	if ( values.length ( index , index ) ) { return; }
Code	if ( values.length ( index , index ) ) { return; }
Distance : 15

158
Tree	if ( ! index ( index ) ) { continue; }
Code	if ( ! index ( index ) ) { continue; }
Distance : 15

159
Tree	if ( abs () > index ) { return; }
Code	if ( abs () > index ) { return; }
Distance : 15

160
Tree	if ( index != null ) { continue; }
Code	if ( index != null ) { continue; }
Distance : 13

161
Tree	if ( ! key ) { return; }
Code	if ( ! key ) { return; }
Distance : 14

162
Tree	if ( ! types ( STRING_CONSTANT ) ) { return; }
Code	if ( ! types ( STRING_CONSTANT ) ) { return; }
Distance : 14

163
Tree	if ( ! index . getParent ( index ) ) { return; }
Code	if ( ! index . getParent ( index ) ) { return; }
Distance : 15

164
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

165
Tree	if ( index != null && index != null ) { break; }
Code	if ( index != null && index != null ) { break; }
Distance : 15

166
Tree	if ( ! index ) { break; }
Code	if ( ! index ) { break; }
Distance : 14

167
Tree	if ( abs () ) { return; }
Code	if ( abs () ) { return; }
Distance : 14

168
Tree	if ( isNaN () ) { return; }
Code	if ( isNaN () ) { return; }
Distance : 14

169
Tree	if ( this == index ) { super(); }
Code	if ( this == index ) { super(); }
Distance : 14

170
Tree	if ( index > index ) { continue; }
Code	if ( index > index ) { continue; }
Distance : 13

171
Tree	if ( abs () == null ) { return; }
Code	if ( abs () == null ) { return; }
Distance : 15

172
Tree	if ( this == index ) { break; }
Code	if ( this == index ) { break; }
Distance : 14

173
Tree	if ( index < NUMBER_CONSTANT ) { continue; }
Code	if ( index < NUMBER_CONSTANT ) { continue; }
Distance : 11

174
Tree	if ( ! allDefinitionsEquivalent ( index , index ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( index , index ) ) { return; }
Distance : 15

175
Tree	if ( index != null && index < NUMBER_CONSTANT ) { super(); }
Code	if ( index != null && index < NUMBER_CONSTANT ) { super(); }
Distance : 15

176
Tree	if ( index > index ) { break; }
Code	if ( index > index ) { break; }
Distance : 13

177
Tree	if ( ! getNumber ( index , index ) ) { return; }
Code	if ( ! getNumber ( index , index ) ) { return; }
Distance : 15

178
Tree	if ( isNaN () > index ) { return; }
Code	if ( isNaN () > index ) { return; }
Distance : 15

179
Tree	if ( ! index ) { super(); }
Code	if ( ! index ) { super(); }
Distance : 14

180
Tree	if ( ! index ( index ) ) { break; }
Code	if ( ! index ( index ) ) { break; }
Distance : 15

181
Tree	if ( index <= NUMBER_CONSTANT ) { super(); }
Code	if ( index <= NUMBER_CONSTANT ) { super(); }
Distance : 12

182
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; return; }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; return; }
Distance : 11

183
Tree	if ( index < NUMBER_CONSTANT ) { key = null ; return; }
Code	if ( index < NUMBER_CONSTANT ) { key = null ; return; }
Distance : 10

184
Tree	if ( abs ( index , index ) ) { return; }
Code	if ( abs ( index , index ) ) { return; }
Distance : 15

185
Tree	if ( index != null < index . getParent ( TimeZones.GMT_ID , index , index ) ) { return; }
Code	if ( index != null < index . getParent ( TimeZones.GMT_ID , index , index ) ) { return; }
Distance : 15

186
Tree	if ( this == index ) { continue; }
Code	if ( this == index ) { continue; }
Distance : 14

187
Tree	if ( index ) { break; }
Code	if ( index ) { break; }
Distance : 13

188
Tree	if ( index != null && index != null ) { super(); }
Code	if ( index != null && index != null ) { super(); }
Distance : 15

189
Tree	if ( index != null < index . toBooleanObject ( TimeZones.GMT_ID , index , index ) ) { return; }
Code	if ( index != null < index . toBooleanObject ( TimeZones.GMT_ID , index , index ) ) { return; }
Distance : 15

190
Tree	if ( index < NUMBER_CONSTANT ) { throw key . createIllegalArgumentException ( index , index , index ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw key . createIllegalArgumentException ( index , index , index ) ; }
Distance : 8

191
Tree	if ( index < NUMBER_CONSTANT ) { index = return; ; return; }
Code	if ( index < NUMBER_CONSTANT ) { index = return; ; return; }
Distance : 11

192
Tree	if ( index < NUMBER_CONSTANT ) { throw key . createIllegalArgumentException ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT , index , index ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw key . createIllegalArgumentException ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT , index , index ) ; }
Distance : 8

193
Tree	if ( index != null < index . getDaysInYearMax ( TimeZones.GMT_ID , index , index ) ) { return; }
Code	if ( index != null < index . getDaysInYearMax ( TimeZones.GMT_ID , index , index ) ) { return; }
Distance : 15

194
Tree	if ( index != null < index . getTimeZone ( index ) ) { return; }
Code	if ( index != null < index . getTimeZone ( index ) ) { return; }
Distance : 14

195
Tree	if ( index >= NUMBER_CONSTANT ) { continue; }
Code	if ( index >= NUMBER_CONSTANT ) { continue; }
Distance : 12

196
Tree	if ( index < NUMBER_CONSTANT ) {} Class
Code	if ( index < NUMBER_CONSTANT ) {} Class
Distance : 13

197
Tree	if ( index != null < index . getDaysInYearMax ( index ) ) { return; }
Code	if ( index != null < index . getDaysInYearMax ( index ) ) { return; }
Distance : 14

198
Tree	if ( index < NUMBER_CONSTANT ) {} Test
Code	if ( index < NUMBER_CONSTANT ) {} Test
Distance : 13

199
Tree	if ( index < NUMBER_CONSTANT ) { throw index . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , index ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , index ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 168
Wrong
========================================================================
False

0
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } notifyListeners
Distance : 23

1
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , continue; ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , continue; ) ; }
Distance : 15

2
Tree	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

3
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 17

4
Tree	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 15

5
Tree	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 15

6
Tree	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 15

7
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Distance : 18

8
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

9
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } array
Distance : 18

10
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

11
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Distance : 18

12
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 19

13
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } array
Distance : 23

14
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 13

15
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

16
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

17
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

18
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

19
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Distance : 18

20
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 19

21
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

22
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

23
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 24

24
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Distance : 18

25
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Class
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Class
Distance : 13

26
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , super(); ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , super(); ) ; }
Distance : 17

27
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Test
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Test
Distance : 13

28
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , super(); ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , super(); ) ; }
Distance : 15

29
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

30
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

31
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , CHAR_CONS ) ; }
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , CHAR_CONS ) ; }
Distance : 14

32
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 13

33
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) %
Distance : 16

34
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Distance : 16

35
Tree	if ( length * length . [ ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Code	if ( length * length . [ ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Distance : 21

36
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Distance : 20

37
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Distance : 14

38
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

39
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

40
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

41
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

42
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 17

43
Tree	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

44
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , null ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , null ) ; }
Distance : 17

45
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

46
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 15

47
Tree	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

48
Tree	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

49
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; }
Distance : 17

50
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Distance : 17

51
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Distance : 19

52
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 14

53
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , return; ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , return; ) ; }
Distance : 17

54
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

55
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

56
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

57
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

58
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Class
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Class
Distance : 12

59
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } notifyListeners
Distance : 15

60
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Distance : 20

61
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 21

62
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

63
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Test
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Test
Distance : 13

64
Tree	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 22

65
Tree	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 22

66
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . IllegalArgumentException () ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . IllegalArgumentException () ) ; } class
Distance : 22

67
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } notifyListeners
Distance : 15

68
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; } array
Distance : 18

69
Tree	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 22

70
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 26

71
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

72
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

73
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 26

74
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } class
Distance : 15

75
Tree	if ( length * length . startData ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Class
Code	if ( length * length . startData ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Class
Distance : 22

76
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 26

77
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 26

78
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 21

79
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . throw () ) ; } notifyListeners
Distance : 22

80
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Distance : 18

81
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Distance : 20

82
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Test
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Test
Distance : 14

83
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; } notifyListeners
Distance : 18

84
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Distance : 14

85
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Distance : 14

86
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } array
Distance : 15

87
Tree	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

88
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } class
Distance : 15

89
Tree	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

90
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; } Class
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; } Class
Distance : 15

91
Tree	if ( length * length . startData ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Test
Code	if ( length * length . startData ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Test
Distance : 22

92
Tree	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 19

93
Tree	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

94
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; } Test
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; } Test
Distance : 15

95
Tree	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( NUMBER_CONSTANT * ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 19

96
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

97
Tree	if ( length * length . [ ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Code	if ( length * length . [ ( NUMBER_CONSTANT , NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Distance : 21

98
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; }
Distance : 20

99
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 15

100
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Distance : 14

101
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Test
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Test
Distance : 21

102
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 14

103
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Distance : 18

104
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; }
Distance : 22

105
Tree	if ( ( length = length . this ( - NUMBER_CONSTANT ) ) == return; ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Code	if ( ( length = length . this ( - NUMBER_CONSTANT ) ) == return; ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Distance : 16

106
Tree	if ( ( length = length . != ( - NUMBER_CONSTANT ) ) == continue; ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Code	if ( ( length = length . != ( - NUMBER_CONSTANT ) ) == continue; ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Distance : 15

107
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

108
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 20

109
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } array
Distance : 18

110
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Distance : 14

111
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , length ) ; } class
Distance : 18

112
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . ( ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . ( ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } notifyListeners
Distance : 19

113
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

114
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . ( () ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . ( () ) ; } array
Distance : 22

115
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 26

116
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } Class
Distance : 13

117
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } array
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length ) ; } array
Distance : 15

118
Tree	if ( ( length = length . this ( - NUMBER_CONSTANT ) ) == break; ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Code	if ( ( length = length . this ( - NUMBER_CONSTANT ) ) == break; ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Distance : 16

119
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . length () ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length . [ () . length () ) ; }
Distance : 21

120
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 17

121
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 15

122
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , length , length ) ; } class
Distance : 23

123
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 25

124
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Class
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Class
Distance : 14

125
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Distance : 17

126
Tree	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length + ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

127
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , return; ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , return; ) ; }
Distance : 15

128
Tree	if ( length * length . NUMBER_CONSTANT ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Class
Code	if ( length * length . NUMBER_CONSTANT ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , NUMBER_CONSTANT , categoryKeys.length , NUMBER_CONSTANT , length ) ; } Class
Distance : 21

129
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Distance : 16

130
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } class
Distance : 16

131
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &
Distance : 16

132
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Distance : 18

133
Tree	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

134
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

135
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

136
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Distance : 14

137
Tree	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( NUMBER_CONSTANT - length / ( length / length < NUMBER_CONSTANT ) ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

138
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , super(); ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , super(); ) ; }
Distance : 15

139
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } notifyListeners
Distance : 26

140
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } array
Distance : 20

141
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Test
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Test
Distance : 12

142
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Distance : 14

143
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } class
Distance : 18

144
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } notifyListeners
Distance : 18

145
Tree	if ( ( length = length . this ( - NUMBER_CONSTANT ) ) == null ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Code	if ( ( length = length . this ( - NUMBER_CONSTANT ) ) == null ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Distance : 16

146
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , ^ ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , ^ ) ; }
Distance : 14

147
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) <=
Distance : 16

148
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } array
Distance : 16

149
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 13

150
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

151
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( STRING_CONSTANT , return; ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( STRING_CONSTANT , return; ) ; }
Distance : 15

152
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

153
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

154
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

155
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , continue; ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , continue; ) ; }
Distance : 17

156
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } notifyListeners
Distance : 18

157
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } notifyListeners
Distance : 21

158
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , length ) ; }
Distance : 14

159
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

160
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

161
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , false ) ; }
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , false ) ; }
Distance : 14

162
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } array
Distance : 24

163
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

164
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , super ) ; }
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length , super ) ; }
Distance : 14

165
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } class
Distance : 18

166
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , continue; ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , continue; ) ; }
Distance : 15

167
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } class
Distance : 18

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

1
Tree	this . dataset = setDataset ( dataset ) ; class
Code	this . dataset = setDataset ( dataset ) ; class
Distance : 5

2
Tree	NewTypeInference.INEXISTENT_PROPERTY = null ;
Code	NewTypeInference.INEXISTENT_PROPERTY = null ;
Distance : 4

3
Tree	this . dataset = dataset . setDataset ( dataset , false ) ;
Code	this . dataset = dataset . setDataset ( dataset , false ) ;
Distance : 8

4
Tree	dataset = dataset . setDataset ( RotationConvention.VECTOR_OPERATOR , dataset ) ;
Code	dataset = dataset . setDataset ( RotationConvention.VECTOR_OPERATOR , dataset ) ;
Distance : 6

5
Tree	RemoveUnusedCode.Builder = setDataset () ;
Code	RemoveUnusedCode.Builder = setDataset () ;
Distance : 4

6
Tree	dataset . setDataset ( this . dataset ) ;
Code	dataset . setDataset ( this . dataset ) ;
Distance : 4

7
Tree	setDataset () ;
Code	setDataset () ;
Distance : 3

8
Tree	dataset . setDataset ( this , dataset ) ;
Code	dataset . setDataset ( this , dataset ) ;
Distance : 4

9
Tree	setDataset ( NewTypeInference.INEXISTENT_PROPERTY , LocalizedFormats.DIMENSIONS_MISMATCH ) ;
Code	setDataset ( NewTypeInference.INEXISTENT_PROPERTY , LocalizedFormats.DIMENSIONS_MISMATCH ) ;
Distance : 3

10
Tree	setDataset ( NewTypeInference.INEXISTENT_PROPERTY , f.length ) ;
Code	setDataset ( NewTypeInference.INEXISTENT_PROPERTY , f.length ) ;
Distance : 3

11
Tree	setDataset ( NewTypeInference.INEXISTENT_PROPERTY , typeArguments.length ) ;
Code	setDataset ( NewTypeInference.INEXISTENT_PROPERTY , typeArguments.length ) ;
Distance : 3

12
Tree	dataset = NUMBER_CONSTANT ;
Code	dataset = NUMBER_CONSTANT ;
Distance : 4

13
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

14
Tree	dataset = new dataset ( dataset ) ;
Code	dataset = new dataset ( dataset ) ;
Distance : 4

15
Tree	this . setDataset () ;
Code	this . setDataset () ;
Distance : 4

16
Tree	dataset = null ;
Code	dataset = null ;
Distance : 4

17
Tree	dataset = new dataset <> () ;
Code	dataset = new dataset <> () ;
Distance : 5

18
Tree	this . dataset = dataset ( dataset ) ;
Code	this . dataset = dataset ( dataset ) ;
Distance : 5

19
Tree	dataset = dataset . setDataset () ;
Code	dataset = dataset . setDataset () ;
Distance : 5

20
Tree	this . dataset = ( dataset ) dataset . setDataset () ; array
Code	this . dataset = ( dataset ) dataset . setDataset () ; array
Distance : 9

21
Tree	entry.map = setDataset () ;
Code	entry.map = setDataset () ;
Distance : 4

22
Tree	dataset = NUMBER_CONSTANT / dataset ; notifyListeners
Code	dataset = NUMBER_CONSTANT / dataset ; notifyListeners
Distance : 6

23
Tree	dataset = dataset . setDataset ( dataset ) ; array
Code	dataset = dataset . setDataset ( dataset ) ; array
Distance : 5

24
Tree	this . dataset = new ArrayRealVector ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new ArrayRealVector ( dataset ) . setDataset ( dataset ) ;
Distance : 10

25
Tree	this . dataset = new getParent ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new getParent ( dataset ) . setDataset ( dataset ) ;
Distance : 10

26
Tree	dataset = NUMBER_CONSTANT ; array
Code	dataset = NUMBER_CONSTANT ; array
Distance : 5

27
Tree	this . dataset = new getParent ( dataset ) ;
Code	this . dataset = new getParent ( dataset ) ;
Distance : 6

28
Tree	dataset = NUMBER_CONSTANT / dataset ; class
Code	dataset = NUMBER_CONSTANT / dataset ; class
Distance : 6

29
Tree	dataset = NUMBER_CONSTANT / dataset ; array
Code	dataset = NUMBER_CONSTANT / dataset ; array
Distance : 6

30
Tree	dataset = this . dataset . setDataset () ; notifyListeners
Code	dataset = this . dataset . setDataset () ; notifyListeners
Distance : 8

31
Tree	dataset = false ;
Code	dataset = false ;
Distance : 4

32
Tree	dataset = new getSolver ( dataset ) ;
Code	dataset = new getSolver ( dataset ) ;
Distance : 4

33
Tree	this . dataset . setDataset () ; class
Code	this . dataset . setDataset () ; class
Distance : 6

34
Tree	dataset = new Cartesian3D <> () ;
Code	dataset = new Cartesian3D <> () ;
Distance : 6

35
Tree	this . dataset = setDataset ( dataset ) ;
Code	this . dataset = setDataset ( dataset ) ;
Distance : 4

36
Tree	dataset = this . dataset . setDataset () ; class
Code	dataset = this . dataset . setDataset () ; class
Distance : 8

37
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; array
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; array
Distance : 5

38
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; Class
Code	this . dataset = dataset . setDataset ( dataset , false ) ; Class
Distance : 9

39
Tree	dataset = dataset . setDataset ( RandomSource.MT_64 ) ;
Code	dataset = dataset . setDataset ( RandomSource.MT_64 ) ;
Distance : 5

40
Tree	dataset = dataset . setDataset ( RandomSource.MT_64 , dataset ) ;
Code	dataset = dataset . setDataset ( RandomSource.MT_64 , dataset ) ;
Distance : 6

41
Tree	typeArguments.length = true ;
Code	typeArguments.length = true ;
Distance : 4

42
Tree	NewTypeInference.INEXISTENT_PROPERTY = dataset ;
Code	NewTypeInference.INEXISTENT_PROPERTY = dataset ;
Distance : 3

43
Tree	dataset = dataset . setDataset ( dataset ) ; class
Code	dataset = dataset . setDataset ( dataset ) ; class
Distance : 5

44
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

45
Tree	this . dataset = new ArrayRealVector ( dataset ) ;
Code	this . dataset = new ArrayRealVector ( dataset ) ;
Distance : 6

46
Tree	this . dataset = true ; Test
Code	this . dataset = true ; Test
Distance : 5

47
Tree	typeArguments.length = ( dataset ) dataset . setDataset () ;
Code	typeArguments.length = ( dataset ) dataset . setDataset () ;
Distance : 6

48
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( dataset ) dataset . setDataset () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( dataset ) dataset . setDataset () ;
Distance : 6

49
Tree	this . dataset = dataset ( dataset ) ; array
Code	this . dataset = dataset ( dataset ) ; array
Distance : 6

50
Tree	dataset . setDataset ( STRING_CONSTANT , dataset ) ; array
Code	dataset . setDataset ( STRING_CONSTANT , dataset ) ; array
Distance : 5

51
Tree	dataset . setDataset ( STRING_CONSTANT , dataset ) ; class
Code	dataset . setDataset ( STRING_CONSTANT , dataset ) ; class
Distance : 5

52
Tree	this . dataset = dataset ( dataset ) ; class
Code	this . dataset = dataset ( dataset ) ; class
Distance : 6

53
Tree	dataset . setDataset ( this , dataset ) ; array
Code	dataset . setDataset ( this , dataset ) ; array
Distance : 5

54
Tree	dataset . setDataset ( this , dataset ) ; class
Code	dataset . setDataset ( this , dataset ) ; class
Distance : 5

55
Tree	dataset . setDataset ( dataset ) ;
Code	dataset . setDataset ( dataset ) ;
Distance : 2

56
Tree	setDataset () ; notifyListeners
Code	setDataset () ; notifyListeners
Distance : 4

57
Tree	this . dataset = dataset ( dataset ) ; notifyListeners
Code	this . dataset = dataset ( dataset ) ; notifyListeners
Distance : 6

58
Tree	this . dataset . setDataset ( dataset ) ; class
Code	this . dataset . setDataset ( dataset ) ; class
Distance : 5

59
Tree	dataset /= dataset ; notifyListeners
Code	dataset /= dataset ; notifyListeners
Distance : 4

60
Tree	dataset = this . dataset ; array
Code	dataset = this . dataset ; array
Distance : 6

61
Tree	dataset = this . dataset ; class
Code	dataset = this . dataset ; class
Distance : 6

62
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

63
Tree	dataset /= dataset ; class
Code	dataset /= dataset ; class
Distance : 4

64
Tree	this . setDataset () ; array
Code	this . setDataset () ; array
Distance : 5

65
Tree	dataset = true ; Test
Code	dataset = true ; Test
Distance : 5

66
Tree	this . dataset . setDataset ( dataset ) ; array
Code	this . dataset . setDataset ( dataset ) ; array
Distance : 5

67
Tree	setDataset () ; class
Code	setDataset () ; class
Distance : 4

68
Tree	setDataset ( dataset , STRING_CONSTANT ) ; array
Code	setDataset ( dataset , STRING_CONSTANT ) ; array
Distance : 3

69
Tree	dataset = dataset . setDataset () ; class
Code	dataset = dataset . setDataset () ; class
Distance : 6

70
Tree	setDataset () ; array
Code	setDataset () ; array
Distance : 4

71
Tree	this . setDataset () ; class
Code	this . setDataset () ; class
Distance : 5

72
Tree	this . setDataset () ; notifyListeners
Code	this . setDataset () ; notifyListeners
Distance : 5

73
Tree	setDataset ( global.root ) ;
Code	setDataset ( global.root ) ;
Distance : 1

74
Tree	setDataset ( dataset , STRING_CONSTANT ) ; notifyListeners
Code	setDataset ( dataset , STRING_CONSTANT ) ; notifyListeners
Distance : 3

75
Tree	dataset = setDataset () ; notifyListeners
Code	dataset = setDataset () ; notifyListeners
Distance : 5

76
Tree	dataset = setDataset () ; class
Code	dataset = setDataset () ; class
Distance : 5

77
Tree	setDataset ( dataset , STRING_CONSTANT ) ;
Code	setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 2

78
Tree	dataset /= dataset ; array
Code	dataset /= dataset ; array
Distance : 4

79
Tree	RemoveUnusedCode.Builder = ( dataset ) dataset . setDataset () ;
Code	RemoveUnusedCode.Builder = ( dataset ) dataset . setDataset () ;
Distance : 6

80
Tree	setDataset ( dataset ) ; notifyListeners
Code	setDataset ( dataset ) ; notifyListeners
Distance : 1

81
Tree	setDataset ( java.util.Locale.US ) ;
Code	setDataset ( java.util.Locale.US ) ;
Distance : 1

82
Tree	this . dataset = dataset . setDataset ( Nullability.EXPLICIT ) ;
Code	this . dataset = dataset . setDataset ( Nullability.EXPLICIT ) ;
Distance : 7

83
Tree	dataset = dataset . setDataset ( dataset ) ;
Code	dataset = dataset . setDataset ( dataset ) ;
Distance : 4

84
Tree	setDataset ( dataset ) ;
Code	setDataset ( dataset ) ;
Distance : 0

85
Tree	this . dataset = dataset . setDataset ( RotationConvention.VECTOR_OPERATOR ) ;
Code	this . dataset = dataset . setDataset ( RotationConvention.VECTOR_OPERATOR ) ;
Distance : 7

86
Tree	dataset = NUMBER_CONSTANT ; notifyListeners
Code	dataset = NUMBER_CONSTANT ; notifyListeners
Distance : 5

87
Tree	dataset = dataset . setDataset () ; notifyListeners
Code	dataset = dataset . setDataset () ; notifyListeners
Distance : 6

88
Tree	this . dataset = true ; Class
Code	this . dataset = true ; Class
Distance : 5

89
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

90
Tree	dataset = break; ;
Code	dataset = break; ;
Distance : 4

91
Tree	this . dataset = dataset . setDataset () ;
Code	this . dataset = dataset . setDataset () ;
Distance : 7

92
Tree	this . dataset = ( dataset ) dataset . setDataset () ;
Code	this . dataset = ( dataset ) dataset . setDataset () ;
Distance : 8

93
Tree	dataset = continue; ;
Code	dataset = continue; ;
Distance : 4

94
Tree	dataset = this . dataset . setDataset () ;
Code	dataset = this . dataset . setDataset () ;
Distance : 7

95
Tree	RemoveUnusedCode.Builder = true ;
Code	RemoveUnusedCode.Builder = true ;
Distance : 4

96
Tree	this . dataset = includeInterval ;
Code	this . dataset = includeInterval ;
Distance : 4

97
Tree	this . dataset = super(); ;
Code	this . dataset = super(); ;
Distance : 4

98
Tree	dataset = ( dataset ) dataset . setDataset () ; array
Code	dataset = ( dataset ) dataset . setDataset () ; array
Distance : 7

99
Tree	this . dataset . setDataset ( dataset ) ;
Code	this . dataset . setDataset ( dataset ) ;
Distance : 4

100
Tree	dataset = ( dataset ) dataset . setDataset () ; class
Code	dataset = ( dataset ) dataset . setDataset () ; class
Distance : 7

101
Tree	this . dataset = getSolver ;
Code	this . dataset = getSolver ;
Distance : 4

102
Tree	this . dataset . setDataset () ;
Code	this . dataset . setDataset () ;
Distance : 5

103
Tree	dataset = ( dataset ) dataset . setDataset () ; notifyListeners
Code	dataset = ( dataset ) dataset . setDataset () ; notifyListeners
Distance : 7

104
Tree	entry.map = null ;
Code	entry.map = null ;
Distance : 4

105
Tree	this . dataset = continue; ;
Code	this . dataset = continue; ;
Distance : 4

106
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; class
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; class
Distance : 5

107
Tree	this . dataset = new Coordinates3D ( dataset ) ;
Code	this . dataset = new Coordinates3D ( dataset ) ;
Distance : 6

108
Tree	this . dataset = new dataset ( dataset ) ;
Code	this . dataset = new dataset ( dataset ) ;
Distance : 6

109
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

110
Tree	dataset = Coordinates3D ;
Code	dataset = Coordinates3D ;
Distance : 4

111
Tree	this . dataset = null ;
Code	this . dataset = null ;
Distance : 4

112
Tree	dataset = this . dataset ;
Code	dataset = this . dataset ;
Distance : 5

113
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

114
Tree	NewTypeInference.INEXISTENT_PROPERTY = true ;
Code	NewTypeInference.INEXISTENT_PROPERTY = true ;
Distance : 4

115
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; notifyListeners
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; notifyListeners
Distance : 5

116
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; Test
Code	this . dataset = dataset . setDataset ( dataset , false ) ; Test
Distance : 9

117
Tree	RemoveUnusedCode.Builder = new Coordinates3D <> () ;
Code	RemoveUnusedCode.Builder = new Coordinates3D <> () ;
Distance : 6

118
Tree	entry.map = new Coordinates3D <> () ;
Code	entry.map = new Coordinates3D <> () ;
Distance : 6

119
Tree	this . dataset = return; ;
Code	this . dataset = return; ;
Distance : 4

120
Tree	typeArguments.length = new Coordinates3D <> () ;
Code	typeArguments.length = new Coordinates3D <> () ;
Distance : 6

121
Tree	dataset /= dataset ;
Code	dataset /= dataset ;
Distance : 3

122
Tree	dataset = new Coordinates3D <> () ;
Code	dataset = new Coordinates3D <> () ;
Distance : 6

123
Tree	setDataset ( dataset , STRING_CONSTANT ) ; class
Code	setDataset ( dataset , STRING_CONSTANT ) ; class
Distance : 3

124
Tree	this . dataset = Coordinates3D ;
Code	this . dataset = Coordinates3D ;
Distance : 4

125
Tree	dataset = new Coordinates3D ( dataset ) ;
Code	dataset = new Coordinates3D ( dataset ) ;
Distance : 4

126
Tree	dataset = hotspot ;
Code	dataset = hotspot ;
Distance : 4

127
Tree	dataset = setDataset () ; array
Code	dataset = setDataset () ; array
Distance : 5

128
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

129
Tree	setDataset ( dataset ) ; class
Code	setDataset ( dataset ) ; class
Distance : 1

130
Tree	dataset = super(); ;
Code	dataset = super(); ;
Distance : 4

131
Tree	dataset . setDataset ( dataset ) ; notifyListeners
Code	dataset . setDataset ( dataset ) ; notifyListeners
Distance : 3

132
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

133
Tree	this . dataset = dataset . setDataset ( TypeValidation.DISABLED ) ;
Code	this . dataset = dataset . setDataset ( TypeValidation.DISABLED ) ;
Distance : 7

134
Tree	dataset = new Cartesian3D ( dataset ) ;
Code	dataset = new Cartesian3D ( dataset ) ;
Distance : 4

135
Tree	typeArguments.length = setDataset () ;
Code	typeArguments.length = setDataset () ;
Distance : 4

136
Tree	entry.map = ( dataset ) dataset . setDataset () ;
Code	entry.map = ( dataset ) dataset . setDataset () ;
Distance : 6

137
Tree	this . dataset = ( dataset ) dataset . setDataset () ; notifyListeners
Code	this . dataset = ( dataset ) dataset . setDataset () ; notifyListeners
Distance : 9

138
Tree	this . dataset = dataset . setDataset ( RandomSource.MT_64 ) ;
Code	this . dataset = dataset . setDataset ( RandomSource.MT_64 ) ;
Distance : 7

139
Tree	this . dataset . setDataset ( dataset ) ; notifyListeners
Code	this . dataset . setDataset ( dataset ) ; notifyListeners
Distance : 5

140
Tree	dataset . setDataset ( dataset ) ; class
Code	dataset . setDataset ( dataset ) ; class
Distance : 3

141
Tree	dataset . setDataset () ;
Code	dataset . setDataset () ;
Distance : 4

142
Tree	dataset . setDataset ( STRING_CONSTANT , dataset ) ;
Code	dataset . setDataset ( STRING_CONSTANT , dataset ) ;
Distance : 4

143
Tree	dataset . setDataset ( dataset ) ; array
Code	dataset . setDataset ( dataset ) ; array
Distance : 3

144
Tree	dataset = setDataset () ;
Code	dataset = setDataset () ;
Distance : 4

145
Tree	dataset = true ; Class
Code	dataset = true ; Class
Distance : 5

146
Tree	dataset . setDataset ( STRING_CONSTANT , dataset ) ; notifyListeners
Code	dataset . setDataset ( STRING_CONSTANT , dataset ) ; notifyListeners
Distance : 5

147
Tree	setDataset ( NewTypeInference.INEXISTENT_PROPERTY ) ;
Code	setDataset ( NewTypeInference.INEXISTENT_PROPERTY ) ;
Distance : 1

148
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 4

149
Tree	dataset . setDataset ( this . dataset ) ; array
Code	dataset . setDataset ( this . dataset ) ; array
Distance : 5

150
Tree	dataset = ( dataset ) dataset . setDataset () ;
Code	dataset = ( dataset ) dataset . setDataset () ;
Distance : 6

151
Tree	this . dataset . setDataset () ; array
Code	this . dataset . setDataset () ; array
Distance : 6

152
Tree	this . dataset = dataset . setDataset ( dataset ) ; array
Code	this . dataset = dataset . setDataset ( dataset ) ; array
Distance : 7

153
Tree	this . dataset = dataset . setDataset () ; notifyListeners
Code	this . dataset = dataset . setDataset () ; notifyListeners
Distance : 8

154
Tree	dataset . setDataset ( this . dataset ) ; notifyListeners
Code	dataset . setDataset ( this . dataset ) ; notifyListeners
Distance : 5

155
Tree	this . dataset = dataset . setDataset ( dataset ) ; notifyListeners
Code	this . dataset = dataset . setDataset ( dataset ) ; notifyListeners
Distance : 7

156
Tree	this . dataset = dataset . setDataset () ; class
Code	this . dataset = dataset . setDataset () ; class
Distance : 8

157
Tree	setDataset ( dataset ) ; array
Code	setDataset ( dataset ) ; array
Distance : 1

158
Tree	dataset . setDataset () ; notifyListeners
Code	dataset . setDataset () ; notifyListeners
Distance : 5

159
Tree	dataset = NUMBER_CONSTANT ; class
Code	dataset = NUMBER_CONSTANT ; class
Distance : 5

160
Tree	dataset = dataset . setDataset ( LocalizedFormats.NO_DATA , dataset ) ;
Code	dataset = dataset . setDataset ( LocalizedFormats.NO_DATA , dataset ) ;
Distance : 6

161
Tree	NewTypeInference.INEXISTENT_PROPERTY = setDataset () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = setDataset () ;
Distance : 4

162
Tree	RemoveUnusedCode.Builder = null ;
Code	RemoveUnusedCode.Builder = null ;
Distance : 4

163
Tree	entry.map = dataset ;
Code	entry.map = dataset ;
Distance : 3

164
Tree	RemoveUnusedCode.Builder = dataset ;
Code	RemoveUnusedCode.Builder = dataset ;
Distance : 3

165
Tree	entry.map = true ;
Code	entry.map = true ;
Distance : 4

166
Tree	dataset = dataset . setDataset ( TypeValidation.DISABLED , dataset ) ;
Code	dataset = dataset . setDataset ( TypeValidation.DISABLED , dataset ) ;
Distance : 6

167
Tree	NewTypeInference.INEXISTENT_PROPERTY = new Coordinates3D <> () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new Coordinates3D <> () ;
Distance : 6

168
Tree	typeArguments.length = null ;
Code	typeArguments.length = null ;
Distance : 4

169
Tree	dataset = this . dataset . setDataset () ; array
Code	dataset = this . dataset . setDataset () ; array
Distance : 8

170
Tree	dataset = dataset ; notifyListeners
Code	dataset = dataset ; notifyListeners
Distance : 4

171
Tree	dataset = dataset . setDataset ( LocalizedFormats.NO_DATA ) ;
Code	dataset = dataset . setDataset ( LocalizedFormats.NO_DATA ) ;
Distance : 5

172
Tree	this . dataset = dataset ; array
Code	this . dataset = dataset ; array
Distance : 5

173
Tree	dataset = dataset . setDataset ( TypeValidation.DISABLED ) ;
Code	dataset = dataset . setDataset ( TypeValidation.DISABLED ) ;
Distance : 5

174
Tree	dataset = x.length ;
Code	dataset = x.length ;
Distance : 4

175
Tree	typeArguments.length = dataset ;
Code	typeArguments.length = dataset ;
Distance : 3

176
Tree	this . dataset = setDataset ( dataset ) ; notifyListeners
Code	this . dataset = setDataset ( dataset ) ; notifyListeners
Distance : 5

177
Tree	this . dataset = dataset . setDataset ( dataset , true ) ;
Code	this . dataset = dataset . setDataset ( dataset , true ) ;
Distance : 8

178
Tree	this . dataset = new Coordinates3D ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new Coordinates3D ( dataset ) . setDataset ( dataset ) ;
Distance : 10

179
Tree	this . dataset = new dataset ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new dataset ( dataset ) . setDataset ( dataset ) ;
Distance : 10

180
Tree	dataset . setDataset ( this . dataset ) ; class
Code	dataset . setDataset ( this . dataset ) ; class
Distance : 5

181
Tree	dataset = new getSolver <> () ;
Code	dataset = new getSolver <> () ;
Distance : 6

182
Tree	dataset = dataset ; class
Code	dataset = dataset ; class
Distance : 4

183
Tree	this . dataset = dataset ; notifyListeners
Code	this . dataset = dataset ; notifyListeners
Distance : 5

184
Tree	dataset . setDataset () ; class
Code	dataset . setDataset () ; class
Distance : 5

185
Tree	setDataset ( callSite.parent ) ;
Code	setDataset ( callSite.parent ) ;
Distance : 1

186
Tree	this . dataset = dataset . setDataset () ; array
Code	this . dataset = dataset . setDataset () ; array
Distance : 8

187
Tree	setDataset ( callSite.parent , typeArguments.length ) ;
Code	setDataset ( callSite.parent , typeArguments.length ) ;
Distance : 3

188
Tree	this . dataset = setDataset ( dataset ) ; array
Code	this . dataset = setDataset ( dataset ) ; array
Distance : 5

189
Tree	dataset = dataset . setDataset ( RotationConvention.VECTOR_OPERATOR ) ;
Code	dataset = dataset . setDataset ( RotationConvention.VECTOR_OPERATOR ) ;
Distance : 5

190
Tree	dataset = dataset . setDataset ( dataset ) ; notifyListeners
Code	dataset = dataset . setDataset ( dataset ) ; notifyListeners
Distance : 5

191
Tree	this . dataset = ( dataset ) dataset . setDataset () ; class
Code	this . dataset = ( dataset ) dataset . setDataset () ; class
Distance : 9

192
Tree	this . dataset = dataset . setDataset ( dataset ) ; class
Code	this . dataset = dataset . setDataset ( dataset ) ; class
Distance : 7

193
Tree	this . dataset = dataset ; class
Code	this . dataset = dataset ; class
Distance : 5

194
Tree	dataset = dataset ; array
Code	dataset = dataset ; array
Distance : 4

195
Tree	this . dataset . setDataset () ; notifyListeners
Code	this . dataset . setDataset () ; notifyListeners
Distance : 6

196
Tree	dataset . setDataset () ; array
Code	dataset . setDataset () ; array
Distance : 5

197
Tree	dataset = dataset . setDataset () ; array
Code	dataset = dataset . setDataset () ; array
Distance : 6

198
Tree	dataset . setDataset ( this , dataset ) ; notifyListeners
Code	dataset . setDataset ( this , dataset ) ; notifyListeners
Distance : 5

199
Tree	dataset = this . dataset ; notifyListeners
Code	dataset = this . dataset ; notifyListeners
Distance : 6

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 4

1
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 , null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 , null ) ;
Distance : 2

2
Tree	PathIterator p1 = p1 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

3
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , p1 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , p1 ) ;
Distance : 3

4
Tree	PathIterator p2 = p1 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

5
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , RotationConvention.FRAME_TRANSFORM ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

6
Tree	PathIterator iterator2 ;
Code	PathIterator iterator2 ;
Distance : 7

7
Tree	PathIterator p2 ;
Code	PathIterator p2 ;
Distance : 7

8
Tree	PathIterator p1 ;
Code	PathIterator p1 ;
Distance : 8

9
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

10
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

11
Tree	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Distance : 0

12
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

13
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p2 < p1 > ) p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p2 < p1 > ) p1 ) ;
Distance : 8

14
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p1 < p1 > ) getPathIterator ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p1 < p1 > ) getPathIterator ) ;
Distance : 8

15
Tree	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

16
Tree	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

17
Tree	PathIterator p2 = getPathIterator ( p1 ) ;
Code	PathIterator p2 = getPathIterator ( p1 ) ;
Distance : 4

18
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 5

19
Tree	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 11

20
Tree	PathIterator iterator2 = getPathIterator ( Cartesian1D.ZERO ) ;
Code	PathIterator iterator2 = getPathIterator ( Cartesian1D.ZERO ) ;
Distance : 3

21
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( short ) NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( short ) NUMBER_CONSTANT ) ;
Distance : 5

22
Tree	PathIterator iterator2 = this . p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = this . p1 . getPathIterator ( p1 ) ;
Distance : 4

23
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 9

24
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , p2 ) ;
Distance : 3

25
Tree	PathIterator iterator2 = this . p1 . getPathIterator ( JavaVersion.JAVA_1_5 ) ;
Code	PathIterator iterator2 = this . p1 . getPathIterator ( JavaVersion.JAVA_1_5 ) ;
Distance : 4

26
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , Verification.AT_LEAST ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , Verification.AT_LEAST ) ;
Distance : 7

27
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

28
Tree	PathIterator iterator2 = p1 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

29
Tree	PathIterator iterator2 = this . p1 . getPathIterator () ;
Code	PathIterator iterator2 = this . p1 . getPathIterator () ;
Distance : 5

30
Tree	PathIterator iterator2 = this . p1 . getPathIterator ( Locale.ENGLISH ) ;
Code	PathIterator iterator2 = this . p1 . getPathIterator ( Locale.ENGLISH ) ;
Distance : 4

31
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p1 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p1 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 12

32
Tree	PathIterator p1 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

33
Tree	PathIterator iterator2 = this . p1 . getPathIterator ( LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR ) ;
Code	PathIterator iterator2 = this . p1 . getPathIterator ( LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR ) ;
Distance : 4

34
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

35
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

36
Tree	PathIterator p2 = getPathIterator ( null , p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = getPathIterator ( null , p1 . getPathIterator ( null ) ) ;
Distance : 7

37
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 11

38
Tree	PathIterator iterator2 = p1 . getPathIterator () ;
Code	PathIterator iterator2 = p1 . getPathIterator () ;
Distance : 4

39
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

40
Tree	PathIterator iterator2 = p1 . getPathIterator ( Cartesian1D.ZERO ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( Cartesian1D.ZERO ) ;
Distance : 2

41
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

42
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , null ) ;
Distance : 3

43
Tree	PathIterator p2 = p1 . getPathIterator ( null , PathIterator ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , PathIterator ) ;
Distance : 4

44
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 ) ;
Distance : 2

45
Tree	PathIterator iterator2 = this . p2 . getPathIterator () ;
Code	PathIterator iterator2 = this . p2 . getPathIterator () ;
Distance : 5

46
Tree	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( p1 ) ;
Distance : 2

47
Tree	private PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	private PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

48
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

49
Tree	PathIterator iterator2 = getPathIterator ( null , p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( null , p1 . getPathIterator ( null ) ) ;
Distance : 6

50
Tree	PathIterator iterator2 = getPathIterator ( this . null ) ;
Code	PathIterator iterator2 = getPathIterator ( this . null ) ;
Distance : 4

51
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . class ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . class ) ;
Distance : 4

52
Tree	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

53
Tree	final PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

54
Tree	PathIterator p2 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 5

55
Tree	PathIterator p2 = p1 . getPathIterator ( p1 . class ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 . class ) ;
Distance : 5

56
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 7

57
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , null ) ;
Distance : 3

58
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , false ) ;
Distance : 4

59
Tree	PathIterator iterator2 = getPathIterator ( p2 ) ;
Code	PathIterator iterator2 = getPathIterator ( p2 ) ;
Distance : 3

60
Tree	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

61
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 11

62
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 13

63
Tree	PathIterator iterator2 = getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = getPathIterator ( p1 ) ;
Distance : 3

64
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p2 ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p2 ) null ) ;
Distance : 4

65
Tree	PathIterator p2 = p1 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

66
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 6

67
Tree	PathIterator iterator2 = p1 . getPathIterator ( LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR ) ;
Distance : 2

68
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) null ) ;
Distance : 6

69
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , STRING_CONSTANT ) ;
Distance : 3

70
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 ) ;
Distance : 1

71
Tree	PathIterator iterator2 = FastMath.PI . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = FastMath.PI . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

72
Tree	PathIterator iterator2 = getPathIterator ( v.data ) ;
Code	PathIterator iterator2 = getPathIterator ( v.data ) ;
Distance : 3

73
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , TransformType.INVERSE ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , TransformType.INVERSE ) ;
Distance : 4

74
Tree	PathIterator p1 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 3

75
Tree	PathIterator p2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 ) ;
Distance : 3

76
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 3

77
Tree	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

78
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 6

79
Tree	PathIterator iterator2 = p2 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

80
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , export.scope ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , p1 , export.scope ) ;
Distance : 7

81
Tree	PathIterator iterator2 = p2 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

82
Tree	private PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	private PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

83
Tree	PathIterator iterator2 = this . p1 . getPathIterator () ;
Code	PathIterator iterator2 = this . p1 . getPathIterator () ;
Distance : 5

84
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 9

85
Tree	PathIterator iterator2 = FastMath.PI . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = FastMath.PI . getPathIterator ( p1 ) ;
Distance : 2

86
Tree	PathIterator p1 = p1 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

87
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 8

88
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

89
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Distance : 6

90
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Distance : 7

91
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 13

92
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 4

93
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 4

94
Tree	PathIterator iterator2 = this . p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = this . p1 . getPathIterator ( p1 ) ;
Distance : 4

95
Tree	PathIterator iterator2 = getPathIterator ( null , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( null , p2 . getPathIterator ( null ) ) ;
Distance : 5

96
Tree	PathIterator p1 = p1 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

97
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 16

98
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Distance : 7

99
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

100
Tree	PathIterator iterator2 = getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 3

101
Tree	PathIterator iterator2 = p1 . p2 ( p1 ) ;
Code	PathIterator iterator2 = p1 . p2 ( p1 ) ;
Distance : 3

102
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

103
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Distance : 2

104
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

105
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . p1 ) ;
Distance : 6

106
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) super(); ) ;
Distance : 6

107
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , p2 ) ;
Distance : 4

108
Tree	PathIterator iterator2 = p1 . getPathIterator ( this . p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( this . p1 ) ;
Distance : 4

109
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 9

110
Tree	PathIterator iterator2 = Double.NaN . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = Double.NaN . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

111
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

112
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

113
Tree	PathIterator p1 = getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p1 = getPathIterator ( ( null [] ) null ) ;
Distance : 7

114
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT , p1 ) ;
Distance : 4

115
Tree	PathIterator iterator2 = p1 . getPathIterator ( RandomSource.WELL_1024_A ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( RandomSource.WELL_1024_A ) ;
Distance : 2

116
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( double ) NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( double ) NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

118
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( boolean ) NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( boolean ) NUMBER_CONSTANT ) ;
Distance : 5

119
Tree	PathIterator p1 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null , null ) ;
Distance : 4

120
Tree	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 16

121
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , this . iterator2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , this . iterator2 ) ;
Distance : 6

122
Tree	PathIterator iterator2 = this . p2 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = this . p2 . getPathIterator ( p1 ) ;
Distance : 3

123
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 10

124
Tree	PathIterator iterator2 = p1 . p1 ( p2 ) ;
Code	PathIterator iterator2 = p1 . p1 ( p2 ) ;
Distance : 3

125
Tree	PathIterator iterator2 = getPathIterator ( MathUtils.TWO_PI ) ;
Code	PathIterator iterator2 = getPathIterator ( MathUtils.TWO_PI ) ;
Distance : 3

126
Tree	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

127
Tree	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

128
Tree	PathIterator iterator2 = p1 . getPathIterator ( RotationConvention.VECTOR_OPERATOR ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( RotationConvention.VECTOR_OPERATOR ) ;
Distance : 2

129
Tree	PathIterator iterator2 = p1 . p1 ( p1 ) ;
Code	PathIterator iterator2 = p1 . p1 ( p1 ) ;
Distance : 3

130
Tree	PathIterator p2 = p1 . getPathIterator ( null , STRING_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , STRING_CONSTANT ) ;
Distance : 4

131
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , p1 ) ;
Distance : 3

132
Tree	PathIterator iterator2 = p1 . getPathIterator ( this . null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( this . null ) ;
Distance : 3

133
Tree	PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

134
Tree	PathIterator p2 = p1 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

135
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 4

136
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 8

137
Tree	PathIterator iterator2 = p2 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

138
Tree	PathIterator p1 = p1 . getPathIterator ( null , STRING_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null , STRING_CONSTANT ) ;
Distance : 4

139
Tree	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

140
Tree	PathIterator iterator2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 4

141
Tree	PathIterator iterator2 = Double.NaN . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = Double.NaN . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

142
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( ( null [] ) null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( ( null [] ) null ) ) ;
Distance : 9

143
Tree	PathIterator p1 = getPathIterator ( p1 ) ;
Code	PathIterator p1 = getPathIterator ( p1 ) ;
Distance : 4

144
Tree	PathIterator p2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

145
Tree	PathIterator p2 = this . p1 . getPathIterator () ;
Code	PathIterator p2 = this . p1 . getPathIterator () ;
Distance : 6

146
Tree	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

147
Tree	PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

148
Tree	PathIterator p2 = getPathIterator ( this . PathIterator ) ;
Code	PathIterator p2 = getPathIterator ( this . PathIterator ) ;
Distance : 6

149
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.SILENT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.SILENT ) ;
Distance : 4

150
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

151
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p1 < p1 > ) p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p1 < p1 > ) p1 ) ;
Distance : 8

152
Tree	PathIterator iterator2 = p1 . getPathIterator ( this . p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( this . p2 ) ;
Distance : 4

153
Tree	PathIterator iterator2 = Double.NaN . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = Double.NaN . getPathIterator ( p1 ) ;
Distance : 2

154
Tree	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 1

155
Tree	PathIterator p2 = p1 . getPathIterator () ;
Code	PathIterator p2 = p1 . getPathIterator () ;
Distance : 5

156
Tree	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 16

157
Tree	PathIterator iterator2 = p2 . getPathIterator () ;
Code	PathIterator iterator2 = p2 . getPathIterator () ;
Distance : 3

158
Tree	PathIterator p1 = getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator p1 = getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 4

159
Tree	PathIterator p2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 3

160
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , true ) ;
Distance : 5

161
Tree	PathIterator iterator2 = p2 . getPathIterator ( null , null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null , null ) ;
Distance : 2

162
Tree	PathIterator p2 = this . p1 . getPathIterator ( p1 ) ;
Code	PathIterator p2 = this . p1 . getPathIterator ( p1 ) ;
Distance : 5

163
Tree	PathIterator p2 = getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator p2 = getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 4

164
Tree	PathIterator p1 = p1 . getPathIterator () ;
Code	PathIterator p1 = p1 . getPathIterator () ;
Distance : 5

165
Tree	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

166
Tree	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p1 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

167
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , null ) ;
Distance : 4

168
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( p1 ) null ) ;
Distance : 3

169
Tree	PathIterator p2 = p1 . getPathIterator ( null , null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , null ) ;
Distance : 4

170
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 . class ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 . class ) ;
Distance : 3

171
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

172
Tree	PathIterator iterator2 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 3

173
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , PathIterator ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , PathIterator ) ;
Distance : 3

174
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p2 < p1 > ) getPathIterator ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p2 < p1 > ) getPathIterator ) ;
Distance : 8

175
Tree	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

176
Tree	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator p1 = p1 . getPathIterator ( STRING_CONSTANT ) ;
Distance : 3

177
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( char ) NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( char ) NUMBER_CONSTANT ) ;
Distance : 5

178
Tree	PathIterator iterator2 = FastMath.PI . getPathIterator ( STRING_CONSTANT ) ;
Code	PathIterator iterator2 = FastMath.PI . getPathIterator ( STRING_CONSTANT ) ;
Distance : 2

179
Tree	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	PathIterator p2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

180
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Distance : 2

181
Tree	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( STRING_CONSTANT , p1 ) ;
Distance : 5

182
Tree	PathIterator iterator2 = getPathIterator ( y.length ) ;
Code	PathIterator iterator2 = getPathIterator ( y.length ) ;
Distance : 3

183
Tree	PathIterator p2 = getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) null ) ;
Distance : 7

184
Tree	PathIterator p2 = p1 . getPathIterator ( this . p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( this . p1 ) ;
Distance : 5

185
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Distance : 2

186
Tree	PathIterator iterator2 = getPathIterator ( this . p1 ) ;
Code	PathIterator iterator2 = getPathIterator ( this . p1 ) ;
Distance : 5

187
Tree	PathIterator iterator2 = getPathIterator ( this . p2 ) ;
Code	PathIterator iterator2 = getPathIterator ( this . p2 ) ;
Distance : 5

188
Tree	PathIterator iterator2 = p2 . getPathIterator ( null , STRING_CONSTANT ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null , STRING_CONSTANT ) ;
Distance : 2

189
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , null ) ;
Distance : 3

190
Tree	PathIterator iterator2 = getPathIterator ( null , p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = getPathIterator ( null , p1 . getPathIterator ( null ) ) ;
Distance : 6

191
Tree	PathIterator iterator2 = this . p1 . getPathIterator ( Cartesian1D.ZERO ) ;
Code	PathIterator iterator2 = this . p1 . getPathIterator ( Cartesian1D.ZERO ) ;
Distance : 4

192
Tree	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 7

193
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 10

194
Tree	PathIterator iterator2 = getPathIterator ( NUMBER_CONSTANT ) ; Class
Code	PathIterator iterator2 = getPathIterator ( NUMBER_CONSTANT ) ; Class
Distance : 4

195
Tree	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	PathIterator iterator2 = getPathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 14

196
Tree	PathIterator iterator2 ; Class
Code	PathIterator iterator2 ; Class
Distance : 8

197
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . class ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . class ) ;
Distance : 4

198
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , RotationConvention.FRAME_TRANSFORM ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 4

199
Tree	PathIterator iterator2 = p2 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 1

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Object () ) + STRING_CONSTANT ; }
Distance : 4

1
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Returns () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Returns () ) + STRING_CONSTANT ; }
Distance : 4

2
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 10

3
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 7

4
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 5

5
Tree	{ return ( double ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

6
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 11

7
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 11

8
Tree	{ return T_TEST [ NUMBER_CONSTANT ] . htmlEscape () ; }
Code	{ return T_TEST [ NUMBER_CONSTANT ] . htmlEscape () ; }
Distance : 9

9
Tree	{ return toolTipText . htmlEscape ( Any.ANY , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , toolTipText ) ; }
Distance : 7

10
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , false ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , false ) ; }
Distance : 7

11
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

12
Tree	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText ) ; }
Distance : 5

13
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

14
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new getMillis () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new getMillis () ) + STRING_CONSTANT ; }
Distance : 5

15
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new SerializableBoundedType () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new SerializableBoundedType () ) + STRING_CONSTANT ; }
Distance : 5

16
Tree	{ return ( char ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( char ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

17
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

18
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

19
Tree	{ return NUMBER_CONSTANT * getEnums ; }
Code	{ return NUMBER_CONSTANT * getEnums ; }
Distance : 10

20
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

21
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText , null ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText , null ) ; }
Distance : 8

22
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

23
Tree	{ return ( int ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

24
Tree	{ return ! toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

25
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new SerializableBoundedType ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new SerializableBoundedType ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 7

26
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

27
Tree	{ return toolTipText ; }
Code	{ return toolTipText ; }
Distance : 9

28
Tree	{ return ! htmlEscape ( toolTipText ) ; }
Code	{ return ! htmlEscape ( toolTipText ) ; }
Distance : 6

29
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

30
Tree	{ throw new NullArgumentException ( ImageMapUtilities ) ; }
Code	{ throw new NullArgumentException ( ImageMapUtilities ) ; }
Distance : 9

31
Tree	{ return htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 7

32
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

33
Tree	{ return ! toolTipText . htmlEscape ( STRING_CONSTANT ) ; }
Code	{ return ! toolTipText . htmlEscape ( STRING_CONSTANT ) ; }
Distance : 6

34
Tree	{ return NUMBER_CONSTANT * com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return NUMBER_CONSTANT * com.google.protobuf.GeneratedMessageV3 ; }
Distance : 10

35
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

36
Tree	{ return entry.map . htmlEscape ( toolTipText ) ; }
Code	{ return entry.map . htmlEscape ( toolTipText ) ; }
Distance : 5

37
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new HashSet () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new HashSet () ) + STRING_CONSTANT ; }
Distance : 4

38
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

39
Tree	{ return toolTipText . htmlEscape ( Any.ANY , Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , Any.ANY ) ; }
Distance : 7

40
Tree	{ return NUMBER_CONSTANT * options.parentChunkCanSeeSymbolsDeclaredInChildren ; }
Code	{ return NUMBER_CONSTANT * options.parentChunkCanSeeSymbolsDeclaredInChildren ; }
Distance : 10

41
Tree	{ return toolTipText ; } Class
Code	{ return toolTipText ; } Class
Distance : 10

42
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableTypeVariable () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableTypeVariable () ) + STRING_CONSTANT ; }
Distance : 4

43
Tree	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

44
Tree	{ throw new RuntimeException ( ImageMapUtilities ) ; }
Code	{ throw new RuntimeException ( ImageMapUtilities ) ; }
Distance : 9

45
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 7

46
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new getMillis ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new getMillis ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 7

47
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

48
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

49
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText ) ; }
Distance : 6

50
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

51
Tree	{ return toolTipText ; } Test
Code	{ return toolTipText ; } Test
Distance : 10

52
Tree	{ return htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 9

53
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

54
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( false ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( false ) + STRING_CONSTANT ; }
Distance : 1

55
Tree	{ return ! toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ! toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

56
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

57
Tree	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) ; }
Distance : 7

58
Tree	{ return toolTipText . htmlEscape ( toolTipText , Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , Any.ANY ) ; }
Distance : 6

59
Tree	{ return null ; }
Code	{ return null ; }
Distance : 10

60
Tree	{ return NUMBER_CONSTANT * StringUtils.EMPTY ; }
Code	{ return NUMBER_CONSTANT * StringUtils.EMPTY ; }
Distance : 10

61
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

62
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , false , false ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , false , false ) ; }
Distance : 11

63
Tree	{ return entry.map ; }
Code	{ return entry.map ; }
Distance : 10

64
Tree	{ return ! htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

65
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , null ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText , null ) ; }
Distance : 7

66
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 8

67
Tree	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT ) ; }
Code	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT ) ; }
Distance : 6

68
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Distance : 9

69
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

70
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 10

71
Tree	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

72
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 10

73
Tree	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

74
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

75
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA ) ; }
Distance : 6

76
Tree	{ return CHI_SQUARE_TEST [ toolTipText ] . htmlEscape () ; }
Code	{ return CHI_SQUARE_TEST [ toolTipText ] . htmlEscape () ; }
Distance : 9

77
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

78
Tree	{ return Strings [ NUMBER_CONSTANT ] . htmlEscape () ; }
Code	{ return Strings [ NUMBER_CONSTANT ] . htmlEscape () ; }
Distance : 9

79
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

80
Tree	{ return htmlEscape ( toolTipText , toolTipText , toolTipText , null ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , toolTipText , null ) ; }
Distance : 9

81
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; }
Distance : 6

82
Tree	{ return ! toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

83
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

84
Tree	{ return htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Distance : 8

85
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape () ) ; }
Distance : 9

86
Tree	{ return iConverters.length ; }
Code	{ return iConverters.length ; }
Distance : 10

87
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

88
Tree	{ return new ThreadSafeDelegatingErrorManager ( toolTipText , toolTipText ) ; }
Code	{ return new ThreadSafeDelegatingErrorManager ( toolTipText , toolTipText ) ; }
Distance : 8

89
Tree	{ return ! toolTipText . htmlEscape ( STRING_CONSTANT ) ; } Test
Code	{ return ! toolTipText . htmlEscape ( STRING_CONSTANT ) ; } Test
Distance : 7

90
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

91
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableTypeVariable ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new SerializableTypeVariable ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 5

92
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 9

93
Tree	{ return toolTipText . htmlEscape ( toolTipText , LocalizedFormats.NO_DATA ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , LocalizedFormats.NO_DATA ) ; }
Distance : 6

94
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Object () ) + STRING_CONSTANT ; }
Distance : 5

95
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new HashSet ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new HashSet ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 5

96
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Distance : 9

97
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

98
Tree	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 6

99
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities , null , false , false ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities , null , false , false ) ; }
Distance : 11

100
Tree	{ return CHI_SQUARE_TEST [ NUMBER_CONSTANT ] . htmlEscape () ; }
Code	{ return CHI_SQUARE_TEST [ NUMBER_CONSTANT ] . htmlEscape () ; }
Distance : 9

101
Tree	{ return htmlEscape ( toolTipText , toolTipText , return; , false , false ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , return; , false , false ) ; }
Distance : 12

102
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 8

103
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 10

104
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

105
Tree	{ return toolTipText . htmlEscape ( Any.ANY , StringUtils.EMPTY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , StringUtils.EMPTY ) ; }
Distance : 7

106
Tree	{ return new HashMap ( toolTipText , toolTipText ) ; }
Code	{ return new HashMap ( toolTipText , toolTipText ) ; }
Distance : 8

107
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

108
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; }
Distance : 5

109
Tree	{ return ! htmlEscape ( toolTipText ) ; } Class
Code	{ return ! htmlEscape ( toolTipText ) ; } Class
Distance : 7

110
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 3

111
Tree	{ return toolTipText . htmlEscape ( toolTipText , false ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , false ) ; }
Distance : 6

112
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , false ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , false ) ; }
Distance : 6

113
Tree	{ return new HashMap ( toolTipText ) ; }
Code	{ return new HashMap ( toolTipText ) ; }
Distance : 7

114
Tree	{ return htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

115
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 8

116
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US ) ; }
Distance : 6

117
Tree	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 8

118
Tree	{ return ! htmlEscape ( toolTipText ) ; } Test
Code	{ return ! htmlEscape ( toolTipText ) ; } Test
Distance : 7

119
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

120
Tree	{ return T_TEST [ toolTipText ] . htmlEscape () ; }
Code	{ return T_TEST [ toolTipText ] . htmlEscape () ; }
Distance : 9

121
Tree	{ return ( int ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( int ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

122
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

123
Tree	{ return new MatchersPrinter ( toolTipText ) ; }
Code	{ return new MatchersPrinter ( toolTipText ) ; }
Distance : 7

124
Tree	{ throw new IllegalArgumentException ( ImageMapUtilities ) ; }
Code	{ throw new IllegalArgumentException ( ImageMapUtilities ) ; }
Distance : 9

125
Tree	{ return defaultString [ NUMBER_CONSTANT ] . htmlEscape () ; }
Code	{ return defaultString [ NUMBER_CONSTANT ] . htmlEscape () ; }
Distance : 9

126
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

127
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

128
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( Any.ANY , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( Any.ANY , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

129
Tree	{ return toolTipText . htmlEscape ( Any.ANY , iValues.length ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , iValues.length ) ; }
Distance : 7

130
Tree	{ return new ThreadSafeDelegatingErrorManager ( toolTipText ) ; }
Code	{ return new ThreadSafeDelegatingErrorManager ( toolTipText ) ; }
Distance : 7

131
Tree	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

132
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

133
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Object () ) + STRING_CONSTANT ; }
Distance : 4

134
Tree	{ return toolTipText . htmlEscape ( Any.ANY , System.out ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , System.out ) ; }
Distance : 7

135
Tree	{ return ! toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

136
Tree	{ return Strings [ toolTipText ] . htmlEscape () ; }
Code	{ return Strings [ toolTipText ] . htmlEscape () ; }
Distance : 9

137
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

138
Tree	{ return new SerializableBoundedType ( toolTipText ) ; }
Code	{ return new SerializableBoundedType ( toolTipText ) ; }
Distance : 7

139
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

140
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

141
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 5

142
Tree	{ return org.joda.time.gwt.util.Arrays ; }
Code	{ return org.joda.time.gwt.util.Arrays ; }
Distance : 10

143
Tree	{ return StringUtils.EMPTY ; }
Code	{ return StringUtils.EMPTY ; }
Distance : 10

144
Tree	{ return this ; }
Code	{ return this ; }
Distance : 10

145
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

146
Tree	{ throw new IllegalArgumentException ( toolTipText ) ; }
Code	{ throw new IllegalArgumentException ( toolTipText ) ; }
Distance : 8

147
Tree	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

148
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) ; }
Distance : 7

149
Tree	{ return StringUtils.EMPTY . htmlEscape ( toolTipText ) ; }
Code	{ return StringUtils.EMPTY . htmlEscape ( toolTipText ) ; }
Distance : 5

150
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

151
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( true ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( true ) + STRING_CONSTANT ; }
Distance : 2

152
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , false , false ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , false , false ) ; }
Distance : 12

153
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 0

154
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( true ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( true ) + STRING_CONSTANT ; }
Distance : 1

155
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

156
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 5

157
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( false ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( false ) + STRING_CONSTANT ; }
Distance : 2

158
Tree	{ return toolTipText . htmlEscape ( toolTipText , iValues.length ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , iValues.length ) ; }
Distance : 6

159
Tree	{ return this ; } notifyListeners
Code	{ return this ; } notifyListeners
Distance : 11

160
Tree	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

161
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities , null ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities , null ) ; }
Distance : 8

162
Tree	{ return htmlEscape ( toolTipText , toolTipText , ImageMapUtilities , null ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , ImageMapUtilities , null ) ; }
Distance : 10

163
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Distance : 8

164
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 9

165
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

166
Tree	{ return toolTipText . htmlEscape ( toolTipText , configureWith ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , configureWith ) ; }
Distance : 6

167
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

168
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

169
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 8

170
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

171
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 10

172
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

173
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 7

174
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 9

175
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 10

176
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , toolTipText , null ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , toolTipText , null ) ; }
Distance : 8

177
Tree	{ return toolTipText . htmlEscape ( Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY ) ; }
Distance : 6

178
Tree	{ return new MatchersPrinter ( toolTipText , toolTipText ) ; }
Code	{ return new MatchersPrinter ( toolTipText , toolTipText ) ; }
Distance : 8

179
Tree	{ return ! ImageMapUtilities . htmlEscape ( STRING_CONSTANT ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( STRING_CONSTANT ) ; }
Distance : 5

180
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 1

181
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , ImageMapUtilities , null ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , ImageMapUtilities , null ) ; }
Distance : 9

182
Tree	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 7

183
Tree	{ return ! toolTipText ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! toolTipText ( toolTipText , ImageMapUtilities ) ; }
Distance : 8

184
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

185
Tree	{ return new SerializableBoundedType ( toolTipText , toolTipText ) ; }
Code	{ return new SerializableBoundedType ( toolTipText , toolTipText ) ; }
Distance : 8

186
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText , null ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText , null ) ; }
Distance : 8

187
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) ; }
Distance : 7

188
Tree	{ return ImageMapUtilities ; }
Code	{ return ImageMapUtilities ; }
Distance : 9

189
Tree	{ return iConverters.length . htmlEscape ( toolTipText ) ; }
Code	{ return iConverters.length . htmlEscape ( toolTipText ) ; }
Distance : 5

190
Tree	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

191
Tree	{ return this ; } array
Code	{ return this ; } array
Distance : 11

192
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

193
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

194
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 4

195
Tree	{ return defaultString [ toolTipText ] . htmlEscape () ; }
Code	{ return defaultString [ toolTipText ] . htmlEscape () ; }
Distance : 9

196
Tree	{ return ( char ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( char ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

197
Tree	{ return this ; } class
Code	{ return this ; } class
Distance : 11

198
Tree	{ return ! toolTipText . htmlEscape ( STRING_CONSTANT ) ; } Class
Code	{ return ! toolTipText . htmlEscape ( STRING_CONSTANT ) ; } Class
Distance : 7

199
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 10

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 4

1
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

2
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = CHAR_CONS ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = CHAR_CONS ; }
Distance : 8

3
Tree	{ break; }
Code	{ break; }
Distance : 12

4
Tree	{ super ( time , Locale . getDefault () ) ; Locale = new Locale () ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = new Locale () ; }
Distance : 9

5
Tree	{ this ( time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 7

6
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 9

7
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

8
Tree	{ this ( ( , time , Locale ) ; }
Code	{ this ( ( , time , Locale ) ; }
Distance : 5

9
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Distance : 3

10
Tree	{ time = zone ; }
Code	{ time = zone ; }
Distance : 9

11
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

12
Tree	{ super ( time , null , null , Locale , time . getDefault () ) ; }
Code	{ super ( time , null , null , Locale , time . getDefault () ) ; }
Distance : 6

13
Tree	{ return; time . getDefault () ; super }
Code	{ return; time . getDefault () ; super }
Distance : 8

14
Tree	{ super ( time . getDefault () , Locale ) ; time = Locale ; }
Code	{ super ( time . getDefault () , Locale ) ; time = Locale ; }
Distance : 9

15
Tree	{ super ( time . getDefault () ) ; time = Locale ; }
Code	{ super ( time . getDefault () ) ; time = Locale ; }
Distance : 9

16
Tree	{ this ( time . getDefault () , Locale , Locale , Locale ) ; }
Code	{ this ( time . getDefault () , Locale , Locale , Locale ) ; }
Distance : 7

17
Tree	{ time = Locale ; }
Code	{ time = Locale ; }
Distance : 9

18
Tree	{ this ( time , time , Locale ) ; }
Code	{ this ( time , time , Locale ) ; }
Distance : 4

19
Tree	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Distance : 4

20
Tree	{ super ( zone . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( zone . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

21
Tree	{ continue; time = time ; }
Code	{ continue; time = time ; }
Distance : 10

22
Tree	{ super ( time , time , time , Locale . getDefault () ) ; getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; getDefault () ; }
Distance : 7

23
Tree	{ time . getDefault () ; zone = Locale ; }
Code	{ time . getDefault () ; zone = Locale ; }
Distance : 10

24
Tree	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

25
Tree	{ super ( time , time . getDefault () ) ; zone . getDefault () ; }
Code	{ super ( time , time . getDefault () ) ; zone . getDefault () ; }
Distance : 9

26
Tree	{ this ( time , Locale , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

27
Tree	{ this ( time , zone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

28
Tree	{}
Code	{}
Distance : 14

29
Tree	{ super(); time . getDefault () ; this }
Code	{ super(); time . getDefault () ; this }
Distance : 8

30
Tree	{ continue; time = time ; Locale = null ; }
Code	{ continue; time = time ; Locale = null ; }
Distance : 9

31
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

32
Tree	{ this ( time , zone , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () ) ; }
Distance : 2

33
Tree	{ super ( time . getDefault () ) ; zone . getDefault () ; }
Code	{ super ( time . getDefault () ) ; zone . getDefault () ; }
Distance : 8

34
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 4

35
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

36
Tree	{ this ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 3

37
Tree	{ super ( time , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone . getDefault () ) ; Locale = Locale ; }
Distance : 7

38
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; time = Locale ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; time = Locale ; }
Distance : 9

39
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

40
Tree	{ this ( ( , time , zone ) ; }
Code	{ this ( ( , time , zone ) ; }
Distance : 6

41
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Distance : 8

42
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

43
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; super }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; super }
Distance : 4

44
Tree	{ continue; }
Code	{ continue; }
Distance : 12

45
Tree	{ this ( zone , time , NUMBER_CONSTANT ) ; }
Code	{ this ( zone , time , NUMBER_CONSTANT ) ; }
Distance : 6

46
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

47
Tree	{ this ( time , time , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale . getDefault () ) ; }
Distance : 1

48
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 4

49
Tree	{ this ( ( , time , time ) ; }
Code	{ this ( ( , time , time ) ; }
Distance : 6

50
Tree	{ super ( time , null , null , time , Locale . getDefault () ) ; }
Code	{ super ( time , null , null , time , Locale . getDefault () ) ; }
Distance : 6

51
Tree	{ this ( time , time , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 7

52
Tree	{ this ( time , zone , NUMBER_CONSTANT ) ; }
Code	{ this ( time , zone , NUMBER_CONSTANT ) ; }
Distance : 4

53
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

54
Tree	{ this ( time , time , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

55
Tree	{ this ( time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time . getDefault () , zone . getDefault () ) ; }
Distance : 4

56
Tree	{ super ( time , null , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , null , Locale . getDefault () ) ; zone = Locale ; }
Distance : 6

57
Tree	{ continue; time . getDefault () ; super }
Code	{ continue; time . getDefault () ; super }
Distance : 8

58
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = CHAR_CONS ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = CHAR_CONS ; }
Distance : 7

59
Tree	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

60
Tree	{ this ( time , zone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 6

61
Tree	{ super ( time . getDefault () , false ) ; zone = Locale ; }
Code	{ super ( time . getDefault () , false ) ; zone = Locale ; }
Distance : 10

62
Tree	{ super ( time , time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , time . getDefault () ) ; zone = Locale ; }
Distance : 8

63
Tree	{ super ( time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () ) ; Locale = Locale ; }
Distance : 9

64
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = new Locale () ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = new Locale () ; }
Distance : 10

65
Tree	{ this ( time , time , time . getDefault () ) ; }
Code	{ this ( time , time , time . getDefault () ) ; }
Distance : 2

66
Tree	{ super ( time , null , time . getDefault () ) ; }
Code	{ super ( time , null , time . getDefault () ) ; }
Distance : 3

67
Tree	{ super ( time ) ; time = Locale ; }
Code	{ super ( time ) ; time = Locale ; }
Distance : 9

68
Tree	{ super ( time ) ; Locale = zone ; }
Code	{ super ( time ) ; Locale = zone ; }
Distance : 8

69
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone . getDefault () ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone . getDefault () ; }
Distance : 9

70
Tree	{ this ( time , true ) ; }
Code	{ this ( time , true ) ; }
Distance : 6

71
Tree	{ super ( time . getDefault () , Locale ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () , Locale ) ; Locale = Locale ; }
Distance : 9

72
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; super ; }
Distance : 7

73
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = new Locale () ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = new Locale () ; }
Distance : 9

74
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck }
Distance : 6

75
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

76
Tree	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

77
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; }
Distance : 3

78
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Distance : 8

79
Tree	{ time . getDefault () ; Locale = zone ; }
Code	{ time . getDefault () ; Locale = zone ; }
Distance : 10

80
Tree	{ super(); time = Locale ; }
Code	{ super(); time = Locale ; }
Distance : 9

81
Tree	{ super ( time ) ; zone = Locale ; }
Code	{ super ( time ) ; zone = Locale ; }
Distance : 8

82
Tree	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

83
Tree	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Distance : 10

84
Tree	{ this ( time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale . getDefault () ) ; }
Distance : 1

85
Tree	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

86
Tree	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Code	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Distance : 10

87
Tree	{ super ( time , zone . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , zone . getDefault () ) ; Locale . getDefault () ; }
Distance : 7

88
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = Locale ; }
Distance : 10

89
Tree	{ super ( time . getDefault () , Locale ) ; zone = Locale ; }
Code	{ super ( time . getDefault () , Locale ) ; zone = Locale ; }
Distance : 9

90
Tree	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

91
Tree	{ this ( time , time , time , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () ) ; }
Distance : 3

92
Tree	{ super ( STRING_CONSTANT ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT ) ; zone = time ; }
Distance : 10

93
Tree	{ this ( time , zone , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale . getDefault () ) ; }
Distance : 0

94
Tree	{ super ( time , null , null , zone , Locale . getDefault () ) ; }
Code	{ super ( time , null , null , zone , Locale . getDefault () ) ; }
Distance : 5

95
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; zone = Locale ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; zone = Locale ; }
Distance : 9

96
Tree	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

97
Tree	{ this ( time . getDefault () , Locale , Locale , zone ) ; }
Code	{ this ( time . getDefault () , Locale , Locale , zone ) ; }
Distance : 7

98
Tree	{ super ( time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

99
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

100
Tree	{ this ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 3

101
Tree	{ this ( zone , false ) ; }
Code	{ this ( zone , false ) ; }
Distance : 6

102
Tree	{ super ( time , time , time , Locale . getDefault () ) ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; }
Distance : 4

103
Tree	{ super ( time , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

104
Tree	{ this ( time , time , time , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , getDefault () ) ; }
Distance : 6

105
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

106
Tree	{ super(); time = time ; }
Code	{ super(); time = time ; }
Distance : 10

107
Tree	{ super(); time = zone ; }
Code	{ super(); time = zone ; }
Distance : 9

108
Tree	{ super ( time , time . getDefault () ) ; Locale = new getDefault () ; }
Code	{ super ( time , time . getDefault () ) ; Locale = new getDefault () ; }
Distance : 10

109
Tree	{ super ( time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time . getDefault () ) ; zone = Locale ; }
Distance : 9

110
Tree	{ super ( time , zone . getDefault () , Locale . getDefault () ) ; super }
Code	{ super ( time , zone . getDefault () , Locale . getDefault () ) ; super }
Distance : 5

111
Tree	{ time = time ; }
Code	{ time = time ; }
Distance : 10

112
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; super }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; super }
Distance : 5

113
Tree	{ this ( time , zone , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 5

114
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Distance : 10

115
Tree	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Distance : 5

116
Tree	{ super ( time , null , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , zone . getDefault () ) ; Locale = Locale ; }
Distance : 7

117
Tree	{ super ( time . getDefault () , true ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () , true ) ; Locale = Locale ; }
Distance : 10

118
Tree	{ super ( time , zone . getDefault () ) ; Locale = new Locale () ; }
Code	{ super ( time , zone . getDefault () ) ; Locale = new Locale () ; }
Distance : 9

119
Tree	{ super(); time = zone ; Locale = null ; }
Code	{ super(); time = zone ; Locale = null ; }
Distance : 8

120
Tree	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

121
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; super }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; super }
Distance : 5

122
Tree	{ super ( ( , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , zone ) ; }
Code	{ super ( ( , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , zone ) ; }
Distance : 6

123
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = new Locale () ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = new Locale () ; }
Distance : 10

124
Tree	{ super(); time = Locale ; Locale = null ; }
Code	{ super(); time = Locale ; Locale = null ; }
Distance : 9

125
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Distance : 11

126
Tree	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Distance : 9

127
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; disableTypeCheck ; }
Distance : 7

128
Tree	{ this ( time . getDefault () , Locale ) ; }
Code	{ this ( time . getDefault () , Locale ) ; }
Distance : 6

129
Tree	{ super ( time , time , time , Locale . getDefault () ) ; super }
Code	{ super ( time , time , time , Locale . getDefault () ) ; super }
Distance : 5

130
Tree	{ this ( time . getDefault () , zone ) ; }
Code	{ this ( time . getDefault () , zone ) ; }
Distance : 6

131
Tree	{ this ( zone . getDefault () , Locale ) ; }
Code	{ this ( zone . getDefault () , Locale ) ; }
Distance : 6

132
Tree	{ this ( time , time , time ) ; }
Code	{ this ( time , time , time ) ; }
Distance : 5

133
Tree	{ zone = time ; }
Code	{ zone = time ; }
Distance : 10

134
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent ; }
Distance : 7

135
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this }
Distance : 6

136
Tree	{ super ( time . getDefault () ) ; Locale = zone ; }
Code	{ super ( time . getDefault () ) ; Locale = zone ; }
Distance : 9

137
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

138
Tree	{} array
Code	{} array
Distance : 14

139
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

140
Tree	{ this ( time . getDefault () , time ) ; }
Code	{ this ( time . getDefault () , time ) ; }
Distance : 6

141
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; getDefault () ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; getDefault () ; }
Distance : 7

142
Tree	{ return; }
Code	{ return; }
Distance : 12

143
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; getDefault () ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; getDefault () ; }
Distance : 6

144
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

145
Tree	{ super ( time . getDefault () , Locale ) ; Locale = zone ; }
Code	{ super ( time . getDefault () , Locale ) ; Locale = zone ; }
Distance : 9

146
Tree	{ zone . getDefault () ; Locale = Locale ; }
Code	{ zone . getDefault () ; Locale = Locale ; }
Distance : 10

147
Tree	{ super ( time . getDefault () , false ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () , false ) ; Locale = Locale ; }
Distance : 10

148
Tree	{ super ( time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time . getDefault () ) ; Locale . getDefault () ; }
Distance : 7

149
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; getDefault () ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; getDefault () ; }
Distance : 7

150
Tree	{ super ( ( , RegularTimePeriod.DEFAULT_TIME_ZONE , zone , Locale ) ; }
Code	{ super ( ( , RegularTimePeriod.DEFAULT_TIME_ZONE , zone , Locale ) ; }
Distance : 7

151
Tree	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = Locale ; }
Distance : 10

152
Tree	{ ; } array
Code	{ ; } array
Distance : 12

153
Tree	{ this ( time , Locale , Locale ) ; }
Code	{ this ( time , Locale , Locale ) ; }
Distance : 4

154
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; }
Distance : 6

155
Tree	{ ; } class
Code	{ ; } class
Distance : 12

156
Tree	{ super(); time = time ; Locale = null ; }
Code	{ super(); time = time ; Locale = null ; }
Distance : 9

157
Tree	{ super ( time , Locale . getDefault () , Locale . getDefault () ) ; super }
Code	{ super ( time , Locale . getDefault () , Locale . getDefault () ) ; super }
Distance : 6

158
Tree	{ this ( time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time . getDefault () , time . getDefault () ) ; }
Distance : 4

159
Tree	{ super ( time . getDefault () , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Distance : 10

160
Tree	{ super ( time . getDefault () ) ; time . getDefault () ; }
Code	{ super ( time . getDefault () ) ; time . getDefault () ; }
Distance : 8

161
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = CHAR_CONS ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = CHAR_CONS ; }
Distance : 8

162
Tree	{ this ( time , Locale , NUMBER_CONSTANT ) ; }
Code	{ this ( time , Locale , NUMBER_CONSTANT ) ; }
Distance : 5

163
Tree	{ this ( time , zone , Locale ) ; }
Code	{ this ( time , zone , Locale ) ; }
Distance : 3

164
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Distance : 11

165
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 12

166
Tree	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , Locale ) ; }
Code	{ super ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , Locale ) ; }
Distance : 5

167
Tree	{ super ( time , null , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , time . getDefault () ) ; Locale = Locale ; }
Distance : 7

168
Tree	{} notifyListeners
Code	{} notifyListeners
Distance : 14

169
Tree	{ super ( time , super(); , Locale . getDefault () ) ; }
Code	{ super ( time , super(); , Locale . getDefault () ) ; }
Distance : 2

170
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

171
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = - ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = - ; }
Distance : 8

172
Tree	{ super ( time ) ; Locale = Locale ; }
Code	{ super ( time ) ; Locale = Locale ; }
Distance : 8

173
Tree	{ super ( time , time . getDefault () , Locale . getDefault () ) ; this }
Code	{ super ( time , time . getDefault () , Locale . getDefault () ) ; this }
Distance : 6

174
Tree	{} class
Code	{} class
Distance : 14

175
Tree	{ super ( time , time . getDefault () , Locale . getDefault () ) ; super }
Code	{ super ( time , time . getDefault () , Locale . getDefault () ) ; super }
Distance : 6

176
Tree	{ super ( ( , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , time ) ; }
Code	{ super ( ( , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale , time ) ; }
Distance : 6

177
Tree	{ super ( time , null , Locale . getDefault () ) ; }
Code	{ super ( time , null , Locale . getDefault () ) ; }
Distance : 2

178
Tree	{ super ( time , null , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 6

179
Tree	{ this ( time . getDefault () , Locale , Locale , time ) ; }
Code	{ this ( time . getDefault () , Locale , Locale , time ) ; }
Distance : 7

180
Tree	{ super ( time , null , zone . getDefault () ) ; }
Code	{ super ( time , null , zone . getDefault () ) ; }
Distance : 3

181
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

182
Tree	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

183
Tree	{ super ( time . getDefault () , false ) ; Locale = zone ; }
Code	{ super ( time . getDefault () , false ) ; Locale = zone ; }
Distance : 10

184
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Distance : 6

185
Tree	{ super(); time . getDefault () ; super }
Code	{ super(); time . getDefault () ; super }
Distance : 8

186
Tree	{ this ( ( , Locale , Locale ) ; }
Code	{ this ( ( , Locale , Locale ) ; }
Distance : 5

187
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this ; }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; this ; }
Distance : 7

188
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

189
Tree	{ super(); }
Code	{ super(); }
Distance : 12

190
Tree	{ time . getDefault () ; Locale = Locale ; }
Code	{ time . getDefault () ; Locale = Locale ; }
Distance : 10

191
Tree	{ ; }
Code	{ ; }
Distance : 11

192
Tree	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 3

193
Tree	{ this ( time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 7

194
Tree	{ this ( time , time , NUMBER_CONSTANT ) ; }
Code	{ this ( time , time , NUMBER_CONSTANT ) ; }
Distance : 5

195
Tree	{ super ( time , time . getDefault () ) ; Locale = new Locale () ; }
Code	{ super ( time , time . getDefault () ) ; Locale = new Locale () ; }
Distance : 10

196
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale . getDefault () ; }
Distance : 11

197
Tree	{ this ( Locale , false ) ; }
Code	{ this ( Locale , false ) ; }
Distance : 7

198
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = new getDefault () ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = new getDefault () ; }
Distance : 10

199
Tree	{ this ( time . getDefault () , Locale , zone , Locale ) ; }
Code	{ this ( time . getDefault () , Locale , zone , Locale ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( dataset . getParent ( dataset , false ) ) { return result ; }
Code	if ( dataset . getParent ( dataset , false ) ) { return result ; }
Distance : 7

1
Tree	if ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) { return result ; }
Code	if ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) { return result ; }
Distance : 3

2
Tree	if ( dataset != null ) { return this . dataset ; }
Code	if ( dataset != null ) { return this . dataset ; }
Distance : 4

3
Tree	if ( this . dataset . indexOf () ) { return result ; }
Code	if ( this . dataset . indexOf () ) { return result ; }
Distance : 5

4
Tree	if ( dataset != null && result . getParent ( dataset ) ) { return result ; }
Code	if ( dataset != null && result . getParent ( dataset ) ) { return result ; }
Distance : 8

5
Tree	if ( dataset . indexOf ( dataset , dataset ) ) { return result ; }
Code	if ( dataset . indexOf ( dataset , dataset ) ) { return result ; }
Distance : 7

6
Tree	if ( isEmpty () ) { return result ; }
Code	if ( isEmpty () ) { return result ; }
Distance : 3

7
Tree	if ( new isBottom ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Code	if ( new isBottom ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Distance : 10

8
Tree	if ( ! dataset . isBottom ( dataset ) ) { return result ; }
Code	if ( ! dataset . isBottom ( dataset ) ) { return result ; }
Distance : 6

9
Tree	if ( dataset . indexOf () ) { return result ; }
Code	if ( dataset . indexOf () ) { return result ; }
Distance : 3

10
Tree	if ( ! dataset . isBottom () ) { return result ; }
Code	if ( ! dataset . isBottom () ) { return result ; }
Distance : 4

11
Tree	if ( ! isNonSingular ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Code	if ( ! isNonSingular ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Distance : 5

12
Tree	if ( dataset != return; ) { return false ; }
Code	if ( dataset != return; ) { return false ; }
Distance : 3

13
Tree	if ( dataset . getParent ( dataset ) ) { return result ; }
Code	if ( dataset . getParent ( dataset ) ) { return result ; }
Distance : 5

14
Tree	if ( dataset . isNaN ( dataset ) ) { return result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return result ; }
Distance : 5

15
Tree	if ( ! isNonSingular ( Locale.ENGLISH ) ) { return result ; }
Code	if ( ! isNonSingular ( Locale.ENGLISH ) ) { return result ; }
Distance : 5

16
Tree	if ( this . getClass () ) { return result ; }
Code	if ( this . getClass () ) { return result ; }
Distance : 4

17
Tree	if ( dataset . isEmptyType () ) { return result ; }
Code	if ( dataset . isEmptyType () ) { return result ; }
Distance : 3

18
Tree	if ( dataset != null ) { return getValue ( this , result ) ; }
Code	if ( dataset != null ) { return getValue ( this , result ) ; }
Distance : 6

19
Tree	if ( dataset ) { return result ; } else :
Code	if ( dataset ) { return result ; } else :
Distance : 4

20
Tree	if ( indexOf ( dataset , dataset , result ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset , result ) ) { return result ; }
Distance : 7

21
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

22
Tree	if ( indexOf ( dataset , dataset ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset ) ) { return result ; }
Distance : 5

23
Tree	if ( isBottom ( dataset , result ) ) { return result ; }
Code	if ( isBottom ( dataset , result ) ) { return result ; }
Distance : 5

24
Tree	if ( dataset ( dataset ) ) { return dataset ; }
Code	if ( dataset ( dataset ) ) { return dataset ; }
Distance : 4

25
Tree	if ( dataset != null ) { return hashCode ( this , result ) ; }
Code	if ( dataset != null ) { return hashCode ( this , result ) ; }
Distance : 6

26
Tree	if ( this . indexOf () ) { return result ; }
Code	if ( this . indexOf () ) { return result ; }
Distance : 4

27
Tree	if ( ! ) <=
Code	if ( ! ) <=
Distance : 8

28
Tree	if ( dataset ) { return result ; } else ++
Code	if ( dataset ) { return result ; } else ++
Distance : 4

29
Tree	if ( dataset != null && result . getDaysInYearMax ( dataset ) ) { return result ; }
Code	if ( dataset != null && result . getDaysInYearMax ( dataset ) ) { return result ; }
Distance : 8

30
Tree	if ( dataset != null ) { return result . hashCode () ; }
Code	if ( dataset != null ) { return result . hashCode () ; }
Distance : 4

31
Tree	if ( dataset != null ) { return result ( result ) ; }
Code	if ( dataset != null ) { return result ( result ) ; }
Distance : 4

32
Tree	if ( dataset != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . result ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

33
Tree	if ( dataset . isNaN () ) { return this . result . result ; }
Code	if ( dataset . isNaN () ) { return this . result . result ; }
Distance : 7

34
Tree	if ( isEmpty ( dataset ) ) { return result ; }
Code	if ( isEmpty ( dataset ) ) { return result ; }
Distance : 4

35
Tree	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

36
Tree	if ( indexOf ( dataset , dataset , false ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset , false ) ) { return result ; }
Distance : 7

37
Tree	if ( dataset != null ) { return true ; }
Code	if ( dataset != null ) { return true ; }
Distance : 2

38
Tree	if ( CHAR_CONS ) <=
Code	if ( CHAR_CONS ) <=
Distance : 8

39
Tree	if ( ! isPowerOf2 () ) { return result ; }
Code	if ( ! isPowerOf2 () ) { return result ; }
Distance : 3

40
Tree	if ( indexOf () ) { return result ; }
Code	if ( indexOf () ) { return result ; }
Distance : 3

41
Tree	if ( dataset != null && result . isEmptyType ( dataset ) ) { return result ; }
Code	if ( dataset != null && result . isEmptyType ( dataset ) ) { return result ; }
Distance : 8

42
Tree	if ( dataset ) { return result ; } else super
Code	if ( dataset ) { return result ; } else super
Distance : 4

43
Tree	if ( dataset . dataset ( dataset ) ) { return result ; }
Code	if ( dataset . dataset ( dataset ) ) { return result ; }
Distance : 5

44
Tree	if ( dataset != null ) { return result . result ( dataset ) ; }
Code	if ( dataset != null ) { return result . result ( dataset ) ; }
Distance : 6

45
Tree	if ( new isBottom () . getParser ( dataset ) ) { return result ; }
Code	if ( new isBottom () . getParser ( dataset ) ) { return result ; }
Distance : 8

46
Tree	if ( StringUtils.EMPTY ) { return result ; }
Code	if ( StringUtils.EMPTY ) { return result ; }
Distance : 3

47
Tree	if ( dataset != null ) { return result . getFirstChild ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

48
Tree	if ( dataset != null && result . isPointInRect ( dataset ) ) { return result ; }
Code	if ( dataset != null && result . isPointInRect ( dataset ) ) { return result ; }
Distance : 8

49
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

50
Tree	if ( dataset != null ) { return result ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result ( STRING_CONSTANT ) ; }
Distance : 4

51
Tree	if ( dataset != null ) { return false ; }
Code	if ( dataset != null ) { return false ; }
Distance : 2

52
Tree	if ( isEmptyType () ) { return result ; }
Code	if ( isEmptyType () ) { return result ; }
Distance : 3

53
Tree	if ( dataset != null ) { return this . result . dataset ; }
Code	if ( dataset != null ) { return this . result . dataset ; }
Distance : 5

54
Tree	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Distance : 6

55
Tree	if ( dataset . indexOf ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( dataset . indexOf ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 7

56
Tree	if ( new indexOf () . indexOf ( dataset ) ) { return result ; }
Code	if ( new indexOf () . indexOf ( dataset ) ) { return result ; }
Distance : 8

57
Tree	if ( isBottom ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Code	if ( isBottom ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Distance : 4

58
Tree	if ( dataset != null ) { return this . result . indexOf () ; }
Code	if ( dataset != null ) { return this . result . indexOf () ; }
Distance : 6

59
Tree	if ( new Coordinates3D ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Distance : 10

60
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

61
Tree	if ( isBottom ( dataset ) ) { return result ; } else ++
Code	if ( isBottom ( dataset ) ) { return result ; } else ++
Distance : 6

62
Tree	if ( indexOf ( dataset ) ) { return result ; }
Code	if ( indexOf ( dataset ) ) { return result ; }
Distance : 4

63
Tree	if ( dataset . indexOf () ) { return this . result . result ; }
Code	if ( dataset . indexOf () ) { return this . result . result ; }
Distance : 7

64
Tree	if ( dataset . isNaN () ) { return result ; }
Code	if ( dataset . isNaN () ) { return result ; }
Distance : 3

65
Tree	if ( ! isNonSingular ( dataset ) ) { return result ; }
Code	if ( ! isNonSingular ( dataset ) ) { return result ; }
Distance : 5

66
Tree	if ( dataset . isEmptyType ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( dataset . isEmptyType ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 7

67
Tree	if ( dataset . isEmptyType ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmptyType ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

68
Tree	if ( dataset ) { return dataset ; }
Code	if ( dataset ) { return dataset ; }
Distance : 3

69
Tree	if ( isBottom ( x.length ) ) { return result ; }
Code	if ( isBottom ( x.length ) ) { return result ; }
Distance : 4

70
Tree	if ( new indexOf ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new indexOf ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

71
Tree	if ( indexOf ( STRING_CONSTANT ) ) { return result ; }
Code	if ( indexOf ( STRING_CONSTANT ) ) { return result ; }
Distance : 4

72
Tree	if ( dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return result ; }
Distance : 5

73
Tree	if ( dataset . isEmptyType ( dataset , false ) ) { return result ; }
Code	if ( dataset . isEmptyType ( dataset , false ) ) { return result ; }
Distance : 7

74
Tree	if ( isBottom ( Locale.ENGLISH ) ) { return result ; }
Code	if ( isBottom ( Locale.ENGLISH ) ) { return result ; }
Distance : 4

75
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

76
Tree	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 5

77
Tree	if ( dataset . indexOf ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return this . result . result ; }
Distance : 9

78
Tree	if ( dataset != null ) { return this . result . findStackedRangeBounds () ; }
Code	if ( dataset != null ) { return this . result . findStackedRangeBounds () ; }
Distance : 6

79
Tree	if ( dataset != null ) { return this . result . charAt () ; }
Code	if ( dataset != null ) { return this . result . charAt () ; }
Distance : 6

80
Tree	if ( isBottom ( dataset ) ) { return result ; }
Code	if ( isBottom ( dataset ) ) { return result ; }
Distance : 4

81
Tree	if ( isBottom ( dataset ) ) { return result ; } else +=
Code	if ( isBottom ( dataset ) ) { return result ; } else +=
Distance : 6

82
Tree	if ( dataset != null ) { return result . hashCode ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

83
Tree	if ( dataset != null ) { return result . result () ; }
Code	if ( dataset != null ) { return result . result () ; }
Distance : 4

84
Tree	if ( this . dataset . isSubtype ( dataset ) ) { return result ; }
Code	if ( this . dataset . isSubtype ( dataset ) ) { return result ; }
Distance : 7

85
Tree	if ( this . dataset . getMethod ( dataset ) ) { return result ; }
Code	if ( this . dataset . getMethod ( dataset ) ) { return result ; }
Distance : 7

86
Tree	if ( dataset . getParent ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( dataset . getParent ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 7

87
Tree	if ( dataset != null ) { return this . result . isPointInRect () ; }
Code	if ( dataset != null ) { return this . result . isPointInRect () ; }
Distance : 6

88
Tree	if ( this . isEmptyType () ) { return result ; }
Code	if ( this . isEmptyType () ) { return result ; }
Distance : 4

89
Tree	if ( new Coordinates3D () . indexOf ( dataset ) ) { return result ; }
Code	if ( new Coordinates3D () . indexOf ( dataset ) ) { return result ; }
Distance : 8

90
Tree	if ( dataset . getParent () ) { return result ; }
Code	if ( dataset . getParent () ) { return result ; }
Distance : 3

91
Tree	if ( dataset . indexOf ( getSlope () ) ) { return result ; }
Code	if ( dataset . indexOf ( getSlope () ) ) { return result ; }
Distance : 6

92
Tree	if ( dataset ) { return result ; } else +=
Code	if ( dataset ) { return result ; } else +=
Distance : 4

93
Tree	if ( dataset . getParent ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getParent ( dataset ) ) { return this . result . result ; }
Distance : 9

94
Tree	if ( isBottom ( dataset , dataset ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset ) ) { return result ; }
Distance : 5

95
Tree	if ( dataset ) { return result ; }
Code	if ( dataset ) { return result ; }
Distance : 2

96
Tree	if ( ! dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( ! dataset . indexOf ( dataset ) ) { return result ; }
Distance : 6

97
Tree	if ( this . dataset . isSubtype () ) { return result ; }
Code	if ( this . dataset . isSubtype () ) { return result ; }
Distance : 5

98
Tree	if ( dataset != null ) { return result ; } else +=
Code	if ( dataset != null ) { return result ; } else +=
Distance : 3

99
Tree	if ( dataset != null ) { return result ; } else super
Code	if ( dataset != null ) { return result ; } else super
Distance : 3

100
Tree	if ( ! isBottom ( dataset ) ) { return result ; }
Code	if ( ! isBottom ( dataset ) ) { return result ; }
Distance : 5

101
Tree	if ( ! isNonSingular ( currentScript.exportsToInline ) ) { return result ; }
Code	if ( ! isNonSingular ( currentScript.exportsToInline ) ) { return result ; }
Distance : 5

102
Tree	if ( CHAR_CONS ) {}
Code	if ( CHAR_CONS ) {}
Distance : 8

103
Tree	if ( new isBottom () . indexOf ( dataset ) ) { return result ; }
Code	if ( new isBottom () . indexOf ( dataset ) ) { return result ; }
Distance : 8

104
Tree	if ( dataset . indexOf ( CHAR_CONS () ) ) { return result ; }
Code	if ( dataset . indexOf ( CHAR_CONS () ) ) { return result ; }
Distance : 6

105
Tree	if ( dataset . getParent () ) { return this . result . result ; }
Code	if ( dataset . getParent () ) { return this . result . result ; }
Distance : 7

106
Tree	if ( ! isBottom () ) { return result ; }
Code	if ( ! isBottom () ) { return result ; }
Distance : 3

107
Tree	if ( isBottom ( dataset ) ) { return result ; } else super
Code	if ( isBottom ( dataset ) ) { return result ; } else super
Distance : 6

108
Tree	if ( ! isNonSingular ( mockKey.mockedType ) ) { return result ; }
Code	if ( ! isNonSingular ( mockKey.mockedType ) ) { return result ; }
Distance : 5

109
Tree	if ( ! containsNow ( dataset ) ) { return result ; }
Code	if ( ! containsNow ( dataset ) ) { return result ; }
Distance : 5

110
Tree	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Distance : 6

111
Tree	if ( dataset . isEmptyType ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return this . result . result ; }
Distance : 9

112
Tree	if ( dataset . getParent ( dataset , dataset ) ) { return result ; }
Code	if ( dataset . getParent ( dataset , dataset ) ) { return result ; }
Distance : 7

113
Tree	if ( ! ) {}
Code	if ( ! ) {}
Distance : 8

114
Tree	if ( isBottom () ) { return result ; }
Code	if ( isBottom () ) { return result ; }
Distance : 3

115
Tree	if ( dataset != null ) { return result . getParent () ; }
Code	if ( dataset != null ) { return result . getParent () ; }
Distance : 4

116
Tree	if ( dataset != null ) { return result ; } else ++
Code	if ( dataset != null ) { return result ; } else ++
Distance : 3

117
Tree	if ( isBottom ( STRING_CONSTANT ) ) { return result ; }
Code	if ( isBottom ( STRING_CONSTANT ) ) { return result ; }
Distance : 4

118
Tree	if ( dataset != null ) { return result . hashCode ( dataset , IncrementalCheckMode.GENERATE_IJS ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset , IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 8

119
Tree	if ( this . dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( this . dataset . indexOf ( dataset ) ) { return result ; }
Distance : 7

120
Tree	if ( dataset . isNaN ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isNaN ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

121
Tree	if ( new isBottom ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

122
Tree	if ( indexOf ( dataset ) ) { return result ; } else ++
Code	if ( indexOf ( dataset ) ) { return result ; } else ++
Distance : 6

123
Tree	if ( ! dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 6

124
Tree	if ( new isBottom ( dataset ) . that ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . that ( result ) ) { return result ; }
Distance : 9

125
Tree	if ( new indexOf ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Code	if ( new indexOf ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Distance : 10

126
Tree	if ( ! isNonSingular () ) { return result ; }
Code	if ( ! isNonSingular () ) { return result ; }
Distance : 3

127
Tree	if ( dataset != null ) { return result . getParent ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getParent ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

128
Tree	if ( dataset != null ) { return getParent ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getParent ( STRING_CONSTANT ) ; }
Distance : 5

129
Tree	if ( isEmptyType ( dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset ) ) { return result ; }
Distance : 4

130
Tree	if ( isBottom ( dataset , result , false ) ) { return result ; }
Code	if ( isBottom ( dataset , result , false ) ) { return result ; }
Distance : 7

131
Tree	if ( dataset . isEmptyType () ) { return this . result . result ; }
Code	if ( dataset . isEmptyType () ) { return this . result . result ; }
Distance : 7

132
Tree	if ( dataset != null ) { return result . getFirstChild ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

133
Tree	if ( this . dataset . getMethod () ) { return result ; }
Code	if ( this . dataset . getMethod () ) { return result ; }
Distance : 5

134
Tree	if ( ! isPowerOf2 ( dataset ) ) { return result ; }
Code	if ( ! isPowerOf2 ( dataset ) ) { return result ; }
Distance : 5

135
Tree	if ( this . isBottom () ) { return result ; }
Code	if ( this . isBottom () ) { return result ; }
Distance : 4

136
Tree	if ( this . dataset . getParent () ) { return result ; }
Code	if ( this . dataset . getParent () ) { return result ; }
Distance : 5

137
Tree	if ( dataset != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

138
Tree	if ( dataset != null ) { return this . result . result ; }
Code	if ( dataset != null ) { return this . result . result ; }
Distance : 5

139
Tree	if ( dataset != null ) { return hashCode ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return hashCode ( STRING_CONSTANT ) ; }
Distance : 5

140
Tree	if ( dataset . indexOf ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . indexOf ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

141
Tree	if ( dataset . isNaN ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( dataset . isNaN ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 7

142
Tree	if ( dataset . isNaN ( dataset , false ) ) { return result ; }
Code	if ( dataset . isNaN ( dataset , false ) ) { return result ; }
Distance : 7

143
Tree	if ( dataset . indexOf ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Code	if ( dataset . indexOf ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Distance : 5

144
Tree	if ( dataset != null ) { return getParent ( result ) ; }
Code	if ( dataset != null ) { return getParent ( result ) ; }
Distance : 4

145
Tree	if ( ! containsNow () ) { return result ; }
Code	if ( ! containsNow () ) { return result ; }
Distance : 3

146
Tree	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Code	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Distance : 6

147
Tree	if ( isEmptyType ( dataset , dataset , false ) ) { return result ; }
Code	if ( isEmptyType ( dataset , dataset , false ) ) { return result ; }
Distance : 7

148
Tree	if ( ! dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 6

149
Tree	if ( dataset . indexOf ( dataset , false ) ) { return result ; }
Code	if ( dataset . indexOf ( dataset , false ) ) { return result ; }
Distance : 7

150
Tree	if ( ! dataset . indexOf () ) { return result ; }
Code	if ( ! dataset . indexOf () ) { return result ; }
Distance : 4

151
Tree	if ( dataset != null ) { return result ( this , result ) ; }
Code	if ( dataset != null ) { return result ( this , result ) ; }
Distance : 6

152
Tree	if ( options.removeUnusedPrototypeProperties ) { return result ; }
Code	if ( options.removeUnusedPrototypeProperties ) { return result ; }
Distance : 3

153
Tree	if ( isBottom ( mockKey.mockedType ) ) { return result ; }
Code	if ( isBottom ( mockKey.mockedType ) ) { return result ; }
Distance : 4

154
Tree	if ( isEmptyType ( STRING_CONSTANT ) ) { return result ; }
Code	if ( isEmptyType ( STRING_CONSTANT ) ) { return result ; }
Distance : 4

155
Tree	if ( dataset != null ) { return getValue ( result ) ; }
Code	if ( dataset != null ) { return getValue ( result ) ; }
Distance : 4

156
Tree	if ( dataset != null ) { return hashCode ( result ) ; }
Code	if ( dataset != null ) { return hashCode ( result ) ; }
Distance : 4

157
Tree	if ( currentScript.isModule ) { return result ; }
Code	if ( currentScript.isModule ) { return result ; }
Distance : 3

158
Tree	if ( isBottom ( dataset , dataset , false ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset , false ) ) { return result ; }
Distance : 7

159
Tree	if ( dataset != null ) { return result . result ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . result ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

160
Tree	if ( dataset . getParent ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getParent ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

161
Tree	if ( dataset != null ) { return getValue ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getValue ( STRING_CONSTANT ) ; }
Distance : 5

162
Tree	if ( dataset . indexOf ( getReferenceName () ) ) { return result ; }
Code	if ( dataset . indexOf ( getReferenceName () ) ) { return result ; }
Distance : 6

163
Tree	if ( isBottom ( dataset , dataset , result ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset , result ) ) { return result ; }
Distance : 7

164
Tree	if ( isBottom ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

165
Tree	if ( new x1 ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Code	if ( new x1 ( NUMBER_CONSTANT ) . hashCode ( result ) ) { return result ; }
Distance : 10

166
Tree	if ( dataset . isNaN ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return this . result . result ; }
Distance : 9

167
Tree	if ( dataset . indexOf ( getLValue () ) ) { return result ; }
Code	if ( dataset . indexOf ( getLValue () ) ) { return result ; }
Distance : 6

168
Tree	if ( dataset != null ) { return result . getFirstChild () ; }
Code	if ( dataset != null ) { return result . getFirstChild () ; }
Distance : 4

169
Tree	if ( dataset != null ) { return result ; } else &
Code	if ( dataset != null ) { return result ; } else &
Distance : 3

170
Tree	if ( ! dataset . isEmptyType () ) { return result ; }
Code	if ( ! dataset . isEmptyType () ) { return result ; }
Distance : 4

171
Tree	if ( dataset . indexOf ( ExceptionUtils.WRAPPED_MARKER ) ) { return result ; }
Code	if ( dataset . indexOf ( ExceptionUtils.WRAPPED_MARKER ) ) { return result ; }
Distance : 5

172
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

173
Tree	if ( dataset . indexOf ( Locale.ENGLISH ) ) { return result ; }
Code	if ( dataset . indexOf ( Locale.ENGLISH ) ) { return result ; }
Distance : 5

174
Tree	if ( dataset != null ) { return getParent ( this , result ) ; }
Code	if ( dataset != null ) { return getParent ( this , result ) ; }
Distance : 6

175
Tree	if ( dataset . isNaN ( dataset , dataset ) ) { return result ; }
Code	if ( dataset . isNaN ( dataset , dataset ) ) { return result ; }
Distance : 7

176
Tree	if ( dataset . indexOf ( currentScript.exportsToInline ) ) { return result ; }
Code	if ( dataset . indexOf ( currentScript.exportsToInline ) ) { return result ; }
Distance : 5

177
Tree	if ( this . dataset . getParent ( dataset ) ) { return result ; }
Code	if ( this . dataset . getParent ( dataset ) ) { return result ; }
Distance : 7

178
Tree	if ( result != null ) { return this . result ; }
Code	if ( result != null ) { return this . result ; }
Distance : 4

179
Tree	if ( result ) { return result ; }
Code	if ( result ) { return result ; }
Distance : 3

180
Tree	if ( ! dataset . isEmptyOrNull () ) { return result ; }
Code	if ( ! dataset . isEmptyOrNull () ) { return result ; }
Distance : 4

181
Tree	if ( isEmpty ( STRING_CONSTANT ) ) { return result ; }
Code	if ( isEmpty ( STRING_CONSTANT ) ) { return result ; }
Distance : 4

182
Tree	if ( dataset != null ) { return result ( result , result , result ) ; }
Code	if ( dataset != null ) { return result ( result , result , result ) ; }
Distance : 8

183
Tree	if ( dataset != null ) { return this . dataset . result ; }
Code	if ( dataset != null ) { return this . dataset . result ; }
Distance : 5

184
Tree	if ( result != null ) { return this . result . result ; }
Code	if ( result != null ) { return this . result . result ; }
Distance : 6

185
Tree	if ( dataset . isEmptyType ( dataset , dataset ) ) { return result ; }
Code	if ( dataset . isEmptyType ( dataset , dataset ) ) { return result ; }
Distance : 7

186
Tree	if ( dataset != null ) { return hashCode ( result , result , result ) ; }
Code	if ( dataset != null ) { return hashCode ( result , result , result ) ; }
Distance : 8

187
Tree	if ( isEmptyType ( dataset , dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset , dataset ) ) { return result ; }
Distance : 5

188
Tree	if ( isBottom ( dataset , result , result ) ) { return result ; }
Code	if ( isBottom ( dataset , result , result ) ) { return result ; }
Distance : 7

189
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

190
Tree	if ( dataset ( result ) ) { return result ; }
Code	if ( dataset ( result ) ) { return result ; }
Distance : 3

191
Tree	if ( dataset != null ) { return hashCode ( result , dataset , result ) ; }
Code	if ( dataset != null ) { return hashCode ( result , dataset , result ) ; }
Distance : 8

192
Tree	if ( dataset != null ) { return result ( result , dataset , result ) ; }
Code	if ( dataset != null ) { return result ( result , dataset , result ) ; }
Distance : 8

193
Tree	if ( result . dataset ( dataset ) ) { return result ; }
Code	if ( result . dataset ( dataset ) ) { return result ; }
Distance : 5

194
Tree	if ( dataset . dataset ( result ) ) { return result ; }
Code	if ( dataset . dataset ( result ) ) { return result ; }
Distance : 5

195
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

196
Tree	if ( result != null ) { return false ; }
Code	if ( result != null ) { return false ; }
Distance : 3

197
Tree	if ( dataset != return; ) { return this . result ; }
Code	if ( dataset != return; ) { return this . result ; }
Distance : 4

198
Tree	if ( dataset . result ( dataset ) ) { return result ; }
Code	if ( dataset . result ( dataset ) ) { return result ; }
Distance : 5

199
Tree	if ( result ) { return dataset ; }
Code	if ( result ) { return dataset ; }
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 72
Wrong
========================================================================
False

0
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

1
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

2
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

3
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

4
Tree	- NUMBER_CONSTANT && name.localSets == null && else
Code	- NUMBER_CONSTANT && name.localSets == null && else
Distance : 9

5
Tree	- NUMBER_CONSTANT && name.localSets == null && else
Code	- NUMBER_CONSTANT && name.localSets == null && else
Distance : 9

6
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

7
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 11

8
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Distance : 11

9
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

10
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Distance : 10

11
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Distance : 10

12
Tree	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

13
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Distance : 10

14
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Distance : 9

15
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

16
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

17
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Distance : 3

18
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT class
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT class
Distance : 5

19
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

20
Tree	! name.localSets && NUMBER_CONSTANT - zval.length && ^
Code	! name.localSets && NUMBER_CONSTANT - zval.length && ^
Distance : 10

21
Tree	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Code	! name.localSets && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Distance : 10

22
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT notifyListeners
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT notifyListeners
Distance : 4

23
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

24
Tree	! name.localSets && absoluteZipPath + NUMBER_CONSTANT && super
Code	! name.localSets && absoluteZipPath + NUMBER_CONSTANT && super
Distance : 10

25
Tree	- newInput && name.localSets == null && super
Code	- newInput && name.localSets == null && super
Distance : 10

26
Tree	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	! name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 11

27
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

28
Tree	! name.localSets && zval.length + NUMBER_CONSTANT && super
Code	! name.localSets && zval.length + NUMBER_CONSTANT && super
Distance : 10

29
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - superEquals ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - superEquals ) <= JAVA_1_8
Distance : 14

30
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= MILLIS_PER_DAY
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= MILLIS_PER_DAY
Distance : 14

31
Tree	- inbits && name.localSets == null && super
Code	- inbits && name.localSets == null && super
Distance : 10

32
Tree	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - preserveAllTokens ) <= JAVA_1_8
Code	name.globalSets . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - preserveAllTokens ) <= JAVA_1_8
Distance : 14

33
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT array
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT array
Distance : 5

34
Tree	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Code	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Distance : 9

35
Tree	- inbits && name.localSets == null && super
Code	- inbits && name.localSets == null && super
Distance : 10

36
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * MILLIS_PER_DAY )
Distance : 13

37
Tree	NUMBER_CONSTANT * ( nextTime * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( nextTime * MILLIS_PER_DAY )
Distance : 13

38
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * qrRankingThreshold )
Distance : 13

39
Tree	- name.localSets && name.localSets == null && super
Code	- name.localSets && name.localSets == null && super
Distance : 10

40
Tree	- name.localSets && name.localSets == null && CHAR_CONS
Code	- name.localSets && name.localSets == null && CHAR_CONS
Distance : 10

41
Tree	NUMBER_CONSTANT * ( nextTime * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( nextTime * qrRankingThreshold )
Distance : 13

42
Tree	! name.localSets && name.localSets == null && super
Code	! name.localSets && name.localSets == null && super
Distance : 9

43
Tree	- name.globalSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- name.globalSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

44
Tree	- lhsOfForInLoop && name.localSets == null && super
Code	- lhsOfForInLoop && name.localSets == null && super
Distance : 10

45
Tree	- embedded && name.localSets == null && super
Code	- embedded && name.localSets == null && super
Distance : 10

46
Tree	- lhsOfForInLoop && name.localSets == null && super
Code	- lhsOfForInLoop && name.localSets == null && super
Distance : 10

47
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

48
Tree	- embedded && name.localSets == null && super
Code	- embedded && name.localSets == null && super
Distance : 10

49
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Distance : 9

50
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

51
Tree	! name.localSets && name.localSets == continue; == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == continue; == NUMBER_CONSTANT
Distance : 9

52
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Distance : 12

53
Tree	! name.localSets && name.localSets == null && super
Code	! name.localSets && name.localSets == null && super
Distance : 9

54
Tree	! name.localSets && name.localSets == null == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == null == NUMBER_CONSTANT
Distance : 9

55
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

56
Tree	- name.localSets && name.localSets == null && extends
Code	- name.localSets && name.localSets == null && extends
Distance : 10

57
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

58
Tree	- && && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Code	- && && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Distance : 9

59
Tree	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Code	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

60
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Distance : 10

61
Tree	! name.localSets && name.localSets == return; == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == return; == NUMBER_CONSTANT
Distance : 9

62
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

63
Tree	! name.localSets && name.localSets == break; == NUMBER_CONSTANT
Code	! name.localSets && name.localSets == break; == NUMBER_CONSTANT
Distance : 9

64
Tree	- NUMBER_CONSTANT && name.localSets == null && super
Code	- NUMBER_CONSTANT && name.localSets == null && super
Distance : 9

65
Tree	- NUMBER_CONSTANT && name.localSets == null && super
Code	- NUMBER_CONSTANT && name.localSets == null && super
Distance : 9

66
Tree	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Code	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Distance : 9

67
Tree	- newInput && name.localSets == null && super
Code	- newInput && name.localSets == null && super
Distance : 10

68
Tree	- name.localSets && name.localSets == null && &&
Code	- name.localSets && name.localSets == null && &&
Distance : 10

69
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 12

70
Tree	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	- name.localSets && name.localSets == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 12

71
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Context context = Context.OTHER . Context.OTHER ( NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER . Context.OTHER ( NUMBER_CONSTANT ) ;
Distance : 5

1
Tree	Context rhsContext = context . Context.OTHER ( Context.OTHER , NUMBER_CONSTANT , rhsContext ) ;
Code	Context rhsContext = context . Context.OTHER ( Context.OTHER , NUMBER_CONSTANT , rhsContext ) ;
Distance : 8

2
Tree	Context context = Context.OTHER ( context ) ;
Code	Context context = Context.OTHER ( context ) ;
Distance : 2

3
Tree	Context.OTHER rhsContext = Context.OTHER ; Test
Code	Context.OTHER rhsContext = Context.OTHER ; Test
Distance : 6

4
Tree	Context rhsContext = Context.OTHER ; Test
Code	Context rhsContext = Context.OTHER ; Test
Distance : 5

5
Tree	Context context = context . Context.OTHER ( Context.OTHER ) ;
Code	Context context = context . Context.OTHER ( Context.OTHER ) ;
Distance : 5

6
Tree	Context context = Context.OTHER ( context , Context.OTHER ) ;
Code	Context context = Context.OTHER ( context , Context.OTHER ) ;
Distance : 4

7
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( ( Context [] ) null ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( ( Context [] ) null ) ;
Distance : 8

8
Tree	Context rhsContext = context . Context.OTHER () ? null : rhsContext ;
Code	Context rhsContext = context . Context.OTHER () ? null : rhsContext ;
Distance : 8

9
Tree	Context rhsContext = Context.OTHER ( context , rhsContext ) ;
Code	Context rhsContext = Context.OTHER ( context , rhsContext ) ;
Distance : 3

10
Tree	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 6

11
Tree	Context context = Context.OTHER () ;
Code	Context context = Context.OTHER () ;
Distance : 5

12
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 6

13
Tree	Context [] rhsContext = Context.OTHER ; Class
Code	Context [] rhsContext = Context.OTHER ; Class
Distance : 6

14
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; Class
Code	Context Context [] = Context.OTHER . Context.OTHER () ; Class
Distance : 7

15
Tree	final short rhsContext = Context.OTHER ;
Code	final short rhsContext = Context.OTHER ;
Distance : 6

16
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

17
Tree	Context rhsContext = STRING_CONSTANT ; Class
Code	Context rhsContext = STRING_CONSTANT ; Class
Distance : 5

18
Tree	Context Context [] = Context.OTHER ; Test
Code	Context Context [] = Context.OTHER ; Test
Distance : 7

19
Tree	Context rhsContext = context . Context.OTHER () ;
Code	Context rhsContext = context . Context.OTHER () ;
Distance : 4

20
Tree	Context context = Context.OTHER ( Context.OTHER , STRING_CONSTANT ) ;
Code	Context context = Context.OTHER ( Context.OTHER , STRING_CONSTANT ) ;
Distance : 5

21
Tree	Context rhsContext = context . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

22
Tree	Context rhsContext = false ;
Code	Context rhsContext = false ;
Distance : 4

23
Tree	boolean rhsContext = Context.OTHER ;
Code	boolean rhsContext = Context.OTHER ;
Distance : 5

24
Tree	Context rhsContext = getOrCreateName ;
Code	Context rhsContext = getOrCreateName ;
Distance : 4

25
Tree	Context rhsContext = requirePrinter ;
Code	Context rhsContext = requirePrinter ;
Distance : 4

26
Tree	Context context = context . Context.OTHER () ;
Code	Context context = context . Context.OTHER () ;
Distance : 5

27
Tree	Context rhsContext = binaryComparator ;
Code	Context rhsContext = binaryComparator ;
Distance : 4

28
Tree	Context rhsContext = true ;
Code	Context rhsContext = true ;
Distance : 4

29
Tree	char rhsContext = Context.OTHER ;
Code	char rhsContext = Context.OTHER ;
Distance : 5

30
Tree	Context Context [] = context ;
Code	Context Context [] = context ;
Distance : 5

31
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

32
Tree	short rhsContext = Context.OTHER ;
Code	short rhsContext = Context.OTHER ;
Distance : 5

33
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( context ) ;
Distance : 3

34
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , false ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , false ) ;
Distance : 4

35
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ? super(); : rhsContext ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ? super(); : rhsContext ;
Distance : 8

36
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ? null : rhsContext ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ? null : rhsContext ;
Distance : 8

37
Tree	Context rhsContext = source.contractionCriterion ;
Code	Context rhsContext = source.contractionCriterion ;
Distance : 4

38
Tree	Context context = context ? Context.OTHER : Context.OTHER ;
Code	Context context = context ? Context.OTHER : Context.OTHER ;
Distance : 6

39
Tree	Context context = this . rhsContext ;
Code	Context context = this . rhsContext ;
Distance : 5

40
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 5

41
Tree	Context rhsContext = this . rhsContext . Context.OTHER () ;
Code	Context rhsContext = this . rhsContext . Context.OTHER () ;
Distance : 6

42
Tree	Context rhsContext = context () ;
Code	Context rhsContext = context () ;
Distance : 3

43
Tree	rhsContext context ;
Code	rhsContext context ;
Distance : 5

44
Tree	Context context ;
Code	Context context ;
Distance : 5

45
Tree	rhsContext rhsContext = Context.OTHER ;
Code	rhsContext rhsContext = Context.OTHER ;
Distance : 5

46
Tree	synchronized Context rhsContext = Context.OTHER ;
Code	synchronized Context rhsContext = Context.OTHER ;
Distance : 5

47
Tree	int rhsContext = Context.OTHER ;
Code	int rhsContext = Context.OTHER ;
Distance : 5

48
Tree	Context rhsContext = context ( context ) ;
Code	Context rhsContext = context ( context ) ;
Distance : 1

49
Tree	Context rhsContext = this . rhsContext ;
Code	Context rhsContext = this . rhsContext ;
Distance : 4

50
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( null ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( null ) ;
Distance : 4

51
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

52
Tree	Context rhsContext = CHAR_CONS ;
Code	Context rhsContext = CHAR_CONS ;
Distance : 4

53
Tree	Context rhsContext = context ( Context.OTHER ) ;
Code	Context rhsContext = context ( Context.OTHER ) ;
Distance : 2

54
Tree	int rhsContext = Context.OTHER ;
Code	int rhsContext = Context.OTHER ;
Distance : 5

55
Tree	Context rhsContext = context . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( Context.OTHER ) ;
Distance : 4

56
Tree	Context context = Context.OTHER ( Context.OTHER ) ;
Code	Context context = Context.OTHER ( Context.OTHER ) ;
Distance : 3

57
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ;
Distance : 4

58
Tree	Context context = Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context context = Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 5

59
Tree	Context context = new Context.OTHER () ;
Code	Context context = new Context.OTHER () ;
Distance : 5

60
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ? break; : rhsContext ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ? break; : rhsContext ;
Distance : 8

61
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( NUMBER_CONSTANT ) ;
Distance : 4

62
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( ( Context [] ) super(); ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( ( Context [] ) super(); ) ;
Distance : 8

63
Tree	Context.OTHER rhsContext = Context.OTHER ; Class
Code	Context.OTHER rhsContext = Context.OTHER ; Class
Distance : 6

64
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ;
Distance : 4

65
Tree	abstract Context rhsContext = Context.OTHER ;
Code	abstract Context rhsContext = Context.OTHER ;
Distance : 5

66
Tree	Context rhsContext = getOrCreateName ;
Code	Context rhsContext = getOrCreateName ;
Distance : 4

67
Tree	Context context = true ;
Code	Context context = true ;
Distance : 5

68
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( super(); ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( super(); ) ;
Distance : 4

69
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ;
Distance : 2

70
Tree	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Distance : 5

71
Tree	Context rhsContext ;
Code	Context rhsContext ;
Distance : 5

72
Tree	Context Context [] = Context.OTHER . Context.OTHER () ;
Code	Context Context [] = Context.OTHER . Context.OTHER () ;
Distance : 6

73
Tree	Context rhsContext = continue; ;
Code	Context rhsContext = continue; ;
Distance : 4

74
Tree	Context context = Context.OTHER ( Context.OTHER , this . rhsContext ) ;
Code	Context context = Context.OTHER ( Context.OTHER , this . rhsContext ) ;
Distance : 7

75
Tree	Context context = NUMBER_CONSTANT ;
Code	Context context = NUMBER_CONSTANT ;
Distance : 5

76
Tree	context context ;
Code	context context ;
Distance : 6

77
Tree	Context context = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Code	Context context = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Distance : 5

78
Tree	Context context = false ;
Code	Context context = false ;
Distance : 5

79
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , STRING_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , STRING_CONSTANT ) ;
Distance : 4

80
Tree	rhsContext context = Context.OTHER ;
Code	rhsContext context = Context.OTHER ;
Distance : 6

81
Tree	Context Context [] = context . Context.OTHER () ;
Code	Context Context [] = context . Context.OTHER () ;
Distance : 6

82
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , this . rhsContext ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , this . rhsContext ) ;
Distance : 6

83
Tree	Context rhsContext = new Context.OTHER ( context , rhsContext ) ;
Code	Context rhsContext = new Context.OTHER ( context , rhsContext ) ;
Distance : 4

84
Tree	Context context = CHAR_CONS ;
Code	Context context = CHAR_CONS ;
Distance : 5

85
Tree	Context rhsContext = new Context.OTHER ( Context ) ;
Code	Context rhsContext = new Context.OTHER ( Context ) ;
Distance : 3

86
Tree	Context [] rhsContext = Context.OTHER ; Test
Code	Context [] rhsContext = Context.OTHER ; Test
Distance : 6

87
Tree	boolean /= ;
Code	boolean /= ;
Distance : 7

88
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

89
Tree	Context rhsContext = new Context.OTHER () ;
Code	Context rhsContext = new Context.OTHER () ;
Distance : 4

90
Tree	Context context = this . context . Context.OTHER () ;
Code	Context context = this . context . Context.OTHER () ;
Distance : 6

91
Tree	Context rhsContext = context ;
Code	Context rhsContext = context ;
Distance : 3

92
Tree	Context [] context = Context.OTHER ;
Code	Context [] context = Context.OTHER ;
Distance : 6

93
Tree	Context rhsContext = requirePrinter ;
Code	Context rhsContext = requirePrinter ;
Distance : 4

94
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , NUMBER_CONSTANT , context ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , NUMBER_CONSTANT , context ) ;
Distance : 7

95
Tree	Context rhsContext = context . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 6

96
Tree	Context rhsContext = Context.OTHER ( context , false ) ;
Code	Context rhsContext = Context.OTHER ( context , false ) ;
Distance : 3

97
Tree	Context rhsContext = Context.OTHER ( context , STRING_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( context , STRING_CONSTANT ) ;
Distance : 3

98
Tree	context rhsContext = Context.OTHER ;
Code	context rhsContext = Context.OTHER ;
Distance : 5

99
Tree	private Context rhsContext = Context.OTHER ;
Code	private Context rhsContext = Context.OTHER ;
Distance : 5

100
Tree	Context context = context () ;
Code	Context context = context () ;
Distance : 4

101
Tree	Context context = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Distance : 4

102
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , this . context ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , this . context ) ;
Distance : 5

103
Tree	Context.OTHER context = Context.OTHER ;
Code	Context.OTHER context = Context.OTHER ;
Distance : 6

104
Tree	Context rhsContext = NUMBER_CONSTANT ;
Code	Context rhsContext = NUMBER_CONSTANT ;
Distance : 4

105
Tree	Context rhsContext = new Context.OTHER ( Context , context , = . = () ) ;
Code	Context rhsContext = new Context.OTHER ( Context , context , = . = () ) ;
Distance : 9

106
Tree	Context rhsContext = super . Context.OTHER () ; Test
Code	Context rhsContext = super . Context.OTHER () ; Test
Distance : 5

107
Tree	boolean += ;
Code	boolean += ;
Distance : 7

108
Tree	final char rhsContext = Context.OTHER ;
Code	final char rhsContext = Context.OTHER ;
Distance : 6

109
Tree	Context rhsContext = STRING_CONSTANT + rhsContext ;
Code	Context rhsContext = STRING_CONSTANT + rhsContext ;
Distance : 4

110
Tree	Context rhsContext = Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER ( context , Context.OTHER ) ;
Distance : 3

111
Tree	Context rhsContext = this . context ;
Code	Context rhsContext = this . context ;
Distance : 3

112
Tree	Context [ ;
Code	Context [ ;
Distance : 6

113
Tree	Context rhsContext = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Distance : 3

114
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ;
Distance : 2

115
Tree	Context rhsContext = context . Context.OTHER ( null ) ;
Code	Context rhsContext = context . Context.OTHER ( null ) ;
Distance : 4

116
Tree	final boolean rhsContext = Context.OTHER ;
Code	final boolean rhsContext = Context.OTHER ;
Distance : 6

117
Tree	Context rhsContext = STRING_CONSTANT + context ;
Code	Context rhsContext = STRING_CONSTANT + context ;
Distance : 3

118
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( context , NUMBER_CONSTANT , rhsContext ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( context , NUMBER_CONSTANT , rhsContext ) ;
Distance : 7

119
Tree	Context context = Context.OTHER ( Context.OTHER , rhsContext ) ;
Code	Context context = Context.OTHER ( Context.OTHER , rhsContext ) ;
Distance : 5

120
Tree	Context rhsContext = super . Context.OTHER () ;
Code	Context rhsContext = super . Context.OTHER () ;
Distance : 4

121
Tree	final int rhsContext = Context.OTHER ;
Code	final int rhsContext = Context.OTHER ;
Distance : 6

122
Tree	Context context = new Context.OTHER ( context ) ;
Code	Context context = new Context.OTHER ( context ) ;
Distance : 3

123
Tree	Context rhsContext = context . Context.OTHER ( context ) ;
Code	Context rhsContext = context . Context.OTHER ( context ) ;
Distance : 3

124
Tree	Context rhsContext = new Context.OTHER ( context , rhsContext , = . ; () ) ;
Code	Context rhsContext = new Context.OTHER ( context , rhsContext , = . ; () ) ;
Distance : 9

125
Tree	Context Context [] = Context.OTHER ; Class
Code	Context Context [] = Context.OTHER ; Class
Distance : 7

126
Tree	short /= ;
Code	short /= ;
Distance : 7

127
Tree	Context rhsContext = Context.OTHER ( context , this . rhsContext ) ;
Code	Context rhsContext = Context.OTHER ( context , this . rhsContext ) ;
Distance : 5

128
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , NUMBER_CONSTANT , rhsContext ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER , NUMBER_CONSTANT , rhsContext ) ;
Distance : 8

129
Tree	Context context = Context.OTHER . Context.OTHER () ;
Code	Context context = Context.OTHER . Context.OTHER () ;
Distance : 5

130
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , rhsContext ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , rhsContext ) ;
Distance : 4

131
Tree	Context rhsContext = new Context.OTHER ( context ) ;
Code	Context rhsContext = new Context.OTHER ( context ) ;
Distance : 2

132
Tree	Context rhsContext = context . Context.OTHER ( ( Context [] ) null ) ;
Code	Context rhsContext = context . Context.OTHER ( ( Context [] ) null ) ;
Distance : 8

133
Tree	Context context = context ;
Code	Context context = context ;
Distance : 4

134
Tree	Context rhsContext = CHAR_CONS ; Test
Code	Context rhsContext = CHAR_CONS ; Test
Distance : 5

135
Tree	Context context = STRING_CONSTANT + context ;
Code	Context context = STRING_CONSTANT + context ;
Distance : 4

136
Tree	boolean rhsContext = Context.OTHER ;
Code	boolean rhsContext = Context.OTHER ;
Distance : 5

137
Tree	Context rhsContext = NUMBER_CONSTANT ; Test
Code	Context rhsContext = NUMBER_CONSTANT ; Test
Distance : 5

138
Tree	Context context = Context.OTHER ( Context.OTHER , false ) ;
Code	Context context = Context.OTHER ( Context.OTHER , false ) ;
Distance : 5

139
Tree	Context rhsContext ; Test
Code	Context rhsContext ; Test
Distance : 6

140
Tree	Context rhsContext = Context.OTHER ; Class
Code	Context rhsContext = Context.OTHER ; Class
Distance : 5

141
Tree	boolean *= ;
Code	boolean *= ;
Distance : 7

142
Tree	Context ? ;
Code	Context ? ;
Distance : 6

143
Tree	Context rhsContext = new Context.OTHER ( Context , context ) ;
Code	Context rhsContext = new Context.OTHER ( Context , context ) ;
Distance : 4

144
Tree	Context rhsContext = context . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( Context.OTHER ) ;
Distance : 4

145
Tree	Context rhsContext ; Class
Code	Context rhsContext ; Class
Distance : 6

146
Tree	boolean rhsContext ;
Code	boolean rhsContext ;
Distance : 6

147
Tree	Context rhsContext = NUMBER_CONSTANT ; Class
Code	Context rhsContext = NUMBER_CONSTANT ; Class
Distance : 5

148
Tree	Context rhsContext = new Context.OTHER ( Context , rhsContext , = . = () ) ;
Code	Context rhsContext = new Context.OTHER ( Context , rhsContext , = . = () ) ;
Distance : 10

149
Tree	Context rhsContext = null ;
Code	Context rhsContext = null ;
Distance : 4

150
Tree	Context context = new Context.OTHER ( Context , rhsContext ) ;
Code	Context context = new Context.OTHER ( Context , rhsContext ) ;
Distance : 6

151
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; Test
Code	Context Context [] = Context.OTHER . Context.OTHER () ; Test
Distance : 7

152
Tree	Context rhsContext = new Context.OTHER () ; Test
Code	Context rhsContext = new Context.OTHER () ; Test
Distance : 5

153
Tree	Context rhsContext = context . Context.OTHER ( NUMBER_CONSTANT ) ;
Code	Context rhsContext = context . Context.OTHER ( NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	Context rhsContext = binaryComparator ;
Code	Context rhsContext = binaryComparator ;
Distance : 4

155
Tree	Context rhsContext = super . Context.OTHER () ; Class
Code	Context rhsContext = super . Context.OTHER () ; Class
Distance : 5

156
Tree	Context context = this . context ;
Code	Context context = this . context ;
Distance : 4

157
Tree	Context.OTHER rhsContext = Context.OTHER ;
Code	Context.OTHER rhsContext = Context.OTHER ;
Distance : 5

158
Tree	Context rhsContext = this . context . Context.OTHER () ;
Code	Context rhsContext = this . context . Context.OTHER () ;
Distance : 5

159
Tree	Context [] rhsContext = Context.OTHER ;
Code	Context [] rhsContext = Context.OTHER ;
Distance : 5

160
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , Context.OTHER ) ;
Distance : 4

161
Tree	Context context = new Context.OTHER ( Context ) ;
Code	Context context = new Context.OTHER ( Context ) ;
Distance : 4

162
Tree	Context context = STRING_CONSTANT + rhsContext ;
Code	Context context = STRING_CONSTANT + rhsContext ;
Distance : 5

163
Tree	Context *= ;
Code	Context *= ;
Distance : 6

164
Tree	short rhsContext ;
Code	short rhsContext ;
Distance : 6

165
Tree	int rhsContext ;
Code	int rhsContext ;
Distance : 6

166
Tree	Context rhsContext = super(); ;
Code	Context rhsContext = super(); ;
Distance : 4

167
Tree	Context context = this . rhsContext . Context.OTHER () ;
Code	Context context = this . rhsContext . Context.OTHER () ;
Distance : 7

168
Tree	char rhsContext ;
Code	char rhsContext ;
Distance : 6

169
Tree	Context rhsContext = Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER ( context ) ;
Distance : 1

170
Tree	Context context = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ;
Distance : 5

171
Tree	Context context = Context.OTHER ( context , STRING_CONSTANT ) ;
Code	Context context = Context.OTHER ( context , STRING_CONSTANT ) ;
Distance : 4

172
Tree	Context Context [] = Context.OTHER ;
Code	Context Context [] = Context.OTHER ;
Distance : 6

173
Tree	Context context = context . Context.OTHER ( NUMBER_CONSTANT ) ;
Code	Context context = context . Context.OTHER ( NUMBER_CONSTANT ) ;
Distance : 5

174
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , context ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , context ) ;
Distance : 3

175
Tree	Context rhsContext = Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER ( context ) ;
Distance : 1

176
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( ( Context [] ) return; ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( ( Context [] ) return; ) ;
Distance : 8

177
Tree	Context rhsContext = CHAR_CONS ; Class
Code	Context rhsContext = CHAR_CONS ; Class
Distance : 5

178
Tree	Context context = super . Context.OTHER () ;
Code	Context context = super . Context.OTHER () ;
Distance : 5

179
Tree	Context += ;
Code	Context += ;
Distance : 6

180
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Distance : 4

181
Tree	context rhsContext ;
Code	context rhsContext ;
Distance : 6

182
Tree	Context rhsContext = Context.OTHER () ;
Code	Context rhsContext = Context.OTHER () ;
Distance : 4

183
Tree	Context rhsContext = new Context.OTHER () ; Class
Code	Context rhsContext = new Context.OTHER () ; Class
Distance : 5

184
Tree	context context = Context.OTHER ;
Code	context context = Context.OTHER ;
Distance : 6

185
Tree	Context context = STRING_CONSTANT ;
Code	Context context = STRING_CONSTANT ;
Distance : 5

186
Tree	Context rhsContext = new Context.OTHER ( Context , rhsContext , context . = () ) ;
Code	Context rhsContext = new Context.OTHER ( Context , rhsContext , context . = () ) ;
Distance : 9

187
Tree	Context rhsContext = STRING_CONSTANT ; Test
Code	Context rhsContext = STRING_CONSTANT ; Test
Distance : 5

188
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( Context.OTHER ) ;
Distance : 4

189
Tree	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ;
Code	Context rhsContext = new Context.OTHER ( Context , rhsContext ) ;
Distance : 5

190
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , true ) ;
Code	Context rhsContext = Context.OTHER ( Context.OTHER , true ) ;
Distance : 4

191
Tree	rhsContext rhsContext ;
Code	rhsContext rhsContext ;
Distance : 6

192
Tree	short rhsContext = Context.OTHER ;
Code	short rhsContext = Context.OTHER ;
Distance : 5

193
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( break; ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( break; ) ;
Distance : 4

194
Tree	Context rhsContext = STRING_CONSTANT ;
Code	Context rhsContext = STRING_CONSTANT ;
Distance : 4

195
Tree	Context rhsContext = source.contractionCriterion ;
Code	Context rhsContext = source.contractionCriterion ;
Distance : 4

196
Tree	final Context rhsContext = Context.OTHER ;
Code	final Context rhsContext = Context.OTHER ;
Distance : 5

197
Tree	char rhsContext = Context.OTHER ;
Code	char rhsContext = Context.OTHER ;
Distance : 5

198
Tree	Context rhsContext = return; ;
Code	Context rhsContext = return; ;
Distance : 4

199
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return getNativeType () ? null : ARRAY_TYPE ; }
Distance : 8

1
Tree	{ return super . isAllType () ; }
Code	{ return super . isAllType () ; }
Distance : 8

2
Tree	{ return isAllType ( STRING_CONSTANT ) ; }
Code	{ return isAllType ( STRING_CONSTANT ) ; }
Distance : 8

3
Tree	{ return getNativeType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return getNativeType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

4
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Distance : 8

5
Tree	{ return STRING_CONSTANT + isAllType () ; }
Code	{ return STRING_CONSTANT + isAllType () ; }
Distance : 9

6
Tree	super . isAllType () ;
Code	super . isAllType () ;
Distance : 11

7
Tree	{ return ARRAY_TYPE . getNativeType () ; }
Code	{ return ARRAY_TYPE . getNativeType () ; }
Distance : 9

8
Tree	{ return topType . getNativeType () ; }
Code	{ return topType . getNativeType () ; }
Distance : 8

9
Tree	{ this . ARRAY_TYPE = interpolator.currentDerivative ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = interpolator.currentDerivative ; return ARRAY_TYPE ; }
Distance : 10

10
Tree	{ return ( this . topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( this . topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 8

11
Tree	{ return ( this . ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( this . ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 9

12
Tree	{ this . ARRAY_TYPE = TypeInferenceMode.BOTH ; super }
Code	{ this . ARRAY_TYPE = TypeInferenceMode.BOTH ; super }
Distance : 11

13
Tree	{ return isAllType () ? null : topType ; }
Code	{ return isAllType () ? null : topType ; }
Distance : 6

14
Tree	private final double isAllType () { return topType ; }
Code	private final double isAllType () { return topType ; }
Distance : 10

15
Tree	{ return ( topType ) getNativeType ( { ) ; }
Code	{ return ( topType ) getNativeType ( { ) ; }
Distance : 8

16
Tree	private final int getNativeType () { return topType ; }
Code	private final int getNativeType () { return topType ; }
Distance : 11

17
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Distance : 5

18
Tree	{ return topType ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Code	{ return topType ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

19
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Distance : 9

20
Tree	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Distance : 10

21
Tree	private boolean getNativeType () { return this . topType ; }
Code	private boolean getNativeType () { return this . topType ; }
Distance : 11

22
Tree	{ return topType ? topType . isAllType () : NUMBER_CONSTANT ; }
Code	{ return topType ? topType . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

23
Tree	{ return ARRAY_TYPE ? topType . isAllType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? topType . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

24
Tree	private final int isAllType () { return this . topType ; }
Code	private final int isAllType () { return this . topType ; }
Distance : 10

25
Tree	{ isAllType () ; return topType ; }
Code	{ isAllType () ; return topType ; }
Distance : 9

26
Tree	{ return new HarmonicFunction < } > () ; }
Code	{ return new HarmonicFunction < } > () ; }
Distance : 11

27
Tree	isAllType () ;
Code	isAllType () ;
Distance : 12

28
Tree	{ return isAllType () ; }
Code	{ return isAllType () ; }
Distance : 9

29
Tree	{ this . topType = TypeInferenceMode.BOTH ; super }
Code	{ this . topType = TypeInferenceMode.BOTH ; super }
Distance : 12

30
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 12

31
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 12

32
Tree	{ return STRING_CONSTANT + isAllType () ; } Class
Code	{ return STRING_CONSTANT + isAllType () ; } Class
Distance : 10

33
Tree	{ return super . isAllType () ; } Test
Code	{ return super . isAllType () ; } Test
Distance : 9

34
Tree	{ return new PomComparator ( this ) ; }
Code	{ return new PomComparator ( this ) ; }
Distance : 9

35
Tree	{ super . isAllType () ; } Class
Code	{ super . isAllType () ; } Class
Distance : 10

36
Tree	{ return new InMemoryClassLoader ( this ) ; }
Code	{ return new InMemoryClassLoader ( this ) ; }
Distance : 9

37
Tree	{ return ! isAllType () ; }
Code	{ return ! isAllType () ; }
Distance : 9

38
Tree	{ return new PomComparator < } > () ; }
Code	{ return new PomComparator < } > () ; }
Distance : 11

39
Tree	super . isAllType () ; Test
Code	super . isAllType () ; Test
Distance : 11

40
Tree	{ ; }
Code	{ ; }
Distance : 12

41
Tree	{ return new InMemoryClassLoader ( this . ARRAY_TYPE ) ; }
Code	{ return new InMemoryClassLoader ( this . ARRAY_TYPE ) ; }
Distance : 9

42
Tree	{ this . ARRAY_TYPE = TypeInferenceMode.BOTH ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = TypeInferenceMode.BOTH ; return ARRAY_TYPE ; }
Distance : 10

43
Tree	{ return ( topType ) getNativeType ( TernaryValue.UNKNOWN ) ; }
Code	{ return ( topType ) getNativeType ( TernaryValue.UNKNOWN ) ; }
Distance : 8

44
Tree	{ return ( ARRAY_TYPE ) getNativeType ( Any.ANY ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( Any.ANY ) ; }
Distance : 8

45
Tree	{ this . topType = interpolator.currentDerivative ; return ARRAY_TYPE ; }
Code	{ this . topType = interpolator.currentDerivative ; return ARRAY_TYPE ; }
Distance : 10

46
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 11

47
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 11

48
Tree	{ return new PomComparator ( ARRAY_TYPE ) ; }
Code	{ return new PomComparator ( ARRAY_TYPE ) ; }
Distance : 8

49
Tree	{ return new InMemoryClassLoader ( ARRAY_TYPE ) ; }
Code	{ return new InMemoryClassLoader ( ARRAY_TYPE ) ; }
Distance : 8

50
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 11

51
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

52
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

53
Tree	{ return true ; }
Code	{ return true ; }
Distance : 11

54
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 11

55
Tree	{ return setShapeInternal ; }
Code	{ return setShapeInternal ; }
Distance : 11

56
Tree	{ return new multiplicand ( this ) ; }
Code	{ return new multiplicand ( this ) ; }
Distance : 9

57
Tree	{ return new ConstantFuture ( this ) ; }
Code	{ return new ConstantFuture ( this ) ; }
Distance : 9

58
Tree	{ return ( topType ) getNativeType () ; }
Code	{ return ( topType ) getNativeType () ; }
Distance : 9

59
Tree	{ return this . topType . isAllType () ; }
Code	{ return this . topType . isAllType () ; }
Distance : 9

60
Tree	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Distance : 6

61
Tree	{ return topType . getNativeType () ? null : topType ; }
Code	{ return topType . getNativeType () ? null : topType ; }
Distance : 5

62
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) getNativeType () ; }
Distance : 8

63
Tree	{ return ARRAY_TYPE . isAllType () ; }
Code	{ return ARRAY_TYPE . isAllType () ; }
Distance : 8

64
Tree	private boolean isAllType () { return this . topType ; }
Code	private boolean isAllType () { return this . topType ; }
Distance : 10

65
Tree	private int isAllType () { return this . topType ; }
Code	private int isAllType () { return this . topType ; }
Distance : 10

66
Tree	{ return isAllType () ; } Test
Code	{ return isAllType () ; } Test
Distance : 10

67
Tree	{ return isAllType () ; } Class
Code	{ return isAllType () ; } Class
Distance : 10

68
Tree	{ return ARRAY_TYPE ; } Test
Code	{ return ARRAY_TYPE ; } Test
Distance : 11

69
Tree	private final int getNativeType () { return this . topType ; }
Code	private final int getNativeType () { return this . topType ; }
Distance : 11

70
Tree	{ return ! isAllType () ; } Class
Code	{ return ! isAllType () ; } Class
Distance : 10

71
Tree	{ return false ; }
Code	{ return false ; }
Distance : 11

72
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 11

73
Tree	{ throw isAllType () ; } Test
Code	{ throw isAllType () ; } Test
Distance : 11

74
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

75
Tree	{ return null ; }
Code	{ return null ; }
Distance : 11

76
Tree	{ return PRECISE_YEAR_WEEK ; }
Code	{ return PRECISE_YEAR_WEEK ; }
Distance : 11

77
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 12

78
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 12

79
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 12

80
Tree	{ return ARRAY_TYPE ; } Class
Code	{ return ARRAY_TYPE ; } Class
Distance : 11

81
Tree	{ return isAllType ( STRING_CONSTANT ) ; } Test
Code	{ return isAllType ( STRING_CONSTANT ) ; } Test
Distance : 9

82
Tree	{ return STRING_CONSTANT + STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT + STRING_CONSTANT ; } class
Distance : 12

83
Tree	{ return ! isAllType () ; } Test
Code	{ return ! isAllType () ; } Test
Distance : 10

84
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Distance : 7

85
Tree	{ ; } array
Code	{ ; } array
Distance : 13

86
Tree	{ throw isAllType () ; } Class
Code	{ throw isAllType () ; } Class
Distance : 11

87
Tree	{ return ARRAY_TYPE ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } Test
Code	{ return ARRAY_TYPE ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } Test
Distance : 10

88
Tree	{ return this . topType ; } Test
Code	{ return this . topType ; } Test
Distance : 10

89
Tree	{ return this . topType ; } Class
Code	{ return this . topType ; } Class
Distance : 10

90
Tree	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Distance : 10

91
Tree	{ return STRING_CONSTANT + STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT + STRING_CONSTANT ; } notifyListeners
Distance : 12

92
Tree	{ return isAllType ( STRING_CONSTANT ) ; } Class
Code	{ return isAllType ( STRING_CONSTANT ) ; } Class
Distance : 9

93
Tree	{ return ( topType ) getNativeType ( java.util.Locale.US ) ; }
Code	{ return ( topType ) getNativeType ( java.util.Locale.US ) ; }
Distance : 8

94
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 12

95
Tree	{ return ( ARRAY_TYPE ) isAllType () ; }
Code	{ return ( ARRAY_TYPE ) isAllType () ; }
Distance : 8

96
Tree	{ getNativeType () ; return true ; }
Code	{ getNativeType () ; return true ; }
Distance : 11

97
Tree	{ this . topType = TypeInferenceMode.BOTH ; return ARRAY_TYPE ; }
Code	{ this . topType = TypeInferenceMode.BOTH ; return ARRAY_TYPE ; }
Distance : 10

98
Tree	{ return new PomComparator ( topType ) ; }
Code	{ return new PomComparator ( topType ) ; }
Distance : 9

99
Tree	{ return ( ARRAY_TYPE . getNativeType () . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () . isAllType () ? null : topType ) ; }
Distance : 9

100
Tree	{ return ! this . topType ; }
Code	{ return ! this . topType ; }
Distance : 10

101
Tree	{ return ( ARRAY_TYPE . isAllType () . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () . isAllType () ? null : topType ) ; }
Distance : 8

102
Tree	{ return new InMemoryClassLoader ( topType ) ; }
Code	{ return new InMemoryClassLoader ( topType ) ; }
Distance : 9

103
Tree	{ this . ARRAY_TYPE = interpolator.currentDerivative ; super }
Code	{ this . ARRAY_TYPE = interpolator.currentDerivative ; super }
Distance : 11

104
Tree	{ return ( topType ) { . isAllType ( ; ) ; }
Code	{ return ( topType ) { . isAllType ( ; ) ; }
Distance : 9

105
Tree	{ return ! this . ARRAY_TYPE ; }
Code	{ return ! this . ARRAY_TYPE ; }
Distance : 10

106
Tree	{ return ( topType ) { . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) { . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

107
Tree	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

108
Tree	private boolean getNativeType () { return topType ; }
Code	private boolean getNativeType () { return topType ; }
Distance : 11

109
Tree	{ return this . topType ; }
Code	{ return this . topType ; }
Distance : 9

110
Tree	{ return this . ARRAY_TYPE ; }
Code	{ return this . ARRAY_TYPE ; }
Distance : 9

111
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Distance : 7

112
Tree	private int getNativeType () { return topType ; }
Code	private int getNativeType () { return topType ; }
Distance : 11

113
Tree	{ return topType ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Code	{ return topType ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Distance : 8

114
Tree	{ isAllType () ; return true ; }
Code	{ isAllType () ; return true ; }
Distance : 10

115
Tree	{ return STRING_CONSTANT + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 11

116
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 11

117
Tree	{ getNativeType () ; return topType ; }
Code	{ getNativeType () ; return topType ; }
Distance : 10

118
Tree	{ return ( topType ) { . isAllType () ; }
Code	{ return ( topType ) { . isAllType () ; }
Distance : 10

119
Tree	{ return ( topType . getNativeType () ? null : topType ) ; }
Code	{ return ( topType . getNativeType () ? null : topType ) ; }
Distance : 7

120
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 12

121
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 12

122
Tree	{ return ! this . topType ; } Test
Code	{ return ! this . topType ; } Test
Distance : 11

123
Tree	private boolean isAllType () { return topType ; }
Code	private boolean isAllType () { return topType ; }
Distance : 10

124
Tree	private int isAllType () { return topType ; }
Code	private int isAllType () { return topType ; }
Distance : 10

125
Tree	{ return isAllType () ? null : ARRAY_TYPE ; }
Code	{ return isAllType () ? null : ARRAY_TYPE ; }
Distance : 7

126
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 13

127
Tree	{ isAllType () ; return ARRAY_TYPE ; }
Code	{ isAllType () ; return ARRAY_TYPE ; }
Distance : 9

128
Tree	{ return getNativeType ( STRING_CONSTANT ) ; }
Code	{ return getNativeType ( STRING_CONSTANT ) ; }
Distance : 8

129
Tree	{ return ( topType ) isAllType () ; }
Code	{ return ( topType ) isAllType () ; }
Distance : 9

130
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

131
Tree	{ return ( topType ) getNativeType ( Any.ANY ) ; }
Code	{ return ( topType ) getNativeType ( Any.ANY ) ; }
Distance : 8

132
Tree	getNativeType () ;
Code	getNativeType () ;
Distance : 13

133
Tree	{ return STRING_CONSTANT + getNativeType () ; }
Code	{ return STRING_CONSTANT + getNativeType () ; }
Distance : 10

134
Tree	{ return new multiplicand < topType > () ; }
Code	{ return new multiplicand < topType > () ; }
Distance : 11

135
Tree	{ return ARRAY_TYPE ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

136
Tree	{ return topType ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	{ return topType ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

137
Tree	{ return new InMemoryClassLoader ( this . topType ) ; }
Code	{ return new InMemoryClassLoader ( this . topType ) ; }
Distance : 10

138
Tree	{ throw isAllType () ; }
Code	{ throw isAllType () ; }
Distance : 10

139
Tree	{ return new InMemoryClassLoader < topType > () ; }
Code	{ return new InMemoryClassLoader < topType > () ; }
Distance : 11

140
Tree	{ return new PomComparator ( this . ARRAY_TYPE ) ; }
Code	{ return new PomComparator ( this . ARRAY_TYPE ) ; }
Distance : 9

141
Tree	{ return ( topType ) { . getNativeType () ; }
Code	{ return ( topType ) { . getNativeType () ; }
Distance : 10

142
Tree	private final double isAllType () { return this . topType ; }
Code	private final double isAllType () { return this . topType ; }
Distance : 10

143
Tree	private final boolean isAllType () { return topType ; }
Code	private final boolean isAllType () { return topType ; }
Distance : 10

144
Tree	private final int isAllType () { return topType ; }
Code	private final int isAllType () { return topType ; }
Distance : 10

145
Tree	{ return topType . isAllType () ? null : topType ; }
Code	{ return topType . isAllType () ? null : topType ; }
Distance : 4

146
Tree	{ return ( topType . isAllType () ? null : topType ) ; }
Code	{ return ( topType . isAllType () ? null : topType ) ; }
Distance : 6

147
Tree	super . getNativeType () ;
Code	super . getNativeType () ;
Distance : 12

148
Tree	{ return ARRAY_TYPE ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Code	{ return ARRAY_TYPE ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Distance : 9

149
Tree	{ throw getNativeType () ; }
Code	{ throw getNativeType () ; }
Distance : 11

150
Tree	{ super . isAllType () ; }
Code	{ super . isAllType () ; }
Distance : 9

151
Tree	{ return ! getNativeType () ; }
Code	{ return ! getNativeType () ; }
Distance : 10

152
Tree	{ return ARRAY_TYPE . ; ( topType ) ; }
Code	{ return ARRAY_TYPE . ; ( topType ) ; }
Distance : 8

153
Tree	{ return isAllType ( LocalizedFormats.EVALUATIONS ) ; }
Code	{ return isAllType ( LocalizedFormats.EVALUATIONS ) ; }
Distance : 8

154
Tree	{ return getNativeType ( LocalizedFormats.EVALUATIONS ) ; }
Code	{ return getNativeType ( LocalizedFormats.EVALUATIONS ) ; }
Distance : 8

155
Tree	{ getNativeType () ; return false ; }
Code	{ getNativeType () ; return false ; }
Distance : 11

156
Tree	{ return topType ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ; }
Code	{ return topType ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ; }
Distance : 8

157
Tree	{ return ARRAY_TYPE ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ; }
Code	{ return ARRAY_TYPE ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ; }
Distance : 9

158
Tree	{ return topType . isAllType () ; }
Code	{ return topType . isAllType () ; }
Distance : 7

159
Tree	{ isAllType () ; return false ; }
Code	{ isAllType () ; return false ; }
Distance : 10

160
Tree	{ return isAllType ( Opcodes.ASM6 ) ; }
Code	{ return isAllType ( Opcodes.ASM6 ) ; }
Distance : 8

161
Tree	{ return new PomComparator ( this . topType ) ; }
Code	{ return new PomComparator ( this . topType ) ; }
Distance : 10

162
Tree	{ return getNativeType () ; }
Code	{ return getNativeType () ; }
Distance : 10

163
Tree	{ return this . ARRAY_TYPE . isAllType () ; }
Code	{ return this . ARRAY_TYPE . isAllType () ; }
Distance : 9

164
Tree	{ return ! this . topType ; } Class
Code	{ return ! this . topType ; } Class
Distance : 11

165
Tree	{ return isAllType ( LocalizedFormats.NOT_POSITIVE_ALPHA ) ; }
Code	{ return isAllType ( LocalizedFormats.NOT_POSITIVE_ALPHA ) ; }
Distance : 8

166
Tree	{ return STRING_CONSTANT + isAllType () ; } Test
Code	{ return STRING_CONSTANT + isAllType () ; } Test
Distance : 10

167
Tree	{ return super . getNativeType () ; }
Code	{ return super . getNativeType () ; }
Distance : 9

168
Tree	{ super . getNativeType () ; }
Code	{ super . getNativeType () ; }
Distance : 10

169
Tree	{ return this . topType . getNativeType () ; }
Code	{ return this . topType . getNativeType () ; }
Distance : 9

170
Tree	{ return this . ARRAY_TYPE . getNativeType () ; }
Code	{ return this . ARRAY_TYPE . getNativeType () ; }
Distance : 9

171
Tree	{ return ARRAY_TYPE . ARRAY_TYPE ( ; ) ; }
Code	{ return ARRAY_TYPE . ARRAY_TYPE ( ; ) ; }
Distance : 8

172
Tree	{ getNativeType () ; return ARRAY_TYPE ; }
Code	{ getNativeType () ; return ARRAY_TYPE ; }
Distance : 10

173
Tree	{ return ( ARRAY_TYPE ) { . isAllType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType ( { ) ; }
Distance : 9

174
Tree	{ return getNativeType () ? null : topType ; }
Code	{ return getNativeType () ? null : topType ; }
Distance : 7

175
Tree	{ return ( ARRAY_TYPE ) { . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

176
Tree	{ return ARRAY_TYPE ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } Class
Code	{ return ARRAY_TYPE ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } Class
Distance : 10

177
Tree	{ return STRING_CONSTANT + STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT + STRING_CONSTANT ; } array
Distance : 12

178
Tree	{ return topType . isAllType ( topType ) ; }
Code	{ return topType . isAllType ( topType ) ; }
Distance : 6

179
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 6

180
Tree	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 5

181
Tree	{ return multiplicand ; }
Code	{ return multiplicand ; }
Distance : 11

182
Tree	{ return super . isAllType () ; } Class
Code	{ return super . isAllType () ; } Class
Distance : 9

183
Tree	isAllType () ; Test
Code	isAllType () ; Test
Distance : 12

184
Tree	{ return ( topType . getNativeType () . isAllType () ? null : topType ) ; }
Code	{ return ( topType . getNativeType () . isAllType () ? null : topType ) ; }
Distance : 8

185
Tree	super . isAllType () ; Class
Code	super . isAllType () ; Class
Distance : 11

186
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } Class
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } Class
Distance : 10

187
Tree	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Distance : 8

188
Tree	{ return topType . ; ( topType ) ; }
Code	{ return topType . ; ( topType ) ; }
Distance : 7

189
Tree	{ return topType . ARRAY_TYPE ( ; ) ; }
Code	{ return topType . ARRAY_TYPE ( ; ) ; }
Distance : 7

190
Tree	{ super . isAllType () ; } Test
Code	{ super . isAllType () ; } Test
Distance : 10

191
Tree	{ ; } class
Code	{ ; } class
Distance : 13

192
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } Test
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } Test
Distance : 10

193
Tree	{ return ( this . ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Code	{ return ( this . ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Distance : 9

194
Tree	{ return ( this . topType . getNativeType () ? null : topType ) ; }
Code	{ return ( this . topType . getNativeType () ? null : topType ) ; }
Distance : 9

195
Tree	{ this . topType = interpolator.currentDerivative ; super }
Code	{ this . topType = interpolator.currentDerivative ; super }
Distance : 12

196
Tree	isAllType () ; Class
Code	isAllType () ; Class
Distance : 12

197
Tree	private final boolean isAllType () { return this . topType ; }
Code	private final boolean isAllType () { return this . topType ; }
Distance : 10

198
Tree	private int getNativeType () { return this . topType ; }
Code	private int getNativeType () { return this . topType ; }
Distance : 11

199
Tree	{ return ( topType . isAllType () . isAllType () ? null : topType ) ; }
Code	{ return ( topType . isAllType () . isAllType () ? null : topType ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return false ; }
Distance : 19

1
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return false ; } return false ; }
Distance : 19

2
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 19

3
Tree	{ if ( ! isGet ( assignLhsChild != null , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild != null , parent ) ) { return true ; } return false ; }
Distance : 16

4
Tree	{ if ( isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 17

5
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

6
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 19

7
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } false }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } false }
Distance : 19

8
Tree	{ if ( ! allDefinitionsEquivalent . isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent . isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 19

9
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil ; }
Distance : 16

10
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 19

11
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil ; }
Distance : 15

12
Tree	{ if ( ! NodeUtil . isGet ( NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Distance : 20

13
Tree	{ if ( ! assignLhsChild . isGet ( FastDateParser.JAPANESE_IMPERIAL , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( FastDateParser.JAPANESE_IMPERIAL , assignLhsChild ) ) { return false ; } return false ; }
Distance : 19

14
Tree	{ if ( ! assignLhsChild . isGet ( Locale.US , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( Locale.US , assignLhsChild ) ) { return false ; } return false ; }
Distance : 19

15
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , false ) ) { return true ; } return false ; }
Distance : 20

16
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 12

17
Tree	{ if ( ! isGet ( assignLhsChild , parent != null , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent != null , NodeUtil ) ) { return true ; } return false ; }
Distance : 18

18
Tree	{ if ( ! isGet ( assignLhsChild , parent . isGet ( parent ) , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent . isGet ( parent ) , null ) ) { return false ; } return false ; }
Distance : 21

19
Tree	{ if ( ! isGet ( assignLhsChild , parent != null , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent != null , NodeUtil ) ) { return false ; } return false ; }
Distance : 19

20
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 12

21
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return parent ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return parent ; }
Distance : 16

22
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil . isGet ( parent ) , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil . isGet ( parent ) , null ) ) { return false ; } return false ; }
Distance : 21

23
Tree	{ if ( ! isGet ( parent , parent . isGet ( parent ) , null ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent . isGet ( parent ) , null ) ) { return false ; } return false ; }
Distance : 21

24
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return NodeUtil ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return NodeUtil ; }
Distance : 16

25
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 5

26
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

27
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

28
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , false ) ) { return false ; } return false ; }
Distance : 20

29
Tree	{ if ( ! isGet ( assignLhsChild , parent != null , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent != null , parent ) ) { return true ; } return false ; }
Distance : 18

30
Tree	{ if ( ! isGet ( assignLhsChild , parent != null , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent != null , parent ) ) { return false ; } return false ; }
Distance : 19

31
Tree	{ if ( ! isGet ( assignLhsChild != null , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild != null , parent ) ) { return false ; } return false ; }
Distance : 17

32
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

33
Tree	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

34
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 8

35
Tree	{ if ( ! assignLhsChild . isGet ( NUMBER_CONSTANT , parent ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( NUMBER_CONSTANT , parent ) ) { return false ; } return false ; }
Distance : 19

36
Tree	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

37
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return false ; } return false ; }
Distance : 19

38
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 7

39
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

40
Tree	{ if ( ! isGet ( parent , parent , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent , false ) ) { return false ; } return false ; }
Distance : 20

41
Tree	{ if ( ! assignLhsChild . isGet ( TimeZones.GMT_ID , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( TimeZones.GMT_ID , assignLhsChild ) ) { return false ; } return false ; }
Distance : 19

42
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 9

43
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 18

44
Tree	{ if ( ! parent . isGet ( NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Distance : 20

45
Tree	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 8

46
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

47
Tree	{ if ( isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 16

48
Tree	{ if ( ! assignLhsChild ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 9

49
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

50
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } false }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } false }
Distance : 18

51
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , false ) ) { return false ; } return false ; }
Distance : 20

52
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 10

53
Tree	{ if ( ! assignLhsChild . isGet ( TernaryValue.UNKNOWN , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( TernaryValue.UNKNOWN , assignLhsChild ) ) { return false ; } return false ; }
Distance : 19

54
Tree	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

55
Tree	{ if ( assignLhsChild != null && NodeUtil . isGet ( parent ) ) { return false ; } false }
Code	{ if ( assignLhsChild != null && NodeUtil . isGet ( parent ) ) { return false ; } false }
Distance : 16

56
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

57
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( parent ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( parent ) , isGet () ) ; }
Distance : 9

58
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 12

59
Tree	{ if ( ! currentScript.isModule ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( ! currentScript.isModule ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 9

60
Tree	{ if ( ! isGet ( assignLhsChild != null , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild != null , assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

61
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

62
Tree	{ if ( ! allDefinitionsEquivalent ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( ! allDefinitionsEquivalent ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 9

63
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

64
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

65
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Distance : 13

66
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

67
Tree	{ if ( ! StringUtils.EMPTY ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( ! StringUtils.EMPTY ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 9

68
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

69
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Distance : 19

70
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } false }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } false }
Distance : 19

71
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , PropAccess.INCLUDE_STRAY_PROPS ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , PropAccess.INCLUDE_STRAY_PROPS ) ) { return false ; } return false ; }
Distance : 19

72
Tree	{ if ( ! assignLhsChild . isGet ( != ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild . isGet ( != ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

73
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 10

74
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

75
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild . isGet ( parent ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild . isGet ( parent ) , isGet () ) ; }
Distance : 10

76
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 8

77
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( NodeUtil ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( NodeUtil ) , isGet () ) ; }
Distance : 10

78
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( false ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( false ) ) ) { return true ; } return false ; }
Distance : 23

79
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

80
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( false ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( false ) ) ; }
Distance : 10

81
Tree	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil ; }
Distance : 10

82
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Distance : 18

83
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

84
Tree	{ if ( assignLhsChild != parent ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != parent ) { return false ; } return false ; }
Distance : 12

85
Tree	{ if ( ! assignLhsChild . isGet ( TimeZones.GMT_ID ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( TimeZones.GMT_ID ) ) { return true ; } return false ; }
Distance : 16

86
Tree	{ if ( isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 16

87
Tree	{ if ( isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 15

88
Tree	{ if ( ! assignLhsChild . isGet ( TimeZones.GMT_ID ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( TimeZones.GMT_ID ) ) { return false ; } return false ; }
Distance : 17

89
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false , NodeUtil , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false , NodeUtil , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Distance : 23

90
Tree	{ if ( NodeUtil != parent ) { return true ; } return false ; }
Code	{ if ( NodeUtil != parent ) { return true ; } return false ; }
Distance : 12

91
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Distance : 24

92
Tree	{ if ( ! assignLhsChild . isGet ( NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Distance : 19

93
Tree	{ if ( assignLhsChild != null ) { return true ; } return parent ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return parent ; }
Distance : 9

94
Tree	{ if ( NodeUtil != null ) { return true ; } return NodeUtil ; }
Code	{ if ( NodeUtil != null ) { return true ; } return NodeUtil ; }
Distance : 10

95
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } assertFalse }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } assertFalse }
Distance : 18

96
Tree	{ if ( ! allDefinitionsEquivalent . isGet ( ( , parent ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent . isGet ( ( , parent ) ) { return false ; } return false ; }
Distance : 19

97
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

98
Tree	{ if ( assignLhsChild != null && parent . isGet ( parent ) ) { return true ; } false }
Code	{ if ( assignLhsChild != null && parent . isGet ( parent ) ) { return true ; } false }
Distance : 17

99
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

100
Tree	{ if ( ! NodeUtil ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false ; }
Distance : 13

101
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 9

102
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( NodeUtil , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( NodeUtil , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

103
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 11

104
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , IncrementalCheckMode.GENERATE_IJS ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , IncrementalCheckMode.GENERATE_IJS ) ) { return false ; } return false ; }
Distance : 19

105
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

106
Tree	{ if ( assignLhsChild != NodeUtil ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != NodeUtil ) { return true ; } return false ; }
Distance : 11

107
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } false }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } false }
Distance : 19

108
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

109
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Distance : 18

110
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

111
Tree	{ if ( assignLhsChild != null && NodeUtil . isGet ( parent ) ) { return true ; } false }
Code	{ if ( assignLhsChild != null && NodeUtil . isGet ( parent ) ) { return true ; } false }
Distance : 16

112
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 8

113
Tree	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Distance : 14

114
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

115
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

116
Tree	{ if ( ! parent ) { return true ; } return false ; }
Code	{ if ( ! parent ) { return true ; } return false ; }
Distance : 13

117
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

118
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 6

119
Tree	{ if ( ! this . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return false ; } return false ; }
Distance : 18

120
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( NodeUtil ) , isGet () ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( NodeUtil ) , isGet () ) ; }
Distance : 12

121
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , iValues.length ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , iValues.length ) ) { return false ; } return false ; }
Distance : 19

122
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

123
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } assertFalse }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } assertFalse }
Distance : 19

124
Tree	{ if ( ! isGet ( assignLhsChild != null , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild != null , assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

125
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Distance : 5

126
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 12

127
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , NodeUtil . isGet ( false ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , NodeUtil . isGet ( false ) ) ) { return true ; } return false ; }
Distance : 23

128
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

129
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Distance : 19

130
Tree	{ if ( ! currentScript.isModule . isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! currentScript.isModule . isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 19

131
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , false . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , false . isGet ( assignLhsChild ) ) ) { return true ; } return false ; }
Distance : 23

132
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

133
Tree	{ if ( assignLhsChild != null && parent . isGet ( parent ) ) { return false ; } false }
Code	{ if ( assignLhsChild != null && parent . isGet ( parent ) ) { return false ; } false }
Distance : 17

134
Tree	{ if ( ! currentScript.isModule . isGet ( ( , parent ) ) { return false ; } return false ; }
Code	{ if ( ! currentScript.isModule . isGet ( ( , parent ) ) { return false ; } return false ; }
Distance : 19

135
Tree	{ if ( assignLhsChild != parent ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != parent ) { return true ; } return false ; }
Distance : 11

136
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

137
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 12

138
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( } ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( } ) ) ) { return false ; } return false ; }
Distance : 23

139
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 17

140
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 17

141
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

142
Tree	{ if ( ! currentScript.isModule ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! currentScript.isModule ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

143
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 8

144
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 12

145
Tree	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 18

146
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

147
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

148
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 7

149
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

150
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 6

151
Tree	{ if ( ! STRING_CONSTANT . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! STRING_CONSTANT . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

152
Tree	{ if ( ! isGet ( this , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , parent ) ) { return false ; } return false ; }
Distance : 18

153
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

154
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

155
Tree	{ if ( ! STRING_CONSTANT . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! STRING_CONSTANT . isGet ( parent ) ) { return false ; } return false ; }
Distance : 18

156
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } false }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } false }
Distance : 18

157
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return false ; } return false ; }
Distance : 19

158
Tree	{ if ( ! isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return false ; } return false ; }
Distance : 16

159
Tree	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Distance : 17

160
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 11

161
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 11

162
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

163
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 11

164
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return false ; } return false ; }
Distance : 23

165
Tree	{ if ( ! isGet ( assignLhsChild , parent . isGet ( parent ) , return; ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent . isGet ( parent ) , return; ) ) { return false ; } return false ; }
Distance : 22

166
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 10

167
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return true ; } return false ; }
Distance : 23

168
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 8

169
Tree	{ if ( ! isGet ( assignLhsChild , IncrementalCheckMode.GENERATE_IJS , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , IncrementalCheckMode.GENERATE_IJS , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

170
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Distance : 11

171
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( parent ) , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild . isGet ( parent ) , NodeUtil . isGet ( parent ) ) ; }
Distance : 10

172
Tree	{ if ( ! isGet ( parent , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , false ) ) { return false ; } return false ; }
Distance : 20

173
Tree	{ if ( ! isGet ( assignLhsChild , IncrementalCheckMode.GENERATE_IJS , parent . isGet ( parent ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , IncrementalCheckMode.GENERATE_IJS , parent . isGet ( parent ) ) ) { return false ; } return false ; }
Distance : 21

174
Tree	{ if ( ! assignLhsChild . isGet ( TernaryValue.UNKNOWN ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( TernaryValue.UNKNOWN ) ) { return true ; } return false ; }
Distance : 16

175
Tree	{ if ( ! assignLhsChild . isGet ( TernaryValue.UNKNOWN ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( TernaryValue.UNKNOWN ) ) { return false ; } return false ; }
Distance : 17

176
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } false }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } false }
Distance : 19

177
Tree	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Distance : 15

178
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil ; }
Distance : 9

179
Tree	{ if ( ! STRING_CONSTANT . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! STRING_CONSTANT . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

180
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Distance : 10

181
Tree	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

182
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

183
Tree	{ if ( ! isGet ( assignLhsChild , PropAccess.INCLUDE_STRAY_PROPS , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , PropAccess.INCLUDE_STRAY_PROPS , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

184
Tree	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 5

185
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Distance : 12

186
Tree	{ if ( ! isGet ( assignLhsChild , PropAccess.INCLUDE_STRAY_PROPS , parent . isGet ( parent ) ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , PropAccess.INCLUDE_STRAY_PROPS , parent . isGet ( parent ) ) ) { return false ; } return false ; }
Distance : 21

187
Tree	{ if ( ! STRING_CONSTANT . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! STRING_CONSTANT . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

188
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

189
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

190
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

191
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

192
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

193
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 13

194
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 10

195
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 11

196
Tree	{ if ( ! currentScript.isModule ) { return true ; } return false ; }
Code	{ if ( ! currentScript.isModule ) { return true ; } return false ; }
Distance : 13

197
Tree	{ if ( ! allDefinitionsEquivalent ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ) { return true ; } return false ; }
Distance : 13

198
Tree	{ if ( ! StringUtils.EMPTY ) { return true ; } return false ; }
Code	{ if ( ! StringUtils.EMPTY ) { return true ; } return false ; }
Distance : 13

199
Tree	{ if ( ! isParsed ) { return true ; } return false ; }
Code	{ if ( ! isParsed ) { return true ; } return false ; }
Distance : 13

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

1
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

3
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

4
Tree	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

5
Tree	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

7
Tree	int indexOfDot = getShortNameForRequire . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = getShortNameForRequire . indexOf ( STRING_CONSTANT ) ;
Distance : 3

8
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , GlobalTypeInfoCollector.UNRECOGNIZED_TYPE_NAME ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , GlobalTypeInfoCollector.UNRECOGNIZED_TYPE_NAME ) ;
Distance : 4

9
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

10
Tree	int indexOfDot = crExportPathNode ;
Code	int indexOfDot = crExportPathNode ;
Distance : 6

11
Tree	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

12
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

13
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

14
Tree	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

15
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , CharUtils.NUL ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , CharUtils.NUL ) ;
Distance : 4

16
Tree	long indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

17
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

18
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	int indexOfDot = new Expm1 ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new Expm1 ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

20
Tree	endLimit indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	endLimit indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

21
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

22
Tree	int indexOfDot = scopeRoots ;
Code	int indexOfDot = scopeRoots ;
Distance : 6

23
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

24
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

25
Tree	int indexOfDot = metadata.superClassNameNode . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = metadata.superClassNameNode . indexOf ( STRING_CONSTANT ) ;
Distance : 3

26
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

27
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , Context.OTHER ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , Context.OTHER ) ;
Distance : 4

28
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

29
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Distance : 12

30
Tree	int indexOfDot = new Expm1 ( STRING_CONSTANT ) ;
Code	int indexOfDot = new Expm1 ( STRING_CONSTANT ) ;
Distance : 4

31
Tree	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

32
Tree	int clonedIndices [] = namespace ( namespace ) ;
Code	int clonedIndices [] = namespace ( namespace ) ;
Distance : 5

33
Tree	int indexOfDot = functionContext.function ;
Code	int indexOfDot = functionContext.function ;
Distance : 6

34
Tree	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 5

35
Tree	HarmonicFunction indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	HarmonicFunction indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

36
Tree	public indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

37
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

38
Tree	final int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	final int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

39
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Distance : 13

40
Tree	clonedIndices indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	clonedIndices indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

41
Tree	int FACTORIALS [] = namespace ( namespace ) ;
Code	int FACTORIALS [] = namespace ( namespace ) ;
Distance : 5

42
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

43
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

44
Tree	int indexOfDot = indexOf ( CHAR_CONS , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( CHAR_CONS , namespace , false , null , null ) ;
Distance : 10

45
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

46
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

47
Tree	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Distance : 11

48
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 12

49
Tree	int indexOfDot = new namespace ( namespace , MathUtils.SAFE_MIN , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , MathUtils.SAFE_MIN , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Distance : 11

50
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

51
Tree	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , tokens.length , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , tokens.length , NUMBER_CONSTANT ) ;
Distance : 11

52
Tree	double indexOfDot = namespace ;
Code	double indexOfDot = namespace ;
Distance : 6

53
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

54
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

55
Tree	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

56
Tree	int lastHold [] = namespace ( namespace ) ;
Code	int lastHold [] = namespace ( namespace ) ;
Distance : 5

57
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

58
Tree	int indexOfDot = crExportPathNode ;
Code	int indexOfDot = crExportPathNode ;
Distance : 6

59
Tree	int indexOfDot = crExportPathNode ;
Code	int indexOfDot = crExportPathNode ;
Distance : 6

60
Tree	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

61
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US , false ) ;
Distance : 14

62
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US ) ;
Distance : 12

63
Tree	int indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Distance : 8

64
Tree	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

65
Tree	indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

66
Tree	final indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 4

68
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

69
Tree	boolean indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	boolean indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

70
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

71
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

72
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

73
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

74
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

75
Tree	int indexOfDot = new namespace ( STRING_CONSTANT ) ;
Code	int indexOfDot = new namespace ( STRING_CONSTANT ) ;
Distance : 4

76
Tree	int indexOfDot = scopeRoots ;
Code	int indexOfDot = scopeRoots ;
Distance : 6

77
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

78
Tree	int indexOfDot = continue; ;
Code	int indexOfDot = continue; ;
Distance : 6

79
Tree	historyIdx indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	historyIdx indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

80
Tree	indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

81
Tree	int gmt [] = namespace . indexOf ( false , namespace ) ;
Code	int gmt [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

82
Tree	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

83
Tree	int FACTORIALS [] = namespace . indexOf ( false , namespace ) ;
Code	int FACTORIALS [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

84
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION , false ) ;
Distance : 14

85
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 5

86
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

87
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

88
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

89
Tree	long indexOfDot = CHAR_CONS ;
Code	long indexOfDot = CHAR_CONS ;
Distance : 6

90
Tree	long indexOfDot = new namespace ( STRING_CONSTANT ) ;
Code	long indexOfDot = new namespace ( STRING_CONSTANT ) ;
Distance : 5

91
Tree	int indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

92
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

93
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

94
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

95
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 13

96
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

97
Tree	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

98
Tree	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

99
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 9

100
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 12

101
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 9

102
Tree	int clonedIndices [] = namespace . indexOf ( false , namespace ) ;
Code	int clonedIndices [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

103
Tree	long indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	long indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

104
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

105
Tree	int indexOfDot = new ImageMapUtils ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ImageMapUtils ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

106
Tree	int gmt [] = namespace ( namespace ) ;
Code	int gmt [] = namespace ( namespace ) ;
Distance : 5

107
Tree	int gmt [] = indexOf () ;
Code	int gmt [] = indexOf () ;
Distance : 8

108
Tree	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

109
Tree	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

110
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

111
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , StringUtils.EMPTY ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , StringUtils.EMPTY ) ;
Distance : 4

112
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 13

113
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

114
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 9

115
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 9

116
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

118
Tree	int FACTORIALS [] = indexOf () ;
Code	int FACTORIALS [] = indexOf () ;
Distance : 8

119
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , values.length ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , values.length ) ;
Distance : 13

120
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

121
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 12

122
Tree	int clonedIndices [] = indexOf () ;
Code	int clonedIndices [] = indexOf () ;
Distance : 8

123
Tree	public int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	public int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

124
Tree	int indexOfDot = namespace ( CHAR_CONS , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( CHAR_CONS , namespace , namespace , namespace ) ;
Distance : 8

125
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

126
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

127
Tree	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

128
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

129
Tree	boolean indexOfDot = this . namespace ;
Code	boolean indexOfDot = this . namespace ;
Distance : 6

130
Tree	long indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

131
Tree	boolean indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Distance : 9

132
Tree	long indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

133
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

134
Tree	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

135
Tree	int indexOfDot = functionContext.function . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = functionContext.function . indexOf ( STRING_CONSTANT ) ;
Distance : 3

136
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

137
Tree	long indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Distance : 9

138
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

139
Tree	int indexOfDot = new ImageMapUtils ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ImageMapUtils ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

140
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

141
Tree	int indexOfDot = metadata.superClassNameNode ;
Code	int indexOfDot = metadata.superClassNameNode ;
Distance : 6

142
Tree	long indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

143
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Distance : 13

144
Tree	boolean indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

145
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

146
Tree	double indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

147
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

148
Tree	int lastHold [] = indexOf () ;
Code	int lastHold [] = indexOf () ;
Distance : 8

149
Tree	boolean indexOfDot = CHAR_CONS ;
Code	boolean indexOfDot = CHAR_CONS ;
Distance : 6

150
Tree	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

151
Tree	int lastHold [] = namespace . indexOf ( false , namespace ) ;
Code	int lastHold [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

152
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

153
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

154
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

155
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

156
Tree	boolean indexOfDot = false ;
Code	boolean indexOfDot = false ;
Distance : 7

157
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

158
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

159
Tree	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

160
Tree	int indexOfDot = scopeRoots ;
Code	int indexOfDot = scopeRoots ;
Distance : 6

161
Tree	int indexOfDot = new ImageMapUtils ( STRING_CONSTANT ) ;
Code	int indexOfDot = new ImageMapUtils ( STRING_CONSTANT ) ;
Distance : 4

162
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

163
Tree	double indexOfDot = false ;
Code	double indexOfDot = false ;
Distance : 7

164
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

165
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS , false ) ;
Distance : 14

166
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 12

167
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

168
Tree	double indexOfDot = this . namespace ;
Code	double indexOfDot = this . namespace ;
Distance : 6

169
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

170
Tree	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

171
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

172
Tree	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

173
Tree	indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

174
Tree	abstract int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	abstract int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

175
Tree	int indexOfDot = namespace . namespace ( namespace , namespace ) ;
Code	int indexOfDot = namespace . namespace ( namespace , namespace ) ;
Distance : 4

176
Tree	int indexOfDot = namespace . indexOf ( namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , namespace ) ;
Distance : 4

177
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 13

178
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , STRING_CONSTANT , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , STRING_CONSTANT , namespace , namespace ) ;
Distance : 7

179
Tree	int indexOfDot = namespace . namespace ( CHAR_CONS , namespace ) ;
Code	int indexOfDot = namespace . namespace ( CHAR_CONS , namespace ) ;
Distance : 3

180
Tree	boolean indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	boolean indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

181
Tree	boolean indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

182
Tree	namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

183
Tree	long indexOfDot = namespace . namespace ( namespace , namespace ) ;
Code	long indexOfDot = namespace . namespace ( namespace , namespace ) ;
Distance : 5

184
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

185
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

186
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

187
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

188
Tree	boolean indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	boolean indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

189
Tree	double indexOfDot = CHAR_CONS ;
Code	double indexOfDot = CHAR_CONS ;
Distance : 6

190
Tree	double indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	double indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

191
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

192
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 13

193
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Distance : 12

194
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT , false ) ;
Distance : 14

195
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 9

196
Tree	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Locale.US , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Locale.US , NUMBER_CONSTANT ) ;
Distance : 11

197
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 12

198
Tree	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Code	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Distance : 14

199
Tree	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

1
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

3
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

4
Tree	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

5
Tree	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int gmt [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

7
Tree	int indexOfDot = getShortNameForRequire . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = getShortNameForRequire . indexOf ( STRING_CONSTANT ) ;
Distance : 3

8
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , GlobalTypeInfoCollector.UNRECOGNIZED_TYPE_NAME ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , GlobalTypeInfoCollector.UNRECOGNIZED_TYPE_NAME ) ;
Distance : 4

9
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

10
Tree	int indexOfDot = crExportPathNode ;
Code	int indexOfDot = crExportPathNode ;
Distance : 6

11
Tree	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

12
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

13
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

14
Tree	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

15
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , CharUtils.NUL ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , CharUtils.NUL ) ;
Distance : 4

16
Tree	long indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

17
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

18
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	int indexOfDot = new Expm1 ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new Expm1 ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

20
Tree	endLimit indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	endLimit indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

21
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

22
Tree	int indexOfDot = scopeRoots ;
Code	int indexOfDot = scopeRoots ;
Distance : 6

23
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

24
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

25
Tree	int indexOfDot = metadata.superClassNameNode . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = metadata.superClassNameNode . indexOf ( STRING_CONSTANT ) ;
Distance : 3

26
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

27
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , Context.OTHER ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , Context.OTHER ) ;
Distance : 4

28
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

29
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , tokens.length ) ;
Distance : 12

30
Tree	int indexOfDot = new Expm1 ( STRING_CONSTANT ) ;
Code	int indexOfDot = new Expm1 ( STRING_CONSTANT ) ;
Distance : 4

31
Tree	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

32
Tree	int clonedIndices [] = namespace ( namespace ) ;
Code	int clonedIndices [] = namespace ( namespace ) ;
Distance : 5

33
Tree	int indexOfDot = functionContext.function ;
Code	int indexOfDot = functionContext.function ;
Distance : 6

34
Tree	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 5

35
Tree	HarmonicFunction indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	HarmonicFunction indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

36
Tree	public indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

37
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

38
Tree	final int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	final int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

39
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Distance : 13

40
Tree	clonedIndices indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	clonedIndices indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

41
Tree	int FACTORIALS [] = namespace ( namespace ) ;
Code	int FACTORIALS [] = namespace ( namespace ) ;
Distance : 5

42
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

43
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

44
Tree	int indexOfDot = indexOf ( CHAR_CONS , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( CHAR_CONS , namespace , false , null , null ) ;
Distance : 10

45
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

46
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

47
Tree	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Distance : 11

48
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 12

49
Tree	int indexOfDot = new namespace ( namespace , MathUtils.SAFE_MIN , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , MathUtils.SAFE_MIN , Verification.EXPLICIT , Verification.EXPLICIT , NUMBER_CONSTANT ) ;
Distance : 11

50
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

51
Tree	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , tokens.length , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , tokens.length , NUMBER_CONSTANT ) ;
Distance : 11

52
Tree	double indexOfDot = namespace ;
Code	double indexOfDot = namespace ;
Distance : 6

53
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

54
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

55
Tree	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

56
Tree	int lastHold [] = namespace ( namespace ) ;
Code	int lastHold [] = namespace ( namespace ) ;
Distance : 5

57
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

58
Tree	int indexOfDot = crExportPathNode ;
Code	int indexOfDot = crExportPathNode ;
Distance : 6

59
Tree	int indexOfDot = crExportPathNode ;
Code	int indexOfDot = crExportPathNode ;
Distance : 6

60
Tree	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

61
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US , false ) ;
Distance : 14

62
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Locale.US ) ;
Distance : 12

63
Tree	int indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Distance : 8

64
Tree	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

65
Tree	indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

66
Tree	final indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 4

68
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

69
Tree	boolean indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	boolean indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

70
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

71
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

72
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

73
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

74
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

75
Tree	int indexOfDot = new namespace ( STRING_CONSTANT ) ;
Code	int indexOfDot = new namespace ( STRING_CONSTANT ) ;
Distance : 4

76
Tree	int indexOfDot = scopeRoots ;
Code	int indexOfDot = scopeRoots ;
Distance : 6

77
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

78
Tree	int indexOfDot = continue; ;
Code	int indexOfDot = continue; ;
Distance : 6

79
Tree	historyIdx indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	historyIdx indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

80
Tree	indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

81
Tree	int gmt [] = namespace . indexOf ( false , namespace ) ;
Code	int gmt [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

82
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

83
Tree	int FACTORIALS [] = namespace . indexOf ( false , namespace ) ;
Code	int FACTORIALS [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

84
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION , false ) ;
Distance : 14

85
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 5

86
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

87
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

88
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

89
Tree	long indexOfDot = CHAR_CONS ;
Code	long indexOfDot = CHAR_CONS ;
Distance : 6

90
Tree	long indexOfDot = new namespace ( STRING_CONSTANT ) ;
Code	long indexOfDot = new namespace ( STRING_CONSTANT ) ;
Distance : 5

91
Tree	int indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

92
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

93
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

94
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

95
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 13

96
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

97
Tree	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

98
Tree	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

99
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 9

100
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 12

101
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 9

102
Tree	int clonedIndices [] = namespace . indexOf ( false , namespace ) ;
Code	int clonedIndices [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

103
Tree	long indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	long indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

104
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

105
Tree	int indexOfDot = new ImageMapUtils ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ImageMapUtils ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

106
Tree	int gmt [] = namespace ( namespace ) ;
Code	int gmt [] = namespace ( namespace ) ;
Distance : 5

107
Tree	int gmt [] = indexOf () ;
Code	int gmt [] = indexOf () ;
Distance : 8

108
Tree	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

109
Tree	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

110
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

111
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , StringUtils.EMPTY ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , StringUtils.EMPTY ) ;
Distance : 4

112
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 13

113
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

114
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 9

115
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 9

116
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

118
Tree	int FACTORIALS [] = indexOf () ;
Code	int FACTORIALS [] = indexOf () ;
Distance : 8

119
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , values.length ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , values.length ) ;
Distance : 13

120
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

121
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 12

122
Tree	int clonedIndices [] = indexOf () ;
Code	int clonedIndices [] = indexOf () ;
Distance : 8

123
Tree	public int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	public int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

124
Tree	int indexOfDot = namespace ( CHAR_CONS , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( CHAR_CONS , namespace , namespace , namespace ) ;
Distance : 8

125
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

126
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

127
Tree	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int clonedIndices [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

128
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

129
Tree	boolean indexOfDot = this . namespace ;
Code	boolean indexOfDot = this . namespace ;
Distance : 6

130
Tree	long indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

131
Tree	boolean indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Distance : 9

132
Tree	long indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = new namespace ( CHAR_CONS , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

133
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

134
Tree	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

135
Tree	int indexOfDot = functionContext.function . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = functionContext.function . indexOf ( STRING_CONSTANT ) ;
Distance : 3

136
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

137
Tree	long indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , STRING_CONSTANT , namespace , namespace ) ;
Distance : 9

138
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

139
Tree	int indexOfDot = new ImageMapUtils ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ImageMapUtils ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

140
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

141
Tree	int indexOfDot = metadata.superClassNameNode ;
Code	int indexOfDot = metadata.superClassNameNode ;
Distance : 6

142
Tree	long indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

143
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Distance : 13

144
Tree	boolean indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

145
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

146
Tree	double indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

147
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

148
Tree	int lastHold [] = indexOf () ;
Code	int lastHold [] = indexOf () ;
Distance : 8

149
Tree	boolean indexOfDot = CHAR_CONS ;
Code	boolean indexOfDot = CHAR_CONS ;
Distance : 6

150
Tree	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int lastHold [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

151
Tree	int lastHold [] = namespace . indexOf ( false , namespace ) ;
Code	int lastHold [] = namespace . indexOf ( false , namespace ) ;
Distance : 6

152
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

153
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

154
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

155
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

156
Tree	boolean indexOfDot = false ;
Code	boolean indexOfDot = false ;
Distance : 7

157
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

158
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

159
Tree	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

160
Tree	int indexOfDot = scopeRoots ;
Code	int indexOfDot = scopeRoots ;
Distance : 6

161
Tree	int indexOfDot = new ImageMapUtils ( STRING_CONSTANT ) ;
Code	int indexOfDot = new ImageMapUtils ( STRING_CONSTANT ) ;
Distance : 4

162
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

163
Tree	double indexOfDot = false ;
Code	double indexOfDot = false ;
Distance : 7

164
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

165
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS , false ) ;
Distance : 14

166
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 12

167
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

168
Tree	double indexOfDot = this . namespace ;
Code	double indexOfDot = this . namespace ;
Distance : 6

169
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

170
Tree	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	public boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

171
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

172
Tree	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

173
Tree	indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

174
Tree	abstract int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	abstract int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

175
Tree	int indexOfDot = namespace . namespace ( namespace , namespace ) ;
Code	int indexOfDot = namespace . namespace ( namespace , namespace ) ;
Distance : 4

176
Tree	int indexOfDot = namespace . indexOf ( namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , namespace ) ;
Distance : 4

177
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 13

178
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , STRING_CONSTANT , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , STRING_CONSTANT , namespace , namespace ) ;
Distance : 7

179
Tree	int indexOfDot = namespace . namespace ( CHAR_CONS , namespace ) ;
Code	int indexOfDot = namespace . namespace ( CHAR_CONS , namespace ) ;
Distance : 3

180
Tree	boolean indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	boolean indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

181
Tree	boolean indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

182
Tree	namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

183
Tree	long indexOfDot = namespace . namespace ( namespace , namespace ) ;
Code	long indexOfDot = namespace . namespace ( namespace , namespace ) ;
Distance : 5

184
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

185
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

186
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

187
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

188
Tree	boolean indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	boolean indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

189
Tree	double indexOfDot = CHAR_CONS ;
Code	double indexOfDot = CHAR_CONS ;
Distance : 6

190
Tree	double indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	double indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

191
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

192
Tree	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	int indexOfDot = new namespace ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 13

193
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Locale.US ) ;
Distance : 12

194
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT , false ) ;
Distance : 14

195
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 9

196
Tree	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Locale.US , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new namespace ( namespace , StringUtils.EMPTY , Verification.EXPLICIT , Locale.US , NUMBER_CONSTANT ) ;
Distance : 11

197
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 12

198
Tree	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Code	int indexOfDot = new Expm1 ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , indexOfDot , Verification.EXPLICIT ) ;
Distance : 14

199
Tree	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 132
Wrong
========================================================================
False

0
Tree	!
Code	!
Distance : 14

1
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 10

2
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Distance : 10

3
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.MIN_VALUE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.MIN_VALUE )
Distance : 9

4
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

5
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

6
Tree	OBJECT_TYPE * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

7
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 7

8
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 10

9
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 5

10
Tree	! type . getNativeType ( typeRegistry )
Code	! type . getNativeType ( typeRegistry )
Distance : 9

11
Tree	! type . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ()
Distance : 10

12
Tree	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

13
Tree	! type . getNativeType ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 5

14
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ()
Code	! type . isSubtype ( typeRegistry ) . getNativeType ()
Distance : 8

15
Tree	type * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

16
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) == Double.MIN_VALUE
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) == Double.MIN_VALUE
Distance : 10

17
Tree	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

18
Tree	! type . getNativeType ()
Code	! type . getNativeType ()
Distance : 11

19
Tree	! type . restrictByNotNullOrUndefined ( return; )
Code	! type . restrictByNotNullOrUndefined ( return; )
Distance : 9

20
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Distance : 6

21
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

22
Tree	! type . isSubtype ( typeRegistry )
Code	! type . isSubtype ( typeRegistry )
Distance : 8

23
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) && typeRegistry . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) && typeRegistry . getNativeType ( OBJECT_TYPE )
Distance : 5

24
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 9

25
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == / )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == / )
Distance : 10

26
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == PropAccess.INCLUDE_STRAY_PROPS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == PropAccess.INCLUDE_STRAY_PROPS )
Distance : 9

27
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 11

28
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) + OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) + OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 9

29
Tree	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

30
Tree	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

31
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) + typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) + typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 7

32
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) ) - NUMBER_CONSTANT )
Distance : 11

33
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

34
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 6

35
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Distance : 9

36
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 8

37
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 6

38
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

39
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Distance : 6

40
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

41
Tree	( typeRegistry * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

42
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) + OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) + OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

43
Tree	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

44
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE , OBJECT_TYPE ) )
Distance : 5

45
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

46
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == Double.NaN
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == Double.NaN
Distance : 6

47
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 10

48
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

49
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE )
Distance : 10

50
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Distance : 6

51
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ExpansionMode.MULTIPLICATIVE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ExpansionMode.MULTIPLICATIVE )
Distance : 9

52
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , var.scope )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , var.scope )
Distance : 5

53
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

54
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

55
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

56
Tree	(
Code	(
Distance : 14

57
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Distance : 10

58
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 8

59
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

60
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 6

61
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 6

62
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , PropAccess.INCLUDE_STRAY_PROPS )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , PropAccess.INCLUDE_STRAY_PROPS )
Distance : 5

63
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , standardDeviation.length )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , standardDeviation.length )
Distance : 5

64
Tree	! type . restrictByNotNullOrUndefined ( null )
Code	! type . restrictByNotNullOrUndefined ( null )
Distance : 9

65
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Distance : 8

66
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

67
Tree	! type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 7

68
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , NodeUtil.MATCH_NOT_FUNCTION )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , NodeUtil.MATCH_NOT_FUNCTION )
Distance : 5

69
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

70
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) < OBJECT_TYPE && typeRegistry . getNativeType ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) < OBJECT_TYPE && typeRegistry . getNativeType ( OBJECT_TYPE )
Distance : 8

71
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == rhs.b
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == rhs.b
Distance : 6

72
Tree	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 8

73
Tree	type . getNativeType ( typeRegistry ) < OBJECT_TYPE && typeRegistry . getNativeType ( OBJECT_TYPE )
Code	type . getNativeType ( typeRegistry ) < OBJECT_TYPE && typeRegistry . getNativeType ( OBJECT_TYPE )
Distance : 9

74
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 8

75
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) ) )
Distance : 9

76
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

77
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 7

78
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) < OBJECT_TYPE && type . getNativeType ( OBJECT_TYPE )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) < OBJECT_TYPE && type . getNativeType ( OBJECT_TYPE )
Distance : 9

79
Tree	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

80
Tree	node
Code	node
Distance : 15

81
Tree	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

82
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE
Distance : 6

83
Tree	type . getNativeType ( typeRegistry ) == Double.MIN_VALUE
Code	type . getNativeType ( typeRegistry ) == Double.MIN_VALUE
Distance : 11

84
Tree	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

85
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Distance : 9

86
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && &=
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && &=
Distance : 6

87
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 5

88
Tree	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

89
Tree	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Code	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE )
Distance : 8

90
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Distance : 9

91
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE , typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE , typeRegistry ) )
Distance : 5

92
Tree	! type . getNativeType ( null )
Code	! type . getNativeType ( null )
Distance : 9

93
Tree	type . isSubtype ( typeRegistry ) == Double.MIN_VALUE
Code	type . isSubtype ( typeRegistry ) == Double.MIN_VALUE
Distance : 10

94
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE , OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE , OBJECT_TYPE ) )
Distance : 6

95
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS
Distance : 6

96
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Distance : 9

97
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && {}
Code	type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && {}
Distance : 6

98
Tree	! typeRegistry . restrictByNotNullOrUndefined ()
Code	! typeRegistry . restrictByNotNullOrUndefined ()
Distance : 11

99
Tree	type * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

100
Tree	type * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

101
Tree	type . isSubtype ( typeRegistry ) < OBJECT_TYPE && typeRegistry . getNativeType ( OBJECT_TYPE )
Code	type . isSubtype ( typeRegistry ) < OBJECT_TYPE && typeRegistry . getNativeType ( OBJECT_TYPE )
Distance : 9

102
Tree	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 6

103
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) == var.scope
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) == var.scope
Distance : 10

104
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

105
Tree	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

106
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) + OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) + OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 9

107
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Distance : 9

108
Tree	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

109
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

110
Tree	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

111
Tree	type = ( type ) typeRegistry . isSubtype ( typeRegistry )
Code	type = ( type ) typeRegistry . isSubtype ( typeRegistry )
Distance : 10

112
Tree	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

113
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

114
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 5

115
Tree	( typeRegistry . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 9

116
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ()
Code	! type . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 9

117
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Distance : 6

118
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

119
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

120
Tree	throw
Code	throw
Distance : 15

121
Tree	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 5

122
Tree	! type . isSubtype ( null )
Code	! type . isSubtype ( null )
Distance : 9

123
Tree	! type . isSubtype ()
Code	! type . isSubtype ()
Distance : 11

124
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

125
Tree	! type . restrictByNotNullOrUndefined ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

126
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE , OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE , OBJECT_TYPE ) )
Distance : 5

127
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) && OBJECT_TYPE . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) && OBJECT_TYPE . getNativeType ( OBJECT_TYPE )
Distance : 6

128
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 6

129
Tree	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

130
Tree	! type . isSubtype ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

131
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Distance : 6

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return FastFourierTransformer + NUMBER_CONSTANT ;
Code	return FastFourierTransformer + NUMBER_CONSTANT ;
Distance : 3

1
Tree	return FastFourierTransformer + getDataset () ;
Code	return FastFourierTransformer + getDataset () ;
Distance : 4

2
Tree	return ! NodeUtil ;
Code	return ! NodeUtil ;
Distance : 2

3
Tree	return NUMBER_CONSTANT ; array
Code	return NUMBER_CONSTANT ; array
Distance : 2

4
Tree	return NUMBER_CONSTANT ; class
Code	return NUMBER_CONSTANT ; class
Distance : 2

5
Tree	return FastFourierTransformer < < NUMBER_CONSTANT ;
Code	return FastFourierTransformer < < NUMBER_CONSTANT ;
Distance : 4

6
Tree	return parent + abs () ;
Code	return parent + abs () ;
Distance : 4

7
Tree	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

8
Tree	return parent != f.length ;
Code	return parent != f.length ;
Distance : 3

9
Tree	return NodeUtil < < NUMBER_CONSTANT ;
Code	return NodeUtil < < NUMBER_CONSTANT ;
Distance : 4

10
Tree	return ! parent ;
Code	return ! parent ;
Distance : 2

11
Tree	return FastFourierTransformer + abs () ;
Code	return FastFourierTransformer + abs () ;
Distance : 4

12
Tree	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Distance : 7

13
Tree	return this == tolerance ;
Code	return this == tolerance ;
Distance : 3

14
Tree	return this == scopeCreator ;
Code	return this == scopeCreator ;
Distance : 3

15
Tree	return FastFourierTransformer . clone ( parent ) > FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer . clone ( parent ) > FunctionFlavor.NORMAL ;
Distance : 8

16
Tree	return FastFourierTransformer + obj2 + tolerance ;
Code	return FastFourierTransformer + obj2 + tolerance ;
Distance : 5

17
Tree	return FastFourierTransformer % NUMBER_CONSTANT ;
Code	return FastFourierTransformer % NUMBER_CONSTANT ;
Distance : 3

18
Tree	return parent + obj2 + tolerance ;
Code	return parent + obj2 + tolerance ;
Distance : 5

19
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Distance : 7

20
Tree	return FastFourierTransformer . abs () ? null : blind ;
Code	return FastFourierTransformer . abs () ? null : blind ;
Distance : 8

21
Tree	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Code	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

22
Tree	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Code	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

23
Tree	return getTolerance () ? null : parent ;
Code	return getTolerance () ? null : parent ;
Distance : 6

24
Tree	return parent . abs () ? null : parent ;
Code	return parent . abs () ? null : parent ;
Distance : 8

25
Tree	return new SinFunction ( this ) ;
Code	return new SinFunction ( this ) ;
Distance : 5

26
Tree	return f.length > res . clone () ;
Code	return f.length > res . clone () ;
Distance : 6

27
Tree	return parent ? NUMBER_CONSTANT : null ;
Code	return parent ? NUMBER_CONSTANT : null ;
Distance : 5

28
Tree	return f.length > res . abs () ;
Code	return f.length > res . abs () ;
Distance : 6

29
Tree	return NodeUtil . abs () > FunctionFlavor.NORMAL ;
Code	return NodeUtil . abs () > FunctionFlavor.NORMAL ;
Distance : 6

30
Tree	return new Es6SyntacticScopeCreator ( tolerance ) ;
Code	return new Es6SyntacticScopeCreator ( tolerance ) ;
Distance : 5

31
Tree	return FastFourierTransformer ? NUMBER_CONSTANT : null ;
Code	return FastFourierTransformer ? NUMBER_CONSTANT : null ;
Distance : 5

32
Tree	return getDataset () ? null : parent ;
Code	return getDataset () ? null : parent ;
Distance : 6

33
Tree	return parent . abs () . success == NUMBER_CONSTANT ;
Code	return parent . abs () . success == NUMBER_CONSTANT ;
Distance : 8

34
Tree	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Code	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Distance : 10

35
Tree	return parent + NUMBER_CONSTANT ;
Code	return parent + NUMBER_CONSTANT ;
Distance : 3

36
Tree	return parent + abs ( parent , false ) ;
Code	return parent + abs ( parent , false ) ;
Distance : 7

37
Tree	return FastFourierTransformer . abs () ? null : tolerance ;
Code	return FastFourierTransformer . abs () ? null : tolerance ;
Distance : 8

38
Tree	return FastFourierTransformer . abs () . success == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs () . success == NUMBER_CONSTANT ;
Distance : 8

39
Tree	return FastFourierTransformer != f.length ;
Code	return FastFourierTransformer != f.length ;
Distance : 3

40
Tree	return STRING_CONSTANT + directly ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + directly ( tolerance ) + STRING_CONSTANT ;
Distance : 8

41
Tree	return STRING_CONSTANT + callNode . clone ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . clone ( tolerance ) + STRING_CONSTANT ;
Distance : 10

42
Tree	return this . commonTypes ;
Code	return this . commonTypes ;
Distance : 3

43
Tree	return Color.BLACK ;
Code	return Color.BLACK ;
Distance : 1

44
Tree	return parent . abs ( parent ) ? null : tolerance ;
Code	return parent . abs ( parent ) ? null : tolerance ;
Distance : 10

45
Tree	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

46
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

47
Tree	return f.length == null ;
Code	return f.length == null ;
Distance : 3

48
Tree	return tolerance + NUMBER_CONSTANT ;
Code	return tolerance + NUMBER_CONSTANT ;
Distance : 3

49
Tree	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Distance : 10

50
Tree	return parent + obj2 . clone ( parent ) ;
Code	return parent + obj2 . clone ( parent ) ;
Distance : 8

51
Tree	return ! getDataset ( tolerance ) ;
Code	return ! getDataset ( tolerance ) ;
Distance : 5

52
Tree	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

53
Tree	return FastFourierTransformer && ! parent . abs ( parent ) && <= ;
Code	return FastFourierTransformer && ! parent . abs ( parent ) && <= ;
Distance : 11

54
Tree	return STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + callNode ;
Distance : 3

55
Tree	return new LUDecompositionImpl ( this ) ;
Code	return new LUDecompositionImpl ( this ) ;
Distance : 5

56
Tree	return Color.BLACK > res . clone () ;
Code	return Color.BLACK > res . clone () ;
Distance : 6

57
Tree	return tolerance ;
Code	return tolerance ;
Distance : 1

58
Tree	return super . directly ( parent ) ;
Code	return super . directly ( parent ) ;
Distance : 6

59
Tree	return FastFourierTransformer + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return FastFourierTransformer + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

60
Tree	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Distance : 7

61
Tree	return false ;
Code	return false ;
Distance : 0

62
Tree	return FastFourierTransformer + obj2 . clone ( parent ) ;
Code	return FastFourierTransformer + obj2 . clone ( parent ) ;
Distance : 8

63
Tree	return true ;
Code	return true ;
Distance : 1

64
Tree	return parent + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

65
Tree	return FastFourierTransformer ;
Code	return FastFourierTransformer ;
Distance : 1

66
Tree	return new Es6SyntacticScopeCreator ( this ) ;
Code	return new Es6SyntacticScopeCreator ( this ) ;
Distance : 5

67
Tree	return NodeUtil . abs ( parent ) ;
Code	return NodeUtil . abs ( parent ) ;
Distance : 6

68
Tree	return parent . abs ( parent ) ;
Code	return parent . abs ( parent ) ;
Distance : 6

69
Tree	return ! FastFourierTransformer ;
Code	return ! FastFourierTransformer ;
Distance : 2

70
Tree	return this == randomData ;
Code	return this == randomData ;
Distance : 3

71
Tree	return parent . abs ( parent ) ? null : parent ;
Code	return parent . abs ( parent ) ? null : parent ;
Distance : 10

72
Tree	return this . rawType ;
Code	return this . rawType ;
Distance : 3

73
Tree	return NodeUtil.MATCH_NOT_FUNCTION ;
Code	return NodeUtil.MATCH_NOT_FUNCTION ;
Distance : 1

74
Tree	return parent < < NUMBER_CONSTANT ;
Code	return parent < < NUMBER_CONSTANT ;
Distance : 4

75
Tree	return parent . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return parent . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

76
Tree	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

77
Tree	return super . isFrozen ( parent ) ;
Code	return super . isFrozen ( parent ) ;
Distance : 6

78
Tree	return ! directly ( tolerance ) ;
Code	return ! directly ( tolerance ) ;
Distance : 5

79
Tree	return parent . abs () > FunctionFlavor.NORMAL ;
Code	return parent . abs () > FunctionFlavor.NORMAL ;
Distance : 6

80
Tree	return getReferenceName () ? null : tolerance ;
Code	return getReferenceName () ? null : tolerance ;
Distance : 6

81
Tree	return NodeUtil != f.length ;
Code	return NodeUtil != f.length ;
Distance : 3

82
Tree	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

83
Tree	return FastFourierTransformer + abs ( parent , false ) ;
Code	return FastFourierTransformer + abs ( parent , false ) ;
Distance : 7

84
Tree	return STRING_CONSTANT + callNode . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

85
Tree	return STRING_CONSTANT + expr ;
Code	return STRING_CONSTANT + expr ;
Distance : 3

86
Tree	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

87
Tree	return Color.BLACK == null ;
Code	return Color.BLACK == null ;
Distance : 3

88
Tree	return FastFourierTransformer . abs ( parent ) ;
Code	return FastFourierTransformer . abs ( parent ) ;
Distance : 6

89
Tree	return FastFourierTransformer + obj2 + parent ;
Code	return FastFourierTransformer + obj2 + parent ;
Distance : 5

90
Tree	return parent + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

91
Tree	return parent ? f.length : FunctionFlavor.NORMAL ;
Code	return parent ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

92
Tree	return ( tolerance ) floor ( parent ) ;
Code	return ( tolerance ) floor ( parent ) ;
Distance : 7

93
Tree	return parent + obj2 . clone () ;
Code	return parent + obj2 . clone () ;
Distance : 6

94
Tree	return STRING_CONSTANT + rawType ;
Code	return STRING_CONSTANT + rawType ;
Distance : 3

95
Tree	return tolerance < < NUMBER_CONSTANT ;
Code	return tolerance < < NUMBER_CONSTANT ;
Distance : 4

96
Tree	return FastFourierTransformer . abs () > FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer . abs () > FunctionFlavor.NORMAL ;
Distance : 6

97
Tree	return STRING_CONSTANT + callNode . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

98
Tree	return FastFourierTransformer + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return FastFourierTransformer + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

99
Tree	return STRING_CONSTANT + directly ( tableau ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + directly ( tableau ) + STRING_CONSTANT ;
Distance : 8

100
Tree	return FastFourierTransformer + obj2 . abs ( parent ) ;
Code	return FastFourierTransformer + obj2 . abs ( parent ) ;
Distance : 8

101
Tree	return FastFourierTransformer . clone () > FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer . clone () > FunctionFlavor.NORMAL ;
Distance : 6

102
Tree	return FastFourierTransformer + obj2 + randomData ;
Code	return FastFourierTransformer + obj2 + randomData ;
Distance : 5

103
Tree	return new Random ( this ) ;
Code	return new Random ( this ) ;
Distance : 5

104
Tree	return ! scopeCreator ;
Code	return ! scopeCreator ;
Distance : 2

105
Tree	return super . abs ( parent ) ;
Code	return super . abs ( parent ) ;
Distance : 6

106
Tree	return f.length > blind . clone () ;
Code	return f.length > blind . clone () ;
Distance : 6

107
Tree	return ( FastFourierTransformer ) floor ( parent ) ;
Code	return ( FastFourierTransformer ) floor ( parent ) ;
Distance : 7

108
Tree	return STRING_CONSTANT + directly ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + directly ( callNode ) + STRING_CONSTANT ;
Distance : 8

109
Tree	return FastFourierTransformer + obj2 . clone () ;
Code	return FastFourierTransformer + obj2 . clone () ;
Distance : 6

110
Tree	return parent . abs ( parent ) > FunctionFlavor.NORMAL ;
Code	return parent . abs ( parent ) > FunctionFlavor.NORMAL ;
Distance : 8

111
Tree	return this . maxItemWidth ;
Code	return this . maxItemWidth ;
Distance : 3

112
Tree	return f.length ;
Code	return f.length ;
Distance : 1

113
Tree	return this == rawType ;
Code	return this == rawType ;
Distance : 3

114
Tree	return NodeUtil . abs ( parent ) > FunctionFlavor.NORMAL ;
Code	return NodeUtil . abs ( parent ) > FunctionFlavor.NORMAL ;
Distance : 8

115
Tree	return FastFourierTransformer && ! getDataset () && super ;
Code	return FastFourierTransformer && ! getDataset () && super ;
Distance : 7

116
Tree	return parent ;
Code	return parent ;
Distance : 1

117
Tree	return new LUDecompositionImpl ( tolerance ) ;
Code	return new LUDecompositionImpl ( tolerance ) ;
Distance : 5

118
Tree	return FastFourierTransformer . abs () ? null : parent ;
Code	return FastFourierTransformer . abs () ? null : parent ;
Distance : 8

119
Tree	return error.description == null ;
Code	return error.description == null ;
Distance : 3

120
Tree	return ! NodeUtil && ! parent . isEnhancedFor () ;
Code	return ! NodeUtil && ! parent . isEnhancedFor () ;
Distance : 8

121
Tree	return FastFourierTransformer && ! parent . clone ( parent ) && <= ;
Code	return FastFourierTransformer && ! parent . clone ( parent ) && <= ;
Distance : 11

122
Tree	return new SinFunction ( tolerance ) ;
Code	return new SinFunction ( tolerance ) ;
Distance : 5

123
Tree	return NodeUtil.MATCH_NOT_FUNCTION == null ;
Code	return NodeUtil.MATCH_NOT_FUNCTION == null ;
Distance : 3

124
Tree	return FastFourierTransformer + obj2 . abs () ;
Code	return FastFourierTransformer + obj2 . abs () ;
Distance : 6

125
Tree	return ( subtree ) floor ( parent ) ;
Code	return ( subtree ) floor ( parent ) ;
Distance : 7

126
Tree	return FastFourierTransformer . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

127
Tree	return new SinFunction ( point ) ;
Code	return new SinFunction ( point ) ;
Distance : 5

128
Tree	return ! NodeUtil && ! parent . createsScope () ;
Code	return ! NodeUtil && ! parent . createsScope () ;
Distance : 8

129
Tree	return NUMBER_CONSTANT ;
Code	return NUMBER_CONSTANT ;
Distance : 1

130
Tree	return tolerance ? NUMBER_CONSTANT : null ;
Code	return tolerance ? NUMBER_CONSTANT : null ;
Distance : 5

131
Tree	return parent % NUMBER_CONSTANT ;
Code	return parent % NUMBER_CONSTANT ;
Distance : 3

132
Tree	return super . clone ( parent ) ;
Code	return super . clone ( parent ) ;
Distance : 6

133
Tree	return parent + obj2 . abs () ;
Code	return parent + obj2 . abs () ;
Distance : 6

134
Tree	return parent && ! isEnhancedFor () && super ;
Code	return parent && ! isEnhancedFor () && super ;
Distance : 7

135
Tree	return FastFourierTransformer != FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer != FunctionFlavor.NORMAL ;
Distance : 3

136
Tree	return ! NodeUtil . getToken ( parent ) ;
Code	return ! NodeUtil . getToken ( parent ) ;
Distance : 7

137
Tree	return parent + obj2 . abs ( parent ) ;
Code	return parent + obj2 . abs ( parent ) ;
Distance : 8

138
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Distance : 7

139
Tree	return ! NodeUtil && ! INDEX_OFFSET . isEnhancedFor () ;
Code	return ! NodeUtil && ! INDEX_OFFSET . isEnhancedFor () ;
Distance : 8

140
Tree	return this . minY ;
Code	return this . minY ;
Distance : 3

141
Tree	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

142
Tree	return FastFourierTransformer + getTolerance ( parent , false ) ;
Code	return FastFourierTransformer + getTolerance ( parent , false ) ;
Distance : 7

143
Tree	return parent + getDataset () ;
Code	return parent + getDataset () ;
Distance : 4

144
Tree	return FastFourierTransformer . abs ( parent ) > FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer . abs ( parent ) > FunctionFlavor.NORMAL ;
Distance : 8

145
Tree	return ! NodeUtil && ! parent . getParent () ;
Code	return ! NodeUtil && ! parent . getParent () ;
Distance : 8

146
Tree	return NUMBER_CONSTANT - NUMBER_CONSTANT ;
Code	return NUMBER_CONSTANT - NUMBER_CONSTANT ;
Distance : 3

147
Tree	return error.description ;
Code	return error.description ;
Distance : 1

148
Tree	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

149
Tree	return ! isShadowingAllowed ( tolerance ) ;
Code	return ! isShadowingAllowed ( tolerance ) ;
Distance : 5

150
Tree	return ( randomData ) floor ( parent ) ;
Code	return ( randomData ) floor ( parent ) ;
Distance : 7

151
Tree	return parent && ! parent . clone ( parent ) && <= ;
Code	return parent && ! parent . clone ( parent ) && <= ;
Distance : 11

152
Tree	return ! NodeUtil . isLoopStructure ( parent ) ;
Code	return ! NodeUtil . isLoopStructure ( parent ) ;
Distance : 7

153
Tree	return STRING_CONSTANT + directly ( parent ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + directly ( parent ) + STRING_CONSTANT ;
Distance : 8

154
Tree	return ! NodeUtil . abs ( parent ) ;
Code	return ! NodeUtil . abs ( parent ) ;
Distance : 7

155
Tree	return ! directly ( parent ) ;
Code	return ! directly ( parent ) ;
Distance : 5

156
Tree	return FastFourierTransformer . clone ( parent ) ;
Code	return FastFourierTransformer . clone ( parent ) ;
Distance : 6

157
Tree	return FastFourierTransformer + obj2 . obj2 ( tolerance ) ;
Code	return FastFourierTransformer + obj2 . obj2 ( tolerance ) ;
Distance : 8

158
Tree	return getReferenceName () ? null : parent ;
Code	return getReferenceName () ? null : parent ;
Distance : 6

159
Tree	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

160
Tree	return NodeUtil + NUMBER_CONSTANT ;
Code	return NodeUtil + NUMBER_CONSTANT ;
Distance : 3

161
Tree	return ! NodeUtil . directly ( parent ) ;
Code	return ! NodeUtil . directly ( parent ) ;
Distance : 7

162
Tree	return NodeUtil ? NUMBER_CONSTANT : null ;
Code	return NodeUtil ? NUMBER_CONSTANT : null ;
Distance : 5

163
Tree	return FastFourierTransformer + obj2 . obj2 ( parent ) ;
Code	return FastFourierTransformer + obj2 . obj2 ( parent ) ;
Distance : 8

164
Tree	return FastFourierTransformer + obj2 . obj2 ( callNode ) ;
Code	return FastFourierTransformer + obj2 . obj2 ( callNode ) ;
Distance : 8

165
Tree	return FastFourierTransformer && ! isEnhancedFor () && super ;
Code	return FastFourierTransformer && ! isEnhancedFor () && super ;
Distance : 7

166
Tree	return STRING_CONSTANT + callNode . clone ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . clone ( callNode ) + STRING_CONSTANT ;
Distance : 10

167
Tree	return parent + obj2 . obj2 ( parent ) ;
Code	return parent + obj2 . obj2 ( parent ) ;
Distance : 8

168
Tree	return NUMBER_CONSTANT - NUMBER_CONSTANT ; array
Code	return NUMBER_CONSTANT - NUMBER_CONSTANT ; array
Distance : 4

169
Tree	return parent && ! parent . abs ( parent ) && <= ;
Code	return parent && ! parent . abs ( parent ) && <= ;
Distance : 11

170
Tree	return FastFourierTransformer + getDataset ( parent , false ) ;
Code	return FastFourierTransformer + getDataset ( parent , false ) ;
Distance : 7

171
Tree	return parent && ! getDataset () && super ;
Code	return parent && ! getDataset () && super ;
Distance : 7

172
Tree	return FastFourierTransformer % randomData ;
Code	return FastFourierTransformer % randomData ;
Distance : 3

173
Tree	return STRING_CONSTANT + ref ;
Code	return STRING_CONSTANT + ref ;
Distance : 3

174
Tree	return parent % randomData ;
Code	return parent % randomData ;
Distance : 3

175
Tree	return TransformUtils % NUMBER_CONSTANT ;
Code	return TransformUtils % NUMBER_CONSTANT ;
Distance : 3

176
Tree	return NodeUtil % NUMBER_CONSTANT ;
Code	return NodeUtil % NUMBER_CONSTANT ;
Distance : 3

177
Tree	return parent % blind ;
Code	return parent % blind ;
Distance : 3

178
Tree	return FastFourierTransformer % blind ;
Code	return FastFourierTransformer % blind ;
Distance : 3

179
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , true ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , true ) ;
Distance : 10

180
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Distance : 12

181
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

182
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , false ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , false ) ;
Distance : 9

183
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

184
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

185
Tree	return FastFourierTransformer + NUMBER_CONSTANT + FastMath ;
Code	return FastFourierTransformer + NUMBER_CONSTANT + FastMath ;
Distance : 5

186
Tree	return FastFourierTransformer + NUMBER_CONSTANT + scopeCreator ;
Code	return FastFourierTransformer + NUMBER_CONSTANT + scopeCreator ;
Distance : 5

187
Tree	super ( tolerance , NameBasedDefinitionProvider , i2s2 , true ) ;
Code	super ( tolerance , NameBasedDefinitionProvider , i2s2 , true ) ;
Distance : 10

188
Tree	return FastFourierTransformer . abs ( parent ) >= NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs ( parent ) >= NUMBER_CONSTANT ;
Distance : 8

189
Tree	return parent + NUMBER_CONSTANT + scopeCreator ;
Code	return parent + NUMBER_CONSTANT + scopeCreator ;
Distance : 5

190
Tree	return FastFourierTransformer + NUMBER_CONSTANT + tolerance ;
Code	return FastFourierTransformer + NUMBER_CONSTANT + tolerance ;
Distance : 5

191
Tree	return parent . abs ( parent ) >= NUMBER_CONSTANT ;
Code	return parent . abs ( parent ) >= NUMBER_CONSTANT ;
Distance : 8

192
Tree	super ( parent , parent , i2s2 , true ) ;
Code	super ( parent , parent , i2s2 , true ) ;
Distance : 10

193
Tree	return FastFourierTransformer . clone ( parent ) >= NUMBER_CONSTANT ;
Code	return FastFourierTransformer . clone ( parent ) >= NUMBER_CONSTANT ;
Distance : 8

194
Tree	return true ; Test
Code	return true ; Test
Distance : 2

195
Tree	return NUMBER_CONSTANT - NUMBER_CONSTANT ; class
Code	return NUMBER_CONSTANT - NUMBER_CONSTANT ; class
Distance : 4

196
Tree	return NodeUtil . abs ( parent ) >= NUMBER_CONSTANT ;
Code	return NodeUtil . abs ( parent ) >= NUMBER_CONSTANT ;
Distance : 8

197
Tree	return NUMBER_CONSTANT ; notifyListeners
Code	return NUMBER_CONSTANT ; notifyListeners
Distance : 2

198
Tree	return NUMBER_CONSTANT - NUMBER_CONSTANT ; notifyListeners
Code	return NUMBER_CONSTANT - NUMBER_CONSTANT ; notifyListeners
Distance : 4

199
Tree	return true ; Class
Code	return true ; Class
Distance : 2

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + inMemoryClassObjects ;
Code	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + inMemoryClassObjects ;
Distance : 7

1
Tree	return createComplex ( NUMBER_CONSTANT ) ;
Code	return createComplex ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	return TernaryValue.UNKNOWN ; Test
Code	return TernaryValue.UNKNOWN ; Test
Distance : 1

3
Tree	return TernaryValue.UNKNOWN ; Class
Code	return TernaryValue.UNKNOWN ; Class
Distance : 1

4
Tree	return createComplex ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return createComplex ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 10

5
Tree	return getNumber ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getNumber ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 8

6
Tree	return notBlank ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return notBlank ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 8

7
Tree	return TernaryValue.UNKNOWN . getParser () . getParser () ;
Code	return TernaryValue.UNKNOWN . getParser () . getParser () ;
Distance : 6

8
Tree	return notBlank ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return notBlank ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 10

9
Tree	return TernaryValue.UNKNOWN . createsScope () . valueFor () ;
Code	return TernaryValue.UNKNOWN . createsScope () . valueFor () ;
Distance : 6

10
Tree	return this . commonTypes . createsScope () . inIncrementalCheckMode () ;
Code	return this . commonTypes . createsScope () . inIncrementalCheckMode () ;
Distance : 9

11
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT ) . floatValue () ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT ) . floatValue () ;
Distance : 9

12
Tree	return EscapeUtils . createsScope () - NUMBER_CONSTANT ;
Code	return EscapeUtils . createsScope () - NUMBER_CONSTANT ;
Distance : 6

13
Tree	return EscapeUtils . createsScope () . getParser () ;
Code	return EscapeUtils . createsScope () . getParser () ;
Distance : 7

14
Tree	return new SphericalCoordinates () . isPrettyPrint ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return new SphericalCoordinates () . isPrettyPrint ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

15
Tree	return new SimpleAffix () . isPrettyPrint ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return new SimpleAffix () . isPrettyPrint ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

16
Tree	return new HarmonicFunction () . getNumber ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return new HarmonicFunction () . getNumber ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

17
Tree	return null ;
Code	return null ;
Distance : 1

18
Tree	return parent ;
Code	return parent ;
Distance : 1

19
Tree	return inMemoryClassObjects ;
Code	return inMemoryClassObjects ;
Distance : 1

20
Tree	return numberOfTrials ;
Code	return numberOfTrials ;
Distance : 1

21
Tree	return this . defaultOutlineStroke . createsScope () . getParser () ;
Code	return this . defaultOutlineStroke . createsScope () . getParser () ;
Distance : 9

22
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT ) . floatValue () ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT ) . floatValue () ;
Distance : 9

23
Tree	return parent . createsScope ( null ) . floor () ;
Code	return parent . createsScope ( null ) . floor () ;
Distance : 9

24
Tree	return STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + parent ;
Distance : 3

25
Tree	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

26
Tree	return new HarmonicFunction ( attachTypeExpr , NUMBER_CONSTANT ) ;
Code	return new HarmonicFunction ( attachTypeExpr , NUMBER_CONSTANT ) ;
Distance : 7

27
Tree	return new HarmonicFunction ( attachTypeExpr ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Code	return new HarmonicFunction ( attachTypeExpr ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Distance : 13

28
Tree	return getNumber ( TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getNumber ( TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 6

29
Tree	return this . commonTypes . createsScope () ;
Code	return this . commonTypes . createsScope () ;
Distance : 6

30
Tree	return parent . createsScope () . TRUTHY ;
Code	return parent . createsScope () . TRUTHY ;
Distance : 6

31
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

32
Tree	return parent . createsScope () . scalar ;
Code	return parent . createsScope () . scalar ;
Distance : 6

33
Tree	return new HarmonicFunction ( parent ) ;
Code	return new HarmonicFunction ( parent ) ;
Distance : 5

34
Tree	return this . commonTypes . createsScope () . getParser () ;
Code	return this . commonTypes . createsScope () . getParser () ;
Distance : 9

35
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

36
Tree	return getDataset ( STRING_CONSTANT ) . floatValue () ;
Code	return getDataset ( STRING_CONSTANT ) . floatValue () ;
Distance : 7

37
Tree	return this . defaultOutlineStroke . TRUTHY ;
Code	return this . defaultOutlineStroke . TRUTHY ;
Distance : 5

38
Tree	return new HarmonicFunction ( attachTypeExpr ) ;
Code	return new HarmonicFunction ( attachTypeExpr ) ;
Distance : 5

39
Tree	return this . defaultOutlineStroke ;
Code	return this . defaultOutlineStroke ;
Distance : 3

40
Tree	return parent . createsScope () ? null : parent ;
Code	return parent . createsScope () ? null : parent ;
Distance : 8

41
Tree	return inMemoryClassObjects + STRING_CONSTANT ;
Code	return inMemoryClassObjects + STRING_CONSTANT ;
Distance : 3

42
Tree	return parent . createsScope () ? null : obj1 ;
Code	return parent . createsScope () ? null : obj1 ;
Distance : 8

43
Tree	return inMemoryClassObjects . createsScope ( parent , NUMBER_CONSTANT , parent . createsScope () ) ;
Code	return inMemoryClassObjects . createsScope ( parent , NUMBER_CONSTANT , parent . createsScope () ) ;
Distance : 13

44
Tree	return inMemoryClassObjects . createsScope () + parent . createsScope ( this ) ;
Code	return inMemoryClassObjects . createsScope () + parent . createsScope ( this ) ;
Distance : 11

45
Tree	return EscapeUtils . createsScope () >= NUMBER_CONSTANT ;
Code	return EscapeUtils . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

46
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . createsScope () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . createsScope () ;
Distance : 11

47
Tree	return new SphericalCoordinates ( inMemoryClassObjects , NUMBER_CONSTANT ) ;
Code	return new SphericalCoordinates ( inMemoryClassObjects , NUMBER_CONSTANT ) ;
Distance : 7

48
Tree	return parent . createsScope ( parent , NUMBER_CONSTANT , inMemoryClassObjects . createsScope () ) ;
Code	return parent . createsScope ( parent , NUMBER_CONSTANT , inMemoryClassObjects . createsScope () ) ;
Distance : 13

49
Tree	return new HarmonicFunction ( inMemoryClassObjects ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Code	return new HarmonicFunction ( inMemoryClassObjects ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Distance : 13

50
Tree	return this . commonTypes . createsScope () . getAlternatesWithoutStructuralTyping () ;
Code	return this . commonTypes . createsScope () . getAlternatesWithoutStructuralTyping () ;
Distance : 9

51
Tree	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + sampleSize ;
Code	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + sampleSize ;
Distance : 7

52
Tree	return ( parent ) object . getDaysInYearMax () ;
Code	return ( parent ) object . getDaysInYearMax () ;
Distance : 7

53
Tree	return parent . createsScope () ;
Code	return parent . createsScope () ;
Distance : 4

54
Tree	return parent . createsScope () . getParser () ;
Code	return parent . createsScope () . getParser () ;
Distance : 7

55
Tree	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + numberOfTrials ;
Code	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + numberOfTrials ;
Distance : 7

56
Tree	return getDataset ( STRING_CONSTANT ) ;
Code	return getDataset ( STRING_CONSTANT ) ;
Distance : 4

57
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . returnZero () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . returnZero () ;
Distance : 11

58
Tree	return createComplex ( STRING_CONSTANT ) ;
Code	return createComplex ( STRING_CONSTANT ) ;
Distance : 4

59
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Distance : 6

60
Tree	return getNumber ( STRING_CONSTANT ) ;
Code	return getNumber ( STRING_CONSTANT ) ;
Distance : 4

61
Tree	return getDataset ( TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getDataset ( TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 6

62
Tree	return new CrossModuleCodeMotion ( STRING_CONSTANT ) ;
Code	return new CrossModuleCodeMotion ( STRING_CONSTANT ) ;
Distance : 5

63
Tree	return this . defaultOutlineStroke . createsScope () ;
Code	return this . defaultOutlineStroke . createsScope () ;
Distance : 6

64
Tree	return numberOfTrials . createsScope ( null ) ;
Code	return numberOfTrials . createsScope ( null ) ;
Distance : 6

65
Tree	return EscapeUtils . createsScope ( parent ) ;
Code	return EscapeUtils . createsScope ( parent ) ;
Distance : 6

66
Tree	return EscapeUtils . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return EscapeUtils . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

67
Tree	return getDataset () ;
Code	return getDataset () ;
Distance : 2

68
Tree	return new CrossModuleCodeMotion ( STRING_CONSTANT , numberOfTrials ) ;
Code	return new CrossModuleCodeMotion ( STRING_CONSTANT , numberOfTrials ) ;
Distance : 7

69
Tree	return inMemoryClassObjects . createsScope () ;
Code	return inMemoryClassObjects . createsScope () ;
Distance : 4

70
Tree	return parent . createsScope () >= NUMBER_CONSTANT ;
Code	return parent . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

71
Tree	return this . maxY . TRUTHY ;
Code	return this . maxY . TRUTHY ;
Distance : 5

72
Tree	return inMemoryClassObjects . createsScope ( parent ) ;
Code	return inMemoryClassObjects . createsScope ( parent ) ;
Distance : 6

73
Tree	return inMemoryClassObjects . createsScope () - NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope () - NUMBER_CONSTANT ;
Distance : 6

74
Tree	return this . printExterns . TRUTHY ;
Code	return this . printExterns . TRUTHY ;
Distance : 5

75
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Distance : 6

76
Tree	return parent . createsScope ( STRING_CONSTANT ) . floatValue () ;
Code	return parent . createsScope ( STRING_CONSTANT ) . floatValue () ;
Distance : 9

77
Tree	return parent . < Object > getDataset () . scalar ;
Code	return parent . < Object > getDataset () . scalar ;
Distance : 9

78
Tree	return numberOfTrials + STRING_CONSTANT ;
Code	return numberOfTrials + STRING_CONSTANT ;
Distance : 3

79
Tree	return numberOfTrials . createsScope () - NUMBER_CONSTANT ;
Code	return numberOfTrials . createsScope () - NUMBER_CONSTANT ;
Distance : 6

80
Tree	return getNumber ( STRING_CONSTANT ) . floatValue () ;
Code	return getNumber ( STRING_CONSTANT ) . floatValue () ;
Distance : 7

81
Tree	return new HarmonicFunction ( inMemoryClassObjects , NUMBER_CONSTANT ) ;
Code	return new HarmonicFunction ( inMemoryClassObjects , NUMBER_CONSTANT ) ;
Distance : 7

82
Tree	return parent . createsScope () . populationSize ;
Code	return parent . createsScope () . populationSize ;
Distance : 6

83
Tree	return this . maxY . createsScope () ;
Code	return this . maxY . createsScope () ;
Distance : 6

84
Tree	return inMemoryClassObjects . createsScope () . getParser () ;
Code	return inMemoryClassObjects . createsScope () . getParser () ;
Distance : 7

85
Tree	return notBlank ( STRING_CONSTANT ) ;
Code	return notBlank ( STRING_CONSTANT ) ;
Distance : 4

86
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

87
Tree	return notBlank ( STRING_CONSTANT ) . floatValue () ;
Code	return notBlank ( STRING_CONSTANT ) . floatValue () ;
Distance : 7

88
Tree	return EscapeUtils ;
Code	return EscapeUtils ;
Distance : 1

89
Tree	return inMemoryClassObjects . createsScope () ? null : parent ;
Code	return inMemoryClassObjects . createsScope () ? null : parent ;
Distance : 8

90
Tree	return inMemoryClassObjects . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return inMemoryClassObjects . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

91
Tree	return STRING_CONSTANT + numberOfTrials ;
Code	return STRING_CONSTANT + numberOfTrials ;
Distance : 3

92
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

93
Tree	return new SphericalCoordinates ( STRING_CONSTANT ) ;
Code	return new SphericalCoordinates ( STRING_CONSTANT ) ;
Distance : 5

94
Tree	return EscapeUtils . createsScope ( null ) ;
Code	return EscapeUtils . createsScope ( null ) ;
Distance : 6

95
Tree	return createComplex () ;
Code	return createComplex () ;
Distance : 2

96
Tree	return this . printExterns . createsScope () ;
Code	return this . printExterns . createsScope () ;
Distance : 6

97
Tree	return this . commonTypes . TRUTHY ;
Code	return this . commonTypes . TRUTHY ;
Distance : 5

98
Tree	return new HarmonicFunction ( STRING_CONSTANT ) ;
Code	return new HarmonicFunction ( STRING_CONSTANT ) ;
Distance : 5

99
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Distance : 6

100
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

101
Tree	return numberOfTrials . createsScope () . getParser () ;
Code	return numberOfTrials . createsScope () . getParser () ;
Distance : 7

102
Tree	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Code	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Distance : 8

103
Tree	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + populationSize ;
Code	return STRING_CONSTANT + numberOfTrials + STRING_CONSTANT + populationSize ;
Distance : 7

104
Tree	return getDataset ( NUMBER_CONSTANT ) ;
Code	return getDataset ( NUMBER_CONSTANT ) ;
Distance : 4

105
Tree	return parent . createsScope ( STRING_CONSTANT ) ;
Code	return parent . createsScope ( STRING_CONSTANT ) ;
Distance : 6

106
Tree	return this . commonTypes ;
Code	return this . commonTypes ;
Distance : 3

107
Tree	return parent . createsScope ( null ) ;
Code	return parent . createsScope ( null ) ;
Distance : 6

108
Tree	return EscapeUtils + STRING_CONSTANT ;
Code	return EscapeUtils + STRING_CONSTANT ;
Distance : 3

109
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

110
Tree	return numberOfTrials . createsScope ( parent ) ;
Code	return numberOfTrials . createsScope ( parent ) ;
Distance : 6

111
Tree	return new HarmonicFunction ( parent ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Code	return new HarmonicFunction ( parent ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Distance : 13

112
Tree	return EscapeUtils . createsScope () ;
Code	return EscapeUtils . createsScope () ;
Distance : 4

113
Tree	return new SimpleAffix ( STRING_CONSTANT ) ;
Code	return new SimpleAffix ( STRING_CONSTANT ) ;
Distance : 5

114
Tree	return numberOfTrials . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return numberOfTrials . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

115
Tree	return inMemoryClassObjects . createsScope ( null ) . returnZero () ;
Code	return inMemoryClassObjects . createsScope ( null ) . returnZero () ;
Distance : 9

116
Tree	return getNumber ( NUMBER_CONSTANT ) ;
Code	return getNumber ( NUMBER_CONSTANT ) ;
Distance : 4

117
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) . floatValue () ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) . floatValue () ;
Distance : 9

118
Tree	return new SphericalCoordinates ( inMemoryClassObjects ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Code	return new SphericalCoordinates ( inMemoryClassObjects ) . returnZero ( STRING_CONSTANT ) . floatValue () ;
Distance : 13

119
Tree	return parent . createsScope () - NUMBER_CONSTANT ;
Code	return parent . createsScope () - NUMBER_CONSTANT ;
Distance : 6

120
Tree	return new SphericalCoordinates ( STRING_CONSTANT , numberOfTrials ) ;
Code	return new SphericalCoordinates ( STRING_CONSTANT , numberOfTrials ) ;
Distance : 7

121
Tree	return parent . < Object > returnNull () . scalar ;
Code	return parent . < Object > returnNull () . scalar ;
Distance : 9

122
Tree	return this . maxY ;
Code	return this . maxY ;
Distance : 3

123
Tree	return inMemoryClassObjects . < Object > getDataset () . scalar ;
Code	return inMemoryClassObjects . < Object > getDataset () . scalar ;
Distance : 9

124
Tree	return getNumber ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getNumber ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 12

125
Tree	return getNumber () ;
Code	return getNumber () ;
Distance : 2

126
Tree	return new HarmonicFunction ( inMemoryClassObjects ) ;
Code	return new HarmonicFunction ( inMemoryClassObjects ) ;
Distance : 5

127
Tree	return notBlank () ;
Code	return notBlank () ;
Distance : 2

128
Tree	return notBlank ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return notBlank ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 12

129
Tree	return parent . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return parent . createsScope ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

130
Tree	return TernaryValue.UNKNOWN . createsScope () . populationSize ;
Code	return TernaryValue.UNKNOWN . createsScope () . populationSize ;
Distance : 5

131
Tree	return createComplex ( TernaryValue.UNKNOWN ) . returnZero () ;
Code	return createComplex ( TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 6

132
Tree	return TernaryValue.UNKNOWN . createsScope () . scalar ;
Code	return TernaryValue.UNKNOWN . createsScope () . scalar ;
Distance : 5

133
Tree	return STRING_CONSTANT + populationSize ;
Code	return STRING_CONSTANT + populationSize ;
Distance : 3

134
Tree	return notBlank ( NUMBER_CONSTANT ) ;
Code	return notBlank ( NUMBER_CONSTANT ) ;
Distance : 4

135
Tree	return new HarmonicFunction ( STRING_CONSTANT , numberOfTrials ) ;
Code	return new HarmonicFunction ( STRING_CONSTANT , numberOfTrials ) ;
Distance : 7

136
Tree	return parent . < Object > getDataset () . populationSize ;
Code	return parent . < Object > getDataset () . populationSize ;
Distance : 9

137
Tree	return parent . createsScope ( parent ) ;
Code	return parent . createsScope ( parent ) ;
Distance : 6

138
Tree	return this . printExterns ;
Code	return this . printExterns ;
Distance : 3

139
Tree	return ( parent ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( parent ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

140
Tree	return inMemoryClassObjects . createsScope ( null ) ;
Code	return inMemoryClassObjects . createsScope ( null ) ;
Distance : 6

141
Tree	return new SphericalCoordinates ( inMemoryClassObjects ) ;
Code	return new SphericalCoordinates ( inMemoryClassObjects ) ;
Distance : 5

142
Tree	return TernaryValue.UNKNOWN . createsScope () . maxY ;
Code	return TernaryValue.UNKNOWN . createsScope () . maxY ;
Distance : 5

143
Tree	return new SimpleAffix ( STRING_CONSTANT , numberOfTrials ) ;
Code	return new SimpleAffix ( STRING_CONSTANT , numberOfTrials ) ;
Distance : 7

144
Tree	return TernaryValue.TRUE . createsScope () ;
Code	return TernaryValue.TRUE . createsScope () ;
Distance : 4

145
Tree	return notBlank ( TernaryValue.UNKNOWN ) . returnZero () ;
Code	return notBlank ( TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 6

146
Tree	return ( target.length ) object . getDaysInYearMax () ;
Code	return ( target.length ) object . getDaysInYearMax () ;
Distance : 7

147
Tree	return TernaryValue.UNKNOWN . createsScope () . getParser () ;
Code	return TernaryValue.UNKNOWN . createsScope () . getParser () ;
Distance : 6

148
Tree	return getDataset ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getDataset ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 12

149
Tree	return ( target.length ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( target.length ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

150
Tree	return parent . createsScope ( null ) . returnZero () ;
Code	return parent . createsScope ( null ) . returnZero () ;
Distance : 9

151
Tree	return STRING_CONSTANT + obj1 ;
Code	return STRING_CONSTANT + obj1 ;
Distance : 3

152
Tree	return numberOfTrials . createsScope () ;
Code	return numberOfTrials . createsScope () ;
Distance : 4

153
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . floatValue () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . floatValue () ;
Distance : 11

154
Tree	return parent . createsScope () . maxY ;
Code	return parent . createsScope () . maxY ;
Distance : 6

155
Tree	return TernaryValue.UNKNOWN . getParser () ;
Code	return TernaryValue.UNKNOWN . getParser () ;
Distance : 3

156
Tree	return parent . createsScope ( null ) . floatValue () ;
Code	return parent . createsScope ( null ) . floatValue () ;
Distance : 9

157
Tree	return TernaryValue.UNKNOWN . valueFor () ;
Code	return TernaryValue.UNKNOWN . valueFor () ;
Distance : 3

158
Tree	return createComplex ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return createComplex ( new SimpleAffix ( DEPRECATION_MESSAGE ) , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 12

159
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . valueFor () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . valueFor () ;
Distance : 11

160
Tree	return parent . createsScope ( parent , NUMBER_CONSTANT , parent . createsScope () ) ;
Code	return parent . createsScope ( parent , NUMBER_CONSTANT , parent . createsScope () ) ;
Distance : 13

161
Tree	return numberOfTrials . createsScope () >= NUMBER_CONSTANT ;
Code	return numberOfTrials . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

162
Tree	return TernaryValue.TRUE . createsScope () . getParser () ;
Code	return TernaryValue.TRUE . createsScope () . getParser () ;
Distance : 7

163
Tree	return TernaryValue.UNKNOWN . createsScope () . jsRoot ;
Code	return TernaryValue.UNKNOWN . createsScope () . jsRoot ;
Distance : 5

164
Tree	return numberOfTrials . createsScope ( parent , NUMBER_CONSTANT , parent . createsScope () ) ;
Code	return numberOfTrials . createsScope ( parent , NUMBER_CONSTANT , parent . createsScope () ) ;
Distance : 13

165
Tree	return getDataset ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getDataset ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 8

166
Tree	return parent . createsScope () + parent . createsScope ( this ) ;
Code	return parent . createsScope () + parent . createsScope ( this ) ;
Distance : 11

167
Tree	return createComplex ( STRING_CONSTANT ) . floatValue () ;
Code	return createComplex ( STRING_CONSTANT ) . floatValue () ;
Distance : 7

168
Tree	return numberOfTrials . createsScope () + parent . createsScope ( this ) ;
Code	return numberOfTrials . createsScope () + parent . createsScope ( this ) ;
Distance : 11

169
Tree	return parent + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT ;
Distance : 3

170
Tree	return getDataset ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getDataset ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 10

171
Tree	return parent . createsScope () + inMemoryClassObjects . createsScope ( this ) ;
Code	return parent . createsScope () + inMemoryClassObjects . createsScope ( this ) ;
Distance : 11

172
Tree	return createComplex ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return createComplex ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 8

173
Tree	return new HarmonicFunction ( parent , NUMBER_CONSTANT ) ;
Code	return new HarmonicFunction ( parent , NUMBER_CONSTANT ) ;
Distance : 7

174
Tree	return TernaryValue.UNKNOWN . createsScope () ;
Code	return TernaryValue.UNKNOWN . createsScope () ;
Distance : 3

175
Tree	return EscapeUtils ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return EscapeUtils ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

176
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

177
Tree	return inMemoryClassObjects ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return inMemoryClassObjects ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

178
Tree	return parent . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return parent . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

179
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

180
Tree	return numberOfTrials ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return numberOfTrials ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

181
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 12

182
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 14

183
Tree	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 4

184
Tree	return STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 4

185
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 16

186
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 16

187
Tree	return STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 4

188
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 14

189
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 14

190
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 12

191
Tree	return new HarmonicFunction () . isPrettyPrint ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return new HarmonicFunction () . isPrettyPrint ( STRING_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

192
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

193
Tree	return getNumber ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Code	return getNumber ( new SimpleAffix () , TernaryValue.UNKNOWN ) . returnZero () ;
Distance : 10

194
Tree	return return; ;
Code	return return; ;
Distance : 1

195
Tree	return parent ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return parent ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

196
Tree	return continue; ;
Code	return continue; ;
Distance : 1

197
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 12

198
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 16

199
Tree	return super(); ;
Code	return super(); ;
Distance : 1

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

1
Tree	if ( c >= NUMBER_CONSTANT && c == null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c == null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

2
Tree	if ( c >= NUMBER_CONSTANT && c == super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c == super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

3
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c ) ; }
Distance : 11

4
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c ) ; }
Distance : 11

5
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 8

6
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , c ) ; }
Distance : 6

7
Tree	if ( c && c == sample2.length ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c && c == sample2.length ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 12

8
Tree	if ( c && c == startConfiguration.length ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 12

9
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Distance : 14

10
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c ) ; }
Distance : 14

11
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c , c ) ; }
Distance : 14

12
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 12

13
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

14
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

15
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

16
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Distance : 8

17
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { sb . append ( c ) ; }
Distance : 11

18
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( c , c ) ; }
Distance : 11

19
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

20
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

21
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = x.length ; } else { sb . append ( c , c ) ; }
Distance : 11

22
Tree	if ( c >= NUMBER_CONSTANT && c == super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c == super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

23
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Distance : 9

24
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

25
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 11

26
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Distance : 9

27
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

28
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c , c ) ; }
Distance : 14

29
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { append ( c , c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { append ( c , c ) ; }
Distance : 12

30
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { append ( c , c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { append ( c , c ) ; }
Distance : 12

31
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

32
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { sb . append ( c , c ) ; }
Distance : 11

33
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = false ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = false ; } else { append ( c , c ) ; }
Distance : 9

34
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 10

35
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 9

36
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 10

37
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 8

38
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

39
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { append ( c , c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { append ( c , c ) ; }
Distance : 12

40
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

41
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Distance : 13

42
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Distance : 13

43
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Distance : 7

44
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

45
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

46
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 13

47
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

48
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { sb . append ( c , c ) ; }
Distance : 10

49
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Distance : 11

50
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c , c ) ; }
Distance : 13

51
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

52
Tree	if ( c && c != super(); ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c != super(); ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

53
Tree	if ( c && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

54
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

55
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

56
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

57
Tree	if ( c >= NUMBER_CONSTANT && c != return; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != return; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

58
Tree	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Code	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Distance : 14

59
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

60
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

61
Tree	if ( c && c == Double.MIN_VALUE ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 12

62
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

63
Tree	if ( c && c == startConfiguration.length ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

64
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 6

65
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

66
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 9

67
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 6

68
Tree	if ( c >= NUMBER_CONSTANT && c == null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c == null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

69
Tree	if ( c && c == metadata.superClassNameNode ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

70
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Distance : 14

71
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

72
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

73
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 9

74
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

75
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { sb . append ( c , c ) ; }
Distance : 11

76
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c ) ; }
Distance : 8

77
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

78
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

79
Tree	if ( c >= NUMBER_CONSTANT && c != return; ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != return; ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

80
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c , c ) ; }
Distance : 14

81
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { sb . append ( c , c ) ; }
Distance : 10

82
Tree	if ( c && c == startConfiguration.length ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 12

83
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Distance : 10

84
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Distance : 10

85
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Distance : 10

86
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

87
Tree	if ( c && c == metadata.superClassNameNode ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 12

88
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

89
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

90
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { sb . append ( c , c ) ; }
Distance : 7

91
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c , c ) ; }
Distance : 10

92
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 9

93
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Distance : 11

94
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 10

95
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 11

96
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Distance : 10

97
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

98
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == child.parent ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == child.parent ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Distance : 13

99
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

100
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

101
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

102
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c , c ) ; }
Distance : 9

103
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c , c ) ; }
Distance : 10

104
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Distance : 14

105
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { x.length = sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

106
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , c ) ; }
Distance : 7

107
Tree	if ( c && c != break; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c != break; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

108
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , sb ) ; }
Distance : 7

109
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c , c ) ; }
Distance : 8

110
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c , c ) ; }
Distance : 11

111
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 8

112
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Distance : 9

113
Tree	if ( c && c != return; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c != return; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

114
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Distance : 8

115
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

116
Tree	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

117
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c , c ) ; }
Distance : 11

118
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = true ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = true ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

119
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

120
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 8

121
Tree	if ( c && c == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

122
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 10

123
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

124
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

125
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = false ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = false ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

126
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

127
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

128
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Distance : 11

129
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

130
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

131
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 11

132
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

133
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

134
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = c . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 12

135
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

136
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

137
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c , c ) ; }
Distance : 10

138
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

139
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

140
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == child.parent ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == child.parent ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

141
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 10

142
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 10

143
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

144
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Distance : 11

145
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 7

146
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

147
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Distance : 13

148
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

149
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

150
Tree	if ( c && c == Double.MIN_VALUE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 12

151
Tree	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

152
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { append ( c , c ) ; }
Distance : 9

153
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c ) ; }
Distance : 7

154
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

155
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 10

156
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { c . append ( c ) ; }
Distance : 11

157
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

158
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 11

159
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

160
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 10

161
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

162
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

163
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

164
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 10

165
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

166
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

167
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

168
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

169
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

170
Tree	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

171
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 11

172
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

173
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

174
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = true ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = true ; } else { append ( c , c ) ; }
Distance : 9

175
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

176
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { sb . append ( c ) ; }
Distance : 13

177
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { sb . append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { sb . append ( c , sb ) ; }
Distance : 11

178
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

179
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c , c ) ; }
Distance : 8

180
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

181
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 13

182
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

183
Tree	if ( c && c == metadata.superClassNameNode ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

184
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { append ( c , c ) ; }
Distance : 11

185
Tree	if ( c && c == Double.MIN_VALUE ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = StringUtils.EMPTY ; } else { sb . append ( c ) ; }
Distance : 13

186
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

187
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 9

188
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c , sb ) ; }
Distance : 9

189
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { sb . append ( c , c ) ; }
Distance : 9

190
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

191
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c ) ; }
Distance : 11

192
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { c . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { c . append ( c , c ) ; }
Distance : 11

193
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { sb . append ( c , c ) ; }
Distance : 11

194
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

195
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

196
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

197
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Distance : 9

198
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { sb . append ( c ) ; }
Distance : 10

199
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ astParameter . defineSlot ( astParameter , functionNode , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

1
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

2
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

3
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

4
Tree	{ astParameter . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 12

5
Tree	{ defineSlot ( astParameter . getNext () , functionNode . getJSType () , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode . getJSType () , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

6
Tree	{ astParameter . defineSlot ( astParameter , functionNode , astParameter . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode , astParameter . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

7
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

8
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 11

9
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

10
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

11
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

12
Tree	{ defineSlot ( astParameter . getNext () , functionNode , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

13
Tree	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

14
Tree	{ functionNode . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

15
Tree	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

16
Tree	{ defineSlot ( astParameter . getNext () , functionNode . getJSType () , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode . getJSType () , null ) ; functionNode = astParameter . getNext () ; }
Distance : 7

17
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

18
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

19
Tree	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

20
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

21
Tree	{ astParameter . defineSlot () . getJSType ( false , false , false , false , false , false ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( false , false , false , false , false , false ) ; astParameter = astParameter . getNext () ; }
Distance : 14

22
Tree	{ functionNode . defineSlot () . getJSType ( null ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( null ) ; astParameter = astParameter . getNext () ; }
Distance : 12

23
Tree	{ functionNode . astParameter ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . astParameter ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

24
Tree	{ astParameter . defineSlot () . getJSType ( null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

25
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

26
Tree	{ astParameter . astParameter ( astParameter , functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . astParameter ( astParameter , functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

27
Tree	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

28
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

29
Tree	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

30
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 9

31
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

32
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , null ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , null ) ; astParameter = astParameter . getNext () ; }
Distance : 9

33
Tree	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

34
Tree	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

35
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 8

36
Tree	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 12

37
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

38
Tree	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 6

39
Tree	{ defineSlot ( astParameter . getNext () , functionNode , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 10

40
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , this ) ; astParameter = astParameter . getNext () ; }
Distance : 12

41
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

42
Tree	{ functionNode . defineSlot () . getJSType ( false , false , false , false , false , false ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( false , false , false , false , false , false ) ; astParameter = astParameter . getNext () ; }
Distance : 14

43
Tree	{ astParameter . defineSlot () . getJSType ( false , false , false , false , false , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( false , false , false , false , false , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 13

44
Tree	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 8

45
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

46
Tree	{ defineSlot ( astParameter . getJSType () , functionNode . getJSType () , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , functionNode . getJSType () , null ) ; astParameter = astParameter . getNext () ; }
Distance : 7

47
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

48
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

49
Tree	{ functionNode . defineSlot ( astParameter , functionNode , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

50
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

51
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

52
Tree	{ astParameter . defineSlot ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

53
Tree	{ astParameter . defineSlot ( astParameter , functionNode , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

54
Tree	{ astParameter . defineSlot () . getJSType ( TimeZones.GMT_ID , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( TimeZones.GMT_ID , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

55
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

56
Tree	{ astParameter . defineSlot () . getJSType ( false , false , false , false , false , false ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( false , false , false , false , false , false ) ; functionNode = astParameter . getNext () ; }
Distance : 14

57
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

58
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , false ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , false ) ; astParameter = astParameter . getNext () ; }
Distance : 10

59
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

60
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

61
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

62
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

63
Tree	{ astParameter . defineSlot () . getJSType ( NUMBER_CONSTANT , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( NUMBER_CONSTANT , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

64
Tree	{ astParameter . defineSlot () . getJSType ( NUMBER_CONSTANT , jsDocParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( NUMBER_CONSTANT , jsDocParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

65
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

66
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

67
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

68
Tree	{ astParameter . defineSlot () . getJSType ( TimeZones.GMT_ID , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( TimeZones.GMT_ID , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

69
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

70
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

71
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

72
Tree	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

73
Tree	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 8

74
Tree	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

75
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

76
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

77
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

78
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

79
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT , this ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT , this ) ; astParameter = astParameter . getNext () ; }
Distance : 12

80
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

81
Tree	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 7

82
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

83
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

84
Tree	{ astParameter . defineSlot () . getJSType ( null ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( null ) ; astParameter = astParameter . getNext () ; }
Distance : 11

85
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , defineSlot , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

86
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

87
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

88
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

89
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

90
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

91
Tree	{ astParameter . defineSlot ( astParameter . getNext () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 9

92
Tree	{ astParameter . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 12

93
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 8

94
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Distance : 10

95
Tree	{ functionNode . defineSlot ( astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 10

96
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

97
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

98
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

99
Tree	{ astParameter . defineSlot ( astParameter . getNext () , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

100
Tree	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

101
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

102
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

103
Tree	{ defineSlot ( astParameter . getJSType () , functionNode , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , functionNode , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

104
Tree	{ functionNode . defineSlot ( astParameter . getNext () , null ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

105
Tree	{ astParameter . defineSlot ( null , null , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( null , null , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

106
Tree	{ astParameter . astParameter ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . astParameter ( astParameter , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

107
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

108
Tree	{ astParameter . defineSlot ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

109
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

110
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

111
Tree	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 6

112
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

113
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , LanguageMode.ECMASCRIPT_2016 ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , LanguageMode.ECMASCRIPT_2016 ) ; astParameter = astParameter . getNext () ; }
Distance : 10

114
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 10

115
Tree	{ astParameter . defineSlot ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

116
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

117
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

118
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

119
Tree	{ astParameter . defineSlot ( astParameter . getNext () , NUMBER_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , NUMBER_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

120
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

121
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

122
Tree	{ astParameter . astParameter ( astParameter , functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . astParameter ( astParameter , functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

123
Tree	{ defineSlot ( astParameter . getJSType () , functionNode , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , functionNode , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 10

124
Tree	{ astParameter . defineSlot ( astParameter . getNext () , NUMBER_CONSTANT , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , NUMBER_CONSTANT , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

125
Tree	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , functionNode , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

126
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

127
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , DoesNothing ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , DoesNothing ) ; astParameter = astParameter . getNext () ; }
Distance : 11

128
Tree	{ astParameter . defineSlot ( idToken.value , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( idToken.value , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

129
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

130
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

131
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Distance : 11

132
Tree	{ functionNode . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

133
Tree	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

134
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Distance : 11

135
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

136
Tree	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , false , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

137
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT , this ) ; astParameter = astParameter . getNext () ; }
Distance : 11

138
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

139
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

140
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

141
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

142
Tree	{ defineSlot ( astParameter . getNext () , functionNode , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 10

143
Tree	{ defineSlot ( astParameter . getNext () , functionNode . getJSType () , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode . getJSType () , null ) ; astParameter = astParameter . getNext () ; }
Distance : 7

144
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

145
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

146
Tree	{ astParameter . defineSlot () . getJSType ( null ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( null ) ; functionNode = astParameter . getNext () ; }
Distance : 11

147
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 7

148
Tree	{ astParameter . defineSlot ( null , null , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( null , null , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

149
Tree	{ functionNode . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 12

150
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

151
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

152
Tree	{ astParameter . defineSlot () . getJSType ( NUMBER_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( NUMBER_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

153
Tree	{ astParameter . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( null , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

154
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

155
Tree	{ functionNode . defineSlot ( astParameter . getNext () , astParameter , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , astParameter , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

156
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

157
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

158
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

159
Tree	{ astParameter . defineSlot ( astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 10

160
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

161
Tree	{ astParameter . defineSlot ( astParameter . getNext () , null ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

162
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , round , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

163
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

164
Tree	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , functionNode , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 6

165
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , NUMBER_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , NUMBER_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 11

166
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

167
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

168
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

169
Tree	{ astParameter . defineSlot ( astParameter . getNext () jsDocParameter functionNode . getJSType () , STRING_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () jsDocParameter functionNode . getJSType () , STRING_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 11

170
Tree	{ astParameter . defineSlot ( astParameter . getJSType () true functionNode . getJSType () , STRING_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () true functionNode . getJSType () , STRING_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

171
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 7

172
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

173
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

174
Tree	{ defineSlot ( astParameter . getNext () , functionNode , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 10

175
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

176
Tree	{ functionNode . defineSlot ( astParameter . getNext () , NUMBER_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , NUMBER_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

177
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

178
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

179
Tree	{ functionNode . defineSlot ( null , null , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( null , null , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

180
Tree	{ astParameter . defineSlot ( null , null , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( null , null , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

181
Tree	{ functionNode . defineSlot ( astParameter . getNext () true functionNode . getJSType () , STRING_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () true functionNode . getJSType () , STRING_CONSTANT , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

182
Tree	{ defineSlot ( astParameter . getNext () , functionNode , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

183
Tree	{ astParameter . defineSlot ( astParameter . getNext () jsDocParameter functionNode . getJSType () , STRING_CONSTANT , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () jsDocParameter functionNode . getJSType () , STRING_CONSTANT , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 11

184
Tree	{ functionNode . defineSlot () . getJSType ( NUMBER_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( NUMBER_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

185
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

186
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

187
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Distance : 10

188
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

189
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Distance : 10

190
Tree	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

191
Tree	{ defineSlot ( astParameter . getNext () , functionNode , astParameter , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , functionNode , astParameter , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 10

192
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

193
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

194
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

195
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Distance : 11

196
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , false ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , false ) ; astParameter = astParameter . getNext () ; }
Distance : 10

197
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

198
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 12

199
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , false ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , false ) ; astParameter = astParameter . getNext () ; }
Distance : 10

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

1
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

2
Tree	if ( token . JsDocToken.LP ( token ) == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

3
Tree	if ( token && token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token && token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

4
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Distance : 9

5
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

6
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

7
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

8
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

9
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

10
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

11
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

12
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , return; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , return; ) ; }
Distance : 9

13
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

14
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

15
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

16
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

17
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

18
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

19
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

20
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

21
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

22
Tree	if ( token == super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token == super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 10

23
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

24
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

25
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Distance : 11

26
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

27
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

29
Tree	if ( token == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

30
Tree	if ( token && token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token && token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

31
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

32
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , ( ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , ( ( STRING_CONSTANT ) ) ; }
Distance : 9

33
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

34
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

35
Tree	if ( JsDocToken.LP () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( JsDocToken.LP () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

36
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 5

37
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

38
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( continue; , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( continue; , token ) ; }
Distance : 9

39
Tree	if ( token . JsDocToken.LP ( token ) == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

40
Tree	if ( token != super(); ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != super(); ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Distance : 8

41
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

42
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Distance : 8

43
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

44
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

45
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

46
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

47
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

48
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

49
Tree	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

50
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

51
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

52
Tree	if ( JsDocToken.LP () == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( JsDocToken.LP () == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

53
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

54
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

55
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

56
Tree	if ( token . JsDocToken.LP ( token ) == super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

57
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

58
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

59
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

60
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

61
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

62
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

63
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

64
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Distance : 10

65
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

66
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Distance : 9

67
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Distance : 11

68
Tree	if ( token != super(); ) { return token . token ( token ) ; }
Code	if ( token != super(); ) { return token . token ( token ) ; }
Distance : 8

69
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( Object [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( Object [] ) null ) ; }
Distance : 12

70
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Distance : 6

71
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Distance : 9

72
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

73
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

74
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } notifyListeners
Distance : 6

75
Tree	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } class
Code	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } class
Distance : 10

76
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

77
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

78
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

79
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

80
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

81
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) super(); ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) super(); ) ; }
Distance : 10

82
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( super(); , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( super(); , token ) ; }
Distance : 9

83
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

84
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Distance : 9

85
Tree	if ( token != continue; ) { return token . token ( token ) ; }
Code	if ( token != continue; ) { return token . token ( token ) ; }
Distance : 8

86
Tree	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 10

87
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

88
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

89
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

90
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

91
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

92
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

93
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) return; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) return; ) ; }
Distance : 10

94
Tree	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } notifyListeners
Code	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } notifyListeners
Distance : 10

95
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Distance : 7

96
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

97
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( super(); , null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( super(); , null ) ; }
Distance : 9

98
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

99
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

100
Tree	if ( token != super(); ) { return token . token ( token ) ; }
Code	if ( token != super(); ) { return token . token ( token ) ; }
Distance : 8

101
Tree	if ( token != continue; ) { return token . token ( token ) ; }
Code	if ( token != continue; ) { return token . token ( token ) ; }
Distance : 8

102
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

103
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 8

104
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

105
Tree	if ( token && token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token && token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

106
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

107
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

108
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

109
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

110
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

111
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

112
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

113
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

114
Tree	if ( token != null ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Distance : 8

115
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

116
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

117
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , continue; ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , continue; ) ; }
Distance : 9

118
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( return; , null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( return; , null ) ; }
Distance : 9

119
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , ( ( STRING_CONSTANT ) ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , ( ( STRING_CONSTANT ) ) ; }
Distance : 9

120
Tree	if ( token == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

121
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

122
Tree	if ( token != continue; ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Distance : 8

123
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

124
Tree	if ( token == return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token == return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 10

125
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

126
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

127
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

128
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

129
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

130
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Distance : 11

131
Tree	if ( JsDocToken.LP () == super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( JsDocToken.LP () == super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

132
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Distance : 8

133
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Distance : 8

134
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 7

135
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

136
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

137
Tree	if ( token && token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token && token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

138
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( String [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( String [] ) null ) ; }
Distance : 12

139
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

140
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

141
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Distance : 9

142
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

143
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Distance : 9

144
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

145
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( ReadableInstant [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( ReadableInstant [] ) null ) ; }
Distance : 12

146
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

147
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

148
Tree	if ( JsDocToken.LP () == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( JsDocToken.LP () == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

149
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

150
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

151
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

152
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

153
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Distance : 9

154
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

155
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

156
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

157
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

158
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Distance : 7

159
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

160
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

161
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } notifyListeners
Distance : 7

162
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } array
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } array
Distance : 8

163
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

164
Tree	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } array
Code	if ( token != token ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } array
Distance : 10

165
Tree	if ( token == super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

166
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } notifyListeners
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } notifyListeners
Distance : 8

167
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( return; , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( return; , token ) ; }
Distance : 9

168
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } class
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } class
Distance : 9

169
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } notifyListeners
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } notifyListeners
Distance : 9

170
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

171
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

172
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

173
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

174
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

175
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

176
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Distance : 9

177
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } array
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } array
Distance : 9

178
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

179
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

180
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

181
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

182
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

183
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

184
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

185
Tree	if ( token != return; ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return this . token . reportTypeSyntaxWarning ( token ) ; }
Distance : 8

186
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

187
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

188
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

189
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ( STRING_CONSTANT ) ) ; }
Distance : 8

190
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) continue; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) continue; ) ; }
Distance : 10

191
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , reportTypeSyntaxWarning ( STRING_CONSTANT ) ) ; }
Distance : 9

192
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( JsDocToken.LP , token , token ) ; }
Distance : 11

193
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( NoDataException [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( NoDataException [] ) null ) ; }
Distance : 12

194
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

195
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

196
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , JsDocToken.LP ) ; }
Distance : 11

197
Tree	if ( token == continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token == continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 10

198
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } class
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } class
Distance : 8

199
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Distance : 6

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

1
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

2
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

3
Tree	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Code	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Distance : 5

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Distance : 3

5
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( false , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( false , ( n ) null ) ; }
Distance : 5

6
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 5

7
Tree	{ toSource () ; return toSource ( n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , n ) ; }
Distance : 2

8
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 6

9
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

10
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

11
Tree	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Distance : 7

12
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Distance : 5

13
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 2

14
Tree	{ toSource () ; return toSource ( n , n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , n , null , n ) ; }
Distance : 4

15
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Distance : 5

16
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Distance : 6

17
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Distance : 6

18
Tree	{ toSource () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Distance : 7

19
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 9

20
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Distance : 6

21
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

22
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Distance : 6

23
Tree	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Distance : 7

24
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

25
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

26
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

27
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

28
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

29
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

30
Tree	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

31
Tree	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

32
Tree	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; return this ; }
Code	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; return this ; }
Distance : 9

33
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

34
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

35
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Distance : 1

36
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

37
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

38
Tree	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 6

39
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 6

40
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 5

41
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , false ) ; }
Distance : 5

42
Tree	{ toSource () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 16

43
Tree	{ toSource () ; return n . toSource ( this , n , false ) ; }
Code	{ toSource () ; return n . toSource ( this , n , false ) ; }
Distance : 6

44
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

45
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

46
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

48
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 6

49
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 15

50
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

51
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 7

52
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 15

53
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

54
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

55
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 8

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Distance : 3

57
Tree	{ toSource () ; return toSource ( false , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( false , ( n ) null ) ; }
Distance : 6

58
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 2

59
Tree	{ toSource () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 6

60
Tree	{ toSource () ; return this . toSource ( n , n ) ; }
Code	{ toSource () ; return this . toSource ( n , n ) ; }
Distance : 6

61
Tree	{ toSource () ; return this . toSource ( n , n ) ; }
Code	{ toSource () ; return this . toSource ( n , n ) ; }
Distance : 6

62
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

63
Tree	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; return this ; }
Code	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; return this ; }
Distance : 9

64
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( false , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( false , ( n ) null ) ; }
Distance : 5

65
Tree	{ toSource () ; return toSource ( n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , n ) ; }
Distance : 2

66
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , n , n , n ) ; }
Distance : 8

67
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , n , n , n ) ; }
Distance : 8

68
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 3

69
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Distance : 2

70
Tree	{ toSource () ; return n . toSource ( this , n , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n , n , n , n ) ; }
Distance : 9

71
Tree	{ toSource () ; return n . toSource ( this , n , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n , n , n , n ) ; }
Distance : 9

72
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Distance : 4

73
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Distance : 5

74
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 6

75
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

76
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

77
Tree	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 3

78
Tree	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Code	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Distance : 5

79
Tree	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( Any.ANY ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( Any.ANY ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

80
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 2

81
Tree	{ calculator.invocationToReturn . toSource ( Token.PARAM_LIST ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ calculator.invocationToReturn . toSource ( Token.PARAM_LIST ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

82
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Distance : 5

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Distance : 4

84
Tree	{ toSource () ; return toSource ( n , n != null , n ) ; }
Code	{ toSource () ; return toSource ( n , n != null , n ) ; }
Distance : 4

85
Tree	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( Any.ANY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( Any.ANY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

86
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Distance : 3

87
Tree	{ calculator.invocationToReturn . toSource ( Any.ANY ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ calculator.invocationToReturn . toSource ( Any.ANY ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

88
Tree	{ initCompilerOptionsIfTesting ( new Returns ( n ) ) ; return NUMBER_CONSTANT ; }
Code	{ initCompilerOptionsIfTesting ( new Returns ( n ) ) ; return NUMBER_CONSTANT ; }
Distance : 9

89
Tree	{ toSource ( new Returns ( n ) ) ; return NUMBER_CONSTANT ; }
Code	{ toSource ( new Returns ( n ) ) ; return NUMBER_CONSTANT ; }
Distance : 10

90
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

91
Tree	{ toSource () ; return toSource ( n , n , n , null ) ; }
Code	{ toSource () ; return toSource ( n , n , n , null ) ; }
Distance : 5

92
Tree	{ initCompilerOptionsIfTesting ( new ThrowsException ( n ) ) ; return NUMBER_CONSTANT ; }
Code	{ initCompilerOptionsIfTesting ( new ThrowsException ( n ) ) ; return NUMBER_CONSTANT ; }
Distance : 9

93
Tree	{ initCompilerOptionsIfTesting ( new InstanceOf ( n ) ) ; return NUMBER_CONSTANT ; }
Code	{ initCompilerOptionsIfTesting ( new InstanceOf ( n ) ) ; return NUMBER_CONSTANT ; }
Distance : 9

94
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Distance : 4

95
Tree	{ toSource () ; return toSource ( n , n , n , null ) ; }
Code	{ toSource () ; return toSource ( n , n , n , null ) ; }
Distance : 5

96
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 11

97
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; }
Distance : 11

98
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 10

99
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 12

100
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 11

101
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 14

102
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 13

103
Tree	{ n . initCompilerOptionsIfTesting ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 13

104
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Distance : 13

105
Tree	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

106
Tree	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

107
Tree	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

108
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Distance : 14

109
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Distance : 13

110
Tree	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

111
Tree	{ n . initCompilerOptionsIfTesting ( toSource () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( toSource () , STRING_CONSTANT , this ) ; return toSource ( ( () , null ) ; }
Distance : 13

112
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 11

113
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . null ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . null ( n ) , n , n , n ) ; }
Distance : 11

114
Tree	{ toSource () ; return n . toSource ( n . null ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . null ( n ) , n , n , n ) ; }
Distance : 12

115
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Distance : 11

116
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 15

117
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 14

118
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 16

119
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 15

120
Tree	{ n . initCompilerOptionsIfTesting ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 16

121
Tree	{ n . initCompilerOptionsIfTesting ( n . null ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n . null ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 17

122
Tree	{ n . initCompilerOptionsIfTesting ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 16

123
Tree	{ n . initCompilerOptionsIfTesting ( n . null ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n . null ( n ) , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 17

124
Tree	{ toSource () . toSource ( new Returns () , n ) ; return this ; }
Code	{ toSource () . toSource ( new Returns () , n ) ; return this ; }
Distance : 10

125
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 2

126
Tree	{ toSource () . toSource ( new Returns () , n ) ; return this ; }
Code	{ toSource () . toSource ( new Returns () , n ) ; return this ; }
Distance : 10

127
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

128
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

129
Tree	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return Format.COMPACT . toSource () . toSource ( n , n , n ) ; }
Distance : 7

130
Tree	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

131
Tree	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( calculator.invocationToReturn ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

132
Tree	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Distance : 5

133
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , false ) ; }
Distance : 6

134
Tree	{ toSource () ; return toSource ( n . null ( n ) , false ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , false ) ; }
Distance : 6

135
Tree	{ toSource () ; return toSource ( n , n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , n , null , n ) ; }
Distance : 4

136
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , false ) ; }
Distance : 5

137
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Distance : 1

138
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

139
Tree	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Distance : 5

140
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

141
Tree	{ toSource () ; return n . toSource ( this , n , false ) ; }
Code	{ toSource () ; return n . toSource ( this , n , false ) ; }
Distance : 6

142
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

143
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Distance : 2

144
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

145
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 3

146
Tree	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 3

147
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 8

148
Tree	{ toSource () ; return toSource ( n , n != null , n ) ; }
Code	{ toSource () ; return toSource ( n , n != null , n ) ; }
Distance : 4

149
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 10

150
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . null ( n ) ) ; }
Distance : 9

151
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

152
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

153
Tree	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ( () , STRING_CONSTANT , this ) ; return toSource ( Any.ANY , n ) ; }
Distance : 13

154
Tree	{ toSource () . toSource ( new Returns () , n ) ; super }
Code	{ toSource () . toSource ( new Returns () , n ) ; super }
Distance : 8

155
Tree	{ toSource () ; return toSource ( false , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( false , ( n ) null ) ; }
Distance : 6

156
Tree	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 13

157
Tree	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; super }
Code	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; super }
Distance : 7

158
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 3

159
Tree	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; super }
Code	{ initCompilerOptionsIfTesting () . toSource ( new Returns () , n ) ; super }
Distance : 7

160
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 10

161
Tree	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 15

162
Tree	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 11

163
Tree	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . null ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . null ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 16

164
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Distance : 4

165
Tree	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( n . null ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ calculator.invocationToReturn . initCompilerOptionsIfTesting ( n . null ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 14

166
Tree	{ calculator.invocationToReturn . toSource ( n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ calculator.invocationToReturn . toSource ( n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 14

167
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

168
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

169
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . null ( n ) ) ; }
Distance : 9

170
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

171
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

172
Tree	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 15

173
Tree	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . null ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting ( STRING_CONSTANT , STRING_CONSTANT , n . null ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 16

174
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n , false ) ; }
Distance : 5

175
Tree	{ calculator.invocationToReturn . toSource ( n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Code	{ calculator.invocationToReturn . toSource ( n . toSource ( n ) ) ; return toSource ( Any.ANY , n ) ; }
Distance : 14

176
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , false ) ; }
Distance : 5

177
Tree	{ toSource () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY , n , n , n ) ; }
Distance : 7

178
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

179
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

180
Tree	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 10

181
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

182
Tree	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 7

183
Tree	{ toSource () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return n . toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 16

184
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 9

185
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

186
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

187
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

188
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . null ( n ) , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . null ( n ) , n ) ; }
Distance : 10

189
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

190
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

191
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

192
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . null ( n ) , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . null ( n ) , n ) ; }
Distance : 10

193
Tree	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( TokenType.STRING ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 11

194
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

195
Tree	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . initCompilerOptionsIfTesting ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 11

196
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

197
Tree	{ toSource () . toSource ( new Returns () , n ) ; super }
Code	{ toSource () . toSource ( new Returns () , n ) ; super }
Distance : 8

198
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 2

199
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String code = code . toSource ( this , root ) ;
Code	String code = code . toSource ( this , root ) ;
Distance : 8

1
Tree	String code = code . toSource ( this , root , sourceMap ) ;
Code	String code = code . toSource ( this , root , sourceMap ) ;
Distance : 7

2
Tree	String code = ( ( root ) this ) . toSource ( root , code , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code , code ) ;
Distance : 11

3
Tree	String code = Coordinates1D.NaN . toSource ( root , sourceMap ) ;
Code	String code = Coordinates1D.NaN . toSource ( root , sourceMap ) ;
Distance : 6

4
Tree	String code = source.sumOfLogs . toSource ( root , sourceMap ) ;
Code	String code = source.sumOfLogs . toSource ( root , sourceMap ) ;
Distance : 6

5
Tree	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 3

6
Tree	String code = toSource ( root , sourceMap , code , false ) ;
Code	String code = toSource ( root , sourceMap , code , false ) ;
Distance : 3

7
Tree	String code = ( ( root ) this ) . toSource ( root , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code ) ;
Distance : 10

8
Tree	String code = toSource ( root , NUMBER_CONSTANT ) ;
Code	String code = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 4

9
Tree	String code = toSource ( root , TokenType.STRING ) ;
Code	String code = toSource ( root , TokenType.STRING ) ;
Distance : 5

10
Tree	String code = sourceMap . toSource ( this , root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , sourceMap , sourceMap ) ;
Distance : 7

11
Tree	String code = toSource . toSource ( this , root ) ;
Code	String code = toSource . toSource ( this , root ) ;
Distance : 7

12
Tree	String sourceMap = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

13
Tree	String code = toSource ( root , code , code , false ) ;
Code	String code = toSource ( root , code , code , false ) ;
Distance : 4

14
Tree	String code = sourceMap . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = sourceMap . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

15
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap , code ) ;
Distance : 10

16
Tree	String code = code . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = code . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

17
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

18
Tree	String code = code . toSource ( STRING_CONSTANT , root ) ;
Code	String code = code . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

19
Tree	String code = toSource . toSource ( STRING_CONSTANT + root , false ) ;
Code	String code = toSource . toSource ( STRING_CONSTANT + root , false ) ;
Distance : 8

20
Tree	String code = sourceMap . toSource ( root , false ) ;
Code	String code = sourceMap . toSource ( root , false ) ;
Distance : 7

21
Tree	String code = code ;
Code	String code = code ;
Distance : 10

22
Tree	String code = sourceMap . toSource ( toSource () , root ) ;
Code	String code = sourceMap . toSource ( toSource () , root ) ;
Distance : 8

23
Tree	String code = code . toSource ( toSource () , root ) ;
Code	String code = code . toSource ( toSource () , root ) ;
Distance : 8

24
Tree	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 7

25
Tree	String code = code . toSource ( root ) ;
Code	String code = code . toSource ( root ) ;
Distance : 8

26
Tree	String code = sourceMap . toSource ( root , new String ( root , code ) ) ;
Code	String code = sourceMap . toSource ( root , new String ( root , code ) ) ;
Distance : 9

27
Tree	String code = sourceMap . toSource () ;
Code	String code = sourceMap . toSource () ;
Distance : 9

28
Tree	String code = sourceMap . toSource ( this , root , code ) ;
Code	String code = sourceMap . toSource ( this , root , code ) ;
Distance : 7

29
Tree	String code = sourceMap . toSource ( this , root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

30
Tree	String code = sourceMap . toSource ( root , code , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , code , sourceMap ) ;
Distance : 6

31
Tree	String code = root . toSource ( this , root , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , root , sourceMap , sourceMap ) ;
Distance : 7

32
Tree	String code = sourceMap . toSource ( this . root , code , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( this . root , code , sourceMap , sourceMap ) ;
Distance : 8

33
Tree	String code = root . toSource ( this , root ) ;
Code	String code = root . toSource ( this , root ) ;
Distance : 8

34
Tree	String code = root . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

35
Tree	String code = root . toSource ( this , root , sourceMap ) ;
Code	String code = root . toSource ( this , root , sourceMap ) ;
Distance : 7

36
Tree	String code = toSource ( false ) ;
Code	String code = toSource ( false ) ;
Distance : 7

37
Tree	String code = sourceMap . toSource ( this , root ) ;
Code	String code = sourceMap . toSource ( this , root ) ;
Distance : 8

38
Tree	String code = sourceMap . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

39
Tree	String code = sourceMap . toSource ( STRING_CONSTANT + root , false ) ;
Code	String code = sourceMap . toSource ( STRING_CONSTANT + root , false ) ;
Distance : 8

40
Tree	String code = code . toSource ( root , false ) ;
Code	String code = code . toSource ( root , false ) ;
Distance : 7

41
Tree	String code = code . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

42
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

43
Tree	String code = sourceMap . toSource ( this , root , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , sourceMap ) ;
Distance : 7

44
Tree	String code = toSource ( root , code , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap , sourceMap ) ;
Distance : 4

45
Tree	String code = toSource ( root , this . code ) ;
Code	String code = toSource ( root , this . code ) ;
Distance : 5

46
Tree	String code = toSource ( root , flags.outputWrapper ) ;
Code	String code = toSource ( root , flags.outputWrapper ) ;
Distance : 5

47
Tree	String code = sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap ) ;
Distance : 5

48
Tree	String code = sourceMap . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

49
Tree	String code = root . toSource () . toSource ( root ) ;
Code	String code = root . toSource () . toSource ( root ) ;
Distance : 9

50
Tree	String code = code ( root , sourceMap ) ;
Code	String code = code ( root , sourceMap ) ;
Distance : 5

51
Tree	String code = sourceMap . toSource ( STRING_CONSTANT , root ) ;
Code	String code = sourceMap . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

52
Tree	String code = toSource ( STRING_CONSTANT , root ) ;
Code	String code = toSource ( STRING_CONSTANT , root ) ;
Distance : 6

53
Tree	String code = sourceMap ( root , code ) ;
Code	String code = sourceMap ( root , code ) ;
Distance : 6

54
Tree	String code = code ( root , code ) ;
Code	String code = code ( root , code ) ;
Distance : 6

55
Tree	String code = new String ( root , code ) . toSource ( root ) ;
Code	String code = new String ( root , code ) . toSource ( root ) ;
Distance : 8

56
Tree	String sourceMap = toSource () ;
Code	String sourceMap = toSource () ;
Distance : 10

57
Tree	String code = code . toSource () ;
Code	String code = code . toSource () ;
Distance : 10

58
Tree	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Code	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 5

59
Tree	String code = sourceMap . sourceMap ( root ) ;
Code	String code = sourceMap . sourceMap ( root ) ;
Distance : 8

60
Tree	String code = toSource ( root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap ) ;
Distance : 3

61
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

62
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , code ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , code ) ;
Distance : 9

63
Tree	String code = toSource ( root , code , code ) ;
Code	String code = toSource ( root , code , code ) ;
Distance : 4

64
Tree	String code = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String code = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

65
Tree	String code = toSource ( root , System.out ) ;
Code	String code = toSource ( root , System.out ) ;
Distance : 5

66
Tree	String code = code . toSource ( root , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap ) ;
Distance : 6

67
Tree	String code = sourceMap ( root ) ;
Code	String code = sourceMap ( root ) ;
Distance : 7

68
Tree	String code = toSource () . toSource ( root , code ) ;
Code	String code = toSource () . toSource ( root , code ) ;
Distance : 8

69
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , root ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , root ) ;
Distance : 6

70
Tree	String code = code . toSource ( this , root , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( this , root , sourceMap , sourceMap ) ;
Distance : 7

71
Tree	String code = code . sourceMap ( root ) ;
Code	String code = code . sourceMap ( root ) ;
Distance : 8

72
Tree	String code = toSource ( root , sourceMap , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , false ) ;
Distance : 3

73
Tree	String code = toSource ( root , code , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap ) ;
Distance : 4

74
Tree	String code = toSource ( root , code , false ) ;
Code	String code = toSource ( root , code , false ) ;
Distance : 4

75
Tree	String code = root . toSource ( STRING_CONSTANT + root , false ) ;
Code	String code = root . toSource ( STRING_CONSTANT + root , false ) ;
Distance : 8

76
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

77
Tree	String code = ( ( root ) this ) . toSource ( root , code , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code , sourceMap ) ;
Distance : 11

78
Tree	String code = sourceMap . toSource ( root , code ) ;
Code	String code = sourceMap . toSource ( root , code ) ;
Distance : 7

79
Tree	String root = toSource ( root , this . code ) ;
Code	String root = toSource ( root , this . code ) ;
Distance : 6

80
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 10

81
Tree	String code = sourceMap . toSource ( root ) ;
Code	String code = sourceMap . toSource ( root ) ;
Distance : 8

82
Tree	String code = toSource ( root , code , sourceMap , false ) ;
Code	String code = toSource ( root , code , sourceMap , false ) ;
Distance : 4

83
Tree	String code = toSource ( toSource () , root ) ;
Code	String code = toSource ( toSource () , root ) ;
Distance : 6

84
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

85
Tree	String code = sourceMap . toSource ( root , code , sourceMap . toSource () ) ;
Code	String code = sourceMap . toSource ( root , code , sourceMap . toSource () ) ;
Distance : 7

86
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 10

87
Tree	String code = toSource () ;
Code	String code = toSource () ;
Distance : 9

88
Tree	String root = toSource () ;
Code	String root = toSource () ;
Distance : 10

89
Tree	String code = toSource . toSource ( STRING_CONSTANT , root ) ;
Code	String code = toSource . toSource ( STRING_CONSTANT , root ) ;
Distance : 7

90
Tree	String code = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String code = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

91
Tree	String root = toSource () . toSource ( root , sourceMap ) ;
Code	String root = toSource () . toSource ( root , sourceMap ) ;
Distance : 8

92
Tree	String root = toSource ( false ) ;
Code	String root = toSource ( false ) ;
Distance : 8

93
Tree	String code = sourceMap ( root , code , sourceMap ) ;
Code	String code = sourceMap ( root , code , sourceMap ) ;
Distance : 5

94
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

95
Tree	String root = toSource ( root , NUMBER_CONSTANT ) ;
Code	String root = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 5

96
Tree	String code = sourceMap . toSource ( root . toSource () , sourceMap ) ;
Code	String code = sourceMap . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

97
Tree	String code = code ( root , code , sourceMap ) ;
Code	String code = code ( root , code , sourceMap ) ;
Distance : 5

98
Tree	String code = root . toSource ( STRING_CONSTANT , root ) ;
Code	String code = root . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

99
Tree	String code = code ( root ) ;
Code	String code = code ( root ) ;
Distance : 7

100
Tree	String code = toSource . toSource ( root ) ;
Code	String code = toSource . toSource ( root ) ;
Distance : 8

101
Tree	String root = toSource ( root ) ;
Code	String root = toSource ( root ) ;
Distance : 7

102
Tree	String code = code . toSource ( STRING_CONSTANT + root , false ) ;
Code	String code = code . toSource ( STRING_CONSTANT + root , false ) ;
Distance : 8

103
Tree	String code = sourceMap ;
Code	String code = sourceMap ;
Distance : 9

104
Tree	String root = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String root = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 10

105
Tree	String code = root . toSource () ;
Code	String code = root . toSource () ;
Distance : 9

106
Tree	String code = code . toSource ( root , TokenType.STRING ) ;
Code	String code = code . toSource ( root , TokenType.STRING ) ;
Distance : 7

107
Tree	String code = root . toSource ( root , false ) ;
Code	String code = root . toSource ( root , false ) ;
Distance : 7

108
Tree	String code = code . toSource ( root , flags.outputWrapper ) ;
Code	String code = code . toSource ( root , flags.outputWrapper ) ;
Distance : 7

109
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

110
Tree	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 4

111
Tree	String code = sourceMap . toSource ( this , root , code , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , code , sourceMap ) ;
Distance : 7

112
Tree	String code = ( ( root ) this ) . toSource ( code , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( code , sourceMap ) ;
Distance : 10

113
Tree	String root = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String root = toSource ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

114
Tree	String code = root . toSource ( this , root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

115
Tree	String code = sourceMap . toSource ( root , TokenType.STRING ) ;
Code	String code = sourceMap . toSource ( root , TokenType.STRING ) ;
Distance : 7

116
Tree	String code = code ( root , sourceMap , sourceMap ) ;
Code	String code = code ( root , sourceMap , sourceMap ) ;
Distance : 4

117
Tree	String code = toSource ( root , this . root ) ;
Code	String code = toSource ( root , this . root ) ;
Distance : 5

118
Tree	String code = toSource . toSource () ;
Code	String code = toSource . toSource () ;
Distance : 9

119
Tree	String code = sourceMap . toSource ( root , flags.outputWrapper ) ;
Code	String code = sourceMap . toSource ( root , flags.outputWrapper ) ;
Distance : 7

120
Tree	String code = code . toSource ( root , code , sourceMap ) ;
Code	String code = code . toSource ( root , code , sourceMap ) ;
Distance : 6

121
Tree	String code = toSource ( root , CheckConformance.CONFORMANCE_VIOLATION , toSource () ) ;
Code	String code = toSource ( root , CheckConformance.CONFORMANCE_VIOLATION , toSource () ) ;
Distance : 4

122
Tree	String code = code . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

123
Tree	String code = code . toSource ( this , root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( this , root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

124
Tree	String code = toSource ( code ) ;
Code	String code = toSource ( code ) ;
Distance : 7

125
Tree	String code = sourceMap . toSource ( this , root , code , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , code , sourceMap , sourceMap ) ;
Distance : 8

126
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Distance : 9

127
Tree	String code = toSource ( root , TokenType.STRING , toSource () ) ;
Code	String code = toSource ( root , TokenType.STRING , toSource () ) ;
Distance : 4

128
Tree	String code = toSource ( root , root , false ) ;
Code	String code = toSource ( root , root , false ) ;
Distance : 4

129
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

130
Tree	String code = ( ( root ) this ) . toSource ( root , root ) ;
Code	String code = ( ( root ) this ) . toSource ( root , root ) ;
Distance : 10

131
Tree	String code = resolveVariable . toSource ( root , sourceMap ) ;
Code	String code = resolveVariable . toSource ( root , sourceMap ) ;
Distance : 6

132
Tree	String code = toSource ( root , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , code ) ;
Distance : 3

133
Tree	String code = code . toSource ( root , code ) ;
Code	String code = code . toSource ( root , code ) ;
Distance : 7

134
Tree	String code = new String ( root , sourceMap ) . toSource ( code ) ;
Code	String code = new String ( root , sourceMap ) . toSource ( code ) ;
Distance : 7

135
Tree	String code = toSource ( root , flags.outputWrapper , toSource () ) ;
Code	String code = toSource ( root , flags.outputWrapper , toSource () ) ;
Distance : 4

136
Tree	String code = new String ( root , root ) . toSource ( root ) ;
Code	String code = new String ( root , root ) . toSource ( root ) ;
Distance : 8

137
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 7

138
Tree	String code = toSource ( code , NUMBER_CONSTANT ) ;
Code	String code = toSource ( code , NUMBER_CONSTANT ) ;
Distance : 5

139
Tree	String code = toSource ( root , code , code , sourceMap ) ;
Code	String code = toSource ( root , code , code , sourceMap ) ;
Distance : 4

140
Tree	String code = new String ( root , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( root , sourceMap ) . toSource ( root ) ;
Distance : 7

141
Tree	String root = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String root = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 8

142
Tree	String code = toSource ( toSource ( root , sourceMap ) ) ;
Code	String code = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 6

143
Tree	String code = toSource . toSource () . toSource ( root ) ;
Code	String code = toSource . toSource () . toSource ( root ) ;
Distance : 8

144
Tree	String code = toSource ( root , System.out , toSource () ) ;
Code	String code = toSource ( root , System.out , toSource () ) ;
Distance : 4

145
Tree	String code = toSource ( toSource () , code ) ;
Code	String code = toSource ( toSource () , code ) ;
Distance : 6

146
Tree	String code = toSource ( true ) ;
Code	String code = toSource ( true ) ;
Distance : 7

147
Tree	String sourceMap = toSource () . toSource ( root ) ;
Code	String sourceMap = toSource () . toSource ( root ) ;
Distance : 9

148
Tree	String code = toSource ( root , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , false ) ;
Distance : 3

149
Tree	String root = toSource ( toSource () , root ) ;
Code	String root = toSource ( toSource () , root ) ;
Distance : 7

150
Tree	String code = resolveVariable . toSource ( root , code ) ;
Code	String code = resolveVariable . toSource ( root , code ) ;
Distance : 7

151
Tree	String root = toSource ( toSource ( root , sourceMap ) ) ;
Code	String root = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 7

152
Tree	String code = toSource () . toSource ( code ) ;
Code	String code = toSource () . toSource ( code ) ;
Distance : 8

153
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

154
Tree	String code = root ;
Code	String code = root ;
Distance : 9

155
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

156
Tree	String root = toSource ( root , sourceMap , false ) ;
Code	String root = toSource ( root , sourceMap , false ) ;
Distance : 4

157
Tree	String code = toSource ;
Code	String code = toSource ;
Distance : 9

158
Tree	String sourceMap = toSource ( root ) ;
Code	String sourceMap = toSource ( root ) ;
Distance : 7

159
Tree	String code = sourceMap . toSource ( root , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap ) ;
Distance : 6

160
Tree	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Distance : 3

161
Tree	String code = toSource ( root , CheckConformance.CONFORMANCE_VIOLATION ) ;
Code	String code = toSource ( root , CheckConformance.CONFORMANCE_VIOLATION ) ;
Distance : 5

162
Tree	String code = toSource . toSource ( root , false ) ;
Code	String code = toSource . toSource ( root , false ) ;
Distance : 7

163
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Distance : 6

164
Tree	String root = toSource ( STRING_CONSTANT , root ) ;
Code	String root = toSource ( STRING_CONSTANT , root ) ;
Distance : 7

165
Tree	String code = toSource ( toSource ( root , code ) ) ;
Code	String code = toSource ( toSource ( root , code ) ) ;
Distance : 6

166
Tree	String code = sourceMap . toSource () . toSource ( root ) ;
Code	String code = sourceMap . toSource () . toSource ( root ) ;
Distance : 9

167
Tree	String code = code . toSource () . toSource ( root ) ;
Code	String code = code . toSource () . toSource ( root ) ;
Distance : 9

168
Tree	String code = sourceMap . code ( root ) ;
Code	String code = sourceMap . code ( root ) ;
Distance : 8

169
Tree	String code = root . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

170
Tree	String code = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

171
Tree	String sourceMap = toSource ( toSource () , root ) ;
Code	String sourceMap = toSource ( toSource () , root ) ;
Distance : 7

172
Tree	String code = sourceMap . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = sourceMap . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

173
Tree	String code = code . toSource ( root . toSource () , sourceMap ) ;
Code	String code = code . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

174
Tree	String code = toSource . toSource ( toSource () , root ) ;
Code	String code = toSource . toSource ( toSource () , root ) ;
Distance : 8

175
Tree	String code = code . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = code . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

176
Tree	String code = toSource ( toSource ( root , root ) ) ;
Code	String code = toSource ( toSource ( root , root ) ) ;
Distance : 6

177
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , root ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , root ) ;
Distance : 9

178
Tree	String code = sourceMap . toSource ( root . toSource () , code ) ;
Code	String code = sourceMap . toSource ( root . toSource () , code ) ;
Distance : 8

179
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Distance : 9

180
Tree	String root = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Code	String root = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Distance : 8

181
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Distance : 7

182
Tree	String sourceMap = toSource ( false ) ;
Code	String sourceMap = toSource ( false ) ;
Distance : 8

183
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

184
Tree	String code = code . code ( root ) ;
Code	String code = code . code ( root ) ;
Distance : 9

185
Tree	String code = toSource ( STRING_CONSTANT , code ) ;
Code	String code = toSource ( STRING_CONSTANT , code ) ;
Distance : 6

186
Tree	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Distance : 7

187
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

188
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

189
Tree	String code = toSource ( root ( root ) , toSource ( sourceMap ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( sourceMap ) ) ;
Distance : 7

190
Tree	String code = root . toSource ( toSource () , root ) ;
Code	String code = root . toSource ( toSource () , root ) ;
Distance : 8

191
Tree	String code = toSource () . toSource ( root , root ) ;
Code	String code = toSource () . toSource ( root , root ) ;
Distance : 8

192
Tree	String code = toSource () ;
Code	String code = toSource () ;
Distance : 9

193
Tree	String root = toSource () . toSource ( root ) ;
Code	String root = toSource () . toSource ( root ) ;
Distance : 9

194
Tree	String code = code . toSource ( root . toSource () , code ) ;
Code	String code = code . toSource ( root . toSource () , code ) ;
Distance : 8

195
Tree	String code = toSource ( root ( root ) , toSource ( code ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( code ) ) ;
Distance : 7

196
Tree	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 9

197
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Distance : 7

198
Tree	String code = toSource ( root . toSource ( root ) , toSource ( code ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( code ) ) ;
Distance : 9

199
Tree	String code = toSource ( root . toSource ( root ) , toSource ( sourceMap ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( sourceMap ) ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

1
Tree	typeArguments.length = assignNode . getParent ( null , assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( null , assignNode ) ;
Distance : 7

2
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

3
Tree	typeArguments.length = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	typeArguments.length = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 7

4
Tree	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

5
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

6
Tree	RemoveUnusedCode.Builder = new isExprResult ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

7
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

8
Tree	entry.map = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Code	entry.map = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Distance : 12

9
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

10
Tree	this . assignNode = ( assignNode ) assignNode . getParent () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () ;
Distance : 8

11
Tree	typeArguments.length = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Distance : 12

12
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Distance : 12

13
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode , assignNode , NodeUtil , NodeUtil , assignNode ) ;
Distance : 12

14
Tree	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Code	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Distance : 10

15
Tree	entry.map = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	entry.map = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

16
Tree	typeArguments.length = ( assignNode ) getParent ( assignNode ) ;
Code	typeArguments.length = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

17
Tree	entry.map = STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	entry.map = STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 5

18
Tree	RemoveUnusedCode.Builder = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	RemoveUnusedCode.Builder = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

19
Tree	entry.map = new NodeUtil ( assignNode ) . isExprResult () ;
Code	entry.map = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

20
Tree	entry.map = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	entry.map = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

21
Tree	typeArguments.length = assignNode . getParent () ;
Code	typeArguments.length = assignNode . getParent () ;
Distance : 8

22
Tree	this . maybeAliased = ( TitleChangeEvent ) assignNode . getParent () ;
Code	this . maybeAliased = ( TitleChangeEvent ) assignNode . getParent () ;
Distance : 7

23
Tree	RemoveUnusedCode.Builder = ( assignNode ) getParent ( assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

24
Tree	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Distance : 10

25
Tree	maybeAliased = NodeUtil * assignNode . getParent () . isExprResult () ;
Code	maybeAliased = NodeUtil * assignNode . getParent () . isExprResult () ;
Distance : 9

26
Tree	typeArguments.length = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Code	typeArguments.length = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Distance : 11

27
Tree	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

28
Tree	typeArguments.length = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Distance : 10

29
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( this ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( this ) ;
Distance : 8

30
Tree	RemoveUnusedCode.Builder = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 12

31
Tree	maybeAliased = NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased = NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

32
Tree	this . maybeAliased = ( isExprResult ) assignNode . getParent () ;
Code	this . maybeAliased = ( isExprResult ) assignNode . getParent () ;
Distance : 7

33
Tree	maybeAliased /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	maybeAliased /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

34
Tree	typeArguments.length = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Code	typeArguments.length = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Distance : 11

35
Tree	typeArguments.length = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

36
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Distance : 10

37
Tree	entry.map = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	entry.map = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 12

38
Tree	this . maybeAliased = assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = assignNode . getParent () . isExprResult () ;
Distance : 6

39
Tree	maybeAliased = assignNode * assignNode . getParent () . isExprResult () ;
Code	maybeAliased = assignNode * assignNode . getParent () . isExprResult () ;
Distance : 10

40
Tree	maybeAliased /= STRING_CONSTANT + STRING_CONSTANT ;
Code	maybeAliased /= STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

41
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

42
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Distance : 6

43
Tree	entry.map = ( assignNode ) assignNode . getParent ( this ) ;
Code	entry.map = ( assignNode ) assignNode . getParent ( this ) ;
Distance : 8

44
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

45
Tree	RemoveUnusedCode.Builder = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	RemoveUnusedCode.Builder = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

46
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent () . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent () . isExprResult () ;
Distance : 9

47
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

48
Tree	RemoveUnusedCode.Builder = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Distance : 11

49
Tree	this . assignNode = assignNode . getParent () . isExprResult () ;
Code	this . assignNode = assignNode . getParent () . isExprResult () ;
Distance : 7

50
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

51
Tree	entry.map = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	entry.map = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

52
Tree	entry.map = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	entry.map = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

53
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

54
Tree	RemoveUnusedCode.Builder = assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = assignNode . getParent () . isExprResult () ;
Distance : 9

55
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

56
Tree	entry.map = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	entry.map = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

57
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , Verification.EXPLICIT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , Verification.EXPLICIT ) ;
Distance : 15

58
Tree	entry.map = new isExprResult ( assignNode ) . isExprResult () ;
Code	entry.map = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

59
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( null , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( null , assignNode ) ;
Distance : 7

60
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( null , assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( null , assignNode ) ;
Distance : 7

61
Tree	entry.map = assignNode . getParent () . isExprResult () ;
Code	entry.map = assignNode . getParent () . isExprResult () ;
Distance : 9

62
Tree	assignNode /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	assignNode /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

63
Tree	typeArguments.length = assignNode * NodeUtil . getParent () . isExprResult () ;
Code	typeArguments.length = assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

64
Tree	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

65
Tree	entry.map = assignNode . getParent () ;
Code	entry.map = assignNode . getParent () ;
Distance : 8

66
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

67
Tree	assignNode /= STRING_CONSTANT + STRING_CONSTANT ;
Code	assignNode /= STRING_CONSTANT + STRING_CONSTANT ;
Distance : 10

68
Tree	maybeAliased /= LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE && assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE && assignNode . getParent () . isExprResult () ;
Distance : 10

69
Tree	maybeAliased /= Map.Entry && assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= Map.Entry && assignNode . getParent () . isExprResult () ;
Distance : 10

70
Tree	maybeAliased /= other.nominalType && assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= other.nominalType && assignNode . getParent () . isExprResult () ;
Distance : 10

71
Tree	maybeAliased /= STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Code	maybeAliased /= STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 11

72
Tree	assignNode /= STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Code	assignNode /= STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 11

73
Tree	NodeUtil /= STRING_CONSTANT + STRING_CONSTANT ;
Code	NodeUtil /= STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

74
Tree	this . assignNode = NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = NodeUtil . getParent () . isExprResult () ;
Distance : 6

75
Tree	maybeAliased /= STRING_CONSTANT + STRING_CONSTANT ; Class
Code	maybeAliased /= STRING_CONSTANT + STRING_CONSTANT ; Class
Distance : 10

76
Tree	RemoveUnusedCode.Builder = getParent ( assignNode , assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	RemoveUnusedCode.Builder = getParent ( assignNode , assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 14

77
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

78
Tree	NewTypeInference.INEXISTENT_PROPERTY = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 12

79
Tree	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 14

80
Tree	typeArguments.length = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	typeArguments.length = this . assignNode . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 12

81
Tree	entry.map = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Code	entry.map = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

82
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 9

83
Tree	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

84
Tree	entry.map = ( assignNode ) child.parent . getParent () ;
Code	entry.map = ( assignNode ) child.parent . getParent () ;
Distance : 10

85
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

86
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

87
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( this ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( this ) ;
Distance : 8

88
Tree	this . maybeAliased = null ;
Code	this . maybeAliased = null ;
Distance : 6

89
Tree	typeArguments.length = getParent ( assignNode , assignNode . getParent () . isExprResult () . assignNode ) ;
Code	typeArguments.length = getParent ( assignNode , assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 13

90
Tree	entry.map = assignNode . getParent ( null , assignNode ) ;
Code	entry.map = assignNode . getParent ( null , assignNode ) ;
Distance : 7

91
Tree	this . maybeAliased = ( double [] ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( double [] ) assignNode . getParent () . isExprResult () ;
Distance : 10

92
Tree	this . assignNode = null ;
Code	this . assignNode = null ;
Distance : 7

93
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Distance : 7

94
Tree	typeArguments.length = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 12

95
Tree	this . maybeAliased = ( Double.NaN ) assignNode . getParent () ;
Code	this . maybeAliased = ( Double.NaN ) assignNode . getParent () ;
Distance : 7

96
Tree	typeArguments.length = new NodeUtil ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

97
Tree	typeArguments.length = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	typeArguments.length = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

98
Tree	entry.map = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Code	entry.map = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Distance : 10

99
Tree	entry.map = ( assignNode ) getParent ( assignNode ) ;
Code	entry.map = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

100
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Distance : 10

101
Tree	NewTypeInference.INEXISTENT_PROPERTY = STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 5

102
Tree	typeArguments.length = STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	typeArguments.length = STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 5

103
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode , assignNode . getParent () ) ;
Distance : 10

104
Tree	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Code	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

105
Tree	typeArguments.length = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

106
Tree	typeArguments.length = new isExprResult ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

107
Tree	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

108
Tree	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Code	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

109
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

110
Tree	typeArguments.length = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	typeArguments.length = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

111
Tree	typeArguments.length = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	typeArguments.length = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

112
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , Verification.EXPLICIT ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , Verification.EXPLICIT ) ;
Distance : 15

113
Tree	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Code	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

114
Tree	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

115
Tree	NewTypeInference.INEXISTENT_PROPERTY = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

116
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent () ;
Distance : 8

117
Tree	RemoveUnusedCode.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

118
Tree	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	entry.map = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

119
Tree	RemoveUnusedCode.Builder = assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = assignNode . getParent () ;
Distance : 8

120
Tree	typeArguments.length = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

121
Tree	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

122
Tree	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

123
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

124
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 12

125
Tree	this . maybeAliased = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Code	this . maybeAliased = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Distance : 7

126
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

127
Tree	maybeAliased = assignNode * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased = assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

128
Tree	entry.map = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	entry.map = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 12

129
Tree	typeArguments.length = ( assignNode ) assignNode . getParent () ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent () ;
Distance : 10

130
Tree	RemoveUnusedCode.Builder = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent () . isExprResult () . isExprResult ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 12

131
Tree	maybeAliased = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	maybeAliased = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

132
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

133
Tree	typeArguments.length = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

134
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () ;
Distance : 10

135
Tree	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Distance : 7

136
Tree	typeArguments.length = assignNode . NodeUtil ( assignNode ) ;
Code	typeArguments.length = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

137
Tree	entry.map = ( assignNode ) assignNode . getParent () ;
Code	entry.map = ( assignNode ) assignNode . getParent () ;
Distance : 10

138
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Distance : 7

139
Tree	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Code	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

140
Tree	typeArguments.length = ( assignNode ) getParent () ;
Code	typeArguments.length = ( assignNode ) getParent () ;
Distance : 8

141
Tree	this . assignNode = ( double [] ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( double [] ) assignNode . getParent () . isExprResult () ;
Distance : 11

142
Tree	typeArguments.length = ( assignNode ) child.parent . getParent () ;
Code	typeArguments.length = ( assignNode ) child.parent . getParent () ;
Distance : 10

143
Tree	RemoveUnusedCode.Builder = ( assignNode ) getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) getParent () ;
Distance : 8

144
Tree	assignNode = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	assignNode = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

145
Tree	typeArguments.length = assignNode . getParent () . isExprResult () ;
Code	typeArguments.length = assignNode . getParent () . isExprResult () ;
Distance : 9

146
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 8

147
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent () ;
Distance : 8

148
Tree	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

149
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Distance : 11

150
Tree	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

151
Tree	entry.map = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Code	entry.map = ( assignNode ) getParent ( assignNode , this . assignNode ) ;
Distance : 11

152
Tree	typeArguments.length = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . NodeUtil ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

153
Tree	maybeAliased = STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Code	maybeAliased = STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 11

154
Tree	NewTypeInference.INEXISTENT_PROPERTY = new isExprResult ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

155
Tree	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

156
Tree	typeArguments.length = getParent ( assignNode , assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	typeArguments.length = getParent ( assignNode , assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 14

157
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode * NodeUtil . getParent () . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

158
Tree	RemoveUnusedCode.Builder = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 7

159
Tree	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

160
Tree	RemoveUnusedCode.Builder = assignNode * NodeUtil . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

161
Tree	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

162
Tree	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Code	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () ) ;
Distance : 10

163
Tree	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

164
Tree	entry.map = assignNode * NodeUtil . getParent () . isExprResult () ;
Code	entry.map = assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

165
Tree	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

166
Tree	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Distance : 11

167
Tree	RemoveUnusedCode.Builder = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Distance : 11

168
Tree	entry.map = ( assignNode ) getParent () ;
Code	entry.map = ( assignNode ) getParent () ;
Distance : 8

169
Tree	RemoveUnusedCode.Builder = STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	RemoveUnusedCode.Builder = STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 5

170
Tree	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

171
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

172
Tree	typeArguments.length = ( assignNode ) this . assignNode . getParent ( assignNode . getParent () ) ;
Code	typeArguments.length = ( assignNode ) this . assignNode . getParent ( assignNode . getParent () ) ;
Distance : 12

173
Tree	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent () ;
Distance : 10

174
Tree	this . maybeAliased = NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = NodeUtil . getParent () . isExprResult () ;
Distance : 5

175
Tree	typeArguments.length = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , Verification.EXPLICIT ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , Verification.EXPLICIT ) ;
Distance : 15

176
Tree	entry.map = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Code	entry.map = new NodeUtil ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) . isExprResult () ;
Distance : 11

177
Tree	typeArguments.length = ( assignNode ) assignNode . getParent ( this ) ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent ( this ) ;
Distance : 8

178
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) this . assignNode . getParent ( assignNode . getParent () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) this . assignNode . getParent ( assignNode . getParent () ) ;
Distance : 12

179
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

180
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

181
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 7

182
Tree	NewTypeInference.INEXISTENT_PROPERTY = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	NewTypeInference.INEXISTENT_PROPERTY = STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

183
Tree	this . maybeAliased = ( boolean [] ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( boolean [] ) assignNode . getParent () . isExprResult () ;
Distance : 10

184
Tree	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

185
Tree	typeArguments.length = ( NodeUtil ) this . assignNode . getParent ( assignNode . getParent () ) ;
Code	typeArguments.length = ( NodeUtil ) this . assignNode . getParent ( assignNode . getParent () ) ;
Distance : 12

186
Tree	entry.map = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Code	entry.map = ( assignNode ) STRING_CONSTANT . isExprResult ( assignNode ) ;
Distance : 7

187
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent () ;
Distance : 10

188
Tree	RemoveUnusedCode.Builder = ( assignNode ) this . assignNode . getParent ( assignNode . getParent () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) this . assignNode . getParent ( assignNode . getParent () ) ;
Distance : 12

189
Tree	typeArguments.length = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , child.parent ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS , assignNode , Verification.EXPLICIT , assignNode , child.parent ) ;
Distance : 15

190
Tree	entry.map = assignNode . NodeUtil ( assignNode ) ;
Code	entry.map = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

191
Tree	maybeAliased /= child.parent && assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= child.parent && assignNode . getParent () . isExprResult () ;
Distance : 10

192
Tree	assignNode /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	assignNode /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

193
Tree	this . NodeUtil = null ;
Code	this . NodeUtil = null ;
Distance : 7

194
Tree	maybeAliased /= assignNode * assignNode . getParent () . isExprResult () ;
Code	maybeAliased /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 10

195
Tree	this . maybeAliased = return; ;
Code	this . maybeAliased = return; ;
Distance : 6

196
Tree	this . maybeAliased = ( long [] ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( long [] ) assignNode . getParent () . isExprResult () ;
Distance : 10

197
Tree	assignNode = STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Code	assignNode = STRING_CONSTANT + NodeUtil . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 11

198
Tree	maybeAliased /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

199
Tree	maybeAliased /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

1
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

2
Tree	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

3
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

4
Tree	if ( v.length . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( v.length . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 8

5
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Distance : 7

6
Tree	if ( x == NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

7
Tree	if ( x < NUMBER_CONSTANT && x <= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

8
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Distance : 7

9
Tree	if ( x < NUMBER_CONSTANT && prev >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

10
Tree	if ( x < NUMBER_CONSTANT && prev <= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

11
Tree	if ( add () && DisposalCheckingPolicy.OFF == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( add () && DisposalCheckingPolicy.OFF == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 8

12
Tree	if ( x == NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

13
Tree	if ( x < NUMBER_CONSTANT && prev > isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Distance : 5

14
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

15
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

16
Tree	if ( x < NUMBER_CONSTANT && prev > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

17
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

18
Tree	if ( x == NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

19
Tree	if ( x < NUMBER_CONSTANT && prev >= prev . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 9

20
Tree	if ( add () && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( add () && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 8

21
Tree	if ( x < NUMBER_CONSTANT && prev != IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

22
Tree	if ( x < NUMBER_CONSTANT && prev > LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 5

23
Tree	if ( x < NUMBER_CONSTANT && prev != super(); ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != super(); ) { add ( STRING_CONSTANT ) ; }
Distance : 5

24
Tree	if ( MathUtils.TWO_PI . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( MathUtils.TWO_PI . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 8

25
Tree	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

26
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

27
Tree	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

28
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

29
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

30
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

31
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

32
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add () ; add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add () ; add ( STRING_CONSTANT ) ; }
Distance : 9

33
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

34
Tree	if ( x < NUMBER_CONSTANT && prev != DisposalCheckingPolicy.OFF ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != DisposalCheckingPolicy.OFF ) { add ( STRING_CONSTANT ) ; }
Distance : 5

35
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

36
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

37
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

38
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

39
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

40
Tree	if ( x == NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

41
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Distance : 6

42
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

43
Tree	if ( x < NUMBER_CONSTANT && prev < prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

44
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add () ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add () ; }
Distance : 9

45
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

46
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

47
Tree	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

48
Tree	if ( x < NUMBER_CONSTANT && prev == prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

49
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

50
Tree	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

51
Tree	if ( x < NUMBER_CONSTANT && prev != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

52
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

53
Tree	if ( x < NUMBER_CONSTANT && prev != isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Distance : 5

54
Tree	if ( x == NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

55
Tree	if ( add () && CharUtils.NUL == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( add () && CharUtils.NUL == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 8

56
Tree	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

57
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

58
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

59
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

60
Tree	if ( x == NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

61
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

62
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; break; }
Distance : 6

63
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

64
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

65
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

66
Tree	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

67
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

68
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

69
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

70
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

71
Tree	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

72
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

73
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; null }
Distance : 8

74
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

75
Tree	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

76
Tree	if ( x == NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

77
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

78
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

79
Tree	if ( x < NUMBER_CONSTANT && x == prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

80
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { null }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { null }
Distance : 12

81
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 9

82
Tree	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

83
Tree	if ( x < NUMBER_CONSTANT && prev == x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

84
Tree	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

85
Tree	if ( x == NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

86
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { continue; }
Distance : 12

87
Tree	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

88
Tree	if ( x < NUMBER_CONSTANT && x >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

89
Tree	if ( x < NUMBER_CONSTANT && prev <= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

90
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add () ; add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add () ; add ( STRING_CONSTANT ) ; }
Distance : 8

91
Tree	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Test
Code	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Test
Distance : 8

92
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add () ; add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add () ; add ( STRING_CONSTANT ) ; }
Distance : 8

93
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add () ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add () ; }
Distance : 8

94
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

95
Tree	if ( x < NUMBER_CONSTANT && isPointInRect != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

96
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

97
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

98
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

99
Tree	if ( x < NUMBER_CONSTANT && prev != continue; ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != continue; ) { add ( STRING_CONSTANT ) ; }
Distance : 5

100
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add () ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add () ; }
Distance : 8

101
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

102
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

103
Tree	if ( x < NUMBER_CONSTANT && isPointInRect == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

104
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

105
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

106
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

107
Tree	if ( x < NUMBER_CONSTANT && prev < x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

108
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

109
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 8

110
Tree	if ( x < NUMBER_CONSTANT && isPointInRect == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isPointInRect == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

111
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

112
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

113
Tree	if ( x == NUMBER_CONSTANT && isLastMatcherVarargMatcher == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && isLastMatcherVarargMatcher == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 6

114
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

115
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

116
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Distance : 6

117
Tree	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Class
Code	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Class
Distance : 8

118
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

119
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

120
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

121
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

122
Tree	if ( add () && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( add () && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 8

123
Tree	if ( x == NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

124
Tree	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

125
Tree	if ( x < NUMBER_CONSTANT && prev - prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

126
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; break; }
Distance : 8

127
Tree	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

128
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

129
Tree	if ( x < NUMBER_CONSTANT && prev < prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

130
Tree	if ( x < NUMBER_CONSTANT && x <= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

131
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

132
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { return; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . CHAR_CONS ) { return; }
Distance : 12

133
Tree	if ( x < NUMBER_CONSTANT && x != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

134
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

135
Tree	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

136
Tree	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

137
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

138
Tree	if ( x == NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

139
Tree	if ( x.length . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x.length . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Distance : 8

140
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

141
Tree	if ( v.length . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( v.length . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Distance : 8

142
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

143
Tree	if ( x == NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

144
Tree	if ( Double.MIN_VALUE . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( Double.MIN_VALUE . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 8

145
Tree	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

146
Tree	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

147
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

148
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

149
Tree	if ( x < NUMBER_CONSTANT && prev != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

150
Tree	if ( x < NUMBER_CONSTANT && prev > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 5

151
Tree	if ( x < NUMBER_CONSTANT && x >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

152
Tree	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

153
Tree	if ( x == NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

154
Tree	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

155
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

156
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

157
Tree	if ( MathUtils.TWO_PI . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( MathUtils.TWO_PI . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Distance : 8

158
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add () ; add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add () ; add ( STRING_CONSTANT ) ; }
Distance : 9

159
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

160
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

161
Tree	if ( x == NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

162
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add () ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add () ; }
Distance : 9

163
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

164
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

165
Tree	if ( x < NUMBER_CONSTANT && x >= prev . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 9

166
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; null }
Distance : 9

167
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

168
Tree	if ( x.length . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x.length . add () && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 8

169
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

170
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

171
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

172
Tree	if ( x == NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

173
Tree	if ( x == NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

174
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

175
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

176
Tree	if ( Double.MIN_VALUE . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( Double.MIN_VALUE . add () && prev != null ) { add ( STRING_CONSTANT ) ; }
Distance : 8

177
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

178
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; null }
Distance : 6

179
Tree	if ( x == NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

180
Tree	if ( x < NUMBER_CONSTANT && prev >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

181
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 8

182
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

183
Tree	if ( x == NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

184
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

185
Tree	if ( x < NUMBER_CONSTANT && x - prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

186
Tree	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && add ( STRING_CONSTANT ) && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

187
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

188
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

189
Tree	if ( x == NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

190
Tree	if ( x < NUMBER_CONSTANT && prev == prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

191
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { continue; }
Distance : 12

192
Tree	if ( x == NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

193
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

194
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 9

195
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 7

196
Tree	if ( x == NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

197
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x . CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 8

198
Tree	if ( x < NUMBER_CONSTANT && x < prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

199
Tree	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	cc = false ;
Code	cc = false ;
Distance : 7

1
Tree	cc = return; ;
Code	cc = return; ;
Distance : 7

2
Tree	listSeparator () ; Test
Code	listSeparator () ; Test
Distance : 9

3
Tree	listSeparator () ; Class
Code	listSeparator () ; Class
Distance : 9

4
Tree	cc = new emptiedClinitMethods <> () ;
Code	cc = new emptiedClinitMethods <> () ;
Distance : 7

5
Tree	this . cc = PropAccess.STRUCT ;
Code	this . cc = PropAccess.STRUCT ;
Distance : 7

6
Tree	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING , cc ) ;
Code	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING , cc ) ;
Distance : 3

7
Tree	listSeparator ( cc , listSeparator () ) ;
Code	listSeparator ( cc , listSeparator () ) ;
Distance : 6

8
Tree	finderStub.allMatchingUnverifiedChunksToReturn = false ;
Code	finderStub.allMatchingUnverifiedChunksToReturn = false ;
Distance : 8

9
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

10
Tree	cc () ;
Code	cc () ;
Distance : 7

11
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

12
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

13
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

14
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

15
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

16
Tree	cc . listSeparator ( Feature.MODULES , cc ) ;
Code	cc . listSeparator ( Feature.MODULES , cc ) ;
Distance : 3

17
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

18
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

19
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

20
Tree	Feature.MODULES . listSeparator () ;
Code	Feature.MODULES . listSeparator () ;
Distance : 7

21
Tree	new getEnums ( cc ) . listSeparator () ;
Code	new getEnums ( cc ) . listSeparator () ;
Distance : 8

22
Tree	this . cc = PropertyRenamingPolicy.ALL_UNQUOTED ;
Code	this . cc = PropertyRenamingPolicy.ALL_UNQUOTED ;
Distance : 7

23
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

24
Tree	cc = new passName ( cc ) ;
Code	cc = new passName ( cc ) ;
Distance : 6

25
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

26
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

27
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

28
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

29
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

30
Tree	. . listSeparator ( NUMBER_CONSTANT ) ;
Code	. . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 5

31
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

32
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

33
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

34
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

35
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

36
Tree	listSeparator ( new NoResolvedType ( cc ) ) ;
Code	listSeparator ( new NoResolvedType ( cc ) ) ;
Distance : 7

37
Tree	. ( cc , listSeparator () ) ;
Code	. ( cc , listSeparator () ) ;
Distance : 5

38
Tree	this . cc = . ;
Code	this . cc = . ;
Distance : 7

39
Tree	cc . listSeparator ( new ; () ) ;
Code	cc . listSeparator ( new ; () ) ;
Distance : 4

40
Tree	cc = new ExceptionWithCause ( cc ) ;
Code	cc = new ExceptionWithCause ( cc ) ;
Distance : 6

41
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

42
Tree	this . cc = . ;
Code	this . cc = . ;
Distance : 7

43
Tree	current.parent . listSeparator () ;
Code	current.parent . listSeparator () ;
Distance : 7

44
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

45
Tree	listSeparator ( true ) ;
Code	listSeparator ( true ) ;
Distance : 5

46
Tree	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , cc ) ;
Code	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , cc ) ;
Distance : 3

47
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

48
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

49
Tree	cc . listSeparator ( cc , () ) ;
Code	cc . listSeparator ( cc , () ) ;
Distance : 3

50
Tree	cc . listSeparator ( cc , () ) ;
Code	cc . listSeparator ( cc , () ) ;
Distance : 3

51
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

52
Tree	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Code	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Distance : 4

53
Tree	cc = PropAccess.STRUCT ;
Code	cc = PropAccess.STRUCT ;
Distance : 7

54
Tree	cc . listSeparator ( cc , new Random ( cc ) ) ;
Code	cc . listSeparator ( cc , new Random ( cc ) ) ;
Distance : 7

55
Tree	cc = false ;
Code	cc = false ;
Distance : 7

56
Tree	cc = mant.length ;
Code	cc = mant.length ;
Distance : 7

57
Tree	listSeparator ( features.mockedType ) ;
Code	listSeparator ( features.mockedType ) ;
Distance : 6

58
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

59
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

60
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

61
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

62
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

63
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

64
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

65
Tree	cc . listSeparator ( Feature.MODULES , cc ) ;
Code	cc . listSeparator ( Feature.MODULES , cc ) ;
Distance : 3

66
Tree	cc = true ;
Code	cc = true ;
Distance : 6

67
Tree	new listSeparator () . listSeparator () ;
Code	new listSeparator () . listSeparator () ;
Distance : 8

68
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

69
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

70
Tree	cc . listSeparator ( Feature.MODULES ) ;
Code	cc . listSeparator ( Feature.MODULES ) ;
Distance : 4

71
Tree	listSeparator ( NUMBER_CONSTANT ) ;
Code	listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

72
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

73
Tree	listSeparator ( STRING_CONSTANT ) ; Test
Code	listSeparator ( STRING_CONSTANT ) ; Test
Distance : 7

74
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

75
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

76
Tree	this . cc = coefficients.length ;
Code	this . cc = coefficients.length ;
Distance : 7

77
Tree	new PomComparator ( cc ) . listSeparator () ;
Code	new PomComparator ( cc ) . listSeparator () ;
Distance : 8

78
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

79
Tree	finderStub.allMatchingUnverifiedChunksToReturn . listSeparator () ;
Code	finderStub.allMatchingUnverifiedChunksToReturn . listSeparator () ;
Distance : 7

80
Tree	cc = new emptiedClinitMethods ( cc ) ;
Code	cc = new emptiedClinitMethods ( cc ) ;
Distance : 6

81
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

82
Tree	cc = new UnicodeUnescaper ( cc ) ;
Code	cc = new UnicodeUnescaper ( cc ) ;
Distance : 6

83
Tree	cc () ; Class
Code	cc () ; Class
Distance : 8

84
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

85
Tree	passes ;
Code	passes ;
Distance : 8

86
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

87
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

88
Tree	listSeparator ( Feature.MODULES ) ;
Code	listSeparator ( Feature.MODULES ) ;
Distance : 6

89
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

90
Tree	listSeparator ( new StreamDataAdapter ( cc ) ) ;
Code	listSeparator ( new StreamDataAdapter ( cc ) ) ;
Distance : 7

91
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

92
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

93
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

94
Tree	listSeparator ( NUMBER_CONSTANT ) ;
Code	listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

95
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

96
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

97
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

98
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

99
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

100
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

101
Tree	cc . listSeparator ( super(); ) ;
Code	cc . listSeparator ( super(); ) ;
Distance : 4

102
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

103
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

104
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

105
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

106
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

107
Tree	listSeparator ( new ArrayList ( cc ) ) ;
Code	listSeparator ( new ArrayList ( cc ) ) ;
Distance : 7

108
Tree	cc = coefficients.length ;
Code	cc = coefficients.length ;
Distance : 7

109
Tree	listSeparator ( ObjectUtils.NULL ) ;
Code	listSeparator ( ObjectUtils.NULL ) ;
Distance : 6

110
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

111
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

112
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

113
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

114
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

115
Tree	cc = true ;
Code	cc = true ;
Distance : 6

116
Tree	this . cc = PropertyCollapseLevel.NONE ;
Code	this . cc = PropertyCollapseLevel.NONE ;
Distance : 7

117
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

118
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

119
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

120
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	cc . listSeparator ( new ; () ) ;
Code	cc . listSeparator ( new ; () ) ;
Distance : 4

122
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

123
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

124
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

125
Tree	cc . listSeparator ( cc , new VanishingToLeaf ( cc ) ) ;
Code	cc . listSeparator ( cc , new VanishingToLeaf ( cc ) ) ;
Distance : 7

126
Tree	cc = new UnicodeUnescaper <> () ;
Code	cc = new UnicodeUnescaper <> () ;
Distance : 7

127
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

128
Tree	current.parent = false ;
Code	current.parent = false ;
Distance : 8

129
Tree	cc = JsDocToken.PIPE ;
Code	cc = JsDocToken.PIPE ;
Distance : 7

130
Tree	listSeparator ( e.lineNumber ) ;
Code	listSeparator ( e.lineNumber ) ;
Distance : 6

131
Tree	emptiedClinitMethods ;
Code	emptiedClinitMethods ;
Distance : 8

132
Tree	validateFeature ;
Code	validateFeature ;
Distance : 8

133
Tree	cc () ;
Code	cc () ;
Distance : 7

134
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

135
Tree	Feature.MODULES = false ;
Code	Feature.MODULES = false ;
Distance : 8

136
Tree	cc = new passName <> () ;
Code	cc = new passName <> () ;
Distance : 7

137
Tree	cc = new ExceptionWithCause <> () ;
Code	cc = new ExceptionWithCause <> () ;
Distance : 7

138
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

139
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

140
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

141
Tree	new UnicodeUnescaper ( cc ) . listSeparator () ;
Code	new UnicodeUnescaper ( cc ) . listSeparator () ;
Distance : 8

142
Tree	cc . listSeparator ( cc , new Random ( cc ) ) ;
Code	cc . listSeparator ( cc , new Random ( cc ) ) ;
Distance : 7

143
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

144
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

145
Tree	emptiedClinitMethods = false ;
Code	emptiedClinitMethods = false ;
Distance : 8

146
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

147
Tree	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) ;
Code	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) ;
Distance : 4

148
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 6

149
Tree	listSeparator ( cc , listSeparator () ) ;
Code	listSeparator ( cc , listSeparator () ) ;
Distance : 6

150
Tree	cc () ;
Code	cc () ;
Distance : 7

151
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

152
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

153
Tree	cc ( cc . listSeparator () ) ;
Code	cc ( cc . listSeparator () ) ;
Distance : 6

154
Tree	new ObjectStreamClass ( cc ) . listSeparator () ;
Code	new ObjectStreamClass ( cc ) . listSeparator () ;
Distance : 8

155
Tree	. . listSeparator ( NUMBER_CONSTANT ) ;
Code	. . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 5

156
Tree	cc ( cc , listSeparator () ) ;
Code	cc ( cc , listSeparator () ) ;
Distance : 5

157
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

158
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

159
Tree	listSeparator ( NUMBER_CONSTANT ) ; Test
Code	listSeparator ( NUMBER_CONSTANT ) ; Test
Distance : 7

160
Tree	cc ;
Code	cc ;
Distance : 7

161
Tree	cc = null ;
Code	cc = null ;
Distance : 7

162
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

163
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

164
Tree	listSeparator ( STRING_CONSTANT ) ; Class
Code	listSeparator ( STRING_CONSTANT ) ; Class
Distance : 7

165
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

166
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

167
Tree	cc () ; Test
Code	cc () ; Test
Distance : 8

168
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 6

169
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

170
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

171
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

172
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

173
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

174
Tree	cc . listSeparator ( cc , new Es6SyntacticScopeCreator ( cc ) ) ;
Code	cc . listSeparator ( cc , new Es6SyntacticScopeCreator ( cc ) ) ;
Distance : 7

175
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

176
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

177
Tree	listSeparator ( true ) ;
Code	listSeparator ( true ) ;
Distance : 5

178
Tree	listSeparator ( NUMBER_CONSTANT ) ; Class
Code	listSeparator ( NUMBER_CONSTANT ) ; Class
Distance : 7

179
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

180
Tree	. ( cc , cc ) ;
Code	. ( cc , cc ) ;
Distance : 4

181
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

182
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

183
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

184
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

185
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

186
Tree	cc . listSeparator ( Feature.MODULES ) ;
Code	cc . listSeparator ( Feature.MODULES ) ;
Distance : 4

187
Tree	cc = super(); ;
Code	cc = super(); ;
Distance : 7

188
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

189
Tree	listSeparator ( cc , () ) ;
Code	listSeparator ( cc , () ) ;
Distance : 5

190
Tree	listSeparator ( new getEnums ( cc ) ) ;
Code	listSeparator ( new getEnums ( cc ) ) ;
Distance : 7

191
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

192
Tree	emptiedClinitMethods . listSeparator () ;
Code	emptiedClinitMethods . listSeparator () ;
Distance : 7

193
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

194
Tree	listSeparator ( listSeparator () , cc . () () ) ;
Code	listSeparator ( listSeparator () , cc . () () ) ;
Distance : 9

195
Tree	cc = continue; ;
Code	cc = continue; ;
Distance : 7

196
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

197
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

198
Tree	cc . listSeparator ( cc , cc . () () ) ;
Code	cc . listSeparator ( cc , cc . () () ) ;
Distance : 6

199
Tree	listSeparator ( cc , () ) ;
Code	listSeparator ( cc , () ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	typesIndexedByProperty . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Code	typesIndexedByProperty . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Distance : 8

1
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Distance : 8

2
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Distance : 6

3
Tree	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

4
Tree	options.dependencyOptions < Rule
Code	options.dependencyOptions < Rule
Distance : 5

5
Tree	objectMethodsGuru . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Code	objectMethodsGuru . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Distance : 8

6
Tree	oldRoot . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Code	oldRoot . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Distance : 8

7
Tree	findDeps . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Distance : 8

8
Tree	options.dependencyOptions < Scope
Code	options.dependencyOptions < Scope
Distance : 5

9
Tree	null != SIZE_THRESHOLD . needsManagement ( null )
Code	null != SIZE_THRESHOLD . needsManagement ( null )
Distance : 6

10
Tree	null != isDotPrototype . options.skipAllPasses ( null )
Code	null != isDotPrototype . options.skipAllPasses ( null )
Distance : 7

11
Tree	objectMethodsGuru && currentScript . needsManagement ( grandParent . class ) && ^
Code	objectMethodsGuru && currentScript . needsManagement ( grandParent . class ) && ^
Distance : 9

12
Tree	findDeps + STRING_CONSTANT
Code	findDeps + STRING_CONSTANT
Distance : 6

13
Tree	oldRoot < Scope + STRING_CONSTANT
Code	oldRoot < Scope + STRING_CONSTANT
Distance : 6

14
Tree	objectMethodsGuru < Scope + STRING_CONSTANT
Code	objectMethodsGuru < Scope + STRING_CONSTANT
Distance : 6

15
Tree	typesIndexedByProperty < Scope + STRING_CONSTANT
Code	typesIndexedByProperty < Scope + STRING_CONSTANT
Distance : 6

16
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

17
Tree	objectMethodsGuru && currentScript . options.closurePass ( null ) && ^
Code	objectMethodsGuru && currentScript . options.closurePass ( null ) && ^
Distance : 8

18
Tree	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

19
Tree	options.dependencyOptions < Rule == NUMBER_CONSTANT
Code	options.dependencyOptions < Rule == NUMBER_CONSTANT
Distance : 5

20
Tree	this . runSmartNameRemoval . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

21
Tree	options.dependencyOptions < Scope == NUMBER_CONSTANT
Code	options.dependencyOptions < Scope == NUMBER_CONSTANT
Distance : 5

22
Tree	this . subtypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . subtypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

23
Tree	this . negativeItemLabelPositionMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

24
Tree	objectMethodsGuru . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

25
Tree	null != this . outlineVisible . needsManagement () == NUMBER_CONSTANT
Code	null != this . outlineVisible . needsManagement () == NUMBER_CONSTANT
Distance : 7

26
Tree	oldRoot . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

27
Tree	typesIndexedByProperty . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

28
Tree	this . negativeItemLabelPositionMap . needsManagement () + success == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . needsManagement () + success == NUMBER_CONSTANT
Distance : 7

29
Tree	null != this . outlineVisible . needsManagement ( path , this . minimum )
Code	null != this . outlineVisible . needsManagement ( path , this . minimum )
Distance : 12

30
Tree	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

31
Tree	this . sectionOutlineStrokeMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Distance : 12

32
Tree	findDeps > transformed + STRING_CONSTANT
Code	findDeps > transformed + STRING_CONSTANT
Distance : 6

33
Tree	options.dependencyOptions != null == NUMBER_CONSTANT
Code	options.dependencyOptions != null == NUMBER_CONSTANT
Distance : 5

34
Tree	null != this . emptyAsNull . needsManagement () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . needsManagement () == NUMBER_CONSTANT
Distance : 7

35
Tree	options.dependencyOptions < String
Code	options.dependencyOptions < String
Distance : 5

36
Tree	null != this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Code	null != this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Distance : 7

37
Tree	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Code	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Distance : 6

38
Tree	this . sectionOutlineStrokeMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

39
Tree	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Code	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Distance : 6

40
Tree	oldRoot / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

41
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 5

42
Tree	null != isDateType . needsManagement ( null )
Code	null != isDateType . needsManagement ( null )
Distance : 6

43
Tree	null != anyStringNull . options.skipAllPasses ( null )
Code	null != anyStringNull . options.skipAllPasses ( null )
Distance : 7

44
Tree	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

45
Tree	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Code	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

46
Tree	typesIndexedByProperty > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Code	typesIndexedByProperty > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Distance : 7

47
Tree	findDeps > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Code	findDeps > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Distance : 7

48
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Distance : 8

49
Tree	oldRoot . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript . class ) < NUMBER_CONSTANT
Distance : 8

50
Tree	this . negativeItemLabelPositionMap == null == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap == null == NUMBER_CONSTANT
Distance : 6

51
Tree	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

52
Tree	this . runSmartNameRemoval . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Code	this . runSmartNameRemoval . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Distance : 12

53
Tree	objectMethodsGuru + STRING_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT
Distance : 6

54
Tree	this . runSmartNameRemoval . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

55
Tree	oldRoot + STRING_CONSTANT
Code	oldRoot + STRING_CONSTANT
Distance : 6

56
Tree	oldRoot && currentScript . options.closurePass ( null ) && ^
Code	oldRoot && currentScript . options.closurePass ( null ) && ^
Distance : 8

57
Tree	typesIndexedByProperty && currentScript . && ( null ) && ^
Code	typesIndexedByProperty && currentScript . && ( null ) && ^
Distance : 8

58
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

59
Tree	this . subtypes . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Code	this . subtypes . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Distance : 12

60
Tree	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

61
Tree	findDeps / ctorType == NUMBER_CONSTANT
Code	findDeps / ctorType == NUMBER_CONSTANT
Distance : 6

62
Tree	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

63
Tree	this . sectionOutlineStrokeMap == null == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap == null == NUMBER_CONSTANT
Distance : 6

64
Tree	this . runSmartNameRemoval == null == NUMBER_CONSTANT
Code	this . runSmartNameRemoval == null == NUMBER_CONSTANT
Distance : 6

65
Tree	this . subtypes == null == NUMBER_CONSTANT
Code	this . subtypes == null == NUMBER_CONSTANT
Distance : 6

66
Tree	options.dependencyOptions < Feature
Code	options.dependencyOptions < Feature
Distance : 5

67
Tree	findDeps . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

68
Tree	null != this . isLiteralObject . needsManagement () == NUMBER_CONSTANT
Code	null != this . isLiteralObject . needsManagement () == NUMBER_CONSTANT
Distance : 7

69
Tree	options.dependencyOptions < String == NUMBER_CONSTANT
Code	options.dependencyOptions < String == NUMBER_CONSTANT
Distance : 5

70
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) + maxUlps
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) + maxUlps
Distance : 8

71
Tree	findDeps . needsManagement ( currentScript . class ) + maxUlps
Code	findDeps . needsManagement ( currentScript . class ) + maxUlps
Distance : 8

72
Tree	objectMethodsGuru . needsManagement ( null ) + isLiteralObject
Code	objectMethodsGuru . needsManagement ( null ) + isLiteralObject
Distance : 6

73
Tree	oldRoot . needsManagement ( null ) + isLiteralObject
Code	oldRoot . needsManagement ( null ) + isLiteralObject
Distance : 6

74
Tree	oldRoot / ctorType == NUMBER_CONSTANT
Code	oldRoot / ctorType == NUMBER_CONSTANT
Distance : 6

75
Tree	objectMethodsGuru / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

76
Tree	typesIndexedByProperty / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

77
Tree	findDeps / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps / ctorType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

78
Tree	null != isDateType . needsManagement ( path . class )
Code	null != isDateType . needsManagement ( path . class )
Distance : 8

79
Tree	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

80
Tree	null != anyStringNull . needsManagement ( path . class )
Code	null != anyStringNull . needsManagement ( path . class )
Distance : 8

81
Tree	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

82
Tree	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

83
Tree	findDeps < Scope + STRING_CONSTANT
Code	findDeps < Scope + STRING_CONSTANT
Distance : 6

84
Tree	this . sectionOutlineStrokeMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

85
Tree	objectMethodsGuru > transformed + STRING_CONSTANT
Code	objectMethodsGuru > transformed + STRING_CONSTANT
Distance : 6

86
Tree	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

87
Tree	objectMethodsGuru . needsManagement ( ( Path [] ) null ) == super
Code	objectMethodsGuru . needsManagement ( ( Path [] ) null ) == super
Distance : 10

88
Tree	typesIndexedByProperty > transformed + STRING_CONSTANT
Code	typesIndexedByProperty > transformed + STRING_CONSTANT
Distance : 6

89
Tree	oldRoot > transformed + STRING_CONSTANT
Code	oldRoot > transformed + STRING_CONSTANT
Distance : 6

90
Tree	oldRoot . needsManagement ( null ) < >=
Code	oldRoot . needsManagement ( null ) < >=
Distance : 6

91
Tree	this . sectionOutlineStrokeMap . needsManagement () + success == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . needsManagement () + success == NUMBER_CONSTANT
Distance : 7

92
Tree	this . sectionOutlineStrokeMap != !
Code	this . sectionOutlineStrokeMap != !
Distance : 5

93
Tree	findDeps . needsManagement ( null ) < >=
Code	findDeps . needsManagement ( null ) < >=
Distance : 6

94
Tree	null != this . enumLiteralHasKey . needsManagement ( path , this . minimum )
Code	null != this . enumLiteralHasKey . needsManagement ( path , this . minimum )
Distance : 12

95
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

96
Tree	this . negativeItemLabelPositionMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT
Distance : 12

97
Tree	null != isDotPrototype . needsManagement ( path . class )
Code	null != isDotPrototype . needsManagement ( path . class )
Distance : 8

98
Tree	this . negativeItemLabelPositionMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

99
Tree	objectMethodsGuru . needsManagement ( ( currentScript ) null ) == super
Code	objectMethodsGuru . needsManagement ( ( currentScript ) null ) == super
Distance : 9

100
Tree	oldRoot . needsManagement ( ( currentScript ) null ) == super
Code	oldRoot . needsManagement ( ( currentScript ) null ) == super
Distance : 9

101
Tree	findDeps . needsManagement ( null ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

102
Tree	typesIndexedByProperty . needsManagement ( null ) < >=
Code	typesIndexedByProperty . needsManagement ( null ) < >=
Distance : 6

103
Tree	null != SIZE_THRESHOLD . needsManagement ( path . class )
Code	null != SIZE_THRESHOLD . needsManagement ( path . class )
Distance : 8

104
Tree	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

105
Tree	options.dependencyOptions == null == NUMBER_CONSTANT
Code	options.dependencyOptions == null == NUMBER_CONSTANT
Distance : 5

106
Tree	typesIndexedByProperty . needsManagement ( null ) + isLiteralObject
Code	typesIndexedByProperty . needsManagement ( null ) + isLiteralObject
Distance : 6

107
Tree	findDeps && currentScript . options.closurePass ( null ) && ^
Code	findDeps && currentScript . options.closurePass ( null ) && ^
Distance : 8

108
Tree	null != this . emptyAsNull . needsManagement ( path , this . minimum )
Code	null != this . emptyAsNull . needsManagement ( path , this . minimum )
Distance : 12

109
Tree	objectMethodsGuru . needsManagement ( null ) + isDefinedInSrc
Code	objectMethodsGuru . needsManagement ( null ) + isDefinedInSrc
Distance : 6

110
Tree	objectMethodsGuru . needsManagement ( null ) < >=
Code	objectMethodsGuru . needsManagement ( null ) < >=
Distance : 6

111
Tree	this . negativeItemLabelPositionMap != !
Code	this . negativeItemLabelPositionMap != !
Distance : 5

112
Tree	this . runSmartNameRemoval . needsManagement () + success == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . needsManagement () + success == NUMBER_CONSTANT
Distance : 7

113
Tree	null != this . emptyAsNull . needsManagement ( path , this . BOOLEAN_TYPE )
Code	null != this . emptyAsNull . needsManagement ( path , this . BOOLEAN_TYPE )
Distance : 12

114
Tree	objectMethodsGuru && currentScript . && ( grandParent . class )
Code	objectMethodsGuru && currentScript . && ( grandParent . class )
Distance : 9

115
Tree	oldRoot && currentScript . options.skipAllPasses ( grandParent . class )
Code	oldRoot && currentScript . options.skipAllPasses ( grandParent . class )
Distance : 9

116
Tree	typesIndexedByProperty && currentScript . && ( grandParent . class )
Code	typesIndexedByProperty && currentScript . && ( grandParent . class )
Distance : 9

117
Tree	findDeps && currentScript . options.skipAllPasses ( grandParent . class )
Code	findDeps && currentScript . options.skipAllPasses ( grandParent . class )
Distance : 9

118
Tree	typesIndexedByProperty && currentScript . options.skipAllPasses ( null )
Code	typesIndexedByProperty && currentScript . options.skipAllPasses ( null )
Distance : 7

119
Tree	options.dependencyOptions < Feature == NUMBER_CONSTANT
Code	options.dependencyOptions < Feature == NUMBER_CONSTANT
Distance : 5

120
Tree	findDeps && currentScript . options.skipAllPasses ( null )
Code	findDeps && currentScript . options.skipAllPasses ( null )
Distance : 7

121
Tree	null != options.closurePass . needsManagement ()
Code	null != options.closurePass . needsManagement ()
Distance : 5

122
Tree	this . subtypes . needsManagement () + success == NUMBER_CONSTANT
Code	this . subtypes . needsManagement () + success == NUMBER_CONSTANT
Distance : 7

123
Tree	options.dependencyOptions == super(); == NUMBER_CONSTANT
Code	options.dependencyOptions == super(); == NUMBER_CONSTANT
Distance : 5

124
Tree	options.dependencyOptions != return;
Code	options.dependencyOptions != return;
Distance : 5

125
Tree	options.dependencyOptions == break; == NUMBER_CONSTANT
Code	options.dependencyOptions == break; == NUMBER_CONSTANT
Distance : 5

126
Tree	objectMethodsGuru * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Code	objectMethodsGuru * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Distance : 7

127
Tree	options.dependencyOptions != return; == NUMBER_CONSTANT
Code	options.dependencyOptions != return; == NUMBER_CONSTANT
Distance : 5

128
Tree	needsManagement ( && ) == options.closurePass . needsManagement ()
Code	needsManagement ( && ) == options.closurePass . needsManagement ()
Distance : 8

129
Tree	needsManagement ( && ) == options.closurePass . options.closurePass () class
Code	needsManagement ( && ) == options.closurePass . options.closurePass () class
Distance : 9

130
Tree	oldRoot * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Code	oldRoot * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Distance : 7

131
Tree	typesIndexedByProperty * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Code	typesIndexedByProperty * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Distance : 7

132
Tree	options.dependencyOptions != super(); == NUMBER_CONSTANT
Code	options.dependencyOptions != super(); == NUMBER_CONSTANT
Distance : 5

133
Tree	needsManagement ( && ) == options.closurePass . needsManagement () notifyListeners
Code	needsManagement ( && ) == options.closurePass . needsManagement () notifyListeners
Distance : 8

134
Tree	findDeps * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Code	findDeps * this . enumLiteralHasKey . needsManagement () == NUMBER_CONSTANT
Distance : 7

135
Tree	needsManagement ( && ) == options.closurePass . needsManagement () array
Code	needsManagement ( && ) == options.closurePass . needsManagement () array
Distance : 8

136
Tree	options.dependencyOptions != super();
Code	options.dependencyOptions != super();
Distance : 5

137
Tree	options.dependencyOptions == return; == NUMBER_CONSTANT
Code	options.dependencyOptions == return; == NUMBER_CONSTANT
Distance : 5

138
Tree	return; != options.closurePass . needsManagement ()
Code	return; != options.closurePass . needsManagement ()
Distance : 5

139
Tree	objectMethodsGuru . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Code	objectMethodsGuru . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Distance : 8

140
Tree	. () &&
Code	. () &&
Distance : 3

141
Tree	super(); != options.closurePass . needsManagement ()
Code	super(); != options.closurePass . needsManagement ()
Distance : 5

142
Tree	options.dependencyOptions != break;
Code	options.dependencyOptions != break;
Distance : 5

143
Tree	this . sectionOutlineStrokeMap . needsManagement () == options.closurePass . options.closurePass ()
Code	this . sectionOutlineStrokeMap . needsManagement () == options.closurePass . options.closurePass ()
Distance : 7

144
Tree	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Code	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

145
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Distance : 6

146
Tree	null != isDateType . needsManagement ( path , options.closurePass , maxUlps , options.closurePass )
Code	null != isDateType . needsManagement ( path , options.closurePass , maxUlps , options.closurePass )
Distance : 11

147
Tree	options.dependencyOptions ! && array
Code	options.dependencyOptions ! && array
Distance : 4

148
Tree	typesIndexedByProperty + STRING_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT
Distance : 6

149
Tree	oldRoot && currentScript . && ( grandParent . class ) && ^
Code	oldRoot && currentScript . && ( grandParent . class ) && ^
Distance : 10

150
Tree	null != anyStringNull . needsManagement ( path , options.closurePass , maxUlps , options.closurePass )
Code	null != anyStringNull . needsManagement ( path , options.closurePass , maxUlps , options.closurePass )
Distance : 11

151
Tree	oldRoot . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Code	oldRoot . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Distance : 8

152
Tree	null != isDotPrototype . needsManagement ( path , options.closurePass , maxUlps , options.closurePass )
Code	null != isDotPrototype . needsManagement ( path , options.closurePass , maxUlps , options.closurePass )
Distance : 11

153
Tree	options.dependencyOptions () && class
Code	options.dependencyOptions () && class
Distance : 3

154
Tree	null != SIZE_THRESHOLD . && ( path , options.closurePass , maxUlps , options.closurePass )
Code	null != SIZE_THRESHOLD . && ( path , options.closurePass , maxUlps , options.closurePass )
Distance : 12

155
Tree	options.dependencyOptions && && notifyListeners
Code	options.dependencyOptions && && notifyListeners
Distance : 4

156
Tree	objectMethodsGuru && currentScript . options.skipAllPasses ( null )
Code	objectMethodsGuru && currentScript . options.skipAllPasses ( null )
Distance : 7

157
Tree	typesIndexedByProperty . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Code	typesIndexedByProperty . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Distance : 8

158
Tree	oldRoot && currentScript . && ( null )
Code	oldRoot && currentScript . && ( null )
Distance : 7

159
Tree	this . subtypes . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . subtypes . needsManagement ( path , this . minimum ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

160
Tree	objectMethodsGuru . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Distance : 11

161
Tree	oldRoot . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Distance : 11

162
Tree	options.dependencyOptions != break; == NUMBER_CONSTANT
Code	options.dependencyOptions != break; == NUMBER_CONSTANT
Distance : 5

163
Tree	typesIndexedByProperty . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Distance : 11

164
Tree	findDeps . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript , options.closurePass , maxUlps , options.closurePass ) > NUMBER_CONSTANT
Distance : 11

165
Tree	findDeps . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Code	findDeps . needsManagement ( currentScript ) == options.closurePass . options.closurePass ()
Distance : 8

166
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Distance : 6

167
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT class
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT class
Distance : 5

168
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT array
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT array
Distance : 5

169
Tree	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT array
Code	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT array
Distance : 6

170
Tree	findDeps . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Code	findDeps . needsManagement ( currentScript ) + options.closurePass . options.closurePass ()
Distance : 8

171
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

172
Tree	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

173
Tree	this . runSmartNameRemoval != !
Code	this . runSmartNameRemoval != !
Distance : 5

174
Tree	this . subtypes != !
Code	this . subtypes != !
Distance : 5

175
Tree	this . runSmartNameRemoval . needsManagement () == options.closurePass . options.skipAllPasses ()
Code	this . runSmartNameRemoval . needsManagement () == options.closurePass . options.skipAllPasses ()
Distance : 7

176
Tree	this . subtypes . needsManagement () == options.closurePass . options.skipAllPasses ()
Code	this . subtypes . needsManagement () == options.closurePass . options.skipAllPasses ()
Distance : 7

177
Tree	this . negativeItemLabelPositionMap . needsManagement () == options.closurePass . options.skipAllPasses ()
Code	this . negativeItemLabelPositionMap . needsManagement () == options.closurePass . options.skipAllPasses ()
Distance : 7

178
Tree	continue; != options.closurePass . needsManagement ()
Code	continue; != options.closurePass . needsManagement ()
Distance : 5

179
Tree	typesIndexedByProperty && currentScript . options.closurePass ( grandParent . class ) && ^
Code	typesIndexedByProperty && currentScript . options.closurePass ( grandParent . class ) && ^
Distance : 10

180
Tree	findDeps && currentScript . options.closurePass ( grandParent . class ) && ^
Code	findDeps && currentScript . options.closurePass ( grandParent . class ) && ^
Distance : 10

181
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) + maxUlps
Code	objectMethodsGuru . needsManagement ( currentScript . class ) + maxUlps
Distance : 8

182
Tree	oldRoot . needsManagement ( currentScript . class ) + maxUlps
Code	oldRoot . needsManagement ( currentScript . class ) + maxUlps
Distance : 8

183
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) < ^
Code	objectMethodsGuru . needsManagement ( currentScript . class ) < ^
Distance : 8

184
Tree	oldRoot . needsManagement ( currentScript . class ) < ^
Code	oldRoot . needsManagement ( currentScript . class ) < ^
Distance : 8

185
Tree	typesIndexedByProperty . needsManagement ( ( currentScript ) null ) == super
Code	typesIndexedByProperty . needsManagement ( ( currentScript ) null ) == super
Distance : 9

186
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) < ^
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) < ^
Distance : 8

187
Tree	findDeps . needsManagement ( ( currentScript ) null ) == super
Code	findDeps . needsManagement ( ( currentScript ) null ) == super
Distance : 9

188
Tree	findDeps . needsManagement ( currentScript . class ) < ^
Code	findDeps . needsManagement ( currentScript . class ) < ^
Distance : 8

189
Tree	objectMethodsGuru > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Code	objectMethodsGuru > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Distance : 7

190
Tree	oldRoot > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Code	oldRoot > this . enumLiteralHasKey . needsManagement () > NUMBER_CONSTANT
Distance : 7

191
Tree	oldRoot . needsManagement ( ( Path [] ) null ) == super
Code	oldRoot . needsManagement ( ( Path [] ) null ) == super
Distance : 10

192
Tree	typesIndexedByProperty . needsManagement ( ( Path [] ) null ) == super
Code	typesIndexedByProperty . needsManagement ( ( Path [] ) null ) == super
Distance : 10

193
Tree	findDeps . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( null ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

194
Tree	findDeps . needsManagement ( ( Path [] ) null ) == super
Code	findDeps . needsManagement ( ( Path [] ) null ) == super
Distance : 10

195
Tree	options.dependencyOptions != null
Code	options.dependencyOptions != null
Distance : 5

196
Tree	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT class
Code	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT class
Distance : 6

197
Tree	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT notifyListeners
Code	NUMBER_CONSTANT + NUMBER_CONSTANT == NUMBER_CONSTANT notifyListeners
Distance : 6

198
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Distance : 6

199
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT notifyListeners
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT notifyListeners
Distance : 5

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

1
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Distance : 5

2
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 11

3
Tree	{ externs . traverse ( compiler ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ externs . traverse ( compiler ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 11

4
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 6

5
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , ! ) ; }
Distance : 8

6
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

7
Tree	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( externs ) , false ) ; }
Distance : 7

8
Tree	( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ;
Code	( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ;
Distance : 7

9
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 10

10
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 6

11
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( externs ) ; }
Distance : 5

12
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Distance : 5

13
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Distance : 8

14
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 6

15
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , ! ) ; }
Distance : 8

16
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Distance : 5

17
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Distance : 5

18
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; }
Distance : 5

19
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Distance : 9

20
Tree	{ compiler . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) , null ) ; }
Distance : 12

21
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 10

22
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , false ) ; }
Distance : 7

23
Tree	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 3

24
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Distance : 6

25
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( root ) ; }
Distance : 6

26
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

27
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 4

28
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

29
Tree	{ externs . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , root , root ) ) ; }
Code	{ externs . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , root , root ) ) ; }
Distance : 15

30
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Distance : 8

31
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

32
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

33
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

34
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , externs , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , externs , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 14

35
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 6

36
Tree	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 10

37
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Distance : 9

38
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Distance : 5

39
Tree	( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ;
Code	( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ;
Distance : 7

40
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

41
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

42
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) ) ; }
Distance : 12

43
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Distance : 7

44
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . traverse ( root ) ; }
Distance : 5

45
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

46
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 6

47
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Distance : 5

48
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) ) ; }
Distance : 13

49
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , ! ) ; }
Distance : 8

50
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , false ) ; }
Distance : 7

51
Tree	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

52
Tree	{ compiler . traverse ( compiler ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ compiler . traverse ( compiler ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 11

53
Tree	{ traverseRoots ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverseRoots ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

54
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) ) ; }
Distance : 12

55
Tree	{ compiler . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

56
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

57
Tree	{ externs . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ externs . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

58
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

59
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Distance : 5

60
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , null ) ; }
Distance : 10

61
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( true ) ) ; }
Distance : 10

62
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( externs ) ; }
Distance : 6

63
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

64
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , ! ) ; }
Distance : 8

65
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Distance : 10

66
Tree	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 3

67
Tree	{ externs . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) , null ) ; }
Distance : 12

68
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( externs ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( externs ) , null ) ; }
Distance : 9

69
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Distance : 6

70
Tree	{ compiler . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) , null ) ; }
Code	{ compiler . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) , null ) ; }
Distance : 11

71
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( root ) ; }
Distance : 5

72
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Distance : 9

73
Tree	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverse ( root ) ; }
Distance : 4

74
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Distance : 6

75
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( root , null , false ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( root , null , false ) , root , root , root ) , null ) ; }
Distance : 16

76
Tree	{ externs . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) , null ) ; }
Code	{ externs . traverse ( ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) , null ) ; }
Distance : 11

77
Tree	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

78
Tree	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverse ( root , root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverse ( root , root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 13

79
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , false ) , super ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , false ) , super ) ; }
Distance : 11

80
Tree	{ compiler . traverse ( compiler . traverse ( JSTypeNative.NO_RESOLVED_TYPE ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( JSTypeNative.NO_RESOLVED_TYPE ) , null ) ; }
Distance : 11

81
Tree	{ externs . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

82
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 11

83
Tree	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( externs , this , root ) ) ; }
Code	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( externs , this , root ) ) ; }
Distance : 12

84
Tree	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

85
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root , root ) ) ; }
Distance : 9

86
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Distance : 6

87
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Distance : 5

88
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

89
Tree	{ externs . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , null ) ; }
Distance : 10

90
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

91
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

92
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , false ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , false ) ; }
Distance : 5

93
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

94
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Distance : 6

95
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

96
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Distance : 7

97
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

98
Tree	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , ! ) ; }
Distance : 8

99
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , null ) ; }
Distance : 9

100
Tree	{ ( new NodeTraversal ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX ) ) . traverse ( root ) ; }
Distance : 6

101
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , root ) ) ; }
Distance : 13

102
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , null ) ; }
Distance : 9

103
Tree	{ compiler . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , externs , root ) ) ; }
Code	{ compiler . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , externs , root ) ) ; }
Distance : 14

104
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 9

105
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

106
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( compiler , null , false ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( compiler , null , false ) , root , root , root ) , null ) ; }
Distance : 15

107
Tree	{ compiler . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverseRoots ( null , false ) , null ) ; }
Distance : 12

108
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Distance : 5

109
Tree	{ ( new NodeTraversal ( xArray.length ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( xArray.length ) ) . traverse ( root ) ; }
Distance : 6

110
Tree	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( root , this , root ) ) ; }
Code	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( root , this , root ) ) ; }
Distance : 13

111
Tree	{ externs . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , externs , root ) ) ; }
Code	{ externs . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , externs , root ) ) ; }
Distance : 14

112
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 10

113
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 13

114
Tree	{ compiler . traverse ( compiler ) . traverseRoots ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ compiler . traverse ( compiler ) . traverseRoots ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

115
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

116
Tree	{ new NodeTraversal ( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

117
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , else ) ; }
Distance : 8

118
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

119
Tree	{ ( new NodeTraversal ( LocalizedFormats.SIMPLE_MESSAGE ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( LocalizedFormats.SIMPLE_MESSAGE ) ) . traverse ( root ) ; }
Distance : 6

120
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , externs , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , externs , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 13

121
Tree	{ externs . traverse ( traverse ( new NodeTraversal ( root , this , externs ) , root , root , root ) , null ) ; }
Code	{ externs . traverse ( traverse ( new NodeTraversal ( root , this , externs ) , root , root , root ) , null ) ; }
Distance : 15

122
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Distance : 10

123
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

124
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , false ) , ! ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , false ) , ! ) ; }
Distance : 11

125
Tree	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 13

126
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , false ) ; }
Distance : 7

127
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Distance : 6

128
Tree	{ externs . traverse ( traverse ( new NodeTraversal ( root , null , false ) , root , root , root ) , null ) ; }
Code	{ externs . traverse ( traverse ( new NodeTraversal ( root , null , false ) , root , root , root ) , null ) ; }
Distance : 16

129
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 14

130
Tree	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 10

131
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Distance : 9

132
Tree	{ compiler . traverse ( compiler . traverse ( RandomSource.WELL_19937_C ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( RandomSource.WELL_19937_C ) , null ) ; }
Distance : 11

133
Tree	{ compiler . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , root , root ) ) ; }
Code	{ compiler . traverse ( compiler ) . traverse ( new NodeTraversal ( this , STRING_CONSTANT , root , root ) ) ; }
Distance : 15

134
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 14

135
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 10

136
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 6

137
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( externs ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( externs ) ) ; }
Distance : 9

138
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 11

139
Tree	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( externs , this , externs ) ) ; }
Code	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( externs , this , externs ) ) ; }
Distance : 13

140
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root ) ) ; }
Distance : 10

141
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs ) ) ; }
Distance : 9

142
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 11

143
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , root , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , root , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 14

144
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 14

145
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs , root ) ) ; }
Distance : 8

146
Tree	{ externs . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

147
Tree	{ ( new NodeTraversal ( LocalizedFormats.INDEX_OUT_OF_RANGE ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( LocalizedFormats.INDEX_OUT_OF_RANGE ) ) . traverse ( root ) ; }
Distance : 6

148
Tree	{ externs . traverse ( compiler ) . traverseRoots ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ externs . traverse ( compiler ) . traverseRoots ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

149
Tree	{ externs . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ externs . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

150
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , false ) ; }
Distance : 7

151
Tree	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

152
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

153
Tree	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , false ) ; }
Distance : 7

154
Tree	{ compiler . traverse ( compiler . traverse ( java.util.Locale.US ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( java.util.Locale.US ) , null ) ; }
Distance : 11

155
Tree	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , compiler , compiler , false ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

156
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

157
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , else ) ; }
Distance : 8

158
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

159
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

160
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , STRING_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

161
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 11

162
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

163
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 12

164
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . traverse ( root ) ; }
Distance : 5

165
Tree	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , null , false ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , null , false ) , root , root , root ) , null ) ; }
Distance : 16

166
Tree	{ new NodeTraversal ( ConjugateGradientFormula.POLAK_RIBIERE , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( ConjugateGradientFormula.POLAK_RIBIERE , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

167
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( externs , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( externs , root ) ) ; }
Distance : 8

168
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 11

169
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

170
Tree	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , STRING_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 4

171
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

172
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Distance : 4

173
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Distance : 5

174
Tree	{ externs . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ externs . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 12

175
Tree	( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ;
Code	( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ;
Distance : 7

176
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

177
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , externs ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , externs ) , root , root , root ) , null ) ; }
Distance : 15

178
Tree	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( root , this , externs ) ) ; }
Code	{ traverse ( compiler . traverse ( compiler ) , new NodeTraversal ( root , this , externs ) ) ; }
Distance : 14

179
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( false ) ) ; }
Distance : 10

180
Tree	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

181
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Distance : 10

182
Tree	( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ;
Code	( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ;
Distance : 7

183
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

184
Tree	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( root ) , false ) ; }
Distance : 8

185
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Distance : 9

186
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

187
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , root , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , root , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 13

188
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

189
Tree	{ externs . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( externs ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , null , false ) . traverse ( externs ) , null ) ; }
Distance : 9

190
Tree	{ new NodeTraversal ( NodeTraversal , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NodeTraversal , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

191
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

192
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Distance : 10

193
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root ) ) ; }
Distance : 12

194
Tree	{ new NodeTraversal ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , NUMBER_CONSTANT , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 12

195
Tree	{ externs . traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root ) ) ; }
Code	{ externs . traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( root ) ) ; }
Distance : 12

196
Tree	{ externs . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Code	{ externs . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Distance : 12

197
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Distance : 12

198
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Distance : 12

199
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( false ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverse ( false ) ) ; }
Distance : 12

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchBody , catchBody , copyInformationFrom , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , copyInformationFrom , catchBody ) ;
Distance : 7

1
Tree	Node catchBody = catchBody . block ( this , catchBody ) ;
Code	Node catchBody = catchBody . block ( this , catchBody ) ;
Distance : 8

2
Tree	Node catchBody = block ( catchNode ( catchNode ) ) ;
Code	Node catchBody = block ( catchNode ( catchNode ) ) ;
Distance : 5

3
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

4
Tree	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Distance : 7

5
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

6
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

7
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Distance : 2

8
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , DateTimeZone.UTC ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , DateTimeZone.UTC ) ;
Distance : 7

9
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Distance : 6

10
Tree	Node catchBody = block ( obj1.props , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( obj1.props , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Distance : 5

11
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

12
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 2

13
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

14
Tree	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Distance : 7

15
Tree	Node catchBody = block ( catchBody , catchNode , false ) ;
Code	Node catchBody = block ( catchBody , catchNode , false ) ;
Distance : 7

16
Tree	Node catchBody = this . catchBody . copyInformationFrom () ;
Code	Node catchBody = this . catchBody . copyInformationFrom () ;
Distance : 7

17
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

18
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , Nullability.IMPLICIT ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , Nullability.IMPLICIT ) ;
Distance : 7

19
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

20
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

21
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

22
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

23
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

24
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

25
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

26
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

27
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

28
Tree	Node catchBody = block ( obj1.props ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( obj1.props ) . copyInformationFrom ( catchBody ) ;
Distance : 3

29
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( Node.IS_NAMESPACE ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( Node.IS_NAMESPACE ) ;
Distance : 3

30
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

31
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

32
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

33
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

34
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

35
Tree	Node catchBody = block ( catchNode , catchBody , false ) ;
Code	Node catchBody = block ( catchNode , catchBody , false ) ;
Distance : 6

36
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

37
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

38
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

39
Tree	Node catchBody = copyInformationFrom () ;
Code	Node catchBody = copyInformationFrom () ;
Distance : 8

40
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

41
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

42
Tree	Node catchBody = block ( FeatureSet.TYPESCRIPT , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( FeatureSet.TYPESCRIPT , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Distance : 5

43
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

44
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

45
Tree	Node catchBody = block ( FeatureSet.TYPESCRIPT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( FeatureSet.TYPESCRIPT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

46
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

47
Tree	Node catchBody = block ( Token.NULL , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( Token.NULL , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Distance : 5

48
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

49
Tree	Node catchBody = block ( Token.NULL ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( Token.NULL ) . copyInformationFrom ( catchBody ) ;
Distance : 3

50
Tree	Node catchBody = this . catchBody . copyInformationFrom () ;
Code	Node catchBody = this . catchBody . copyInformationFrom () ;
Distance : 7

51
Tree	Node catchBody = catchBody . block ( Token.NULL ) ;
Code	Node catchBody = catchBody . block ( Token.NULL ) ;
Distance : 6

52
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( Nullability.IMPLICIT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( Nullability.IMPLICIT ) ;
Distance : 3

53
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

54
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

55
Tree	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . copyInformationFrom () ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . copyInformationFrom () ) ;
Distance : 9

56
Tree	Node catchBody = catchBody . catchBody ( catchNode ) ;
Code	Node catchBody = catchBody . catchBody ( catchNode ) ;
Distance : 5

57
Tree	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 7

58
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

59
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

60
Tree	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

61
Tree	Node catchBody = block . block ( this , catchBody ) ;
Code	Node catchBody = block . block ( this , catchBody ) ;
Distance : 8

62
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

63
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) ) ;
Distance : 7

64
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

65
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 7

66
Tree	Node catchBody = catchBody . block ( FeatureSet.TYPESCRIPT ) ;
Code	Node catchBody = catchBody . block ( FeatureSet.TYPESCRIPT ) ;
Distance : 6

67
Tree	Node catchBody = block ( catchBody , catchBody , copyInformationFrom ) ;
Code	Node catchBody = block ( catchBody , catchBody , copyInformationFrom ) ;
Distance : 7

68
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

69
Tree	Node catchBody = catchBody . block ( Nullability.IMPLICIT ) ;
Code	Node catchBody = catchBody . block ( Nullability.IMPLICIT ) ;
Distance : 6

70
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

71
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Distance : 3

72
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 5

73
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

74
Tree	Node catchBody = block . block ( catchBody , false ) ;
Code	Node catchBody = block . block ( catchBody , false ) ;
Distance : 8

75
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

76
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 2

77
Tree	Node catchBody = catchBody . block ( this , catchNode ) ;
Code	Node catchBody = catchBody . block ( this , catchNode ) ;
Distance : 7

78
Tree	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Distance : 6

79
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

80
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Distance : 6

81
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

82
Tree	Node catchBody = catchBody ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody ) ;
Distance : 7

83
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

84
Tree	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 6

85
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

86
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 6

87
Tree	Node catchBody = block . block ( catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody ) ;
Distance : 8

88
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

89
Tree	Node catchBody = catchBody . block ( obj1.props ) ;
Code	Node catchBody = catchBody . block ( obj1.props ) ;
Distance : 6

90
Tree	Node catchBody = catchBody . block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody , catchBody ) ;
Distance : 8

91
Tree	Node catchBody = catchBody ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode , catchBody ) ;
Distance : 7

92
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

93
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

94
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

95
Tree	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Distance : 7

96
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 6

97
Tree	Node catchBody = catchBody . block ( catchBody , DateTimeZone.UTC ) ;
Code	Node catchBody = catchBody . block ( catchBody , DateTimeZone.UTC ) ;
Distance : 8

98
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

99
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

100
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Distance : 5

101
Tree	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Distance : 5

102
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) ) ;
Distance : 7

103
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 4

104
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Distance : 5

105
Tree	Node catchBody = block ( catchBody , FunctionFlavor.ASYNCHRONOUS ) ;
Code	Node catchBody = block ( catchBody , FunctionFlavor.ASYNCHRONOUS ) ;
Distance : 7

106
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

107
Tree	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Distance : 5

108
Tree	Node catchBody = catchBody . block ( catchNode , false ) ;
Code	Node catchBody = catchBody . block ( catchNode , false ) ;
Distance : 7

109
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

110
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Distance : 8

111
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

112
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

113
Tree	Node catchBody = block ( catchBody , catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody , catchBody ) ;
Distance : 8

114
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

115
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

116
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

117
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

118
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

119
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

120
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

121
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

122
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( Nullability.IMPLICIT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( Nullability.IMPLICIT ) ;
Distance : 3

123
Tree	Node catchBody = catchBody . block ( catchBody , Nullability.IMPLICIT ) ;
Code	Node catchBody = catchBody . block ( catchBody , Nullability.IMPLICIT ) ;
Distance : 8

124
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

125
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

126
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

127
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

128
Tree	Node catchBody = block ( obj1.props , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( obj1.props , RotationConvention.FRAME_TRANSFORM ) . copyInformationFrom ( catchBody ) ;
Distance : 5

129
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

130
Tree	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Distance : 7

131
Tree	Node catchBody = block . block ( this , catchNode ) ;
Code	Node catchBody = block . block ( this , catchNode ) ;
Distance : 7

132
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

133
Tree	Node catchBody = block ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node catchBody = block ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

134
Tree	Node catchBody = catchBody . block ( catchBody , false ) ;
Code	Node catchBody = catchBody . block ( catchBody , false ) ;
Distance : 8

135
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

136
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

137
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Distance : 6

138
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

139
Tree	Node catchBody = block ( catchBody , LocalizedFormats.INTERNAL_ERROR ) ;
Code	Node catchBody = block ( catchBody , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 7

140
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

141
Tree	Node catchBody = block ( catchBody , DateTimeZone.UTC ) ;
Code	Node catchBody = block ( catchBody , DateTimeZone.UTC ) ;
Distance : 7

142
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 5

143
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

144
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

145
Tree	Node catchBody = block . catchBody ( catchBody ) ;
Code	Node catchBody = block . catchBody ( catchBody ) ;
Distance : 6

146
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 4

147
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

148
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

149
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

150
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

151
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

152
Tree	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 7

153
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Distance : 8

154
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . ( () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . ( () ) ;
Distance : 10

155
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) ) ;
Distance : 6

156
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

157
Tree	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Distance : 7

158
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Distance : 8

159
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , catchNode ) ;
Distance : 7

160
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

161
Tree	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Distance : 7

162
Tree	Node catchBody = catchBody ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode ) ;
Distance : 6

163
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Distance : 5

164
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

165
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

166
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

167
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

168
Tree	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . ( () ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . ( () ) ;
Distance : 9

169
Tree	Node catchBody = catchBody . block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchNode , catchBody ) ;
Distance : 9

170
Tree	Node catchBody = block ( obj1.props ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( obj1.props ) . copyInformationFrom ( catchBody ) ;
Distance : 3

171
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode , catchBody ) ;
Distance : 4

172
Tree	Node catchBody = catchBody . block ( catchBody , false ) ;
Code	Node catchBody = catchBody . block ( catchBody , false ) ;
Distance : 8

173
Tree	Node catchBody = this . catchBody . copyInformationFrom () ;
Code	Node catchBody = this . catchBody . copyInformationFrom () ;
Distance : 7

174
Tree	Node catchBody = catchBody . block ( catchBody , LocalizedFormats.INTERNAL_ERROR ) ;
Code	Node catchBody = catchBody . block ( catchBody , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 8

175
Tree	Node catchBody = catchBody ( catchBody , catchBody , copyInformationFrom ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody , copyInformationFrom ) ;
Distance : 7

176
Tree	Node catchBody = this . catchBody . copyInformationFrom () ;
Code	Node catchBody = this . catchBody . copyInformationFrom () ;
Distance : 7

177
Tree	Node catchBody = catchBody . block ( catchBody , catchBody , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody , catchNode ) ;
Distance : 8

178
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

179
Tree	Node catchBody = catchBody . block ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node catchBody = catchBody . block ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

180
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Distance : 8

181
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

182
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

183
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchNode ) ;
Distance : 4

184
Tree	Node catchBody = catchBody . catchBody ( catchBody ) ;
Code	Node catchBody = catchBody . catchBody ( catchBody ) ;
Distance : 6

185
Tree	Node catchBody = block ( catchNode ( catchBody ) , catchNode ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , catchNode ) ;
Distance : 5

186
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

187
Tree	Node catchBody = catchBody ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchBody ) ;
Distance : 6

188
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

189
Tree	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 5

190
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Distance : 2

191
Tree	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 7

192
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

193
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) ) ;
Distance : 8

194
Tree	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 7

195
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . copyInformationFrom () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . copyInformationFrom () ) ;
Distance : 10

196
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 5

197
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

198
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 8

199
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

1
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

2
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

3
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , null , null ) ; } }
Distance : 7

4
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

5
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

6
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

7
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

8
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

9
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

10
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

11
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

12
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

13
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 7

14
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 6

15
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

16
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 5

17
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

18
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

19
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

20
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

21
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 10

22
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , fromNode ) ; } }
Distance : 10

23
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

24
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

25
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

26
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , finallyNode ) ; } }
Distance : 10

27
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 12

28
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

29
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 6

30
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 8

31
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

32
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 7

33
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

34
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

35
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

36
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

37
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

38
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

39
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 11

40
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 8

41
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 7

42
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

43
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Distance : 7

44
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 7

45
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

46
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 5

47
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

48
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Distance : 6

49
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

50
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 6

51
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 5

52
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 9

53
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

54
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Distance : 8

55
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Distance : 8

56
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 4

57
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 8

58
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 6

59
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 9

60
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + finallyNode ) ; } }
Distance : 7

61
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , false ) ; } }
Distance : 9

62
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 6

63
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 9

64
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

65
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

66
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( Node , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( Node , STRING_CONSTANT ) ; } }
Distance : 10

67
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 7

68
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

69
Tree	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( cfa.finallyMap , null , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( cfa.finallyMap , null , null ) ; } }
Distance : 7

70
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 9

71
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 6

72
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 6

73
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

74
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

75
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

76
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

77
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

78
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 6

79
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

80
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 6

81
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

82
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

83
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Distance : 8

84
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Distance : 7

85
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 8

86
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 9

87
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

88
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

89
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

90
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 10

91
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

92
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

93
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , finallyNode ) ; } }
Distance : 10

94
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , finallyNode ) ; } }
Distance : 11

95
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

96
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , false , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , false , finallyNode ) ; } }
Distance : 10

97
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , finallyNode ) ; } }
Distance : 10

98
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Distance : 9

99
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 7

100
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

101
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

102
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

103
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

104
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

105
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 6

106
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( false ) ; } }
Distance : 10

107
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

108
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 7

109
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

110
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

111
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 6

112
Tree	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

113
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

114
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

115
Tree	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 8

116
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

117
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT + fromNode ) ; } }
Distance : 5

118
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Distance : 6

119
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

120
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

121
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

122
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

123
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 10

124
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

125
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

126
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

127
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( cfa.finallyMap , STRING_CONSTANT ) ; } }
Distance : 9

128
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 7

129
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 6

130
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 11

131
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 4

132
Tree	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

133
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( cfa.finallyMap , null , null ) ; } }
Distance : 8

134
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , false ) ; } }
Distance : 7

135
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , null , null ) ; } }
Distance : 4

136
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

137
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

138
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

139
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 8

140
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

141
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

142
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

143
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

144
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , null , null ) ; } }
Distance : 5

145
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 7

146
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

147
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

148
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

149
Tree	{ for ( final Node fromNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

150
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

151
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , Branch.UNCOND ) ; } }
Distance : 7

152
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Distance : 5

153
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

154
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

155
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 10

156
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Distance : 7

157
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Distance : 6

158
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

159
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

160
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

161
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 7

162
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

163
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

164
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

165
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 7

166
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( STRING_CONSTANT ) ; } }
Distance : 6

167
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

168
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 5

169
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 7

170
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( cfa.finallyMap , false ) ; } }
Distance : 8

171
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

172
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 9

173
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( cfa.finallyMap , false ) ; } }
Distance : 8

174
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( cfa.finallyMap , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( cfa.finallyMap , null , null ) ; } }
Distance : 8

175
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

176
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Distance : 7

177
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

178
Tree	{ for ( final Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : parent . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

179
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

180
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

181
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Distance : 6

182
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

183
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

184
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 9

185
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

186
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

187
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 10

188
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

189
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

190
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

191
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

192
Tree	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

193
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

194
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Distance : 11

195
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

196
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Distance : 12

197
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

198
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Distance : 11

199
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , createEdge () , finallyNode ) ; } }
Distance : 11

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( symbolName ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( symbolName ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

1
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( FeatureSet.ES3 ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( FeatureSet.ES3 ) . mayBeStringHelper ( n ) ; } }
Distance : 10

2
Tree	{ if ( recurse == null ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse == null ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

3
Tree	{ if ( recurse != null ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse != null ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

4
Tree	{ if ( recurse ) { return allResultsMatch ( ( ( n ) , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( ( ( n ) , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

5
Tree	{ if ( minuendYear ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( minuendYear ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

6
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . ( ( n ) ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . ( ( n ) ) ; } }
Distance : 11

7
Tree	{ if ( iterations ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( iterations ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

8
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

9
Tree	{ if ( symbolName ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( symbolName ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

10
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper . mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper . mayBeStringHelper ( n ) ; } else else }
Distance : 13

11
Tree	{ if ( recurse != null ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse != null ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

12
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

13
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

14
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

15
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

16
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

17
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

18
Tree	{ if ( recurse == null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse == null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

19
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

20
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

21
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else synchronized }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else synchronized }
Distance : 12

22
Tree	{ if ( recurse != null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse != null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 9

23
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( new n () ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( new n () ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

24
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

25
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

26
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Distance : 9

27
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

28
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

29
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

30
Tree	{ if ( n == null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n == null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

31
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

32
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

33
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

34
Tree	{ if ( recurse ) { return n . allResultsMatch ( new n () ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( new n () ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

35
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else else }
Distance : 12

36
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 6

37
Tree	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

38
Tree	{ if ( recurse . { ( n ) ) { return allResultsMatch ( n ) ; } else & }
Code	{ if ( recurse . { ( n ) ) { return allResultsMatch ( n ) ; } else & }
Distance : 11

39
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

40
Tree	{ if ( minuendYear ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( minuendYear ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

41
Tree	{ if ( n != null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n != null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

42
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else else }
Distance : 12

43
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

44
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

45
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

46
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else & }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else & }
Distance : 12

47
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

48
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

49
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

50
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

51
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else & }
Distance : 12

52
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

53
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

54
Tree	{ if ( recurse == null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse == null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

55
Tree	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

56
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

57
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

58
Tree	{ if ( n == null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n == null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

59
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else & }
Distance : 13

60
Tree	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

61
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , n ) ; } }
Distance : 8

62
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 3

63
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

64
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

65
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

66
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

67
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

68
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

69
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

70
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 10

71
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else ReadablePartial }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else ReadablePartial }
Distance : 12

72
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

73
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

74
Tree	{ if ( n ) { return allResultsMatch ( ( ( n ) , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( ( ( n ) , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

75
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

76
Tree	{ if ( recurse == null ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse == null ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

77
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 10

78
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

79
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

80
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

81
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

82
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

83
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else synchronized }
Distance : 12

84
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . ( ( n ) ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . ( ( n ) ) ; } }
Distance : 12

85
Tree	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 11

86
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . ( ( n ) ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . ( ( n ) ) ; } }
Distance : 11

87
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

88
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

89
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 7

90
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

91
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

92
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

93
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

94
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Distance : 8

95
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

96
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

97
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

98
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

99
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 3

100
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

101
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

102
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 11

103
Tree	{ if ( iterations ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( iterations ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

104
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 6

105
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper . mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper . mayBeStringHelper ( n ) ; } else else }
Distance : 12

106
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

107
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Distance : 7

108
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

109
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 8

110
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

111
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

112
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

113
Tree	{ if ( recurse ) { return allResultsMatch ( ( ( n ) ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( ( ( n ) ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

114
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 10

115
Tree	{ if ( recurse != null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse != null ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

116
Tree	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse . { ( n ) ) { return mayBeStringHelper ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 10

117
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

118
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

119
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

120
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 7

121
Tree	{ if ( n != null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n != null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

122
Tree	{ if ( recurse ) { return allResultsMatch ( ( ( n ) ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( ( ( n ) ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

123
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

124
Tree	{ if ( recurse . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else & }
Code	{ if ( recurse . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else & }
Distance : 11

125
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Distance : 8

126
Tree	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n . { ( n ) ) { return mayBeStringHelper ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 11

127
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 9

128
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 9

129
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Distance : 8

130
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 7

131
Tree	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 7

132
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

133
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

134
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

135
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

136
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

137
Tree	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

138
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

139
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

140
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Distance : 8

141
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , that.obj ) ; } }
Distance : 7

142
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 10

143
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 7

144
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

145
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

146
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

147
Tree	{ if ( recurse . { ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . { ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

148
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

149
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 9

150
Tree	{ if ( n . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 12

151
Tree	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 11

152
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

153
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( new n () ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( new n () ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

154
Tree	{ if ( recurse ) { return allResultsMatch ( ( ( n ) , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( ( ( n ) , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

155
Tree	{ if ( recurse . { ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else synchronized }
Distance : 10

156
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 7

157
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 6

158
Tree	{ if ( n . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . allResultsMatch ( ( ( n ) ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 12

159
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( reportLooseTypeViolations ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( reportLooseTypeViolations ) . mayBeStringHelper ( n ) ; } }
Distance : 10

160
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

161
Tree	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else synchronized }
Code	{ if ( recurse . { ( ( ( n ) ) ) { return n . mayBeStringHelper ( n ) ; } else synchronized }
Distance : 12

162
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 10

163
Tree	{ if ( recurse == null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse == null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

164
Tree	{ if ( recurse != null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse != null ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

165
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

166
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

167
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 6

168
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n , n ) ; } }
Distance : 9

169
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

170
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 9

171
Tree	{ if ( recurse ) { return n . allResultsMatch ( new n () ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( new n () ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

172
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 12

173
Tree	{ if ( recurse != null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse != null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

174
Tree	{ if ( recurse . { ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else FeatureSet.ES3 }
Code	{ if ( recurse . { ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else FeatureSet.ES3 }
Distance : 10

175
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , true ) ; } }
Distance : 7

176
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . n ( n ) ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( mayBeStringHelper () , n . n ( n ) ) ; } }
Distance : 12

177
Tree	{ if ( recurse == null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse == null ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

178
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

179
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

180
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( RemovalType.REMOVE_RHS ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( RemovalType.REMOVE_RHS ) . mayBeStringHelper ( n ) ; } }
Distance : 10

181
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

182
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 8

183
Tree	{ if ( n ) { return allResultsMatch ( ( ( n ) ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( ( ( n ) ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

184
Tree	{ if ( recurse ) { return allResultsMatch ( ( ( n ) , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( ( ( n ) , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

185
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE () ) ; } }
Distance : 9

186
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 7

187
Tree	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

188
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

189
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

190
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

191
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n . MAY_BE_STRING_PREDICATE ( n ) ) ; } }
Distance : 9

192
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

193
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , false ) ; } }
Distance : 7

194
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( Format.COMPACT ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( Format.COMPACT ) . mayBeStringHelper ( n ) ; } }
Distance : 10

195
Tree	{ if ( n ) { return allResultsMatch ( ( ( n ) ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( ( ( n ) ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

196
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

197
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

198
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

199
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 7

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

2
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

3
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Distance : 6

4
Tree	String moduleName = getSourceFileName ( script , script , false ) ;
Code	String moduleName = getSourceFileName ( script , script , false ) ;
Distance : 5

5
Tree	String moduleName = getSourceFileName ( script ) ;
Code	String moduleName = getSourceFileName ( script ) ;
Distance : 4

6
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 4

7
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

8
Tree	String moduleName = getSourceFileName ( s.parent ) ;
Code	String moduleName = getSourceFileName ( s.parent ) ;
Distance : 5

9
Tree	String moduleName = guessCJSModuleName ( script ) ;
Code	String moduleName = guessCJSModuleName ( script ) ;
Distance : 3

10
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

11
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 3

12
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , CHAR_CONS ) ;
Distance : 5

13
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

14
Tree	String moduleName = guessCJSModuleName ( script , this . moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , this . moduleName ) ;
Distance : 4

15
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 7

16
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . < script > getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . < script > getSourceFileName () ) ) ;
Distance : 7

17
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

18
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

19
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

20
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . < script > getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . < script > getSourceFileName () ) ) ;
Distance : 6

21
Tree	String moduleName = guessCJSModuleName ( script , this . script ) ;
Code	String moduleName = guessCJSModuleName ( script , this . script ) ;
Distance : 4

22
Tree	String moduleName = getSourceFileName ( s.parent , that.gradientPaintTransformer ) ;
Code	String moduleName = getSourceFileName ( s.parent , that.gradientPaintTransformer ) ;
Distance : 5

23
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script , moduleName ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script , moduleName ) ) ) ;
Distance : 9

24
Tree	String moduleName = getSourceFileName ( s.parent , CheckLevel.ERROR ) ;
Code	String moduleName = getSourceFileName ( s.parent , CheckLevel.ERROR ) ;
Distance : 5

25
Tree	String moduleName = getSourceFileName ( s.parent , standardDeviation.length ) ;
Code	String moduleName = getSourceFileName ( s.parent , standardDeviation.length ) ;
Distance : 5

26
Tree	String moduleName = getSourceFileName ( s.parent , RotationConvention.FRAME_TRANSFORM ) ;
Code	String moduleName = getSourceFileName ( s.parent , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 5

27
Tree	String moduleName = moduleName ( moduleName ) ;
Code	String moduleName = moduleName ( moduleName ) ;
Distance : 5

28
Tree	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 4

29
Tree	String moduleName = getSourceFileName ( CHAR_CONS , CHAR_CONS , false ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , CHAR_CONS , false ) ;
Distance : 6

30
Tree	String moduleName = getSourceFileName ( s.parent , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( s.parent , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

31
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

32
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

33
Tree	String script = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 7

34
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

35
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 8

36
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 7

37
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

38
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 7

39
Tree	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 4

40
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

41
Tree	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 8

42
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Distance : 6

43
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

44
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Distance : 5

45
Tree	String script = getSourceFileName ( script , script ) ;
Code	String script = getSourceFileName ( script , script ) ;
Distance : 5

46
Tree	String script = guessCJSModuleName ( script ) ;
Code	String script = guessCJSModuleName ( script ) ;
Distance : 4

47
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 7

48
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 4

49
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

50
Tree	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Distance : 7

51
Tree	String moduleName = script ( script , script ) ;
Code	String moduleName = script ( script , script ) ;
Distance : 4

52
Tree	String moduleName = getSourceFileName ( TokenType.STRING , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( TokenType.STRING , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

53
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

54
Tree	String moduleName = guessCJSModuleName ( s.parent , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( s.parent , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

55
Tree	String moduleName = getSourceFileName ( CHAR_CONS , obj2.props ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , obj2.props ) ;
Distance : 5

56
Tree	String moduleName = getSourceFileName ( addPeriodInto , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( addPeriodInto , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

57
Tree	String script = getSourceFileName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

58
Tree	String moduleName = getSourceFileName ( script , script , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName , moduleName ) ;
Distance : 7

59
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 8

60
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

61
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 6

62
Tree	String script = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

63
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

64
Tree	String moduleName = getSourceFileName ( script , CheckLevel.ERROR ) ;
Code	String moduleName = getSourceFileName ( script , CheckLevel.ERROR ) ;
Distance : 4

65
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

66
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 5

67
Tree	String script = guessCJSModuleName ( script , script , false ) ;
Code	String script = guessCJSModuleName ( script , script , false ) ;
Distance : 5

68
Tree	String moduleName = script ( script , script , moduleName ) ;
Code	String moduleName = script ( script , script , moduleName ) ;
Distance : 5

69
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

70
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , source.nDev ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , source.nDev ) ;
Distance : 5

71
Tree	String moduleName = moduleName ( script , moduleName ) ;
Code	String moduleName = moduleName ( script , moduleName ) ;
Distance : 4

72
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

73
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

74
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

75
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

76
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

77
Tree	String moduleName = getSourceFileName ( s.parent , script ) ;
Code	String moduleName = getSourceFileName ( s.parent , script ) ;
Distance : 5

78
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 8

79
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

80
Tree	String script = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

81
Tree	String moduleName = getSourceFileName ( CHAR_CONS , that.gradientPaintTransformer ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , that.gradientPaintTransformer ) ;
Distance : 5

82
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , RotationConvention.FRAME_TRANSFORM ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 9

83
Tree	String script = guessCJSModuleName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

84
Tree	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

85
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

86
Tree	String moduleName = getSourceFileName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

87
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.m1 ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , source.m1 ) ;
Distance : 9

88
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 10

89
Tree	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

90
Tree	String moduleName = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

91
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

92
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , source.contractionCriterion ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , source.contractionCriterion ) ;
Distance : 8

93
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Distance : 6

94
Tree	String moduleName = getSourceFileName ( TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( TokenType.STRING ) ;
Distance : 5

95
Tree	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Distance : 7

96
Tree	String moduleName = getOrCreateName ;
Code	String moduleName = getOrCreateName ;
Distance : 7

97
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

98
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 6

99
Tree	String moduleName = moduleName ( script ) ;
Code	String moduleName = moduleName ( script ) ;
Distance : 4

100
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

101
Tree	String script = getSourceFileName ( script ) ;
Code	String script = getSourceFileName ( script ) ;
Distance : 5

102
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 8

103
Tree	String moduleName = resolveVariable ;
Code	String moduleName = resolveVariable ;
Distance : 7

104
Tree	String script = getSourceFileName ( script , script , false ) ;
Code	String script = getSourceFileName ( script , script , false ) ;
Distance : 6

105
Tree	String moduleName = moduleName ( script , script ) ;
Code	String moduleName = moduleName ( script , script ) ;
Distance : 4

106
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

107
Tree	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

109
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 7

110
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 7

111
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

112
Tree	String moduleName = getSourceFileName ( addPeriodInto , script ) ;
Code	String moduleName = getSourceFileName ( addPeriodInto , script ) ;
Distance : 5

113
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

114
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Distance : 6

115
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

116
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

117
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Distance : 5

118
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 12

119
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , script ) ;
Distance : 6

120
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 13

121
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script , moduleName ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script , moduleName ) ) ) ;
Distance : 9

122
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script , script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script , script ) ) ) ;
Distance : 9

123
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

124
Tree	String script = guessCJSModuleName ( script , script ) ;
Code	String script = guessCJSModuleName ( script , script ) ;
Distance : 4

125
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

126
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

127
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

128
Tree	String moduleName = guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script , script ) ;
Distance : 4

129
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . < moduleName > getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . < moduleName > getSourceFileName () ) ) ;
Distance : 7

130
Tree	String moduleName = guessCJSModuleName ( script , that.gradientPaintTransformer ) ;
Code	String moduleName = guessCJSModuleName ( script , that.gradientPaintTransformer ) ;
Distance : 3

131
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

132
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 6

133
Tree	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

134
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

135
Tree	String moduleName = getSourceFileName ( script , script , script ) ;
Code	String moduleName = getSourceFileName ( script , script , script ) ;
Distance : 5

136
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

137
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 7

138
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Distance : 5

139
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

140
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , TokenType.STRING ) ;
Distance : 5

141
Tree	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

142
Tree	String moduleName = getSourceFileName ( CHAR_CONS , CHAR_CONS , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , CHAR_CONS , CHAR_CONS ) ;
Distance : 6

143
Tree	String moduleName = getSourceFileName ( CHAR_CONS , CheckLevel.ERROR ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , CheckLevel.ERROR ) ;
Distance : 5

144
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 6

145
Tree	String moduleName = getSourceFileName ( addPeriodInto ) ;
Code	String moduleName = getSourceFileName ( addPeriodInto ) ;
Distance : 5

146
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 9

147
Tree	String moduleName = getSourceFileName ( CHAR_CONS , importedName.value ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , importedName.value ) ;
Distance : 5

148
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , Feature.OBJECT_PATTERN_REST ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , Feature.OBJECT_PATTERN_REST ) ;
Distance : 5

149
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

150
Tree	String moduleName = getSourceFileName ( script , this . moduleName ) ;
Code	String moduleName = getSourceFileName ( script , this . moduleName ) ;
Distance : 5

151
Tree	String script = moduleName ( script , script ) ;
Code	String script = moduleName ( script , script ) ;
Distance : 5

152
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

153
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

154
Tree	String moduleName = getSourceFileName ( TokenType.STRING , script ) ;
Code	String moduleName = getSourceFileName ( TokenType.STRING , script ) ;
Distance : 5

155
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

156
Tree	String script = moduleName ( script ) ;
Code	String script = moduleName ( script ) ;
Distance : 5

157
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Distance : 6

158
Tree	String moduleName = guessCJSModuleName ( s.parent , script ) ;
Code	String moduleName = guessCJSModuleName ( s.parent , script ) ;
Distance : 4

159
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

160
Tree	String moduleName = script ( script ) ;
Code	String moduleName = script ( script ) ;
Distance : 4

161
Tree	String moduleName = getSourceFileName ( script , CompilerOptions.LanguageMode.ECMASCRIPT5 ) ;
Code	String moduleName = getSourceFileName ( script , CompilerOptions.LanguageMode.ECMASCRIPT5 ) ;
Distance : 4

162
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , source.nDev ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , source.nDev ) ;
Distance : 8

163
Tree	String moduleName = moduleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName ( script , script , moduleName ) ;
Distance : 5

164
Tree	String script = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

165
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 11

166
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

167
Tree	String moduleName = Entities ;
Code	String moduleName = Entities ;
Distance : 7

168
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

169
Tree	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

170
Tree	String moduleName = getSourceFileName ( script , script ) ;
Code	String moduleName = getSourceFileName ( script , script ) ;
Distance : 4

171
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , super ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , super ) ;
Distance : 11

172
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , TokenType.STRING ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , TokenType.STRING ) ;
Distance : 4

173
Tree	String moduleName = getSourceFileName ( script , this . script ) ;
Code	String moduleName = getSourceFileName ( script , this . script ) ;
Distance : 5

174
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 6

175
Tree	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 13

176
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , false ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , false ) ;
Distance : 11

177
Tree	String script = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 7

178
Tree	String moduleName = extractCauseUnchecked ;
Code	String moduleName = extractCauseUnchecked ;
Distance : 7

179
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 7

180
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

181
Tree	String moduleName = guessCJSModuleName ( script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script ) ;
Distance : 3

182
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

183
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

184
Tree	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

185
Tree	String moduleName = moduleName ( script , script , script ) ;
Code	String moduleName = moduleName ( script , script , script ) ;
Distance : 5

186
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

187
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

188
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

189
Tree	String moduleName = getSourceFileName ( script , script , moduleName , script ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName , script ) ;
Distance : 7

190
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 12

191
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName , script ) ;
Distance : 6

192
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . < script > getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . < script > getSourceFileName () ) ) ;
Distance : 7

193
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script , moduleName ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script , moduleName ) ) ) ;
Distance : 8

194
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

195
Tree	String script = moduleName ( script , script , moduleName ) ;
Code	String script = moduleName ( script , script , moduleName ) ;
Distance : 6

196
Tree	String moduleName = guessCJSModuleName ( script , script , false ) ;
Code	String moduleName = guessCJSModuleName ( script , script , false ) ;
Distance : 4

197
Tree	String moduleName = guessCJSModuleName ( s.parent ) ;
Code	String moduleName = guessCJSModuleName ( s.parent ) ;
Distance : 4

198
Tree	String moduleName = getSourceFileName ( script , that.gradientPaintTransformer ) ;
Code	String moduleName = getSourceFileName ( script , that.gradientPaintTransformer ) ;
Distance : 4

199
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , false ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , false ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	canInline () . canInline ( c . getScope () , c )
Code	canInline () . canInline ( c . getScope () , c )
Distance : 5

1
Tree	canInline ( getScope () , c . canInline () )
Code	canInline ( getScope () , c . canInline () )
Distance : 7

2
Tree	this . c . canInline ( c )
Code	this . c . canInline ( c )
Distance : 6

3
Tree	c . canInline ( c , false )
Code	c . canInline ( c , false )
Distance : 4

4
Tree	c . getScope ( c )
Code	c . getScope ( c )
Distance : 5

5
Tree	TypeInferenceMode.NEITHER . canInline ()
Code	TypeInferenceMode.NEITHER . canInline ()
Distance : 6

6
Tree	c . canInline ( t )
Code	c . canInline ( t )
Distance : 3

7
Tree	c . canInline ( c ) . canInline ()
Code	c . canInline ( c ) . canInline ()
Distance : 4

8
Tree	canInline () . getScope ()
Code	canInline () . getScope ()
Distance : 5

9
Tree	c . canInline ( c , c , c . canInline () )
Code	c . canInline ( c , c , c . canInline () )
Distance : 6

10
Tree	canInline ( c , c )
Code	canInline ( c , c )
Distance : 6

11
Tree	new InitialGuess ( c ) . canInline ( c . canInline () )
Code	new InitialGuess ( c ) . canInline ( c . canInline () )
Distance : 6

12
Tree	new t ( c ) . canInline ( c )
Code	new t ( c ) . canInline ( c )
Distance : 8

13
Tree	canInline ()
Code	canInline ()
Distance : 7

14
Tree	c . canInline ( null )
Code	c . canInline ( null )
Distance : 4

15
Tree	c . canInline ( STRING_CONSTANT , STRING_CONSTANT )
Code	c . canInline ( STRING_CONSTANT , STRING_CONSTANT )
Distance : 4

16
Tree	canInline () . canInline ( child.parent )
Code	canInline () . canInline ( child.parent )
Distance : 6

17
Tree	( ( c ) t ) . canInline ()
Code	( ( c ) t ) . canInline ()
Distance : 7

18
Tree	canInline ( c , c . getScope () )
Code	canInline ( c , c . getScope () )
Distance : 5

19
Tree	( ( c ) c ) . getScope ()
Code	( ( c ) c ) . getScope ()
Distance : 7

20
Tree	c . getScope ( STRING_CONSTANT , STRING_CONSTANT )
Code	c . getScope ( STRING_CONSTANT , STRING_CONSTANT )
Distance : 5

21
Tree	c . canInline () . canInline ( Calendar.JANUARY )
Code	c . canInline () . canInline ( Calendar.JANUARY )
Distance : 5

22
Tree	c . canInline ( super(); )
Code	c . canInline ( super(); )
Distance : 4

23
Tree	canInline ( c ) . getScope ()
Code	canInline ( c ) . getScope ()
Distance : 5

24
Tree	this . c . canInline ()
Code	this . c . canInline ()
Distance : 6

25
Tree	new t () . getScope ( c )
Code	new t () . getScope ( c )
Distance : 7

26
Tree	c . canInline ( new LocalizedMatcher ( c ) )
Code	c . canInline ( new LocalizedMatcher ( c ) )
Distance : 5

27
Tree	new ObjectStreamClass ( c ) . canInline ()
Code	new ObjectStreamClass ( c ) . canInline ()
Distance : 7

28
Tree	getScope ( c . getScope () )
Code	getScope ( c . getScope () )
Distance : 4

29
Tree	c . canInline ( c , c . getScope () )
Code	c . canInline ( c , c . getScope () )
Distance : 3

30
Tree	new PomComparator ( c ) . canInline ( c )
Code	new PomComparator ( c ) . canInline ( c )
Distance : 8

31
Tree	c . canInline () . canInline ( LanguageMode.ECMASCRIPT5 )
Code	c . canInline () . canInline ( LanguageMode.ECMASCRIPT5 )
Distance : 5

32
Tree	source
Code	source
Distance : 9

33
Tree	new InitialGuess ( c ) . canInline ( c )
Code	new InitialGuess ( c ) . canInline ( c )
Distance : 8

34
Tree	child.parent . canInline ()
Code	child.parent . canInline ()
Distance : 6

35
Tree	c . canInline ( new SimpleVectorValueChecker ( c ) )
Code	c . canInline ( new SimpleVectorValueChecker ( c ) )
Distance : 5

36
Tree	getScope ( STRING_CONSTANT )
Code	getScope ( STRING_CONSTANT )
Distance : 7

37
Tree	canInline () . canInline ( LanguageMode.ECMASCRIPT5 )
Code	canInline () . canInline ( LanguageMode.ECMASCRIPT5 )
Distance : 6

38
Tree	canInline ( c . canInline () )
Code	canInline ( c . canInline () )
Distance : 4

39
Tree	( ( c ) c ) . canInline ()
Code	( ( c ) c ) . canInline ()
Distance : 8

40
Tree	c . getScope () . canInline ( c )
Code	c . getScope () . canInline ( c )
Distance : 6

41
Tree	c . getScope ( c . getScope () )
Code	c . getScope ( c . getScope () )
Distance : 2

42
Tree	c . canInline () . getScope ()
Code	c . canInline () . getScope ()
Distance : 3

43
Tree	new UnicodeUnescaper ( c ) . canInline ( c )
Code	new UnicodeUnescaper ( c ) . canInline ( c )
Distance : 8

44
Tree	STRING_CONSTANT . canInline ( c . getScope () )
Code	STRING_CONSTANT . canInline ( c . getScope () )
Distance : 2

45
Tree	c . canInline ( return; )
Code	c . canInline ( return; )
Distance : 4

46
Tree	TypeInferenceMode.NEITHER . canInline ( c )
Code	TypeInferenceMode.NEITHER . canInline ( c )
Distance : 5

47
Tree	c . canInline ( c , new Coordinates2D ( c ) )
Code	c . canInline ( c , new Coordinates2D ( c ) )
Distance : 7

48
Tree	c () . getScope ()
Code	c () . getScope ()
Distance : 5

49
Tree	c . getScope ( STRING_CONSTANT )
Code	c . getScope ( STRING_CONSTANT )
Distance : 5

50
Tree	canInline ( STRING_CONSTANT ) Class
Code	canInline ( STRING_CONSTANT ) Class
Distance : 7

51
Tree	canInline ( c . getScope () )
Code	canInline ( c . getScope () )
Distance : 3

52
Tree	canInline ( t , c )
Code	canInline ( t , c )
Distance : 5

53
Tree	STRING_CONSTANT . getScope ( c . getScope () )
Code	STRING_CONSTANT . getScope ( c . getScope () )
Distance : 3

54
Tree	c . getScope ( c , c )
Code	c . getScope ( c , c )
Distance : 5

55
Tree	c ( c )
Code	c ( c )
Distance : 6

56
Tree	c . canInline ( PARAM.escapePlus )
Code	c . canInline ( PARAM.escapePlus )
Distance : 4

57
Tree	t () . canInline ()
Code	t () . canInline ()
Distance : 7

58
Tree	child.parent . canInline ( c )
Code	child.parent . canInline ( c )
Distance : 5

59
Tree	new UnicodeUnescaper ( c ) . canInline ()
Code	new UnicodeUnescaper ( c ) . canInline ()
Distance : 7

60
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

61
Tree	canInline () . canInline ( c . canInline () , c )
Code	canInline () . canInline ( c . canInline () , c )
Distance : 6

62
Tree	this . t . canInline ()
Code	this . t . canInline ()
Distance : 5

63
Tree	canInline () . canInline ( c . canInline () )
Code	canInline () . canInline ( c . canInline () )
Distance : 4

64
Tree	getScope ( c , c . getScope () )
Code	getScope ( c , c . getScope () )
Distance : 5

65
Tree	c . canInline ( new Coordinates2D ( c ) )
Code	c . canInline ( new Coordinates2D ( c ) )
Distance : 5

66
Tree	canInline () . getScope ( c )
Code	canInline () . getScope ( c )
Distance : 6

67
Tree	getScope () . canInline ()
Code	getScope () . canInline ()
Distance : 7

68
Tree	canInline ( canInline () , c . getScope () )
Code	canInline ( canInline () , c . getScope () )
Distance : 5

69
Tree	c . canInline ( STRING_CONSTANT )
Code	c . canInline ( STRING_CONSTANT )
Distance : 4

70
Tree	t . canInline ( c )
Code	t . canInline ( c )
Distance : 5

71
Tree	c . canInline ( new Returns ( c ) )
Code	c . canInline ( new Returns ( c ) )
Distance : 5

72
Tree	t ( c )
Code	t ( c )
Distance : 7

73
Tree	c . canInline () . canInline ()
Code	c . canInline () . canInline ()
Distance : 4

74
Tree	t ( t )
Code	t ( t )
Distance : 6

75
Tree	c . canInline ( c , new Random ( c ) )
Code	c . canInline ( c , new Random ( c ) )
Distance : 7

76
Tree	c . canInline () . canInline ( RotationConvention.VECTOR_OPERATOR )
Code	c . canInline () . canInline ( RotationConvention.VECTOR_OPERATOR )
Distance : 5

77
Tree	canInline ( STRING_CONSTANT )
Code	canInline ( STRING_CONSTANT )
Distance : 6

78
Tree	c . getScope ( c , c , c . getScope () )
Code	c . getScope ( c , c , c . getScope () )
Distance : 6

79
Tree	c . canInline ( c . canInline () )
Code	c . canInline ( c . canInline () )
Distance : 2

80
Tree	new ObjectStreamClass ( c ) . canInline ( c . canInline () )
Code	new ObjectStreamClass ( c ) . canInline ( c . canInline () )
Distance : 6

81
Tree	canInline () . canInline ( c )
Code	canInline () . canInline ( c )
Distance : 6

82
Tree	getScope ( c )
Code	getScope ( c )
Distance : 7

83
Tree	new t ( c ) . getScope ( c )
Code	new t ( c ) . getScope ( c )
Distance : 7

84
Tree	c . canInline ( c , c , c . getScope () )
Code	c . canInline ( c , c , c . getScope () )
Distance : 5

85
Tree	c
Code	c
Distance : 8

86
Tree	c . canInline ( c , new Es6SyntacticScopeCreator ( c ) )
Code	c . canInline ( c , new Es6SyntacticScopeCreator ( c ) )
Distance : 7

87
Tree	canInline () . canInline ( Calendar.JANUARY )
Code	canInline () . canInline ( Calendar.JANUARY )
Distance : 6

88
Tree	canInline () . canInline ( TypeInferenceMode.NEITHER )
Code	canInline () . canInline ( TypeInferenceMode.NEITHER )
Distance : 6

89
Tree	canInline ( c , c . canInline () )
Code	canInline ( c , c . canInline () )
Distance : 6

90
Tree	canInline ( STRING_CONSTANT ) Test
Code	canInline ( STRING_CONSTANT ) Test
Distance : 7

91
Tree	c . getScope ( c , c . getScope () )
Code	c . getScope ( c , c . getScope () )
Distance : 4

92
Tree	new t () . canInline ( c )
Code	new t () . canInline ( c )
Distance : 7

93
Tree	canInline ( canInline () , c . canInline () )
Code	canInline ( canInline () , c . canInline () )
Distance : 6

94
Tree	c . canInline ( c , c . canInline () )
Code	c . canInline ( c , c . canInline () )
Distance : 4

95
Tree	getScope () . getScope ()
Code	getScope () . getScope ()
Distance : 6

96
Tree	getScope () . getScope ( c )
Code	getScope () . getScope ( c )
Distance : 7

97
Tree	c . getScope ( c ) . canInline ()
Code	c . getScope ( c ) . canInline ()
Distance : 5

98
Tree	( ( t ) c ) . canInline ()
Code	( ( t ) c ) . canInline ()
Distance : 8

99
Tree	t . canInline ( NUMBER_CONSTANT )
Code	t . canInline ( NUMBER_CONSTANT )
Distance : 5

100
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

101
Tree	new ObjectStreamClass () . canInline ( c . canInline () )
Code	new ObjectStreamClass () . canInline ( c . canInline () )
Distance : 5

102
Tree	c . getScope () . canInline ()
Code	c . getScope () . canInline ()
Distance : 5

103
Tree	getScope () . canInline ( c . canInline () )
Code	getScope () . canInline ( c . canInline () )
Distance : 4

104
Tree	new UnicodeUnescaper () . canInline ( c . canInline () )
Code	new UnicodeUnescaper () . canInline ( c . canInline () )
Distance : 5

105
Tree	c . canInline ( canInline () , c . canInline () )
Code	c . canInline ( canInline () , c . canInline () )
Distance : 5

106
Tree	new PomComparator () . canInline ( c . canInline () )
Code	new PomComparator () . canInline ( c . canInline () )
Distance : 5

107
Tree	getScope ( c . canInline () )
Code	getScope ( c . canInline () )
Distance : 5

108
Tree	Calendar.JANUARY . canInline ( c )
Code	Calendar.JANUARY . canInline ( c )
Distance : 5

109
Tree	c . getScope ( c . canInline () )
Code	c . getScope ( c . canInline () )
Distance : 3

110
Tree	c . canInline ( getScope () , c . canInline () )
Code	c . canInline ( getScope () , c . canInline () )
Distance : 5

111
Tree	c . getScope ( null )
Code	c . getScope ( null )
Distance : 5

112
Tree	c . canInline ( c ) . getScope ()
Code	c . canInline ( c ) . getScope ()
Distance : 3

113
Tree	c . getScope ( c , c , c . canInline () )
Code	c . getScope ( c , c , c . canInline () )
Distance : 7

114
Tree	c . canInline ( NUMBER_CONSTANT )
Code	c . canInline ( NUMBER_CONSTANT )
Distance : 4

115
Tree	new InitialGuess () . canInline ( c . canInline () )
Code	new InitialGuess () . canInline ( c . canInline () )
Distance : 5

116
Tree	new ObjectStreamClass ( c ) . canInline ( c )
Code	new ObjectStreamClass ( c ) . canInline ( c )
Distance : 8

117
Tree	new UnicodeUnescaper ( c ) . canInline ( c . canInline () )
Code	new UnicodeUnescaper ( c ) . canInline ( c . canInline () )
Distance : 6

118
Tree	STRING_CONSTANT . canInline ( c . canInline () )
Code	STRING_CONSTANT . canInline ( c . canInline () )
Distance : 3

119
Tree	t . canInline ( STRING_CONSTANT )
Code	t . canInline ( STRING_CONSTANT )
Distance : 5

120
Tree	c . canInline ( t , c )
Code	c . canInline ( t , c )
Distance : 3

121
Tree	getScope ( t )
Code	getScope ( t )
Distance : 6

122
Tree	t . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	t . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 5

123
Tree	canInline () . canInline ()
Code	canInline () . canInline ()
Distance : 6

124
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

125
Tree	c . canInline () . canInline ( c )
Code	c . canInline () . canInline ( c )
Distance : 5

126
Tree	this . c . getScope ()
Code	this . c . getScope ()
Distance : 5

127
Tree	Coordinates2D
Code	Coordinates2D
Distance : 9

128
Tree	new PomComparator ( c ) . canInline ( c . canInline () )
Code	new PomComparator ( c ) . canInline ( c . canInline () )
Distance : 6

129
Tree	canInline ( c , t )
Code	canInline ( c , t )
Distance : 6

130
Tree	c . canInline ( c )
Code	c . canInline ( c )
Distance : 4

131
Tree	c . canInline ( c , PropAccess.INCLUDE_STRAY_PROPS )
Code	c . canInline ( c , PropAccess.INCLUDE_STRAY_PROPS )
Distance : 4

132
Tree	this . c . getScope ( c )
Code	this . c . getScope ( c )
Distance : 6

133
Tree	c . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	c . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 5

134
Tree	c ( t )
Code	c ( t )
Distance : 5

135
Tree	c . getScope ( c , TypeInferenceMode.NEITHER )
Code	c . getScope ( c , TypeInferenceMode.NEITHER )
Distance : 5

136
Tree	c . canInline ( c . getScope () )
Code	c . canInline ( c . getScope () )
Distance : 1

137
Tree	c . canInline ( Token.GETELEM )
Code	c . canInline ( Token.GETELEM )
Distance : 4

138
Tree	this . t . canInline ( c )
Code	this . t . canInline ( c )
Distance : 6

139
Tree	canInline ( c )
Code	canInline ( c )
Distance : 6

140
Tree	c . getScope ( c ) . getScope ()
Code	c . getScope ( c ) . getScope ()
Distance : 4

141
Tree	getScope ( c ) . getScope ()
Code	getScope ( c ) . getScope ()
Distance : 6

142
Tree	c . canInline ( t , false )
Code	c . canInline ( t , false )
Distance : 3

143
Tree	c . canInline ( c , TransformType.INVERSE )
Code	c . canInline ( c , TransformType.INVERSE )
Distance : 4

144
Tree	new c () . canInline ( c )
Code	new c () . canInline ( c )
Distance : 6

145
Tree	c . canInline ( c , new SinFunction ( c ) )
Code	c . canInline ( c , new SinFunction ( c ) )
Distance : 7

146
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

147
Tree	new c ( c ) . canInline ( c )
Code	new c ( c ) . canInline ( c )
Distance : 8

148
Tree	new PomComparator ( c ) . canInline ()
Code	new PomComparator ( c ) . canInline ()
Distance : 7

149
Tree	t . getScope ( STRING_CONSTANT , STRING_CONSTANT )
Code	t . getScope ( STRING_CONSTANT , STRING_CONSTANT )
Distance : 6

150
Tree	getScope ()
Code	getScope ()
Distance : 7

151
Tree	c . getScope () . getScope ( c )
Code	c . getScope () . getScope ( c )
Distance : 5

152
Tree	new InitialGuess ( c ) . canInline ()
Code	new InitialGuess ( c ) . canInline ()
Distance : 7

153
Tree	NodeUtil.isNameDeclaration . canInline ( c )
Code	NodeUtil.isNameDeclaration . canInline ( c )
Distance : 5

154
Tree	new c () . getScope ( c )
Code	new c () . getScope ( c )
Distance : 7

155
Tree	getScope () . canInline ( c )
Code	getScope () . canInline ( c )
Distance : 6

156
Tree	c . getScope ( c , c . canInline () )
Code	c . getScope ( c , c . canInline () )
Distance : 5

157
Tree	getScope ( c , c )
Code	getScope ( c , c )
Distance : 7

158
Tree	c . canInline ( c , c )
Code	c . canInline ( c , c )
Distance : 4

159
Tree	STRING_CONSTANT . getScope ( c . canInline () )
Code	STRING_CONSTANT . getScope ( c . canInline () )
Distance : 4

160
Tree	canInline ( t )
Code	canInline ( t )
Distance : 5

161
Tree	c . canInline ( c . canInline () , c . . () )
Code	c . canInline ( c . canInline () , c . . () )
Distance : 7

162
Tree	Invocation
Code	Invocation
Distance : 9

163
Tree	this . c . canInline ( t )
Code	this . c . canInline ( t )
Distance : 5

164
Tree	getScope ( c ) . canInline ()
Code	getScope ( c ) . canInline ()
Distance : 7

165
Tree	c . canInline ( canInline () , c . getScope () )
Code	c . canInline ( canInline () , c . getScope () )
Distance : 4

166
Tree	c () . canInline ()
Code	c () . canInline ()
Distance : 6

167
Tree	c . getScope ( NUMBER_CONSTANT )
Code	c . getScope ( NUMBER_CONSTANT )
Distance : 5

168
Tree	c . getScope ( c , false )
Code	c . getScope ( c , false )
Distance : 5

169
Tree	new c ( c ) . getScope ( c )
Code	new c ( c ) . getScope ( c )
Distance : 7

170
Tree	c . getScope () . getScope ()
Code	c . getScope () . getScope ()
Distance : 4

171
Tree	t . getScope ( STRING_CONSTANT )
Code	t . getScope ( STRING_CONSTANT )
Distance : 6

172
Tree	c . canInline () . canInline ( TypeInferenceMode.NEITHER )
Code	c . canInline () . canInline ( TypeInferenceMode.NEITHER )
Distance : 5

173
Tree	NodeUtil.isNameDeclaration . canInline ()
Code	NodeUtil.isNameDeclaration . canInline ()
Distance : 6

174
Tree	t . getScope ( NUMBER_CONSTANT )
Code	t . getScope ( NUMBER_CONSTANT )
Distance : 6

175
Tree	getScope ( c , c . canInline () )
Code	getScope ( c , c . canInline () )
Distance : 6

176
Tree	c . canInline ( Feature.MODULES )
Code	c . canInline ( Feature.MODULES )
Distance : 4

177
Tree	canInline () . canInline ( c . getScope () )
Code	canInline () . canInline ( c . getScope () )
Distance : 3

178
Tree	this . t . getScope ()
Code	this . t . getScope ()
Distance : 4

179
Tree	c . getScope ( canInline () , c . canInline () )
Code	c . getScope ( canInline () , c . canInline () )
Distance : 6

180
Tree	canInline () . getScope ( c . canInline () , c )
Code	canInline () . getScope ( c . canInline () , c )
Distance : 7

181
Tree	c . canInline ( c , t )
Code	c . canInline ( c , t )
Distance : 4

182
Tree	c . canInline () . getScope ( c )
Code	c . canInline () . getScope ( c )
Distance : 4

183
Tree	getScope ( canInline () , c . canInline () )
Code	getScope ( canInline () , c . canInline () )
Distance : 6

184
Tree	c . canInline ( c , true )
Code	c . canInline ( c , true )
Distance : 4

185
Tree	c . canInline ( c . canInline () , c . getScope () )
Code	c . canInline ( c . canInline () , c . getScope () )
Distance : 6

186
Tree	c . getScope ( c . canInline () , c . . () )
Code	c . getScope ( c . canInline () , c . . () )
Distance : 8

187
Tree	canInline () Class
Code	canInline () Class
Distance : 7

188
Tree	t . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	t . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 6

189
Tree	t . canInline ( STRING_CONSTANT , STRING_CONSTANT )
Code	t . canInline ( STRING_CONSTANT , STRING_CONSTANT )
Distance : 5

190
Tree	t () . getScope ()
Code	t () . getScope ()
Distance : 6

191
Tree	canInline () . getScope ( c . canInline () )
Code	canInline () . getScope ( c . canInline () )
Distance : 5

192
Tree	c . canInline ( Nullability.IMPLICIT )
Code	c . canInline ( Nullability.IMPLICIT )
Distance : 4

193
Tree	Calendar.JANUARY . canInline ()
Code	Calendar.JANUARY . canInline ()
Distance : 6

194
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 4

195
Tree	c . canInline ( c . getScope () , c . . () )
Code	c . canInline ( c . getScope () , c . . () )
Distance : 6

196
Tree	getScope () . canInline ( c . canInline () , c )
Code	getScope () . canInline ( c . canInline () , c )
Distance : 6

197
Tree	canInline () Test
Code	canInline () Test
Distance : 7

198
Tree	c . canInline ( c , TypeInferenceMode.NEITHER )
Code	c . canInline ( c , TypeInferenceMode.NEITHER )
Distance : 4

199
Tree	canInline ( c ) . canInline ()
Code	canInline ( c ) . canInline ()
Distance : 6

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	double len = len - strLen ;
Code	double len = len - strLen ;
Distance : 4

1
Tree	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

2
Tree	int len = size > > NUMBER_CONSTANT ;
Code	int len = size > > NUMBER_CONSTANT ;
Distance : 3

3
Tree	int len = len & NUMBER_CONSTANT ;
Code	int len = len & NUMBER_CONSTANT ;
Distance : 4

4
Tree	double len = size / strLen ;
Code	double len = size / strLen ;
Distance : 4

5
Tree	int len = getProperNumerator * ^ ;
Code	int len = getProperNumerator * ^ ;
Distance : 5

6
Tree	int len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

7
Tree	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

8
Tree	int len = ( final ) + strLen ;
Code	int len = ( final ) + strLen ;
Distance : 4

9
Tree	int len = ( super ) + strLen ;
Code	int len = ( super ) + strLen ;
Distance : 4

10
Tree	int len = NUMBER_CONSTANT * strLen - len ;
Code	int len = NUMBER_CONSTANT * strLen - len ;
Distance : 4

11
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

12
Tree	double len = len / strLen ;
Code	double len = len / strLen ;
Distance : 5

13
Tree	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

14
Tree	int len = size + lineSeparator () + strLen ;
Code	int len = size + lineSeparator () + strLen ;
Distance : 4

15
Tree	int len = NUMBER_CONSTANT - strLen ;
Code	int len = NUMBER_CONSTANT - strLen ;
Distance : 3

16
Tree	char len = NUMBER_CONSTANT * thisBuf.length ;
Code	char len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

17
Tree	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 3

18
Tree	int len = ( int ) strLen * strLen ;
Code	int len = ( int ) strLen * strLen ;
Distance : 5

19
Tree	int len = getProperNumerator () - strLen ;
Code	int len = getProperNumerator () - strLen ;
Distance : 4

20
Tree	int len = thisBuf.length % NUMBER_CONSTANT ;
Code	int len = thisBuf.length % NUMBER_CONSTANT ;
Distance : 4

21
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

22
Tree	int len = size + strLen / strLen ;
Code	int len = size + strLen / strLen ;
Distance : 3

23
Tree	double len = ( len + strLen ) + len ;
Code	double len = ( len + strLen ) + len ;
Distance : 6

24
Tree	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

25
Tree	int len = len ;
Code	int len = len ;
Distance : 5

26
Tree	char len = thisBuf.length / NUMBER_CONSTANT ;
Code	char len = thisBuf.length / NUMBER_CONSTANT ;
Distance : 5

27
Tree	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

28
Tree	double len = len ;
Code	double len = len ;
Distance : 6

29
Tree	long len = NUMBER_CONSTANT * strLen - strLen ;
Code	long len = NUMBER_CONSTANT * strLen - strLen ;
Distance : 5

30
Tree	int len = ( strLen < < NUMBER_CONSTANT ) + strLen ;
Code	int len = ( strLen < < NUMBER_CONSTANT ) + strLen ;
Distance : 7

31
Tree	int len = len + strLen - strLen ;
Code	int len = len + strLen - strLen ;
Distance : 4

32
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

33
Tree	double len = STRING_CONSTANT + strLen ;
Code	double len = STRING_CONSTANT + strLen ;
Distance : 5

34
Tree	double len = size / strLen - strLen ;
Code	double len = size / strLen - strLen ;
Distance : 4

35
Tree	double len = len / strLen - strLen ;
Code	double len = len / strLen - strLen ;
Distance : 5

36
Tree	int len = size + strLen + STRING_CONSTANT ;
Code	int len = size + strLen + STRING_CONSTANT ;
Distance : 2

37
Tree	int len = size ^ strLen ;
Code	int len = size ^ strLen ;
Distance : 3

38
Tree	long len = thisBuf.length % NUMBER_CONSTANT ;
Code	long len = thisBuf.length % NUMBER_CONSTANT ;
Distance : 5

39
Tree	int len = NUMBER_CONSTANT - len ;
Code	int len = NUMBER_CONSTANT - len ;
Distance : 4

40
Tree	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen ;
Distance : 5

41
Tree	int len = coefficients.length () != thisBuf.length ;
Code	int len = coefficients.length () != thisBuf.length ;
Distance : 5

42
Tree	int len = size - strLen ;
Code	int len = size - strLen ;
Distance : 2

43
Tree	int len = ( CHAR_CONS ) + strLen ;
Code	int len = ( CHAR_CONS ) + strLen ;
Distance : 4

44
Tree	int len = ( long ) thisBuf.length * thisBuf.length ;
Code	int len = ( long ) thisBuf.length * thisBuf.length ;
Distance : 6

45
Tree	int len = ( len + strLen ) + size ;
Code	int len = ( len + strLen ) + size ;
Distance : 5

46
Tree	double len = size & NUMBER_CONSTANT ;
Code	double len = size & NUMBER_CONSTANT ;
Distance : 4

47
Tree	final double len = NUMBER_CONSTANT * thisBuf.length ;
Code	final double len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

48
Tree	int len = size / strLen ;
Code	int len = size / strLen ;
Distance : 3

49
Tree	double len = NUMBER_CONSTANT - strLen ;
Code	double len = NUMBER_CONSTANT - strLen ;
Distance : 4

50
Tree	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 5

51
Tree	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + len + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + len + STRING_CONSTANT ;
Distance : 7

52
Tree	int len = STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 4

53
Tree	int len = ( case ) + strLen ;
Code	int len = ( case ) + strLen ;
Distance : 4

54
Tree	double len = NUMBER_CONSTANT * strLen - strLen ;
Code	double len = NUMBER_CONSTANT * strLen - strLen ;
Distance : 5

55
Tree	int len = ( long ) strLen * strLen ;
Code	int len = ( long ) strLen * strLen ;
Distance : 5

56
Tree	int len = ( int ) thisBuf.length * thisBuf.length ;
Code	int len = ( int ) thisBuf.length * thisBuf.length ;
Distance : 6

57
Tree	final int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	final int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

58
Tree	int len = ( len + strLen ) + len ;
Code	int len = ( len + strLen ) + len ;
Distance : 5

59
Tree	int len = size + getLeftElement () + strLen ;
Code	int len = size + getLeftElement () + strLen ;
Distance : 4

60
Tree	int len = Sigmoid > > > NUMBER_CONSTANT ;
Code	int len = Sigmoid > > > NUMBER_CONSTANT ;
Distance : 4

61
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

62
Tree	int len = len > > NUMBER_CONSTANT ;
Code	int len = len > > NUMBER_CONSTANT ;
Distance : 4

63
Tree	int len = size + strLen - strLen ;
Code	int len = size + strLen - strLen ;
Distance : 3

64
Tree	int len = len == CHAR_CONS ;
Code	int len = len == CHAR_CONS ;
Distance : 5

65
Tree	long len = STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 5

66
Tree	int len = Sigmoid () - strLen ;
Code	int len = Sigmoid () - strLen ;
Distance : 4

67
Tree	double len = ( len < < NUMBER_CONSTANT ) + strLen ;
Code	double len = ( len < < NUMBER_CONSTANT ) + strLen ;
Distance : 8

68
Tree	int len = len + strLen + STRING_CONSTANT ;
Code	int len = len + strLen + STRING_CONSTANT ;
Distance : 3

69
Tree	int len = size + strLen + strLen + strLen ;
Code	int len = size + strLen + strLen + strLen ;
Distance : 4

70
Tree	int len = requirePrinter () * CHAR_CONS ;
Code	int len = requirePrinter () * CHAR_CONS ;
Distance : 5

71
Tree	int len = len + lineSeparator () + strLen ;
Code	int len = len + lineSeparator () + strLen ;
Distance : 5

72
Tree	int len = NUMBER_CONSTANT * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 5

73
Tree	int len = len + STRING_CONSTANT + thisBuf.length ;
Code	int len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 4

74
Tree	char len = STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 5

75
Tree	int len = size / strLen - strLen ;
Code	int len = size / strLen - strLen ;
Distance : 3

76
Tree	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

77
Tree	int len = getProperNumerator () * CHAR_CONS ;
Code	int len = getProperNumerator () * CHAR_CONS ;
Distance : 5

78
Tree	int len = size & NUMBER_CONSTANT ;
Code	int len = size & NUMBER_CONSTANT ;
Distance : 3

79
Tree	int len = size + strLen + strLen + len ;
Code	int len = size + strLen + strLen + len ;
Distance : 4

80
Tree	int len = size ;
Code	int len = size ;
Distance : 4

81
Tree	int len = len ^ strLen ;
Code	int len = len ^ strLen ;
Distance : 4

82
Tree	double len = len & NUMBER_CONSTANT ;
Code	double len = len & NUMBER_CONSTANT ;
Distance : 5

83
Tree	int len = size && ^ ;
Code	int len = size && ^ ;
Distance : 4

84
Tree	int len = size + getProperNumerator () + strLen ;
Code	int len = size + getProperNumerator () + strLen ;
Distance : 4

85
Tree	int len = len / strLen ;
Code	int len = len / strLen ;
Distance : 4

86
Tree	int len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 8

87
Tree	double len = size > > NUMBER_CONSTANT ;
Code	double len = size > > NUMBER_CONSTANT ;
Distance : 4

88
Tree	int len = thisBuf.length + NUMBER_CONSTANT ;
Code	int len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 3

89
Tree	int len = ( size + strLen ) + len ;
Code	int len = ( size + strLen ) + len ;
Distance : 4

90
Tree	final double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	final double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 8

91
Tree	double len = len + strLen - strLen ;
Code	double len = len + strLen - strLen ;
Distance : 5

92
Tree	int len = size + STRING_CONSTANT + thisBuf.length ;
Code	int len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 3

93
Tree	double len = size + STRING_CONSTANT + thisBuf.length ;
Code	double len = size + STRING_CONSTANT + thisBuf.length ;
Distance : 4

94
Tree	int len = getProperNumerator () != thisBuf.length ;
Code	int len = getProperNumerator () != thisBuf.length ;
Distance : 5

95
Tree	double len = len == CHAR_CONS ;
Code	double len = len == CHAR_CONS ;
Distance : 6

96
Tree	final int len = NUMBER_CONSTANT * thisBuf.length ;
Code	final int len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

97
Tree	double len = ( long ) thisBuf.length * thisBuf.length ;
Code	double len = ( long ) thisBuf.length * thisBuf.length ;
Distance : 7

98
Tree	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + len ;
Distance : 5

99
Tree	long len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

100
Tree	int len = len % NUMBER_CONSTANT ;
Code	int len = len % NUMBER_CONSTANT ;
Distance : 4

101
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

102
Tree	int len = thisBuf.length * strLen * CHAR_CONS ;
Code	int len = thisBuf.length * strLen * CHAR_CONS ;
Distance : 4

103
Tree	long len = thisBuf.length + strLen ;
Code	long len = thisBuf.length + strLen ;
Distance : 5

104
Tree	int len = STRING_CONSTANT + len + STRING_CONSTANT + strLen + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + len + STRING_CONSTANT + strLen + STRING_CONSTANT ;
Distance : 7

105
Tree	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

106
Tree	int len = size % NUMBER_CONSTANT ;
Code	int len = size % NUMBER_CONSTANT ;
Distance : 3

107
Tree	int len = ( long ) strLen * len ;
Code	int len = ( long ) strLen * len ;
Distance : 5

108
Tree	int len = len / strLen - strLen ;
Code	int len = len / strLen - strLen ;
Distance : 4

109
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

110
Tree	int len = thisBuf.length * strLen * ^ ;
Code	int len = thisBuf.length * strLen * ^ ;
Distance : 4

111
Tree	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen + STRING_CONSTANT ;
Distance : 7

112
Tree	int len = coefficients.length () * CHAR_CONS ;
Code	int len = coefficients.length () * CHAR_CONS ;
Distance : 5

113
Tree	int len = len + strLen ;
Code	int len = len + strLen ;
Distance : 4

114
Tree	int len = size == CHAR_CONS ;
Code	int len = size == CHAR_CONS ;
Distance : 4

115
Tree	int len = STRING_CONSTANT + len + STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + len + STRING_CONSTANT + strLen ;
Distance : 6

116
Tree	double len = size - strLen ;
Code	double len = size - strLen ;
Distance : 3

117
Tree	long len = NUMBER_CONSTANT * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

118
Tree	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 6

119
Tree	int len = size + strLen ;
Code	int len = size + strLen ;
Distance : 3

120
Tree	int len = len + strLen + strLen + strLen ;
Code	int len = len + strLen + strLen + strLen ;
Distance : 5

121
Tree	int len = len + strLen / strLen ;
Code	int len = len + strLen / strLen ;
Distance : 4

122
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

123
Tree	double len = thisBuf.length + NUMBER_CONSTANT ;
Code	double len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

124
Tree	int len = len && ^ ;
Code	int len = len && ^ ;
Distance : 5

125
Tree	int len = ( len < < NUMBER_CONSTANT ) + strLen ;
Code	int len = ( len < < NUMBER_CONSTANT ) + strLen ;
Distance : 7

126
Tree	double len = len + strLen + STRING_CONSTANT ;
Code	double len = len + strLen + STRING_CONSTANT ;
Distance : 4

127
Tree	int len = Sigmoid () != thisBuf.length ;
Code	int len = Sigmoid () != thisBuf.length ;
Distance : 5

128
Tree	final int len = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Code	final int len = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Distance : 7

129
Tree	double len = size + strLen + STRING_CONSTANT ;
Code	double len = size + strLen + STRING_CONSTANT ;
Distance : 3

130
Tree	double len = size + strLen / strLen ;
Code	double len = size + strLen / strLen ;
Distance : 4

131
Tree	final int strLen = NUMBER_CONSTANT * thisBuf.length ;
Code	final int strLen = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

132
Tree	double len = len + STRING_CONSTANT + thisBuf.length ;
Code	double len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

133
Tree	long len = NUMBER_CONSTANT - strLen ;
Code	long len = NUMBER_CONSTANT - strLen ;
Distance : 4

134
Tree	int len = thisBuf.length * strLen * += ;
Code	int len = thisBuf.length * strLen * += ;
Distance : 4

135
Tree	double len = size ^ strLen ;
Code	double len = size ^ strLen ;
Distance : 4

136
Tree	long len = thisBuf.length / NUMBER_CONSTANT ;
Code	long len = thisBuf.length / NUMBER_CONSTANT ;
Distance : 5

137
Tree	char len = thisBuf.length % NUMBER_CONSTANT ;
Code	char len = thisBuf.length % NUMBER_CONSTANT ;
Distance : 5

138
Tree	int len = requirePrinter () != thisBuf.length ;
Code	int len = requirePrinter () != thisBuf.length ;
Distance : 5

139
Tree	int len = ( byte ) thisBuf.length * thisBuf.length ;
Code	int len = ( byte ) thisBuf.length * thisBuf.length ;
Distance : 6

140
Tree	double len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen + STRING_CONSTANT ;
Distance : 8

141
Tree	double len = STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 5

142
Tree	char len = thisBuf.length + NUMBER_CONSTANT ;
Code	char len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

143
Tree	final int len = size & NUMBER_CONSTANT ;
Code	final int len = size & NUMBER_CONSTANT ;
Distance : 4

144
Tree	double len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 10

145
Tree	int len = len + strLen + strLen + len ;
Code	int len = len + strLen + strLen + len ;
Distance : 5

146
Tree	double len = len > > NUMBER_CONSTANT ;
Code	double len = len > > NUMBER_CONSTANT ;
Distance : 5

147
Tree	double len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen ;
Code	double len = STRING_CONSTANT + strLen + STRING_CONSTANT + strLen ;
Distance : 6

148
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

149
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

150
Tree	int len = thisBuf.length * strLen * ++ ;
Code	int len = thisBuf.length * strLen * ++ ;
Distance : 4

151
Tree	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Code	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Distance : 4

152
Tree	int len = Sigmoid () * CHAR_CONS ;
Code	int len = Sigmoid () * CHAR_CONS ;
Distance : 5

153
Tree	double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

154
Tree	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Distance : 6

155
Tree	int len = len - strLen ;
Code	int len = len - strLen ;
Distance : 3

156
Tree	int len = thisBuf.length + len ;
Code	int len = thisBuf.length + len ;
Distance : 4

157
Tree	int len = size && &= ;
Code	int len = size && &= ;
Distance : 4

158
Tree	long len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	long len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

159
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

160
Tree	long len = thisBuf.length + NUMBER_CONSTANT ;
Code	long len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

161
Tree	final long len = NUMBER_CONSTANT * thisBuf.length ;
Code	final long len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 7

162
Tree	double len = len % NUMBER_CONSTANT ;
Code	double len = len % NUMBER_CONSTANT ;
Distance : 5

163
Tree	double len = size + strLen - strLen ;
Code	double len = size + strLen - strLen ;
Distance : 4

164
Tree	int len = coefficients.length () - strLen ;
Code	int len = coefficients.length () - strLen ;
Distance : 4

165
Tree	int len = NUMBER_CONSTANT * strLen - strLen ;
Code	int len = NUMBER_CONSTANT * strLen - strLen ;
Distance : 4

166
Tree	final int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Code	final int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Distance : 7

167
Tree	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 6

168
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

169
Tree	double len = NUMBER_CONSTANT * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

170
Tree	double len = thisBuf.length + strLen ;
Code	double len = thisBuf.length + strLen ;
Distance : 5

171
Tree	int len = requirePrinter > > > NUMBER_CONSTANT ;
Code	int len = requirePrinter > > > NUMBER_CONSTANT ;
Distance : 4

172
Tree	final double len = size & NUMBER_CONSTANT ;
Code	final double len = size & NUMBER_CONSTANT ;
Distance : 5

173
Tree	int len = requirePrinter * ^ ;
Code	int len = requirePrinter * ^ ;
Distance : 5

174
Tree	int len = coefficients.length * ^ ;
Code	int len = coefficients.length * ^ ;
Distance : 5

175
Tree	int len = getProperNumerator * super ;
Code	int len = getProperNumerator * super ;
Distance : 5

176
Tree	double len = thisBuf.length % NUMBER_CONSTANT ;
Code	double len = thisBuf.length % NUMBER_CONSTANT ;
Distance : 5

177
Tree	int len = coefficients.length > > > NUMBER_CONSTANT ;
Code	int len = coefficients.length > > > NUMBER_CONSTANT ;
Distance : 4

178
Tree	double len = size == CHAR_CONS ;
Code	double len = size == CHAR_CONS ;
Distance : 5

179
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

180
Tree	double len = size ;
Code	double len = size ;
Distance : 5

181
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

182
Tree	final int len = len & NUMBER_CONSTANT ;
Code	final int len = len & NUMBER_CONSTANT ;
Distance : 5

183
Tree	long len = STRING_CONSTANT + strLen ;
Code	long len = STRING_CONSTANT + strLen ;
Distance : 5

184
Tree	double len = ( long ) strLen * strLen ;
Code	double len = ( long ) strLen * strLen ;
Distance : 6

185
Tree	int len = len && &= ;
Code	int len = len && &= ;
Distance : 5

186
Tree	double len = len ^ strLen ;
Code	double len = len ^ strLen ;
Distance : 5

187
Tree	double len = size % NUMBER_CONSTANT ;
Code	double len = size % NUMBER_CONSTANT ;
Distance : 4

188
Tree	int len = ( size < < NUMBER_CONSTANT ) + strLen ;
Code	int len = ( size < < NUMBER_CONSTANT ) + strLen ;
Distance : 6

189
Tree	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 6

190
Tree	int len = requirePrinter () - strLen ;
Code	int len = requirePrinter () - strLen ;
Distance : 4

191
Tree	int len = thisBuf.length / NUMBER_CONSTANT ;
Code	int len = thisBuf.length / NUMBER_CONSTANT ;
Distance : 4

192
Tree	double len = len + strLen / strLen ;
Code	double len = len + strLen / strLen ;
Distance : 5

193
Tree	double len = thisBuf.length / NUMBER_CONSTANT ;
Code	double len = thisBuf.length / NUMBER_CONSTANT ;
Distance : 5

194
Tree	double len = len + strLen ;
Code	double len = len + strLen ;
Distance : 5

195
Tree	final int len = strLen & NUMBER_CONSTANT ;
Code	final int len = strLen & NUMBER_CONSTANT ;
Distance : 4

196
Tree	double len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

197
Tree	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

198
Tree	double len = size + strLen ;
Code	double len = size + strLen ;
Distance : 4

199
Tree	int len = thisBuf.length + strLen ;
Code	int len = thisBuf.length + strLen ;
Distance : 4

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	skipStringLiteralEscapeSequence ( i ) == NUMBER_CONSTANT
Code	skipStringLiteralEscapeSequence ( i ) == NUMBER_CONSTANT
Distance : 5

1
Tree	i . isStruct ( i , i , i ) != thisBuf.length
Code	i . isStruct ( i , i , i ) != thisBuf.length
Distance : 11

2
Tree	i == i < %
Code	i == i < %
Distance : 3

3
Tree	i == i < >=
Code	i == i < >=
Distance : 3

4
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

5
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

6
Tree	i != null < ?
Code	i != null < ?
Distance : 3

7
Tree	i == thisBuf.length < %
Code	i == thisBuf.length < %
Distance : 3

8
Tree	i . isStruct () != thisBuf.length
Code	i . isStruct () != thisBuf.length
Distance : 5

9
Tree	isBuiltinObject () != i
Code	isBuiltinObject () != i
Distance : 4

10
Tree	getIgnoredMatcher () == NUMBER_CONSTANT
Code	getIgnoredMatcher () == NUMBER_CONSTANT
Distance : 4

11
Tree	i / i . abs ()
Code	i / i . abs ()
Distance : 5

12
Tree	i == thisBuf.length < ^
Code	i == thisBuf.length < ^
Distance : 3

13
Tree	i < NUMBER_CONSTANT Test
Code	i < NUMBER_CONSTANT Test
Distance : 2

14
Tree	thisBuf.length i thisBuf.length class
Code	thisBuf.length i thisBuf.length class
Distance : 3

15
Tree	i / i . valueOf ()
Code	i / i . valueOf ()
Distance : 5

16
Tree	stubInfo () == NUMBER_CONSTANT
Code	stubInfo () == NUMBER_CONSTANT
Distance : 4

17
Tree	i + NUMBER_CONSTANT Test
Code	i + NUMBER_CONSTANT Test
Distance : 3

18
Tree	this == i Test
Code	this == i Test
Distance : 4

19
Tree	stubInfo () != i
Code	stubInfo () != i
Distance : 4

20
Tree	thisBuf.length < thisBuf.length notifyListeners
Code	thisBuf.length < thisBuf.length notifyListeners
Distance : 3

21
Tree	NUMBER_CONSTANT / thisBuf.length class
Code	NUMBER_CONSTANT / thisBuf.length class
Distance : 4

22
Tree	i != super();
Code	i != super();
Distance : 2

23
Tree	size != size
Code	size != size
Distance : 2

24
Tree	NUMBER_CONSTANT / thisBuf.length
Code	NUMBER_CONSTANT / thisBuf.length
Distance : 3

25
Tree	i == i < *=
Code	i == i < *=
Distance : 3

26
Tree	i . getBeta () . set () != thisBuf.length
Code	i . getBeta () . set () != thisBuf.length
Distance : 8

27
Tree	i == super();
Code	i == super();
Distance : 2

28
Tree	i < getNormalizedReferenceName ()
Code	i < getNormalizedReferenceName ()
Distance : 2

29
Tree	isBuiltinObject () thisBuf.length getNormalizedReferenceName ( i )
Code	isBuiltinObject () thisBuf.length getNormalizedReferenceName ( i )
Distance : 7

30
Tree	i + size + STRING_CONSTANT
Code	i + size + STRING_CONSTANT
Distance : 3

31
Tree	i != size
Code	i != size
Distance : 1

32
Tree	this . isBuiltinObject () != thisBuf.length
Code	this . isBuiltinObject () != thisBuf.length
Distance : 6

33
Tree	i == thisBuf.length && size
Code	i == thisBuf.length && size
Distance : 3

34
Tree	i && i . getGeneratorUpperBounds ()
Code	i && i . getGeneratorUpperBounds ()
Distance : 5

35
Tree	i == i < /
Code	i == i < /
Distance : 3

36
Tree	i == thisBuf.length i /
Code	i == thisBuf.length i /
Distance : 4

37
Tree	i != null && i . valueOf ( i , i , i )
Code	i != null && i . valueOf ( i , i , i )
Distance : 13

38
Tree	size + size + STRING_CONSTANT
Code	size + size + STRING_CONSTANT
Distance : 4

39
Tree	i / getNormalizedReferenceName ()
Code	i / getNormalizedReferenceName ()
Distance : 3

40
Tree	i == null
Code	i == null
Distance : 2

41
Tree	NUMBER_CONSTANT / thisBuf.length array
Code	NUMBER_CONSTANT / thisBuf.length array
Distance : 4

42
Tree	i < < NUMBER_CONSTANT Class
Code	i < < NUMBER_CONSTANT Class
Distance : 3

43
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

44
Tree	this . i == i
Code	this . i == i
Distance : 4

45
Tree	this . i == NUMBER_CONSTANT
Code	this . i == NUMBER_CONSTANT
Distance : 4

46
Tree	STRING_CONSTANT + i . getDimension ()
Code	STRING_CONSTANT + i . getDimension ()
Distance : 5

47
Tree	i < getBooleanProp ()
Code	i < getBooleanProp ()
Distance : 2

48
Tree	i < NUMBER_CONSTANT
Code	i < NUMBER_CONSTANT
Distance : 1

49
Tree	i + i + STRING_CONSTANT
Code	i + i + STRING_CONSTANT
Distance : 4

50
Tree	i . stubInfo () != thisBuf.length
Code	i . stubInfo () != thisBuf.length
Distance : 5

51
Tree	stubInfo ( i ) != thisBuf.length
Code	stubInfo ( i ) != thisBuf.length
Distance : 5

52
Tree	getIgnoredMatcher ( i ) == i
Code	getIgnoredMatcher ( i ) == i
Distance : 5

53
Tree	i . getBeta () != thisBuf.length
Code	i . getBeta () != thisBuf.length
Distance : 5

54
Tree	getIgnoredMatcher () != thisBuf.length
Code	getIgnoredMatcher () != thisBuf.length
Distance : 4

55
Tree	i / i
Code	i / i
Distance : 2

56
Tree	i . valueOf () thisBuf.length getIgnoredMatcher ( i )
Code	i . valueOf () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

57
Tree	skipStringLiteralEscapeSequence () < getNormalizedReferenceName ( i )
Code	skipStringLiteralEscapeSequence () < getNormalizedReferenceName ( i )
Distance : 6

58
Tree	i . isStruct ( i ) != thisBuf.length
Code	i . isStruct ( i ) != thisBuf.length
Distance : 7

59
Tree	i / SECONDS_MILLIS ()
Code	i / SECONDS_MILLIS ()
Distance : 3

60
Tree	thisBuf.length == super();
Code	thisBuf.length == super();
Distance : 3

61
Tree	i / size
Code	i / size
Distance : 1

62
Tree	getIgnoredMatcher () < i
Code	getIgnoredMatcher () < i
Distance : 3

63
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

64
Tree	i < < NUMBER_CONSTANT
Code	i < < NUMBER_CONSTANT
Distance : 2

65
Tree	i == null thisBuf.length /
Code	i == null thisBuf.length /
Distance : 4

66
Tree	skipStringLiteralEscapeSequence ( i ) i getNormalizedReferenceName ( i )
Code	skipStringLiteralEscapeSequence ( i ) i getNormalizedReferenceName ( i )
Distance : 8

67
Tree	this . unescape () != thisBuf.length
Code	this . unescape () != thisBuf.length
Distance : 6

68
Tree	stubInfo ( i ) < getNormalizedReferenceName ( i )
Code	stubInfo ( i ) < getNormalizedReferenceName ( i )
Distance : 7

69
Tree	size != i
Code	size != i
Distance : 3

70
Tree	i + size . i ()
Code	i + size . i ()
Distance : 4

71
Tree	i == null thisBuf.length extends
Code	i == null thisBuf.length extends
Distance : 4

72
Tree	STRING_CONSTANT + i . hashCode ()
Code	STRING_CONSTANT + i . hashCode ()
Distance : 5

73
Tree	i != null thisBuf.length /
Code	i != null thisBuf.length /
Distance : 4

74
Tree	this . stubInfo () != thisBuf.length
Code	this . stubInfo () != thisBuf.length
Distance : 6

75
Tree	i != null && i . abs ( i , i , i )
Code	i != null && i . abs ( i , i , i )
Distance : 13

76
Tree	i + i . size ()
Code	i + i . size ()
Distance : 4

77
Tree	i && i . longValue ()
Code	i && i . longValue ()
Distance : 5

78
Tree	i == break;
Code	i == break;
Distance : 2

79
Tree	i >= i
Code	i >= i
Distance : 2

80
Tree	this . size == size
Code	this . size == size
Distance : 4

81
Tree	i . valueOf () . longValue () != thisBuf.length
Code	i . valueOf () . longValue () != thisBuf.length
Distance : 8

82
Tree	this . i . getExportPostfix () != thisBuf.length
Code	this . i . getExportPostfix () != thisBuf.length
Distance : 7

83
Tree	i && i == thisBuf.length
Code	i && i == thisBuf.length
Distance : 4

84
Tree	size == null
Code	size == null
Distance : 3

85
Tree	i != break;
Code	i != break;
Distance : 2

86
Tree	size < < NUMBER_CONSTANT
Code	size < < NUMBER_CONSTANT
Distance : 3

87
Tree	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Code	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

88
Tree	i . valueOf () . set () != thisBuf.length
Code	i . valueOf () . set () != thisBuf.length
Distance : 8

89
Tree	i . stubInfo ( i ) != thisBuf.length
Code	i . stubInfo ( i ) != thisBuf.length
Distance : 7

90
Tree	this . i == size
Code	this . i == size
Distance : 3

91
Tree	i . stubInfo () . set () != thisBuf.length
Code	i . stubInfo () . set () != thisBuf.length
Distance : 8

92
Tree	getIgnoredMatcher () i getNormalizedReferenceName ( i )
Code	getIgnoredMatcher () i getNormalizedReferenceName ( i )
Distance : 6

93
Tree	i >= size
Code	i >= size
Distance : 1

94
Tree	skipStringLiteralEscapeSequence () != i
Code	skipStringLiteralEscapeSequence () != i
Distance : 4

95
Tree	i . stubInfo ( i , i , i ) != thisBuf.length
Code	i . stubInfo ( i , i , i ) != thisBuf.length
Distance : 11

96
Tree	i . getBeta ( i ) != thisBuf.length
Code	i . getBeta ( i ) != thisBuf.length
Distance : 7

97
Tree	size && size == thisBuf.length
Code	size && size == thisBuf.length
Distance : 4

98
Tree	size + NUMBER_CONSTANT
Code	size + NUMBER_CONSTANT
Distance : 3

99
Tree	i . valueOf ( i , i , i ) != thisBuf.length
Code	i . valueOf ( i , i , i ) != thisBuf.length
Distance : 11

100
Tree	i . valueOf () != thisBuf.length
Code	i . valueOf () != thisBuf.length
Distance : 5

101
Tree	size < NUMBER_CONSTANT
Code	size < NUMBER_CONSTANT
Distance : 2

102
Tree	size + i + STRING_CONSTANT
Code	size + i + STRING_CONSTANT
Distance : 4

103
Tree	size / size
Code	size / size
Distance : 2

104
Tree	isBuiltinObject ( i ) == i
Code	isBuiltinObject ( i ) == i
Distance : 5

105
Tree	getIgnoredMatcher ( i ) i getNormalizedReferenceName ( i )
Code	getIgnoredMatcher ( i ) i getNormalizedReferenceName ( i )
Distance : 8

106
Tree	size / i
Code	size / i
Distance : 3

107
Tree	STRING_CONSTANT + i . toLowerCase ()
Code	STRING_CONSTANT + i . toLowerCase ()
Distance : 5

108
Tree	thisBuf.length == break;
Code	thisBuf.length == break;
Distance : 3

109
Tree	thisBuf.length thisBuf.length thisBuf.length array
Code	thisBuf.length thisBuf.length thisBuf.length array
Distance : 4

110
Tree	thisBuf.length == return;
Code	thisBuf.length == return;
Distance : 3

111
Tree	i == thisBuf.length < >=
Code	i == thisBuf.length < >=
Distance : 3

112
Tree	i / i . intValue ()
Code	i / i . intValue ()
Distance : 5

113
Tree	isBuiltinObject ( i ) < getNormalizedReferenceName ( i )
Code	isBuiltinObject ( i ) < getNormalizedReferenceName ( i )
Distance : 7

114
Tree	size + i . i ()
Code	size + i . i ()
Distance : 5

115
Tree	this . i == NUMBER_CONSTANT Class
Code	this . i == NUMBER_CONSTANT Class
Distance : 5

116
Tree	size >= size
Code	size >= size
Distance : 2

117
Tree	i < thisBuf.length Class
Code	i < thisBuf.length Class
Distance : 2

118
Tree	i < NUMBER_CONSTANT Class
Code	i < NUMBER_CONSTANT Class
Distance : 2

119
Tree	i < thisBuf.length Test
Code	i < thisBuf.length Test
Distance : 2

120
Tree	getIgnoredMatcher () thisBuf.length getIgnoredMatcher ( i )
Code	getIgnoredMatcher () thisBuf.length getIgnoredMatcher ( i )
Distance : 7

121
Tree	i > NUMBER_CONSTANT Test
Code	i > NUMBER_CONSTANT Test
Distance : 3

122
Tree	i == thisBuf.length Class
Code	i == thisBuf.length Class
Distance : 3

123
Tree	thisBuf.length thisBuf.length thisBuf.length
Code	thisBuf.length thisBuf.length thisBuf.length
Distance : 3

124
Tree	this == i Class
Code	this == i Class
Distance : 4

125
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 2

126
Tree	size == thisBuf.length && i
Code	size == thisBuf.length && i
Distance : 5

127
Tree	i != null && i . intValue ( i , i , i )
Code	i != null && i . intValue ( i , i , i )
Distance : 13

128
Tree	this . i == NUMBER_CONSTANT Test
Code	this . i == NUMBER_CONSTANT Test
Distance : 5

129
Tree	isBuiltinObject () == NUMBER_CONSTANT
Code	isBuiltinObject () == NUMBER_CONSTANT
Distance : 4

130
Tree	i / getLeftElement ()
Code	i / getLeftElement ()
Distance : 3

131
Tree	i != null && i . getValue ( i , i , i )
Code	i != null && i . getValue ( i , i , i )
Distance : 13

132
Tree	this . i . stubInfo () != thisBuf.length
Code	this . i . stubInfo () != thisBuf.length
Distance : 7

133
Tree	i + NUMBER_CONSTANT
Code	i + NUMBER_CONSTANT
Distance : 2

134
Tree	skipStringLiteralEscapeSequence () == NUMBER_CONSTANT
Code	skipStringLiteralEscapeSequence () == NUMBER_CONSTANT
Distance : 4

135
Tree	i && i . intValue ()
Code	i && i . intValue ()
Distance : 5

136
Tree	stubInfo () && i
Code	stubInfo () && i
Distance : 4

137
Tree	stubInfo ( i ) == NUMBER_CONSTANT
Code	stubInfo ( i ) == NUMBER_CONSTANT
Distance : 5

138
Tree	i && i . getBeta ()
Code	i && i . getBeta ()
Distance : 5

139
Tree	i + NUMBER_CONSTANT Class
Code	i + NUMBER_CONSTANT Class
Distance : 3

140
Tree	i < < NUMBER_CONSTANT Test
Code	i < < NUMBER_CONSTANT Test
Distance : 3

141
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

142
Tree	i == i
Code	i == i
Distance : 2

143
Tree	this == i
Code	this == i
Distance : 3

144
Tree	i == thisBuf.length Test
Code	i == thisBuf.length Test
Distance : 3

145
Tree	i != null
Code	i != null
Distance : 2

146
Tree	getIgnoredMatcher () == i
Code	getIgnoredMatcher () == i
Distance : 4

147
Tree	stubInfo ( i ) == i
Code	stubInfo ( i ) == i
Distance : 5

148
Tree	isBuiltinObject () == i
Code	isBuiltinObject () == i
Distance : 4

149
Tree	this == size
Code	this == size
Distance : 2

150
Tree	isBuiltinObject ( i ) != thisBuf.length
Code	isBuiltinObject ( i ) != thisBuf.length
Distance : 5

151
Tree	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Code	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Distance : 5

152
Tree	this . size == i
Code	this . size == i
Distance : 4

153
Tree	skipStringLiteralEscapeSequence () == i
Code	skipStringLiteralEscapeSequence () == i
Distance : 4

154
Tree	STRING_CONSTANT + i . valueOf ()
Code	STRING_CONSTANT + i . valueOf ()
Distance : 5

155
Tree	getIgnoredMatcher () != i
Code	getIgnoredMatcher () != i
Distance : 4

156
Tree	i + i . i ()
Code	i + i . i ()
Distance : 5

157
Tree	isBuiltinObject () < i
Code	isBuiltinObject () < i
Distance : 3

158
Tree	i < IncrementalCheckMode.OFF ()
Code	i < IncrementalCheckMode.OFF ()
Distance : 2

159
Tree	i != i
Code	i != i
Distance : 2

160
Tree	isBuiltinObject () && i
Code	isBuiltinObject () && i
Distance : 4

161
Tree	stubInfo () == i
Code	stubInfo () == i
Distance : 4

162
Tree	i < IncrementalCheckMode.GENERATE_IJS ()
Code	i < IncrementalCheckMode.GENERATE_IJS ()
Distance : 2

163
Tree	skipStringLiteralEscapeSequence () && i
Code	skipStringLiteralEscapeSequence () && i
Distance : 4

164
Tree	getIgnoredMatcher () && i
Code	getIgnoredMatcher () && i
Distance : 4

165
Tree	skipStringLiteralEscapeSequence () < i
Code	skipStringLiteralEscapeSequence () < i
Distance : 3

166
Tree	stubInfo () < i
Code	stubInfo () < i
Distance : 3

167
Tree	isBuiltinObject ( i ) == NUMBER_CONSTANT
Code	isBuiltinObject ( i ) == NUMBER_CONSTANT
Distance : 5

168
Tree	getIgnoredMatcher ( i ) == NUMBER_CONSTANT
Code	getIgnoredMatcher ( i ) == NUMBER_CONSTANT
Distance : 5

169
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 1

170
Tree	i != null thisBuf.length ^
Code	i != null thisBuf.length ^
Distance : 4

171
Tree	skipStringLiteralEscapeSequence ( i ) == i
Code	skipStringLiteralEscapeSequence ( i ) == i
Distance : 5

172
Tree	i == null thisBuf.length ?
Code	i == null thisBuf.length ?
Distance : 4

173
Tree	size == i
Code	size == i
Distance : 3

174
Tree	this . i . isBuiltinObject () != thisBuf.length
Code	this . i . isBuiltinObject () != thisBuf.length
Distance : 7

175
Tree	i . valueOf ( i ) != thisBuf.length
Code	i . valueOf ( i ) != thisBuf.length
Distance : 7

176
Tree	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Code	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

177
Tree	isBuiltinObject () != thisBuf.length
Code	isBuiltinObject () != thisBuf.length
Distance : 4

178
Tree	i . stubInfo () thisBuf.length getNormalizedReferenceName ( i )
Code	i . stubInfo () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

179
Tree	this . i . getBottomObject () != thisBuf.length
Code	this . i . getBottomObject () != thisBuf.length
Distance : 7

180
Tree	skipStringLiteralEscapeSequence () != thisBuf.length
Code	skipStringLiteralEscapeSequence () != thisBuf.length
Distance : 4

181
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

182
Tree	i / getIgnoredMatcher ()
Code	i / getIgnoredMatcher ()
Distance : 3

183
Tree	size != null
Code	size != null
Distance : 3

184
Tree	size == size
Code	size == size
Distance : 2

185
Tree	i / i . getInvocation ()
Code	i / i . getInvocation ()
Distance : 5

186
Tree	size < thisBuf.length
Code	size < thisBuf.length
Distance : 2

187
Tree	stubInfo () != thisBuf.length
Code	stubInfo () != thisBuf.length
Distance : 4

188
Tree	i && size == thisBuf.length
Code	i && size == thisBuf.length
Distance : 3

189
Tree	getIgnoredMatcher ( i ) != thisBuf.length
Code	getIgnoredMatcher ( i ) != thisBuf.length
Distance : 5

190
Tree	i == size
Code	i == size
Distance : 1

191
Tree	size == thisBuf.length
Code	size == thisBuf.length
Distance : 3

192
Tree	this . size == NUMBER_CONSTANT
Code	this . size == NUMBER_CONSTANT
Distance : 4

193
Tree	thisBuf.length == null
Code	thisBuf.length == null
Distance : 3

194
Tree	this . resetBuilder () != thisBuf.length
Code	this . resetBuilder () != thisBuf.length
Distance : 6

195
Tree	size >= i
Code	size >= i
Distance : 3

196
Tree	i . getBeta ( i , i , i ) != thisBuf.length
Code	i . getBeta ( i , i , i ) != thisBuf.length
Distance : 11

197
Tree	size && i == thisBuf.length
Code	size && i == thisBuf.length
Distance : 4

198
Tree	i > NUMBER_CONSTANT Class
Code	i > NUMBER_CONSTANT Class
Distance : 3

199
Tree	NUMBER_CONSTANT / thisBuf.length notifyListeners
Code	NUMBER_CONSTANT / thisBuf.length notifyListeners
Distance : 4

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	skipStringLiteralEscapeSequence ( i ) == NUMBER_CONSTANT
Code	skipStringLiteralEscapeSequence ( i ) == NUMBER_CONSTANT
Distance : 6

1
Tree	i . isStruct ( i , i , i ) != thisBuf.length
Code	i . isStruct ( i , i , i ) != thisBuf.length
Distance : 11

2
Tree	i == i < %
Code	i == i < %
Distance : 4

3
Tree	i == i < >=
Code	i == i < >=
Distance : 4

4
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

5
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

6
Tree	i != null i ?
Code	i != null i ?
Distance : 4

7
Tree	i == thisBuf.length < %
Code	i == thisBuf.length < %
Distance : 4

8
Tree	i . isStruct () != thisBuf.length
Code	i . isStruct () != thisBuf.length
Distance : 5

9
Tree	isBuiltinObject () != i
Code	isBuiltinObject () != i
Distance : 5

10
Tree	getIgnoredMatcher () == NUMBER_CONSTANT
Code	getIgnoredMatcher () == NUMBER_CONSTANT
Distance : 5

11
Tree	i / i . abs ()
Code	i / i . abs ()
Distance : 4

12
Tree	i == thisBuf.length < ^
Code	i == thisBuf.length < ^
Distance : 4

13
Tree	i < NUMBER_CONSTANT Test
Code	i < NUMBER_CONSTANT Test
Distance : 3

14
Tree	thisBuf.length < thisBuf.length class
Code	thisBuf.length < thisBuf.length class
Distance : 4

15
Tree	i / i . valueOf ()
Code	i / i . valueOf ()
Distance : 4

16
Tree	stubInfo () == NUMBER_CONSTANT
Code	stubInfo () == NUMBER_CONSTANT
Distance : 5

17
Tree	i + NUMBER_CONSTANT Test
Code	i + NUMBER_CONSTANT Test
Distance : 4

18
Tree	this == i Test
Code	this == i Test
Distance : 5

19
Tree	stubInfo () != i
Code	stubInfo () != i
Distance : 5

20
Tree	thisBuf.length < thisBuf.length notifyListeners
Code	thisBuf.length < thisBuf.length notifyListeners
Distance : 4

21
Tree	NUMBER_CONSTANT / thisBuf.length class
Code	NUMBER_CONSTANT / thisBuf.length class
Distance : 5

22
Tree	i != super();
Code	i != super();
Distance : 4

23
Tree	size != size
Code	size != size
Distance : 4

24
Tree	NUMBER_CONSTANT / thisBuf.length
Code	NUMBER_CONSTANT / thisBuf.length
Distance : 5

25
Tree	i == i < *=
Code	i == i < *=
Distance : 4

26
Tree	i . getBeta () . set () != thisBuf.length
Code	i . getBeta () . set () != thisBuf.length
Distance : 7

27
Tree	i == super();
Code	i == super();
Distance : 4

28
Tree	i < getNormalizedReferenceName ()
Code	i < getNormalizedReferenceName ()
Distance : 3

29
Tree	isBuiltinObject () thisBuf.length getNormalizedReferenceName ( i )
Code	isBuiltinObject () thisBuf.length getNormalizedReferenceName ( i )
Distance : 7

30
Tree	i + size + STRING_CONSTANT
Code	i + size + STRING_CONSTANT
Distance : 4

31
Tree	i != size
Code	i != size
Distance : 3

32
Tree	this . isBuiltinObject () != thisBuf.length
Code	this . isBuiltinObject () != thisBuf.length
Distance : 6

33
Tree	i == thisBuf.length && size
Code	i == thisBuf.length && size
Distance : 3

34
Tree	i && i . getGeneratorUpperBounds ()
Code	i && i . getGeneratorUpperBounds ()
Distance : 4

35
Tree	i == i < /
Code	i == i < /
Distance : 4

36
Tree	i == thisBuf.length < /
Code	i == thisBuf.length < /
Distance : 4

37
Tree	i != null && i . valueOf ( i , i , i )
Code	i != null && i . valueOf ( i , i , i )
Distance : 12

38
Tree	size + size + STRING_CONSTANT
Code	size + size + STRING_CONSTANT
Distance : 5

39
Tree	i / getNormalizedReferenceName ()
Code	i / getNormalizedReferenceName ()
Distance : 4

40
Tree	i == null
Code	i == null
Distance : 4

41
Tree	NUMBER_CONSTANT / thisBuf.length array
Code	NUMBER_CONSTANT / thisBuf.length array
Distance : 5

42
Tree	i < < NUMBER_CONSTANT Class
Code	i < < NUMBER_CONSTANT Class
Distance : 3

43
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

44
Tree	this . i == i
Code	this . i == i
Distance : 5

45
Tree	this . i == NUMBER_CONSTANT
Code	this . i == NUMBER_CONSTANT
Distance : 5

46
Tree	STRING_CONSTANT + i . getDimension ()
Code	STRING_CONSTANT + i . getDimension ()
Distance : 5

47
Tree	i < getBooleanProp ()
Code	i < getBooleanProp ()
Distance : 3

48
Tree	i < NUMBER_CONSTANT
Code	i < NUMBER_CONSTANT
Distance : 3

49
Tree	i + i + STRING_CONSTANT
Code	i + i + STRING_CONSTANT
Distance : 4

50
Tree	i . stubInfo () != thisBuf.length
Code	i . stubInfo () != thisBuf.length
Distance : 5

51
Tree	stubInfo ( i ) != thisBuf.length
Code	stubInfo ( i ) != thisBuf.length
Distance : 6

52
Tree	getIgnoredMatcher ( i ) == i
Code	getIgnoredMatcher ( i ) == i
Distance : 6

53
Tree	i . getBeta () != thisBuf.length
Code	i . getBeta () != thisBuf.length
Distance : 5

54
Tree	getIgnoredMatcher () != thisBuf.length
Code	getIgnoredMatcher () != thisBuf.length
Distance : 5

55
Tree	i / i
Code	i / i
Distance : 4

56
Tree	i . valueOf () < getIgnoredMatcher ( i )
Code	i . valueOf () < getIgnoredMatcher ( i )
Distance : 7

57
Tree	skipStringLiteralEscapeSequence () thisBuf.length getNormalizedReferenceName ( i )
Code	skipStringLiteralEscapeSequence () thisBuf.length getNormalizedReferenceName ( i )
Distance : 7

58
Tree	i . isStruct ( i ) != thisBuf.length
Code	i . isStruct ( i ) != thisBuf.length
Distance : 7

59
Tree	i / SECONDS_MILLIS ()
Code	i / SECONDS_MILLIS ()
Distance : 4

60
Tree	thisBuf.length == super();
Code	thisBuf.length == super();
Distance : 5

61
Tree	i / size
Code	i / size
Distance : 3

62
Tree	getIgnoredMatcher () < i
Code	getIgnoredMatcher () < i
Distance : 5

63
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

64
Tree	i < < NUMBER_CONSTANT
Code	i < < NUMBER_CONSTANT
Distance : 3

65
Tree	i == null < /
Code	i == null < /
Distance : 4

66
Tree	skipStringLiteralEscapeSequence ( i ) < getNormalizedReferenceName ( i )
Code	skipStringLiteralEscapeSequence ( i ) < getNormalizedReferenceName ( i )
Distance : 7

67
Tree	this . unescape () != thisBuf.length
Code	this . unescape () != thisBuf.length
Distance : 6

68
Tree	stubInfo ( i ) < getNormalizedReferenceName ( i )
Code	stubInfo ( i ) < getNormalizedReferenceName ( i )
Distance : 7

69
Tree	size != i
Code	size != i
Distance : 5

70
Tree	i + size . i ()
Code	i + size . i ()
Distance : 4

71
Tree	i == null < extends
Code	i == null < extends
Distance : 4

72
Tree	STRING_CONSTANT + i . hashCode ()
Code	STRING_CONSTANT + i . hashCode ()
Distance : 5

73
Tree	i != null thisBuf.length /
Code	i != null thisBuf.length /
Distance : 4

74
Tree	this . stubInfo () != thisBuf.length
Code	this . stubInfo () != thisBuf.length
Distance : 6

75
Tree	i != null && i . abs ( i , i , i )
Code	i != null && i . abs ( i , i , i )
Distance : 12

76
Tree	i + i . size ()
Code	i + i . size ()
Distance : 3

77
Tree	i && i . longValue ()
Code	i && i . longValue ()
Distance : 4

78
Tree	i == break;
Code	i == break;
Distance : 4

79
Tree	i >= i
Code	i >= i
Distance : 4

80
Tree	this . size == size
Code	this . size == size
Distance : 4

81
Tree	i . valueOf () . longValue () != thisBuf.length
Code	i . valueOf () . longValue () != thisBuf.length
Distance : 7

82
Tree	this . i . getExportPostfix () != thisBuf.length
Code	this . i . getExportPostfix () != thisBuf.length
Distance : 7

83
Tree	i && i == thisBuf.length
Code	i && i == thisBuf.length
Distance : 4

84
Tree	size == null
Code	size == null
Distance : 5

85
Tree	i != break;
Code	i != break;
Distance : 4

86
Tree	size < < NUMBER_CONSTANT
Code	size < < NUMBER_CONSTANT
Distance : 4

87
Tree	i . valueOf () i getNormalizedReferenceName ( i )
Code	i . valueOf () i getNormalizedReferenceName ( i )
Distance : 8

88
Tree	i . valueOf () . set () != thisBuf.length
Code	i . valueOf () . set () != thisBuf.length
Distance : 7

89
Tree	i . stubInfo ( i ) != thisBuf.length
Code	i . stubInfo ( i ) != thisBuf.length
Distance : 7

90
Tree	this . i == size
Code	this . i == size
Distance : 4

91
Tree	i . stubInfo () . set () != thisBuf.length
Code	i . stubInfo () . set () != thisBuf.length
Distance : 7

92
Tree	getIgnoredMatcher () i getNormalizedReferenceName ( i )
Code	getIgnoredMatcher () i getNormalizedReferenceName ( i )
Distance : 6

93
Tree	i >= size
Code	i >= size
Distance : 3

94
Tree	skipStringLiteralEscapeSequence () != i
Code	skipStringLiteralEscapeSequence () != i
Distance : 5

95
Tree	i . stubInfo ( i , i , i ) != thisBuf.length
Code	i . stubInfo ( i , i , i ) != thisBuf.length
Distance : 11

96
Tree	i . getBeta ( i ) != thisBuf.length
Code	i . getBeta ( i ) != thisBuf.length
Distance : 7

97
Tree	size && size == thisBuf.length
Code	size && size == thisBuf.length
Distance : 5

98
Tree	size + NUMBER_CONSTANT
Code	size + NUMBER_CONSTANT
Distance : 5

99
Tree	i . valueOf ( i , i , i ) != thisBuf.length
Code	i . valueOf ( i , i , i ) != thisBuf.length
Distance : 11

100
Tree	i . valueOf () != thisBuf.length
Code	i . valueOf () != thisBuf.length
Distance : 5

101
Tree	size < NUMBER_CONSTANT
Code	size < NUMBER_CONSTANT
Distance : 4

102
Tree	size + i + STRING_CONSTANT
Code	size + i + STRING_CONSTANT
Distance : 5

103
Tree	size / size
Code	size / size
Distance : 4

104
Tree	isBuiltinObject ( i ) == i
Code	isBuiltinObject ( i ) == i
Distance : 6

105
Tree	getIgnoredMatcher ( i ) i getNormalizedReferenceName ( i )
Code	getIgnoredMatcher ( i ) i getNormalizedReferenceName ( i )
Distance : 8

106
Tree	size / i
Code	size / i
Distance : 5

107
Tree	STRING_CONSTANT + i . toLowerCase ()
Code	STRING_CONSTANT + i . toLowerCase ()
Distance : 5

108
Tree	thisBuf.length == break;
Code	thisBuf.length == break;
Distance : 5

109
Tree	thisBuf.length < thisBuf.length array
Code	thisBuf.length < thisBuf.length array
Distance : 4

110
Tree	thisBuf.length == return;
Code	thisBuf.length == return;
Distance : 5

111
Tree	i == thisBuf.length < >=
Code	i == thisBuf.length < >=
Distance : 4

112
Tree	i / i . intValue ()
Code	i / i . intValue ()
Distance : 4

113
Tree	isBuiltinObject ( i ) i getNormalizedReferenceName ( i )
Code	isBuiltinObject ( i ) i getNormalizedReferenceName ( i )
Distance : 8

114
Tree	size + i . i ()
Code	size + i . i ()
Distance : 5

115
Tree	this . i == NUMBER_CONSTANT Class
Code	this . i == NUMBER_CONSTANT Class
Distance : 6

116
Tree	size >= size
Code	size >= size
Distance : 4

117
Tree	i < thisBuf.length Class
Code	i < thisBuf.length Class
Distance : 3

118
Tree	i < NUMBER_CONSTANT Class
Code	i < NUMBER_CONSTANT Class
Distance : 3

119
Tree	i < thisBuf.length Test
Code	i < thisBuf.length Test
Distance : 3

120
Tree	getIgnoredMatcher () thisBuf.length getIgnoredMatcher ( i )
Code	getIgnoredMatcher () thisBuf.length getIgnoredMatcher ( i )
Distance : 7

121
Tree	i > NUMBER_CONSTANT Test
Code	i > NUMBER_CONSTANT Test
Distance : 4

122
Tree	i == thisBuf.length Class
Code	i == thisBuf.length Class
Distance : 4

123
Tree	thisBuf.length thisBuf.length thisBuf.length
Code	thisBuf.length thisBuf.length thisBuf.length
Distance : 5

124
Tree	this == i Class
Code	this == i Class
Distance : 5

125
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 4

126
Tree	size == thisBuf.length && i
Code	size == thisBuf.length && i
Distance : 5

127
Tree	i != null && i . intValue ( i , i , i )
Code	i != null && i . intValue ( i , i , i )
Distance : 12

128
Tree	this . i == NUMBER_CONSTANT Test
Code	this . i == NUMBER_CONSTANT Test
Distance : 6

129
Tree	isBuiltinObject () == NUMBER_CONSTANT
Code	isBuiltinObject () == NUMBER_CONSTANT
Distance : 5

130
Tree	i / getLeftElement ()
Code	i / getLeftElement ()
Distance : 4

131
Tree	i != null && i . getValue ( i , i , i )
Code	i != null && i . getValue ( i , i , i )
Distance : 12

132
Tree	this . i . stubInfo () != thisBuf.length
Code	this . i . stubInfo () != thisBuf.length
Distance : 7

133
Tree	i + NUMBER_CONSTANT
Code	i + NUMBER_CONSTANT
Distance : 4

134
Tree	skipStringLiteralEscapeSequence () == NUMBER_CONSTANT
Code	skipStringLiteralEscapeSequence () == NUMBER_CONSTANT
Distance : 5

135
Tree	i && i . intValue ()
Code	i && i . intValue ()
Distance : 4

136
Tree	stubInfo () && i
Code	stubInfo () && i
Distance : 5

137
Tree	stubInfo ( i ) == NUMBER_CONSTANT
Code	stubInfo ( i ) == NUMBER_CONSTANT
Distance : 6

138
Tree	i && i . getBeta ()
Code	i && i . getBeta ()
Distance : 4

139
Tree	i + NUMBER_CONSTANT Class
Code	i + NUMBER_CONSTANT Class
Distance : 4

140
Tree	i < < NUMBER_CONSTANT Test
Code	i < < NUMBER_CONSTANT Test
Distance : 3

141
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

142
Tree	i == i
Code	i == i
Distance : 4

143
Tree	this == i
Code	this == i
Distance : 4

144
Tree	i == thisBuf.length Test
Code	i == thisBuf.length Test
Distance : 4

145
Tree	i != null
Code	i != null
Distance : 4

146
Tree	getIgnoredMatcher () == i
Code	getIgnoredMatcher () == i
Distance : 5

147
Tree	stubInfo ( i ) == i
Code	stubInfo ( i ) == i
Distance : 6

148
Tree	isBuiltinObject () == i
Code	isBuiltinObject () == i
Distance : 5

149
Tree	this == size
Code	this == size
Distance : 3

150
Tree	isBuiltinObject ( i ) != thisBuf.length
Code	isBuiltinObject ( i ) != thisBuf.length
Distance : 6

151
Tree	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Code	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Distance : 6

152
Tree	this . size == i
Code	this . size == i
Distance : 4

153
Tree	skipStringLiteralEscapeSequence () == i
Code	skipStringLiteralEscapeSequence () == i
Distance : 5

154
Tree	STRING_CONSTANT + i . valueOf ()
Code	STRING_CONSTANT + i . valueOf ()
Distance : 5

155
Tree	getIgnoredMatcher () != i
Code	getIgnoredMatcher () != i
Distance : 5

156
Tree	i + i . i ()
Code	i + i . i ()
Distance : 4

157
Tree	isBuiltinObject () < i
Code	isBuiltinObject () < i
Distance : 5

158
Tree	i < IncrementalCheckMode.OFF ()
Code	i < IncrementalCheckMode.OFF ()
Distance : 3

159
Tree	i != i
Code	i != i
Distance : 4

160
Tree	isBuiltinObject () && i
Code	isBuiltinObject () && i
Distance : 5

161
Tree	stubInfo () == i
Code	stubInfo () == i
Distance : 5

162
Tree	i < IncrementalCheckMode.GENERATE_IJS ()
Code	i < IncrementalCheckMode.GENERATE_IJS ()
Distance : 3

163
Tree	skipStringLiteralEscapeSequence () && i
Code	skipStringLiteralEscapeSequence () && i
Distance : 5

164
Tree	getIgnoredMatcher () && i
Code	getIgnoredMatcher () && i
Distance : 5

165
Tree	skipStringLiteralEscapeSequence () < i
Code	skipStringLiteralEscapeSequence () < i
Distance : 5

166
Tree	stubInfo () < i
Code	stubInfo () < i
Distance : 5

167
Tree	isBuiltinObject ( i ) == NUMBER_CONSTANT
Code	isBuiltinObject ( i ) == NUMBER_CONSTANT
Distance : 6

168
Tree	getIgnoredMatcher ( i ) == NUMBER_CONSTANT
Code	getIgnoredMatcher ( i ) == NUMBER_CONSTANT
Distance : 6

169
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 3

170
Tree	i != null i ^
Code	i != null i ^
Distance : 4

171
Tree	skipStringLiteralEscapeSequence ( i ) == i
Code	skipStringLiteralEscapeSequence ( i ) == i
Distance : 6

172
Tree	i == null < ?
Code	i == null < ?
Distance : 4

173
Tree	size == i
Code	size == i
Distance : 5

174
Tree	this . i . isBuiltinObject () != thisBuf.length
Code	this . i . isBuiltinObject () != thisBuf.length
Distance : 7

175
Tree	i . valueOf ( i ) != thisBuf.length
Code	i . valueOf ( i ) != thisBuf.length
Distance : 7

176
Tree	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Code	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

177
Tree	isBuiltinObject () != thisBuf.length
Code	isBuiltinObject () != thisBuf.length
Distance : 5

178
Tree	i . stubInfo () < getNormalizedReferenceName ( i )
Code	i . stubInfo () < getNormalizedReferenceName ( i )
Distance : 7

179
Tree	this . i . getBottomObject () != thisBuf.length
Code	this . i . getBottomObject () != thisBuf.length
Distance : 7

180
Tree	skipStringLiteralEscapeSequence () != thisBuf.length
Code	skipStringLiteralEscapeSequence () != thisBuf.length
Distance : 5

181
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

182
Tree	i / getIgnoredMatcher ()
Code	i / getIgnoredMatcher ()
Distance : 4

183
Tree	size != null
Code	size != null
Distance : 5

184
Tree	size == size
Code	size == size
Distance : 4

185
Tree	i / i . getInvocation ()
Code	i / i . getInvocation ()
Distance : 4

186
Tree	size < thisBuf.length
Code	size < thisBuf.length
Distance : 4

187
Tree	stubInfo () != thisBuf.length
Code	stubInfo () != thisBuf.length
Distance : 5

188
Tree	i && size == thisBuf.length
Code	i && size == thisBuf.length
Distance : 4

189
Tree	getIgnoredMatcher ( i ) != thisBuf.length
Code	getIgnoredMatcher ( i ) != thisBuf.length
Distance : 6

190
Tree	i == size
Code	i == size
Distance : 3

191
Tree	size == thisBuf.length
Code	size == thisBuf.length
Distance : 5

192
Tree	this . size == NUMBER_CONSTANT
Code	this . size == NUMBER_CONSTANT
Distance : 4

193
Tree	thisBuf.length == null
Code	thisBuf.length == null
Distance : 5

194
Tree	this . resetBuilder () != thisBuf.length
Code	this . resetBuilder () != thisBuf.length
Distance : 6

195
Tree	size >= i
Code	size >= i
Distance : 5

196
Tree	i . getBeta ( i , i , i ) != thisBuf.length
Code	i . getBeta ( i , i , i ) != thisBuf.length
Distance : 11

197
Tree	size && i == thisBuf.length
Code	size && i == thisBuf.length
Distance : 5

198
Tree	i > NUMBER_CONSTANT Class
Code	i > NUMBER_CONSTANT Class
Distance : 4

199
Tree	NUMBER_CONSTANT / thisBuf.length notifyListeners
Code	NUMBER_CONSTANT / thisBuf.length notifyListeners
Distance : 5

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ str . getChars ( false , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( false , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

1
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 3

2
Tree	{ getChars ( strLen , EscapeUtils.ESCAPE_JAVA , false ) ; }
Code	{ getChars ( strLen , EscapeUtils.ESCAPE_JAVA , false ) ; }
Distance : 7

3
Tree	{ str . getChars ( strLen , strLen ) ; }
Code	{ str . getChars ( strLen , strLen ) ; }
Distance : 6

4
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Distance : 4

5
Tree	{ str . getChars ( this , str , buffer , size ) ; }
Code	{ str . getChars ( this , str , buffer , size ) ; }
Distance : 2

6
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

7
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

8
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

9
Tree	{ getChars ( strLen , strLen , size , values.length ) ; }
Code	{ getChars ( strLen , strLen , size , values.length ) ; }
Distance : 6

10
Tree	{ getChars ( str , strLen , size , values.length ) ; }
Code	{ getChars ( str , strLen , size , values.length ) ; }
Distance : 6

11
Tree	size . getChars ( false ) ;
Code	size . getChars ( false ) ;
Distance : 10

12
Tree	{ getChars ( strLen , getChars () , null ) ; }
Code	{ getChars ( strLen , getChars () , null ) ; }
Distance : 7

13
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

14
Tree	str . getChars ( true ) ;
Code	str . getChars ( true ) ;
Distance : 9

15
Tree	{ str . str ( str , strLen ) ; }
Code	{ str . str ( str , strLen ) ; }
Distance : 7

16
Tree	{ str . getChars ( false , buffer ) ; }
Code	{ str . getChars ( false , buffer ) ; }
Distance : 5

17
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

18
Tree	{ str . getChars ( str , strLen , size , size , Boolean ) ; }
Code	{ str . getChars ( str , strLen , size , size , Boolean ) ; }
Distance : 5

19
Tree	{ str . getChars ( str , strLen , size , this , CHAR_CONS ) ; }
Code	{ str . getChars ( str , strLen , size , this , CHAR_CONS ) ; }
Distance : 6

20
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Distance : 6

21
Tree	strLen . getChars ( false ) ;
Code	strLen . getChars ( false ) ;
Distance : 10

22
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

23
Tree	{ str . getChars ( str , strLen , size , size , size ) ; }
Code	{ str . getChars ( str , strLen , size , size , size ) ; }
Distance : 5

24
Tree	{ str . str ( strLen , strLen ) ; }
Code	{ str . str ( strLen , strLen ) ; }
Distance : 7

25
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , str ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , str ) ; }
Distance : 5

26
Tree	{ str . strLen ( str , strLen ) ; }
Code	{ str . strLen ( str , strLen ) ; }
Distance : 7

27
Tree	{ getChars ( StringUtils.EMPTY , null ) ; }
Code	{ getChars ( StringUtils.EMPTY , null ) ; }
Distance : 8

28
Tree	{ getChars ( strLen , strLen , size , Boolean ) ; }
Code	{ getChars ( strLen , strLen , size , Boolean ) ; }
Distance : 6

29
Tree	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

30
Tree	{ getChars ( Token.PARAM_LIST , null ) ; }
Code	{ getChars ( Token.PARAM_LIST , null ) ; }
Distance : 8

31
Tree	{ getChars ( strLen , array.length , false ) ; }
Code	{ getChars ( strLen , array.length , false ) ; }
Distance : 7

32
Tree	{ getChars ( str , strLen , size , size , size ) ; }
Code	{ getChars ( str , strLen , size , size , size ) ; }
Distance : 7

33
Tree	{ getChars ( strLen , strLen , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , size ) ; }
Distance : 7

34
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , array.length ) ; }
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , array.length ) ; }
Distance : 6

35
Tree	{ str . getChars ( false , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( false , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

36
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

37
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , array.length ) ; }
Distance : 6

38
Tree	{ getChars ( strLen , NUMBER_CONSTANT , array.length ) ; }
Code	{ getChars ( strLen , NUMBER_CONSTANT , array.length ) ; }
Distance : 7

39
Tree	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Distance : 4

40
Tree	getChars ( str , strLen , buffer , values.length ) ;
Code	getChars ( str , strLen , buffer , values.length ) ;
Distance : 7

41
Tree	{ str . getChars ( str , strLen ) ; }
Code	{ str . getChars ( str , strLen ) ; }
Distance : 6

42
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

43
Tree	{ getChars ( null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Code	{ getChars ( null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Distance : 8

44
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer ) ; }
Distance : 3

45
Tree	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Distance : 8

46
Tree	{ toUpperCase . getChars ( strLen , strLen ) ; }
Code	{ toUpperCase . getChars ( strLen , strLen ) ; }
Distance : 7

47
Tree	{ getChars ( null , StringUtils.EMPTY ) ; }
Code	{ getChars ( null , StringUtils.EMPTY ) ; }
Distance : 8

48
Tree	{ str . getChars ( str ? StringUtils.EMPTY : currentState.length ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : currentState.length ) ; }
Distance : 7

49
Tree	{ str . getChars ( false , strLen ) ; }
Code	{ str . getChars ( false , strLen ) ; }
Distance : 6

50
Tree	{ str . getChars ( str , strLen , size , this , int ) ; }
Code	{ str . getChars ( str , strLen , size , this , int ) ; }
Distance : 6

51
Tree	str . getChars ( null , strLen , buffer , size ) ;
Code	str . getChars ( null , strLen , buffer , size ) ;
Distance : 4

52
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , STRING_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , STRING_CONSTANT ) ; }
Distance : 6

53
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

54
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

55
Tree	{ getChars ( strLen , StringUtils.EMPTY , false ) ; }
Code	{ getChars ( strLen , StringUtils.EMPTY , false ) ; }
Distance : 7

56
Tree	{ str . getChars ( buffer , getChars () , this ) ; }
Code	{ str . getChars ( buffer , getChars () , this ) ; }
Distance : 5

57
Tree	{ str . getChars ( CHAR_CONS , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

58
Tree	{ str . getChars ( str , strLen , size , int , false ) ; }
Code	{ str . getChars ( str , strLen , size , int , false ) ; }
Distance : 6

59
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

60
Tree	str . getChars ( str , str . getChars () , this ) ;
Code	str . getChars ( str , str . getChars () , this ) ;
Distance : 8

61
Tree	{ getChars ( strLen , str , size , size , size , size ) ; }
Code	{ getChars ( strLen , str , size , size , size , size ) ; }
Distance : 9

62
Tree	{ getChars ( strLen , strLen , size , null , null ) ; }
Code	{ getChars ( strLen , strLen , size , null , null ) ; }
Distance : 8

63
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

64
Tree	{ getChars ( str , strLen , size , size , size , size ) ; }
Code	{ getChars ( str , strLen , size , size , size , size ) ; }
Distance : 8

65
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , buffer ) ; }
Distance : 6

66
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen ) ; }
Distance : 5

67
Tree	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; }
Distance : 7

68
Tree	{ getChars ( strLen , strLen , super , false ) ; }
Code	{ getChars ( strLen , strLen , super , false ) ; }
Distance : 6

69
Tree	{ str . getChars ( mapper.start , array.length ) ; }
Code	{ str . getChars ( mapper.start , array.length ) ; }
Distance : 6

70
Tree	getChars ( strLen , strLen , buffer , Boolean ) ;
Code	getChars ( strLen , strLen , buffer , Boolean ) ;
Distance : 7

71
Tree	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

72
Tree	{ str . getChars ( this , strLen , buffer , size ) ; }
Code	{ str . getChars ( this , strLen , buffer , size ) ; }
Distance : 2

73
Tree	{ str . getChars ( str , strLen , size , size , values.length ) ; }
Code	{ str . getChars ( str , strLen , size , size , values.length ) ; }
Distance : 5

74
Tree	{ getChars ( strLen , strLen , CHAR_CONS , false ) ; }
Code	{ getChars ( strLen , strLen , CHAR_CONS , false ) ; }
Distance : 6

75
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

76
Tree	{ str . getChars ( str , str , size , this , CHAR_CONS ) ; }
Code	{ str . getChars ( str , str , size , this , CHAR_CONS ) ; }
Distance : 6

77
Tree	{ getChars ( strLen , strLen , buffer , size , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size , size ) ; }
Distance : 6

78
Tree	{ getChars ( str , strLen , size . getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , strLen , size . getChars () , STRING_CONSTANT ) ; }
Distance : 9

79
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

80
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

81
Tree	{ str . getChars ( this , strLen , str , size ) ; }
Code	{ str . getChars ( this , strLen , str , size ) ; }
Distance : 3

82
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 5

83
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

84
Tree	{ str . getChars ( false , str ) ; }
Code	{ str . getChars ( false , str ) ; }
Distance : 6

85
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

86
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

87
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

88
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str ) ; }
Distance : 4

89
Tree	{ str . getChars ( null , strLen , buffer , str ) ; }
Code	{ str . getChars ( null , strLen , buffer , str ) ; }
Distance : 3

90
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

91
Tree	{ str . getChars ( null , str , buffer , size ) ; }
Code	{ str . getChars ( null , str , buffer , size ) ; }
Distance : 2

92
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Distance : 6

93
Tree	{ str . getChars ( true , strLen ) ; }
Code	{ str . getChars ( true , strLen ) ; }
Distance : 6

94
Tree	{ getChars ( str , array.length , false ) ; }
Code	{ getChars ( str , array.length , false ) ; }
Distance : 7

95
Tree	{ getChars ( strLen , str , size , null , null ) ; }
Code	{ getChars ( strLen , str , size , null , null ) ; }
Distance : 8

96
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

97
Tree	{ str . getChars ( str , buffer , size , this , CHAR_CONS ) ; }
Code	{ str . getChars ( str , buffer , size , this , CHAR_CONS ) ; }
Distance : 6

98
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen ) ; }
Distance : 4

99
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

100
Tree	{ getChars ( buffer , getChars () , null ) ; }
Code	{ getChars ( buffer , getChars () , null ) ; }
Distance : 7

101
Tree	{ getChars ( str , strLen , size , null , null ) ; }
Code	{ getChars ( str , strLen , size , null , null ) ; }
Distance : 8

102
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 1

103
Tree	{ str . getChars ( CHAR_CONS , Locale.ENGLISH , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , Locale.ENGLISH , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

104
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , array.length ) ; }
Distance : 6

105
Tree	{ printTo . getChars ( strLen , strLen ) ; }
Code	{ printTo . getChars ( strLen , strLen ) ; }
Distance : 7

106
Tree	{ getChars ( str , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , size , size ) ; }
Distance : 5

107
Tree	{ str . getChars ( str , getChars () , this ) ; }
Code	{ str . getChars ( str , getChars () , this ) ; }
Distance : 5

108
Tree	{ getChars ( str , getChars () , null ) ; }
Code	{ getChars ( str , getChars () , null ) ; }
Distance : 7

109
Tree	{ getChars ( Locale.ENGLISH , null ) ; }
Code	{ getChars ( Locale.ENGLISH , null ) ; }
Distance : 8

110
Tree	{ str . getChars ( mapper.start , STRING_CONSTANT ) ; }
Code	{ str . getChars ( mapper.start , STRING_CONSTANT ) ; }
Distance : 6

111
Tree	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Distance : 7

112
Tree	{ getChars ( Locale.ENGLISH , getChars () , NUMBER_CONSTANT ) ; }
Code	{ getChars ( Locale.ENGLISH , getChars () , NUMBER_CONSTANT ) ; }
Distance : 7

113
Tree	{ getChars ( strLen , strLen , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , getChars () , STRING_CONSTANT ) ; }
Distance : 7

114
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 4

115
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

116
Tree	{ getChars ( null , Locale.ENGLISH ) ; }
Code	{ getChars ( null , Locale.ENGLISH ) ; }
Distance : 8

117
Tree	{ getChars ( str , NUMBER_CONSTANT , buffer ) ; }
Code	{ getChars ( str , NUMBER_CONSTANT , buffer ) ; }
Distance : 6

118
Tree	{ getChars ( str , strLen , CHAR_CONS , false ) ; }
Code	{ getChars ( str , strLen , CHAR_CONS , false ) ; }
Distance : 6

119
Tree	{ getChars ( str , strLen , size ) ; }
Code	{ getChars ( str , strLen , size ) ; }
Distance : 6

120
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

121
Tree	{ str . getChars ( str , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

122
Tree	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

123
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

124
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 4

125
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , STRING_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , STRING_CONSTANT ) ; }
Distance : 6

126
Tree	{ str . getChars ( str , strLen , size , size , false ) ; }
Code	{ str . getChars ( str , strLen , size , size , false ) ; }
Distance : 5

127
Tree	{ getChars ( strLen , str , size , size ) ; }
Code	{ getChars ( strLen , str , size , size ) ; }
Distance : 5

128
Tree	{ str . getChars ( NUMBER_CONSTANT , Locale.ENGLISH ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , Locale.ENGLISH ) ; }
Distance : 5

129
Tree	{ getChars ( strLen , strLen , size ) ; }
Code	{ getChars ( strLen , strLen , size ) ; }
Distance : 6

130
Tree	str . getChars ( false ) ;
Code	str . getChars ( false ) ;
Distance : 9

131
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

132
Tree	{ getChars ( strLen , strLen , buffer , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size ) ; }
Distance : 4

133
Tree	{ str . getChars ( str , str , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , str , size , STRING_CONSTANT ) ; }
Distance : 4

134
Tree	{ str . getChars ( str , strLen , size , buffer , false ) ; }
Code	{ str . getChars ( str , strLen , size , buffer , false ) ; }
Distance : 5

135
Tree	{ getChars ( null , array.length ) ; }
Code	{ getChars ( null , array.length ) ; }
Distance : 8

136
Tree	getChars ( strLen , strLen , buffer , size ) ;
Code	getChars ( strLen , strLen , buffer , size ) ;
Distance : 6

137
Tree	{ str . getChars ( NUMBER_CONSTANT , toUpperCase ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , toUpperCase ) ; }
Distance : 5

138
Tree	{ getChars ( v.data , null ) ; }
Code	{ getChars ( v.data , null ) ; }
Distance : 8

139
Tree	{ str . getChars ( CHAR_CONS , strLen , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , strLen , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

140
Tree	{ getChars ( StringUtils.EMPTY , getChars () , NUMBER_CONSTANT ) ; }
Code	{ getChars ( StringUtils.EMPTY , getChars () , NUMBER_CONSTANT ) ; }
Distance : 7

141
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

142
Tree	{ getChars ( strLen , strLen , buffer ) ; }
Code	{ getChars ( strLen , strLen , buffer ) ; }
Distance : 6

143
Tree	{ getChars ( Token.PARAM_LIST , getChars () , NUMBER_CONSTANT ) ; }
Code	{ getChars ( Token.PARAM_LIST , getChars () , NUMBER_CONSTANT ) ; }
Distance : 7

144
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 3

145
Tree	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( size , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

146
Tree	{ str . getChars ( NUMBER_CONSTANT , array.length ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , array.length ) ; }
Distance : 5

147
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Locale.ENGLISH , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , Locale.ENGLISH , NUMBER_CONSTANT ) ; }
Distance : 4

148
Tree	{ getChars ( strLen , strLen , false , false ) ; }
Code	{ getChars ( strLen , strLen , false , false ) ; }
Distance : 6

149
Tree	{ getChars ( strLen , NUMBER_CONSTANT , buffer ) ; }
Code	{ getChars ( strLen , NUMBER_CONSTANT , buffer ) ; }
Distance : 6

150
Tree	{ getChars ( strLen , str , size ) ; }
Code	{ getChars ( strLen , str , size ) ; }
Distance : 6

151
Tree	str . getChars ( null , strLen , buffer , str ) ;
Code	str . getChars ( null , strLen , buffer , str ) ;
Distance : 5

152
Tree	{ getChars ( size , getChars () , null ) ; }
Code	{ getChars ( size , getChars () , null ) ; }
Distance : 7

153
Tree	str . getChars ( null , strLen , buffer , buffer ) ;
Code	str . getChars ( null , strLen , buffer , buffer ) ;
Distance : 5

154
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

155
Tree	{ getChars ( strLen , buffer , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , buffer , getChars () , STRING_CONSTANT ) ; }
Distance : 7

156
Tree	getChars ( strLen , strLen , buffer , values.length ) ;
Code	getChars ( strLen , strLen , buffer , values.length ) ;
Distance : 7

157
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , STRING_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , STRING_CONSTANT ) ; }
Distance : 6

158
Tree	str . getChars ( null , str , buffer , size ) ;
Code	str . getChars ( null , str , buffer , size ) ;
Distance : 4

159
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; }
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; }
Distance : 7

160
Tree	{ str . getChars ( this , strLen , size , size ) ; }
Code	{ str . getChars ( this , strLen , size , size ) ; }
Distance : 3

161
Tree	{ str . getChars ( str , strLen , size , size , d.length ) ; }
Code	{ str . getChars ( str , strLen , size , size , d.length ) ; }
Distance : 5

162
Tree	{ getChars ( str , strLen , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , strLen , getChars () , STRING_CONSTANT ) ; }
Distance : 7

163
Tree	{ str . getChars ( str ? StringUtils.EMPTY : Locale.ROOT ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : Locale.ROOT ) ; }
Distance : 7

164
Tree	{ getChars ( v.data , getChars () , NUMBER_CONSTANT ) ; }
Code	{ getChars ( v.data , getChars () , NUMBER_CONSTANT ) ; }
Distance : 7

165
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , values.length ) ; }
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , null , values.length ) ; }
Distance : 6

166
Tree	str . getChars ( str , strLen . getChars () , this ) ;
Code	str . getChars ( str , strLen . getChars () , this ) ;
Distance : 8

167
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

168
Tree	{ getChars ( strLen , str , size , size , size ) ; }
Code	{ getChars ( strLen , str , size , size , size ) ; }
Distance : 7

169
Tree	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , size ) ; }
Code	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , size ) ; }
Distance : 6

170
Tree	{ strLen . getChars ( false ) ; }
Code	{ strLen . getChars ( false ) ; }
Distance : 8

171
Tree	{ str . strLen ( strLen , strLen ) ; }
Code	{ str . strLen ( strLen , strLen ) ; }
Distance : 7

172
Tree	{ str . getChars ( str , strLen , size , CHAR_CONS , false ) ; }
Code	{ str . getChars ( str , strLen , size , CHAR_CONS , false ) ; }
Distance : 6

173
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; } notifyListeners
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; } notifyListeners
Distance : 8

174
Tree	{ getChars ( str , NUMBER_CONSTANT , array.length ) ; }
Code	{ getChars ( str , NUMBER_CONSTANT , array.length ) ; }
Distance : 7

175
Tree	{ getChars ( strLen , strLen , buffer , null , null ) ; }
Code	{ getChars ( strLen , strLen , buffer , null , null ) ; }
Distance : 7

176
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

177
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; } class
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; } class
Distance : 8

178
Tree	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; } array
Code	{ getChars ( STRING_CONSTANT , STRING_CONSTANT , getChars () ) ; } array
Distance : 8

179
Tree	{ size . getChars ( false ) ; }
Code	{ size . getChars ( false ) ; }
Distance : 8

180
Tree	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , Boolean ) ; }
Code	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , Boolean ) ; }
Distance : 7

181
Tree	{ str . getChars ( strLen , getChars () , this ) ; }
Code	{ str . getChars ( strLen , getChars () , this ) ; }
Distance : 5

182
Tree	str . getChars ( strLen , strLen . getChars () , this ) ;
Code	str . getChars ( strLen , strLen . getChars () , this ) ;
Distance : 8

183
Tree	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , d.length ) ; }
Code	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , d.length ) ; }
Distance : 7

184
Tree	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

185
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

186
Tree	{ str . getChars ( str , buffer . getChars () , this ) ; }
Code	{ str . getChars ( str , buffer . getChars () , this ) ; }
Distance : 6

187
Tree	{ getChars ( strLen , strLen , buffer . getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , buffer . getChars () , STRING_CONSTANT ) ; }
Distance : 8

188
Tree	{ str . getChars ( size , getChars () , this ) ; }
Code	{ str . getChars ( size , getChars () , this ) ; }
Distance : 5

189
Tree	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , values.length ) ; }
Code	{ str . getChars ( str . getChars () , strLen , NUMBER_CONSTANT , values.length ) ; }
Distance : 7

190
Tree	{ getChars ( strLen , str , size . getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , str , size . getChars () , STRING_CONSTANT ) ; }
Distance : 9

191
Tree	{ getChars ( strLen , strLen , size . getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , size . getChars () , STRING_CONSTANT ) ; }
Distance : 9

192
Tree	{ str . getChars ( str , strLen . getChars () , this ) ; }
Code	{ str . getChars ( str , strLen . getChars () , this ) ; }
Distance : 6

193
Tree	{ getChars ( strLen , str , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , str , getChars () , STRING_CONSTANT ) ; }
Distance : 7

194
Tree	{ str . getChars ( str , str . getChars () , this ) ; }
Code	{ str . getChars ( str , str . getChars () , this ) ; }
Distance : 6

195
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } notifyListeners
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } notifyListeners
Distance : 8

196
Tree	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Code	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Distance : 6

197
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } class
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } class
Distance : 8

198
Tree	str . getChars ( str , buffer . getChars () , this ) ;
Code	str . getChars ( str , buffer . getChars () , this ) ;
Distance : 8

199
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } array
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } array
Distance : 8

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

1
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

2
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

3
Tree	{ return ( byte ) contains ( locale ) ; }
Code	{ return ( byte ) contains ( locale ) ; }
Distance : 3

4
Tree	{ return ( long ) contains ( locale ) ; }
Code	{ return ( long ) contains ( locale ) ; }
Distance : 3

5
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

6
Tree	{ return ( locale ) ; return return; ; }
Code	{ return ( locale ) ; return return; ; }
Distance : 7

7
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

8
Tree	{ return ( int ) contains ( locale . contains () , locale ) ; }
Code	{ return ( int ) contains ( locale . contains () , locale ) ; }
Distance : 8

9
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

10
Tree	{ return cAvailableLocaleSet . contains ( super(); ) ; }
Code	{ return cAvailableLocaleSet . contains ( super(); ) ; }
Distance : 3

11
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

12
Tree	{ return ( locale ) { ( locale ) ; }
Code	{ return ( locale ) { ( locale ) ; }
Distance : 4

13
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

14
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

15
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

16
Tree	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

17
Tree	{ return ( locale ) ; return null ; }
Code	{ return ( locale ) ; return null ; }
Distance : 7

18
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

19
Tree	{ return cAvailableLocaleSet . contains ( null ) ; }
Code	{ return cAvailableLocaleSet . contains ( null ) ; }
Distance : 3

20
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

21
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

22
Tree	{ return null ; }
Code	{ return null ; }
Distance : 7

23
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 7

24
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

25
Tree	{ return ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ return ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

26
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

27
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

28
Tree	{ return this . locale ; }
Code	{ return this . locale ; }
Distance : 5

29
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

30
Tree	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

31
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

32
Tree	{ return ( double ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( double ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

33
Tree	{ return ( cAvailableLocaleSet ) locale . contains () ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains () ; }
Distance : 7

34
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

35
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 7

36
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

37
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

38
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 6

39
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

40
Tree	{ return this . cAvailableLocaleSet ; }
Code	{ return this . cAvailableLocaleSet ; }
Distance : 6

41
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

42
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

43
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

44
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

45
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

46
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( NotNull.NOT_NULL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( NotNull.NOT_NULL ) ; }
Distance : 7

47
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Distance : 6

48
Tree	{ return contains ( contains () , locale . ( ( locale ) ) ; }
Code	{ return contains ( contains () , locale . ( ( locale ) ) ; }
Distance : 7

49
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

50
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

51
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

52
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

53
Tree	{ return cAvailableLocaleSet . contains ( new locale () ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale () ) ; }
Distance : 4

54
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

55
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 8

56
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 8

57
Tree	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

58
Tree	{ return ( int ) contains ( locale ) ; }
Code	{ return ( int ) contains ( locale ) ; }
Distance : 3

59
Tree	{ return typesIndexedByProperty . contains ( locale ) ; }
Code	{ return typesIndexedByProperty . contains ( locale ) ; }
Distance : 2

60
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

61
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

62
Tree	{ return locale . contains ( locale . locale ( locale ) ) ; }
Code	{ return locale . contains ( locale . locale ( locale ) ) ; }
Distance : 7

63
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

64
Tree	{ return cAvailableLocaleSet . contains ( locale , iValues.length ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , iValues.length ) ; }
Distance : 4

65
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains ( locale ) ) ; }
Distance : 8

66
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

67
Tree	{ return cAvailableLocaleSet . contains ( return; ) ; }
Code	{ return cAvailableLocaleSet . contains ( return; ) ; }
Distance : 3

68
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

69
Tree	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

70
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . ( ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . ( ( locale ) ) ; }
Distance : 9

71
Tree	{ return cAvailableLocaleSet ; } Test
Code	{ return cAvailableLocaleSet ; } Test
Distance : 8

72
Tree	{ return ( locale ) ; return true ; }
Code	{ return ( locale ) ; return true ; }
Distance : 7

73
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

74
Tree	{ return locale . contains ( null ) ; }
Code	{ return locale . contains ( null ) ; }
Distance : 3

75
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

76
Tree	{ return ( double ) contains ( locale ) ; }
Code	{ return ( double ) contains ( locale ) ; }
Distance : 3

77
Tree	{ return contains () ; } Class
Code	{ return contains () ; } Class
Distance : 7

78
Tree	{ return CoreMatchers . contains ( locale ) ; }
Code	{ return CoreMatchers . contains ( locale ) ; }
Distance : 2

79
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

80
Tree	{ return ( int ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

81
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

82
Tree	{ return locale . contains ( new locale ( locale , false ) ) ; }
Code	{ return locale . contains ( new locale ( locale , false ) ) ; }
Distance : 8

83
Tree	{ return ( int ) locale . contains ( locale ) ; }
Code	{ return ( int ) locale . contains ( locale ) ; }
Distance : 4

84
Tree	{ return ( locale ) ; return false ; }
Code	{ return ( locale ) ; return false ; }
Distance : 7

85
Tree	{ return ( long ) contains ( locale . contains () , locale ) ; }
Code	{ return ( long ) contains ( locale . contains () , locale ) ; }
Distance : 8

86
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

87
Tree	{ return ( long ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( long ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

88
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

89
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

90
Tree	{ return ( cAvailableLocaleSet ) return ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) return ( locale ) ; }
Distance : 4

91
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . ( () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . ( () ) ; }
Distance : 7

92
Tree	{ return cAvailableLocaleSet . contains () . contains ( Locale.US ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( Locale.US ) ; }
Distance : 4

93
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

94
Tree	{ return ( locale ) ; return super(); ; }
Code	{ return ( locale ) ; return super(); ; }
Distance : 7

95
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) return; ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) return; ) ; }
Distance : 5

96
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

97
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

98
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

99
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

100
Tree	{ return cAvailableLocaleSet . contains ( locale , Locale.US ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Locale.US ) ; }
Distance : 4

101
Tree	{ return new PomComparator ( locale ) ; }
Code	{ return new PomComparator ( locale ) ; }
Distance : 4

102
Tree	{ return cAvailableLocaleSet ; }
Code	{ return cAvailableLocaleSet ; }
Distance : 7

103
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 8

104
Tree	{ return ( double ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( double ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

105
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

106
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

107
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

108
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 6

109
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

110
Tree	{ return ( cAvailableLocaleSet ) locale . contains () ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains () ; }
Distance : 7

111
Tree	{ return new MidpointFieldStepInterpolator ( locale ) ; }
Code	{ return new MidpointFieldStepInterpolator ( locale ) ; }
Distance : 4

112
Tree	{ return ( long ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( long ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

113
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

114
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

115
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

116
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

117
Tree	{ return new typesIndexedByProperty ( locale ) ; }
Code	{ return new typesIndexedByProperty ( locale ) ; }
Distance : 4

118
Tree	{ return locale . contains ( locale , locale . contains () ) ; }
Code	{ return locale . contains ( locale , locale . contains () ) ; }
Distance : 7

119
Tree	{ return locale . contains ( ( locale ) null ) ; }
Code	{ return locale . contains ( ( locale ) null ) ; }
Distance : 5

120
Tree	{ return ( cAvailableLocaleSet ) contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) contains ( locale ) ; }
Distance : 3

121
Tree	{ return locale . contains ( new locale () ) ; }
Code	{ return locale . contains ( new locale () ) ; }
Distance : 4

122
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

123
Tree	{ return com.google.protobuf.GeneratedMessageV3 . contains ( locale ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . contains ( locale ) ; }
Distance : 2

124
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

125
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

126
Tree	{ return oldRoot . contains ( locale ) ; }
Code	{ return oldRoot . contains ( locale ) ; }
Distance : 2

127
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

128
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

129
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 7

130
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

131
Tree	{ return contains () ; } Test
Code	{ return contains () ; } Test
Distance : 7

132
Tree	{ return locale . contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale , locale . contains ( locale ) ) ; }
Distance : 8

133
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

134
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

135
Tree	{ return ( byte ) contains ( locale . contains () , locale ) ; }
Code	{ return ( byte ) contains ( locale . contains () , locale ) ; }
Distance : 8

136
Tree	{ contains ( locale ) ; return true ; }
Code	{ contains ( locale ) ; return true ; }
Distance : 7

137
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

138
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return return; ; }
Distance : 6

139
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

140
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

141
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

142
Tree	{ return new DormandPrince54FieldStepInterpolator ( locale ) ; }
Code	{ return new DormandPrince54FieldStepInterpolator ( locale ) ; }
Distance : 4

143
Tree	{ return cAvailableLocaleSet . contains ( locale , NotNull.NOT_NULL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , NotNull.NOT_NULL ) ; }
Distance : 4

144
Tree	{ return contains ( locale () , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale () , locale . contains ( locale ) ) ; }
Distance : 6

145
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

146
Tree	{ return locale . contains ( new locale ( locale ) ) ; }
Code	{ return locale . contains ( new locale ( locale ) ) ; }
Distance : 6

147
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

148
Tree	{ return contains ( contains () , locale . contains ( locale ) ) ; }
Code	{ return contains ( contains () , locale . contains ( locale ) ) ; }
Distance : 6

149
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 6

150
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

151
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

152
Tree	{ return ( byte ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( byte ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

153
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

154
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

155
Tree	{ return ( double ) contains ( locale . contains () , locale ) ; }
Code	{ return ( double ) contains ( locale . contains () , locale ) ; }
Distance : 8

156
Tree	{ return cAvailableLocaleSet . contains ( new locale () ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale () ) ; }
Distance : 4

157
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

158
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

159
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

160
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

161
Tree	{ contains ( locale ) ; return null ; }
Code	{ contains ( locale ) ; return null ; }
Distance : 7

162
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

163
Tree	{ locale . contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ locale . contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 6

164
Tree	{ return cAvailableLocaleSet ; } Class
Code	{ return cAvailableLocaleSet ; } Class
Distance : 8

165
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

166
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

167
Tree	{ return this . cAvailableLocaleSet ; } Test
Code	{ return this . cAvailableLocaleSet ; } Test
Distance : 7

168
Tree	{ return ( int ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( int ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

169
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 7

170
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

171
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains ( locale ) ) ; }
Distance : 8

172
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

173
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

174
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

175
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

176
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

177
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

178
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Distance : 5

179
Tree	{ return cAvailableLocaleSet . contains ( new locale () ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale () ) ; }
Distance : 4

180
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

181
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

182
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

183
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

184
Tree	{ return cAvailableLocaleSet . contains () . contains ( Null.NULL ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( Null.NULL ) ; }
Distance : 4

185
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

186
Tree	{ return locale ; }
Code	{ return locale ; }
Distance : 6

187
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Distance : 5

188
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

189
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( TernaryValue.UNKNOWN ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( TernaryValue.UNKNOWN ) ; }
Distance : 7

190
Tree	{ return ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ return ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

191
Tree	{ return ( cAvailableLocaleSet ) locale . contains () ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains () ; }
Distance : 7

192
Tree	{ return cAvailableLocaleSet . locale ( locale ) ; }
Code	{ return cAvailableLocaleSet . locale ( locale ) ; }
Distance : 3

193
Tree	{ return contains ( locale () , locale . ( ( locale ) ) ; }
Code	{ return contains ( locale () , locale . ( ( locale ) ) ; }
Distance : 7

194
Tree	{ return cAvailableLocaleSet . contains () . contains ( Nullability.IMPLICIT ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( Nullability.IMPLICIT ) ; }
Distance : 4

195
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

196
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

197
Tree	{ return locale . contains () . contains () ; }
Code	{ return locale . contains () . contains () ; }
Distance : 6

198
Tree	{ return locale . locale ( locale ) ; }
Code	{ return locale . locale ( locale ) ; }
Distance : 3

199
Tree	{ return this . cAvailableLocaleSet ; } Class
Code	{ return this . cAvailableLocaleSet ; } Class
Distance : 7

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( out , out , Double.MIN_VALUE ) ; }
Code	{ escapeJavaStyleString ( out , out , Double.MIN_VALUE ) ; }
Distance : 4

1
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

2
Tree	{ array.length . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

3
Tree	{ escapeJavaStyleString ( out , out , SimplexSolver.DEFAULT_ULPS ) ; }
Code	{ escapeJavaStyleString ( out , out , SimplexSolver.DEFAULT_ULPS ) ; }
Distance : 4

4
Tree	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

5
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

6
Tree	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

7
Tree	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

8
Tree	{ str . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Distance : 6

9
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

10
Tree	{ out . escapeJavaStyleString ( str , null , str ) ; }
Code	{ out . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

11
Tree	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

12
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Distance : 4

13
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Distance : 6

14
Tree	{ escapeJavaStyleString ( out , null , out ) ; }
Code	{ escapeJavaStyleString ( out , null , out ) ; }
Distance : 4

15
Tree	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

16
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

17
Tree	{ str . escapeJavaStyleString ( false ) ; }
Code	{ str . escapeJavaStyleString ( false ) ; }
Distance : 8

18
Tree	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

19
Tree	{ escapeJavaStyleString ( out , out , Color.BLACK ) ; }
Code	{ escapeJavaStyleString ( out , out , Color.BLACK ) ; }
Distance : 4

20
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

21
Tree	{ out . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Distance : 6

22
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

23
Tree	{ str . str ( str , new ArrayRealVector ( str ) ) ; }
Code	{ str . str ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

24
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

25
Tree	{ out . str ( str , new ArrayRealVector ( str ) ) ; }
Code	{ out . str ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

26
Tree	{ str . out ( str ) ; }
Code	{ str . out ( str ) ; }
Distance : 7

27
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

28
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

29
Tree	{ out . out ( str ) ; }
Code	{ out . out ( str ) ; }
Distance : 7

30
Tree	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

31
Tree	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

32
Tree	{ escapeJavaStyleString ( out , null , str ) ; }
Code	{ escapeJavaStyleString ( out , null , str ) ; }
Distance : 4

33
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

34
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

35
Tree	{ out . escapeJavaStyleString ( true ) ; }
Code	{ out . escapeJavaStyleString ( true ) ; }
Distance : 7

36
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

37
Tree	{ str . escapeJavaStyleString ( str , null , str ) ; }
Code	{ str . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

38
Tree	{ str . str ( str ) ; }
Code	{ str . str ( str ) ; }
Distance : 8

39
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

40
Tree	{ out . str ( str ) ; }
Code	{ out . str ( str ) ; }
Distance : 7

41
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

42
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 5

43
Tree	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

44
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Distance : 4

45
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

46
Tree	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

47
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

48
Tree	{ str . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Distance : 6

49
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

50
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

51
Tree	{ str . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

52
Tree	{ this . out . escapeJavaStyleString ( out ) ; }
Code	{ this . out . escapeJavaStyleString ( out ) ; }
Distance : 8

53
Tree	{ str . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

54
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

55
Tree	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

56
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

57
Tree	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

58
Tree	{ this . str . escapeJavaStyleString ( str ) ; }
Code	{ this . str . escapeJavaStyleString ( str ) ; }
Distance : 8

59
Tree	{ str . escapeJavaStyleString ( str , true ) ; }
Code	{ str . escapeJavaStyleString ( str , true ) ; }
Distance : 6

60
Tree	{ str . escapeJavaStyleString ( this . str , out , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this . str , out , out , str ) ; }
Distance : 8

61
Tree	{ escapeJavaStyleString ( out , out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str , str ) ; }
Distance : 3

62
Tree	{ str . out ( str , new ArrayRealVector ( str ) ) ; }
Code	{ str . out ( str , new ArrayRealVector ( str ) ) ; }
Distance : 8

63
Tree	{ str . escapeJavaStyleString ( this , out , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

64
Tree	{ out . out ( str , new ArrayRealVector ( str ) ) ; }
Code	{ out . out ( str , new ArrayRealVector ( str ) ) ; }
Distance : 8

65
Tree	{ out . escapeJavaStyleString ( this , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

66
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

67
Tree	{ out . escapeJavaStyleString ( str , true ) ; }
Code	{ out . escapeJavaStyleString ( str , true ) ; }
Distance : 6

68
Tree	{ this . escapeJavaStyleString ( str ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Code	{ this . escapeJavaStyleString ( str ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Distance : 8

69
Tree	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Distance : 6

70
Tree	{ out . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

71
Tree	{ this . escapeJavaStyleString ( str ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ this . escapeJavaStyleString ( str ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 8

72
Tree	{ out . escapeJavaStyleString ( this , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , out , out , str ) ; }
Distance : 6

73
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

74
Tree	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

75
Tree	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

76
Tree	{ str . escapeJavaStyleString ( this , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out ) ; }
Distance : 8

77
Tree	{ str . escapeJavaStyleString ( this , str , out ) ; }
Code	{ str . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

78
Tree	{ str . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

79
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

80
Tree	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

81
Tree	{ str . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Code	{ str . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Distance : 8

82
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

83
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

84
Tree	{ out . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Distance : 8

85
Tree	{ str . escapeJavaStyleString ( str , new ArrayRealVector ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str , new ArrayRealVector ( str ) ) ; }
Distance : 8

86
Tree	{ escapeJavaStyleString ( out , out , d.length ) ; }
Code	{ escapeJavaStyleString ( out , out , d.length ) ; }
Distance : 4

87
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

88
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

89
Tree	{ out . escapeJavaStyleString ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

90
Tree	{ str . escapeJavaStyleString ( true ) ; }
Code	{ str . escapeJavaStyleString ( true ) ; }
Distance : 7

91
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

92
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

93
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Distance : 8

94
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Test
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Test
Distance : 7

95
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

96
Tree	{ str . escapeJavaStyleString ( this , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str ) ; }
Distance : 7

97
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Distance : 7

98
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 5

99
Tree	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Distance : 8

100
Tree	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

101
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Distance : 4

102
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

103
Tree	{ escapeJavaStyleString ( str , null , out ) ; }
Code	{ escapeJavaStyleString ( str , null , out ) ; }
Distance : 4

104
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 2

105
Tree	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

106
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

107
Tree	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

108
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Class
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Class
Distance : 6

109
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

110
Tree	{ out . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Distance : 6

111
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 3

112
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

113
Tree	{ out . escapeJavaStyleString ( this , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out ) ; }
Distance : 7

114
Tree	{ out . escapeJavaStyleString ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

115
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

116
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

117
Tree	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Distance : 5

118
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( out ) , null ) ; }
Distance : 6

119
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Distance : 7

120
Tree	{ out . escapeJavaStyleString ( false ) ; }
Code	{ out . escapeJavaStyleString ( false ) ; }
Distance : 8

121
Tree	{ out . escapeJavaStyleString ( this , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str ) ; }
Distance : 7

122
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 2

123
Tree	{ out . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Distance : 8

124
Tree	{ str . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Distance : 8

125
Tree	{ str . escapeJavaStyleString ( str , false ) ; }
Code	{ str . escapeJavaStyleString ( str , false ) ; }
Distance : 7

126
Tree	{ out . escapeJavaStyleString ( str , null , out ) ; }
Code	{ out . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

127
Tree	{ str . escapeJavaStyleString ( this . str , out , str , str ) ; }
Code	{ str . escapeJavaStyleString ( this . str , out , str , str ) ; }
Distance : 8

128
Tree	{ out . escapeJavaStyleString ( this . str , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , str , str ) ; }
Distance : 8

129
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

130
Tree	{ out . escapeJavaStyleString ( str , false ) ; }
Code	{ out . escapeJavaStyleString ( str , false ) ; }
Distance : 7

131
Tree	{ str . escapeJavaStyleString ( this , str , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str , out , str ) ; }
Distance : 5

132
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 3

133
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

134
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

135
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

136
Tree	{ out . escapeJavaStyleString ( this , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out , str ) ; }
Distance : 5

137
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Distance : 4

138
Tree	{ this . out . escapeJavaStyleString ( str ) ; }
Code	{ this . out . escapeJavaStyleString ( str ) ; }
Distance : 8

139
Tree	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 7

140
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

141
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Test
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Test
Distance : 6

142
Tree	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Distance : 8

143
Tree	{ str . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Code	{ str . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Distance : 8

144
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 3

145
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

146
Tree	{ str . escapeJavaStyleString ( str , null , out ) ; }
Code	{ str . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

147
Tree	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Distance : 5

148
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 2

149
Tree	{ this . str . escapeJavaStyleString ( out ) ; }
Code	{ this . str . escapeJavaStyleString ( out ) ; }
Distance : 8

150
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

151
Tree	{ out . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

152
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

153
Tree	{ this . escapeJavaStyleString ( str ? iValues.length : FunctionFlavor.NORMAL ) ; }
Code	{ this . escapeJavaStyleString ( str ? iValues.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

154
Tree	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

155
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

156
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

157
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Distance : 8

158
Tree	{ str . escapeJavaStyleString ( this , out , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this , out , out , str ) ; }
Distance : 6

159
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

160
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Class
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Class
Distance : 7

161
Tree	{ array.length . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

162
Tree	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

163
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

164
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

165
Tree	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

166
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

167
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

168
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Distance : 5

169
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

170
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

171
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

172
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

173
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

174
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

175
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

176
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

177
Tree	{ escapeJavaStyleString ( str , null , str ) ; }
Code	{ escapeJavaStyleString ( str , null , str ) ; }
Distance : 4

178
Tree	{ str . escapeJavaStyleString ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

179
Tree	{ this . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ this . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

180
Tree	{ out . escapeJavaStyleString ( str , new ArrayRealVector ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new ArrayRealVector ( str ) ) ; }
Distance : 8

181
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

182
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

183
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

184
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

185
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

186
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Distance : 7

187
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

188
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

189
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

190
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

191
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

192
Tree	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Distance : 6

193
Tree	{ str () . escapeJavaStyleString ( str , str ) ; }
Code	{ str () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

194
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

195
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

196
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

197
Tree	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

198
Tree	{ str . escapeJavaStyleString ( str , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

199
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return escapeJavaStyleString ( str , false ) ; } Test
Code	{ return escapeJavaStyleString ( str , false ) ; } Test
Distance : 4

1
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

2
Tree	{ return escapeJavaStyleString ( str , str , str ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str ) ; } class
Distance : 3

3
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } class
Distance : 10

4
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } array
Distance : 10

5
Tree	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Distance : 6

6
Tree	{ super . escapeJavaStyleString () ; return break; ; }
Code	{ super . escapeJavaStyleString () ; return break; ; }
Distance : 9

7
Tree	{ return escapeJavaStyleString ( str , false ) ; } Class
Code	{ return escapeJavaStyleString ( str , false ) ; } Class
Distance : 4

8
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

9
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Distance : 8

10
Tree	{ this ( str , str , str , null , false ) ; }
Code	{ this ( str , str , str , null , false ) ; }
Distance : 8

11
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

12
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 9

13
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } class
Distance : 9

14
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } array
Distance : 9

15
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Distance : 7

16
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 8

17
Tree	{ return array.length . escapeJavaStyleString ( str ) ; }
Code	{ return array.length . escapeJavaStyleString ( str ) ; }
Distance : 6

18
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 8

19
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , super(); ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , super(); ) ; }
Distance : 4

20
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

21
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 5

22
Tree	{ super . escapeJavaStyleString () ; return return; ; }
Code	{ super . escapeJavaStyleString () ; return return; ; }
Distance : 9

23
Tree	{ return escapeJavaStyleString ( str , true , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , true , str , null ) ; }
Distance : 3

24
Tree	{ return str . escapeJavaStyleString ( str ) ; }
Code	{ return str . escapeJavaStyleString ( str ) ; }
Distance : 6

25
Tree	{ return str . escapeJavaStyleString ( this , str ) ; }
Code	{ return str . escapeJavaStyleString ( this , str ) ; }
Distance : 6

26
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

27
Tree	{ return escapeJavaStyleString ( str , false , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , false , str , null ) ; }
Distance : 4

28
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , break; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , break; ) ; }
Distance : 6

29
Tree	{ return this . str . escapeJavaStyleString () ; }
Code	{ return this . str . escapeJavaStyleString () ; }
Distance : 7

30
Tree	{ return escapeJavaStyleString ( str , true , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , true , str , return; ) ; }
Distance : 3

31
Tree	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Distance : 4

32
Tree	{ super . escapeJavaStyleString () ; return true ; }
Code	{ super . escapeJavaStyleString () ; return true ; }
Distance : 8

33
Tree	{ return str . escapeJavaStyleString ( str , null , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; , null ) ; }
Distance : 6

34
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

35
Tree	{ return str . escapeJavaStyleString ( str , null , null , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null , super(); ) ; }
Distance : 6

36
Tree	{ return str . escapeJavaStyleString ( str , str , str , array.length ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , array.length ) ; }
Distance : 6

37
Tree	{ return str . escapeJavaStyleString ( str , null , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null , return; ) ; }
Distance : 6

38
Tree	{ return escapeJavaStyleString ( str , str , tree.access ) ; }
Code	{ return escapeJavaStyleString ( str , str , tree.access ) ; }
Distance : 2

39
Tree	{ escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 6

40
Tree	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Code	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Distance : 4

41
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 7

42
Tree	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 7

43
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

44
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

45
Tree	{ escapeJavaStyleString ( str ) ; return null ; }
Code	{ escapeJavaStyleString ( str ) ; return null ; }
Distance : 6

46
Tree	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Code	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Distance : 4

47
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Distance : 6

48
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

49
Tree	{ str -- ; return false ; }
Code	{ str -- ; return false ; }
Distance : 8

50
Tree	{ str ++ ; return false ; }
Code	{ str ++ ; return false ; }
Distance : 8

51
Tree	{ return escapeJavaStyleString ( str , ModuleType.GOOG_MODULE ) ; }
Code	{ return escapeJavaStyleString ( str , ModuleType.GOOG_MODULE ) ; }
Distance : 3

52
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

53
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

54
Tree	{ return ( char ) str ; }
Code	{ return ( char ) str ; }
Distance : 7

55
Tree	{ return escapeJavaStyleString ( str ) ; }
Code	{ return escapeJavaStyleString ( str ) ; }
Distance : 4

56
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Distance : 7

57
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

58
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Distance : 8

59
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Distance : 8

60
Tree	{ super += }
Code	{ super += }
Distance : 10

61
Tree	{ return escapeJavaStyleString ( str , str , d.length ) ; }
Code	{ return escapeJavaStyleString ( str , str , d.length ) ; }
Distance : 2

62
Tree	{ return escapeJavaStyleString ( str , str , Color.BLACK ) ; }
Code	{ return escapeJavaStyleString ( str , str , Color.BLACK ) ; }
Distance : 2

63
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

64
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

65
Tree	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , super(); ) ; }
Distance : 4

66
Tree	{ this ( str , str , str , super(); , false ) ; }
Code	{ this ( str , str , str , super(); , false ) ; }
Distance : 8

67
Tree	{ return str . escapeJavaStyleString ( str , null , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , str ) ; }
Distance : 4

68
Tree	{ this ( str , str , str , break; , false ) ; }
Code	{ this ( str , str , str , break; , false ) ; }
Distance : 8

69
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

70
Tree	{ return escapeJavaStyleString ( this , str ) ; } class
Code	{ return escapeJavaStyleString ( this , str ) ; } class
Distance : 5

71
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; }
Code	{ super . escapeJavaStyleString ( str ) ; return this ; }
Distance : 7

72
Tree	{ return escapeJavaStyleString ( str , str , functionTree.access ) ; }
Code	{ return escapeJavaStyleString ( str , str , functionTree.access ) ; }
Distance : 2

73
Tree	{ return this . str . escapeJavaStyleString () ; } class
Code	{ return this . str . escapeJavaStyleString () ; } class
Distance : 8

74
Tree	{ super . escapeJavaStyleString () ; return null ; }
Code	{ super . escapeJavaStyleString () ; return null ; }
Distance : 9

75
Tree	{ str = escapeJavaStyleString ( str , true ) ; throw }
Code	{ str = escapeJavaStyleString ( str , true ) ; throw }
Distance : 5

76
Tree	{ return escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 5

77
Tree	{ escapeJavaStyleString ( str ) ; return return; ; }
Code	{ escapeJavaStyleString ( str ) ; return return; ; }
Distance : 6

78
Tree	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Distance : 7

79
Tree	{ super . escapeJavaStyleString () ; return super(); ; }
Code	{ super . escapeJavaStyleString () ; return super(); ; }
Distance : 9

80
Tree	{ return super . escapeJavaStyleString ( str , str , str , new ArrayRealVector ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new ArrayRealVector ( str ) ) ; }
Distance : 10

81
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

82
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

83
Tree	{ this ( str , str , str , return; , false ) ; }
Code	{ this ( str , str , str , return; , false ) ; }
Distance : 8

84
Tree	{ return escapeJavaStyleString ( str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str ) ; }
Distance : 2

85
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Distance : 7

86
Tree	{ return escapeJavaStyleString ( str , str , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str ) ; } notifyListeners
Distance : 3

87
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , null ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , null ) ; }
Distance : 4

88
Tree	{ return str . escapeJavaStyleString ( str , str , str , EscapeUtils.ESCAPE_JAVA ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , EscapeUtils.ESCAPE_JAVA ) ; }
Distance : 6

89
Tree	{ return str . escapeJavaStyleString ( str ) ; } array
Code	{ return str . escapeJavaStyleString ( str ) ; } array
Distance : 7

90
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Random ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Random ( str ) ) ; }
Distance : 10

91
Tree	{ return super . escapeJavaStyleString ( str , str , str , new NullArgumentException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new NullArgumentException ( str ) ) ; }
Distance : 10

92
Tree	{ return escapeJavaStyleString ( str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , break; ) ; }
Distance : 3

93
Tree	{ return str ( str ) ; } class
Code	{ return str ( str ) ; } class
Distance : 6

94
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Distance : 8

95
Tree	{ return str . escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return str . escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 7

96
Tree	{ return escapeJavaStyleString ( str , str , str ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str ) ; } array
Distance : 3

97
Tree	{ this ( str ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL , str , str , str ) ; }
Code	{ this ( str ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL , str , str , str ) ; }
Distance : 10

98
Tree	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Distance : 4

99
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

100
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 6

101
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 6

102
Tree	{ super . escapeJavaStyleString () ; return false ; } Class
Code	{ super . escapeJavaStyleString () ; return false ; } Class
Distance : 10

103
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , return; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , return; ) ; }
Distance : 4

104
Tree	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Distance : 6

105
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , break; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , break; ) ; }
Distance : 4

106
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

107
Tree	{ this ( str ? ModuleType.GOOG_MODULE : FunctionFlavor.NORMAL , str , str , str ) ; }
Code	{ this ( str ? ModuleType.GOOG_MODULE : FunctionFlavor.NORMAL , str , str , str ) ; }
Distance : 10

108
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Distance : 8

109
Tree	{ str = escapeJavaStyleString ( str , false ) ; throw }
Code	{ str = escapeJavaStyleString ( str , false ) ; throw }
Distance : 6

110
Tree	{ return str . str ( str ) ; }
Code	{ return str . str ( str ) ; }
Distance : 6

111
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; }
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; }
Distance : 7

112
Tree	{ return str ( str ) ; }
Code	{ return str ( str ) ; }
Distance : 5

113
Tree	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Test
Code	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Test
Distance : 7

114
Tree	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Class
Code	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Class
Distance : 7

115
Tree	{ return str . escapeJavaStyleString ( str , return; , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , str ) ; }
Distance : 4

116
Tree	{ str = escapeJavaStyleString ( str , true ) ; super }
Code	{ str = escapeJavaStyleString ( str , true ) ; super }
Distance : 5

117
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

118
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

119
Tree	{ str -- ; return true ; }
Code	{ str -- ; return true ; }
Distance : 7

120
Tree	{ throw super }
Code	{ throw super }
Distance : 10

121
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; }
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; }
Distance : 8

122
Tree	{ return str . str ( str ) ; } class
Code	{ return str . str ( str ) ; } class
Distance : 7

123
Tree	{ return ( int ) str ; }
Code	{ return ( int ) str ; }
Distance : 7

124
Tree	{ return escapeJavaStyleString ( str ) ; } class
Code	{ return escapeJavaStyleString ( str ) ; } class
Distance : 5

125
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

126
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

127
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

128
Tree	{ str = escapeJavaStyleString ( str , false ) ; super }
Code	{ str = escapeJavaStyleString ( str , false ) ; super }
Distance : 6

129
Tree	{ return str . escapeJavaStyleString ( str , null , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null , null ) ; }
Distance : 6

130
Tree	{ return str . str ( str ) ; } notifyListeners
Code	{ return str . str ( str ) ; } notifyListeners
Distance : 7

131
Tree	{ this ( str , str , str , break; ) ; }
Code	{ this ( str , str , str , break; ) ; }
Distance : 6

132
Tree	{ return super . escapeJavaStyleString ( str , str , str , new RandomDataGenerator ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new RandomDataGenerator ( str ) ) ; }
Distance : 10

133
Tree	{ escapeJavaStyleString ( str ) ; return break; ; }
Code	{ escapeJavaStyleString ( str ) ; return break; ; }
Distance : 6

134
Tree	{ return str . escapeJavaStyleString ( str , str , str , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 6

135
Tree	{ return str . escapeJavaStyleString ( str ) ; } class
Code	{ return str . escapeJavaStyleString ( str ) ; } class
Distance : 7

136
Tree	{ return ( byte ) str ; }
Code	{ return ( byte ) str ; }
Distance : 7

137
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

138
Tree	{ return this . str . escapeJavaStyleString () ; } notifyListeners
Code	{ return this . str . escapeJavaStyleString () ; } notifyListeners
Distance : 8

139
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

140
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

141
Tree	{ super super }
Code	{ super super }
Distance : 10

142
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

143
Tree	{ super return }
Code	{ super return }
Distance : 10

144
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Distance : 8

145
Tree	{ str ++ ; return true ; }
Code	{ str ++ ; return true ; }
Distance : 7

146
Tree	{ return str ( str ) ; } array
Code	{ return str ( str ) ; } array
Distance : 6

147
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return this ; } notifyListeners
Distance : 8

148
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return this ; } class
Distance : 8

149
Tree	{ return this . str . escapeJavaStyleString () ; } array
Code	{ return this . str . escapeJavaStyleString () ; } array
Distance : 8

150
Tree	{ str -- ; return false ; } Class
Code	{ str -- ; return false ; } Class
Distance : 9

151
Tree	{ this ( str ? mant.length : FunctionFlavor.NORMAL , str , str , str ) ; }
Code	{ this ( str ? mant.length : FunctionFlavor.NORMAL , str , str , str ) ; }
Distance : 10

152
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

153
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return this ; } array
Distance : 8

154
Tree	{ return str . escapeJavaStyleString ( this , str ) ; } notifyListeners
Code	{ return str . escapeJavaStyleString ( this , str ) ; } notifyListeners
Distance : 7

155
Tree	{ str -- ; return false ; } Test
Code	{ str -- ; return false ; } Test
Distance : 9

156
Tree	{ return escapeJavaStyleString ( str ) ; } array
Code	{ return escapeJavaStyleString ( str ) ; } array
Distance : 5

157
Tree	{ return str . escapeJavaStyleString ( str , super(); , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , str ) ; }
Distance : 4

158
Tree	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Distance : 5

159
Tree	{ str ++ ; return false ; } Test
Code	{ str ++ ; return false ; } Test
Distance : 9

160
Tree	{ return str . escapeJavaStyleString ( str , break; , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , break; , str ) ; }
Distance : 4

161
Tree	{ return ( double ) str ; }
Code	{ return ( double ) str ; }
Distance : 7

162
Tree	{ escapeJavaStyleString ( str ) ; assert }
Code	{ escapeJavaStyleString ( str ) ; assert }
Distance : 6

163
Tree	{ super . escapeJavaStyleString () ; return false ; } Test
Code	{ super . escapeJavaStyleString () ; return false ; } Test
Distance : 10

164
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

165
Tree	{ return escapeJavaStyleString ( str , Color.BLACK ) ; }
Code	{ return escapeJavaStyleString ( str , Color.BLACK ) ; }
Distance : 3

166
Tree	{ return str . escapeJavaStyleString ( str , str , str , true ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , true ) ; }
Distance : 5

167
Tree	{ this ( str ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL , str , str , str ) ; }
Code	{ this ( str ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL , str , str , str ) ; }
Distance : 10

168
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Distance : 7

169
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

170
Tree	{ return str . escapeJavaStyleString ( str , str , str , false ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , false ) ; }
Distance : 6

171
Tree	{ return str ( str ) ; } notifyListeners
Code	{ return str ( str ) ; } notifyListeners
Distance : 6

172
Tree	{ return str . escapeJavaStyleString ( str , str , str , Locale.US ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , Locale.US ) ; }
Distance : 6

173
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 9

174
Tree	{ return this . escapeJavaStyleString ( str ) ; } array
Code	{ return this . escapeJavaStyleString ( str ) ; } array
Distance : 7

175
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Distance : 5

176
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Distance : 5

177
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Distance : 5

178
Tree	{ return str . escapeJavaStyleString ( this , str ) ; } class
Code	{ return str . escapeJavaStyleString ( this , str ) ; } class
Distance : 7

179
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } notifyListeners
Distance : 10

180
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 7

181
Tree	{ return str . escapeJavaStyleString ( this , str ) ; } array
Code	{ return str . escapeJavaStyleString ( this , str ) ; } array
Distance : 7

182
Tree	{ return this . escapeJavaStyleString ( str ) ; } class
Code	{ return this . escapeJavaStyleString ( str ) ; } class
Distance : 7

183
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

184
Tree	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Code	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Distance : 4

185
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

186
Tree	{ str ++ ; return false ; } Class
Code	{ str ++ ; return false ; } Class
Distance : 9

187
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } array
Distance : 8

188
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } class
Distance : 8

189
Tree	{ return escapeJavaStyleString ( this , str ) ; } array
Code	{ return escapeJavaStyleString ( this , str ) ; } array
Distance : 5

190
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } notifyListeners
Distance : 8

191
Tree	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Code	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Distance : 3

192
Tree	{ return escapeJavaStyleString ( str , d.length ) ; }
Code	{ return escapeJavaStyleString ( str , d.length ) ; }
Distance : 3

193
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

194
Tree	{ return str . str ( str ) ; } array
Code	{ return str . str ( str ) ; } array
Distance : 7

195
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

196
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

197
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

198
Tree	{ super . escapeJavaStyleString () ; return false ; }
Code	{ super . escapeJavaStyleString () ; return false ; }
Distance : 9

199
Tree	{ return escapeJavaStyleString ( str , false , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , false , str , return; ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

1
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Distance : 6

2
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Distance : 4

3
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Distance : 4

4
Tree	{ str . escapeJavaStyleString ( str , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

5
Tree	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

6
Tree	{ out . escapeJavaStyleString ( Locale.ENGLISH , out ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ out . escapeJavaStyleString ( Locale.ENGLISH , out ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

7
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

8
Tree	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? size : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? size : PropertyCollapseLevel.NONE ) ; }
Distance : 8

9
Tree	{ out . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Distance : 6

10
Tree	{ str () . escapeJavaStyleString ( str , str ) ; }
Code	{ str () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

11
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

12
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

13
Tree	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

14
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

15
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

16
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

17
Tree	{ out . str ( str , new Object ( str ) ) ; }
Code	{ out . str ( str , new Object ( str ) ) ; }
Distance : 9

18
Tree	{ out . escapeJavaStyleString ( this , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out , str ) ; }
Distance : 5

19
Tree	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( Locale.ENGLISH , out ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Distance : 8

20
Tree	{ str . out ( str ) ; }
Code	{ str . out ( str ) ; }
Distance : 7

21
Tree	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 7

22
Tree	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

23
Tree	{ out . out ( str ) ; }
Code	{ out . out ( str ) ; }
Distance : 7

24
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 5

25
Tree	{ out . escapeJavaStyleString ( out , false ) ; }
Code	{ out . escapeJavaStyleString ( out , false ) ; }
Distance : 6

26
Tree	{ str . str ( str , out ) ; }
Code	{ str . str ( str , out ) ; }
Distance : 7

27
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

28
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

29
Tree	{ str . str ( str ) ; }
Code	{ str . str ( str ) ; }
Distance : 8

30
Tree	{ out . str ( str ) ; }
Code	{ out . str ( str ) ; }
Distance : 7

31
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

32
Tree	{ out . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Distance : 6

33
Tree	{ escapeJavaStyleString ( str , null , str ) ; }
Code	{ escapeJavaStyleString ( str , null , str ) ; }
Distance : 4

34
Tree	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

35
Tree	{ str . escapeJavaStyleString ( false ) ; }
Code	{ str . escapeJavaStyleString ( false ) ; }
Distance : 7

36
Tree	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

37
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

38
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Distance : 4

39
Tree	{ escapeJavaStyleString ( str , null , out ) ; }
Code	{ escapeJavaStyleString ( str , null , out ) ; }
Distance : 4

40
Tree	{ str . str ( str , new Object ( str ) ) ; }
Code	{ str . str ( str , new Object ( str ) ) ; }
Distance : 9

41
Tree	{ str . escapeJavaStyleString ( this , str , str , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str , str , str ) ; }
Distance : 5

42
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

43
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

44
Tree	{ str . escapeJavaStyleString ( out , false ) ; }
Code	{ str . escapeJavaStyleString ( out , false ) ; }
Distance : 6

45
Tree	{ str . escapeJavaStyleString ( ( str ) return; ) ; }
Code	{ str . escapeJavaStyleString ( ( str ) return; ) ; }
Distance : 8

46
Tree	{ str . escapeJavaStyleString ( this . str , out , str , str ) ; }
Code	{ str . escapeJavaStyleString ( this . str , out , str , str ) ; }
Distance : 8

47
Tree	{ out . escapeJavaStyleString ( str , false ) ; }
Code	{ out . escapeJavaStyleString ( str , false ) ; }
Distance : 6

48
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

49
Tree	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , str ) ; }
Distance : 6

50
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

51
Tree	{ escapeJavaStyleString ( out , null , out ) ; }
Code	{ escapeJavaStyleString ( out , null , out ) ; }
Distance : 4

52
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

53
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

54
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

55
Tree	{ escapeJavaStyleString ( out , null , str ) ; }
Code	{ escapeJavaStyleString ( out , null , str ) ; }
Distance : 4

56
Tree	{ str . escapeJavaStyleString ( this , str , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

57
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 1

58
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

59
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

60
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

61
Tree	{ str . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Code	{ str . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Distance : 8

62
Tree	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

63
Tree	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

64
Tree	{ str . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , out , out , STRING_CONSTANT ) ; }
Distance : 6

65
Tree	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Distance : 8

66
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

67
Tree	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

68
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

69
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

70
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Distance : 7

71
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 2

72
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

73
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

74
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

75
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

76
Tree	{ str . escapeJavaStyleString ( str , null , out ) ; }
Code	{ str . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

77
Tree	{ str . out ( str , new Object ( str ) ) ; }
Code	{ str . out ( str , new Object ( str ) ) ; }
Distance : 8

78
Tree	{ array.length . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

79
Tree	{ out . escapeJavaStyleString ( this , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out ) ; }
Distance : 7

80
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 2

81
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

82
Tree	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

83
Tree	{ this . out . escapeJavaStyleString ( out ) ; }
Code	{ this . out . escapeJavaStyleString ( out ) ; }
Distance : 8

84
Tree	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , str ) ; }
Distance : 5

85
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 3

86
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

87
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

88
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 1

89
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

90
Tree	{ out . out ( str , new Object ( str ) ) ; }
Code	{ out . out ( str , new Object ( str ) ) ; }
Distance : 8

91
Tree	{ this . escapeJavaStyleString ( str ? configureWith : PropertyCollapseLevel.NONE ) ; }
Code	{ this . escapeJavaStyleString ( str ? configureWith : PropertyCollapseLevel.NONE ) ; }
Distance : 8

92
Tree	{ str . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Distance : 8

93
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

94
Tree	{ str . escapeJavaStyleString ( str , new StringBuilder ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str , new StringBuilder ( str ) ) ; }
Distance : 8

95
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

96
Tree	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , str ) ; }
Distance : 8

97
Tree	{ out . escapeJavaStyleString ( false ) ; }
Code	{ out . escapeJavaStyleString ( false ) ; }
Distance : 7

98
Tree	{ escapeJavaStyleString ( out , out , options.removeUnusedPrototypeProperties ) ; }
Code	{ escapeJavaStyleString ( out , out , options.removeUnusedPrototypeProperties ) ; }
Distance : 4

99
Tree	{ str . escapeJavaStyleString ( this , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str ) ; }
Distance : 7

100
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

101
Tree	{ this . escapeJavaStyleString ( str ? iValues.length : PropertyCollapseLevel.NONE ) ; }
Code	{ this . escapeJavaStyleString ( str ? iValues.length : PropertyCollapseLevel.NONE ) ; }
Distance : 8

102
Tree	{ str . escapeJavaStyleString ( str , null , str ) ; }
Code	{ str . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

103
Tree	{ this . str . escapeJavaStyleString ( str ) ; }
Code	{ this . str . escapeJavaStyleString ( str ) ; }
Distance : 8

104
Tree	{ str . escapeJavaStyleString ( str , false ) ; }
Code	{ str . escapeJavaStyleString ( str , false ) ; }
Distance : 6

105
Tree	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

106
Tree	{ str . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , out , str , STRING_CONSTANT ) ; }
Distance : 6

107
Tree	{ out . escapeJavaStyleString ( str , null , str ) ; }
Code	{ out . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

108
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

109
Tree	{ out . escapeJavaStyleString ( this , str , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , str , str ) ; }
Distance : 5

110
Tree	{ str . escapeJavaStyleString ( str , new Coordinates3D ( str ) ) ; }
Code	{ str . escapeJavaStyleString ( str , new Coordinates3D ( str ) ) ; }
Distance : 8

111
Tree	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ str . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

112
Tree	{ str . escapeJavaStyleString ( true ) ; }
Code	{ str . escapeJavaStyleString ( true ) ; }
Distance : 8

113
Tree	{ out . escapeJavaStyleString ( this . str , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , str , str ) ; }
Distance : 8

114
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Distance : 4

115
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 5

116
Tree	{ out . escapeJavaStyleString ( true ) ; }
Code	{ out . escapeJavaStyleString ( true ) ; }
Distance : 8

117
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

118
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

119
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Distance : 8

120
Tree	{ this . escapeJavaStyleString ( str ? Locale.ENGLISH : PropertyCollapseLevel.NONE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Locale.ENGLISH : PropertyCollapseLevel.NONE ) ; }
Distance : 8

121
Tree	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ str . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

122
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

123
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Distance : 5

124
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

125
Tree	{ escapeJavaStyleString ( out , out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str , str ) ; }
Distance : 3

126
Tree	{ out . escapeJavaStyleString ( null , str , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , str , str ) ; }
Distance : 5

127
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

128
Tree	{ out . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new ThrowsException ( str , out ) ) ; }
Distance : 8

129
Tree	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

130
Tree	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

131
Tree	{ str . escapeJavaStyleString ( this . str , out , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this . str , out , out , str ) ; }
Distance : 8

132
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

133
Tree	{ str . escapeJavaStyleString ( this , str , out , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str , out , str ) ; }
Distance : 5

134
Tree	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Distance : 8

135
Tree	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

136
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Distance : 4

137
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

138
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

139
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

140
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

141
Tree	{ escapeJavaStyleString ( out , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 7

142
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

143
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

144
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

145
Tree	{ array.length . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

146
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 7

147
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

148
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

149
Tree	{ escapeJavaStyleString ( out , out , otherL.cos ) ; }
Code	{ escapeJavaStyleString ( out , out , otherL.cos ) ; }
Distance : 4

150
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

151
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

152
Tree	{ escapeJavaStyleString ( out , out , options.assumeAccurateNullUndefinedTypes ) ; }
Code	{ escapeJavaStyleString ( out , out , options.assumeAccurateNullUndefinedTypes ) ; }
Distance : 4

153
Tree	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

154
Tree	{ out . escapeJavaStyleString ( str , null , out ) ; }
Code	{ out . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

155
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

156
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

157
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

158
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

159
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

160
Tree	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

161
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Distance : 8

162
Tree	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Distance : 5

163
Tree	{ this . out . escapeJavaStyleString ( str ) ; }
Code	{ this . out . escapeJavaStyleString ( str ) ; }
Distance : 8

164
Tree	{ this . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ this . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

165
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Distance : 7

166
Tree	{ str . escapeJavaStyleString ( this , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out ) ; }
Distance : 8

167
Tree	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

168
Tree	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

169
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

170
Tree	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Distance : 6

171
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

172
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

173
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

174
Tree	{ out . escapeJavaStyleString ( this , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

175
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

176
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

177
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Test
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Test
Distance : 6

178
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Distance : 7

179
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Class
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Class
Distance : 7

180
Tree	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

181
Tree	{ this . str . escapeJavaStyleString ( out ) ; }
Code	{ this . str . escapeJavaStyleString ( out ) ; }
Distance : 8

182
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

183
Tree	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

184
Tree	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ str . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

185
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Test
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } Test
Distance : 7

186
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

187
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Class
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } Class
Distance : 6

188
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

189
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

190
Tree	{ out . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Distance : 8

191
Tree	{ str . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Code	{ str . escapeJavaStyleString ( new Returns ( str , out ) ) ; }
Distance : 8

192
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

193
Tree	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ str . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

194
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

195
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

196
Tree	{ str . escapeJavaStyleString ( this , str , out ) ; }
Code	{ str . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

197
Tree	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , str ) ; }
Distance : 5

198
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

199
Tree	{ out . escapeJavaStyleString ( this , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return escapeJavaStyleString ( str , str , Verification.EXPLICIT ) ; }
Code	{ return escapeJavaStyleString ( str , str , Verification.EXPLICIT ) ; }
Distance : 2

1
Tree	{ return super . escapeJavaStyleString ( str , str , str , new FunctionEvaluationException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new FunctionEvaluationException ( str ) ) ; }
Distance : 10

2
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Distance : 6

3
Tree	{ return escapeJavaStyleString ( str , false , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , false , str , continue; ) ; }
Distance : 3

4
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

5
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; }
Distance : 7

6
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return this ; } notifyListeners
Distance : 8

7
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Distance : 8

8
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Distance : 8

9
Tree	{ return str . str ( str ) ; }
Code	{ return str . str ( str ) ; }
Distance : 6

10
Tree	{ return escapeJavaStyleString ( str , str , str ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str ) ; } class
Distance : 3

11
Tree	{ return escapeJavaStyleString ( str , str , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str ) ; } notifyListeners
Distance : 3

12
Tree	{ return str . escapeJavaStyleString ( str ) ; } array
Code	{ return str . escapeJavaStyleString ( str ) ; } array
Distance : 7

13
Tree	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Code	{ return escapeJavaStyleString ( Locale.ENGLISH , null ) ; }
Distance : 4

14
Tree	{ return str . escapeJavaStyleString ( this , str ) ; }
Code	{ return str . escapeJavaStyleString ( this , str ) ; }
Distance : 6

15
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

16
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

17
Tree	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Code	{ return escapeJavaStyleString ( Any.ANY , null ) ; }
Distance : 4

18
Tree	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Code	{ return escapeJavaStyleString ( LocalizedFormats.URL_CONTAINS_NO_DATA , null ) ; }
Distance : 4

19
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

20
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

21
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

22
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } array
Distance : 9

23
Tree	{ return str ( str ) ; } notifyListeners
Code	{ return str ( str ) ; } notifyListeners
Distance : 6

24
Tree	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Class
Code	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Class
Distance : 6

25
Tree	{ str = escapeJavaStyleString ( str , false ) ; super }
Code	{ str = escapeJavaStyleString ( str , false ) ; super }
Distance : 5

26
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } class
Distance : 7

27
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 7

28
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 7

29
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

30
Tree	{ return escapeJavaStyleString ( str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str ) ; }
Distance : 2

31
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 6

32
Tree	{ this ( str , str , str , super(); , false ) ; }
Code	{ this ( str , str , str , super(); , false ) ; }
Distance : 7

33
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

34
Tree	{ return str ( str ) ; }
Code	{ return str ( str ) ; }
Distance : 5

35
Tree	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Distance : 9

36
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } notifyListeners
Distance : 10

37
Tree	{ super . escapeJavaStyleString () ; return false ; } Test
Code	{ super . escapeJavaStyleString () ; return false ; } Test
Distance : 9

38
Tree	{ return ( char ) str ; }
Code	{ return ( char ) str ; }
Distance : 7

39
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

40
Tree	{ return str . escapeJavaStyleString ( str , str , str , Locale.US ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , Locale.US ) ; }
Distance : 6

41
Tree	{ return str . escapeJavaStyleString ( str , str , str , Verification.EXPLICIT ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , Verification.EXPLICIT ) ; }
Distance : 6

42
Tree	{ super += }
Code	{ super += }
Distance : 10

43
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

44
Tree	{ this ( str , str , str , null , false ) ; }
Code	{ this ( str , str , str , null , false ) ; }
Distance : 7

45
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

46
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

47
Tree	{ this ( str ? StringUtils.EMPTY : currentState.length , str , str , str ) ; }
Code	{ this ( str ? StringUtils.EMPTY : currentState.length , str , str , str ) ; }
Distance : 10

48
Tree	{ this ( str ? iValues.length : PropertyCollapseLevel.NONE , str , str , str ) ; }
Code	{ this ( str ? iValues.length : PropertyCollapseLevel.NONE , str , str , str ) ; }
Distance : 10

49
Tree	{ str ++ ; return false ; }
Code	{ str ++ ; return false ; }
Distance : 7

50
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

51
Tree	{ return str . escapeJavaStyleString ( str , null , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , str ) ; }
Distance : 4

52
Tree	{ super . escapeJavaStyleString () ; return null ; }
Code	{ super . escapeJavaStyleString () ; return null ; }
Distance : 9

53
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

54
Tree	{ return str . escapeJavaStyleString ( str , str , str , StringUtils.EMPTY ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , StringUtils.EMPTY ) ; }
Distance : 6

55
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; }
Code	{ super . escapeJavaStyleString ( str ) ; return this ; }
Distance : 7

56
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

57
Tree	{ super . escapeJavaStyleString () ; return false ; }
Code	{ super . escapeJavaStyleString () ; return false ; }
Distance : 8

58
Tree	{ escapeJavaStyleString ( str ) ; return null ; }
Code	{ escapeJavaStyleString ( str ) ; return null ; }
Distance : 6

59
Tree	{ return escapeJavaStyleString ( str , false , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , false , str , super(); ) ; }
Distance : 3

60
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

61
Tree	{ str -- ; return false ; }
Code	{ str -- ; return false ; }
Distance : 7

62
Tree	{ str ++ ; return false ; } Test
Code	{ str ++ ; return false ; } Test
Distance : 8

63
Tree	{ str ++ ; return false ; } Class
Code	{ str ++ ; return false ; } Class
Distance : 8

64
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

65
Tree	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; ) ; }
Distance : 4

66
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

67
Tree	{ return escapeJavaStyleString ( str , configureWith ) ; }
Code	{ return escapeJavaStyleString ( str , configureWith ) ; }
Distance : 3

68
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Object ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Object ( str ) ) ; }
Distance : 10

69
Tree	{ return str . escapeJavaStyleString ( str , null , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null , null ) ; }
Distance : 6

70
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 5

71
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 7

72
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

73
Tree	{ return this . str . escapeJavaStyleString () ; } notifyListeners
Code	{ return this . str . escapeJavaStyleString () ; } notifyListeners
Distance : 8

74
Tree	{ this ( str , str , str , continue; , false ) ; }
Code	{ this ( str , str , str , continue; , false ) ; }
Distance : 7

75
Tree	{ return this . escapeJavaStyleString ( str ) ; } class
Code	{ return this . escapeJavaStyleString ( str ) ; } class
Distance : 7

76
Tree	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return this . escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 7

77
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

78
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

79
Tree	{ return this . str . escapeJavaStyleString () ; }
Code	{ return this . str . escapeJavaStyleString () ; }
Distance : 7

80
Tree	{ super . escapeJavaStyleString () ; return continue; ; }
Code	{ super . escapeJavaStyleString () ; return continue; ; }
Distance : 9

81
Tree	{ str -- ; return true ; }
Code	{ str -- ; return true ; }
Distance : 8

82
Tree	{ str = escapeJavaStyleString ( str , false ) ; if }
Code	{ str = escapeJavaStyleString ( str , false ) ; if }
Distance : 5

83
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } notifyListeners
Distance : 8

84
Tree	{ return escapeJavaStyleString ( str , false , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , false , str , return; ) ; }
Distance : 3

85
Tree	{ return str . escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return str . escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 7

86
Tree	{ return str . escapeJavaStyleString ( str ) ; }
Code	{ return str . escapeJavaStyleString ( str ) ; }
Distance : 6

87
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

88
Tree	{ super . escapeJavaStyleString () ; return super(); ; }
Code	{ super . escapeJavaStyleString () ; return super(); ; }
Distance : 9

89
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

90
Tree	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , return; , str ) ; }
Distance : 4

91
Tree	{ return str . str ( str ) ; } class
Code	{ return str . str ( str ) ; } class
Distance : 7

92
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

93
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

94
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

95
Tree	{ return str . escapeJavaStyleString ( str , null , null , return; ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null , return; ) ; }
Distance : 6

96
Tree	{ return str . escapeJavaStyleString ( str , null , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , return; , null ) ; }
Distance : 6

97
Tree	{ str -- ; return false ; } Test
Code	{ str -- ; return false ; } Test
Distance : 8

98
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 9

99
Tree	{ return escapeJavaStyleString ( str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str ) ; } notifyListeners
Distance : 5

100
Tree	{ return escapeJavaStyleString ( str , str , options.removeUnusedPrototypeProperties ) ; }
Code	{ return escapeJavaStyleString ( str , str , options.removeUnusedPrototypeProperties ) ; }
Distance : 2

101
Tree	{ return str . str ( str ) ; } notifyListeners
Code	{ return str . str ( str ) ; } notifyListeners
Distance : 7

102
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Distance : 7

103
Tree	{ throw super }
Code	{ throw super }
Distance : 10

104
Tree	{ super super }
Code	{ super super }
Distance : 10

105
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

106
Tree	{ return escapeJavaStyleString ( str ) ; }
Code	{ return escapeJavaStyleString ( str ) ; }
Distance : 4

107
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

108
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

109
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

110
Tree	{ return array.length . escapeJavaStyleString ( str ) ; }
Code	{ return array.length . escapeJavaStyleString ( str ) ; }
Distance : 6

111
Tree	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Test
Code	{ return str . escapeJavaStyleString ( str , str , str , false ) ; } Test
Distance : 6

112
Tree	{ return str ( str ) ; } array
Code	{ return str ( str ) ; } array
Distance : 6

113
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } array
Distance : 10

114
Tree	{ escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 6

115
Tree	{ this ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , str , str , str ) ; }
Code	{ this ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , str , str , str ) ; }
Distance : 10

116
Tree	{ return ( int ) str ; }
Code	{ return ( int ) str ; }
Distance : 7

117
Tree	{ super . escapeJavaStyleString () ; return true ; }
Code	{ super . escapeJavaStyleString () ; return true ; }
Distance : 9

118
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Coordinates3D ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Coordinates3D ( str ) ) ; }
Distance : 10

119
Tree	{ return escapeJavaStyleString ( str , str , str ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str ) ; } array
Distance : 3

120
Tree	{ return escapeJavaStyleString ( this , str ) ; } class
Code	{ return escapeJavaStyleString ( this , str ) ; } class
Distance : 5

121
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

122
Tree	{ str = escapeJavaStyleString ( str , false ) ; assert }
Code	{ str = escapeJavaStyleString ( str , false ) ; assert }
Distance : 5

123
Tree	{ return str . escapeJavaStyleString ( str , continue; , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , str ) ; }
Distance : 4

124
Tree	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( this , str ) ; } notifyListeners
Distance : 5

125
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , return; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , return; ) ; }
Distance : 4

126
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 6

127
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; }
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; }
Distance : 7

128
Tree	{ str = escapeJavaStyleString ( str , false ) ; throw }
Code	{ str = escapeJavaStyleString ( str , false ) ; throw }
Distance : 5

129
Tree	{ return str . escapeJavaStyleString ( str ) ; } class
Code	{ return str . escapeJavaStyleString ( str ) ; } class
Distance : 7

130
Tree	{ escapeJavaStyleString ( str ) ; assert }
Code	{ escapeJavaStyleString ( str ) ; assert }
Distance : 6

131
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

132
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , continue; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , continue; ) ; }
Distance : 6

133
Tree	{ return str . escapeJavaStyleString ( str , return; , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , str ) ; }
Distance : 4

134
Tree	{ super return }
Code	{ super return }
Distance : 10

135
Tree	{ str -- ; return false ; } Class
Code	{ str -- ; return false ; } Class
Distance : 8

136
Tree	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Code	{ escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } notifyListeners
Distance : 7

137
Tree	{ super . escapeJavaStyleString () ; return return; ; }
Code	{ super . escapeJavaStyleString () ; return return; ; }
Distance : 9

138
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Test
Code	{ escapeJavaStyleString ( str ) ; return false ; } Test
Distance : 6

139
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } array
Distance : 8

140
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return this ; } array
Distance : 8

141
Tree	{ str ++ ; return true ; }
Code	{ str ++ ; return true ; }
Distance : 8

142
Tree	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return NUMBER_CONSTANT ; } array
Distance : 8

143
Tree	{ return str . escapeJavaStyleString ( this , str ) ; } array
Code	{ return str . escapeJavaStyleString ( this , str ) ; } array
Distance : 7

144
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; }
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; }
Distance : 8

145
Tree	{ return escapeJavaStyleString ( str , false ) ; } Class
Code	{ return escapeJavaStyleString ( str , false ) ; } Class
Distance : 3

146
Tree	{ return str . escapeJavaStyleString ( this , str ) ; } notifyListeners
Code	{ return str . escapeJavaStyleString ( this , str ) ; } notifyListeners
Distance : 7

147
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , super(); ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , super(); ) ; }
Distance : 4

148
Tree	{ escapeJavaStyleString ( str ) ; return return; ; }
Code	{ escapeJavaStyleString ( str ) ; return return; ; }
Distance : 6

149
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , continue; ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , continue; ) ; }
Distance : 4

150
Tree	{ return str . escapeJavaStyleString ( str , str , str , true ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , true ) ; }
Distance : 6

151
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

152
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } class
Distance : 5

153
Tree	{ this ( str , str , str , return; , false ) ; }
Code	{ this ( str , str , str , return; , false ) ; }
Distance : 7

154
Tree	{ return ( byte ) str ; }
Code	{ return ( byte ) str ; }
Distance : 7

155
Tree	{ return escapeJavaStyleString ( str , false ) ; } Test
Code	{ return escapeJavaStyleString ( str , false ) ; } Test
Distance : 3

156
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 9

157
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

158
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } notifyListeners
Distance : 5

159
Tree	{ return escapeJavaStyleString ( str ) ; } array
Code	{ return escapeJavaStyleString ( str ) ; } array
Distance : 5

160
Tree	{ super . escapeJavaStyleString () ; return false ; } Class
Code	{ super . escapeJavaStyleString () ; return false ; } Class
Distance : 9

161
Tree	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Distance : 6

162
Tree	{ escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 6

163
Tree	{ return str . str ( str ) ; } array
Code	{ return str . str ( str ) ; } array
Distance : 7

164
Tree	{ return this . escapeJavaStyleString ( str ) ; } array
Code	{ return this . escapeJavaStyleString ( str ) ; } array
Distance : 7

165
Tree	{ return str . escapeJavaStyleString ( str , str , str , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 6

166
Tree	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return escapeJavaStyleString ( str ) ; } class
Distance : 9

167
Tree	{ return str . escapeJavaStyleString ( str , return; , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null , null ) ; }
Distance : 6

168
Tree	{ return str ( str ) ; } class
Code	{ return str ( str ) ; } class
Distance : 6

169
Tree	{ return str . escapeJavaStyleString ( str , super(); , str ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , str ) ; }
Distance : 4

170
Tree	{ return this . str . escapeJavaStyleString () ; } class
Code	{ return this . str . escapeJavaStyleString () ; } class
Distance : 8

171
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString () , STRING_CONSTANT ) ; } class
Distance : 8

172
Tree	{ super . escapeJavaStyleString ( str ) ; return this ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return this ; } class
Distance : 8

173
Tree	{ return escapeJavaStyleString ( str ) ; } class
Code	{ return escapeJavaStyleString ( str ) ; } class
Distance : 5

174
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } array
Distance : 8

175
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } array
Distance : 5

176
Tree	{ escapeJavaStyleString ( str ) ; return false ; } Class
Code	{ escapeJavaStyleString ( str ) ; return false ; } Class
Distance : 6

177
Tree	{ return this . str . escapeJavaStyleString () ; } array
Code	{ return this . str . escapeJavaStyleString () ; } array
Distance : 8

178
Tree	{ return escapeJavaStyleString ( str , str , rhs.b ) ; }
Code	{ return escapeJavaStyleString ( str , str , rhs.b ) ; }
Distance : 2

179
Tree	{ return escapeJavaStyleString ( str , p2.vector ) ; }
Code	{ return escapeJavaStyleString ( str , p2.vector ) ; }
Distance : 3

180
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

181
Tree	{ return escapeJavaStyleString ( str , false , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , false , str , null ) ; }
Distance : 3

182
Tree	{ return ( short ) str ; }
Code	{ return ( short ) str ; }
Distance : 7

183
Tree	{ this ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE , str , str , str ) ; }
Code	{ this ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE , str , str , str ) ; }
Distance : 10

184
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } class
Distance : 8

185
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } notifyListeners
Distance : 8

186
Tree	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } class
Code	{ return escapeJavaStyleString ( str , str , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; } class
Distance : 10

187
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

188
Tree	{ return str . escapeJavaStyleString ( this , str ) ; } class
Code	{ return str . escapeJavaStyleString ( this , str ) ; } class
Distance : 7

189
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

190
Tree	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Code	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Distance : 3

191
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

192
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

193
Tree	{ return escapeJavaStyleString ( this , str ) ; } array
Code	{ return escapeJavaStyleString ( this , str ) ; } array
Distance : 5

194
Tree	{ return str . escapeJavaStyleString ( str , str , str , false ) ; }
Code	{ return str . escapeJavaStyleString ( str , str , str , false ) ; }
Distance : 5

195
Tree	{ return escapeJavaStyleString ( str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , StringUtils.EMPTY ) ; }
Distance : 3

196
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , null ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString ( str ) , null ) ; }
Distance : 6

197
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

198
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

199
Tree	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , null ) ; }
Code	{ return escapeJavaStyleString ( str . escapeJavaStyleString () , null ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = ( element ) element ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( element ) element ; } else { type = array.length ; }
Distance : 10

1
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

2
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = values.length ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = values.length ; }
Distance : 10

3
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = array.length ; }
Distance : 8

4
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 10

5
Tree	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 12

6
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object + STRING_CONSTANT ; }
Distance : 5

7
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

8
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 9

9
Tree	if ( element != null ) { type = problem.y ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = problem.y ; } else { type = Object . getClass () ; }
Distance : 10

10
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = values.length ; }
Distance : 9

11
Tree	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Distance : 12

12
Tree	if ( element != null ) { type = ( int [] ) type . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) type . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

13
Tree	if ( element != null ) { type = element . getClass () ; } else { type = values.length != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = values.length != null ; }
Distance : 6

14
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = Object . getClass () ; }
Distance : 11

15
Tree	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY != null ; }
Distance : 6

16
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

17
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 10

18
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

19
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = StringUtils.EMPTY ; }
Distance : 10

20
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Distance : 9

21
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

22
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

23
Tree	if ( element != null ) { type = element . getClass () ; } else { if = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = getClass () ; }
Distance : 6

24
Tree	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Distance : 12

25
Tree	if ( element != null ) { type = ( element ) element ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( element ) element ; } else { type = values.length ; }
Distance : 10

26
Tree	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Distance : 12

27
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class , CheckLevel.WARNING ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class , CheckLevel.WARNING ) ; }
Distance : 8

28
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { else = getClass () ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { else = getClass () ; }
Distance : 8

29
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 6

30
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Distance : 5

31
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = FeatureSet.ES3 ; }
Distance : 10

32
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = getClass () ; }
Distance : 9

33
Tree	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 6

34
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 10

35
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 9

36
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 6

37
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

38
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = Object . getClass () ; }
Distance : 8

39
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Distance : 6

40
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 9

41
Tree	if ( element != null ) { type = element . getClass () ; } else { if = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = ( Object ) Object . getClass () ; }
Distance : 8

42
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Distance : 10

43
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = Object . getClass () ; }
Distance : 8

44
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element * Object ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element * Object ; }
Distance : 6

45
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Distance : 6

46
Tree	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Distance : 7

47
Tree	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = values.length ; }
Distance : 10

48
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

49
Tree	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 6

50
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object * element ; }
Distance : 6

51
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 9

52
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 10

53
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 9

54
Tree	if ( element != null ) { type = element . getClass () ; } else { else = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = ( Object ) Object . getClass () ; }
Distance : 8

55
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 10

56
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { else = getClass () ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { else = getClass () ; }
Distance : 8

57
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 10

58
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Distance : 9

59
Tree	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = array.length ; }
Distance : 10

60
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 6

61
Tree	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = Object . getClass () ; }
Distance : 11

62
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 9

63
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () - element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () - element ; }
Distance : 8

64
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

65
Tree	if ( element != null ) { this . type = element . getClass () ; } else { else = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { else = getClass () ; }
Distance : 8

66
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 10

67
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 6

68
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type -= Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type -= Object ; }
Distance : 9

69
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { else = getClass () ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { else = getClass () ; }
Distance : 10

70
Tree	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

71
Tree	if ( element != null ) { this . type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 8

72
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

73
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

74
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 != null ; }
Distance : 6

75
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Distance : 8

76
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type -= type ; }
Distance : 9

77
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

78
Tree	if ( element != null ) { type = null ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = null ; } else { type = element . getClass () ; }
Distance : 10

79
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class , CheckLevel.ERROR ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class , CheckLevel.ERROR ) ; }
Distance : 8

80
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

81
Tree	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = StringUtils.EMPTY ; }
Distance : 15

82
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

83
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

84
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

85
Tree	if ( element != null ) { type = ( int [] ) type . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) type . getClass () ; } else { else = Object . getClass () ; }
Distance : 11

86
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

87
Tree	if ( element != null ) { type = element . getClass () ; } else { else = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = getClass () ; }
Distance : 6

88
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element * element ; }
Distance : 6

89
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 8

90
Tree	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = array.length ; }
Code	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = array.length ; }
Distance : 15

91
Tree	if ( element != null ) { this . type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { pushAnnotations = getClass () ; }
Distance : 8

92
Tree	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = Object . getClass () ; }
Distance : 10

93
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object ( Object . class , CheckLevel.WARNING ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object ( Object . class , CheckLevel.WARNING ) ; }
Distance : 8

94
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 5

95
Tree	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { this . type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 12

96
Tree	if ( element != null ) { this . type = element . getClass () ; } else { if = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { if = getClass () ; }
Distance : 8

97
Tree	if ( element != null ) { type = type . getClass () ; } else { type = Object + STRING_CONSTANT ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = Object + STRING_CONSTANT ; }
Distance : 6

98
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () - type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () - type ; }
Distance : 8

99
Tree	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = Object . getClass () ; }
Distance : 8

100
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . element ; }
Distance : 9

101
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Distance : 10

102
Tree	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 15

103
Tree	if ( element != null ) { type = element . getClass () ; } else { private = Object ( Object . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { private = Object ( Object . class ) ; }
Distance : 6

104
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 9

105
Tree	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Distance : 6

106
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = Object . getClass () ; }
Distance : 10

107
Tree	if ( element != null ) { type = ( element ) element ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( element ) element ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

108
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

109
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 10

110
Tree	if ( element != null ) { type = element . getClass () ; } else { else = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = ( Object ) Object . getClass () ; }
Distance : 8

111
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Distance : 12

112
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

113
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = values.length ; }
Distance : 8

114
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Distance : 6

115
Tree	if ( element != null ) { type = ( type ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( type ) element . getClass () ; } else { type = this . type ; }
Distance : 9

116
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

117
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { else = getClass () ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { else = getClass () ; }
Distance : 8

118
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 9

119
Tree	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Distance : 6

120
Tree	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Distance : 10

121
Tree	if ( element != null ) { type = element . getClass () ; } else { else = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = getClass () ; }
Distance : 6

122
Tree	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = values.length ; }
Code	if ( element != null ) { type = new element ( element . getClass ( this . Object ) ) ; } else { type = values.length ; }
Distance : 15

123
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 8

124
Tree	if ( element != null ) { type = element . getClass () ; } else { type /= Object ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type /= Object ; }
Distance : 6

125
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { pushAnnotations = getClass () ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { pushAnnotations = getClass () ; }
Distance : 10

126
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type -= element ; }
Distance : 9

127
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Distance : 10

128
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = ( Object ) Object . getClass () ; }
Distance : 8

129
Tree	if ( element != null ) { type = element . getClass () ; } else { type /= type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type /= type ; }
Distance : 6

130
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Distance : 12

131
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object ( Object . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object ( Object . class ) ; }
Distance : 6

132
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Distance : 8

133
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 != null ; }
Distance : 6

134
Tree	if ( element != null ) { this . type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 8

135
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object ( Object . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object ( Object . class ) ; }
Distance : 6

136
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Distance : 9

137
Tree	if ( element != null ) { type = type . getClass () ; } else { type /= Object ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type /= Object ; }
Distance : 7

138
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 10

139
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 10

140
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 9

141
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Distance : 10

142
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = getClass () ; }
Distance : 9

143
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 9

144
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 9

145
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 9

146
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = ( Object ) Object . getClass () ; }
Distance : 8

147
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 9

148
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = ( Object ) Object . getClass () ; }
Distance : 8

149
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass ( Object , NUMBER_CONSTANT , element . class ) ; }
Distance : 12

150
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = array.length ; }
Distance : 8

151
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

152
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = array.length ; }
Distance : 8

153
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { element -= Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { element -= Object ; }
Distance : 9

154
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Distance : 10

155
Tree	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 10

156
Tree	if ( element != null ) { type = ( element ) element ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( element ) element ; } else { type = StringUtils.EMPTY ; }
Distance : 10

157
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class ) ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object ( Object . class ) ; }
Distance : 6

158
Tree	if ( element != null ) { type = return; ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = return; ; } else { type = Object . getClass () ; }
Distance : 10

159
Tree	if ( element != null ) { type = continue; ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = continue; ; } else { type = Object . getClass () ; }
Distance : 10

160
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Distance : 10

161
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Distance : 10

162
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

163
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

164
Tree	if ( element != null ) { type = null ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = null ; } else { type = Object . getClass () ; }
Distance : 10

165
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

166
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

167
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Distance : 9

168
Tree	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { else = getClass () ; }
Code	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { else = getClass () ; }
Distance : 8

169
Tree	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( element [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

170
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Distance : 6

171
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 6

172
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

173
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object * Object ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object * Object ; }
Distance : 6

174
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 10

175
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Distance : 8

176
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 9

177
Tree	if ( element != null ) { type = element . getClass () ; } else { if = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = getClass () ; }
Distance : 6

178
Tree	if ( element != null ) { type = element . getClass () ; } else { if = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = ( Object ) Object . getClass () ; }
Distance : 8

179
Tree	if ( element != null ) { type = val.length ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = val.length ; } else { type = Object . getClass () ; }
Distance : 10

180
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 6

181
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array.length ; }
Distance : 9

182
Tree	if ( element != null ) { this . type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 8

183
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = Object . getClass () ; }
Distance : 8

184
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = StringUtils.EMPTY . getClass () ; }
Distance : 9

185
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

186
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = getClass () ; }
Distance : 9

187
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = getClass () ; }
Distance : 8

188
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = LanguageMode.ECMASCRIPT_2015 . getClass () ; }
Distance : 10

189
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () - Object ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () - Object ; }
Distance : 8

190
Tree	if ( element != null ) { type = element . getClass () ; } else { private = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { private = ( Object ) Object . getClass () ; }
Distance : 8

191
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 10

192
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = FeatureSet.ES3 . getClass () ; }
Distance : 9

193
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Distance : 8

194
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { if = getClass () ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { if = getClass () ; }
Distance : 10

195
Tree	if ( element != null ) { type = element . getClass () ; } else { type /= element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type /= element ; }
Distance : 6

196
Tree	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { private = getClass () ; }
Code	if ( element != null ) { type = STRING_CONSTANT + element . getClass () + STRING_CONSTANT ; } else { private = getClass () ; }
Distance : 10

197
Tree	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Distance : 7

198
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = FeatureSet.ES3 . getClass () ; }
Distance : 9

199
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () - Object ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () - Object ; }
Distance : 8

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return this . value . containsKey ( value ) ;
Code	return this . value . containsKey ( value ) ;
Distance : 5

1
Tree	return this . value . containsKey () ;
Code	return this . value . containsKey () ;
Distance : 8

2
Tree	return new Interval ( value , value ) ;
Code	return new Interval ( value , value ) ;
Distance : 8

3
Tree	return m . containsKey ( m , value . containsKey () ) ;
Code	return m . containsKey ( m , value . containsKey () ) ;
Distance : 7

4
Tree	return containsKey ( value , value , value , m ) ;
Code	return containsKey ( value , value , value , m ) ;
Distance : 9

5
Tree	return m . containsKey ( m ) && value . containsKey () ;
Code	return m . containsKey ( m ) && value . containsKey () ;
Distance : 9

6
Tree	value . containsKey ( value )
Code	value . containsKey ( value )
Distance : 7

7
Tree	return value + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return value + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

8
Tree	return value . containsKey ( STRING_CONSTANT , value ) ;
Code	return value . containsKey ( STRING_CONSTANT , value ) ;
Distance : 7

9
Tree	return m . containsKey ( value , new Type ( value ) ) ;
Code	return m . containsKey ( value , new Type ( value ) ) ;
Distance : 8

10
Tree	return this . m . containsKey () ; Test
Code	return this . m . containsKey () ; Test
Distance : 8

11
Tree	return m . containsKey () ; Class
Code	return m . containsKey () ; Class
Distance : 8

12
Tree	return new IllegalStateException ( value , NUMBER_CONSTANT ) ;
Code	return new IllegalStateException ( value , NUMBER_CONSTANT ) ;
Distance : 9

13
Tree	return this . value . containsKey () . containsKey ( value ) ;
Code	return this . value . containsKey () . containsKey ( value ) ;
Distance : 6

14
Tree	return m . containsKey ( value , new Type ( value , false ) ) ;
Code	return m . containsKey ( value , new Type ( value , false ) ) ;
Distance : 10

15
Tree	return new MaxCountExceededException ( value , false ) ;
Code	return new MaxCountExceededException ( value , false ) ;
Distance : 9

16
Tree	return new IllegalStateException ( value , false ) ;
Code	return new IllegalStateException ( value , false ) ;
Distance : 9

17
Tree	return value . containsKey ( value ) . containsKey () ;
Code	return value . containsKey ( value ) . containsKey () ;
Distance : 8

18
Tree	return ! value . containsKey ( m ) ;
Code	return ! value . containsKey ( m ) ;
Distance : 6

19
Tree	return ( m ) value . containsKey () ;
Code	return ( m ) value . containsKey () ;
Distance : 8

20
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

21
Tree	return this . m . containsKey () ;
Code	return this . m . containsKey () ;
Distance : 7

22
Tree	return m != Reach.ALL ;
Code	return m != Reach.ALL ;
Distance : 8

23
Tree	return m . containsKey () ;
Code	return m . containsKey () ;
Distance : 7

24
Tree	return m . containsKey ( m . containsKey ( m ) ) ;
Code	return m . containsKey ( m . containsKey ( m ) ) ;
Distance : 5

25
Tree	return m . containsKey ( m . containsKey ( value ) ) ;
Code	return m . containsKey ( m . containsKey ( value ) ) ;
Distance : 4

26
Tree	return m != Boolean.FALSE ;
Code	return m != Boolean.FALSE ;
Distance : 8

27
Tree	return m . containsKey ( new Returns ( value , false ) ) ;
Code	return m . containsKey ( new Returns ( value , false ) ) ;
Distance : 9

28
Tree	return this . value . containsKey ( m ) ;
Code	return this . value . containsKey ( m ) ;
Distance : 6

29
Tree	return NUMBER_CONSTANT / m ; Test
Code	return NUMBER_CONSTANT / m ; Test
Distance : 10

30
Tree	return new m () . containsKey ( m ) ;
Code	return new m () . containsKey ( m ) ;
Distance : 6

31
Tree	return containsKey ( value ) ; Test
Code	return containsKey ( value ) ; Test
Distance : 7

32
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 6

33
Tree	return new MaxCountExceededException ( value , false ) . containsKey ( value ) ;
Code	return new MaxCountExceededException ( value , false ) . containsKey ( value ) ;
Distance : 7

34
Tree	return m . containsKey ( this . value ) ;
Code	return m . containsKey ( this . value ) ;
Distance : 6

35
Tree	return m . containsKey ( value , new Returns ( value , false ) ) ;
Code	return m . containsKey ( value , new Returns ( value , false ) ) ;
Distance : 10

36
Tree	return this . m . containsKey () . containsKey ( value ) ;
Code	return this . m . containsKey () . containsKey ( value ) ;
Distance : 6

37
Tree	return new IllegalStateException ( value ) ;
Code	return new IllegalStateException ( value ) ;
Distance : 7

38
Tree	return m != containsKey ;
Code	return m != containsKey ;
Distance : 7

39
Tree	return m ;
Code	return m ;
Distance : 9

40
Tree	return m . containsKey ( value , m . containsKey () ) ;
Code	return m . containsKey ( value , m . containsKey () ) ;
Distance : 7

41
Tree	return Boolean.FALSE == null ;
Code	return Boolean.FALSE == null ;
Distance : 9

42
Tree	return value . containsKey ( value , false ) ;
Code	return value . containsKey ( value , false ) ;
Distance : 7

43
Tree	return this . value ;
Code	return this . value ;
Distance : 8

44
Tree	return m . containsKey ( m ) + value ;
Code	return m . containsKey ( m ) + value ;
Distance : 7

45
Tree	return m . containsKey ( m ) . containsKey ( value ) ;
Code	return m . containsKey ( m ) . containsKey ( value ) ;
Distance : 4

46
Tree	return containsKey ( value , m , false ) ;
Code	return containsKey ( value , m , false ) ;
Distance : 8

47
Tree	return new Interval ( value , NUMBER_CONSTANT ) ;
Code	return new Interval ( value , NUMBER_CONSTANT ) ;
Distance : 9

48
Tree	return this . value . containsKey () . containsKey ( m ) ;
Code	return this . value . containsKey () . containsKey ( m ) ;
Distance : 7

49
Tree	return value . containsKey ( STRING_CONSTANT , m ) ;
Code	return value . containsKey ( STRING_CONSTANT , m ) ;
Distance : 8

50
Tree	return value . containsKey () . containsKey () . containsKey ( value ) ;
Code	return value . containsKey () . containsKey () . containsKey ( value ) ;
Distance : 7

51
Tree	return m . m ( m ) ;
Code	return m . m ( m ) ;
Distance : 6

52
Tree	return new value () . containsKey ( value ) ;
Code	return new value () . containsKey ( value ) ;
Distance : 5

53
Tree	return m ; Test
Code	return m ; Test
Distance : 10

54
Tree	return value . containsKey () . containsKey () . containsKey ( m ) ;
Code	return value . containsKey () . containsKey () . containsKey ( m ) ;
Distance : 8

55
Tree	return ! value . containsKey ( value ) ;
Code	return ! value . containsKey ( value ) ;
Distance : 5

56
Tree	return value . containsKey ( NUMBER_CONSTANT , m ) ;
Code	return value . containsKey ( NUMBER_CONSTANT , m ) ;
Distance : 8

57
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

58
Tree	return m . containsKey ( m , value ) ;
Code	return m . containsKey ( m , value ) ;
Distance : 6

59
Tree	return containsKey ( value ) ;
Code	return containsKey ( value ) ;
Distance : 6

60
Tree	return m . containsKey ( value , value . containsKey () ) ;
Code	return m . containsKey ( value , value . containsKey () ) ;
Distance : 8

61
Tree	return ( value ) value . containsKey () ;
Code	return ( value ) value . containsKey () ;
Distance : 8

62
Tree	return m . containsKey () ; Test
Code	return m . containsKey () ; Test
Distance : 8

63
Tree	return containsKey ( m , value , false ) ;
Code	return containsKey ( m , value , false ) ;
Distance : 8

64
Tree	return this . m . containsKey ( m ) ;
Code	return this . m . containsKey ( m ) ;
Distance : 5

65
Tree	return m . containsKey ( NUMBER_CONSTANT , m ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , m ) ;
Distance : 7

66
Tree	return m . containsKey ( value ) + m ;
Code	return m . containsKey ( value ) + m ;
Distance : 6

67
Tree	return m . containsKey ( value , false ) ;
Code	return m . containsKey ( value , false ) ;
Distance : 6

68
Tree	return NUMBER_CONSTANT / m ;
Code	return NUMBER_CONSTANT / m ;
Distance : 9

69
Tree	return null ;
Code	return null ;
Distance : 9

70
Tree	return Throwable == null ;
Code	return Throwable == null ;
Distance : 9

71
Tree	return this . m ;
Code	return this . m ;
Distance : 9

72
Tree	return containsKey ( value , m ) ;
Code	return containsKey ( value , m ) ;
Distance : 8

73
Tree	return return; ;
Code	return return; ;
Distance : 10

74
Tree	return new Interval ( value , false ) . containsKey ( value ) ;
Code	return new Interval ( value , false ) . containsKey ( value ) ;
Distance : 7

75
Tree	return containsKey ( value ) ; Class
Code	return containsKey ( value ) ; Class
Distance : 7

76
Tree	return m . containsKey ( value . containsKey ( m ) ) ;
Code	return m . containsKey ( value . containsKey ( m ) ) ;
Distance : 6

77
Tree	return m . containsKey ( value , new Returns ( value ) ) ;
Code	return m . containsKey ( value , new Returns ( value ) ) ;
Distance : 8

78
Tree	return m . containsKey ( value , true ) ;
Code	return m . containsKey ( value , true ) ;
Distance : 6

79
Tree	return m . containsKey ( value , new value ( value ) ) ;
Code	return m . containsKey ( value , new value ( value ) ) ;
Distance : 8

80
Tree	return RhinoErrorReporter.UNRECOGNIZED_TYPE_ERROR . containsKey ( value ) ;
Code	return RhinoErrorReporter.UNRECOGNIZED_TYPE_ERROR . containsKey ( value ) ;
Distance : 5

81
Tree	return m . containsKey ( new DummyLocalizable ( value , false ) ) ;
Code	return m . containsKey ( new DummyLocalizable ( value , false ) ) ;
Distance : 9

82
Tree	return value . containsKey ( value ) . containsKey ( value ) ;
Code	return value . containsKey ( value ) . containsKey ( value ) ;
Distance : 6

83
Tree	return new MaxCountExceededException ( value ) ;
Code	return new MaxCountExceededException ( value ) ;
Distance : 7

84
Tree	return this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

85
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 10

86
Tree	return value . containsKey ( value ) && value . containsKey () ;
Code	return value . containsKey ( value ) && value . containsKey () ;
Distance : 10

87
Tree	return containsKey ( m , m ) ;
Code	return containsKey ( m , m ) ;
Distance : 8

88
Tree	return value . containsKey ( value , value ) ;
Code	return value . containsKey ( value , value ) ;
Distance : 7

89
Tree	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 7

90
Tree	return containsKey ( value , value ) ;
Code	return containsKey ( value , value ) ;
Distance : 8

91
Tree	return m . containsKey ( value ) + value ;
Code	return m . containsKey ( value ) + value ;
Distance : 6

92
Tree	return containsKey == null ;
Code	return containsKey == null ;
Distance : 9

93
Tree	return containsKey . containsKey ( value ) ;
Code	return containsKey . containsKey ( value ) ;
Distance : 5

94
Tree	return m . value ( m ) ;
Code	return m . value ( m ) ;
Distance : 6

95
Tree	return ( value ) value . containsKey ( m ) ;
Code	return ( value ) value . containsKey ( m ) ;
Distance : 6

96
Tree	return new MathIllegalStateException ( value ) ;
Code	return new MathIllegalStateException ( value ) ;
Distance : 7

97
Tree	return this . m . containsKey ( value , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	return this . m . containsKey ( value , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

98
Tree	return containsKey () . containsKey ( value ) ; Test
Code	return containsKey () . containsKey ( value ) ; Test
Distance : 6

99
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

100
Tree	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 7

101
Tree	return this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

102
Tree	return m . m ( value ) ;
Code	return m . m ( value ) ;
Distance : 5

103
Tree	return m . containsKey ( this . m ) ;
Code	return m . containsKey ( this . m ) ;
Distance : 7

104
Tree	return value . containsKey ( value , value . containsKey () ) ;
Code	return value . containsKey ( value , value . containsKey () ) ;
Distance : 9

105
Tree	return value . containsKey () ;
Code	return value . containsKey () ;
Distance : 8

106
Tree	return value . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return value . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 7

107
Tree	return this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ; Class
Code	return this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ; Class
Distance : 8

108
Tree	return containsKey () . containsKey ( value ) ; Class
Code	return containsKey () . containsKey ( value ) ; Class
Distance : 6

109
Tree	return ( m ) m . containsKey () ;
Code	return ( m ) m . containsKey () ;
Distance : 7

110
Tree	return containsKey ( value , value , false ) ;
Code	return containsKey ( value , value , false ) ;
Distance : 9

111
Tree	return m . containsKey ( new ArrayRealVector ( value , false ) ) ;
Code	return m . containsKey ( new ArrayRealVector ( value , false ) ) ;
Distance : 9

112
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

113
Tree	return new Interval ( value , false ) ;
Code	return new Interval ( value , false ) ;
Distance : 9

114
Tree	return this . m . containsKey ( value ) ;
Code	return this . m . containsKey ( value ) ;
Distance : 4

115
Tree	return new MathIllegalStateException ( value , false ) ;
Code	return new MathIllegalStateException ( value , false ) ;
Distance : 9

116
Tree	return m . containsKey () . containsKey ( m ) ;
Code	return m . containsKey () . containsKey ( m ) ;
Distance : 5

117
Tree	return containsKey ( m ) ;
Code	return containsKey ( m ) ;
Distance : 7

118
Tree	return m . containsKey ( value ) && m . containsKey () ;
Code	return m . containsKey ( value ) && m . containsKey () ;
Distance : 8

119
Tree	return containsKey () . containsKey ( value ) ;
Code	return containsKey () . containsKey ( value ) ;
Distance : 5

120
Tree	return m . containsKey ( value . containsKey ( value ) ) ;
Code	return m . containsKey ( value . containsKey ( value ) ) ;
Distance : 5

121
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

122
Tree	return containsKey ( value , m , m , m ) ;
Code	return containsKey ( value , m , m , m ) ;
Distance : 8

123
Tree	return new m () . containsKey ( value ) ;
Code	return new m () . containsKey ( value ) ;
Distance : 5

124
Tree	return new MathIllegalStateException ( value , NUMBER_CONSTANT ) ;
Code	return new MathIllegalStateException ( value , NUMBER_CONSTANT ) ;
Distance : 9

125
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 6

126
Tree	return ! m . containsKey ( value ) ;
Code	return ! m . containsKey ( value ) ;
Distance : 4

127
Tree	return m . containsKey ( value , new SinFunction ( value ) ) ;
Code	return m . containsKey ( value , new SinFunction ( value ) ) ;
Distance : 8

128
Tree	return containsKey ( value , value , m , m ) ;
Code	return containsKey ( value , value , m , m ) ;
Distance : 9

129
Tree	return m != interceptors.target ;
Code	return m != interceptors.target ;
Distance : 8

130
Tree	m . containsKey ( value )
Code	m . containsKey ( value )
Distance : 6

131
Tree	return ( value ) value . containsKey ( value ) ;
Code	return ( value ) value . containsKey ( value ) ;
Distance : 5

132
Tree	return new MathIllegalStateException ( value , false ) . containsKey ( value ) ;
Code	return new MathIllegalStateException ( value , false ) . containsKey ( value ) ;
Distance : 7

133
Tree	return new Interval ( value , value , m . containsKey ( value ) ) ;
Code	return new Interval ( value , value , m . containsKey ( value ) ) ;
Distance : 8

134
Tree	return Throwable . containsKey ( value ) ;
Code	return Throwable . containsKey ( value ) ;
Distance : 5

135
Tree	return new MathIllegalStateException ( value , value , m . containsKey ( value ) ) ;
Code	return new MathIllegalStateException ( value , value , m . containsKey ( value ) ) ;
Distance : 8

136
Tree	return new MathIllegalStateException ( value , value ) ;
Code	return new MathIllegalStateException ( value , value ) ;
Distance : 8

137
Tree	return m . containsKey ( value , m ) ;
Code	return m . containsKey ( value , m ) ;
Distance : 6

138
Tree	return m . containsKey () . containsKey ( value ) ;
Code	return m . containsKey () . containsKey ( value ) ;
Distance : 4

139
Tree	return ( value ) m . containsKey ( value ) ;
Code	return ( value ) m . containsKey ( value ) ;
Distance : 4

140
Tree	return ( value ) m . containsKey () ;
Code	return ( value ) m . containsKey () ;
Distance : 7

141
Tree	return super(); ;
Code	return super(); ;
Distance : 10

142
Tree	return m . containsKey ( value , value ) ;
Code	return m . containsKey ( value , value ) ;
Distance : 6

143
Tree	return this . m . containsKey ( value , containsKey ) ;
Code	return this . m . containsKey ( value , containsKey ) ;
Distance : 6

144
Tree	return new IllegalStateException ( value , value , m . containsKey ( value ) ) ;
Code	return new IllegalStateException ( value , value , m . containsKey ( value ) ) ;
Distance : 8

145
Tree	return m . containsKey ( new value ( value , false ) ) ;
Code	return m . containsKey ( new value ( value , false ) ) ;
Distance : 9

146
Tree	return m . value ( value ) ;
Code	return m . value ( value ) ;
Distance : 5

147
Tree	return m . containsKey ( value , new value ( value , false ) ) ;
Code	return m . containsKey ( value , new value ( value , false ) ) ;
Distance : 10

148
Tree	return this . m . containsKey () . containsKey ( m ) ;
Code	return this . m . containsKey () . containsKey ( m ) ;
Distance : 7

149
Tree	return new IllegalStateException ( value , false ) . containsKey ( value ) ;
Code	return new IllegalStateException ( value , false ) . containsKey ( value ) ;
Distance : 7

150
Tree	return containsKey () . containsKey ( m ) ;
Code	return containsKey () . containsKey ( m ) ;
Distance : 6

151
Tree	m . containsKey ( m )
Code	m . containsKey ( m )
Distance : 7

152
Tree	return m . containsKey () . containsKey () . containsKey ( value ) ;
Code	return m . containsKey () . containsKey () . containsKey ( value ) ;
Distance : 6

153
Tree	return Boolean.FALSE . containsKey ( value ) ;
Code	return Boolean.FALSE . containsKey ( value ) ;
Distance : 5

154
Tree	return new Interval ( value ) ;
Code	return new Interval ( value ) ;
Distance : 7

155
Tree	return containsKey ( value , value , true ) ;
Code	return containsKey ( value , value , true ) ;
Distance : 9

156
Tree	return this . m . containsKey ( value , Throwable ) ;
Code	return this . m . containsKey ( value , Throwable ) ;
Distance : 6

157
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

158
Tree	return m . containsKey ( m ) . containsKey () ;
Code	return m . containsKey ( m ) . containsKey () ;
Distance : 7

159
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

160
Tree	return m . containsKey ( value , new SinFunction ( value , false ) ) ;
Code	return m . containsKey ( value , new SinFunction ( value , false ) ) ;
Distance : 10

161
Tree	return m . containsKey ( value ) . containsKey () ;
Code	return m . containsKey ( value ) . containsKey () ;
Distance : 7

162
Tree	return ( m ) value . containsKey ( value ) ;
Code	return ( m ) value . containsKey ( value ) ;
Distance : 5

163
Tree	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

164
Tree	return new IllegalStateException ( value , value ) ;
Code	return new IllegalStateException ( value , value ) ;
Distance : 8

165
Tree	return new MaxCountExceededException ( value , value ) ;
Code	return new MaxCountExceededException ( value , value ) ;
Distance : 8

166
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

167
Tree	return m . containsKey ( value ) && value . containsKey () ;
Code	return m . containsKey ( value ) && value . containsKey () ;
Distance : 9

168
Tree	return this . m . containsKey ( value , MathIllegalStateException ) ;
Code	return this . m . containsKey ( value , MathIllegalStateException ) ;
Distance : 6

169
Tree	return new MaxCountExceededException ( value , NUMBER_CONSTANT ) ;
Code	return new MaxCountExceededException ( value , NUMBER_CONSTANT ) ;
Distance : 9

170
Tree	return m . containsKey () . containsKey () . containsKey ( m ) ;
Code	return m . containsKey () . containsKey () . containsKey ( m ) ;
Distance : 7

171
Tree	return new MaxCountExceededException ( value , value , m . containsKey ( value ) ) ;
Code	return new MaxCountExceededException ( value , value , m . containsKey ( value ) ) ;
Distance : 8

172
Tree	return m . containsKey ( m , false ) ;
Code	return m . containsKey ( m , false ) ;
Distance : 7

173
Tree	return new value () . containsKey ( m ) ;
Code	return new value () . containsKey ( m ) ;
Distance : 6

174
Tree	return value . containsKey ( m ) . containsKey () ;
Code	return value . containsKey ( m ) . containsKey () ;
Distance : 8

175
Tree	return RhinoErrorReporter.UNRECOGNIZED_TYPE_ERROR == null ;
Code	return RhinoErrorReporter.UNRECOGNIZED_TYPE_ERROR == null ;
Distance : 9

176
Tree	return value . containsKey () . containsKey ( value ) ;
Code	return value . containsKey () . containsKey ( value ) ;
Distance : 5

177
Tree	return continue; ;
Code	return continue; ;
Distance : 10

178
Tree	return m . containsKey ( value ) . containsKey ( m ) ;
Code	return m . containsKey ( value ) . containsKey ( m ) ;
Distance : 6

179
Tree	return ! m . containsKey ( m ) ;
Code	return ! m . containsKey ( m ) ;
Distance : 5

180
Tree	return m . containsKey ( STRING_CONSTANT , value ) ;
Code	return m . containsKey ( STRING_CONSTANT , value ) ;
Distance : 6

181
Tree	return value . containsKey ( this . m ) ;
Code	return value . containsKey ( this . m ) ;
Distance : 8

182
Tree	return containsKey ( m , value ) ;
Code	return containsKey ( m , value ) ;
Distance : 7

183
Tree	return containsKey ( m , value , m , m ) ;
Code	return containsKey ( m , value , m , m ) ;
Distance : 9

184
Tree	return value . containsKey () . containsKey ( m ) ;
Code	return value . containsKey () . containsKey ( m ) ;
Distance : 6

185
Tree	return value ;
Code	return value ;
Distance : 9

186
Tree	return value . containsKey ( value ) + value ;
Code	return value . containsKey ( value ) + value ;
Distance : 7

187
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 9

188
Tree	value . containsKey ( m )
Code	value . containsKey ( m )
Distance : 8

189
Tree	return value + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return value + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

190
Tree	return value . containsKey ( this . value ) ;
Code	return value . containsKey ( this . value ) ;
Distance : 7

191
Tree	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 8

192
Tree	return this . m . containsKey () ; Class
Code	return this . m . containsKey () ; Class
Distance : 8

193
Tree	return this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ; Test
Code	return this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ; Test
Distance : 8

194
Tree	return m + NUMBER_CONSTANT ; Class
Code	return m + NUMBER_CONSTANT ; Class
Distance : 10

195
Tree	return m ; Class
Code	return m ; Class
Distance : 10

196
Tree	return this . m ; Test
Code	return this . m ; Test
Distance : 10

197
Tree	return m + NUMBER_CONSTANT ; Test
Code	return m + NUMBER_CONSTANT ; Test
Distance : 10

198
Tree	return NUMBER_CONSTANT / m ; Class
Code	return NUMBER_CONSTANT / m ; Class
Distance : 10

199
Tree	return this . m ; Class
Code	return this . m ; Class
Distance : 10

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 96
Correct
========================================================================
True

0
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

1
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

2
Tree	public CharSequence cs
Code	public CharSequence cs
Distance : 2

3
Tree	final String . . . cs
Code	final String . . . cs
Distance : 4

4
Tree	abstract CharSequence cs
Code	abstract CharSequence cs
Distance : 2

5
Tree	String [] cs
Code	String [] cs
Distance : 1

6
Tree	sb
Code	sb
Distance : 2

7
Tree	final byte cs
Code	final byte cs
Distance : 2

8
Tree	final finderStub.actualToReturn cs
Code	final finderStub.actualToReturn cs
Distance : 2

9
Tree	final byte . . . cs
Code	final byte . . . cs
Distance : 5

10
Tree	long . . . cs
Code	long . . . cs
Distance : 4

11
Tree	byte . . . cs
Code	byte . . . cs
Distance : 4

12
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

13
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

14
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

15
Tree	CharSequence [] cs
Code	CharSequence [] cs
Distance : 2

16
Tree	final char cs
Code	final char cs
Distance : 2

17
Tree	char cs
Code	char cs
Distance : 1

18
Tree	final cs < cs > cs
Code	final cs < cs > cs
Distance : 5

19
Tree	final cs . . . cs
Code	final cs . . . cs
Distance : 5

20
Tree	final String [] cs
Code	final String [] cs
Distance : 2

21
Tree	CharSequence < cs , cs > cs Class
Code	CharSequence < cs , cs > cs Class
Distance : 7

22
Tree	CharSequence [] cs Test
Code	CharSequence [] cs Test
Distance : 3

23
Tree	CharSequence < cs , cs > cs Test
Code	CharSequence < cs , cs > cs Test
Distance : 7

24
Tree	CharSequence <> cs Class
Code	CharSequence <> cs Class
Distance : 3

25
Tree	cs < cs , cs > cs array
Code	cs < cs , cs > cs array
Distance : 7

26
Tree	abstract cs < cs > cs
Code	abstract cs < cs > cs
Distance : 5

27
Tree	CharSequence . . . cs Class
Code	CharSequence . . . cs Class
Distance : 5

28
Tree	String cs
Code	String cs
Distance : 0

29
Tree	@ String CharSequence cs
Code	@ String CharSequence cs
Distance : 2

30
Tree	CharSequence . . . cs Test
Code	CharSequence . . . cs Test
Distance : 5

31
Tree	public cs < cs > cs
Code	public cs < cs > cs
Distance : 5

32
Tree	final cs
Code	final cs
Distance : 1

33
Tree	final int cs
Code	final int cs
Distance : 2

34
Tree	cs < cs , cs > cs
Code	cs < cs , cs > cs
Distance : 6

35
Tree	final char . . . cs
Code	final char . . . cs
Distance : 5

36
Tree	final char cs
Code	final char cs
Distance : 2

37
Tree	Precision.SAFE_MIN cs
Code	Precision.SAFE_MIN cs
Distance : 1

38
Tree	cs . . . cs array
Code	cs . . . cs array
Distance : 5

39
Tree	final CharSequence [] cs
Code	final CharSequence [] cs
Distance : 3

40
Tree	final long cs
Code	final long cs
Distance : 2

41
Tree	final long . . . cs
Code	final long . . . cs
Distance : 5

42
Tree	static cs . . . cs
Code	static cs . . . cs
Distance : 5

43
Tree	cs . . . cs notifyListeners
Code	cs . . . cs notifyListeners
Distance : 5

44
Tree	cs . . . cs class
Code	cs . . . cs class
Distance : 5

45
Tree	CharSequence . . . cs
Code	CharSequence . . . cs
Distance : 4

46
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

47
Tree	long cs
Code	long cs
Distance : 1

48
Tree	abstract CharSequence . . . cs
Code	abstract CharSequence . . . cs
Distance : 5

49
Tree	cs cs array
Code	cs cs array
Distance : 2

50
Tree	String . . . cs
Code	String . . . cs
Distance : 3

51
Tree	public cs . . . cs
Code	public cs . . . cs
Distance : 5

52
Tree	int . . . cs
Code	int . . . cs
Distance : 4

53
Tree	final byte cs
Code	final byte cs
Distance : 2

54
Tree	public CharSequence [] cs
Code	public CharSequence [] cs
Distance : 3

55
Tree	final
Code	final
Distance : 2

56
Tree	char . . . cs
Code	char . . . cs
Distance : 4

57
Tree	final int . . . cs
Code	final int . . . cs
Distance : 5

58
Tree	int cs
Code	int cs
Distance : 1

59
Tree	final Locale.ENGLISH cs
Code	final Locale.ENGLISH cs
Distance : 2

60
Tree	cs
Code	cs
Distance : 1

61
Tree	cs < cs , cs > cs notifyListeners
Code	cs < cs , cs > cs notifyListeners
Distance : 7

62
Tree	String <> cs
Code	String <> cs
Distance : 1

63
Tree	CharSequence cs Test
Code	CharSequence cs Test
Distance : 2

64
Tree	cs < cs , cs > cs class
Code	cs < cs , cs > cs class
Distance : 7

65
Tree	. cs
Code	. cs
Distance : 1

66
Tree	String cs
Code	String cs
Distance : 0

67
Tree	CharSequence <> cs
Code	CharSequence <> cs
Distance : 2

68
Tree	cs cs class
Code	cs cs class
Distance : 2

69
Tree	final String cs
Code	final String cs
Distance : 1

70
Tree	String < cs , cs > cs
Code	String < cs , cs > cs
Distance : 5

71
Tree	@ CharSequence String cs
Code	@ CharSequence String cs
Distance : 2

72
Tree	@ String String cs
Code	@ String String cs
Distance : 2

73
Tree	protected cs < cs > cs
Code	protected cs < cs > cs
Distance : 5

74
Tree	cs cs
Code	cs cs
Distance : 1

75
Tree	final long cs
Code	final long cs
Distance : 2

76
Tree	byte cs
Code	byte cs
Distance : 1

77
Tree	cs < cs > cs class
Code	cs < cs > cs class
Distance : 5

78
Tree	Locale.ENGLISH cs
Code	Locale.ENGLISH cs
Distance : 1

79
Tree	CharSequence cs Test
Code	CharSequence cs Test
Distance : 2

80
Tree	abstract cs . . . cs
Code	abstract cs . . . cs
Distance : 5

81
Tree	final CharSequence . . . cs
Code	final CharSequence . . . cs
Distance : 5

82
Tree	final StringUtils.EMPTY cs
Code	final StringUtils.EMPTY cs
Distance : 2

83
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

84
Tree	CharSequence cs Class
Code	CharSequence cs Class
Distance : 2

85
Tree	CharSequence <> cs Test
Code	CharSequence <> cs Test
Distance : 3

86
Tree	CharSequence < cs , cs > cs
Code	CharSequence < cs , cs > cs
Distance : 6

87
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

88
Tree	columns
Code	columns
Distance : 2

89
Tree	cs < cs > cs array
Code	cs < cs > cs array
Distance : 5

90
Tree	abstract CharSequence [] cs
Code	abstract CharSequence [] cs
Distance : 3

91
Tree	public CharSequence . . . cs
Code	public CharSequence . . . cs
Distance : 5

92
Tree	cs < cs > cs notifyListeners
Code	cs < cs > cs notifyListeners
Distance : 5

93
Tree	CharSequence [] cs Class
Code	CharSequence [] cs Class
Distance : 3

94
Tree	CharSequence cs Class
Code	CharSequence cs Class
Distance : 2

95
Tree	cs cs notifyListeners
Code	cs cs notifyListeners
Distance : 2

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Distance : 7

1
Tree	long c = new GregorianCalendar ( mTimeZone ) ;
Code	long c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

2
Tree	final Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

3
Tree	LanguageMode.ECMASCRIPT_2015 c = new GregorianCalendar ( mTimeZone ) ;
Code	LanguageMode.ECMASCRIPT_2015 c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

4
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Distance : 1

5
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Distance : 6

6
Tree	Calendar c = new GregorianCalendar ( mTimeZone , STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , STRING_CONSTANT ) ;
Distance : 1

7
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

8
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 1

9
Tree	Calendar c = StandardBasicTypes.TIME ;
Code	Calendar c = StandardBasicTypes.TIME ;
Distance : 7

10
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mTimeZone ) ;
Distance : 2

11
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

12
Tree	Calendar c = null ;
Code	Calendar c = null ;
Distance : 7

13
Tree	Calendar [] ;
Code	Calendar [] ;
Distance : 9

14
Tree	Calendar c = STRING_CONSTANT ;
Code	Calendar c = STRING_CONSTANT ;
Distance : 7

15
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , ToStringContext.TO_STRING ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , ToStringContext.TO_STRING ) ;
Distance : 2

16
Tree	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 5

17
Tree	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 5

18
Tree	GregorianCalendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 4

19
Tree	Calendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 3

20
Tree	Calendar c = new Calendar ( this , mTimeZone ) ;
Code	Calendar c = new Calendar ( this , mTimeZone ) ;
Distance : 3

21
Tree	Calendar c = new GregorianCalendar ( null , mLocale , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( null , mLocale , mLocale ) ;
Distance : 3

22
Tree	Calendar [] c = new GregorianCalendar ( mLocale ) ;
Code	Calendar [] c = new GregorianCalendar ( mLocale ) ;
Distance : 3

23
Tree	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Distance : 8

24
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 5

25
Tree	Calendar c = new GregorianCalendar ( mLocale , STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , STRING_CONSTANT ) ;
Distance : 2

26
Tree	GregorianCalendar c = new GregorianCalendar ( null ) ;
Code	GregorianCalendar c = new GregorianCalendar ( null ) ;
Distance : 4

27
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

28
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT ) ;
Distance : 3

29
Tree	Calendar c = new Calendar ( mTimeZone . getBytes ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone . getBytes ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Distance : 8

30
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 3

31
Tree	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Distance : 1

32
Tree	GregorianCalendar c = new GregorianCalendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	GregorianCalendar c = new GregorianCalendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 6

33
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , null ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , null ) ;
Distance : 2

34
Tree	Calendar c = c ;
Code	Calendar c = c ;
Distance : 7

35
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Distance : 7

36
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

37
Tree	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

38
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , array.length ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , array.length ) ;
Distance : 2

39
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

40
Tree	Calendar c = LanguageMode.ECMASCRIPT_2015 ;
Code	Calendar c = LanguageMode.ECMASCRIPT_2015 ;
Distance : 7

41
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Distance : 4

42
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 5

43
Tree	GregorianCalendar c = new Calendar () ;
Code	GregorianCalendar c = new Calendar () ;
Distance : 7

44
Tree	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

45
Tree	Calendar c = newCalendar () ;
Code	Calendar c = newCalendar () ;
Distance : 7

46
Tree	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 1

47
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 4

48
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

49
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

50
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

51
Tree	GregorianCalendar c = mLocale ;
Code	GregorianCalendar c = mLocale ;
Distance : 7

52
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

53
Tree	c c = new Calendar ( mTimeZone ) ;
Code	c c = new Calendar ( mTimeZone ) ;
Distance : 4

54
Tree	Calendar c = new GregorianCalendar ( null ) ;
Code	Calendar c = new GregorianCalendar ( null ) ;
Distance : 3

55
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

56
Tree	Calendar c = new Calendar ( RandomSource.MT ) ;
Code	Calendar c = new Calendar ( RandomSource.MT ) ;
Distance : 4

57
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

58
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

59
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

60
Tree	GregorianCalendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

61
Tree	GregorianCalendar c = NUMBER_CONSTANT ;
Code	GregorianCalendar c = NUMBER_CONSTANT ;
Distance : 8

62
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Distance : 3

63
Tree	final GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Distance : 4

64
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ t1.time ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ t1.time ] ) ;
Distance : 5

65
Tree	locale
Code	locale
Distance : 11

66
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ ToStringContext.TO_STRING ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ ToStringContext.TO_STRING ] ) ;
Distance : 5

67
Tree	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Code	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Distance : 2

68
Tree	GregorianCalendar c = new GregorianCalendar () ;
Code	GregorianCalendar c = new GregorianCalendar () ;
Distance : 6

69
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

70
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , c . getValue ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , c . getValue ( STRING_CONSTANT ) ) ;
Distance : 21

71
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

72
Tree	int c = new GregorianCalendar ( mTimeZone ) ;
Code	int c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

73
Tree	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

74
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

75
Tree	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 4

76
Tree	Calendar c = describe () ;
Code	Calendar c = describe () ;
Distance : 7

77
Tree	Calendar += ;
Code	Calendar += ;
Distance : 9

78
Tree	Calendar c = new GregorianCalendar ( mTimeZone , null ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , null ) ;
Distance : 1

79
Tree	Calendar
Code	Calendar
Distance : 10

80
Tree	Calendar c = new Calendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 6

81
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 4

82
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mTimeZone ) ;
Distance : 5

83
Tree	Calendar c = super(); ;
Code	Calendar c = super(); ;
Distance : 7

84
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , DateParser ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , DateParser ) ;
Distance : 2

85
Tree	Calendar [] c = new Calendar ( mTimeZone ) ;
Code	Calendar [] c = new Calendar ( mTimeZone ) ;
Distance : 4

86
Tree	c c = new GregorianCalendar ( mLocale ) ;
Code	c c = new GregorianCalendar ( mLocale ) ;
Distance : 3

87
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . length ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . length ( mTimeZone ) ;
Distance : 5

88
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Distance : 5

89
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Distance : 5

90
Tree	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Distance : 2

91
Tree	Calendar c = new Calendar ( null ) ;
Code	Calendar c = new Calendar ( null ) ;
Distance : 4

92
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ array.length ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ array.length ] ) ;
Distance : 5

93
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Distance : 2

94
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 5

95
Tree	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

96
Tree	Calendar c = new Calendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new Calendar ( RandomSource.MT , mLocale ) ;
Distance : 2

97
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

98
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

99
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

100
Tree	Calendar c = new GregorianCalendar ( null , mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( null , mTimeZone , mLocale ) ;
Distance : 2

101
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . sample ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . sample ( mTimeZone ) ;
Distance : 5

102
Tree	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Distance : 1

103
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

104
Tree	Calendar c = new Calendar ( mTimeZone , STRING_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , STRING_CONSTANT ) ;
Distance : 2

105
Tree	Calendar c = new GregorianCalendar ( this , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( this , mLocale ) ;
Distance : 1

106
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

107
Tree	Calendar c = StandardBasicTypes.DATE ;
Code	Calendar c = StandardBasicTypes.DATE ;
Distance : 7

108
Tree	DateParser c = new GregorianCalendar ( mTimeZone ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

109
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Distance : 4

110
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 3

111
Tree	Calendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 5

112
Tree	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

113
Tree	DateTimeFormatter
Code	DateTimeFormatter
Distance : 11

114
Tree	GregorianCalendar c = null ;
Code	GregorianCalendar c = null ;
Distance : 8

115
Tree	final
Code	final
Distance : 11

116
Tree	GregorianCalendar c = new GregorianCalendar ( this , mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( this , mTimeZone ) ;
Distance : 3

117
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Distance : 8

118
Tree	Calendar c = new GregorianCalendar ( new Calendar ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new Calendar ( mTimeZone ) ) ;
Distance : 5

119
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

120
Tree	Calendar c = new Calendar < c > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < c > ( mTimeZone , mLocale ) ;
Distance : 4

121
Tree	GregorianCalendar [] ;
Code	GregorianCalendar [] ;
Distance : 9

122
Tree	Calendar c = new Calendar ( null , mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( null , mTimeZone , mLocale ) ;
Distance : 3

123
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 7

124
Tree	Calendar c = new GregorianCalendar ( mLocale , null ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , null ) ;
Distance : 2

125
Tree	Calendar c = new Calendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new Calendar ( RandomSource.MT , mTimeZone ) ;
Distance : 3

126
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , System.out ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , System.out ) ;
Distance : 2

127
Tree	Calendar c = new GregorianCalendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 5

128
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , STRING_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , STRING_CONSTANT ) ;
Distance : 2

129
Tree	Calendar c = new GregorianCalendar ( LanguageMode.ECMASCRIPT_2015 ) ;
Code	Calendar c = new GregorianCalendar ( LanguageMode.ECMASCRIPT_2015 ) ;
Distance : 3

130
Tree	Calendar c = c . getInstance ( mTimeZone ) ;
Code	Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 5

131
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero ( mTimeZone ) ;
Distance : 5

132
Tree	Calendar c = mock () ;
Code	Calendar c = mock () ;
Distance : 7

133
Tree	Calendar c = new GregorianCalendar < c > ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar < c > ( mTimeZone ) ;
Distance : 5

134
Tree	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

135
Tree	GregorianCalendar c = new Calendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( STRING_CONSTANT ) ;
Distance : 5

136
Tree	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Distance : 1

137
Tree	GregorianCalendar c = new Calendar ( null ) ;
Code	GregorianCalendar c = new Calendar ( null ) ;
Distance : 5

138
Tree	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 1

139
Tree	Calendar c = NUMBER_CONSTANT ;
Code	Calendar c = NUMBER_CONSTANT ;
Distance : 7

140
Tree	c c = new GregorianCalendar ( mTimeZone ) ;
Code	c c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

141
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale , mLocale . timeParser ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale , mLocale . timeParser ( STRING_CONSTANT ) ) ;
Distance : 7

142
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 5

143
Tree	Calendar c = new GregorianCalendar < c > ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar < c > ( mTimeZone , mLocale ) ;
Distance : 3

144
Tree	Calendar c = new Calendar ( mTimeZone , null ) ;
Code	Calendar c = new Calendar ( mTimeZone , null ) ;
Distance : 2

145
Tree	GregorianCalendar c = STRING_CONSTANT ;
Code	GregorianCalendar c = STRING_CONSTANT ;
Distance : 8

146
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

147
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Distance : 4

148
Tree	final Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	final Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 6

149
Tree	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 2

150
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 1

151
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Distance : 1

152
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

153
Tree	long c = new Calendar ( mTimeZone ) ;
Code	long c = new Calendar ( mTimeZone ) ;
Distance : 4

154
Tree	Calendar != ;
Code	Calendar != ;
Distance : 9

155
Tree	Calendar c = mLocale ;
Code	Calendar c = mLocale ;
Distance : 6

156
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Distance : 6

157
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , mLocale . toLowerCase ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , mLocale . toLowerCase ( STRING_CONSTANT ) ) ;
Distance : 20

158
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

159
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , mLocale . getValue ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , mLocale . getValue ( STRING_CONSTANT ) ) ;
Distance : 20

160
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

161
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Distance : 5

162
Tree	Calendar c = new GregorianCalendar ( Decomposition.QR ) ;
Code	Calendar c = new GregorianCalendar ( Decomposition.QR ) ;
Distance : 3

163
Tree	final Calendar c = new Calendar ( mTimeZone , false ) ;
Code	final Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 3

164
Tree	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

165
Tree	final Calendar c = new Calendar ( mTimeZone ) ;
Code	final Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

166
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 9

167
Tree	Calendar c = getInstance () ;
Code	Calendar c = getInstance () ;
Distance : 7

168
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Distance : 5

169
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) + STRING_CONSTANT ) ;
Distance : 7

170
Tree	Calendar c = new GregorianCalendar ( this , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( this , mTimeZone ) ;
Distance : 2

171
Tree	Calendar c = new Calendar ( STRING_CONSTANT ) ;
Code	Calendar c = new Calendar ( STRING_CONSTANT ) ;
Distance : 4

172
Tree	Calendar c = newCalendar ;
Code	Calendar c = newCalendar ;
Distance : 7

173
Tree	Calendar mLocale ;
Code	Calendar mLocale ;
Distance : 8

174
Tree	Calendar c = new GregorianCalendar < mLocale > ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar < mLocale > ( mTimeZone ) ;
Distance : 5

175
Tree	Calendar c = continue; ;
Code	Calendar c = continue; ;
Distance : 7

176
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 2

177
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 5

178
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

179
Tree	c c = new Calendar ( mLocale ) ;
Code	c c = new Calendar ( mLocale ) ;
Distance : 4

180
Tree	int c = new Calendar ( mTimeZone ) ;
Code	int c = new Calendar ( mTimeZone ) ;
Distance : 4

181
Tree	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

182
Tree	GregorianCalendar c = new GregorianCalendar ( null , mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( null , mTimeZone , mLocale ) ;
Distance : 3

183
Tree	Calendar c = mTimeZone ;
Code	Calendar c = mTimeZone ;
Distance : 6

184
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , c . toLowerCase ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , c . toLowerCase ( STRING_CONSTANT ) ) ;
Distance : 21

185
Tree	Calendar mLocale = NUMBER_CONSTANT ;
Code	Calendar mLocale = NUMBER_CONSTANT ;
Distance : 8

186
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 6

187
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 4

188
Tree	Calendar mLocale = STRING_CONSTANT ;
Code	Calendar mLocale = STRING_CONSTANT ;
Distance : 8

189
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 5

190
Tree	Calendar c = new GregorianCalendar < mTimeZone > ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar < mTimeZone > ( mTimeZone ) ;
Distance : 4

191
Tree	final GregorianCalendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	final GregorianCalendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 7

192
Tree	final Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	final Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

193
Tree	final GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Code	final GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 7

194
Tree	Calendar c = new GregorianCalendar < mLocale > ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar < mLocale > ( mTimeZone , mLocale ) ;
Distance : 3

195
Tree	GregorianCalendar mLocale ;
Code	GregorianCalendar mLocale ;
Distance : 8

196
Tree	Calendar c = new Calendar < c > ( mTimeZone ) ;
Code	Calendar c = new Calendar < c > ( mTimeZone ) ;
Distance : 6

197
Tree	Calendar c = new GregorianCalendar < mTimeZone > ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar < mTimeZone > ( mTimeZone , mLocale ) ;
Distance : 3

198
Tree	GregorianCalendar mLocale = NUMBER_CONSTANT ;
Code	GregorianCalendar mLocale = NUMBER_CONSTANT ;
Distance : 9

199
Tree	GregorianCalendar mLocale = STRING_CONSTANT ;
Code	GregorianCalendar mLocale = STRING_CONSTANT ;
Distance : 9

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 4
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

1
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 196
Correct
========================================================================
True

0
Tree	get . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	get . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 8

1
Tree	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) && super
Distance : 8

2
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY - cal2
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY - cal2
Distance : 6

3
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY - cal2
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY - cal2
Distance : 7

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR ) + get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR ) + get
Distance : 4

5
Tree	cal1 . get ( Calendar.HOUR ) <= cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) <= cal2 . get ( Calendar.HOUR )
Distance : 3

6
Tree	int cal1 = cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	int cal1 = cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

7
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) / cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) / cal2 . get ( Calendar.HOUR )
Distance : 2

8
Tree	Calendar.HOUR_OF_DAY * cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.HOUR_OF_DAY * cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

9
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Distance : 3

10
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < cal2 . get ( Calendar.HOUR )
Distance : 2

11
Tree	Calendar.HOUR_OF_DAY * cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.HOUR_OF_DAY * cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

12
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Distance : 1

13
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 7

14
Tree	cal1 . get ( false ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	cal1 . get ( false ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 7

15
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 5

16
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 4

17
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get
Distance : 6

18
Tree	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Distance : 8

19
Tree	cal1 . get ( Calendar.HOUR ) < <=
Code	cal1 . get ( Calendar.HOUR ) < <=
Distance : 8

20
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Class
Distance : 5

21
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Test
Distance : 4

22
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * CHAR_CONS
Distance : 7

23
Tree	get . get ( Calendar.HOUR ) * CHAR_CONS
Code	get . get ( Calendar.HOUR ) * CHAR_CONS
Distance : 9

24
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Distance : 4

25
Tree	get . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR )
Code	get . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR )
Distance : 4

26
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 5

27
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 5

28
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 5

29
Tree	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Code	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 5

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Distance : 4

31
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

32
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 7

33
Tree	null == cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	null == cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

34
Tree	null == cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	null == cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

35
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 6

36
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 7

37
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 7

38
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Test
Distance : 7

39
Tree	get . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Code	get . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Distance : 3

40
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * &
Distance : 7

41
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Test
Distance : 7

42
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Class
Distance : 7

43
Tree	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Distance : 8

44
Tree	cal1 . get ( Calendar.HOUR ) < <=
Code	cal1 . get ( Calendar.HOUR ) < <=
Distance : 8

45
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 0

46
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

47
Tree	cal1 . get ( Calendar.HOUR ) * &
Code	cal1 . get ( Calendar.HOUR ) * &
Distance : 8

48
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 8

49
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 8

50
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 8

51
Tree	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	. . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 5

52
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Test
Distance : 7

53
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) <= super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) <= super
Distance : 4

54
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

55
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 4

56
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 5

57
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) + get
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) + get
Distance : 8

58
Tree	cal1 * cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	cal1 * cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 4

59
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) <= super
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) <= super
Distance : 6

60
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) <= cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) <= cal2 . get ( Calendar.HOUR )
Distance : 2

61
Tree	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Distance : 8

62
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) == false
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) == false
Distance : 5

63
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 4

64
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 10

65
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

66
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Distance : 5

67
Tree	cal1 . get ( Calendar.HOUR ) < NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) < NUMBER_CONSTANT
Distance : 8

68
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) + get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) + get
Distance : 6

69
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 7

70
Tree	Calendar.HOUR_OF_DAY < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.HOUR_OF_DAY < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

71
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 7

72
Tree	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR ) + super
Code	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR ) + super
Distance : 7

73
Tree	cal1 . get ( Calendar.HOUR ) < cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) < cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

74
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 6

75
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

76
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR )
Distance : 8

77
Tree	get && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	get && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 7

78
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 7

79
Tree	. . get ( Calendar.HOUR_OF_DAY ) / cal2 . get ( Calendar.HOUR_OF_DAY )
Code	. . get ( Calendar.HOUR_OF_DAY ) / cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

80
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 7

81
Tree	cal1 . get ( Calendar.HOUR ) != cal2
Code	cal1 . get ( Calendar.HOUR ) != cal2
Distance : 7

82
Tree	get . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	get . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

83
Tree	get . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR ) + super
Code	get . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR ) + super
Distance : 6

84
Tree	cal1 . get ( Calendar.HOUR ) / cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) / cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

85
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) <= super
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) <= super
Distance : 6

86
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

87
Tree	get . get ( Calendar.HOUR ) / cal2 . get ( Calendar.HOUR )
Code	get . get ( Calendar.HOUR ) / cal2 . get ( Calendar.HOUR )
Distance : 4

88
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 8

89
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : ( *
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : ( *
Distance : 7

90
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

91
Tree	cal1 && cal2 . get ( Calendar.HOUR ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR ) && super
Distance : 9

92
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 8

93
Tree	get . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	get . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 8

94
Tree	cal1 . get ( Calendar.HOUR ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get *
Code	cal1 . get ( Calendar.HOUR ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get *
Distance : 8

95
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Distance : 3

96
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - CHAR_CONS
Distance : 4

97
Tree	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR ) + get
Code	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR ) + get
Distance : 7

98
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? cal2 : get : ( / Calendar.HOUR / get / Calendar.HOUR /
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? cal2 : get : ( / Calendar.HOUR / get / Calendar.HOUR /
Distance : 16

99
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) + super
Distance : 6

100
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT
Distance : 7

101
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

102
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) <= cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) <= cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

103
Tree	null == cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	null == cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 7

104
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) == false
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) == false
Distance : 5

105
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get : Calendar.HOUR / Calendar.HOUR / Calendar.HOUR % get /
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get : Calendar.HOUR / Calendar.HOUR / Calendar.HOUR % get /
Distance : 17

106
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : Calendar.HOUR :
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : Calendar.HOUR :
Distance : 7

107
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Distance : 2

108
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 6

109
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get +=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 cal2 . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get +=
Distance : 7

110
Tree	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Code	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Distance : 7

111
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Distance : 8

112
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Distance : 4

113
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Distance : 7

114
Tree	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 7

115
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get : Calendar.HOUR / Calendar.HOUR / Calendar.HOUR / Calendar.HOUR /
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : get : Calendar.HOUR / Calendar.HOUR / Calendar.HOUR / Calendar.HOUR /
Distance : 17

116
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

117
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : ( * cal2 / Calendar.HOUR / Calendar.HOUR % Calendar.HOUR /
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 ? get : ( * cal2 / Calendar.HOUR / Calendar.HOUR % Calendar.HOUR /
Distance : 16

118
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR )
Distance : 8

119
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Distance : 5

120
Tree	cal1 < cal2 . get ( Calendar.HOUR )
Code	cal1 < cal2 . get ( Calendar.HOUR )
Distance : 7

121
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Distance : 6

122
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 5

123
Tree	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Distance : 5

124
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

125
Tree	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Code	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Distance : 8

126
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && &
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && &
Distance : 8

127
Tree	cal1 && cal2 . get ( Calendar.HOUR ) && &
Code	cal1 && cal2 . get ( Calendar.HOUR ) && &
Distance : 9

128
Tree	null == cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	null == cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 6

129
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) == CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) == CHAR_CONS
Distance : 5

130
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 10

131
Tree	boolean cal1 = cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	boolean cal1 = cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

132
Tree	Calendar.HOUR_OF_DAY < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	Calendar.HOUR_OF_DAY < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 6

133
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 4

134
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 6

135
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2
Distance : 6

136
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

137
Tree	get . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Code	get . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Distance : 3

138
Tree	cal1 < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

139
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) <= super
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) <= super
Distance : 5

140
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR ) + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR ) + super
Distance : 4

141
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 7

142
Tree	cal1 * cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	cal1 * cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

143
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get - cal2
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get - cal2
Distance : 6

144
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 6

145
Tree	cal1 < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

146
Tree	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 7

147
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Distance : 4

148
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) && super
Distance : 7

149
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

150
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 11

151
Tree	cal1 . get ( Calendar.HOUR ) <= cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) <= cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

152
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Distance : 6

153
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - &
Distance : 4

154
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

155
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Distance : 8

156
Tree	boolean cal1 = cal2 . get ( Calendar.HOUR ) ;
Code	boolean cal1 = cal2 . get ( Calendar.HOUR ) ;
Distance : 9

157
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY - cal2
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY - cal2
Distance : 5

158
Tree	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

159
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Distance : 2

160
Tree	get . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	get . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

161
Tree	cal1 . get ( true ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( true ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 7

162
Tree	cal1 . get ( Calendar.HOUR ) < cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) < cal2 . get ( Calendar.HOUR )
Distance : 3

163
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Distance : 6

164
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 4

165
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Distance : 6

166
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Distance : 7

167
Tree	cal1 . get ( false ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( false ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 7

168
Tree	get . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Code	get . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Distance : 8

169
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

170
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 9

171
Tree	get . get ( false ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	get . get ( false ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 9

172
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT )
Distance : 6

173
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR , cal2 + NUMBER_CONSTANT ) Class
Distance : 7

174
Tree	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	STRING_CONSTANT + cal2 + STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 8

175
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Distance : 1

176
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Class
Distance : 7

177
Tree	get . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	get . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 6

178
Tree	cal1 . get ( Calendar.HOUR ) == get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) == get ( Calendar.HOUR )
Distance : 4

179
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 4

180
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) == CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) == CHAR_CONS
Distance : 4

181
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) + super
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) + super
Distance : 8

182
Tree	cal1 < cal2 . get ( Calendar.HOUR ) + get
Code	cal1 < cal2 . get ( Calendar.HOUR ) + get
Distance : 9

183
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 7

184
Tree	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && super
Code	cal1 && cal2 . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 8

185
Tree	get < cal2 . get ( Calendar.HOUR ) + super
Code	get < cal2 . get ( Calendar.HOUR ) + super
Distance : 9

186
Tree	cal1 < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	cal1 < cal2 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 6

187
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR ) + get
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR ) + get
Distance : 5

188
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Distance : 7

189
Tree	void cal1 = cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	void cal1 = cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

190
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) Test
Distance : 5

191
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT Class
Distance : 7

192
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < NUMBER_CONSTANT Test
Distance : 7

193
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Class
Distance : 6

194
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) != cal2 Test
Distance : 6

195
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == get ( Calendar.HOUR ) Class
Distance : 4

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

1
Tree	{ throw new pos ( Character , false ) ; }
Code	{ throw new pos ( Character , false ) ; }
Distance : 11

2
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input ) , pos ) ; }
Distance : 8

3
Tree	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Distance : 12

4
Tree	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Distance : 13

5
Tree	{ throw pos . charCount ( input , pos ) ; }
Code	{ throw pos . charCount ( input , pos ) ; }
Distance : 9

6
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; break; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; break; }
Distance : 2

7
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

8
Tree	{ throw new MathArithmeticException ( Character , false ) ; }
Code	{ throw new MathArithmeticException ( Character , false ) ; }
Distance : 11

9
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 2

10
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

11
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Distance : 2

12
Tree	{ throw charCount ( Character . codePointAt ( input ) / Character , pos , Character ) ; }
Code	{ throw charCount ( Character . codePointAt ( input ) / Character , pos , Character ) ; }
Distance : 10

13
Tree	{ return true ; }
Code	{ return true ; }
Distance : 15

14
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character ) , pos ) ; }
Distance : 9

15
Tree	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( input , pos ) ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( input , pos ) ) ) ; }
Distance : 9

16
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( Character ) ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( Character ) ) ) , false ) ; }
Distance : 14

17
Tree	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ) ; }
Code	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ) ; }
Distance : 13

18
Tree	{ throw pos . charCount ( Character [ Character ] ) ; }
Code	{ throw pos . charCount ( Character [ Character ] ) ; }
Distance : 10

19
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

20
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

21
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

22
Tree	{ throw pt . charCount ( Character ) ; }
Code	{ throw pt . charCount ( Character ) ; }
Distance : 10

23
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 13

24
Tree	{ throw new add ( STRING_CONSTANT ) ; }
Code	{ throw new add ( STRING_CONSTANT ) ; }
Distance : 13

25
Tree	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; super }
Distance : 4

26
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Distance : 9

27
Tree	{ throw new add ( Character * pos ) ; }
Code	{ throw new add ( Character * pos ) ; }
Distance : 12

28
Tree	{ throw new pos ( STRING_CONSTANT ) ; }
Code	{ throw new pos ( STRING_CONSTANT ) ; }
Distance : 13

29
Tree	{ throw pt . charCount ( Character , pos ) ; }
Code	{ throw pt . charCount ( Character , pos ) ; }
Distance : 9

30
Tree	{ throw new add () ; }
Code	{ throw new add () ; }
Distance : 15

31
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

32
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos ) ; }
Distance : 12

33
Tree	{ throw new BackgroundInitializerTestImpl ( Character * pos ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character * pos ) ; }
Distance : 12

34
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Distance : 3

35
Tree	{ pos += Character . charCount ( Character . codePointAt ( other.mockRef , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( other.mockRef , pos ) ) ; }
Distance : 2

36
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Distance : 10

37
Tree	{ return ! Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return ! Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

38
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

39
Tree	{ throw new pos ( Character * pos ) ; }
Code	{ throw new pos ( Character * pos ) ; }
Distance : 12

40
Tree	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Code	{ throw new pos ( Character , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Distance : 12

41
Tree	{ throw new add ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

42
Tree	{ throw pos . charCount ( Character , pos ) ; }
Code	{ throw pos . charCount ( Character , pos ) ; }
Distance : 9

43
Tree	pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ;
Code	pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ;
Distance : 4

44
Tree	{ throw new pos ( FastMath.PI ) ; }
Code	{ throw new pos ( FastMath.PI ) ; }
Distance : 13

45
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Distance : 3

46
Tree	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

47
Tree	{ throw new BackgroundInitializerTestImpl () ; }
Code	{ throw new BackgroundInitializerTestImpl () ; }
Distance : 15

48
Tree	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( Character , pos ) ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( Character , pos ) ) ) ; }
Distance : 10

49
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Distance : 2

50
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 2

51
Tree	{ throw pos . charCount ( Character , new pos () . codePointAt ( input , pos ) , pos ) ; }
Code	{ throw pos . charCount ( Character , new pos () . codePointAt ( input , pos ) , pos ) ; }
Distance : 10

52
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Distance : 2

53
Tree	{ throw new pos ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Code	{ throw new pos ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Distance : 13

54
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

55
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; return; }
Distance : 11

56
Tree	{ throw new pos ( p1.vector , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( p1.vector , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

57
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos . codePointAt ( input , pos ) ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos . codePointAt ( input , pos ) ) ) ; }
Distance : 9

58
Tree	{ throw new pos ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new pos ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

59
Tree	{ throw pos . charCount ( Character , new pos () . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , new pos () . codePointAt ( input , pos ) , Character ) ; }
Distance : 10

60
Tree	{ throw new pos ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

61
Tree	{ throw new add ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

62
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) , false ) ; }
Distance : 12

63
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( input ) ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( input ) ) ) , super ) ; }
Distance : 14

64
Tree	{ pos += Character . charCount ( Character . codePointAt ( TimeZones.GMT_ID , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( TimeZones.GMT_ID , pos ) ) ; }
Distance : 2

65
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Distance : 2

66
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

67
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character ) ; }
Distance : 8

68
Tree	{ throw new pos ( p1.vector ) ; }
Code	{ throw new pos ( p1.vector ) ; }
Distance : 13

69
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 2

70
Tree	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Distance : 13

71
Tree	{ throw new pos ( Character * pos . codePointAt ( input . codePointAt ( input ) ) ) ; }
Code	{ throw new pos ( Character * pos . codePointAt ( input . codePointAt ( input ) ) ) ; }
Distance : 9

72
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Distance : 2

73
Tree	pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ;
Code	pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ;
Distance : 4

74
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos ) ; }
Distance : 12

75
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 2

76
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

77
Tree	{ throw pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ throw pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 5

78
Tree	{ throw new pos ( Character ) ; }
Code	{ throw new pos ( Character ) ; }
Distance : 12

79
Tree	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( input ) ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( input ) ) ) ; }
Distance : 8

80
Tree	{ throw pos . charCount ( Character , new flags.j2clPassMode () . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , new flags.j2clPassMode () . codePointAt ( input , pos ) , Character ) ; }
Distance : 10

81
Tree	{ throw pt ; }
Code	{ throw pt ; }
Distance : 14

82
Tree	{ return ! Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ return ! Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

83
Tree	{ throw new MathArithmeticException ( Character ) ; }
Code	{ throw new MathArithmeticException ( Character ) ; }
Distance : 12

84
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 2

85
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

86
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

87
Tree	{ throw new BackgroundInitializerTestImpl ( Character , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character , false ) ; }
Distance : 11

88
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; array }
Distance : 2

89
Tree	{ throw pos . codePointAt ( Character ) ; }
Code	{ throw pos . codePointAt ( Character ) ; }
Distance : 11

90
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

91
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 2

92
Tree	{ throw pos . charCount ( Character [ input ] ) ; }
Code	{ throw pos . charCount ( Character [ input ] ) ; }
Distance : 9

93
Tree	{ super ( Character . codePointAt ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . codePointAt ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

94
Tree	{ throw input ; }
Code	{ throw input ; }
Distance : 14

95
Tree	{ pos += Character . codePointAt ( Character , pos . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character , pos . codePointAt ( input , pos ) ) ; }
Distance : 4

96
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input ) ; }
Distance : 8

97
Tree	pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ;
Code	pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ;
Distance : 4

98
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( input ) ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( input ) ) ) , CHAR_CONS ) ; }
Distance : 14

99
Tree	{ throw new add < Character > ( Character ) ; }
Code	{ throw new add < Character > ( Character ) ; }
Distance : 12

100
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Distance : 2

101
Tree	{ throw new pos ( Character ) ; }
Code	{ throw new pos ( Character ) ; }
Distance : 12

102
Tree	pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ;
Code	pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ;
Distance : 3

103
Tree	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

104
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 2

105
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 11

106
Tree	{ throw pos . charCount ( getField [ input ] ) ; }
Code	{ throw pos . charCount ( getField [ input ] ) ; }
Distance : 10

107
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

108
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Distance : 11

109
Tree	{ pos += Character . charCount ( Character , pos . codePointAt ( Character , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character , pos . codePointAt ( Character , pos ) ) ; super }
Distance : 5

110
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos . codePointAt ( input ) ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos . codePointAt ( input ) ) ) ; }
Distance : 9

111
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; null }
Distance : 11

112
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

113
Tree	{ super ( Character . charCount ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . charCount ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 6

114
Tree	{ throw new MathArithmeticException < Character > ( Character ) ; }
Code	{ throw new MathArithmeticException < Character > ( Character ) ; }
Distance : 12

115
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 3

116
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character . codePointAt ( input , pos ) ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character . codePointAt ( input , pos ) ) , pos ) ; }
Distance : 11

117
Tree	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

118
Tree	{ throw new pos ( Character , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new pos ( Character , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 11

119
Tree	{ throw new add ( Character ) ; }
Code	{ throw new add ( Character ) ; }
Distance : 12

120
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

121
Tree	{ return false ; }
Code	{ return false ; }
Distance : 15

122
Tree	{ return ! Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ return ! Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

123
Tree	{ throw new BackgroundInitializerTestImpl < Character > ( Character ) ; }
Code	{ throw new BackgroundInitializerTestImpl < Character > ( Character ) ; }
Distance : 12

124
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Distance : 9

125
Tree	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) , false ) ; }
Distance : 8

126
Tree	{ throw pos . charCount ( Character , new pos () . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , new pos () . codePointAt ( Character , pos ) , Character ) ; }
Distance : 11

127
Tree	{ pt = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

128
Tree	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

129
Tree	catch
Code	catch
Distance : 18

130
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; return; }
Distance : 11

131
Tree	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

132
Tree	{ pos += Character . charCount ( Character , pos . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character , pos . charCount ( input , pos ) ) ; }
Distance : 4

133
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; return; }
Distance : 11

134
Tree	{ throw pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ throw pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

135
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

136
Tree	{ throw pos . charCount ( Character , new SoftReference () . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , new SoftReference () . codePointAt ( input , pos ) , Character ) ; }
Distance : 10

137
Tree	{ pos += Character . charCount ( Character . codePointAt ( a.d , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( a.d , pos ) ) ; }
Distance : 2

138
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Distance : 10

139
Tree	{ throw new add ( Character * pos . codePointAt ( input . codePointAt ( input ) ) ) ; }
Code	{ throw new add ( Character * pos . codePointAt ( input . codePointAt ( input ) ) ) ; }
Distance : 10

140
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input ) , pos ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input ) , pos ) ; }
Distance : 9

141
Tree	{ super ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) ) ; ; }
Code	{ super ( Character . codePointAt ( input . codePointAt ( Character , pos ) ) ) ; ; }
Distance : 8

142
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos . codePointAt ( input ) ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos . codePointAt ( input ) ) ) ; }
Distance : 8

143
Tree	{ throw pos . charCount ( Character , new plane.w () . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , new plane.w () . codePointAt ( input , pos ) , Character ) ; }
Distance : 10

144
Tree	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

145
Tree	{ throw pos . charCount ( Character , pos . charCount ( input ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input ) , pos ) ; }
Distance : 9

146
Tree	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; array }
Code	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; array }
Distance : 4

147
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Distance : 10

148
Tree	private
Code	private
Distance : 18

149
Tree	{ pos += Character . charCount ( Character . codePointAt ( Locale.US , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Locale.US , pos ) ) ; }
Distance : 2

150
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

151
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

152
Tree	{ super ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . codePointAt ( Character . codePointAt ( input , pos ) ) ) ; ; }
Distance : 6

153
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Distance : 11

154
Tree	{ throw pos . codePointAt ( Character , pos ) ; }
Code	{ throw pos . codePointAt ( Character , pos ) ; }
Distance : 10

155
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos . codePointAt ( input , pos ) ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos . codePointAt ( input , pos ) ) ) ; }
Distance : 8

156
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Distance : 9

157
Tree	{ throw new pos ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new pos ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

158
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

159
Tree	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; if }
Code	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; if }
Distance : 4

160
Tree	{ throw new add ( Character , false ) ; }
Code	{ throw new add ( Character , false ) ; }
Distance : 11

161
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character ) ; }
Distance : 8

162
Tree	{ throw new pos < Character > ( Character ) ; }
Code	{ throw new pos < Character > ( Character ) ; }
Distance : 12

163
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Distance : 11

164
Tree	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 14

165
Tree	{ throw pos . charCount ( Character ) ; }
Code	{ throw pos . charCount ( Character ) ; }
Distance : 10

166
Tree	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character , pos . codePointAt ( input , pos ) ) ; }
Distance : 3

167
Tree	{ throw new MathArithmeticException ( Character * pos ) ; }
Code	{ throw new MathArithmeticException ( Character * pos ) ; }
Distance : 12

168
Tree	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Code	{ throw new pos ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Distance : 13

169
Tree	{ throw new pos ( Character * pos . codePointAt ( input . codePointAt ( Character ) ) ) ; }
Code	{ throw new pos ( Character * pos . codePointAt ( input . codePointAt ( Character ) ) ) ; }
Distance : 10

170
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

171
Tree	{ throw new add ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

172
Tree	{ throw new pos ( p1.vector , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Code	{ throw new pos ( p1.vector , pos . codePointAt ( input . codePointAt ( input ) ) , pos , false ) ; }
Distance : 13

173
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 9

174
Tree	{
Code	{
Distance : 17

175
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertNull }
Distance : 2

176
Tree	{ throw new MathArithmeticException () ; }
Code	{ throw new MathArithmeticException () ; }
Distance : 15

177
Tree	{ throw new pos ( Character * pos . codePointAt ( Character . codePointAt ( input ) ) ) ; }
Code	{ throw new pos ( Character * pos . codePointAt ( Character . codePointAt ( input ) ) ) ; }
Distance : 8

178
Tree	{ throw codePointAt ( Character . codePointAt ( input ) / Character , pos , Character ) ; }
Code	{ throw codePointAt ( Character . codePointAt ( input ) / Character , pos , Character ) ; }
Distance : 11

179
Tree	{ throw pos . charCount ( handler [ input ] ) ; }
Code	{ throw pos . charCount ( handler [ input ] ) ; }
Distance : 10

180
Tree	{ throw new pos () ; }
Code	{ throw new pos () ; }
Distance : 15

181
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

182
Tree	{ pos += Character . charCount ( Character , pos . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character , pos . codePointAt ( Character , pos ) ) ; }
Distance : 4

183
Tree	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Distance : 9

184
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( input ) ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos . codePointAt ( input ) ) ) , false ) ; }
Distance : 14

185
Tree	{ return ! Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return ! Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

186
Tree	{ throw pos . charCount ( Character , new pos () . codePointAt ( Character , pos ) , pos ) ; }
Code	{ throw pos . charCount ( Character , new pos () . codePointAt ( Character , pos ) , pos ) ; }
Distance : 11

187
Tree	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos . codePointAt ( Character ) ) ) ; }
Distance : 8

188
Tree	{ throw pos . charCount ( Character , new flags.j2clPassMode () . codePointAt ( input , pos ) , pos ) ; }
Code	{ throw pos . charCount ( Character , new flags.j2clPassMode () . codePointAt ( input , pos ) , pos ) ; }
Distance : 10

189
Tree	{ throw codePointAt ( Character . codePointAt ( input ) / input , pos , Character ) ; }
Code	{ throw codePointAt ( Character . codePointAt ( input ) / input , pos , Character ) ; }
Distance : 11

190
Tree	{ throw pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ throw pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 5

191
Tree	{ throw Character ; }
Code	{ throw Character ; }
Distance : 14

192
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input . codePointAt ( Character , pos ) ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input . codePointAt ( Character , pos ) ) , pos ) ; }
Distance : 13

193
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 16

194
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input ) ; }
Distance : 8

195
Tree	{ throw pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ throw pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 5

196
Tree	{ throw pos . charCount ( input ) ; }
Code	{ throw pos . charCount ( input ) ; }
Distance : 10

197
Tree	public
Code	public
Distance : 18

198
Tree	{ throw charCount ( Character . codePointAt ( input ) / input , pos , Character ) ; }
Code	{ throw charCount ( Character . codePointAt ( input ) / input , pos , Character ) ; }
Distance : 10

199
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 16

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final CharSequence result = get () . get () ;
Code	final CharSequence result = get () . get () ;
Distance : 6

1
Tree	final CharSequence result = get () ;
Code	final CharSequence result = get () ;
Distance : 7

2
Tree	final CharSequence result = result . get ( subSeq . get () . get () ) ;
Code	final CharSequence result = result . get ( subSeq . get () . get () ) ;
Distance : 5

3
Tree	CharSequence result = get () . get () ;
Code	CharSequence result = get () . get () ;
Distance : 7

4
Tree	CharSequence result = get () ;
Code	CharSequence result = get () ;
Distance : 8

5
Tree	CharSequence result = get () . get () ;
Code	CharSequence result = get () . get () ;
Distance : 7

6
Tree	static CharSequence result = lookupMap ;
Code	static CharSequence result = lookupMap ;
Distance : 9

7
Tree	final CharSequence result = lookupMap . get ( subSeq . get () , TimeUnit.SECONDS ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () , TimeUnit.SECONDS ) ;
Distance : 3

8
Tree	final CharSequence result = result . get ( subSeq . get () ) ;
Code	final CharSequence result = result . get ( subSeq . get () ) ;
Distance : 2

9
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

10
Tree	final CharSequence result = result . get ( result . get () ) ;
Code	final CharSequence result = result . get ( result . get () ) ;
Distance : 3

11
Tree	final CharSequence result = result . get ( result ) . get () ;
Code	final CharSequence result = result . get ( result ) . get () ;
Distance : 5

12
Tree	final CharSequence result = result . < result > get () ;
Code	final CharSequence result = result . < result > get () ;
Distance : 7

13
Tree	CharSequence result = lookupMap . get ( subSeq , this . result ) ;
Code	CharSequence result = lookupMap . get ( subSeq , this . result ) ;
Distance : 5

14
Tree	final CharSequence result = this . result . get ( result ) ;
Code	final CharSequence result = this . result . get ( result ) ;
Distance : 7

15
Tree	final CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 7

16
Tree	final CharSequence result = lookupMap . get ( result . get ( NUMBER_CONSTANT ) ) ;
Code	final CharSequence result = lookupMap . get ( result . get ( NUMBER_CONSTANT ) ) ;
Distance : 5

17
Tree	final CharSequence result = result . get ( subSeq , false ) ;
Code	final CharSequence result = result . get ( subSeq , false ) ;
Distance : 4

18
Tree	final CharSequence result = new CharSequence ( subSeq , PropAccess.STRUCT ) ;
Code	final CharSequence result = new CharSequence ( subSeq , PropAccess.STRUCT ) ;
Distance : 6

19
Tree	final CharSequence result = lookupMap . get ( result , get () ) ;
Code	final CharSequence result = lookupMap . get ( result , get () ) ;
Distance : 3

20
Tree	final CharSequence result = lookupMap . get ( get () , MillisDurationField.INSTANCE ) ;
Code	final CharSequence result = lookupMap . get ( get () , MillisDurationField.INSTANCE ) ;
Distance : 4

21
Tree	final CharSequence result = new CharSequence ( subSeq . toString ( subSeq ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq . toString ( subSeq ) ) ;
Distance : 6

22
Tree	CharSequence result = toString ( subSeq ) ;
Code	CharSequence result = toString ( subSeq ) ;
Distance : 7

23
Tree	final CharSequence result = new CharSequence ( subSeq , java.lang.Class ) ;
Code	final CharSequence result = new CharSequence ( subSeq , java.lang.Class ) ;
Distance : 6

24
Tree	final CharSequence result = lookupMap . get ( super(); ) ;
Code	final CharSequence result = lookupMap . get ( super(); ) ;
Distance : 4

25
Tree	final CharSequence result = lookupMap . get ( subSeq . get () . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () . get () ) ;
Distance : 4

26
Tree	final CharSequence result = lookupMap . get ( result ) . get () ;
Code	final CharSequence result = lookupMap . get ( result ) . get () ;
Distance : 4

27
Tree	CharSequence [] result = result . get ( result ) ;
Code	CharSequence [] result = result . get ( result ) ;
Distance : 7

28
Tree	final CharSequence result = get () . get ( result ) ;
Code	final CharSequence result = get () . get ( result ) ;
Distance : 6

29
Tree	abstract CharSequence result = lookupMap ;
Code	abstract CharSequence result = lookupMap ;
Distance : 9

30
Tree	abstract CharSequence result = get () ;
Code	abstract CharSequence result = get () ;
Distance : 8

31
Tree	CharSequence result = toString ( result ) ;
Code	CharSequence result = toString ( result ) ;
Distance : 8

32
Tree	final CharSequence result = lookupMap . get ( result . get () . get () ) ;
Code	final CharSequence result = lookupMap . get ( result . get () . get () ) ;
Distance : 5

33
Tree	final CharSequence result = lookupMap . get ( result , result . get () ) ;
Code	final CharSequence result = lookupMap . get ( result , result . get () ) ;
Distance : 4

34
Tree	CharSequence result = lookupMap . get ( subSeq , coefficients.length ) ;
Code	CharSequence result = lookupMap . get ( subSeq , coefficients.length ) ;
Distance : 4

35
Tree	final CharSequence result = lookupMap . get ( result , this . subSeq ) ;
Code	final CharSequence result = lookupMap . get ( result , this . subSeq ) ;
Distance : 5

36
Tree	final CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Distance : 6

37
Tree	CharSequence result = toString () ;
Code	CharSequence result = toString () ;
Distance : 8

38
Tree	final CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Distance : 5

39
Tree	static CharSequence result = new CharSequence ( subSeq , false ) ;
Code	static CharSequence result = new CharSequence ( subSeq , false ) ;
Distance : 7

40
Tree	CharSequence result = this . result . get ( result ) ;
Code	CharSequence result = this . result . get ( result ) ;
Distance : 8

41
Tree	final CharSequence result = lookupMap . get ( subSeq , this . subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , this . subSeq ) ;
Distance : 4

42
Tree	final CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Distance : 4

43
Tree	final CharSequence result = lookupMap . result ( subSeq ) ;
Code	final CharSequence result = lookupMap . result ( subSeq ) ;
Distance : 4

44
Tree	final CharSequence result = result . get ( get () ) ;
Code	final CharSequence result = result . get ( get () ) ;
Distance : 4

45
Tree	CharSequence result = this . result . get ( subSeq ) ;
Code	CharSequence result = this . result . get ( subSeq ) ;
Distance : 7

46
Tree	CharSequence result = lookupMap . get ( subSeq , Calendar.SECOND ) ;
Code	CharSequence result = lookupMap . get ( subSeq , Calendar.SECOND ) ;
Distance : 4

47
Tree	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Distance : 6

48
Tree	final CharSequence result = lookupMap . get ( result . get () ) ;
Code	final CharSequence result = lookupMap . get ( result . get () ) ;
Distance : 2

49
Tree	static CharSequence result = lookupMap . get () ;
Code	static CharSequence result = lookupMap . get () ;
Distance : 6

50
Tree	CharSequence result = this . subSeq . get ( subSeq ) ;
Code	CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 7

51
Tree	final CharSequence result = new CharSequence ( subSeq , false ) ;
Code	final CharSequence result = new CharSequence ( subSeq , false ) ;
Distance : 6

52
Tree	final CharSequence result = result . get ( subSeq , this . subSeq ) ;
Code	final CharSequence result = result . get ( subSeq , this . subSeq ) ;
Distance : 5

53
Tree	final CharSequence result = new CharSequence ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq . get ( subSeq ) ) ;
Distance : 7

54
Tree	abstract CharSequence result = new CharSequence ( subSeq ) ;
Code	abstract CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

55
Tree	abstract CharSequence result = new CharSequence ( subSeq , false ) ;
Code	abstract CharSequence result = new CharSequence ( subSeq , false ) ;
Distance : 7

56
Tree	final CharSequence result = result . get ( subSeq , result ) ;
Code	final CharSequence result = result . get ( subSeq , result ) ;
Distance : 4

57
Tree	final CharSequence result = new CharSequence ( subSeq , result ) ;
Code	final CharSequence result = new CharSequence ( subSeq , result ) ;
Distance : 6

58
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

59
Tree	CharSequence result = lookupMap . toString () ;
Code	CharSequence result = lookupMap . toString () ;
Distance : 6

60
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

61
Tree	CharSequence result = lookupMap . get ( subSeq . toString () ) ;
Code	CharSequence result = lookupMap . get ( subSeq . toString () ) ;
Distance : 1

62
Tree	final CharSequence result = lookupMap . get ( subSeq ) . get () ;
Code	final CharSequence result = lookupMap . get ( subSeq ) . get () ;
Distance : 3

63
Tree	final CharSequence result = lookupMap . get ( Token.GETELEM ) ;
Code	final CharSequence result = lookupMap . get ( Token.GETELEM ) ;
Distance : 4

64
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

65
Tree	final CharSequence result = result . get () . get () ;
Code	final CharSequence result = result . get () . get () ;
Distance : 5

66
Tree	final CharSequence result = lookupMap . < lookupMap > get () ;
Code	final CharSequence result = lookupMap . < lookupMap > get () ;
Distance : 6

67
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Distance : 4

68
Tree	final CharSequence result = lookupMap . get () . toString () ;
Code	final CharSequence result = lookupMap . get () . toString () ;
Distance : 3

69
Tree	final CharSequence result = lookupMap . get ( subSeq . get () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 3

70
Tree	final CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Distance : 5

71
Tree	final CharSequence result = result . get ( result . get () . get () ) ;
Code	final CharSequence result = result . get ( result . get () . get () ) ;
Distance : 6

72
Tree	final CharSequence result = new CharSequence ( subSeq , Calendar.SECOND ) ;
Code	final CharSequence result = new CharSequence ( subSeq , Calendar.SECOND ) ;
Distance : 6

73
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

74
Tree	final CharSequence result = lookupMap . get ( toString () ) ;
Code	final CharSequence result = lookupMap . get ( toString () ) ;
Distance : 2

75
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

76
Tree	CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Code	CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Distance : 6

77
Tree	final CharSequence result = lookupMap . get ( subSeq , PropAccess.STRUCT ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , PropAccess.STRUCT ) ;
Distance : 3

78
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , subSeq ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , subSeq ) ;
Distance : 4

79
Tree	final CharSequence result = get ( result , result ) ;
Code	final CharSequence result = get ( result , result ) ;
Distance : 6

80
Tree	final CharSequence result = this . result . get ( subSeq ) ;
Code	final CharSequence result = this . result . get ( subSeq ) ;
Distance : 6

81
Tree	CharSequence result = lookupMap . get ( subSeq . get () ) ;
Code	CharSequence result = lookupMap . get ( subSeq . get () ) ;
Distance : 2

82
Tree	final CharSequence result = this . subSeq . get ( subSeq ) ;
Code	final CharSequence result = this . subSeq . get ( subSeq ) ;
Distance : 6

83
Tree	final CharSequence result = new CharSequence ( result ) ;
Code	final CharSequence result = new CharSequence ( result ) ;
Distance : 7

84
Tree	final CharSequence result = lookupMap . get ( Level.FINE ) ;
Code	final CharSequence result = lookupMap . get ( Level.FINE ) ;
Distance : 4

85
Tree	final CharSequence result = get () . get ( subSeq ) ;
Code	final CharSequence result = get () . get ( subSeq ) ;
Distance : 5

86
Tree	static CharSequence result = get () . get () ;
Code	static CharSequence result = get () . get () ;
Distance : 7

87
Tree	final CharSequence result = result . get ( STRING_CONSTANT , subSeq ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , subSeq ) ;
Distance : 5

88
Tree	final CharSequence result = new CharSequence ( subSeq ) ;
Code	final CharSequence result = new CharSequence ( subSeq ) ;
Distance : 6

89
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

90
Tree	final CharSequence result = lookupMap ;
Code	final CharSequence result = lookupMap ;
Distance : 8

91
Tree	static CharSequence result = get () ;
Code	static CharSequence result = get () ;
Distance : 8

92
Tree	final CharSequence result = toString ( result ) ;
Code	final CharSequence result = toString ( result ) ;
Distance : 7

93
Tree	CharSequence result = result . toString () ;
Code	CharSequence result = result . toString () ;
Distance : 7

94
Tree	CharSequence result = get () . toString () ;
Code	CharSequence result = get () . toString () ;
Distance : 6

95
Tree	CharSequence result = get () ;
Code	CharSequence result = get () ;
Distance : 8

96
Tree	final CharSequence result = lookupMap . < result > get () ;
Code	final CharSequence result = lookupMap . < result > get () ;
Distance : 6

97
Tree	CharSequence result = lookupMap . get () ;
Code	CharSequence result = lookupMap . get () ;
Distance : 6

98
Tree	static CharSequence result = new CharSequence ( this , subSeq ) ;
Code	static CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

99
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Distance : 4

100
Tree	final CharSequence result = get ( result ) ;
Code	final CharSequence result = get ( result ) ;
Distance : 6

101
Tree	final CharSequence result = lookupMap . get ( subSeq . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () ) ;
Distance : 1

102
Tree	final CharSequence result = lookupMap . toString () ;
Code	final CharSequence result = lookupMap . toString () ;
Distance : 5

103
Tree	final CharSequence result = result . get ( toString () ) ;
Code	final CharSequence result = result . get ( toString () ) ;
Distance : 3

104
Tree	final CharSequence result = lookupMap . get ( Calendar.DAY_OF_WEEK ) ;
Code	final CharSequence result = lookupMap . get ( Calendar.DAY_OF_WEEK ) ;
Distance : 4

105
Tree	final CharSequence result = lookupMap . get ( result , false ) ;
Code	final CharSequence result = lookupMap . get ( result , false ) ;
Distance : 4

106
Tree	final CharSequence result = lookupMap . get ( subSeq , coefficients.length ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , coefficients.length ) ;
Distance : 3

107
Tree	final CharSequence result = toString ( subSeq ) ;
Code	final CharSequence result = toString ( subSeq ) ;
Distance : 6

108
Tree	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 3

109
Tree	CharSequence [] result = lookupMap . get ( subSeq ) ;
Code	CharSequence [] result = lookupMap . get ( subSeq ) ;
Distance : 5

110
Tree	abstract CharSequence result = new CharSequence ( this , subSeq ) ;
Code	abstract CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 8

111
Tree	CharSequence result = result . get ( subSeq , this . subSeq ) ;
Code	CharSequence result = result . get ( subSeq , this . subSeq ) ;
Distance : 6

112
Tree	CharSequence result = this . subSeq . get ( result ) ;
Code	CharSequence result = this . subSeq . get ( result ) ;
Distance : 7

113
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

114
Tree	final CharSequence result = toString () . get () ;
Code	final CharSequence result = toString () . get () ;
Distance : 7

115
Tree	CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Code	CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 7

116
Tree	final CharSequence result = this . subSeq . get ( result ) ;
Code	final CharSequence result = this . subSeq . get ( result ) ;
Distance : 6

117
Tree	final CharSequence result = lookupMap . get ( subSeq , this . result ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , this . result ) ;
Distance : 4

118
Tree	final CharSequence result = toString () ;
Code	final CharSequence result = toString () ;
Distance : 7

119
Tree	CharSequence result = lookupMap . get ( subSeq , java.lang.Class ) ;
Code	CharSequence result = lookupMap . get ( subSeq , java.lang.Class ) ;
Distance : 4

120
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

121
Tree	final CharSequence result = lookupMap . get ( Nullability.IMPLICIT ) ;
Code	final CharSequence result = lookupMap . get ( Nullability.IMPLICIT ) ;
Distance : 4

122
Tree	final CharSequence result = new CharSequence ( this , result ) ;
Code	final CharSequence result = new CharSequence ( this , result ) ;
Distance : 7

123
Tree	final CharSequence result = new CharSequence ( subSeq , coefficients.length ) ;
Code	final CharSequence result = new CharSequence ( subSeq , coefficients.length ) ;
Distance : 6

124
Tree	final CharSequence result = result . get ( result . get ( NUMBER_CONSTANT ) ) ;
Code	final CharSequence result = result . get ( result . get ( NUMBER_CONSTANT ) ) ;
Distance : 6

125
Tree	final CharSequence result = result . get ( subSeq . get ( NUMBER_CONSTANT ) ) ;
Code	final CharSequence result = result . get ( subSeq . get ( NUMBER_CONSTANT ) ) ;
Distance : 5

126
Tree	final CharSequence result = lookupMap . get ( subSeq , result . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result . get () ) ;
Distance : 3

127
Tree	final CharSequence result = result ;
Code	final CharSequence result = result ;
Distance : 9

128
Tree	CharSequence result = toString () ;
Code	CharSequence result = toString () ;
Distance : 8

129
Tree	final CharSequence result = get () . toString () ;
Code	final CharSequence result = get () . toString () ;
Distance : 5

130
Tree	final CharSequence result = lookupMap . get ( get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( result ) ) ;
Distance : 4

131
Tree	final CharSequence result = lookupMap . get ( subSeq . get () , PropAccess.STRUCT ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () , PropAccess.STRUCT ) ;
Distance : 3

132
Tree	CharSequence result = lookupMap . get ( result . get () ) ;
Code	CharSequence result = lookupMap . get ( result . get () ) ;
Distance : 3

133
Tree	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 5

134
Tree	final CharSequence result = lookupMap . get ( subSeq , lookupMap ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , lookupMap ) ;
Distance : 3

135
Tree	CharSequence result = result . get () ;
Code	CharSequence result = result . get () ;
Distance : 7

136
Tree	CharSequence result = get ( result ) ;
Code	CharSequence result = get ( result ) ;
Distance : 7

137
Tree	final CharSequence result = lookupMap . get ( subSeq . get () , MillisDurationField.INSTANCE ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () , MillisDurationField.INSTANCE ) ;
Distance : 3

138
Tree	final CharSequence result = result . get ( subSeq , get () ) ;
Code	final CharSequence result = result . get ( subSeq , get () ) ;
Distance : 3

139
Tree	final CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Distance : 3

140
Tree	CharSequence result = lookupMap . get ( result , this . subSeq ) ;
Code	CharSequence result = lookupMap . get ( result , this . subSeq ) ;
Distance : 6

141
Tree	final CharSequence result = result . get ( result , false ) ;
Code	final CharSequence result = result . get ( result , false ) ;
Distance : 5

142
Tree	CharSequence result = lookupMap . get ( subSeq , PropAccess.STRUCT ) ;
Code	CharSequence result = lookupMap . get ( subSeq , PropAccess.STRUCT ) ;
Distance : 4

143
Tree	CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Code	CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Distance : 7

144
Tree	CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Code	CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Distance : 5

145
Tree	final CharSequence result = get ( subSeq , lookupMap ) ;
Code	final CharSequence result = get ( subSeq , lookupMap ) ;
Distance : 5

146
Tree	final CharSequence result = lookupMap . get ( subSeq , java.lang.Class ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , java.lang.Class ) ;
Distance : 3

147
Tree	CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Code	CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Distance : 7

148
Tree	final CharSequence result = new CharSequence ( subSeq , result . get ( subSeq ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq , result . get ( subSeq ) ) ;
Distance : 9

149
Tree	static CharSequence result = new CharSequence ( subSeq ) ;
Code	static CharSequence result = new CharSequence ( subSeq ) ;
Distance : 7

150
Tree	final CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Code	final CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Distance : 4

151
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( NUMBER_CONSTANT ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( NUMBER_CONSTANT ) ) ;
Distance : 4

152
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

153
Tree	final CharSequence result = new CharSequence ( subSeq , lookupMap ) ;
Code	final CharSequence result = new CharSequence ( subSeq , lookupMap ) ;
Distance : 6

154
Tree	final CharSequence result = result . get ( get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( get ( subSeq ) ) ;
Distance : 5

155
Tree	final CharSequence result = result . get ( subSeq ) . get () ;
Code	final CharSequence result = result . get ( subSeq ) . get () ;
Distance : 4

156
Tree	final CharSequence result = lookupMap . get ( subSeq , get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , get () ) ;
Distance : 2

157
Tree	CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Code	CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Distance : 5

158
Tree	final CharSequence result = result . get ( result , get () ) ;
Code	final CharSequence result = result . get ( result , get () ) ;
Distance : 4

159
Tree	final CharSequence result = new CharSequence ( subSeq . get ( result ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq . get ( result ) ) ;
Distance : 7

160
Tree	CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Code	CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 8

161
Tree	CharSequence [] result = result . get ( subSeq ) ;
Code	CharSequence [] result = result . get ( subSeq ) ;
Distance : 6

162
Tree	final CharSequence result = new CharSequence ( subSeq , lookupMap . get ( subSeq ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq , lookupMap . get ( subSeq ) ) ;
Distance : 8

163
Tree	final CharSequence result = new CharSequence ( this , subSeq ) ;
Code	final CharSequence result = new CharSequence ( this , subSeq ) ;
Distance : 7

164
Tree	final CharSequence result = new CharSequence ( subSeq , result . get ( result ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq , result . get ( result ) ) ;
Distance : 9

165
Tree	final CharSequence result = lookupMap . get ( result , result ) ;
Code	final CharSequence result = lookupMap . get ( result , result ) ;
Distance : 4

166
Tree	final CharSequence result = result . < lookupMap > get () ;
Code	final CharSequence result = result . < lookupMap > get () ;
Distance : 7

167
Tree	CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Code	CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Distance : 6

168
Tree	CharSequence [] result = lookupMap . get ( result ) ;
Code	CharSequence [] result = lookupMap . get ( result ) ;
Distance : 6

169
Tree	final CharSequence result = new CharSequence ( subSeq , lookupMap . get ( result ) ) ;
Code	final CharSequence result = new CharSequence ( subSeq , lookupMap . get ( result ) ) ;
Distance : 9

170
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

171
Tree	final CharSequence result = new CharSequence ( result , false ) ;
Code	final CharSequence result = new CharSequence ( result , false ) ;
Distance : 7

172
Tree	final CharSequence result = lookupMap . get ( subSeq , Calendar.SECOND ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , Calendar.SECOND ) ;
Distance : 3

173
Tree	final CharSequence result = lookupMap . get ( get () , java.lang.Class ) ;
Code	final CharSequence result = lookupMap . get ( get () , java.lang.Class ) ;
Distance : 4

174
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 4

175
Tree	final CharSequence result = lookupMap . get ( get () ) ;
Code	final CharSequence result = lookupMap . get ( get () ) ;
Distance : 3

176
Tree	final CharSequence result = toString () . get ( subSeq ) ;
Code	final CharSequence result = toString () . get ( subSeq ) ;
Distance : 5

177
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

178
Tree	final CharSequence result = lookupMap . get () . get () ;
Code	final CharSequence result = lookupMap . get () . get () ;
Distance : 4

179
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

180
Tree	CharSequence result = toString () . get () ;
Code	CharSequence result = toString () . get () ;
Distance : 8

181
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

182
Tree	final CharSequence result = new CharSequence ( result . get ( subSeq ) ) ;
Code	final CharSequence result = new CharSequence ( result . get ( subSeq ) ) ;
Distance : 7

183
Tree	final CharSequence result = get ( result , lookupMap ) ;
Code	final CharSequence result = get ( result , lookupMap ) ;
Distance : 6

184
Tree	final CharSequence result = result . get ( get ( result ) ) ;
Code	final CharSequence result = result . get ( get ( result ) ) ;
Distance : 5

185
Tree	final CharSequence result = lookupMap . toString ( null ) ;
Code	final CharSequence result = lookupMap . toString ( null ) ;
Distance : 5

186
Tree	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 6

187
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

188
Tree	final CharSequence result = get ( subSeq , result ) ;
Code	final CharSequence result = get ( subSeq , result ) ;
Distance : 5

189
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

190
Tree	CharSequence result = result . get ( subSeq . get () ) ;
Code	CharSequence result = result . get ( subSeq . get () ) ;
Distance : 3

191
Tree	final CharSequence result = new CharSequence ( result , result ) ;
Code	final CharSequence result = new CharSequence ( result , result ) ;
Distance : 7

192
Tree	CharSequence result = lookupMap . get ( subSeq , this . subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq , this . subSeq ) ;
Distance : 5

193
Tree	final CharSequence result = lookupMap . get ( get () , TimeUnit.SECONDS ) ;
Code	final CharSequence result = lookupMap . get ( get () , TimeUnit.SECONDS ) ;
Distance : 4

194
Tree	final CharSequence result = lookupMap . get ( subSeq , false ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , false ) ;
Distance : 3

195
Tree	final CharSequence result = new CharSequence ( result , lookupMap ) ;
Code	final CharSequence result = new CharSequence ( result , lookupMap ) ;
Distance : 7

196
Tree	final CharSequence result = lookupMap . get ( get () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	final CharSequence result = lookupMap . get ( get () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 4

197
Tree	final CharSequence result = toString () . get ( result ) ;
Code	final CharSequence result = toString () . get ( result ) ;
Distance : 6

198
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

199
Tree	final CharSequence result = lookupMap . toString () . get () ;
Code	final CharSequence result = lookupMap . toString () . get () ;
Distance : 5

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int cols = problem . getAllParameters ( true , length ) ;
Code	int cols = problem . getAllParameters ( true , length ) ;
Distance : 6

1
Tree	long cols = problem . getAllParameters ( false , length ) ;
Code	long cols = problem . getAllParameters ( false , length ) ;
Distance : 7

2
Tree	char cols = problem . getAllParameters () . length ;
Code	char cols = problem . getAllParameters () . length ;
Distance : 3

3
Tree	final int [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 8

4
Tree	final byte [] cols = problem . getAllParameters () ;
Code	final byte [] cols = problem . getAllParameters () ;
Distance : 5

5
Tree	final int [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 8

6
Tree	final int cols = problem . getAllParameters ( problem ) ;
Code	final int cols = problem . getAllParameters ( problem ) ;
Distance : 4

7
Tree	final int cols = problem . getAllParameters ( problem , TransformType.INVERSE ) ;
Code	final int cols = problem . getAllParameters ( problem , TransformType.INVERSE ) ;
Distance : 6

8
Tree	int cols = problem ;
Code	int cols = problem ;
Distance : 6

9
Tree	final int cols = problem . getAllParameters ( problem , Locale.US ) ;
Code	final int cols = problem . getAllParameters ( problem , Locale.US ) ;
Distance : 6

10
Tree	double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

11
Tree	final int cols = NUMBER_CONSTANT ;
Code	final int cols = NUMBER_CONSTANT ;
Distance : 6

12
Tree	final int cols = new problem () ;
Code	final int cols = new problem () ;
Distance : 5

13
Tree	final int cols = problem . getAllParameters ( false , length ) ;
Code	final int cols = problem . getAllParameters ( false , length ) ;
Distance : 5

14
Tree	final int cols = problem . getAllParameters () ;
Code	final int cols = problem . getAllParameters () ;
Distance : 3

15
Tree	final double [] [] cols = problem . getAllParameters ( false , length ) ;
Code	final double [] [] cols = problem . getAllParameters ( false , length ) ;
Distance : 8

16
Tree	long [] [] cols = problem . getAllParameters () ;
Code	long [] [] cols = problem . getAllParameters () ;
Distance : 6

17
Tree	int [] [] cols = problem . getAllParameters () ;
Code	int [] [] cols = problem . getAllParameters () ;
Distance : 6

18
Tree	final int cols = ( int [] ) length . getAllParameters () ;
Code	final int cols = ( int [] ) length . getAllParameters () ;
Distance : 7

19
Tree	static int cols = problem ;
Code	static int cols = problem ;
Distance : 6

20
Tree	final int cols = new cols () ;
Code	final int cols = new cols () ;
Distance : 5

21
Tree	final int cols = ( problem ) length ;
Code	final int cols = ( problem ) length ;
Distance : 5

22
Tree	int cols = ( problem ) length ;
Code	int cols = ( problem ) length ;
Distance : 6

23
Tree	double cols = problem . getAllParameters () ;
Code	double cols = problem . getAllParameters () ;
Distance : 5

24
Tree	final int [] [] cols = ( problem ) length ;
Code	final int [] [] cols = ( problem ) length ;
Distance : 7

25
Tree	double cols = ( ( problem ) length ) . getAllParameters () ;
Code	double cols = ( ( problem ) length ) . getAllParameters () ;
Distance : 9

26
Tree	final int cols = problem ;
Code	final int cols = problem ;
Distance : 5

27
Tree	final int problem = ( ( problem ) length ) . getAllParameters () ;
Code	final int problem = ( ( problem ) length ) . getAllParameters () ;
Distance : 8

28
Tree	final int problem = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Code	final int problem = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Distance : 6

29
Tree	final int [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Code	final int [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Distance : 7

30
Tree	final int problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

31
Tree	long cols = problem . getAllParameters () ;
Code	long cols = problem . getAllParameters () ;
Distance : 5

32
Tree	final int cols = ( problem ) length . getAllParameters () ;
Code	final int cols = ( problem ) length . getAllParameters () ;
Distance : 6

33
Tree	final int [] [] cols = problem . getAllParameters ( cols ) ;
Code	final int [] [] cols = problem . getAllParameters ( cols ) ;
Distance : 6

34
Tree	final int [] [] cols = problem . getAllParameters ( null ) ;
Code	final int [] [] cols = problem . getAllParameters ( null ) ;
Distance : 6

35
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

36
Tree	final int [] [] cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Distance : 6

37
Tree	final int [] [] cols = problem . getAllParameters ( newCachedThreadPool ) ;
Code	final int [] [] cols = problem . getAllParameters ( newCachedThreadPool ) ;
Distance : 6

38
Tree	final double [] [] cols = problem . getAllParameters ( problem ) ;
Code	final double [] [] cols = problem . getAllParameters ( problem ) ;
Distance : 7

39
Tree	final double cols = ( ( problem ) length ) . getAllParameters () ;
Code	final double cols = ( ( problem ) length ) . getAllParameters () ;
Distance : 8

40
Tree	final int problem = problem . getAllParameters ( null ) ;
Code	final int problem = problem . getAllParameters ( null ) ;
Distance : 5

41
Tree	final int problem = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final int problem = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 7

42
Tree	final int cols = problem . getAllParameters ( true , length ) ;
Code	final int cols = problem . getAllParameters ( true , length ) ;
Distance : 5

43
Tree	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 4

44
Tree	final int [] [] problem = problem . getAllParameters () ;
Code	final int [] [] problem = problem . getAllParameters () ;
Distance : 6

45
Tree	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Code	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Distance : 6

46
Tree	final int cols = ( problem ) cols . getAllParameters () ;
Code	final int cols = ( problem ) cols . getAllParameters () ;
Distance : 6

47
Tree	final int problem = ( int ) length . getAllParameters () ;
Code	final int problem = ( int ) length . getAllParameters () ;
Distance : 7

48
Tree	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

49
Tree	final int cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 6

50
Tree	final int cols = problem . getAllParameters ( newCachedThreadPool ) ;
Code	final int cols = problem . getAllParameters ( newCachedThreadPool ) ;
Distance : 4

51
Tree	cols problem = problem . getAllParameters () ;
Code	cols problem = problem . getAllParameters () ;
Distance : 6

52
Tree	final int [] [] cols = problem . getAllParameters ( false , length ) ;
Code	final int [] [] cols = problem . getAllParameters ( false , length ) ;
Distance : 7

53
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 6

54
Tree	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

55
Tree	cols cols = problem . getAllParameters () ;
Code	cols cols = problem . getAllParameters () ;
Distance : 5

56
Tree	final int problem = problem . getAllParameters ( problem ) ;
Code	final int problem = problem . getAllParameters ( problem ) ;
Distance : 5

57
Tree	cols = cols . getAllParameters ()
Code	cols = cols . getAllParameters ()
Distance : 7

58
Tree	static int cols = problem . getAllParameters () ;
Code	static int cols = problem . getAllParameters () ;
Distance : 4

59
Tree	final int problem = problem . getAllParameters () ;
Code	final int problem = problem . getAllParameters () ;
Distance : 4

60
Tree	double cols = ( problem ) length ;
Code	double cols = ( problem ) length ;
Distance : 7

61
Tree	length = problem . getAllParameters ()
Code	length = problem . getAllParameters ()
Distance : 7

62
Tree	int cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	int cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 7

63
Tree	char [] problem = problem . getAllParameters () ;
Code	char [] problem = problem . getAllParameters () ;
Distance : 6

64
Tree	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 8

65
Tree	final int cols = ( ( cols ) length ) . getAllParameters () ;
Code	final int cols = ( ( cols ) length ) . getAllParameters () ;
Distance : 8

66
Tree	final int cols = ( ( problem ) length ) . getAllParameters () ;
Code	final int cols = ( ( problem ) length ) . getAllParameters () ;
Distance : 7

67
Tree	int cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	int cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 7

68
Tree	int [] problem = problem . getAllParameters () ;
Code	int [] problem = problem . getAllParameters () ;
Distance : 6

69
Tree	final int cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 7

70
Tree	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 4

71
Tree	static int [] [] problem = problem . getAllParameters () ;
Code	static int [] [] problem = problem . getAllParameters () ;
Distance : 7

72
Tree	final double [] [] cols = ( problem ) length ;
Code	final double [] [] cols = ( problem ) length ;
Distance : 8

73
Tree	final int cols = problem . getAllParameters ( null ) ;
Code	final int cols = problem . getAllParameters ( null ) ;
Distance : 4

74
Tree	final int problem = ( problem ) length ;
Code	final int problem = ( problem ) length ;
Distance : 6

75
Tree	char cols = problem . getAllParameters () ;
Code	char cols = problem . getAllParameters () ;
Distance : 5

76
Tree	final int cols = ( long [] ) length . getAllParameters () ;
Code	final int cols = ( long [] ) length . getAllParameters () ;
Distance : 7

77
Tree	final double [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

78
Tree	final double cols = problem . getAllParameters () ;
Code	final double cols = problem . getAllParameters () ;
Distance : 4

79
Tree	final double cols = problem ;
Code	final double cols = problem ;
Distance : 6

80
Tree	final double cols = ( problem ) length ;
Code	final double cols = ( problem ) length ;
Distance : 6

81
Tree	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

82
Tree	final int [] [] problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int [] [] problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

83
Tree	final double [] [] cols = problem . getAllParameters ( null ) ;
Code	final double [] [] cols = problem . getAllParameters ( null ) ;
Distance : 7

84
Tree	int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

85
Tree	final int cols = ( problem ) cols ;
Code	final int cols = ( problem ) cols ;
Distance : 6

86
Tree	long [] problem = problem . getAllParameters () ;
Code	long [] problem = problem . getAllParameters () ;
Distance : 6

87
Tree	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 6

88
Tree	final int cols = problem . getAllParameters ( cols ) ;
Code	final int cols = problem . getAllParameters ( cols ) ;
Distance : 4

89
Tree	final int problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final int problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 8

90
Tree	final int problem = ( int [] ) length . getAllParameters () ;
Code	final int problem = ( int [] ) length . getAllParameters () ;
Distance : 8

91
Tree	cols = problem . getAllParameters ()
Code	cols = problem . getAllParameters ()
Distance : 6

92
Tree	char cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

93
Tree	final int [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

94
Tree	final int [] problem = problem . getAllParameters () ;
Code	final int [] problem = problem . getAllParameters () ;
Distance : 5

95
Tree	final int [] [] problem = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Code	final int [] [] problem = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Distance : 8

96
Tree	final int cols = problem . getAllParameters ( length , length . ; () , length ) ;
Code	final int cols = problem . getAllParameters ( length , length . ; () , length ) ;
Distance : 9

97
Tree	final int cols = problem . getAllParameters ( problem , plane.w ) ;
Code	final int cols = problem . getAllParameters ( problem , plane.w ) ;
Distance : 6

98
Tree	final double cols = ( problem ) length . getAllParameters () ;
Code	final double cols = ( problem ) length . getAllParameters () ;
Distance : 7

99
Tree	final int [] [] cols = problem . getAllParameters ( problem ) ;
Code	final int [] [] cols = problem . getAllParameters ( problem ) ;
Distance : 6

100
Tree	final int cols = problem . getAllParameters ( problem , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	final int cols = problem . getAllParameters ( problem , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 6

101
Tree	char [] [] cols = problem . getAllParameters () ;
Code	char [] [] cols = problem . getAllParameters () ;
Distance : 6

102
Tree	final int cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 6

103
Tree	final double cols = problem . getAllParameters ( false , length ) ;
Code	final double cols = problem . getAllParameters ( false , length ) ;
Distance : 6

104
Tree	int cols = problem . getAllParameters () ;
Code	int cols = problem . getAllParameters () ;
Distance : 4

105
Tree	long cols = problem . getAllParameters () . length ;
Code	long cols = problem . getAllParameters () . length ;
Distance : 3

106
Tree	final int [] [] problem = problem . getAllParameters ( null ) ;
Code	final int [] [] problem = problem . getAllParameters ( null ) ;
Distance : 7

107
Tree	double [] [] cols = problem . getAllParameters () ;
Code	double [] [] cols = problem . getAllParameters () ;
Distance : 6

108
Tree	final int problem = problem . getAllParameters ( false , length ) ;
Code	final int problem = problem . getAllParameters ( false , length ) ;
Distance : 6

109
Tree	final problem cols = problem . getAllParameters () ;
Code	final problem cols = problem . getAllParameters () ;
Distance : 4

110
Tree	int cols = ( ( problem ) length ) . final () ;
Code	int cols = ( ( problem ) length ) . final () ;
Distance : 8

111
Tree	static int cols = NUMBER_CONSTANT ;
Code	static int cols = NUMBER_CONSTANT ;
Distance : 7

112
Tree	static int cols = problem . getAllParameters ( null ) ;
Code	static int cols = problem . getAllParameters ( null ) ;
Distance : 5

113
Tree	problem = problem . getAllParameters ()
Code	problem = problem . getAllParameters ()
Distance : 7

114
Tree	final double cols = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final double cols = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 7

115
Tree	final int cols = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 6

116
Tree	final int cols = getAllParameters ( problem . getAllParameters () , length , length , problem , null ) ;
Code	final int cols = getAllParameters ( problem . getAllParameters () , length , length , problem , null ) ;
Distance : 11

117
Tree	int cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	int cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	final double cols = new problem () ;
Code	final double cols = new problem () ;
Distance : 6

119
Tree	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 3

120
Tree	final int [] [] problem = ( problem ) length ;
Code	final int [] [] problem = ( problem ) length ;
Distance : 6

121
Tree	final int problem = ( problem ) length . getAllParameters () ;
Code	final int problem = ( problem ) length . getAllParameters () ;
Distance : 7

122
Tree	final int [] [] cols = ( problem ) cols ;
Code	final int [] [] cols = ( problem ) cols ;
Distance : 8

123
Tree	final cols cols = problem . getAllParameters () ;
Code	final cols cols = problem . getAllParameters () ;
Distance : 4

124
Tree	final int cols = ( double ) length . getAllParameters () ;
Code	final int cols = ( double ) length . getAllParameters () ;
Distance : 6

125
Tree	final int cols = problem . getAllParameters ( problem , length . ; () , length ) ;
Code	final int cols = problem . getAllParameters ( problem , length . ; () , length ) ;
Distance : 9

126
Tree	double cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	double cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 8

127
Tree	super ( length . getAllParameters () ) ;
Code	super ( length . getAllParameters () ) ;
Distance : 8

128
Tree	static int cols = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	static int cols = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 7

129
Tree	double cols = problem . getAllParameters () . length ;
Code	double cols = problem . getAllParameters () . length ;
Distance : 3

130
Tree	final int cols = problem . cols ( cols . getAllParameters () , length () ) ;
Code	final int cols = problem . cols ( cols . getAllParameters () , length () ) ;
Distance : 8

131
Tree	final int problem = problem . cols ( problem . getAllParameters () , length () ) ;
Code	final int problem = problem . cols ( problem . getAllParameters () , length () ) ;
Distance : 9

132
Tree	final int cols = problem . cols ( problem . getAllParameters () , length () ) ;
Code	final int cols = problem . cols ( problem . getAllParameters () , length () ) ;
Distance : 8

133
Tree	final double [] cols = problem . getAllParameters () ;
Code	final double [] cols = problem . getAllParameters () ;
Distance : 5

134
Tree	final double [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( problem , NUMBER_CONSTANT ) ;
Distance : 9

135
Tree	int cols = problem . getAllParameters () . length ;
Code	int cols = problem . getAllParameters () . length ;
Distance : 2

136
Tree	problem cols = problem . getAllParameters () ;
Code	problem cols = problem . getAllParameters () ;
Distance : 5

137
Tree	char cols = problem ;
Code	char cols = problem ;
Distance : 7

138
Tree	final int cols = getAllParameters ( length . getAllParameters () , length , length , cols , null ) ;
Code	final int cols = getAllParameters ( length . getAllParameters () , length , length , cols , null ) ;
Distance : 12

139
Tree	long cols = ( problem ) length ;
Code	long cols = ( problem ) length ;
Distance : 7

140
Tree	final int cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Distance : 4

141
Tree	final double cols = problem . getAllParameters ( null ) ;
Code	final double cols = problem . getAllParameters ( null ) ;
Distance : 5

142
Tree	static int [] [] problem = problem . getAllParameters ( null ) ;
Code	static int [] [] problem = problem . getAllParameters ( null ) ;
Distance : 8

143
Tree	final int cols = problem . cols ( length . getAllParameters () , getAllParameters () ) ;
Code	final int cols = problem . cols ( length . getAllParameters () , getAllParameters () ) ;
Distance : 9

144
Tree	final int cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 8

145
Tree	final int cols = problem . getAllParameters ( length ) ;
Code	final int cols = problem . getAllParameters ( length ) ;
Distance : 4

146
Tree	final int [] cols = problem . getAllParameters () ;
Code	final int [] cols = problem . getAllParameters () ;
Distance : 4

147
Tree	abstract cols cols = problem . getAllParameters () ;
Code	abstract cols cols = problem . getAllParameters () ;
Distance : 5

148
Tree	final int cols = source.n . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Code	final int cols = source.n . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Distance : 11

149
Tree	length cols = problem . getAllParameters () ;
Code	length cols = problem . getAllParameters () ;
Distance : 5

150
Tree	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 8

151
Tree	final int cols = ( int ) length . getAllParameters () ;
Code	final int cols = ( int ) length . getAllParameters () ;
Distance : 6

152
Tree	final int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

153
Tree	final int cols = ( long ) length . getAllParameters () ;
Code	final int cols = ( long ) length . getAllParameters () ;
Distance : 6

154
Tree	final int [] [] problem = problem . getAllParameters ( false , length ) ;
Code	final int [] [] problem = problem . getAllParameters ( false , length ) ;
Distance : 8

155
Tree	final int cols = source.m1 . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Code	final int cols = source.m1 . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Distance : 11

156
Tree	long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

157
Tree	final int [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , cols ) ;
Code	final int [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , cols ) ;
Distance : 8

158
Tree	double cols = problem ;
Code	double cols = problem ;
Distance : 7

159
Tree	final double [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Code	final double [] [] cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Distance : 8

160
Tree	final int problem = problem . getAllParameters () . length ;
Code	final int problem = problem . getAllParameters () . length ;
Distance : 2

161
Tree	final int cols = problem . cols ( problem . getAllParameters () , length . ; () ) ;
Code	final int cols = problem . cols ( problem . getAllParameters () , length . ; () ) ;
Distance : 10

162
Tree	final int [] [] cols = problem . getAllParameters ( true , length ) ;
Code	final int [] [] cols = problem . getAllParameters ( true , length ) ;
Distance : 7

163
Tree	long cols = ( ( problem ) length ) . getAllParameters () ;
Code	long cols = ( ( problem ) length ) . getAllParameters () ;
Distance : 9

164
Tree	final int [] [] cols = problem . getAllParameters ( length ) ;
Code	final int [] [] cols = problem . getAllParameters ( length ) ;
Distance : 6

165
Tree	final int problem = NUMBER_CONSTANT ;
Code	final int problem = NUMBER_CONSTANT ;
Distance : 7

166
Tree	char cols = ( ( problem ) length ) . getAllParameters () ;
Code	char cols = ( ( problem ) length ) . getAllParameters () ;
Distance : 9

167
Tree	super ( cols . getAllParameters () ) ;
Code	super ( cols . getAllParameters () ) ;
Distance : 7

168
Tree	double cols = problem . getAllParameters ( false , length ) ;
Code	double cols = problem . getAllParameters ( false , length ) ;
Distance : 7

169
Tree	final int cols = problem . cols ( length . getAllParameters () , length . ; () ) ;
Code	final int cols = problem . cols ( length . getAllParameters () , length . ; () ) ;
Distance : 10

170
Tree	final int cols = getAllParameters ( problem . getAllParameters () , length , length , cols , null ) ;
Code	final int cols = getAllParameters ( problem . getAllParameters () , length , length , cols , null ) ;
Distance : 11

171
Tree	final int problem = problem . cols ( problem . getAllParameters () , length . ; () ) ;
Code	final int problem = problem . cols ( problem . getAllParameters () , length . ; () ) ;
Distance : 11

172
Tree	final int cols = problem . getAllParameters ( cols , length . final () , length ) ;
Code	final int cols = problem . getAllParameters ( cols , length . final () , length ) ;
Distance : 9

173
Tree	final int [] [] cols = problem . getAllParameters () ;
Code	final int [] [] cols = problem . getAllParameters () ;
Distance : 5

174
Tree	final int cols = problem . cols ( cols . getAllParameters () , length . ; () ) ;
Code	final int cols = problem . cols ( cols . getAllParameters () , length . ; () ) ;
Distance : 10

175
Tree	final int cols = getAllParameters ( problem . getAllParameters () , length , length , length , null ) ;
Code	final int cols = getAllParameters ( problem . getAllParameters () , length , length , length , null ) ;
Distance : 11

176
Tree	long cols = problem ;
Code	long cols = problem ;
Distance : 7

177
Tree	final int problem = new problem () ;
Code	final int problem = new problem () ;
Distance : 6

178
Tree	final int problem = problem . getAllParameters ( problem , length . ; () , length ) ;
Code	final int problem = problem . getAllParameters ( problem , length . ; () , length ) ;
Distance : 10

179
Tree	char cols = ( problem ) length ;
Code	char cols = ( problem ) length ;
Distance : 7

180
Tree	int cols = problem . getAllParameters ( false , length ) ;
Code	int cols = problem . getAllParameters ( false , length ) ;
Distance : 6

181
Tree	final int cols = ( double [] ) length . getAllParameters () ;
Code	final int cols = ( double [] ) length . getAllParameters () ;
Distance : 7

182
Tree	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , cols ) ;
Code	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , cols ) ;
Distance : 6

183
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

184
Tree	static int cols = problem . getAllParameters () . length ;
Code	static int cols = problem . getAllParameters () . length ;
Distance : 2

185
Tree	final int cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 6

186
Tree	double [] problem = problem . getAllParameters () ;
Code	double [] problem = problem . getAllParameters () ;
Distance : 6

187
Tree	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Code	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , length ) ;
Distance : 5

188
Tree	static int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	static int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

189
Tree	final int cols = source.nDev . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Code	final int cols = source.nDev . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Distance : 11

190
Tree	final int cols = source.isBiasCorrected . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Code	final int cols = source.isBiasCorrected . getAllParameters ( length , STRING_CONSTANT , length . final () ) ;
Distance : 11

191
Tree	static int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	static int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

192
Tree	super ( problem . getAllParameters () ) ; Class
Code	super ( problem . getAllParameters () ) ; Class
Distance : 8

193
Tree	final double cols = NUMBER_CONSTANT ;
Code	final double cols = NUMBER_CONSTANT ;
Distance : 7

194
Tree	final int problem = problem ;
Code	final int problem = problem ;
Distance : 6

195
Tree	final double [] [] cols = problem . getAllParameters () ;
Code	final double [] [] cols = problem . getAllParameters () ;
Distance : 6

196
Tree	static cols cols = problem . getAllParameters () ;
Code	static cols cols = problem . getAllParameters () ;
Distance : 5

197
Tree	super ( problem . getAllParameters () ) ;
Code	super ( problem . getAllParameters () ) ;
Distance : 7

198
Tree	static int [] [] problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	static int [] [] problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 10

199
Tree	final int problem = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int problem = problem . getAllParameters () . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 36
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = new BigDecimal [] <> ;
Code	final BigDecimal [] out = new BigDecimal [] <> ;
Distance : 3

2
Tree	final BigDecimal [] out = new BigDecimal [] ++ ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ;
Distance : 3

3
Tree	final BigDecimal [] out = new BigDecimal [] / ;
Code	final BigDecimal [] out = new BigDecimal [] / ;
Distance : 3

4
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

5
Tree	final BigDecimal [] out = new BigDecimal [] <> ] ;
Code	final BigDecimal [] out = new BigDecimal [] <> ] ;
Distance : 2

6
Tree	final BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 4

7
Tree	static BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	static BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

8
Tree	static BigDecimal [] out = new BigDecimal [] out ] ;
Code	static BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

9
Tree	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Distance : 7

10
Tree	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

11
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

12
Tree	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

13
Tree	final BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Distance : 4

14
Tree	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Distance : 7

15
Tree	final BigDecimal [] out = new BigDecimal [] >= ] ;
Code	final BigDecimal [] out = new BigDecimal [] >= ] ;
Distance : 2

16
Tree	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

17
Tree	abstract BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

18
Tree	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Distance : 7

19
Tree	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 1

20
Tree	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

21
Tree	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

22
Tree	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

23
Tree	static BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

24
Tree	abstract BigDecimal [] out = new BigDecimal [] out ] ;
Code	abstract BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

25
Tree	final BigDecimal [] out = new BigDecimal [] >= ;
Code	final BigDecimal [] out = new BigDecimal [] >= ;
Distance : 3

26
Tree	final BigDecimal [] out = new BigDecimal [] out ] ;
Code	final BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 2

27
Tree	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

28
Tree	final BigDecimal [] out = new BigDecimal [] / ] ;
Code	final BigDecimal [] out = new BigDecimal [] / ] ;
Distance : 2

29
Tree	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Distance : 2

30
Tree	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Distance : 7

31
Tree	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

32
Tree	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

33
Tree	final BigDecimal [] out = new BigDecimal [ out ] ;
Code	final BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 1

34
Tree	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

35
Tree	abstract BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final double [] out = checkInitialize ( NUMBER_CONSTANT ) ;
Code	final double [] out = checkInitialize ( NUMBER_CONSTANT ) ;
Distance : 5

1
Tree	final double [] out = computeObjectiveValue ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = computeObjectiveValue ( NUMBER_CONSTANT , v.length ) ;
Distance : 6

2
Tree	final double [] out = FastMath [ NUMBER_CONSTANT ] ;
Code	final double [] out = FastMath [ NUMBER_CONSTANT ] ;
Distance : 3

3
Tree	final double [] out = checkInitialize ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = checkInitialize ( NUMBER_CONSTANT , v.length ) ;
Distance : 6

4
Tree	char [] out = new double [ nRows ] ;
Code	char [] out = new double [ nRows ] ;
Distance : 2

5
Tree	final double [] out = new double [ nRows . intValue ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . intValue ( NUMBER_CONSTANT ) ] ;
Distance : 5

6
Tree	final double [] out = new double [ omega ( nRows , NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega ( nRows , NUMBER_CONSTANT ) ] ;
Distance : 5

7
Tree	final double [] out = new double [ nRows . getDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . getDimension ( NUMBER_CONSTANT ) ] ;
Distance : 5

8
Tree	final int [] out = null ;
Code	final int [] out = null ;
Distance : 6

9
Tree	final long [] out = null ;
Code	final long [] out = null ;
Distance : 6

10
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

11
Tree	final double [] out = v.length . getGeneratorUpperBounds ( nRows , v.length ) ;
Code	final double [] out = v.length . getGeneratorUpperBounds ( nRows , v.length ) ;
Distance : 7

12
Tree	final double [] out = new double [ nRows . intValue ( nRows ) ] ;
Code	final double [] out = new double [ nRows . intValue ( nRows ) ] ;
Distance : 5

13
Tree	final double [] [] ( final double . . . out ) { return out ; }
Code	final double [] [] ( final double . . . out ) { return out ; }
Distance : 12

14
Tree	final double [] out = getColumnDimension ( out , false ) ;
Code	final double [] out = getColumnDimension ( out , false ) ;
Distance : 6

15
Tree	final double [] out = new double [ omega () ] ;
Code	final double [] out = new double [ omega () ] ;
Distance : 2

16
Tree	final double [] out = v.length . abs ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Code	final double [] out = v.length . abs ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Distance : 12

17
Tree	final double [] out = y0 [ NUMBER_CONSTANT ] . hashCode () ;
Code	final double [] out = y0 [ NUMBER_CONSTANT ] . hashCode () ;
Distance : 6

18
Tree	final double [] out = v.length . hashCode ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Code	final double [] out = v.length . hashCode ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Distance : 12

19
Tree	final double [] out = RealVector [ NUMBER_CONSTANT ] . hashCode () ;
Code	final double [] out = RealVector [ NUMBER_CONSTANT ] . hashCode () ;
Distance : 6

20
Tree	final double [] out = new double [ nRows . min () ] ;
Code	final double [] out = new double [ nRows . min () ] ;
Distance : 3

21
Tree	final double [] out = new double [ getDimension () ] ;
Code	final double [] out = new double [ getDimension () ] ;
Distance : 2

22
Tree	final double [] out = v.length . clone ( nRows , v.length ) ;
Code	final double [] out = v.length . clone ( nRows , v.length ) ;
Distance : 7

23
Tree	final long [] out = out ;
Code	final long [] out = out ;
Distance : 6

24
Tree	final double [] out = getTickLength ( out , nRows ) ;
Code	final double [] out = getTickLength ( out , nRows ) ;
Distance : 5

25
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . intValue () ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . intValue () ;
Distance : 6

26
Tree	final double [] out = v.length . abs ( nRows , v.length ) ;
Code	final double [] out = v.length . abs ( nRows , v.length ) ;
Distance : 7

27
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . hashCode () ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . hashCode () ;
Distance : 6

28
Tree	final double [] out = new double [ getDimension ( nRows , NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ getDimension ( nRows , NUMBER_CONSTANT ) ] ;
Distance : 5

29
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

30
Tree	final double [] out = out . getGeneratorUpperBounds ( CHAR_CONS ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( CHAR_CONS ) ;
Distance : 6

31
Tree	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT , out ) ;
Code	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT , out ) ;
Distance : 9

32
Tree	final double [] out = computeObjectiveValue ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = computeObjectiveValue ( out , NUMBER_CONSTANT ) ;
Distance : 6

33
Tree	final double [] out = new double [ nRows . getDimension ( nRows ) ] ;
Code	final double [] out = new double [ nRows . getDimension ( nRows ) ] ;
Distance : 5

34
Tree	final double [] out = getColumnDimension ( out ) ;
Code	final double [] out = getColumnDimension ( out ) ;
Distance : 5

35
Tree	final double [] out = getTickLength ( out , false ) ;
Code	final double [] out = getTickLength ( out , false ) ;
Distance : 6

36
Tree	final double [] out = out . getGeneratorUpperBounds ( getField ( STRING_CONSTANT ) , v.length ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( getField ( STRING_CONSTANT ) , v.length ) ;
Distance : 11

37
Tree	final double [] out = out . valueOf ( getField ( STRING_CONSTANT ) , v.length ) ;
Code	final double [] out = out . valueOf ( getField ( STRING_CONSTANT ) , v.length ) ;
Distance : 11

38
Tree	final double [] out = Coordinates3D [ nRows ] . length () ;
Code	final double [] out = Coordinates3D [ nRows ] . length () ;
Distance : 5

39
Tree	final double [] out = y0 [ nRows ] . length () ;
Code	final double [] out = y0 [ nRows ] . length () ;
Distance : 5

40
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length ) ;
Distance : 7

41
Tree	final double [] out = getDimension ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getDimension ( out , NUMBER_CONSTANT ) ;
Distance : 6

42
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

43
Tree	final double [] out = out . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( NUMBER_CONSTANT ) ;
Distance : 6

44
Tree	final double [] out = out . valueOf ( CHAR_CONS ) ;
Code	final double [] out = out . valueOf ( CHAR_CONS ) ;
Distance : 6

45
Tree	final double [] out = out . valueOf ( nRows , v.length ) ;
Code	final double [] out = out . valueOf ( nRows , v.length ) ;
Distance : 7

46
Tree	final double [] out = getDimension ( out ) ;
Code	final double [] out = getDimension ( out ) ;
Distance : 5

47
Tree	final double [] out = getTickLength ( out , v.length ) ;
Code	final double [] out = getTickLength ( out , v.length ) ;
Distance : 6

48
Tree	final double [] out = RealVector [ nRows ] . length () ;
Code	final double [] out = RealVector [ nRows ] . length () ;
Distance : 5

49
Tree	final double [] out = out . getGeneratorUpperBounds ( new ArrayRealVector ( nRows ) , out ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( new ArrayRealVector ( nRows ) , out ) ;
Distance : 10

50
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows ) ;
Distance : 5

51
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] ;
Distance : 3

52
Tree	final double [] out = y0 [ NUMBER_CONSTANT ] ;
Code	final double [] out = y0 [ NUMBER_CONSTANT ] ;
Distance : 3

53
Tree	final double [] out = out . abs ( new Object ( nRows ) , out ) ;
Code	final double [] out = out . abs ( new Object ( nRows ) , out ) ;
Distance : 10

54
Tree	long [] out = new double [ nRows ] ;
Code	long [] out = new double [ nRows ] ;
Distance : 2

55
Tree	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Distance : 6

56
Tree	final double [] out = RealVector [ NUMBER_CONSTANT ] ;
Code	final double [] out = RealVector [ NUMBER_CONSTANT ] ;
Distance : 3

57
Tree	final double [] [] ( final int . . . out ) { return out ; }
Code	final double [] [] ( final int . . . out ) { return out ; }
Distance : 13

58
Tree	final double [] out = out . hashCode ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	final double [] out = out . hashCode ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

59
Tree	final float [] out = {} ;
Code	final float [] out = {} ;
Distance : 6

60
Tree	final double [] log ( final double . . . out ) { return out ; }
Code	final double [] log ( final double . . . out ) { return out ; }
Distance : 12

61
Tree	final double [] out = v.length . clone ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Code	final double [] out = v.length . clone ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Distance : 12

62
Tree	final double [] out = getDimension ( STRING_CONSTANT ) . floatValue () ;
Code	final double [] out = getDimension ( STRING_CONSTANT ) . floatValue () ;
Distance : 7

63
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

64
Tree	final double [] out = new double [ nRows . size () ] ;
Code	final double [] out = new double [ nRows . size () ] ;
Distance : 3

65
Tree	final double [] out = computeObjectiveValue ( out , v.length ) ;
Code	final double [] out = computeObjectiveValue ( out , v.length ) ;
Distance : 6

66
Tree	final double [] out = getColumnDimension ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( out , NUMBER_CONSTANT ) ;
Distance : 6

67
Tree	final double [] out = getDimension ( out , v.length ) ;
Code	final double [] out = getDimension ( out , v.length ) ;
Distance : 6

68
Tree	final double [] out = getTickLength ( STRING_CONSTANT ) . size () ;
Code	final double [] out = getTickLength ( STRING_CONSTANT ) . size () ;
Distance : 7

69
Tree	final double [] out = new double [ nRows . size ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . size ( NUMBER_CONSTANT ) ] ;
Distance : 5

70
Tree	final double [] out = out ;
Code	final double [] out = out ;
Distance : 5

71
Tree	final double [] out = super(); ;
Code	final double [] out = super(); ;
Distance : 5

72
Tree	final double [] out = getTickLength ( STRING_CONSTANT ) . floatValue () ;
Code	final double [] out = getTickLength ( STRING_CONSTANT ) . floatValue () ;
Distance : 7

73
Tree	final double [] out = new int [ nRows ] ;
Code	final double [] out = new int [ nRows ] ;
Distance : 1

74
Tree	double [] out = out . hashCode () ;
Code	double [] out = out . hashCode () ;
Distance : 6

75
Tree	final double [] out = getDimension ( STRING_CONSTANT ) . size () ;
Code	final double [] out = getDimension ( STRING_CONSTANT ) . size () ;
Distance : 7

76
Tree	double [] out = out . getDimension () ;
Code	double [] out = out . getDimension () ;
Distance : 6

77
Tree	final float [] out = STRING_CONSTANT + out ;
Code	final float [] out = STRING_CONSTANT + out ;
Distance : 6

78
Tree	final double [] out = out . abs ( nRows , v.length , nRows , v.length ) ;
Code	final double [] out = out . abs ( nRows , v.length , nRows , v.length ) ;
Distance : 11

79
Tree	short [] out = new double [ nRows ] ;
Code	short [] out = new double [ nRows ] ;
Distance : 2

80
Tree	final double [] out = out . abs () ;
Code	final double [] out = out . abs () ;
Distance : 5

81
Tree	final double [] out = v.length . getGeneratorUpperBounds ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Code	final double [] out = v.length . getGeneratorUpperBounds ( nRows , null , getColumnDimension ( STRING_CONSTANT ) ) ;
Distance : 12

82
Tree	final double [] out = out . hashCode () ;
Code	final double [] out = out . hashCode () ;
Distance : 5

83
Tree	final double [] out = Coordinates3D [ nRows ] ;
Code	final double [] out = Coordinates3D [ nRows ] ;
Distance : 2

84
Tree	final long [] out = {} ;
Code	final long [] out = {} ;
Distance : 6

85
Tree	double [] out = out . abs () ;
Code	double [] out = out . abs () ;
Distance : 6

86
Tree	final double [] out = v.length . hashCode ( nRows , v.length ) ;
Code	final double [] out = v.length . hashCode ( nRows , v.length ) ;
Distance : 7

87
Tree	final double [] out = out . abs ( STRING_CONSTANT + nRows ) ;
Code	final double [] out = out . abs ( STRING_CONSTANT + nRows ) ;
Distance : 7

88
Tree	final double [] out = out . hashCode ( getField ( STRING_CONSTANT ) , v.length ) ;
Code	final double [] out = out . hashCode ( getField ( STRING_CONSTANT ) , v.length ) ;
Distance : 11

89
Tree	double [] out = out . getInstance () ;
Code	double [] out = out . getInstance () ;
Distance : 6

90
Tree	final double [] out = { out . natural ( nRows ) , super } ;
Code	final double [] out = { out . natural ( nRows ) , super } ;
Distance : 9

91
Tree	final double [] out = out . hashCode ( nRows , v.length , nRows , v.length ) ;
Code	final double [] out = out . hashCode ( nRows , v.length , nRows , v.length ) ;
Distance : 11

92
Tree	final double [] out = out . < nRows > anyList () ;
Code	final double [] out = out . < nRows > anyList () ;
Distance : 6

93
Tree	final double [] out = out . < nRows > getDimension () ;
Code	final double [] out = out . < nRows > getDimension () ;
Distance : 6

94
Tree	final double [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

95
Tree	final double [] out = nRows . < nRows > emptyList () ;
Code	final double [] out = nRows . < nRows > emptyList () ;
Distance : 6

96
Tree	final double [] out = out . < nRows > emptyList () ;
Code	final double [] out = out . < nRows > emptyList () ;
Distance : 6

97
Tree	final double [] out = out . hashCode ( nRows , v.length ) ;
Code	final double [] out = out . hashCode ( nRows , v.length ) ;
Distance : 7

98
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length , nRows , v.length ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length , nRows , v.length ) ;
Distance : 11

99
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

100
Tree	final double [] out = computeObjectiveValue ( out , nRows ) ;
Code	final double [] out = computeObjectiveValue ( out , nRows ) ;
Distance : 5

101
Tree	final double [] out = new double [ v.length () ] ;
Code	final double [] out = new double [ v.length () ] ;
Distance : 2

102
Tree	final double [] out = getDimension ( out , nRows ) ;
Code	final double [] out = getDimension ( out , nRows ) ;
Distance : 5

103
Tree	final double [] out = new double [ nRows . intValue () ] ;
Code	final double [] out = new double [ nRows . intValue () ] ;
Distance : 3

104
Tree	final double [] out = y0 [ nRows ] ;
Code	final double [] out = y0 [ nRows ] ;
Distance : 2

105
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

106
Tree	final double [] out = out . hashCode ( new ArrayRealVector ( nRows ) , out ) ;
Code	final double [] out = out . hashCode ( new ArrayRealVector ( nRows ) , out ) ;
Distance : 10

107
Tree	final double [] out = RealVector [ nRows ] ;
Code	final double [] out = RealVector [ nRows ] ;
Distance : 2

108
Tree	final int [] out = out ;
Code	final int [] out = out ;
Distance : 6

109
Tree	final double [] out = getColumnDimension ( out , nRows ) ;
Code	final double [] out = getColumnDimension ( out , nRows ) ;
Distance : 5

110
Tree	final double [] out = out . getGeneratorUpperBounds () ;
Code	final double [] out = out . getGeneratorUpperBounds () ;
Distance : 5

111
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

112
Tree	final double [] out = computeObjectiveValue ( out , false ) ;
Code	final double [] out = computeObjectiveValue ( out , false ) ;
Distance : 6

113
Tree	final double [] out = FastMath [ nRows ] ;
Code	final double [] out = FastMath [ nRows ] ;
Distance : 2

114
Tree	final double [] out = out . valueOf () ;
Code	final double [] out = out . valueOf () ;
Distance : 5

115
Tree	final double [] out = { out . y0 ( nRows ) , super } ;
Code	final double [] out = { out . y0 ( nRows ) , super } ;
Distance : 9

116
Tree	double [] out = new double [ nRows ] ;
Code	double [] out = new double [ nRows ] ;
Distance : 1

117
Tree	final int [] out = {} ;
Code	final int [] out = {} ;
Distance : 6

118
Tree	final double [] out = { out . getRowDimension ( nRows ) , super } ;
Code	final double [] out = { out . getRowDimension ( nRows ) , super } ;
Distance : 9

119
Tree	final double [] out = out . hashCode ( nRows ) ;
Code	final double [] out = out . hashCode ( nRows ) ;
Distance : 5

120
Tree	final double [] out = Coordinates3D [ nRows ] . floatValue () ;
Code	final double [] out = Coordinates3D [ nRows ] . floatValue () ;
Distance : 5

121
Tree	final double [] out = new double [ getColumnDimension () ] ;
Code	final double [] out = new double [ getColumnDimension () ] ;
Distance : 2

122
Tree	final double [] out = new double [ nRows . getDimension () ] ;
Code	final double [] out = new double [ nRows . getDimension () ] ;
Distance : 3

123
Tree	final double [] out = out . abs ( nRows , v.length ) ;
Code	final double [] out = out . abs ( nRows , v.length ) ;
Distance : 7

124
Tree	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 6

125
Tree	final int [] out = new double [ nRows ] ;
Code	final int [] out = new double [ nRows ] ;
Distance : 1

126
Tree	final long [] out = new double [ nRows ] ;
Code	final long [] out = new double [ nRows ] ;
Distance : 1

127
Tree	final double [] out = out . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

128
Tree	final double [] out = out . hashCode ( types [ nRows ] ) ;
Code	final double [] out = out . hashCode ( types [ nRows ] ) ;
Distance : 6

129
Tree	final double [] out = getColumnDimension ( out , v.length ) ;
Code	final double [] out = getColumnDimension ( out , v.length ) ;
Distance : 6

130
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , null ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , null ) ;
Distance : 7

131
Tree	final double [] out = out . abs ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	final double [] out = out . abs ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

132
Tree	final double [] out = out . abs ( field [ nRows ] ) ;
Code	final double [] out = out . abs ( field [ nRows ] ) ;
Distance : 6

133
Tree	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

134
Tree	final double [] out = hashCode ( field [ nRows ] , out ) ;
Code	final double [] out = hashCode ( field [ nRows ] , out ) ;
Distance : 6

135
Tree	final double [] out = out . abs ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . abs ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

136
Tree	final double [] out = out . valueOf ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . valueOf ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

137
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

138
Tree	final double [] out = out . abs ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

139
Tree	final long [] out = STRING_CONSTANT + out ;
Code	final long [] out = STRING_CONSTANT + out ;
Distance : 6

140
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

141
Tree	final double [] out = out . valueOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

142
Tree	final double [] out = { out . abs ( nRows ) , super } ;
Code	final double [] out = { out . abs ( nRows ) , super } ;
Distance : 9

143
Tree	final double [] out = out . abs ( nRows , null ) ;
Code	final double [] out = out . abs ( nRows , null ) ;
Distance : 7

144
Tree	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

145
Tree	final double [] out = getDimension ( out , false ) ;
Code	final double [] out = getDimension ( out , false ) ;
Distance : 6

146
Tree	final double [] out = out . abs ( CHAR_CONS ) ;
Code	final double [] out = out . abs ( CHAR_CONS ) ;
Distance : 6

147
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

148
Tree	final double [] out = out . getGeneratorUpperBounds ( STRING_CONSTANT + nRows ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( STRING_CONSTANT + nRows ) ;
Distance : 7

149
Tree	final double [] out = out . valueOf ( nRows , null ) ;
Code	final double [] out = out . valueOf ( nRows , null ) ;
Distance : 7

150
Tree	final double [] out = out . abs ( INDEX_OFFSET [ nRows ] ) ;
Code	final double [] out = out . abs ( INDEX_OFFSET [ nRows ] ) ;
Distance : 6

151
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT , out ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT , out ) ;
Distance : 9

152
Tree	final double [] out = out . getGeneratorUpperBounds ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

153
Tree	final int [] out = STRING_CONSTANT + out ;
Code	final int [] out = STRING_CONSTANT + out ;
Distance : 6

154
Tree	final double [] out = out . valueOf ( STRING_CONSTANT + nRows ) ;
Code	final double [] out = out . valueOf ( STRING_CONSTANT + nRows ) ;
Distance : 7

155
Tree	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT , out ) ;
Code	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT , out ) ;
Distance : 9

156
Tree	final double [] out = out . valueOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	final double [] out = out . valueOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

157
Tree	final double [] out = out . valueOf ( nRows ) ;
Code	final double [] out = out . valueOf ( nRows ) ;
Distance : 5

158
Tree	double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Code	double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Distance : 7

159
Tree	final double [] out = out . hashCode ( CHAR_CONS ) ;
Code	final double [] out = out . hashCode ( CHAR_CONS ) ;
Distance : 6

160
Tree	final double [] out = out . abs ( nRows . toString ( nRows ) , expected ( STRING_CONSTANT ) ) ;
Code	final double [] out = out . abs ( nRows . toString ( nRows ) , expected ( STRING_CONSTANT ) ) ;
Distance : 15

161
Tree	final double [] out = out . hashCode ( nRows . toString ( nRows ) , expected ( STRING_CONSTANT ) ) ;
Code	final double [] out = out . hashCode ( nRows . toString ( nRows ) , expected ( STRING_CONSTANT ) ) ;
Distance : 15

162
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

163
Tree	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

164
Tree	final double [] out = out . abs ( getField ( STRING_CONSTANT ) , v.length ) ;
Code	final double [] out = out . abs ( getField ( STRING_CONSTANT ) , v.length ) ;
Distance : 11

165
Tree	final double [] out = out . abs ( nRows . toString ( nRows ) , firstNonBottom ( STRING_CONSTANT ) ) ;
Code	final double [] out = out . abs ( nRows . toString ( nRows ) , firstNonBottom ( STRING_CONSTANT ) ) ;
Distance : 15

166
Tree	final double [] out = out . hashCode ( nRows . toString ( nRows ) , firstNonBottom ( STRING_CONSTANT ) ) ;
Code	final double [] out = out . hashCode ( nRows . toString ( nRows ) , firstNonBottom ( STRING_CONSTANT ) ) ;
Distance : 15

167
Tree	final double [] out = computeObjectiveValue ( NUMBER_CONSTANT ) ;
Code	final double [] out = computeObjectiveValue ( NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	final double [] createIllegalArgumentException ( final double . . . out ) { return out ; }
Code	final double [] createIllegalArgumentException ( final double . . . out ) { return out ; }
Distance : 12

169
Tree	final double [] out = getTickLength ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = getTickLength ( NUMBER_CONSTANT , v.length ) ;
Distance : 6

170
Tree	final double [] out = getDimension ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = getDimension ( NUMBER_CONSTANT , v.length ) ;
Distance : 6

171
Tree	double [] out = out . getDimension ( NUMBER_CONSTANT ) ;
Code	double [] out = out . getDimension ( NUMBER_CONSTANT ) ;
Distance : 7

172
Tree	final double [] out = {} ;
Code	final double [] out = {} ;
Distance : 5

173
Tree	final double [] out = new double [ v.length ( nRows , NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ v.length ( nRows , NUMBER_CONSTANT ) ] ;
Distance : 5

174
Tree	final double [] out = getTickLength ( NUMBER_CONSTANT ) ;
Code	final double [] out = getTickLength ( NUMBER_CONSTANT ) ;
Distance : 5

175
Tree	final double [] out = new double [ nRows . min ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . min ( NUMBER_CONSTANT ) ] ;
Distance : 5

176
Tree	final double [] out = getDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = getDimension ( NUMBER_CONSTANT ) ;
Distance : 5

177
Tree	final double [] out = STRING_CONSTANT + out ;
Code	final double [] out = STRING_CONSTANT + out ;
Distance : 5

178
Tree	double [] out = out . abs ( NUMBER_CONSTANT ) ;
Code	double [] out = out . abs ( NUMBER_CONSTANT ) ;
Distance : 7

179
Tree	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Distance : 6

180
Tree	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

181
Tree	final double [] out = out . valueOf ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( NUMBER_CONSTANT ) ;
Distance : 6

182
Tree	final double [] out = getTickLength ( out ) ;
Code	final double [] out = getTickLength ( out ) ;
Distance : 5

183
Tree	final double [] out = out . hashCode ( STRING_CONSTANT + nRows ) ;
Code	final double [] out = out . hashCode ( STRING_CONSTANT + nRows ) ;
Distance : 7

184
Tree	double [] out = out . getInstance ( NUMBER_CONSTANT ) ;
Code	double [] out = out . getInstance ( NUMBER_CONSTANT ) ;
Distance : 7

185
Tree	final double [] out = getTickLength ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getTickLength ( out , NUMBER_CONSTANT ) ;
Distance : 6

186
Tree	final double [] out = new double [ getColumnDimension ( nRows , NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ getColumnDimension ( nRows , NUMBER_CONSTANT ) ] ;
Distance : 5

187
Tree	final double [] out = computeObjectiveValue ( out ) ;
Code	final double [] out = computeObjectiveValue ( out ) ;
Distance : 5

188
Tree	final double [] out = getTickLength ( field [ nRows ] , out ) ;
Code	final double [] out = getTickLength ( field [ nRows ] , out ) ;
Distance : 6

189
Tree	final double [] out = getDimension ( field [ nRows ] , out ) ;
Code	final double [] out = getDimension ( field [ nRows ] , out ) ;
Distance : 6

190
Tree	final double [] out = new double [ nRows . min ( nRows ) ] ;
Code	final double [] out = new double [ nRows . min ( nRows ) ] ;
Distance : 5

191
Tree	final double [] out = out . valueOf ( nRows , v.length , nRows , v.length ) ;
Code	final double [] out = out . valueOf ( nRows , v.length , nRows , v.length ) ;
Distance : 11

192
Tree	final double [] out = computeObjectiveValue ( field [ nRows ] , out ) ;
Code	final double [] out = computeObjectiveValue ( field [ nRows ] , out ) ;
Distance : 6

193
Tree	final double [] out = out . abs ( new ArrayRealVector ( nRows ) , out ) ;
Code	final double [] out = out . abs ( new ArrayRealVector ( nRows ) , out ) ;
Distance : 10

194
Tree	final double [] out = out . abs ( nRows ) ;
Code	final double [] out = out . abs ( nRows ) ;
Distance : 5

195
Tree	final double [] out = new double [ nRows . size ( nRows ) ] ;
Code	final double [] out = new double [ nRows . size ( nRows ) ] ;
Distance : 5

196
Tree	final double [] out = out . abs ( types [ nRows ] ) ;
Code	final double [] out = out . abs ( types [ nRows ] ) ;
Distance : 6

197
Tree	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

198
Tree	final double [] out = out . hashCode ( nRows , null ) ;
Code	final double [] out = out . hashCode ( nRows , null ) ;
Distance : 7

199
Tree	final double [] out = out . abs ( nRows , NUMBER_CONSTANT , out ) ;
Code	final double [] out = out . abs ( nRows , NUMBER_CONSTANT , out ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int start ;
Code	int start ;
Distance : 7

1
Tree	int [] ;
Code	int [] ;
Distance : 8

2
Tree	double start ;
Code	double start ;
Distance : 8

3
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

4
Tree	Date start = getNumObjectiveFunctions () ;
Code	Date start = getNumObjectiveFunctions () ;
Distance : 5

5
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

6
Tree	int [] [] start = getNumObjectiveFunctions () ;
Code	int [] [] start = getNumObjectiveFunctions () ;
Distance : 6

7
Tree	char start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Code	char start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Distance : 5

8
Tree	final byte [] [] start = getNumObjectiveFunctions () ;
Code	final byte [] [] start = getNumObjectiveFunctions () ;
Distance : 8

9
Tree	boolean start = CHAR_CONS ;
Code	boolean start = CHAR_CONS ;
Distance : 7

10
Tree	long [] start = getNumObjectiveFunctions () ;
Code	long [] start = getNumObjectiveFunctions () ;
Distance : 6

11
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

12
Tree	double start = getNumObjectiveFunctions () - start ;
Code	double start = getNumObjectiveFunctions () - start ;
Distance : 5

13
Tree	int start = start + NUMBER_CONSTANT ;
Code	int start = start + NUMBER_CONSTANT ;
Distance : 5

14
Tree	int start = false ;
Code	int start = false ;
Distance : 6

15
Tree	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

16
Tree	int start = new NumericEntityUnescaper () ;
Code	int start = new NumericEntityUnescaper () ;
Distance : 5

17
Tree	int start = Sigmoid ;
Code	int start = Sigmoid ;
Distance : 6

18
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

19
Tree	Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 6

20
Tree	int start [] = getNumObjectiveFunctions ;
Code	int start [] = getNumObjectiveFunctions ;
Distance : 6

21
Tree	int start = Sigmoid ;
Code	int start = Sigmoid ;
Distance : 6

22
Tree	InvocationImpl [] start = getNumObjectiveFunctions () ;
Code	InvocationImpl [] start = getNumObjectiveFunctions () ;
Distance : 6

23
Tree	int start = requirePrinter ;
Code	int start = requirePrinter ;
Distance : 6

24
Tree	int start = requirePrinter ;
Code	int start = requirePrinter ;
Distance : 6

25
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

26
Tree	int start = getNumObjectiveFunctions () - start ;
Code	int start = getNumObjectiveFunctions () - start ;
Distance : 4

27
Tree	double start = new Sigmoid () ;
Code	double start = new Sigmoid () ;
Distance : 6

28
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

29
Tree	Date [] start = getNumObjectiveFunctions () ;
Code	Date [] start = getNumObjectiveFunctions () ;
Distance : 6

30
Tree	InvocationImpl [] start ;
Code	InvocationImpl [] start ;
Distance : 9

31
Tree	double start = NUMBER_CONSTANT + start ;
Code	double start = NUMBER_CONSTANT + start ;
Distance : 7

32
Tree	int start = Sigmoid ;
Code	int start = Sigmoid ;
Distance : 6

33
Tree	int start = start - NUMBER_CONSTANT ;
Code	int start = start - NUMBER_CONSTANT ;
Distance : 5

34
Tree	long start = NUMBER_CONSTANT + start ;
Code	long start = NUMBER_CONSTANT + start ;
Distance : 7

35
Tree	int start = NUMBER_CONSTANT / coefficients.length ;
Code	int start = NUMBER_CONSTANT / coefficients.length ;
Distance : 6

36
Tree	int start = getProperNumerator ;
Code	int start = getProperNumerator ;
Distance : 6

37
Tree	int start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Code	int start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Distance : 4

38
Tree	int start = this . start . start ;
Code	int start = this . start . start ;
Distance : 6

39
Tree	boolean start = NUMBER_CONSTANT + start ;
Code	boolean start = NUMBER_CONSTANT + start ;
Distance : 7

40
Tree	double start = true ;
Code	double start = true ;
Distance : 7

41
Tree	int start = getNumObjectiveFunctions * start ;
Code	int start = getNumObjectiveFunctions * start ;
Distance : 5

42
Tree	final start < getNumObjectiveFunctions > start ;
Code	final start < getNumObjectiveFunctions > start ;
Distance : 7

43
Tree	int start = requirePrinter ;
Code	int start = requirePrinter ;
Distance : 6

44
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

45
Tree	Coordinates3D [] start ;
Code	Coordinates3D [] start ;
Distance : 9

46
Tree	Date [] start ;
Code	Date [] start ;
Distance : 9

47
Tree	int start = NUMBER_CONSTANT / EvalMode.EVAL ;
Code	int start = NUMBER_CONSTANT / EvalMode.EVAL ;
Distance : 6

48
Tree	double start = this . start ;
Code	double start = this . start ;
Distance : 7

49
Tree	final double start = NUMBER_CONSTANT ;
Code	final double start = NUMBER_CONSTANT ;
Distance : 7

50
Tree	int start = start ;
Code	int start = start ;
Distance : 6

51
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

52
Tree	int += ;
Code	int += ;
Distance : 8

53
Tree	int
Code	int
Distance : 9

54
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

55
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

56
Tree	double [] ;
Code	double [] ;
Distance : 9

57
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

58
Tree	char start = STRING_CONSTANT + STRING_CONSTANT ;
Code	char start = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

59
Tree	int start = getProperNumerator ;
Code	int start = getProperNumerator ;
Distance : 6

60
Tree	InvocationImpl start = getNumObjectiveFunctions () ;
Code	InvocationImpl start = getNumObjectiveFunctions () ;
Distance : 5

61
Tree	double [] [] start = getNumObjectiveFunctions () ;
Code	double [] [] start = getNumObjectiveFunctions () ;
Distance : 7

62
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

63
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

64
Tree	boolean start = this . start ;
Code	boolean start = this . start ;
Distance : 7

65
Tree	int start = true ;
Code	int start = true ;
Distance : 6

66
Tree	int start = null ;
Code	int start = null ;
Distance : 6

67
Tree	int start = CHAR_CONS ;
Code	int start = CHAR_CONS ;
Distance : 6

68
Tree	final long [] [] start = getNumObjectiveFunctions () ;
Code	final long [] [] start = getNumObjectiveFunctions () ;
Distance : 8

69
Tree	int start = getNumObjectiveFunctions - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions - NUMBER_CONSTANT ;
Distance : 4

70
Tree	int start = new Sigmoid () ;
Code	int start = new Sigmoid () ;
Distance : 5

71
Tree	final start < start > start ;
Code	final start < start > start ;
Distance : 8

72
Tree	int start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Distance : 4

73
Tree	int start = STRING_CONSTANT + STRING_CONSTANT ;
Code	int start = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 6

74
Tree	double start = null ;
Code	double start = null ;
Distance : 7

75
Tree	final
Code	final
Distance : 10

76
Tree	final int start = NUMBER_CONSTANT ;
Code	final int start = NUMBER_CONSTANT ;
Distance : 6

77
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

78
Tree	final byte [] start = getNumObjectiveFunctions () ;
Code	final byte [] start = getNumObjectiveFunctions () ;
Distance : 7

79
Tree	final byte start ;
Code	final byte start ;
Distance : 9

80
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

81
Tree	double start = start - NUMBER_CONSTANT ;
Code	double start = start - NUMBER_CONSTANT ;
Distance : 6

82
Tree	final double start ;
Code	final double start ;
Distance : 9

83
Tree	abstract start start = getNumObjectiveFunctions () ;
Code	abstract start start = getNumObjectiveFunctions () ;
Distance : 6

84
Tree	double
Code	double
Distance : 10

85
Tree	int start = getNumObjectiveFunctions * () ;
Code	int start = getNumObjectiveFunctions * () ;
Distance : 5

86
Tree	final int start ;
Code	final int start ;
Distance : 8

87
Tree	long start = getNumObjectiveFunctions () - start ;
Code	long start = getNumObjectiveFunctions () - start ;
Distance : 5

88
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

89
Tree	int start = start * start ;
Code	int start = start * start ;
Distance : 6

90
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

91
Tree	double start = getNumObjectiveFunctions () . start ;
Code	double start = getNumObjectiveFunctions () . start ;
Distance : 5

92
Tree	final long start ;
Code	final long start ;
Distance : 9

93
Tree	final [] start ;
Code	final [] start ;
Distance : 9

94
Tree	final Date [] start = getNumObjectiveFunctions () ;
Code	final Date [] start = getNumObjectiveFunctions () ;
Distance : 7

95
Tree	double start = getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions ;
Distance : 6

96
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

97
Tree	int start = getProperNumerator ;
Code	int start = getProperNumerator ;
Distance : 6

98
Tree	final double [] start = getNumObjectiveFunctions () ;
Code	final double [] start = getNumObjectiveFunctions () ;
Distance : 7

99
Tree	int start = NUMBER_CONSTANT + start ;
Code	int start = NUMBER_CONSTANT + start ;
Distance : 6

100
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

101
Tree	final Date [] start ;
Code	final Date [] start ;
Distance : 9

102
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

103
Tree	final double [] [] start = getNumObjectiveFunctions () ;
Code	final double [] [] start = getNumObjectiveFunctions () ;
Distance : 8

104
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

105
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

106
Tree	long start = CHAR_CONS ;
Code	long start = CHAR_CONS ;
Distance : 7

107
Tree	final Object [] start ;
Code	final Object [] start ;
Distance : 9

108
Tree	boolean [] start = getNumObjectiveFunctions () ;
Code	boolean [] start = getNumObjectiveFunctions () ;
Distance : 6

109
Tree	final MutableFloat [] start ;
Code	final MutableFloat [] start ;
Distance : 9

110
Tree	int start = getNumObjectiveFunctions () - getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions () - getNumObjectiveFunctions ;
Distance : 4

111
Tree	double start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions () . getNumObjectiveFunctions ;
Distance : 5

112
Tree	int start = start / getNumObjectiveFunctions ;
Code	int start = start / getNumObjectiveFunctions ;
Distance : 5

113
Tree	int start = getNumObjectiveFunctions / getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions / getNumObjectiveFunctions ;
Distance : 5

114
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

115
Tree	int start = getNumObjectiveFunctions / start ;
Code	int start = getNumObjectiveFunctions / start ;
Distance : 5

116
Tree	int start = ( getNumObjectiveFunctions ) getNumObjectiveFunctions () ;
Code	int start = ( getNumObjectiveFunctions ) getNumObjectiveFunctions () ;
Distance : 5

117
Tree	final long [] start = getNumObjectiveFunctions () ;
Code	final long [] start = getNumObjectiveFunctions () ;
Distance : 7

118
Tree	final Object [] start = getNumObjectiveFunctions () ;
Code	final Object [] start = getNumObjectiveFunctions () ;
Distance : 7

119
Tree	int start = Sigmoid ;
Code	int start = Sigmoid ;
Distance : 6

120
Tree	double start = getNumObjectiveFunctions * start ;
Code	double start = getNumObjectiveFunctions * start ;
Distance : 6

121
Tree	long [] [] start = getNumObjectiveFunctions () ;
Code	long [] [] start = getNumObjectiveFunctions () ;
Distance : 7

122
Tree	final MutableFloat [] start = getNumObjectiveFunctions () ;
Code	final MutableFloat [] start = getNumObjectiveFunctions () ;
Distance : 7

123
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

124
Tree	int start = getProperNumerator ;
Code	int start = getProperNumerator ;
Distance : 6

125
Tree	final Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	final Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 7

126
Tree	long start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Code	long start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Distance : 5

127
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

128
Tree	int start = start / start ;
Code	int start = start / start ;
Distance : 6

129
Tree	double start = CHAR_CONS ;
Code	double start = CHAR_CONS ;
Distance : 7

130
Tree	int start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Code	int start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Distance : 4

131
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

132
Tree	Object start = getNumObjectiveFunctions () ;
Code	Object start = getNumObjectiveFunctions () ;
Distance : 5

133
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

134
Tree	long start ;
Code	long start ;
Distance : 8

135
Tree	boolean start ;
Code	boolean start ;
Distance : 8

136
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

137
Tree	final Coordinates3D [] start ;
Code	final Coordinates3D [] start ;
Distance : 9

138
Tree	start < start > = = getNumObjectiveFunctions () ;
Code	start < start > = = getNumObjectiveFunctions () ;
Distance : 7

139
Tree	long start = STRING_CONSTANT + STRING_CONSTANT ;
Code	long start = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

140
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

141
Tree	long start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Code	long start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Distance : 5

142
Tree	double start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Code	double start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Distance : 5

143
Tree	double start = this . start . getNumObjectiveFunctions ;
Code	double start = this . start . getNumObjectiveFunctions ;
Distance : 7

144
Tree	int start = this . start . getNumObjectiveFunctions ;
Code	int start = this . start . getNumObjectiveFunctions ;
Distance : 6

145
Tree	int /= ;
Code	int /= ;
Distance : 8

146
Tree	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

147
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

148
Tree	double start = this . start . start ;
Code	double start = this . start . start ;
Distance : 7

149
Tree	int start = super(); ;
Code	int start = super(); ;
Distance : 6

150
Tree	int start = NUMBER_CONSTANT / currentState.length ;
Code	int start = NUMBER_CONSTANT / currentState.length ;
Distance : 6

151
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

152
Tree	double start = start ;
Code	double start = start ;
Distance : 7

153
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

154
Tree	int start [] = getNumObjectiveFunctions () ;
Code	int start [] = getNumObjectiveFunctions () ;
Distance : 5

155
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

156
Tree	int start = NUMBER_CONSTANT / set.length ;
Code	int start = NUMBER_CONSTANT / set.length ;
Distance : 6

157
Tree	long
Code	long
Distance : 10

158
Tree	final byte start = NUMBER_CONSTANT ;
Code	final byte start = NUMBER_CONSTANT ;
Distance : 7

159
Tree	long start = true ;
Code	long start = true ;
Distance : 7

160
Tree	int start [] = start ;
Code	int start [] = start ;
Distance : 7

161
Tree	final int start = getNumObjectiveFunctions ;
Code	final int start = getNumObjectiveFunctions ;
Distance : 6

162
Tree	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 4

163
Tree	final long start = NUMBER_CONSTANT ;
Code	final long start = NUMBER_CONSTANT ;
Distance : 7

164
Tree	int start = set.length ;
Code	int start = set.length ;
Distance : 6

165
Tree	double start [] = getNumObjectiveFunctions () ;
Code	double start [] = getNumObjectiveFunctions () ;
Distance : 6

166
Tree	int start = new XMinus5Function () ;
Code	int start = new XMinus5Function () ;
Distance : 5

167
Tree	double start = STRING_CONSTANT + STRING_CONSTANT ;
Code	double start = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 7

168
Tree	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

169
Tree	int start = continue; ;
Code	int start = continue; ;
Distance : 6

170
Tree	double start [] = start ;
Code	double start [] = start ;
Distance : 8

171
Tree	boolean [] [] start = getNumObjectiveFunctions () ;
Code	boolean [] [] start = getNumObjectiveFunctions () ;
Distance : 7

172
Tree	double start = getNumObjectiveFunctions - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions - NUMBER_CONSTANT ;
Distance : 5

173
Tree	final [] start = getNumObjectiveFunctions () ;
Code	final [] start = getNumObjectiveFunctions () ;
Distance : 6

174
Tree	final double start = getNumObjectiveFunctions ;
Code	final double start = getNumObjectiveFunctions ;
Distance : 7

175
Tree	double start = start + NUMBER_CONSTANT ;
Code	double start = start + NUMBER_CONSTANT ;
Distance : 6

176
Tree	Coordinates3D start = getNumObjectiveFunctions () ;
Code	Coordinates3D start = getNumObjectiveFunctions () ;
Distance : 5

177
Tree	public start start = getNumObjectiveFunctions () ;
Code	public start start = getNumObjectiveFunctions () ;
Distance : 6

178
Tree	int start = ( start ) getNumObjectiveFunctions () ;
Code	int start = ( start ) getNumObjectiveFunctions () ;
Distance : 5

179
Tree	boolean FastDatePrinter [] = getNumObjectiveFunctions () ;
Code	boolean FastDatePrinter [] = getNumObjectiveFunctions () ;
Distance : 7

180
Tree	double start [] = getNumObjectiveFunctions ;
Code	double start [] = getNumObjectiveFunctions ;
Distance : 7

181
Tree	final int [] start = getNumObjectiveFunctions () ;
Code	final int [] start = getNumObjectiveFunctions () ;
Distance : 6

182
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

183
Tree	final int [] [] start = getNumObjectiveFunctions () ;
Code	final int [] [] start = getNumObjectiveFunctions () ;
Distance : 7

184
Tree	long NumericEntityUnescaper [] = getNumObjectiveFunctions () ;
Code	long NumericEntityUnescaper [] = getNumObjectiveFunctions () ;
Distance : 7

185
Tree	final start < getNumObjectiveFunctions > start ;
Code	final start < getNumObjectiveFunctions > start ;
Distance : 7

186
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

187
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

188
Tree	final double start = start ;
Code	final double start = start ;
Distance : 8

189
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

190
Tree	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

191
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

192
Tree	boolean start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Code	boolean start = NUMBER_CONSTANT / getNumObjectiveFunctions () ;
Distance : 5

193
Tree	double start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Code	double start = STRING_CONSTANT + getNumObjectiveFunctions () ;
Distance : 5

194
Tree	final start < start > start ;
Code	final start < start > start ;
Distance : 8

195
Tree	long start = ( getNumObjectiveFunctions ) getNumObjectiveFunctions () ;
Code	long start = ( getNumObjectiveFunctions ) getNumObjectiveFunctions () ;
Distance : 6

196
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

197
Tree	double start = ( getNumObjectiveFunctions ) getNumObjectiveFunctions () ;
Code	double start = ( getNumObjectiveFunctions ) getNumObjectiveFunctions () ;
Distance : 6

198
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

199
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int j = n int n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n int n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

1
Tree	int j = n int n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n int n . IEEEremainder ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

2
Tree	int j = n int isNaN ( n , n , n ) - j ;
Code	int j = n int isNaN ( n , n , n ) - j ;
Distance : 9

3
Tree	int j = n * j - n ;
Code	int j = n * j - n ;
Distance : 5

4
Tree	int j = n NUMBER_CONSTANT isNaN ( n , n , n ) - n ;
Code	int j = n NUMBER_CONSTANT isNaN ( n , n , n ) - n ;
Distance : 8

5
Tree	int j = n * n - n ;
Code	int j = n * n - n ;
Distance : 4

6
Tree	int j = getInstance ( n / n , n ) ;
Code	int j = getInstance ( n / n , n ) ;
Distance : 6

7
Tree	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 9

8
Tree	long j = NUMBER_CONSTANT * n - j ;
Code	long j = NUMBER_CONSTANT * n - j ;
Distance : 4

9
Tree	int j = n . getInstance ( n , n , n ) / n ;
Code	int j = n . getInstance ( n , n , n ) / n ;
Distance : 9

10
Tree	int j = n == CHAR_CONS - n ;
Code	int j = n == CHAR_CONS - n ;
Distance : 6

11
Tree	int j = n + isNaN () + n - j ;
Code	int j = n + isNaN () + n - j ;
Distance : 7

12
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

13
Tree	int j = n . hashCode ( n , n , n ) / j ;
Code	int j = n . hashCode ( n , n , n ) / j ;
Distance : 9

14
Tree	int j = n + length () + n - j ;
Code	int j = n + length () + n - j ;
Distance : 7

15
Tree	int j = n && ( n < < NUMBER_CONSTANT ) ;
Code	int j = n && ( n < < NUMBER_CONSTANT ) ;
Distance : 4

16
Tree	int j = n . getInstance ( n , n , NUMBER_CONSTANT ) / n ;
Code	int j = n . getInstance ( n , n , NUMBER_CONSTANT ) / n ;
Distance : 8

17
Tree	int j = n / j - NUMBER_CONSTANT ;
Code	int j = n / j - NUMBER_CONSTANT ;
Distance : 5

18
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

19
Tree	int j = n < sample2.length - n ;
Code	int j = n < sample2.length - n ;
Distance : 6

20
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

21
Tree	int j = n == IncrementalCheckMode.GENERATE_IJS - j ;
Code	int j = n == IncrementalCheckMode.GENERATE_IJS - j ;
Distance : 6

22
Tree	int j = ( int ) n * ^ ;
Code	int j = ( int ) n * ^ ;
Distance : 6

23
Tree	int j = n == currentState.length - j ;
Code	int j = n == currentState.length - j ;
Distance : 6

24
Tree	int j = RandomNameGenerator.FIRST_CHAR + Boolean.FALSE - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR + Boolean.FALSE - j ;
Distance : 6

25
Tree	int j = NUMBER_CONSTANT * n - n - j ;
Code	int j = NUMBER_CONSTANT * n - n - j ;
Distance : 4

26
Tree	int j = RandomNameGenerator.FIRST_CHAR + LocalizedFormats.OVERFLOW_IN_ADDITION - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR + LocalizedFormats.OVERFLOW_IN_ADDITION - n ;
Distance : 6

27
Tree	int j = ( int ) currentState.length * currentState.length - j ;
Code	int j = ( int ) currentState.length * currentState.length - j ;
Distance : 8

28
Tree	int j = getTickLength ( n / n , n ) ;
Code	int j = getTickLength ( n / n , n ) ;
Distance : 6

29
Tree	int j = n + j . j () - n ;
Code	int j = n + j . j () - n ;
Distance : 8

30
Tree	int j = n == CHAR_CONS - j ;
Code	int j = n == CHAR_CONS - j ;
Distance : 6

31
Tree	int j = n == NUMBER_CONSTANT - j ;
Code	int j = n == NUMBER_CONSTANT - j ;
Distance : 6

32
Tree	int j = n / n - n ;
Code	int j = n / n - n ;
Distance : 5

33
Tree	double j = n & NUMBER_CONSTANT - j ;
Code	double j = n & NUMBER_CONSTANT - j ;
Distance : 7

34
Tree	int j = n - types ( n , n , n ) ;
Code	int j = n - types ( n , n , n ) ;
Distance : 7

35
Tree	boolean j = n & NUMBER_CONSTANT ;
Code	boolean j = n & NUMBER_CONSTANT ;
Distance : 6

36
Tree	int j = getTickLength ( n . IEEEremainder ( CHAR_CONS ) , n . hashCode ( j ) ) ;
Code	int j = getTickLength ( n . IEEEremainder ( CHAR_CONS ) , n . hashCode ( j ) ) ;
Distance : 13

37
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

38
Tree	int j = getTickLength ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getTickLength ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

39
Tree	int j = n - IEEEremainder ( n , n , n ) ;
Code	int j = n - IEEEremainder ( n , n , n ) ;
Distance : 7

40
Tree	int j = findDomainAxisIndex ( n . IEEEremainder ( CHAR_CONS ) , n . getGeneratorUpperBounds ( j ) ) ;
Code	int j = findDomainAxisIndex ( n . IEEEremainder ( CHAR_CONS ) , n . getGeneratorUpperBounds ( j ) ) ;
Distance : 13

41
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

42
Tree	int j = getTickLength ( n , n , n ) / j ;
Code	int j = getTickLength ( n , n , n ) / j ;
Distance : 8

43
Tree	int j = getUnivariateStatistic ( n / n , n ) ;
Code	int j = getUnivariateStatistic ( n / n , n ) ;
Distance : 6

44
Tree	int j = n / n ;
Code	int j = n / n ;
Distance : 6

45
Tree	int j = n + values.length . hashCode () + n - j ;
Code	int j = n + values.length . hashCode () + n - j ;
Distance : 9

46
Tree	int j = ( long ) n * ^ ;
Code	int j = ( long ) n * ^ ;
Distance : 6

47
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

48
Tree	int j = SystemUtils.LINE_SEPARATOR == n - j ;
Code	int j = SystemUtils.LINE_SEPARATOR == n - j ;
Distance : 5

49
Tree	int j = n + n . hashCode ( j , n , n ) + n - j ;
Code	int j = n + n . hashCode ( j , n , n ) + n - j ;
Distance : 13

50
Tree	double j = n / j ;
Code	double j = n / j ;
Distance : 7

51
Tree	int j = n * j . getGeneratorUpperBounds ( n , n , NUMBER_CONSTANT ) - j ;
Code	int j = n * j . getGeneratorUpperBounds ( n , n , NUMBER_CONSTANT ) - j ;
Distance : 9

52
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

53
Tree	int j = getTickLength ( n . toString ( CHAR_CONS ) , n . getGeneratorUpperBounds ( j ) ) ;
Code	int j = getTickLength ( n . toString ( CHAR_CONS ) , n . getGeneratorUpperBounds ( j ) ) ;
Distance : 13

54
Tree	int j = n / j ;
Code	int j = n / j ;
Distance : 6

55
Tree	int j = n . hashCode ( n , n , NUMBER_CONSTANT ) / n ;
Code	int j = n . hashCode ( n , n , NUMBER_CONSTANT ) / n ;
Distance : 8

56
Tree	int j = getTickLength ( n , n ) >= NUMBER_CONSTANT ;
Code	int j = getTickLength ( n , n ) >= NUMBER_CONSTANT ;
Distance : 6

57
Tree	int j = data.length == n - j ;
Code	int j = data.length == n - j ;
Distance : 5

58
Tree	int j = findDomainAxisIndex ( n , n ) >= NUMBER_CONSTANT ;
Code	int j = findDomainAxisIndex ( n , n ) >= NUMBER_CONSTANT ;
Distance : 6

59
Tree	int j = n - n - n ;
Code	int j = n - n - n ;
Distance : 5

60
Tree	int j = getUnivariateStatistic ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getUnivariateStatistic ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

61
Tree	int j = getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

62
Tree	int j = findDomainAxisIndex ( n , n , n ) / j ;
Code	int j = findDomainAxisIndex ( n , n , n ) / j ;
Distance : 8

63
Tree	double j = n == NUMBER_CONSTANT - n ;
Code	double j = n == NUMBER_CONSTANT - n ;
Distance : 7

64
Tree	int j = n . getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

65
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

66
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

67
Tree	int j = n + values.length . getGeneratorUpperBounds () + n - j ;
Code	int j = n + values.length . getGeneratorUpperBounds () + n - j ;
Distance : 9

68
Tree	int j = n / j - j ;
Code	int j = n / j - j ;
Distance : 6

69
Tree	int j = n * n . getGeneratorUpperBounds ( n , n , NUMBER_CONSTANT ) - j ;
Code	int j = n * n . getGeneratorUpperBounds ( n , n , NUMBER_CONSTANT ) - j ;
Distance : 9

70
Tree	int j = n == currentState.length - n ;
Code	int j = n == currentState.length - n ;
Distance : 6

71
Tree	int j = n % NUMBER_CONSTANT - n ;
Code	int j = n % NUMBER_CONSTANT - n ;
Distance : 6

72
Tree	int j = getUnivariateStatistic ( n , n ) >= NUMBER_CONSTANT ;
Code	int j = getUnivariateStatistic ( n , n ) >= NUMBER_CONSTANT ;
Distance : 6

73
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

74
Tree	int j = n . is ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . is ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

75
Tree	double j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - n ;
Code	double j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - n ;
Distance : 10

76
Tree	int j = n n getOwnerFunction ( n , n , n ) ;
Code	int j = n n getOwnerFunction ( n , n , n ) ;
Distance : 7

77
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - j ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - j ;
Distance : 6

78
Tree	int j = n == IncrementalCheckMode.GENERATE_IJS - n ;
Code	int j = n == IncrementalCheckMode.GENERATE_IJS - n ;
Distance : 6

79
Tree	double j = n / n - NUMBER_CONSTANT ;
Code	double j = n / n - NUMBER_CONSTANT ;
Distance : 5

80
Tree	int j = ( long ) currentState.length * currentState.length - n ;
Code	int j = ( long ) currentState.length * currentState.length - n ;
Distance : 8

81
Tree	int j = n + hashCode () + n - j ;
Code	int j = n + hashCode () + n - j ;
Distance : 7

82
Tree	int j = NUMBER_CONSTANT * iChronology.MILLIS_PER_DAY - j ;
Code	int j = NUMBER_CONSTANT * iChronology.MILLIS_PER_DAY - j ;
Distance : 4

83
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 5

84
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

85
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

86
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

87
Tree	int j = n % NUMBER_CONSTANT - j ;
Code	int j = n % NUMBER_CONSTANT - j ;
Distance : 6

88
Tree	double j = n && ( n < < NUMBER_CONSTANT ) ;
Code	double j = n && ( n < < NUMBER_CONSTANT ) ;
Distance : 5

89
Tree	int j = n & NUMBER_CONSTANT - j ;
Code	int j = n & NUMBER_CONSTANT - j ;
Distance : 6

90
Tree	int j = NUMBER_CONSTANT * moment.m2 - j ;
Code	int j = NUMBER_CONSTANT * moment.m2 - j ;
Distance : 4

91
Tree	long j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - n ;
Code	long j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - n ;
Distance : 10

92
Tree	int j = n / n - NUMBER_CONSTANT ;
Code	int j = n / n - NUMBER_CONSTANT ;
Distance : 4

93
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

94
Tree	int j = ( int ) currentState.length * currentState.length - n ;
Code	int j = ( int ) currentState.length * currentState.length - n ;
Distance : 8

95
Tree	int j = n * j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n * j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 9

96
Tree	int j = n & NUMBER_CONSTANT - n ;
Code	int j = n & NUMBER_CONSTANT - n ;
Distance : 6

97
Tree	int j = n * j - j ;
Code	int j = n * j - j ;
Distance : 5

98
Tree	int j = n * j . hashCode ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n * j . hashCode ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 9

99
Tree	int j = findDomainAxisIndex ( n , n , n ) / n ;
Code	int j = findDomainAxisIndex ( n , n , n ) / n ;
Distance : 8

100
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - n ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - n ;
Distance : 6

101
Tree	long j = n == NUMBER_CONSTANT - n ;
Code	long j = n == NUMBER_CONSTANT - n ;
Distance : 7

102
Tree	boolean j = n != NUMBER_CONSTANT ;
Code	boolean j = n != NUMBER_CONSTANT ;
Distance : 6

103
Tree	int j = n = IEEEremainder ( n , n , n ) ;
Code	int j = n = IEEEremainder ( n , n , n ) ;
Distance : 7

104
Tree	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 3

105
Tree	int j = n . getInstance ( n , n , n ) / j ;
Code	int j = n . getInstance ( n , n , n ) / j ;
Distance : 9

106
Tree	int j = n + n . j () - j ;
Code	int j = n + n . j () - j ;
Distance : 8

107
Tree	double j = n != NUMBER_CONSTANT ;
Code	double j = n != NUMBER_CONSTANT ;
Distance : 6

108
Tree	int j = findDomainAxisIndex ( n / n , n ) ;
Code	int j = findDomainAxisIndex ( n / n , n ) ;
Distance : 6

109
Tree	int j = n . IEEEremainder ( n , n , n ) / j ;
Code	int j = n . IEEEremainder ( n , n , n ) / j ;
Distance : 9

110
Tree	int j = NUMBER_CONSTANT * currentState.length - j ;
Code	int j = NUMBER_CONSTANT * currentState.length - j ;
Distance : 4

111
Tree	long j = n != NUMBER_CONSTANT ;
Code	long j = n != NUMBER_CONSTANT ;
Distance : 6

112
Tree	int j = ( long ) n * / ;
Code	int j = ( long ) n * / ;
Distance : 6

113
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

114
Tree	int j = NUMBER_CONSTANT * currentState.length - n ;
Code	int j = NUMBER_CONSTANT * currentState.length - n ;
Distance : 4

115
Tree	long j = n == CHAR_CONS - n ;
Code	long j = n == CHAR_CONS - n ;
Distance : 7

116
Tree	int j = n + hashCode ( Nullability.EXPLICIT , Feature.STRING_CONTINUATION ) + n - j ;
Code	int j = n + hashCode ( Nullability.EXPLICIT , Feature.STRING_CONTINUATION ) + n - j ;
Distance : 10

117
Tree	int j = n + values.length . hashCode () + j - j ;
Code	int j = n + values.length . hashCode () + j - j ;
Distance : 10

118
Tree	int j = n - j - j ;
Code	int j = n - j - j ;
Distance : 6

119
Tree	int j = RandomNameGenerator.FIRST_CHAR + values.length - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR + values.length - n ;
Distance : 6

120
Tree	int j = n + IEEEremainder ( Nullability.EXPLICIT , Feature.STRING_CONTINUATION ) + n - j ;
Code	int j = n + IEEEremainder ( Nullability.EXPLICIT , Feature.STRING_CONTINUATION ) + n - j ;
Distance : 10

121
Tree	int j = n + n . hashCode ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + n . hashCode ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

122
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

123
Tree	int j = n + values.length . hashCode () + n - n ;
Code	int j = n + values.length . hashCode () + n - n ;
Distance : 9

124
Tree	int j = getInstance ( n , n ) >= NUMBER_CONSTANT ;
Code	int j = getInstance ( n , n ) >= NUMBER_CONSTANT ;
Distance : 6

125
Tree	double j = n % NUMBER_CONSTANT - n ;
Code	double j = n % NUMBER_CONSTANT - n ;
Distance : 7

126
Tree	double j = n == CHAR_CONS - n ;
Code	double j = n == CHAR_CONS - n ;
Distance : 7

127
Tree	int j = RandomNameGenerator.FIRST_CHAR + Boolean.FALSE - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR + Boolean.FALSE - n ;
Distance : 6

128
Tree	int j = n ^ n - j ;
Code	int j = n ^ n - j ;
Distance : 5

129
Tree	int j = MathUtils.TWO_PI == n - j ;
Code	int j = MathUtils.TWO_PI == n - j ;
Distance : 5

130
Tree	double j = n * n - NUMBER_CONSTANT ;
Code	double j = n * n - NUMBER_CONSTANT ;
Distance : 4

131
Tree	int j = n - n - j ;
Code	int j = n - n - j ;
Distance : 5

132
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

133
Tree	int j = n + j . j () - j ;
Code	int j = n + j . j () - j ;
Distance : 8

134
Tree	int j = RandomNameGenerator.FIRST_CHAR == n - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR == n - j ;
Distance : 5

135
Tree	int j = n . IEEEremainder ( n , n , NUMBER_CONSTANT ) / n ;
Code	int j = n . IEEEremainder ( n , n , NUMBER_CONSTANT ) / n ;
Distance : 8

136
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

137
Tree	double j = NUMBER_CONSTANT * n - j - j ;
Code	double j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

138
Tree	int j = n . IEEEremainder ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . IEEEremainder ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

139
Tree	int j = n + j . hashCode ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . hashCode ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

140
Tree	int j = getTickLength ( n . IEEEremainder ( CHAR_CONS ) , n . getGeneratorUpperBounds ( j ) ) ;
Code	int j = getTickLength ( n . IEEEremainder ( CHAR_CONS ) , n . getGeneratorUpperBounds ( j ) ) ;
Distance : 13

141
Tree	int j = n . hashCode ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . hashCode ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

142
Tree	int j = n * j - NUMBER_CONSTANT ;
Code	int j = n * j - NUMBER_CONSTANT ;
Distance : 4

143
Tree	int j = n + IEEEremainder ( RandomSource.MT , Feature.STRING_CONTINUATION ) + n - j ;
Code	int j = n + IEEEremainder ( RandomSource.MT , Feature.STRING_CONTINUATION ) + n - j ;
Distance : 10

144
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

145
Tree	int j = n + j - j ;
Code	int j = n + j - j ;
Distance : 6

146
Tree	double j = n % NUMBER_CONSTANT - j ;
Code	double j = n % NUMBER_CONSTANT - j ;
Distance : 7

147
Tree	double j = n / n ;
Code	double j = n / n ;
Distance : 7

148
Tree	int j = n - j - n ;
Code	int j = n - j - n ;
Distance : 6

149
Tree	int j = n . is ( n , n , NUMBER_CONSTANT ) / n ;
Code	int j = n . is ( n , n , NUMBER_CONSTANT ) / n ;
Distance : 8

150
Tree	int j = n + n - j ;
Code	int j = n + n - j ;
Distance : 5

151
Tree	int j = n != NUMBER_CONSTANT ;
Code	int j = n != NUMBER_CONSTANT ;
Distance : 5

152
Tree	int j = n && ( j < < NUMBER_CONSTANT ) ;
Code	int j = n && ( j < < NUMBER_CONSTANT ) ;
Distance : 5

153
Tree	int j = n + n . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Code	int j = n + n . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Distance : 13

154
Tree	int j = getTickLength ( n , n , n ) / n ;
Code	int j = getTickLength ( n , n , n ) / n ;
Distance : 8

155
Tree	int j = n * n - j ;
Code	int j = n * n - j ;
Distance : 4

156
Tree	int j = n + j . hashCode ( j , n , n ) + n - j ;
Code	int j = n + j . hashCode ( j , n , n ) + n - j ;
Distance : 13

157
Tree	int j = n ^ j - j ;
Code	int j = n ^ j - j ;
Distance : 6

158
Tree	int j = n / j - n ;
Code	int j = n / j - n ;
Distance : 6

159
Tree	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - n ;
Code	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - n ;
Distance : 9

160
Tree	int j = n / n - j ;
Code	int j = n / n - j ;
Distance : 5

161
Tree	int j = n + j . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Code	int j = n + j . getGeneratorUpperBounds ( j , n , n ) + n - j ;
Distance : 13

162
Tree	int j = NUMBER_CONSTANT * n - j - n ;
Code	int j = NUMBER_CONSTANT * n - j - n ;
Distance : 4

163
Tree	int j = n - getMaximumItemWidth ( n , n , n ) ;
Code	int j = n - getMaximumItemWidth ( n , n , n ) ;
Distance : 7

164
Tree	long j = n && ( n < < NUMBER_CONSTANT ) ;
Code	long j = n && ( n < < NUMBER_CONSTANT ) ;
Distance : 5

165
Tree	int j = ( int ) n * / ;
Code	int j = ( int ) n * / ;
Distance : 6

166
Tree	int j = n * n - NUMBER_CONSTANT ;
Code	int j = n * n - NUMBER_CONSTANT ;
Distance : 3

167
Tree	int j = n - EIGHTHS ( n , n , n ) ;
Code	int j = n - EIGHTHS ( n , n , n ) ;
Distance : 7

168
Tree	int j = n ^ j - n ;
Code	int j = n ^ j - n ;
Distance : 6

169
Tree	int j = ( long ) currentState.length * currentState.length - j ;
Code	int j = ( long ) currentState.length * currentState.length - j ;
Distance : 8

170
Tree	int j = n + IEEEremainder () + n - j ;
Code	int j = n + IEEEremainder () + n - j ;
Distance : 7

171
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

172
Tree	int j = findDomainAxisIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = findDomainAxisIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

173
Tree	int j = n + n . j () - n ;
Code	int j = n + n . j () - n ;
Distance : 8

174
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 8

175
Tree	int j = n + n - n ;
Code	int j = n + n - n ;
Distance : 5

176
Tree	int j = n n isNaN ( n , n , n ) ;
Code	int j = n n isNaN ( n , n , n ) ;
Distance : 7

177
Tree	int j = n - getSampleSize ( n , n , n ) ;
Code	int j = n - getSampleSize ( n , n , n ) ;
Distance : 7

178
Tree	int j = n + IEEEremainder ( Locale.ENGLISH , Feature.STRING_CONTINUATION ) + n - j ;
Code	int j = n + IEEEremainder ( Locale.ENGLISH , Feature.STRING_CONTINUATION ) + n - j ;
Distance : 10

179
Tree	int j = n == NUMBER_CONSTANT - n ;
Code	int j = n == NUMBER_CONSTANT - n ;
Distance : 6

180
Tree	int j = n = n . IEEEremainder ( n , n , n ) - n ;
Code	int j = n = n . IEEEremainder ( n , n , n ) - n ;
Distance : 11

181
Tree	int j = n + j - n ;
Code	int j = n + j - n ;
Distance : 6

182
Tree	int j = n int n . IEEEremainder ( n , n , NUMBER_CONSTANT ) - j ;
Code	int j = n int n . IEEEremainder ( n , n , NUMBER_CONSTANT ) - j ;
Distance : 10

183
Tree	int j = n = n . IEEEremainder ( n , n , NUMBER_CONSTANT ) - n ;
Code	int j = n = n . IEEEremainder ( n , n , NUMBER_CONSTANT ) - n ;
Distance : 10

184
Tree	int j = n < currentState.length - n ;
Code	int j = n < currentState.length - n ;
Distance : 6

185
Tree	int j = RandomNameGenerator.FIRST_CHAR n j - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR n j - j ;
Distance : 6

186
Tree	int j = n NUMBER_CONSTANT getOwnerFunction ( n , n , n ) - n ;
Code	int j = n NUMBER_CONSTANT getOwnerFunction ( n , n , n ) - n ;
Distance : 8

187
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 5

188
Tree	double j = n / j - NUMBER_CONSTANT ;
Code	double j = n / j - NUMBER_CONSTANT ;
Distance : 6

189
Tree	int j = n int n . IEEEremainder ( j , n , n ) - n ;
Code	int j = n int n . IEEEremainder ( j , n , n ) - n ;
Distance : 11

190
Tree	int j = n = getOwnerFunction ( n , n , n ) - j ;
Code	int j = n = getOwnerFunction ( n , n , n ) - j ;
Distance : 9

191
Tree	int j = NUMBER_CONSTANT * n - j - j ;
Code	int j = NUMBER_CONSTANT * n - j - j ;
Distance : 4

192
Tree	double j = n & NUMBER_CONSTANT - n ;
Code	double j = n & NUMBER_CONSTANT - n ;
Distance : 7

193
Tree	int j = n - n . IEEEremainder ( j , n , n ) - j ;
Code	int j = n - n . IEEEremainder ( j , n , n ) - j ;
Distance : 11

194
Tree	double j = n * j - NUMBER_CONSTANT ;
Code	double j = n * j - NUMBER_CONSTANT ;
Distance : 5

195
Tree	int j = MathUtils.TWO_PI n j - n ;
Code	int j = MathUtils.TWO_PI n j - n ;
Distance : 6

196
Tree	int j = n ^ n - n ;
Code	int j = n ^ n - n ;
Distance : 5

197
Tree	int j = n = n . IEEEremainder ( n , n , n ) - j ;
Code	int j = n = n . IEEEremainder ( n , n , n ) - j ;
Distance : 11

198
Tree	int j = RandomNameGenerator.FIRST_CHAR n j - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n j - n ;
Distance : 6

199
Tree	int j = RandomNameGenerator.FIRST_CHAR - LocalizedFormats.ZERO_NORM - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR - LocalizedFormats.ZERO_NORM - n ;
Distance : 6

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Distance : 13

1
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

2
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 7

3
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 8

4
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

5
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 9

6
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( ( Object [] ) null ) ) . v ) ; }
Distance : 15

7
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Distance : 9

8
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( Any.ANY ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( Any.ANY ) ) ; }
Distance : 6

9
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v , iValues.length , v , Verification.EXPLICIT ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v , iValues.length , v , Verification.EXPLICIT ) , clazz ) ; }
Distance : 15

10
Tree	{ return getCumPct ( ( Comparable <> ) getCumPct ( Locale.US ) ) ; }
Code	{ return getCumPct ( ( Comparable <> ) getCumPct ( Locale.US ) ) ; }
Distance : 7

11
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) ; }
Distance : 13

12
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( Object [] ) null ) ) ; }
Distance : 9

13
Tree	{ return getCumPct ( ( Comparable <> ) getPct ( Locale.US ) ) ; }
Code	{ return getCumPct ( ( Comparable <> ) getPct ( Locale.US ) ) ; }
Distance : 7

14
Tree	{ return Comparable ( false , false ) ; }
Code	{ return Comparable ( false , false ) ; }
Distance : 7

15
Tree	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 9

16
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

17
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

18
Tree	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( v.data ) ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( v.data ) ) ; }
Distance : 6

19
Tree	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

20
Tree	{ return Comparable . getCumPct ( Comparable , Any.ANY , v , Verification.EXPLICIT ) ; }
Code	{ return Comparable . getCumPct ( Comparable , Any.ANY , v , Verification.EXPLICIT ) ; }
Distance : 8

21
Tree	{ return getCumPct ( ( Comparable ) getPct ( v , getCumPct ( STRING_CONSTANT ) ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v , getCumPct ( STRING_CONSTANT ) ) ) ; }
Distance : 10

22
Tree	{ return v . getCumPct () . getCumPct ( this ) ; }
Code	{ return v . getCumPct () . getCumPct ( this ) ; }
Distance : 8

23
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 10

24
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v , getCumPct ( STRING_CONSTANT ) ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v , getCumPct ( STRING_CONSTANT ) ) ) ; }
Distance : 10

25
Tree	{ return Comparable . getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 11

26
Tree	{ return getCumPct ( Comparable , v . getPct ( v , iValues.length , v , Verification.EXPLICIT ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getPct ( v , iValues.length , v , Verification.EXPLICIT ) , clazz ) ; }
Distance : 15

27
Tree	{ return v . getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return v . getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 10

28
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 10

29
Tree	{ return v . getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return v . getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 11

30
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Distance : 13

31
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v , Locale.US , v , Verification.EXPLICIT ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v , Locale.US , v , Verification.EXPLICIT ) , clazz ) ; }
Distance : 15

32
Tree	{ return getCumPct ( ( Comparable <> ) ? ) ; }
Code	{ return getCumPct ( ( Comparable <> ) ? ) ; }
Distance : 4

33
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

34
Tree	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 6

35
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

36
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 7

37
Tree	{ return getCumPct ( ( Comparable < ? extends v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < ? extends v > ) *= ) ; }
Distance : 5

38
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 8

39
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

40
Tree	{ return getCumPct ( Comparable , v . getCumPct () , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , clazz ) ; }
Distance : 9

41
Tree	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Distance : 5

42
Tree	{ return getCumPct ( Comparable , v . getCumPct () , dest.n ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , dest.n ) ; }
Distance : 9

43
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) . v ) ; }
Distance : 16

44
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( null ) ) . v ) ; }
Distance : 10

45
Tree	{ return v . getCumPct ( null ) ; }
Code	{ return v . getCumPct ( null ) ; }
Distance : 8

46
Tree	{ return v . getPct ( null ) ; }
Code	{ return v . getPct ( null ) ; }
Distance : 8

47
Tree	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 4

48
Tree	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( java.util.Locale.US ) ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( java.util.Locale.US ) ) ; }
Distance : 6

49
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

50
Tree	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

51
Tree	{ return getCumPct ( ( Comparable <> ) getPct ( Any.ANY ) ) ; }
Code	{ return getCumPct ( ( Comparable <> ) getPct ( Any.ANY ) ) ; }
Distance : 7

52
Tree	{ return Comparable . getCumPct ( Comparable , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return Comparable . getCumPct ( Comparable , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 8

53
Tree	{ return ( ( Comparable ) v . getCumPct () ) . v . getPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . v . getPct () ; }
Distance : 10

54
Tree	{ return getCumPct ( ( Comparable ) getPct ( Any.ANY ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( Any.ANY ) ) ; }
Distance : 6

55
Tree	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( Locale.US ) ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( Locale.US ) ) ; }
Distance : 6

56
Tree	{ return Comparable . getCumPct () . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct () . getCumPct ( this ) ; }
Distance : 8

57
Tree	{ return getCumPct ( null ) ; }
Code	{ return getCumPct ( null ) ; }
Distance : 7

58
Tree	{ return v . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return v . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 8

59
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( ( Object [] ) null ) ) . v ) ; }
Distance : 14

60
Tree	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 6

61
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 8

62
Tree	{ return getCumPct ( ( ( Comparable ) getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) getPct ( v ) ) . v ) ; }
Distance : 8

63
Tree	{ return getCumPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Distance : 11

64
Tree	{ return getCumPct ( ( Comparable ) FastMath.PI . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) FastMath.PI . getPct ( v ) ) ; }
Distance : 7

65
Tree	{ return Comparable . getCumPct ( Comparable ) . < / > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < / > getCumPct () ; }
Distance : 9

66
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 10

67
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 5

68
Tree	{ return getCumPct ( false , super ) ; }
Code	{ return getCumPct ( false , super ) ; }
Distance : 7

69
Tree	{ return getPct ( ( Comparable ) v . getCumPct () ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct () ) ; }
Distance : 5

70
Tree	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 7

71
Tree	{ return getCumPct ( ( Comparable ) ( ( Comparable ) v ) . getPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) ( ( Comparable ) v ) . getPct () ) ; }
Distance : 9

72
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

73
Tree	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 3

74
Tree	{ return getCumPct ( ( ( Comparable ) getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) getCumPct ( v ) ) . v ) ; }
Distance : 8

75
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

76
Tree	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( Any.ANY ) ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) getPct ( Any.ANY ) ) ; }
Distance : 6

77
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

78
Tree	{ return getCumPct ( ( ( v ) v . getPct ( v , ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( v , ( Object [] ) null ) ) . v ) ; }
Distance : 16

79
Tree	{ return ( ( Comparable ) v . getCumPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . v . getCumPct () ; }
Distance : 10

80
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 8

81
Tree	{ return Comparable . getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return Comparable . getCumPct ( v ) . < v > getCumPct () ; }
Distance : 10

82
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct () ) ; }
Distance : 6

83
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( Object [] ) null ) ) ; }
Distance : 9

84
Tree	{ return getPct ( ( Comparable ) getPct ( ( Object [] ) null ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( ( Object [] ) null ) ) ; }
Distance : 8

85
Tree	{ return getCumPct ( ( Comparable <> ) getCumPct ( Any.ANY ) ) ; }
Code	{ return getCumPct ( ( Comparable <> ) getCumPct ( Any.ANY ) ) ; }
Distance : 7

86
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( ( Object [] ) null ) ) . v ) ; }
Distance : 14

87
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

88
Tree	{ return getCumPct ( super , super ) ; }
Code	{ return getCumPct ( super , super ) ; }
Distance : 7

89
Tree	{ return getCumPct ( ( Comparable ) v . getPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct () ) ; }
Distance : 6

90
Tree	{ return getCumPct ( ( Comparable < ? extends v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < ? extends v > ) / ) ; }
Distance : 5

91
Tree	{ return getPct ( ( Comparable ) v . getPct () ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct () ) ; }
Distance : 5

92
Tree	{ return getCumPct ( false , CHAR_CONS ) ; }
Code	{ return getCumPct ( false , CHAR_CONS ) ; }
Distance : 7

93
Tree	{ return Comparable . getCumPct ( v , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return Comparable . getCumPct ( v , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

94
Tree	{ return getCumPct ( ( v ) this . v . getCumPct () ) ; }
Code	{ return getCumPct ( ( v ) this . v . getCumPct () ) ; }
Distance : 8

95
Tree	{ return getCumPct ( ! , super ) ; }
Code	{ return getCumPct ( ! , super ) ; }
Distance : 7

96
Tree	{ return getCumPct ( Comparable , v . getPct ( v ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getPct ( v ) , clazz ) ; }
Distance : 10

97
Tree	{ return getCumPct ( ( Comparable ) var.scope . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) var.scope . getPct ( v ) ) ; }
Distance : 7

98
Tree	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

99
Tree	{ return Comparable . getCumPct ( null ) ; }
Code	{ return Comparable . getCumPct ( null ) ; }
Distance : 7

100
Tree	{ return Comparable . getCumPct ( Comparable . getCumPct () , super , super ) ; }
Code	{ return Comparable . getCumPct ( Comparable . getCumPct () , super , super ) ; }
Distance : 10

101
Tree	{ return getCumPct ( ( Comparable < ? extends v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < ? extends v > ) <= ) ; }
Distance : 5

102
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 6

103
Tree	{ return getCumPct ( ( ( v ) v . getPct ( null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( null ) ) . v ) ; }
Distance : 11

104
Tree	{ return getCumPct ( ( ( v ) getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) getCumPct ( v ) ) . v ) ; }
Distance : 9

105
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v ) , clazz ) ; }
Distance : 10

106
Tree	{ return v . getCumPct ( Comparable , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return v . getCumPct ( Comparable , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 8

107
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( T [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( T [] ) null ) ) ; }
Distance : 9

108
Tree	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 4

109
Tree	{ return getCumPct ( ( Comparable ) FastMath.PI . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) FastMath.PI . getCumPct ( v ) ) ; }
Distance : 7

110
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

111
Tree	{ return v ( ! , false ) ; }
Code	{ return v ( ! , false ) ; }
Distance : 7

112
Tree	{ return Comparable . getCumPct ( v . getCumPct () , super , super ) ; }
Code	{ return Comparable . getCumPct ( v . getCumPct () , super , super ) ; }
Distance : 11

113
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 9

114
Tree	{ return Comparable . getCumPct ( Comparable . getCumPct () ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable . getCumPct () ) . < ? > getCumPct () ; }
Distance : 12

115
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v . getCumPct () , v , v , v ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v . getCumPct () , v , v , v ) , clazz ) ; }
Distance : 18

116
Tree	{ return getPct ( null ) ; }
Code	{ return getPct ( null ) ; }
Distance : 6

117
Tree	{ return ( ( Comparable ) v . getPct () ) . v . getPct () ; }
Code	{ return ( ( Comparable ) v . getPct () ) . v . getPct () ; }
Distance : 10

118
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

119
Tree	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 5

120
Tree	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 8

121
Tree	{ return getCumPct ( Comparable , v . getPct ( v . getCumPct () , v , v , v ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getPct ( v . getCumPct () , v , v , v ) , clazz ) ; }
Distance : 18

122
Tree	{ return getCumPct ( return; ) ; }
Code	{ return getCumPct ( return; ) ; }
Distance : 7

123
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v . getPct () , v , v , v ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v . getPct () , v , v , v ) , clazz ) ; }
Distance : 18

124
Tree	{ return Comparable . getPct ( null ) ; }
Code	{ return Comparable . getPct ( null ) ; }
Distance : 7

125
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v ) , System.out ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v ) , System.out ) ; }
Distance : 10

126
Tree	{ return getCumPct ( ( Comparable < ? extends v > ) private ) ; }
Code	{ return getCumPct ( ( Comparable < ? extends v > ) private ) ; }
Distance : 5

127
Tree	{ return getCumPct ( ( Comparable ) this . v . getPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) this . v . getPct () ) ; }
Distance : 7

128
Tree	{ return Comparable . getCumPct ( v . getCumPct () ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( v . getCumPct () ) . < ? > getCumPct () ; }
Distance : 13

129
Tree	{ return getCumPct ( Comparable , v . getCumPct ( v . getCumPct () , v , v , v ) , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct ( v . getCumPct () , v , v , v ) , getCumPct ) ; }
Distance : 18

130
Tree	{ return getCumPct ( Comparable , v . getPct ( v , Locale.US , v , Verification.EXPLICIT ) , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getPct ( v , Locale.US , v , Verification.EXPLICIT ) , clazz ) ; }
Distance : 15

131
Tree	{ return getPct ( ( ( v ) v ) . v ) ; }
Code	{ return getPct ( ( ( v ) v ) . v ) ; }
Distance : 5

132
Tree	{ return getCumPct ( v , v . getCumPct ( v ) , clazz ) ; }
Code	{ return getCumPct ( v , v . getCumPct ( v ) , clazz ) ; }
Distance : 10

133
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) . v ) ; }
Distance : 16

134
Tree	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 8

135
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( null ) ) . v ) ; }
Distance : 10

136
Tree	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 4

137
Tree	{ return getCumPct ( ( Comparable < ? super v > ) private ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) private ) ; }
Distance : 5

138
Tree	{ return getCumPct ( ( Comparable ) ( ( Comparable ) v ) . getCumPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) ( ( Comparable ) v ) . getCumPct () ) ; }
Distance : 9

139
Tree	{ return v . getCumPct ( Comparable . getCumPct () ) . < ? > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable . getCumPct () ) . < ? > getCumPct () ; }
Distance : 12

140
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 7

141
Tree	{ return getCumPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

142
Tree	{ return getCumPct ( ( Comparable ) ( ( v ) v ) . getCumPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) ( ( v ) v ) . getCumPct () ) ; }
Distance : 9

143
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

144
Tree	{ return getCumPct ( Comparable , v . getCumPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

145
Tree	{ return getCumPct ( ( Comparable ) var.scope . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) var.scope . getCumPct ( v ) ) ; }
Distance : 7

146
Tree	{ return Comparable . getCumPct ( Comparable . getCumPct () , CHAR_CONS , super ) ; }
Code	{ return Comparable . getCumPct ( Comparable . getCumPct () , CHAR_CONS , super ) ; }
Distance : 10

147
Tree	{ return Comparable . getCumPct ( Comparable . getCumPct () ) . < <= > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable . getCumPct () ) . < <= > getCumPct () ; }
Distance : 12

148
Tree	{ return getCumPct ( ( Comparable ) getPct ( STRING_CONSTANT ) . getPct ( ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( STRING_CONSTANT ) . getPct ( ( Object [] ) null ) ) ; }
Distance : 14

149
Tree	{ return getCumPct ( ( Comparable ) getPct ( STRING_CONSTANT ) . getCumPct ( ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( STRING_CONSTANT ) . getCumPct ( ( Object [] ) null ) ) ; }
Distance : 14

150
Tree	{ return ( ( Comparable ) v . getPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getPct () ) . v . getCumPct () ; }
Distance : 10

151
Tree	{ return getCumPct ( ( ( v ) v . getPct ( ( Object [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( ( Object [] ) null ) ) . v ) ; }
Distance : 14

152
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( null ) ) . v ) ; }
Distance : 11

153
Tree	{ return Comparable . getCumPct ( Comparable ) . < & > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < & > getCumPct () ; }
Distance : 9

154
Tree	{ return Comparable . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 8

155
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( STRING_CONSTANT ) . getPct ( ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( STRING_CONSTANT ) . getPct ( ( Object [] ) null ) ) ; }
Distance : 14

156
Tree	{ return Comparable . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Distance : 9

157
Tree	{ return v . getCumPct ( Comparable . getCumPct () , super , super ) ; }
Code	{ return v . getCumPct ( Comparable . getCumPct () , super , super ) ; }
Distance : 10

158
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( STRING_CONSTANT ) . getCumPct ( ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( STRING_CONSTANT ) . getCumPct ( ( Object [] ) null ) ) ; }
Distance : 14

159
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Distance : 13

160
Tree	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

161
Tree	{ return getCumPct ( Comparable , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

162
Tree	{ return Comparable ( ! , false ) ; }
Code	{ return Comparable ( ! , false ) ; }
Distance : 7

163
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

164
Tree	{ return getCumPct () . getPct ( this ) ; }
Code	{ return getCumPct () . getPct ( this ) ; }
Distance : 8

165
Tree	{ return getCumPct ( ( Comparable ) getPct ( Locale.US ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( Locale.US ) ) ; }
Distance : 6

166
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

167
Tree	{ return getCumPct ( ( Comparable ) ( ( v ) v ) . getPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) ( ( v ) v ) . getPct () ) ; }
Distance : 9

168
Tree	{ return getCumPct ( ( ( v ) getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) getPct ( v ) ) . v ) ; }
Distance : 9

169
Tree	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getPct () , clazz ) ; }
Code	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getPct () , clazz ) ; }
Distance : 14

170
Tree	{ return Comparable . getCumPct () . getPct ( this ) ; }
Code	{ return Comparable . getCumPct () . getPct ( this ) ; }
Distance : 8

171
Tree	{ return getCumPct ( ( Comparable ) getPct ( v , getPct ( STRING_CONSTANT ) ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v , getPct ( STRING_CONSTANT ) ) ) ; }
Distance : 10

172
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

173
Tree	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

174
Tree	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

175
Tree	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 3

176
Tree	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getPct () , dest.n ) ; }
Code	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getPct () , dest.n ) ; }
Distance : 14

177
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Distance : 11

178
Tree	{ return v . getCumPct () . getPct ( this ) ; }
Code	{ return v . getCumPct () . getPct ( this ) ; }
Distance : 8

179
Tree	{ return getCumPct ( ( Comparable <> ) <= ) ; }
Code	{ return getCumPct ( ( Comparable <> ) <= ) ; }
Distance : 4

180
Tree	{ return getCumPct () . getCumPct ( this ) ; }
Code	{ return getCumPct () . getCumPct ( this ) ; }
Distance : 8

181
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) . v ) ; }
Distance : 16

182
Tree	{ return v ( false , false ) ; }
Code	{ return v ( false , false ) ; }
Distance : 7

183
Tree	{ return Comparable . getCumPct ( v ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( v ) . getPct ( this ) ; }
Distance : 9

184
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v , getPct ( STRING_CONSTANT ) ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v , getPct ( STRING_CONSTANT ) ) ) ; }
Distance : 10

185
Tree	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getCumPct () , clazz ) ; }
Code	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getCumPct () , clazz ) ; }
Distance : 14

186
Tree	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

187
Tree	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Distance : 5

188
Tree	{ return getCumPct ( ( Comparable ) this . v . getCumPct () ) ; }
Code	{ return getCumPct ( ( Comparable ) this . v . getCumPct () ) ; }
Distance : 7

189
Tree	{ return getCumPct ( super(); ) ; }
Code	{ return getCumPct ( super(); ) ; }
Distance : 7

190
Tree	{ return getPct () . getCumPct ( this ) ; }
Code	{ return getPct () . getCumPct ( this ) ; }
Distance : 7

191
Tree	{ return getPct () . getPct ( this ) ; }
Code	{ return getPct () . getPct ( this ) ; }
Distance : 7

192
Tree	{ return getPct ( ( Comparable ) this . v . getCumPct () ) ; }
Code	{ return getPct ( ( Comparable ) this . v . getCumPct () ) ; }
Distance : 6

193
Tree	{ return getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct ( v ) . < v > getCumPct () ; }
Distance : 8

194
Tree	{ return getCumPct ( ( Comparable <> ) / ) ; }
Code	{ return getCumPct ( ( Comparable <> ) / ) ; }
Distance : 4

195
Tree	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 5

196
Tree	{ return getCumPct ( ( Comparable <> ) {} ) ; }
Code	{ return getCumPct ( ( Comparable <> ) {} ) ; }
Distance : 4

197
Tree	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getPct () , JUnitRule.Strictness.WARN ) ; }
Code	{ return getCumPct ( Comparable , ( ( Comparable ) v . getPct () ) . getPct () , JUnitRule.Strictness.WARN ) ; }
Distance : 14

198
Tree	{ return getCumPct ( v ) . < v > getPct () ; }
Code	{ return getCumPct ( v ) . < v > getPct () ; }
Distance : 8

199
Tree	{ return getCumPct ( ( Comparable ) getPct ( TimeZones.GMT_ID ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( TimeZones.GMT_ID ) ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return solve ( min , null , min ) ; }
Code	{ return solve ( min , null , min ) ; }
Distance : 3

1
Tree	{ return solve ( ( f ) max , max ) ; }
Code	{ return solve ( ( f ) max , max ) ; }
Distance : 3

2
Tree	{ return solve ( min , max , min , null ) ; }
Code	{ return solve ( min , max , min , null ) ; }
Distance : 4

3
Tree	{ return f ( min , max , max ) ; }
Code	{ return f ( min , max , max ) ; }
Distance : 3

4
Tree	{ return solve () . solve ( solve ( min ) ) ; }
Code	{ return solve () . solve ( solve ( min ) ) ; }
Distance : 7

5
Tree	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Distance : 4

6
Tree	{ return solve ( max , max , max ) ; }
Code	{ return solve ( max , max , max ) ; }
Distance : 2

7
Tree	{ return solve ( min , min , max , null ) ; }
Code	{ return solve ( min , min , max , null ) ; }
Distance : 3

8
Tree	{ return f . solve ( min , null , max , null ) ; }
Code	{ return f . solve ( min , null , max , null ) ; }
Distance : 6

9
Tree	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Distance : 3

10
Tree	{ return x.length . solve ( min ) ; }
Code	{ return x.length . solve ( min ) ; }
Distance : 6

11
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

12
Tree	{ return f . solve ( f , null , max ) ; }
Code	{ return f . solve ( f , null , max ) ; }
Distance : 3

13
Tree	{ return solve ( ( min ) max , max ) ; }
Code	{ return solve ( ( min ) max , max ) ; }
Distance : 4

14
Tree	{ return solve ( this , min ) ; }
Code	{ return solve ( this , min ) ; }
Distance : 3

15
Tree	{ return try . solve ( this ) ; }
Code	{ return try . solve ( this ) ; }
Distance : 7

16
Tree	{ return this . max . solve ( min ) ; }
Code	{ return this . max . solve ( min ) ; }
Distance : 7

17
Tree	{ return f . solve ( null , min , max , null ) ; }
Code	{ return f . solve ( null , min , max , null ) ; }
Distance : 5

18
Tree	{ return solve ( min , max < PropertyCollapseLevel.NONE ) ; }
Code	{ return solve ( min , max < PropertyCollapseLevel.NONE ) ; }
Distance : 4

19
Tree	{ return min . solve ( min , null , max , null ) ; }
Code	{ return min . solve ( min , null , max , null ) ; }
Distance : 6

20
Tree	{ return solve ( f , null , max ) ; }
Code	{ return solve ( f , null , max ) ; }
Distance : 1

21
Tree	{ return f . solve () . solve ( min , max ) ; }
Code	{ return f . solve () . solve ( min , max ) ; }
Distance : 6

22
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

23
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

24
Tree	{ return solve ( ( min ) max , min ) ; }
Code	{ return solve ( ( min ) max , min ) ; }
Distance : 5

25
Tree	{ return solve ( min , max < rhs.b ) ; }
Code	{ return solve ( min , max < rhs.b ) ; }
Distance : 4

26
Tree	{ return f . solve ( solve () , max == Locale.US ) ; }
Code	{ return f . solve ( solve () , max == Locale.US ) ; }
Distance : 7

27
Tree	{ return solve ( min , max < IncrementalCheckMode.GENERATE_IJS ) ; }
Code	{ return solve ( min , max < IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 4

28
Tree	{ return solve ( min , max < FunctionFlavor.NORMAL ) ; }
Code	{ return solve ( min , max < FunctionFlavor.NORMAL ) ; }
Distance : 4

29
Tree	{ return solve ( min , max == null max [] ) ; }
Code	{ return solve ( min , max == null max [] ) ; }
Distance : 5

30
Tree	{ return min . solve ( null , max , max , null ) ; }
Code	{ return min . solve ( null , max , max , null ) ; }
Distance : 6

31
Tree	{ return solve ( min . solve ( f ) , max ) ; }
Code	{ return solve ( min . solve ( f ) , max ) ; }
Distance : 6

32
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

33
Tree	{ return solve ( max , null ) ; }
Code	{ return solve ( max , null ) ; }
Distance : 4

34
Tree	{ return solve ( max . solve ( min ) ) ; }
Code	{ return solve ( max . solve ( min ) ) ; }
Distance : 6

35
Tree	{ return solve ( f , null ) ; }
Code	{ return solve ( f , null ) ; }
Distance : 3

36
Tree	{ return ebeDivide . solve ( min ) ; }
Code	{ return ebeDivide . solve ( min ) ; }
Distance : 6

37
Tree	{ return f . solve ( this , min , max ) ; }
Code	{ return f . solve ( this , min , max ) ; }
Distance : 3

38
Tree	{ return solve ( solve () , min . solve ( min ) ) ; }
Code	{ return solve ( solve () , min . solve ( min ) ) ; }
Distance : 7

39
Tree	{ return solve ( this , max ) ; }
Code	{ return solve ( this , max ) ; }
Distance : 3

40
Tree	{ return solver . solve ( min ) ; }
Code	{ return solver . solve ( min ) ; }
Distance : 6

41
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

42
Tree	{ return this . f . solve ( min ) ; }
Code	{ return this . f . solve ( min ) ; }
Distance : 6

43
Tree	{ return solve ( min == null max ! solve () , max ) ; }
Code	{ return solve ( min == null max ! solve () , max ) ; }
Distance : 7

44
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

45
Tree	{ return ( ( min ) this ) . solve ( f , max ) ; }
Code	{ return ( ( min ) this ) . solve ( f , max ) ; }
Distance : 9

46
Tree	{ return solve ( min == null max ! solve () , min ) ; }
Code	{ return solve ( min == null max ! solve () , min ) ; }
Distance : 8

47
Tree	{ return solve ( min , super(); ) ; }
Code	{ return solve ( min , super(); ) ; }
Distance : 3

48
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

49
Tree	{ return solve ( min , max , min ) ; }
Code	{ return solve ( min , max , min ) ; }
Distance : 3

50
Tree	{ return solve ( f , max , false ) ; }
Code	{ return solve ( f , max , false ) ; }
Distance : 2

51
Tree	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Distance : 3

52
Tree	{ return f . solve ( min , getUnitMillis ) ; }
Code	{ return f . solve ( min , getUnitMillis ) ; }
Distance : 5

53
Tree	{ return f . solve ( solve () , max == PropertyCollapseLevel.NONE ) ; }
Code	{ return f . solve ( solve () , max == PropertyCollapseLevel.NONE ) ; }
Distance : 7

54
Tree	{ return solve ( min , max == null max += ) ; }
Code	{ return solve ( min , max == null max += ) ; }
Distance : 5

55
Tree	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Distance : 2

56
Tree	{ return solve ( max , max , false ) ; }
Code	{ return solve ( max , max , false ) ; }
Distance : 3

57
Tree	{ return solve ( min , max == null max >= ) ; }
Code	{ return solve ( min , max == null max >= ) ; }
Distance : 5

58
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

59
Tree	{ return solve ( max , max , null ) ; }
Code	{ return solve ( max , max , null ) ; }
Distance : 3

60
Tree	{ return solve ( f , max , null ) ; }
Code	{ return solve ( f , max , null ) ; }
Distance : 2

61
Tree	{ return solve ( f . solve () , max ) ; }
Code	{ return solve ( f . solve () , max ) ; }
Distance : 3

62
Tree	{ return f . solve ( this , min , min ) ; }
Code	{ return f . solve ( this , min , min ) ; }
Distance : 4

63
Tree	{ return f . solve ( null , max , max , null ) ; }
Code	{ return f . solve ( null , max , max , null ) ; }
Distance : 6

64
Tree	{ return solve ( min , max , max , false ) ; }
Code	{ return solve ( min , max , max , false ) ; }
Distance : 4

65
Tree	{ return f ( min , min ) ; }
Code	{ return f ( min , min ) ; }
Distance : 4

66
Tree	{ return solve . solve ( min , max ) ; }
Code	{ return solve . solve ( min , max ) ; }
Distance : 3

67
Tree	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Distance : 3

68
Tree	{ return solve ( ( min ) min , max ) ; }
Code	{ return solve ( ( min ) min , max ) ; }
Distance : 3

69
Tree	{ return solve () . solve ( solve ( f ) ) ; }
Code	{ return solve () . solve ( solve ( f ) ) ; }
Distance : 8

70
Tree	{ return f . solve ( null , max , min , null ) ; }
Code	{ return f . solve ( null , max , min , null ) ; }
Distance : 6

71
Tree	{ return solve ( max , null , max ) ; }
Code	{ return solve ( max , null , max ) ; }
Distance : 2

72
Tree	{ return f . solve () . solve ( min , max , max ) ; }
Code	{ return f . solve () . solve ( min , max , max ) ; }
Distance : 7

73
Tree	{ return f ( min , max , min ) ; }
Code	{ return f ( min , max , min ) ; }
Distance : 4

74
Tree	{ return solve ( max . solve () , max ) ; }
Code	{ return solve ( max . solve () , max ) ; }
Distance : 4

75
Tree	{ return solve ( min , min , null ) ; }
Code	{ return solve ( min , min , null ) ; }
Distance : 2

76
Tree	{ return f . solve () . solve ( f ) ; }
Code	{ return f . solve () . solve ( f ) ; }
Distance : 8

77
Tree	{ return f . solve ( solve () , max == IncrementalCheckMode.GENERATE_IJS ) ; }
Code	{ return f . solve ( solve () , max == IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 7

78
Tree	{ return f . solve ( min , max , max ) ; }
Code	{ return f . solve ( min , max , max ) ; }
Distance : 4

79
Tree	{ return solve ( min , max , null ) ; }
Code	{ return solve ( min , max , null ) ; }
Distance : 3

80
Tree	{ return solve . solve ( min , max , max ) ; }
Code	{ return solve . solve ( min , max , max ) ; }
Distance : 4

81
Tree	{ return solve () . solve ( solve ( max ) ) ; }
Code	{ return solve () . solve ( solve ( max ) ) ; }
Distance : 7

82
Tree	{ return solve ( min . solve ( f ) , max , max ) ; }
Code	{ return solve ( min . solve ( f ) , max , max ) ; }
Distance : 6

83
Tree	{ return f . solve ( f ) ; }
Code	{ return f . solve ( f ) ; }
Distance : 6

84
Tree	{ return ( ( min ) this ) . solve ( min , max ) ; }
Code	{ return ( ( min ) this ) . solve ( min , max ) ; }
Distance : 8

85
Tree	{ return solve ( min . solve ( min ) , max , min ) ; }
Code	{ return solve ( min . solve ( min ) , max , min ) ; }
Distance : 7

86
Tree	{ return solve ( this == max , max ) ; }
Code	{ return solve ( this == max , max ) ; }
Distance : 3

87
Tree	{ return solve ( max , max , max , null ) ; }
Code	{ return solve ( max , max , max , null ) ; }
Distance : 4

88
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / currentState.length ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / currentState.length ) ; }
Distance : 7

89
Tree	{ return solve ( min , min , max ) ; }
Code	{ return solve ( min , min , max ) ; }
Distance : 1

90
Tree	{ return min . solve ( min , max ) ; }
Code	{ return min . solve ( min , max ) ; }
Distance : 4

91
Tree	{ return solve ( solve () , solve ( min ) ) ; }
Code	{ return solve ( solve () , solve ( min ) ) ; }
Distance : 6

92
Tree	{ return solve ( f == null max ! solve () , max ) ; }
Code	{ return solve ( f == null max ! solve () , max ) ; }
Distance : 6

93
Tree	{ return f . solve ( min , min ) ; }
Code	{ return f . solve ( min , min ) ; }
Distance : 5

94
Tree	{ return solve ( min , min , false ) ; }
Code	{ return solve ( min , min , false ) ; }
Distance : 2

95
Tree	{ return f . solve ( min , null , max ) ; }
Code	{ return f . solve ( min , null , max ) ; }
Distance : 4

96
Tree	{ return solve . solve ( min , min ) ; }
Code	{ return solve . solve ( min , min ) ; }
Distance : 4

97
Tree	{ return f . solve ( this , max ) ; }
Code	{ return f . solve ( this , max ) ; }
Distance : 5

98
Tree	{ return solve ( max . solve () ) ; }
Code	{ return solve ( max . solve () ) ; }
Distance : 5

99
Tree	{ return solve ( min . solve ( max ) , max , max ) ; }
Code	{ return solve ( min . solve ( max ) , max , max ) ; }
Distance : 7

100
Tree	{ return solve ( min . solve () , max ) ; }
Code	{ return solve ( min . solve () , max ) ; }
Distance : 4

101
Tree	{ return solve ( solve () , max . solve ( min ) ) ; }
Code	{ return solve ( solve () , max . solve ( min ) ) ; }
Distance : 8

102
Tree	{ return f . solve () . solve ( min ) ; }
Code	{ return f . solve () . solve ( min ) ; }
Distance : 8

103
Tree	{ return f . solve ( this , f ) ; }
Code	{ return f . solve ( this , f ) ; }
Distance : 6

104
Tree	{ return f . solve ( min , max , null ) ; }
Code	{ return f . solve ( min , max , null ) ; }
Distance : 5

105
Tree	{ return solve ( solve ( max , max ) ) ; }
Code	{ return solve ( solve ( max , max ) ) ; }
Distance : 4

106
Tree	{ return solve ( max == null max ! solve () , max ) ; }
Code	{ return solve ( max == null max ! solve () , max ) ; }
Distance : 7

107
Tree	{ return f . solve ( solve () , max == Verification.EXPLICIT ) ; }
Code	{ return f . solve ( solve () , max == Verification.EXPLICIT ) ; }
Distance : 7

108
Tree	{ return solve ( min , max , min , false ) ; }
Code	{ return solve ( min , max , min , false ) ; }
Distance : 4

109
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

110
Tree	{ return f . solve ( min . solve () , min ) ; }
Code	{ return f . solve ( min . solve () , min ) ; }
Distance : 7

111
Tree	{ return f . solve ( min , returnValues ) ; }
Code	{ return f . solve ( min , returnValues ) ; }
Distance : 5

112
Tree	{ return solve ( solve ( min , max ) ) ; }
Code	{ return solve ( solve ( min , max ) ) ; }
Distance : 3

113
Tree	{ return solve ( this == min , max ) ; }
Code	{ return solve ( this == min , max ) ; }
Distance : 2

114
Tree	{ return solve ( max , max , max , false ) ; }
Code	{ return solve ( max , max , max , false ) ; }
Distance : 4

115
Tree	{ return f . solve ( f , max ) ; }
Code	{ return f . solve ( f , max ) ; }
Distance : 4

116
Tree	{ return f . solve ( min , null , min , null ) ; }
Code	{ return f . solve ( min , null , min , null ) ; }
Distance : 6

117
Tree	{ return f . solve ( min , min , null ) ; }
Code	{ return f . solve ( min , min , null ) ; }
Distance : 4

118
Tree	{ return f ( f , max ) ; }
Code	{ return f ( f , max ) ; }
Distance : 3

119
Tree	{ return f . solve ( max ) ; }
Code	{ return f . solve ( max ) ; }
Distance : 5

120
Tree	{ return min . solve ( min , max , null ) ; }
Code	{ return min . solve ( min , max , null ) ; }
Distance : 5

121
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / PropertyCollapseLevel.NONE ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / PropertyCollapseLevel.NONE ) ; }
Distance : 7

122
Tree	{ return this . f . solve ( f ) ; }
Code	{ return this . f . solve ( f ) ; }
Distance : 6

123
Tree	{ return solve ( min , max , max , null ) ; }
Code	{ return solve ( min , max , max , null ) ; }
Distance : 4

124
Tree	{ return solve ( this == max , min ) ; }
Code	{ return solve ( this == max , min ) ; }
Distance : 4

125
Tree	{ return solve ( min . solve () ) ; }
Code	{ return solve ( min . solve () ) ; }
Distance : 5

126
Tree	{ return f . solve ( f , max , null ) ; }
Code	{ return f . solve ( f , max , null ) ; }
Distance : 4

127
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Distance : 3

128
Tree	{ return solve ( min . solve ( min ) , max ) ; }
Code	{ return solve ( min . solve ( min ) , max ) ; }
Distance : 5

129
Tree	{ return f . solve ( min , null , min ) ; }
Code	{ return f . solve ( min , null , min ) ; }
Distance : 5

130
Tree	{ return f . solve ( min . solve () , max ) ; }
Code	{ return f . solve ( min . solve () , max ) ; }
Distance : 6

131
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

132
Tree	{ return f . solve () . solve ( min , max , min ) ; }
Code	{ return f . solve () . solve ( min , max , min ) ; }
Distance : 8

133
Tree	{ return f ( min , max ) ; }
Code	{ return f ( min , max ) ; }
Distance : 3

134
Tree	{ return f ( min , min , max ) ; }
Code	{ return f ( min , min , max ) ; }
Distance : 2

135
Tree	{ return solve () . solve ( solve () ) ; }
Code	{ return solve () . solve ( solve () ) ; }
Distance : 6

136
Tree	{ return solve ( min , null , max ) ; }
Code	{ return solve ( min , null , max ) ; }
Distance : 2

137
Tree	{ return super . solve ( this ) ; }
Code	{ return super . solve ( this ) ; }
Distance : 7

138
Tree	{ return solve ( min . solve ( f ) ) ; }
Code	{ return solve ( min . solve ( f ) ) ; }
Distance : 6

139
Tree	{ return f . solve () . solve ( min , min ) ; }
Code	{ return f . solve () . solve ( min , min ) ; }
Distance : 7

140
Tree	{ return ebeDivide . solve ( min , max ) ; }
Code	{ return ebeDivide . solve ( min , max ) ; }
Distance : 4

141
Tree	{ return this . min . solve ( min ) ; }
Code	{ return this . min . solve ( min ) ; }
Distance : 7

142
Tree	{ return solve . solve ( min ) ; }
Code	{ return solve . solve ( min ) ; }
Distance : 5

143
Tree	{ return f . solve () . solve ( f , max ) ; }
Code	{ return f . solve () . solve ( f , max ) ; }
Distance : 7

144
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

145
Tree	{ return solve ( min . solve ( max ) , max ) ; }
Code	{ return solve ( min . solve ( max ) , max ) ; }
Distance : 6

146
Tree	{ return f . solve ( min , min , max ) ; }
Code	{ return f . solve ( min , min , max ) ; }
Distance : 3

147
Tree	{ return f . solve ( this , f , max ) ; }
Code	{ return f . solve ( this , f , max ) ; }
Distance : 4

148
Tree	{ return solve ( this , f ) ; }
Code	{ return solve ( this , f ) ; }
Distance : 4

149
Tree	{ return f . solve ( this , max , max ) ; }
Code	{ return f . solve ( this , max , max ) ; }
Distance : 4

150
Tree	{ return CHAR_CONS . solve ( this ) ; }
Code	{ return CHAR_CONS . solve ( this ) ; }
Distance : 7

151
Tree	{ return final . solve ( this ) ; }
Code	{ return final . solve ( this ) ; }
Distance : 7

152
Tree	{ return solve ( min . solve ( min ) ) ; }
Code	{ return solve ( min . solve ( min ) ) ; }
Distance : 6

153
Tree	{ return f . solve ( f . solve () , max ) ; }
Code	{ return f . solve ( f . solve () , max ) ; }
Distance : 5

154
Tree	{ return f . solve ( min , max , min ) ; }
Code	{ return f . solve ( min , max , min ) ; }
Distance : 5

155
Tree	{ return f ( f , max , max ) ; }
Code	{ return f ( f , max , max ) ; }
Distance : 2

156
Tree	{ return solve ( solve () , max . solve ( f ) ) ; }
Code	{ return solve ( solve () , max . solve ( f ) ) ; }
Distance : 8

157
Tree	{ return solve ( solve ( f , max ) ) ; }
Code	{ return solve ( solve ( f , max ) ) ; }
Distance : 4

158
Tree	{ return ( ( f ) this ) . solve ( min , max ) ; }
Code	{ return ( ( f ) this ) . solve ( min , max ) ; }
Distance : 7

159
Tree	{ return f . solve ( f , null , max , null ) ; }
Code	{ return f . solve ( f , null , max , null ) ; }
Distance : 5

160
Tree	{ return min . solve () . solve ( min ) ; }
Code	{ return min . solve () . solve ( min ) ; }
Distance : 8

161
Tree	{ return solve ( min . solve ( min ) , max , max ) ; }
Code	{ return solve ( min . solve ( min ) , max , max ) ; }
Distance : 7

162
Tree	{ return min . solve () . solve ( min , max ) ; }
Code	{ return min . solve () . solve ( min , max ) ; }
Distance : 6

163
Tree	{ return solve ( min . solve () , min ) ; }
Code	{ return solve ( min . solve () , min ) ; }
Distance : 5

164
Tree	{ return solve ( min . solve ( max ) ) ; }
Code	{ return solve ( min . solve ( max ) ) ; }
Distance : 5

165
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / TernaryValue.UNKNOWN ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / TernaryValue.UNKNOWN ) ; }
Distance : 7

166
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / Locale.ENGLISH ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / Locale.ENGLISH ) ; }
Distance : 7

167
Tree	{ return solve ( solve () , solve ( max ) ) ; }
Code	{ return solve ( solve () , solve ( max ) ) ; }
Distance : 5

168
Tree	{ return solve ( min . solve ( min ) , min ) ; }
Code	{ return solve ( min . solve ( min ) , min ) ; }
Distance : 6

169
Tree	{ return solve () . solve ( solve () ) ; } class
Code	{ return solve () . solve ( solve () ) ; } class
Distance : 7

170
Tree	{ return solve () . solve ( solve () ) ; } array
Code	{ return solve () . solve ( solve () ) ; } array
Distance : 7

171
Tree	{ return solve ( f . solve () ) ; }
Code	{ return solve ( f . solve () ) ; }
Distance : 4

172
Tree	{ return min . solve ( min . solve () , max ) ; }
Code	{ return min . solve ( min . solve () , max ) ; }
Distance : 6

173
Tree	{ return solve ( solve () , max . solve ( max ) ) ; }
Code	{ return solve ( solve () , max . solve ( max ) ) ; }
Distance : 7

174
Tree	{ return solve () . solve ( solve () ) ; } notifyListeners
Code	{ return solve () . solve ( solve () ) ; } notifyListeners
Distance : 7

175
Tree	{ return solve ( this , min ) ; } Class
Code	{ return solve ( this , min ) ; } Class
Distance : 4

176
Tree	{ return x.length . solve ( min , max , max ) ; }
Code	{ return x.length . solve ( min , max , max ) ; }
Distance : 4

177
Tree	{ return solve ( min , min , max , false ) ; }
Code	{ return solve ( min , min , max , false ) ; }
Distance : 3

178
Tree	{ return solve . solve ( min , max , min ) ; }
Code	{ return solve . solve ( min , max , min ) ; }
Distance : 5

179
Tree	{ return solve . solve ( min , min , max ) ; }
Code	{ return solve . solve ( min , min , max ) ; }
Distance : 3

180
Tree	{ return f . solve ( this , min ) ; }
Code	{ return f . solve ( this , min ) ; }
Distance : 5

181
Tree	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Distance : 4

182
Tree	{ return solve ( min , max , false ) ; }
Code	{ return solve ( min , max , false ) ; }
Distance : 3

183
Tree	{ return solve ( min . solve () ) ; } Class
Code	{ return solve ( min . solve () ) ; } Class
Distance : 6

184
Tree	{ return ( ( min ) this ) . solve ( min , min ) ; }
Code	{ return ( ( min ) this ) . solve ( min , min ) ; }
Distance : 9

185
Tree	{ return x.length . solve ( min , max ) ; }
Code	{ return x.length . solve ( min , max ) ; }
Distance : 4

186
Tree	{ return f . solve ( min , v2.x ) ; }
Code	{ return f . solve ( min , v2.x ) ; }
Distance : 5

187
Tree	{ return solve ( this == min , min ) ; }
Code	{ return solve ( this == min , min ) ; }
Distance : 3

188
Tree	{ return min . solve ( min , null , max ) ; }
Code	{ return min . solve ( min , null , max ) ; }
Distance : 4

189
Tree	{ return min . solve ( this , min ) ; }
Code	{ return min . solve ( this , min ) ; }
Distance : 5

190
Tree	{ return min ( min , max ) ; }
Code	{ return min ( min , max ) ; }
Distance : 3

191
Tree	{ return min . solve ( min , max , max ) ; }
Code	{ return min . solve ( min , max , max ) ; }
Distance : 4

192
Tree	{ return solve ( solve ( min , min ) ) ; }
Code	{ return solve ( solve ( min , min ) ) ; }
Distance : 4

193
Tree	{ return f . solve () . solve ( f , max , max ) ; }
Code	{ return f . solve () . solve ( f , max , max ) ; }
Distance : 6

194
Tree	{ return f . solve () . solve ( min , min , max ) ; }
Code	{ return f . solve () . solve ( min , min , max ) ; }
Distance : 6

195
Tree	{ return f . solve () . solve ( max ) ; }
Code	{ return f . solve () . solve ( max ) ; }
Distance : 7

196
Tree	{ return solve ( min , max == null max ? ) ; }
Code	{ return solve ( min , max == null max ? ) ; }
Distance : 5

197
Tree	{ return solve ( solve () , solve ( f ) ) ; }
Code	{ return solve ( solve () , solve ( f ) ) ; }
Distance : 6

198
Tree	{ return solve ( solve () , solve ( max ) ) ; } Class
Code	{ return solve ( solve () , solve ( max ) ) ; } Class
Distance : 6

199
Tree	{ return solve () . solve ( solve ( min ) ) ; } Class
Code	{ return solve () . solve ( solve ( min ) ) ; } Class
Distance : 8

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 148
Wrong
========================================================================
False

0
Tree	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

1
Tree	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

2
Tree	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

3
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

4
Tree	j += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Code	j += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Distance : 16

5
Tree	i = ( ( i / values.length ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( i / values.length ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

6
Tree	tDistribution = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

7
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

8
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

9
Tree	j = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

10
Tree	i = ( ( i / Entities.ISO8859_1_ARRAY_LENGTH ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( i / Entities.ISO8859_1_ARRAY_LENGTH ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

11
Tree	i /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - tDistribution ) * / ;
Code	i /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - tDistribution ) * / ;
Distance : 15

12
Tree	tDistribution += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	tDistribution += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

13
Tree	i += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

14
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

15
Tree	t += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	t += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

16
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

17
Tree	j = ( tDistribution / ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	j = ( tDistribution / ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 16

18
Tree	j = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	j = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 16

19
Tree	i = ( tDistribution / ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	i = ( tDistribution / ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 15

20
Tree	t /= i / ( t != j . cumulativeProbability ( t ) ) ;
Code	t /= i / ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

21
Tree	i = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	i = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 15

22
Tree	t /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	t /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

23
Tree	i = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	i = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

24
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

25
Tree	j = ( ( i / Entities.ISO8859_1_ARRAY_LENGTH ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( i / Entities.ISO8859_1_ARRAY_LENGTH ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

26
Tree	tDistribution += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

27
Tree	i += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

28
Tree	tDistribution /= i / ( t != j . cumulativeProbability ( t ) ) ;
Code	tDistribution /= i / ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

29
Tree	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

30
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

31
Tree	tDistribution = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	tDistribution = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

32
Tree	j = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	j = ( j != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

33
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

34
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

35
Tree	i /= i / ( t != j . cumulativeProbability ( t ) ) ;
Code	i /= i / ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

36
Tree	j += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	j += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

37
Tree	i += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	i += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

38
Tree	j += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

39
Tree	i += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

40
Tree	j /= i / ( t != j . cumulativeProbability ( t ) ) ;
Code	j /= i / ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

41
Tree	tDistribution = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	tDistribution = ( tDistribution & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 16

42
Tree	j = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	j = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

43
Tree	i = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	i = ( tDistribution != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

44
Tree	t += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	t += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

45
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

46
Tree	tDistribution = ( tDistribution / ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	tDistribution = ( tDistribution / ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 16

47
Tree	j = ( tDistribution / ( j . cumulativeProbability ( t ) / j ) ) ;
Code	j = ( tDistribution / ( j . cumulativeProbability ( t ) / j ) ) ;
Distance : 16

48
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

49
Tree	i = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Code	i = ( j & ( j . cumulativeProbability ( t ) / tDistribution ) ) ;
Distance : 14

50
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

51
Tree	i += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	i += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

52
Tree	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * / * tDistribution ) ;
Distance : 17

53
Tree	j /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - tDistribution ) * / ;
Code	j /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - tDistribution ) * / ;
Distance : 15

54
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

55
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

56
Tree	i /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) * / ;
Code	i /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) * / ;
Distance : 15

57
Tree	j += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	j += i && ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

58
Tree	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

59
Tree	j += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	j += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

60
Tree	i = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

61
Tree	i /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	i /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

62
Tree	tDistribution += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	tDistribution += i . cumulativeProbability ( t , tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

63
Tree	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

64
Tree	j = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

65
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

66
Tree	j /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

67
Tree	i += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	i += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

68
Tree	j += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	j += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

69
Tree	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

70
Tree	t += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

71
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Distance : 6

72
Tree	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

73
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( j ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( j ) ) ;
Distance : 5

74
Tree	j = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	j = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

75
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 5

76
Tree	out [ j ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ j ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 6

77
Tree	tDistribution += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Code	tDistribution += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Distance : 16

78
Tree	t = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( NUMBER_CONSTANT + tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

79
Tree	i = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	i = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 17

80
Tree	tDistribution /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution /= i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

81
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

82
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

83
Tree	j = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	j = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

84
Tree	tDistribution += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	tDistribution += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

85
Tree	j += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i && ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

86
Tree	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

87
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

88
Tree	i = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	i = ( ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 17

89
Tree	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

90
Tree	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

91
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

92
Tree	tDistribution += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

93
Tree	tDistribution += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

94
Tree	j += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	j += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

95
Tree	i += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

96
Tree	i += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Code	i += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Distance : 14

97
Tree	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	j /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

98
Tree	i += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	i += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

99
Tree	tDistribution += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Code	tDistribution += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Distance : 14

100
Tree	j = ( ( i / values.length ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( i / values.length ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

101
Tree	i /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	i /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

102
Tree	t += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Code	t += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Distance : 14

103
Tree	j = ( tDistribution && ( j . cumulativeProbability ( t ) / t ) ) ;
Code	j = ( tDistribution && ( j . cumulativeProbability ( t ) / t ) ) ;
Distance : 15

104
Tree	i = ( tDistribution && ( j . cumulativeProbability ( t ) / t ) ) ;
Code	i = ( tDistribution && ( j . cumulativeProbability ( t ) / t ) ) ;
Distance : 14

105
Tree	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	tDistribution /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

106
Tree	t += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	t += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

107
Tree	t /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	t /= cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

108
Tree	i += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Code	i += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Distance : 16

109
Tree	j /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) * / ;
Code	j /= i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) * / ;
Distance : 15

110
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

111
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

112
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

113
Tree	i = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

114
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

115
Tree	t += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Code	t += i . cumulativeProbability ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / ;
Distance : 19

116
Tree	t += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

117
Tree	t += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	t += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

118
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

119
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

120
Tree	j += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	j += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

121
Tree	t += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	t += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

122
Tree	tDistribution = ( tDistribution && ( j . cumulativeProbability ( t ) / t ) ) ;
Code	tDistribution = ( tDistribution && ( j . cumulativeProbability ( t ) / t ) ) ;
Distance : 15

123
Tree	tDistribution += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

124
Tree	j += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Code	j += i / ( t != t . cumulativeProbability ( t + NUMBER_CONSTANT ) ) ;
Distance : 14

125
Tree	j = ( j && ( j . cumulativeProbability ( t ) / t ) ) ;
Code	j = ( j && ( j . cumulativeProbability ( t ) / t ) ) ;
Distance : 14

126
Tree	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

127
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

128
Tree	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * / * tDistribution ) ;
Distance : 17

129
Tree	t += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Code	t += i . cumulativeProbability ( t != t . cumulativeProbability ( t ) ) * / * / ;
Distance : 16

130
Tree	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * / * tDistribution ) ;
Distance : 17

131
Tree	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Code	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Distance : 15

132
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

133
Tree	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * / * tDistribution ) ;
Distance : 17

134
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

135
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Distance : 15

136
Tree	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

137
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

138
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Distance : 16

139
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) & NUMBER_CONSTANT ) ;
Distance : 16

140
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Distance : 16

141
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Distance : 16

142
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Distance : 16

143
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * tDistribution . cumulativeProbability () * t ) ;
Distance : 16

144
Tree	j += cumulativeProbability () out ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	j += cumulativeProbability () out ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 15

145
Tree	i += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	i += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

146
Tree	tDistribution += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	tDistribution += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

147
Tree	t += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Code	t += cumulativeProbability () [ ( t . cumulativeProbability ( t ) / tDistribution ) ;
Distance : 14

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 12

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException ( p ) ) ; }
Distance : 6

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 5

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , false ) ; }
Distance : 5

4
Tree	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 12

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( <= ) ; }
Distance : 5

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Distance : 4

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Distance : 5

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false , false , false ) ; }
Distance : 6

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 2

12
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 5

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , createIllegalArgumentException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , createIllegalArgumentException , p ) ; }
Distance : 9

14
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Distance : 3

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 5

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

18
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 2

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Distance : 4

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 5

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Distance : 7

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT ) ; }
Distance : 2

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Distance : 7

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 2

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 1

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Distance : 8

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( <= , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( <= , p ) ) ; }
Distance : 8

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 3

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Distance : 2

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

32
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

33
Tree	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Distance : 13

34
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT ) ; }
Distance : 3

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , false , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , false , MathRuntimeException ) ; }
Distance : 7

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , false , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , false , p ) ; }
Distance : 7

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 5

38
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Distance : 12

39
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 5

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , null ) ; }
Distance : 2

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , p ) ; }
Distance : 5

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Distance : 6

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , false , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , false , MathRuntimeException ) ; }
Distance : 7

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException ) ; }
Distance : 5

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , MathRuntimeException ) ; }
Distance : 5

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 8

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

49
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , super(); ) ; }
Distance : 2

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Distance : 7

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , false ) ; }
Distance : 6

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 5

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Distance : 3

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 5

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 2

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Distance : 5

61
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , p ) ; }
Distance : 4

62
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Distance : 4

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( super , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( super , p ) ; }
Distance : 1

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 8

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 3

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Distance : 6

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Distance : 3

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

70
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

71
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 4

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Distance : 5

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 3

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException () ) ; }
Distance : 4

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Distance : 6

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Distance : 2

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , p ) ; }
Distance : 7

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 9

81
Tree	p = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Distance : 13

82
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 6

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Distance : 6

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

85
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

87
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 3

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Distance : 2

89
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

90
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 8

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , false ) ; }
Distance : 5

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 4

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

94
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Distance : 5

95
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 4

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 3

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Distance : 5

98
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Class
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Class
Distance : 4

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 5

101
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

102
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 1

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , MathRuntimeException ) ; }
Distance : 7

105
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Distance : 2

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( true , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( true , p ) ; }
Distance : 1

107
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Distance : 2

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 3

109
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Test
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Test
Distance : 4

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

111
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 9

112
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 1

113
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Distance : 12

114
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 4

116
Tree	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Distance : 12

117
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Distance : 4

119
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

121
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

122
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , false , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , false , p ) ; }
Distance : 7

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( <= ) ; }
Distance : 5

124
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

126
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Distance : 6

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Distance : 2

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 8

129
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 2

130
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

131
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Distance : 4

132
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException () ) ; }
Distance : 4

133
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

134
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 2

135
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

136
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , p ) ; }
Distance : 3

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

138
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Distance : 5

139
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , p ) ; }
Distance : 4

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

142
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

143
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , p ) ; }
Distance : 5

144
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 4

145
Tree	MathRuntimeException = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Distance : 13

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Distance : 6

147
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

148
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , false ) ; }
Distance : 5

149
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 2

150
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p ) ; }
Distance : 4

152
Tree	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Distance : 13

153
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Test
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Test
Distance : 4

154
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( p , p ) ; }
Distance : 4

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Distance : 3

157
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 5

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Distance : 4

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , p ) ; }
Distance : 3

160
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Distance : 4

161
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( for , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( for , p ) ; }
Distance : 1

162
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 5

163
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

164
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 13

165
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 4

166
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 4

167
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 2

168
Tree	MathRuntimeException = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Distance : 13

169
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

170
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 5

171
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 3

172
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 3

173
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

174
Tree	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Distance : 13

175
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException () ) ; }
Distance : 5

176
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( CHAR_CONS , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( CHAR_CONS , p ) ; }
Distance : 1

177
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , true ) ; }
Distance : 5

178
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

179
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 2

180
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Distance : 2

181
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 2

182
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Distance : 3

183
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 5

184
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

185
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Distance : 3

186
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 2

187
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Distance : 5

188
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , false ) ; }
Distance : 5

189
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Distance : 3

190
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 2

191
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 4

192
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 6

193
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p . createIllegalArgumentException () ) ; }
Distance : 4

194
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( <= , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( <= , p ) ) ; }
Distance : 8

195
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Class
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Class
Distance : 4

196
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

197
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 3

198
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 3

199
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 12
Correct
========================================================================
True

0
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

1
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

2
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

3
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

4
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

5
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

6
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

7
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

8
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

9
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 2

10
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

11
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return fit . fit ( this . guess . guess ) ; class
Code	return fit . fit ( this . guess . guess ) ; class
Distance : 7

1
Tree	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ;
Distance : 15

2
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new MinimizeExitPoints < guess > ( guess ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new MinimizeExitPoints < guess > ( guess ) ) ;
Distance : 15

3
Tree	return fit . fit ( Gaussian.Parametric , guess , ; , new SymmLQEvent < guess > ( guess ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess , ; , new SymmLQEvent < guess > ( guess ) ) ;
Distance : 15

4
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new ToStringBuilder < guess > ( guess ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new ToStringBuilder < guess > ( guess ) ) ;
Distance : 15

5
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () . fit () ) ;
Distance : 14

6
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

7
Tree	return fit ( new , guess , ) , return , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ;
Code	return fit ( new , guess , ) , return , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ;
Distance : 18

8
Tree	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ;
Code	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ;
Distance : 12

9
Tree	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ;
Distance : 12

10
Tree	return fit . fit ( Gaussian.Parametric . fit () , continue; ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , continue; ) ;
Distance : 8

11
Tree	return fit . fit () . fit ( Gaussian.Parametric , true , guess ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , true , guess ) ;
Distance : 9

12
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , else ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , else ) ;
Distance : 9

13
Tree	return fit ( new , false , guess . fit () , return; ) ;
Code	return fit ( new , false , guess . fit () , return; ) ;
Distance : 9

14
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , super ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , super ) ;
Distance : 9

15
Tree	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ;
Code	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ;
Distance : 12

16
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; class
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; class
Distance : 8

17
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; notifyListeners
Distance : 8

18
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; array
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; array
Distance : 12

19
Tree	return fit . fit ( this . guess . guess ) ; notifyListeners
Code	return fit . fit ( this . guess . guess ) ; notifyListeners
Distance : 7

20
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Class
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Class
Distance : 10

21
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 13

22
Tree	return fit . fit ( this . guess . guess ) ; array
Code	return fit . fit ( this . guess . guess ) ; array
Distance : 7

23
Tree	return fit . fit ( this . guess ) ; array
Code	return fit . fit ( this . guess ) ; array
Distance : 5

24
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Distance : 16

25
Tree	return fit . fit ( this . guess ) ; notifyListeners
Code	return fit . fit ( this . guess ) ; notifyListeners
Distance : 5

26
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 16

27
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 13

28
Tree	return this . fit . fit ( new . fit () ) ; class
Code	return this . fit . fit ( new . fit () ) ; class
Distance : 9

29
Tree	return this . fit . fit ( new . fit () ) ; notifyListeners
Code	return this . fit . fit ( new . fit () ) ; notifyListeners
Distance : 9

30
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; array
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; array
Distance : 12

31
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; class
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; class
Distance : 12

32
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; notifyListeners
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; notifyListeners
Distance : 12

33
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

34
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , false ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , false ) ;
Distance : 9

35
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Test
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; Test
Distance : 10

36
Tree	return fit . fit ( Gaussian.Parametric . fit () , return; ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , return; ) ;
Distance : 8

37
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

38
Tree	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Code	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Distance : 9

39
Tree	return fit ( new TimeZoneOffset < guess > ( new ) , guess ) ;
Code	return fit ( new TimeZoneOffset < guess > ( new ) , guess ) ;
Distance : 9

40
Tree	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Code	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Distance : 9

41
Tree	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Code	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Distance : 8

42
Tree	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ;
Distance : 11

43
Tree	return fit ( new Gaussian.Parametric () , guess ) ;
Code	return fit ( new Gaussian.Parametric () , guess ) ;
Distance : 4

44
Tree	return fit ( new SuppressDocWarningsGuard < guess > ( guess ) , guess ) ;
Code	return fit ( new SuppressDocWarningsGuard < guess > ( guess ) , guess ) ;
Distance : 9

45
Tree	return fit ( new SuppressDocWarningsGuard <> ( guess ) , guess ) ;
Code	return fit ( new SuppressDocWarningsGuard <> ( guess ) , guess ) ;
Distance : 7

46
Tree	return fit ( new MinimizeExitPoints <> ( guess ) , guess ) ;
Code	return fit ( new MinimizeExitPoints <> ( guess ) , guess ) ;
Distance : 7

47
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

48
Tree	return fit . fit ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 8

49
Tree	return fit ( return; ) ;
Code	return fit ( return; ) ;
Distance : 1

50
Tree	return fit . fit ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE [ NUMBER_CONSTANT ] ) ;
Distance : 8

51
Tree	return fit . fit ( NUMBER_CONSTANT , cutOff [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , cutOff [ NUMBER_CONSTANT ] ) ;
Distance : 8

52
Tree	return fit ( new TimeZoneOffset <> ( guess ) , guess ) ;
Code	return fit ( new TimeZoneOffset <> ( guess ) , guess ) ;
Distance : 7

53
Tree	return fit . fit ( Gaussian.Parametric . fit () , null ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , null ) ;
Distance : 8

54
Tree	return fit ( Gaussian.Parametric . fit () . guess ) ;
Code	return fit ( Gaussian.Parametric . fit () . guess ) ;
Distance : 5

55
Tree	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ;
Code	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ;
Distance : 9

56
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , CHAR_CONS ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , CHAR_CONS ) ;
Distance : 9

57
Tree	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( Gaussian.Parametric , guess , ; . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

58
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ;
Distance : 9

59
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) , CHAR_CONS , super ) ;
Code	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) , CHAR_CONS , super ) ;
Distance : 13

60
Tree	return fit ( Gaussian.Parametric , true , guess . fit () , null ) ;
Code	return fit ( Gaussian.Parametric , true , guess . fit () , null ) ;
Distance : 9

61
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) , false , false ) ;
Code	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) , false , false ) ;
Distance : 13

62
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) ) ;
Code	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) ) ;
Distance : 9

63
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ;
Distance : 9

64
Tree	return fit . fit () . guess . fit ( false ) ;
Code	return fit . fit () . guess . fit ( false ) ;
Distance : 8

65
Tree	return this . fit . fit ( Gaussian.Parametric . fit ( STRING_CONSTANT ) ) ;
Code	return this . fit . fit ( Gaussian.Parametric . fit ( STRING_CONSTANT ) ) ;
Distance : 10

66
Tree	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ;
Code	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

67
Tree	return fit . fit ( new SuppressDocWarningsGuard < guess > ( new ) , false , false ) ;
Code	return fit . fit ( new SuppressDocWarningsGuard < guess > ( new ) , false , false ) ;
Distance : 13

68
Tree	return fit ( new Gaussian.Parametric < guess > () , guess ) ;
Code	return fit ( new Gaussian.Parametric < guess > () , guess ) ;
Distance : 7

69
Tree	return fit . fit ( this . guess . guess ) ;
Code	return fit . fit ( this . guess . guess ) ;
Distance : 6

70
Tree	return this . fit . fit ( new . fit () ) ;
Code	return this . fit . fit ( new . fit () ) ;
Distance : 8

71
Tree	return fit . fit ( this . guess , guess . fit () ) ;
Code	return fit . fit ( this . guess , guess . fit () ) ;
Distance : 9

72
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 13

73
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

74
Tree	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; array
Code	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; array
Distance : 13

75
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; notifyListeners
Distance : 10

76
Tree	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 11

77
Tree	return fit ( Gaussian.Parametric , guess , ; , return , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; array
Code	return fit ( Gaussian.Parametric , guess , ; , return , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; array
Distance : 19

78
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; class
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; class
Distance : 10

79
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ; notifyListeners
Distance : 10

80
Tree	return fit ( Gaussian.Parametric . fit () . guess ) ; class
Code	return fit ( Gaussian.Parametric . fit () . guess ) ; class
Distance : 6

81
Tree	return fit ( new . fit () . guess ) ; array
Code	return fit ( new . fit () . guess ) ; array
Distance : 6

82
Tree	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ; class
Code	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ; class
Distance : 11

83
Tree	return this . fit . fit ( new . fit ( STRING_CONSTANT ) ) ; notifyListeners
Code	return this . fit . fit ( new . fit ( STRING_CONSTANT ) ) ; notifyListeners
Distance : 11

84
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ; array
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ; array
Distance : 10

85
Tree	return fit ( Gaussian.Parametric , guess . fit () , fit ) ; array
Code	return fit ( Gaussian.Parametric , guess . fit () , fit ) ; array
Distance : 8

86
Tree	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ; array
Code	return fit . fit ( Gaussian.Parametric , guess , ; , new Gaussian.Parametric < guess > ( guess ) ) ; array
Distance : 16

87
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ; array
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ; array
Distance : 13

88
Tree	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ; notifyListeners
Code	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ; notifyListeners
Distance : 13

89
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ; class
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ; class
Distance : 13

90
Tree	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ; class
Code	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ; class
Distance : 10

91
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ; class
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ; class
Distance : 10

92
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( , ) ) ; array
Code	return fit . fit ( new Gaussian.Parametric < guess > ( , ) ) ; array
Distance : 10

93
Tree	return fit ( new Gaussian.Parametric < guess > () , guess ) ; array
Code	return fit ( new Gaussian.Parametric < guess > () , guess ) ; array
Distance : 8

94
Tree	return fit ( new Gaussian.Parametric < guess > () , guess ) ; class
Code	return fit ( new Gaussian.Parametric < guess > () , guess ) ; class
Distance : 8

95
Tree	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ; array
Code	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ; array
Distance : 13

96
Tree	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ; class
Code	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ; class
Distance : 13

97
Tree	return fit ( Gaussian.Parametric . fit () . guess ) ; notifyListeners
Code	return fit ( Gaussian.Parametric . fit () . guess ) ; notifyListeners
Distance : 6

98
Tree	return fit . fit ( this . guess , guess . fit () ) ; array
Code	return fit . fit ( this . guess , guess . fit () ) ; array
Distance : 10

99
Tree	return fit ( new , guess . fit () , fit ) ; class
Code	return fit ( new , guess . fit () , fit ) ; class
Distance : 8

100
Tree	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ; array
Code	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ; array
Distance : 13

101
Tree	return fit ( new Gaussian.Parametric () , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric () , guess ) ; notifyListeners
Distance : 5

102
Tree	return fit ( new Gaussian.Parametric () , guess ) ; array
Code	return fit ( new Gaussian.Parametric () , guess ) ; array
Distance : 5

103
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Code	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Distance : 10

104
Tree	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ; notifyListeners
Code	return this . fit . fit ( Gaussian.Parametric . fit ( guess . fit () ) ) ; notifyListeners
Distance : 13

105
Tree	return fit . fit ( this . guess , guess . fit () ) ; notifyListeners
Code	return fit . fit ( this . guess , guess . fit () ) ; notifyListeners
Distance : 10

106
Tree	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ; array
Code	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ; array
Distance : 12

107
Tree	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ; class
Code	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ; class
Distance : 12

108
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () . fit () ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit () . fit () ) ; notifyListeners
Distance : 15

109
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () . fit () ) ; class
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () . fit () ) ; class
Distance : 15

110
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () . fit () ) ; array
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () . fit () ) ; array
Distance : 15

111
Tree	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 12

112
Tree	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ; array
Code	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ; array
Distance : 10

113
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

114
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new fit < guess > ( guess ) ) ; class
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new fit < guess > ( guess ) ) ; class
Distance : 16

115
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Distance : 9

116
Tree	return fit ( Gaussian.Parametric , guess . fit () , fit ) ;
Code	return fit ( Gaussian.Parametric , guess . fit () , fit ) ;
Distance : 7

117
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( new ) , false , super ) ;
Code	return fit . fit ( new Gaussian.Parametric < guess > ( new ) , false , super ) ;
Distance : 13

118
Tree	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ;
Code	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ;
Distance : 9

119
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ;
Distance : 11

120
Tree	return fit . fit ( this . guess , guess . fit () ) ; class
Code	return fit . fit ( this . guess , guess . fit () ) ; class
Distance : 10

121
Tree	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ; notifyListeners
Code	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ; notifyListeners
Distance : 10

122
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; class
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; class
Distance : 16

123
Tree	return fit ( Gaussian.Parametric , false , guess . fit () , super(); ) ;
Code	return fit ( Gaussian.Parametric , false , guess . fit () , super(); ) ;
Distance : 9

124
Tree	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 12

125
Tree	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ;
Code	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ;
Distance : 11

126
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; array
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; array
Distance : 16

127
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 11

128
Tree	return fit . fit ( NUMBER_CONSTANT , showSeparators [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , showSeparators [ NUMBER_CONSTANT ] ) ;
Distance : 8

129
Tree	return fit . fit ( new TimeZoneOffset < guess > ( , ) , false , false ) ;
Code	return fit . fit ( new TimeZoneOffset < guess > ( , ) , false , false ) ;
Distance : 13

130
Tree	return fit . fit () . fit ( guess , false , guess ) ;
Code	return fit . fit () . fit ( guess , false , guess ) ;
Distance : 9

131
Tree	return fit ( new Gaussian.Parametric ( new ) , guess ) ;
Code	return fit ( new Gaussian.Parametric ( new ) , guess ) ;
Distance : 6

132
Tree	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ;
Code	return fit . fit () . fit ( NUMBER_CONSTANT , guess , guess ) ;
Distance : 9

133
Tree	return fit . fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , false , false ) ;
Code	return fit . fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , false , false ) ;
Distance : 13

134
Tree	return fit ( new Gaussian.Parametric < guess > ( Gaussian.Parametric ) , guess ) ; array
Code	return fit ( new Gaussian.Parametric < guess > ( Gaussian.Parametric ) , guess ) ; array
Distance : 10

135
Tree	return fit . fit ( new MinimizeExitPoints < guess > ( , ) , false , false ) ;
Code	return fit . fit ( new MinimizeExitPoints < guess > ( , ) , false , false ) ;
Distance : 13

136
Tree	return fit . fit () . guess . fit ( super ) ;
Code	return fit . fit () . guess . fit ( super ) ;
Distance : 8

137
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; array
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; array
Distance : 10

138
Tree	return fit ( Gaussian.Parametric , false , guess . fit () , null ) ;
Code	return fit ( Gaussian.Parametric , false , guess . fit () , null ) ;
Distance : 9

139
Tree	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; class
Code	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; class
Distance : 13

140
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; class
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; class
Distance : 10

141
Tree	return fit . fit ( this . guess ) ; class
Code	return fit . fit ( this . guess ) ; class
Distance : 5

142
Tree	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , super ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , super ) ;
Distance : 10

143
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Distance : 7

144
Tree	return fit ( break; ) ;
Code	return fit ( break; ) ;
Distance : 1

145
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

146
Tree	return fit ( new InputStreamReader <> ( guess ) , guess ) ;
Code	return fit ( new InputStreamReader <> ( guess ) , guess ) ;
Distance : 7

147
Tree	return fit ( Gaussian.Parametric , guess . fit () , fit ) ; notifyListeners
Code	return fit ( Gaussian.Parametric , guess . fit () , fit ) ; notifyListeners
Distance : 8

148
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , ! ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , ! ) ;
Distance : 10

149
Tree	return fit . fit () . guess . fit ( true ) ;
Code	return fit . fit () . guess . fit ( true ) ;
Distance : 8

150
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ;
Distance : 11

151
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 13

152
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( , ) ) ; class
Code	return fit . fit ( new Gaussian.Parametric < guess > ( , ) ) ; class
Distance : 10

153
Tree	return fit ( new Gaussian.Parametric () , guess ) ; class
Code	return fit ( new Gaussian.Parametric () , guess ) ; class
Distance : 5

154
Tree	return this . fit . fit ( new . fit () ) ; array
Code	return this . fit . fit ( new . fit () ) ; array
Distance : 9

155
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 11

156
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ; notifyListeners
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ; notifyListeners
Distance : 13

157
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; notifyListeners
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; notifyListeners
Distance : 10

158
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 13

159
Tree	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Code	return fit ( Gaussian.Parametric , guess , ) . fit () , fit ( NUMBER_CONSTANT ) ) ; array
Distance : 13

160
Tree	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ; array
Code	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ; array
Distance : 10

161
Tree	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ; class
Code	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ; class
Distance : 10

162
Tree	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , false ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , false ) ;
Distance : 10

163
Tree	return fit . fit ( Gaussian.Parametric . fit () , super(); ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , super(); ) ;
Distance : 8

164
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ;
Distance : 9

165
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; notifyListeners
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; notifyListeners
Distance : 8

166
Tree	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 10

167
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; class
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; class
Distance : 8

168
Tree	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; array
Code	return fit ( Gaussian.Parametric . fit () , STRING_CONSTANT , guess ) ; array
Distance : 8

169
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; array
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; array
Distance : 8

170
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () . fit () , guess ) ;
Distance : 12

171
Tree	return this . fit . fit ( new . fit ( STRING_CONSTANT ) ) ; class
Code	return this . fit . fit ( new . fit ( STRING_CONSTANT ) ) ; class
Distance : 11

172
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; class
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; class
Distance : 12

173
Tree	return fit ( new Gaussian.Parametric < guess > () , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric < guess > () , guess ) ; notifyListeners
Distance : 8

174
Tree	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) , CHAR_CONS , false ) ;
Code	return fit . fit ( new Gaussian.Parametric < guess > ( guess ) , CHAR_CONS , false ) ;
Distance : 13

175
Tree	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ;
Distance : 7

176
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; class
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; class
Distance : 10

177
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; notifyListeners
Distance : 10

178
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 11

179
Tree	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ; notifyListeners
Distance : 8

180
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; array
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; array
Distance : 10

181
Tree	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ; class
Code	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ; class
Distance : 8

182
Tree	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ; array
Code	return fit ( new Gaussian.Parametric <> ( guess ) , guess ) ; array
Distance : 8

183
Tree	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ; notifyListeners
Code	return this . fit ( Gaussian.Parametric , guess . fit () , fit ) ; notifyListeners
Distance : 10

184
Tree	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ; notifyListeners
Code	return fit . fit ( this . guess , guess . fit ( STRING_CONSTANT ) ) ; notifyListeners
Distance : 12

185
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; notifyListeners
Distance : 12

186
Tree	return fit . fit ( Gaussian.Parametric , guess , ) , new HarmonicFunction < guess > ( guess ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess , ) , new HarmonicFunction < guess > ( guess ) ) ;
Distance : 15

187
Tree	return fit ( new , guess , ) , ) , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; class
Code	return fit ( new , guess , ) , ) , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; class
Distance : 19

188
Tree	return fit ( Gaussian.Parametric , guess , ) , fit , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; notifyListeners
Code	return fit ( Gaussian.Parametric , guess , ) , fit , ) . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; notifyListeners
Distance : 19

189
Tree	return fit ( new Gaussian.Parametric ( new ) , guess ) ; array
Code	return fit ( new Gaussian.Parametric ( new ) , guess ) ; array
Distance : 7

190
Tree	return fit ( new Gaussian.Parametric ( new ) , guess ) ; class
Code	return fit ( new Gaussian.Parametric ( new ) , guess ) ; class
Distance : 7

191
Tree	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ; class
Code	return fit . fit () . fit ( STRING_CONSTANT , fit ( NUMBER_CONSTANT ) ) ; class
Distance : 12

192
Tree	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ; array
Code	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ; array
Distance : 10

193
Tree	return fit ( new Gaussian.Parametric ( new ) , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric ( new ) , guess ) ; notifyListeners
Distance : 7

194
Tree	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ; class
Code	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ; class
Distance : 10

195
Tree	return this . fit . fit ( new . fit ( STRING_CONSTANT ) ) ; array
Code	return this . fit . fit ( new . fit ( STRING_CONSTANT ) ) ; array
Distance : 11

196
Tree	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; notifyListeners
Code	return fit . fit ( Gaussian.Parametric . fit () , fit ( NUMBER_CONSTANT ) , guess ) ; notifyListeners
Distance : 13

197
Tree	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ; class
Code	return fit . fit ( ( ( Gaussian.Parametric ) guess . fit () ) . guess ) ; class
Distance : 13

198
Tree	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Code	return fit ( STRING_CONSTANT , new Gaussian.Parametric < guess > ( guess ) ) ; notifyListeners
Distance : 10

199
Tree	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ; array
Code	return this . fit . fit ( new . fit ( NUMBER_CONSTANT ) ) ; array
Distance : 11

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	int sum = new Object () ;
Code	int sum = new Object () ;
Distance : 4

1
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

2
Tree	int [] sum ;
Code	int [] sum ;
Distance : 4

3
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

4
Tree	int sum = getAbstractScope () - NUMBER_CONSTANT ;
Code	int sum = getAbstractScope () - NUMBER_CONSTANT ;
Distance : 4

5
Tree	int sum = new ArrayList ( true ) ;
Code	int sum = new ArrayList ( true ) ;
Distance : 6

6
Tree	int sum = ( sum + NUMBER_CONSTANT ) ? <= : PropertyCollapseLevel.NONE ;
Code	int sum = ( sum + NUMBER_CONSTANT ) ? <= : PropertyCollapseLevel.NONE ;
Distance : 9

7
Tree	int sum = CHAR_CONS ;
Code	int sum = CHAR_CONS ;
Distance : 2

8
Tree	int sum = sum ? v.length : currentState.length ;
Code	int sum = sum ? v.length : currentState.length ;
Distance : 6

9
Tree	int sum = sum ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = sum ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 6

10
Tree	int sum = getTickLength () - sum ;
Code	int sum = getTickLength () - sum ;
Distance : 5

11
Tree	int *= ;
Code	int *= ;
Distance : 4

12
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

13
Tree	int sum = getDimension () ;
Code	int sum = getDimension () ;
Distance : 3

14
Tree	double sum = sum + NUMBER_CONSTANT ;
Code	double sum = sum + NUMBER_CONSTANT ;
Distance : 2

15
Tree	long sum = sum ;
Code	long sum = sum ;
Distance : 2

16
Tree	boolean sum = sum ;
Code	boolean sum = sum ;
Distance : 2

17
Tree	int sum = getDimension () - sum ;
Code	int sum = getDimension () - sum ;
Distance : 5

18
Tree	Coordinates3D [] sum ;
Code	Coordinates3D [] sum ;
Distance : 4

19
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

20
Tree	int sum = new ArrayList () ;
Code	int sum = new ArrayList () ;
Distance : 4

21
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

22
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

23
Tree	int sum = NUMBER_CONSTANT / / ;
Code	int sum = NUMBER_CONSTANT / / ;
Distance : 3

24
Tree	int sum = new ArrayList ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int sum = new ArrayList ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

25
Tree	double sum = this . sum ;
Code	double sum = this . sum ;
Distance : 3

26
Tree	final MutableFloat [] sum ;
Code	final MutableFloat [] sum ;
Distance : 4

27
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

28
Tree	int sum = ( sum ) sum ;
Code	int sum = ( sum ) sum ;
Distance : 5

29
Tree	final int sum = checkInitialize () ;
Code	final int sum = checkInitialize () ;
Distance : 4

30
Tree	int sum = checkInitialize () ;
Code	int sum = checkInitialize () ;
Distance : 3

31
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

32
Tree	int sum = getDimension () - NUMBER_CONSTANT ;
Code	int sum = getDimension () - NUMBER_CONSTANT ;
Distance : 4

33
Tree	int sum = new Date ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int sum = new Date ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

34
Tree	int sum = ( sum ) / () ;
Code	int sum = ( sum ) / () ;
Distance : 6

35
Tree	int sum = new SinFunction ( true ) ;
Code	int sum = new SinFunction ( true ) ;
Distance : 6

36
Tree	final int sum = NUMBER_CONSTANT ;
Code	final int sum = NUMBER_CONSTANT ;
Distance : 2

37
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

38
Tree	int sum = NUMBER_CONSTANT / floor () ;
Code	int sum = NUMBER_CONSTANT / floor () ;
Distance : 4

39
Tree	long sum = ( sum ) sum ;
Code	long sum = ( sum ) sum ;
Distance : 5

40
Tree	int sum = v.length / NUMBER_CONSTANT ;
Code	int sum = v.length / NUMBER_CONSTANT ;
Distance : 3

41
Tree	int sum = sum - NUMBER_CONSTANT ;
Code	int sum = sum - NUMBER_CONSTANT ;
Distance : 3

42
Tree	final double sum ;
Code	final double sum ;
Distance : 3

43
Tree	int sum = checkInitialize () . sum ;
Code	int sum = checkInitialize () . sum ;
Distance : 5

44
Tree	int sum = STRING_CONSTANT ;
Code	int sum = STRING_CONSTANT ;
Distance : 2

45
Tree	int sum = sum ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = sum ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Distance : 6

46
Tree	int sum = NUMBER_CONSTANT * y.length ;
Code	int sum = NUMBER_CONSTANT * y.length ;
Distance : 3

47
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

48
Tree	int sum = this . sum . sum ;
Code	int sum = this . sum . sum ;
Distance : 6

49
Tree	int sum = NUMBER_CONSTANT / FastMath.PI ;
Code	int sum = NUMBER_CONSTANT / FastMath.PI ;
Distance : 3

50
Tree	boolean sum = ( sum ) sum ;
Code	boolean sum = ( sum ) sum ;
Distance : 5

51
Tree	int sum = Double.NaN / NUMBER_CONSTANT ;
Code	int sum = Double.NaN / NUMBER_CONSTANT ;
Distance : 3

52
Tree	double sum = sum + - ;
Code	double sum = sum + - ;
Distance : 3

53
Tree	double sum = sum < < NUMBER_CONSTANT ;
Code	double sum = sum < < NUMBER_CONSTANT ;
Distance : 3

54
Tree	abstract int [] [] sum ;
Code	abstract int [] [] sum ;
Distance : 5

55
Tree	int sum = sum ? v.length : FunctionFlavor.NORMAL ;
Code	int sum = sum ? v.length : FunctionFlavor.NORMAL ;
Distance : 6

56
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

57
Tree	public int sum = this . sum ;
Code	public int sum = this . sum ;
Distance : 5

58
Tree	int sum = sum - sum ;
Code	int sum = sum - sum ;
Distance : 4

59
Tree	int sum = NUMBER_CONSTANT * currentState.length ;
Code	int sum = NUMBER_CONSTANT * currentState.length ;
Distance : 3

60
Tree	public int sum = NUMBER_CONSTANT ;
Code	public int sum = NUMBER_CONSTANT ;
Distance : 2

61
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

62
Tree	final String [] sum ;
Code	final String [] sum ;
Distance : 4

63
Tree	int sum = new SinFunction ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int sum = new SinFunction ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

64
Tree	int sum = getAbstractScope () ;
Code	int sum = getAbstractScope () ;
Distance : 3

65
Tree	int /= ;
Code	int /= ;
Distance : 4

66
Tree	int sum [] = sum ;
Code	int sum [] = sum ;
Distance : 3

67
Tree	final Object [] sum ;
Code	final Object [] sum ;
Distance : 4

68
Tree	abstract int sum ;
Code	abstract int sum ;
Distance : 4

69
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

70
Tree	int sum = sum + - ;
Code	int sum = sum + - ;
Distance : 4

71
Tree	int sum = sum < < NUMBER_CONSTANT ;
Code	int sum = sum < < NUMBER_CONSTANT ;
Distance : 4

72
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

73
Tree	final int [] [] sum ;
Code	final int [] [] sum ;
Distance : 5

74
Tree	final int sum = getTickLength () ;
Code	final int sum = getTickLength () ;
Distance : 4

75
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

76
Tree	int sum = NUMBER_CONSTANT / getDimension () ;
Code	int sum = NUMBER_CONSTANT / getDimension () ;
Distance : 4

77
Tree	final Date [] sum ;
Code	final Date [] sum ;
Distance : 4

78
Tree	int sum = sum . currentTimeMillis () . sum ;
Code	int sum = sum . currentTimeMillis () . sum ;
Distance : 7

79
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

80
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

81
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

82
Tree	long sum = STRING_CONSTANT + sum ;
Code	long sum = STRING_CONSTANT + sum ;
Distance : 4

83
Tree	boolean sum = STRING_CONSTANT + sum ;
Code	boolean sum = STRING_CONSTANT + sum ;
Distance : 4

84
Tree	Date [] sum ;
Code	Date [] sum ;
Distance : 4

85
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

86
Tree	int [] ;
Code	int [] ;
Distance : 4

87
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? <= : FunctionFlavor.NORMAL ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? <= : FunctionFlavor.NORMAL ;
Distance : 9

88
Tree	int sum [] = getTickLength () ;
Code	int sum [] = getTickLength () ;
Distance : 4

89
Tree	double sum = sum - sum ;
Code	double sum = sum - sum ;
Distance : 3

90
Tree	int sum = Double.NaN ;
Code	int sum = Double.NaN ;
Distance : 2

91
Tree	double sum = CHAR_CONS ;
Code	double sum = CHAR_CONS ;
Distance : 1

92
Tree	int sum = getTickLength () - NUMBER_CONSTANT ;
Code	int sum = getTickLength () - NUMBER_CONSTANT ;
Distance : 4

93
Tree	int sum = v.length ;
Code	int sum = v.length ;
Distance : 2

94
Tree	int sum = sum . hashCode () . sum ;
Code	int sum = sum . hashCode () . sum ;
Distance : 7

95
Tree	boolean sum = sum < < NUMBER_CONSTANT ;
Code	boolean sum = sum < < NUMBER_CONSTANT ;
Distance : 4

96
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

97
Tree	int sum = sum . getGeneratorUpperBounds () . sum ;
Code	int sum = sum . getGeneratorUpperBounds () . sum ;
Distance : 7

98
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

99
Tree	int sum = getTickLength () . sum ;
Code	int sum = getTickLength () . sum ;
Distance : 5

100
Tree	int sum = IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = IncrementalCheckMode.GENERATE_IJS ;
Distance : 2

101
Tree	int sum ;
Code	int sum ;
Distance : 3

102
Tree	long sum ;
Code	long sum ;
Distance : 3

103
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

104
Tree	int sum = new Object ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int sum = new Object ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

105
Tree	final int sum = getDimension () ;
Code	final int sum = getDimension () ;
Distance : 4

106
Tree	int sum = NUMBER_CONSTANT * Calendar.SUNDAY ;
Code	int sum = NUMBER_CONSTANT * Calendar.SUNDAY ;
Distance : 3

107
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

108
Tree	int sum = ( MathUtils.TWO_PI - NUMBER_CONSTANT ) ? <= : currentState.length ;
Code	int sum = ( MathUtils.TWO_PI - NUMBER_CONSTANT ) ? <= : currentState.length ;
Distance : 9

109
Tree	long sum = this . sum ;
Code	long sum = this . sum ;
Distance : 4

110
Tree	int sum = ( sum + NUMBER_CONSTANT ) ? <= : currentState.length ;
Code	int sum = ( sum + NUMBER_CONSTANT ) ? <= : currentState.length ;
Distance : 9

111
Tree	double sum ;
Code	double sum ;
Distance : 2

112
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

113
Tree	int += ;
Code	int += ;
Distance : 4

114
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

115
Tree	int sum = checkInitialize () - NUMBER_CONSTANT ;
Code	int sum = checkInitialize () - NUMBER_CONSTANT ;
Distance : 4

116
Tree	boolean sum = null ;
Code	boolean sum = null ;
Distance : 2

117
Tree	Object [] sum ;
Code	Object [] sum ;
Distance : 4

118
Tree	int sum = getTickLength () ;
Code	int sum = getTickLength () ;
Distance : 3

119
Tree	int sum = ( Locale.US - NUMBER_CONSTANT ) ? <= : currentState.length ;
Code	int sum = ( Locale.US - NUMBER_CONSTANT ) ? <= : currentState.length ;
Distance : 9

120
Tree	final int sum ;
Code	final int sum ;
Distance : 4

121
Tree	int sum [] = getLastInvocation () ;
Code	int sum [] = getLastInvocation () ;
Distance : 4

122
Tree	int sum = new Date () ;
Code	int sum = new Date () ;
Distance : 4

123
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

124
Tree	int sum [] = getName () ;
Code	int sum [] = getName () ;
Distance : 4

125
Tree	int sum = ( sum + NUMBER_CONSTANT ) ? <= : FunctionFlavor.NORMAL ;
Code	int sum = ( sum + NUMBER_CONSTANT ) ? <= : FunctionFlavor.NORMAL ;
Distance : 9

126
Tree	int sum = NUMBER_CONSTANT / f.length ;
Code	int sum = NUMBER_CONSTANT / f.length ;
Distance : 3

127
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

128
Tree	int sum = val.length ;
Code	int sum = val.length ;
Distance : 2

129
Tree	public int sum ;
Code	public int sum ;
Distance : 4

130
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

131
Tree	int sum = NUMBER_CONSTANT / values.length ;
Code	int sum = NUMBER_CONSTANT / values.length ;
Distance : 3

132
Tree	int sum = new Object ( true ) ;
Code	int sum = new Object ( true ) ;
Distance : 6

133
Tree	int sum = sum . IEEEremainder () . sum ;
Code	int sum = sum . IEEEremainder () . sum ;
Distance : 7

134
Tree	int sum = new Date ( true ) ;
Code	int sum = new Date ( true ) ;
Distance : 6

135
Tree	double sum = STRING_CONSTANT ;
Code	double sum = STRING_CONSTANT ;
Distance : 1

136
Tree	final int sum = getAbstractScope () ;
Code	final int sum = getAbstractScope () ;
Distance : 4

137
Tree	int sum = NUMBER_CONSTANT / sum () ;
Code	int sum = NUMBER_CONSTANT / sum () ;
Distance : 4

138
Tree	boolean sum = sum + NUMBER_CONSTANT ;
Code	boolean sum = sum + NUMBER_CONSTANT ;
Distance : 3

139
Tree	int sum [] = getDimension () ;
Code	int sum [] = getDimension () ;
Distance : 4

140
Tree	long sum = sum + - ;
Code	long sum = sum + - ;
Distance : 4

141
Tree	int sum = new SinFunction () ;
Code	int sum = new SinFunction () ;
Distance : 4

142
Tree	int sum = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Distance : 3

143
Tree	long sum = sum - NUMBER_CONSTANT ;
Code	long sum = sum - NUMBER_CONSTANT ;
Distance : 3

144
Tree	int floor [] = sum ;
Code	int floor [] = sum ;
Distance : 4

145
Tree	int sum = getAbstractScope () - sum ;
Code	int sum = getAbstractScope () - sum ;
Distance : 5

146
Tree	double sum = ( sum ) sum ;
Code	double sum = ( sum ) sum ;
Distance : 4

147
Tree	int getDimension [] = sum ;
Code	int getDimension [] = sum ;
Distance : 4

148
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

149
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

150
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

151
Tree	int sum = IncrementalCheckMode.GENERATE_IJS / NUMBER_CONSTANT ;
Code	int sum = IncrementalCheckMode.GENERATE_IJS / NUMBER_CONSTANT ;
Distance : 3

152
Tree	long sum = sum / sum ;
Code	long sum = sum / sum ;
Distance : 4

153
Tree	boolean sum = sum / sum ;
Code	boolean sum = sum / sum ;
Distance : 4

154
Tree	boolean sum = this . sum ;
Code	boolean sum = this . sum ;
Distance : 4

155
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

156
Tree	int sum = ( sum ) emptyList () ;
Code	int sum = ( sum ) emptyList () ;
Distance : 6

157
Tree	int sum = ( callSite.parent - NUMBER_CONSTANT ) ? <= : currentState.length ;
Code	int sum = ( callSite.parent - NUMBER_CONSTANT ) ? <= : currentState.length ;
Distance : 9

158
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? <= : currentState.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? <= : currentState.length ;
Distance : 9

159
Tree	int sum = ( sum ) floor () ;
Code	int sum = ( sum ) floor () ;
Distance : 6

160
Tree	int sum = ( global.root - NUMBER_CONSTANT ) ? <= : currentState.length ;
Code	int sum = ( global.root - NUMBER_CONSTANT ) ? <= : currentState.length ;
Distance : 9

161
Tree	int sum = NUMBER_CONSTANT / sample () ;
Code	int sum = NUMBER_CONSTANT / sample () ;
Distance : 4

162
Tree	int sum = val.length / NUMBER_CONSTANT ;
Code	int sum = val.length / NUMBER_CONSTANT ;
Distance : 3

163
Tree	int sum = STRING_CONSTANT + STRING_CONSTANT ;
Code	int sum = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 4

164
Tree	abstract int sum = this . sum ;
Code	abstract int sum = this . sum ;
Distance : 5

165
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? / : FunctionFlavor.NORMAL ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? / : FunctionFlavor.NORMAL ;
Distance : 9

166
Tree	public int [] [] sum ;
Code	public int [] [] sum ;
Distance : 5

167
Tree	final int sum = this . sum ;
Code	final int sum = this . sum ;
Distance : 5

168
Tree	abstract int sum = NUMBER_CONSTANT ;
Code	abstract int sum = NUMBER_CONSTANT ;
Distance : 2

169
Tree	int right [] = sum ;
Code	int right [] = sum ;
Distance : 4

170
Tree	int sum = sum / sum ;
Code	int sum = sum / sum ;
Distance : 4

171
Tree	int sum = ( sum ) getGeneratorUpperBounds () ;
Code	int sum = ( sum ) getGeneratorUpperBounds () ;
Distance : 6

172
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? / : currentState.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? / : currentState.length ;
Distance : 9

173
Tree	int sum = checkInitialize () - sum ;
Code	int sum = checkInitialize () - sum ;
Distance : 5

174
Tree	int sum = getAbstractScope () . sum ;
Code	int sum = getAbstractScope () . sum ;
Distance : 5

175
Tree	int sum = sum + CHAR_CONS ;
Code	int sum = sum + CHAR_CONS ;
Distance : 4

176
Tree	long sum = CHAR_CONS ;
Code	long sum = CHAR_CONS ;
Distance : 2

177
Tree	int sum = ( sum + NUMBER_CONSTANT ) ? {} : currentState.length ;
Code	int sum = ( sum + NUMBER_CONSTANT ) ? {} : currentState.length ;
Distance : 9

178
Tree	long sum = STRING_CONSTANT ;
Code	long sum = STRING_CONSTANT ;
Distance : 2

179
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

180
Tree	boolean sum = STRING_CONSTANT ;
Code	boolean sum = STRING_CONSTANT ;
Distance : 2

181
Tree	double sum = sum - NUMBER_CONSTANT ;
Code	double sum = sum - NUMBER_CONSTANT ;
Distance : 2

182
Tree	final double sum = this . sum ;
Code	final double sum = this . sum ;
Distance : 4

183
Tree	long sum = sum + NUMBER_CONSTANT ;
Code	long sum = sum + NUMBER_CONSTANT ;
Distance : 3

184
Tree	double sum = this . sum . sum ;
Code	double sum = this . sum . sum ;
Distance : 5

185
Tree	final double sum = NUMBER_CONSTANT ;
Code	final double sum = NUMBER_CONSTANT ;
Distance : 1

186
Tree	int sum = getDimension () . sum ;
Code	int sum = getDimension () . sum ;
Distance : 5

187
Tree	boolean sum = this . sum . sum ;
Code	boolean sum = this . sum . sum ;
Distance : 6

188
Tree	double sum = sum / sum ;
Code	double sum = sum / sum ;
Distance : 3

189
Tree	long sum = this . sum . sum ;
Code	long sum = this . sum . sum ;
Distance : 6

190
Tree	final double [] [] sum ;
Code	final double [] [] sum ;
Distance : 4

191
Tree	long sum = STRING_CONSTANT + STRING_CONSTANT ;
Code	long sum = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 4

192
Tree	double sum = STRING_CONSTANT + sum ;
Code	double sum = STRING_CONSTANT + sum ;
Distance : 3

193
Tree	double sum = STRING_CONSTANT + STRING_CONSTANT ;
Code	double sum = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

194
Tree	long sum = sum - sum ;
Code	long sum = sum - sum ;
Distance : 4

195
Tree	long sum = sum < < NUMBER_CONSTANT ;
Code	long sum = sum < < NUMBER_CONSTANT ;
Distance : 4

196
Tree	boolean sum = sum - NUMBER_CONSTANT ;
Code	boolean sum = sum - NUMBER_CONSTANT ;
Distance : 3

197
Tree	boolean sum = sum - sum ;
Code	boolean sum = sum - sum ;
Distance : 4

198
Tree	boolean sum = CHAR_CONS ;
Code	boolean sum = CHAR_CONS ;
Distance : 2

199
Tree	boolean sum = STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean sum = STRING_CONSTANT + STRING_CONSTANT ;
Distance : 4

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

1
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

2
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

3
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 8

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

5
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

6
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

7
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

8
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

9
Tree	Iterator iter = this . iter . iterator ( res.entries ) ;
Code	Iterator iter = this . iter . iterator ( res.entries ) ;
Distance : 6

10
Tree	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 10

11
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

12
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

13
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

15
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

16
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

17
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 7

18
Tree	Iterator entries = this . entries . iterator ( res.entries ) ;
Code	Iterator entries = this . entries . iterator ( res.entries ) ;
Distance : 6

19
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

20
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

21
Tree	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

22
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

23
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

24
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

25
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

26
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 8

27
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 8

28
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

29
Tree	Iterator iter = new Iterator () . iterator () ; Class
Code	Iterator iter = new Iterator () . iterator () ; Class
Distance : 4

30
Tree	Iterator iter = new Iterator () . iterator () ; Test
Code	Iterator iter = new Iterator () . iterator () ; Test
Distance : 4

31
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

33
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Distance : 6

34
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Distance : 5

35
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

36
Tree	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 10

37
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

38
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

39
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

40
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

41
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

42
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

43
Tree	Iterator iter = res.entries . iterator () . iterator () ; Class
Code	Iterator iter = res.entries . iterator () . iterator () ; Class
Distance : 5

44
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Distance : 13

45
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Distance : 7

46
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

47
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

48
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

49
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

50
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

51
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

52
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

53
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

54
Tree	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 12

55
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 8

56
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

57
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

60
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Distance : 9

61
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 9

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

63
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

64
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

65
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

66
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Distance : 7

68
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

69
Tree	Iterator iter = this . entries . iterator ( res.entries ) ;
Code	Iterator iter = this . entries . iterator ( res.entries ) ;
Distance : 5

70
Tree	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

72
Tree	Iterator iter = res.entries . iterator () . iterator () ; Test
Code	Iterator iter = res.entries . iterator () . iterator () ; Test
Distance : 5

73
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

74
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

75
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

76
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

77
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

78
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

79
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

80
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

81
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

82
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

83
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

84
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 9

85
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

86
Tree	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

87
Tree	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

89
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Distance : 7

90
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

91
Tree	Iterator iter = iter . iterator ( iter , super(); ) ;
Code	Iterator iter = iter . iterator ( iter , super(); ) ;
Distance : 6

92
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

93
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

94
Tree	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

95
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Distance : 10

96
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

97
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

98
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 6

100
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

101
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	Iterator iter = this . iter . iterator ( iter , iter ) ;
Code	Iterator iter = this . iter . iterator ( iter , iter ) ;
Distance : 8

103
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

104
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

105
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

106
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 8

107
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

108
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

109
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 9

110
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

111
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 8

112
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

113
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 15

114
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

115
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

116
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

117
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

118
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

119
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

120
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

121
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

122
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

123
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

124
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

125
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

127
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

128
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

129
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Distance : 11

130
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

131
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

132
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

133
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

134
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

135
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

136
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

137
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

139
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Distance : 5

140
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

141
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 7

142
Tree	Iterator iter = this . entries . iterator ( iter , iter ) ;
Code	Iterator iter = this . entries . iterator ( iter , iter ) ;
Distance : 7

143
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 7

144
Tree	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 8

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Distance : 10

146
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

147
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

150
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

151
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Distance : 6

152
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

153
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

154
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

156
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

157
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

158
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Distance : 7

160
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

161
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

162
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 7

163
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

164
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

165
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

166
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

168
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

169
Tree	Iterator iter ; Test
Code	Iterator iter ; Test
Distance : 6

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Distance : 9

171
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

172
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

173
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

174
Tree	Iterator iter ; Class
Code	Iterator iter ; Class
Distance : 6

175
Tree	Iterator iter = this . iter . iterator ( entries , iter ) ;
Code	Iterator iter = this . iter . iterator ( entries , iter ) ;
Distance : 8

176
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

177
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

178
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

179
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

180
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator entries = this . iter . iterator ( res.entries ) ;
Code	Iterator entries = this . iter . iterator ( res.entries ) ;
Distance : 7

183
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 15

185
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

186
Tree	Iterator iter = this . entries . iterator ( entries , iter ) ;
Code	Iterator iter = this . entries . iterator ( entries , iter ) ;
Distance : 7

187
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

189
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Distance : 11

190
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

191
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

192
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

193
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

194
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

195
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

196
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

197
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

198
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Distance : 13

199
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

1
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

2
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

3
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 8

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

5
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

6
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

7
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

8
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

9
Tree	Iterator iter = this . iter . iterator ( res.entries ) ;
Code	Iterator iter = this . iter . iterator ( res.entries ) ;
Distance : 6

10
Tree	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 10

11
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

12
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

13
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

15
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

16
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

17
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 7

18
Tree	Iterator entries = this . entries . iterator ( res.entries ) ;
Code	Iterator entries = this . entries . iterator ( res.entries ) ;
Distance : 6

19
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

20
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

21
Tree	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

22
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

23
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

24
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

25
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

26
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 8

27
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 8

28
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

29
Tree	Iterator iter = new Iterator () . iterator () ; Class
Code	Iterator iter = new Iterator () . iterator () ; Class
Distance : 4

30
Tree	Iterator iter = new Iterator () . iterator () ; Test
Code	Iterator iter = new Iterator () . iterator () ; Test
Distance : 4

31
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

33
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Distance : 6

34
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Distance : 5

35
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

36
Tree	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 10

37
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

38
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

39
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

40
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

41
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

42
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

43
Tree	Iterator iter = res.entries . iterator () . iterator () ; Class
Code	Iterator iter = res.entries . iterator () . iterator () ; Class
Distance : 5

44
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Distance : 13

45
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Distance : 7

46
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

47
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

48
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

49
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

50
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

51
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

52
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

53
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

54
Tree	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 12

55
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 8

56
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

57
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

60
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Distance : 9

61
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 9

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

63
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

64
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

65
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

66
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Distance : 7

68
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

69
Tree	Iterator iter = this . entries . iterator ( res.entries ) ;
Code	Iterator iter = this . entries . iterator ( res.entries ) ;
Distance : 5

70
Tree	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

72
Tree	Iterator iter = res.entries . iterator () . iterator () ; Test
Code	Iterator iter = res.entries . iterator () . iterator () ; Test
Distance : 5

73
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

74
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

75
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

76
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

77
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

78
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

79
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

80
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

81
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

82
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

83
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

84
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 9

85
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

86
Tree	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

87
Tree	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

89
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Distance : 7

90
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

91
Tree	Iterator iter = iter . iterator ( iter , super(); ) ;
Code	Iterator iter = iter . iterator ( iter , super(); ) ;
Distance : 6

92
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

93
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

94
Tree	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

95
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Distance : 10

96
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

97
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

98
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 6

100
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

101
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	Iterator iter = this . iter . iterator ( iter , iter ) ;
Code	Iterator iter = this . iter . iterator ( iter , iter ) ;
Distance : 8

103
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

104
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

105
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

106
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 8

107
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

108
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

109
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 9

110
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

111
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 8

112
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

113
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 15

114
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

115
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

116
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

117
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

118
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

119
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

120
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

121
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

122
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

123
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

124
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

125
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

127
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

128
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

129
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Distance : 11

130
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

131
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

132
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

133
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

134
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

135
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

136
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

137
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

139
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Distance : 5

140
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

141
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 7

142
Tree	Iterator iter = this . entries . iterator ( iter , iter ) ;
Code	Iterator iter = this . entries . iterator ( iter , iter ) ;
Distance : 7

143
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 7

144
Tree	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 8

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Distance : 10

146
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

147
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

150
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

151
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Distance : 6

152
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

153
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

154
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

156
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

157
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

158
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Distance : 7

160
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

161
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

162
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 7

163
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

164
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

165
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

166
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

168
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

169
Tree	Iterator iter ; Test
Code	Iterator iter ; Test
Distance : 6

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Distance : 9

171
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

172
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

173
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

174
Tree	Iterator iter ; Class
Code	Iterator iter ; Class
Distance : 6

175
Tree	Iterator iter = this . iter . iterator ( entries , iter ) ;
Code	Iterator iter = this . iter . iterator ( entries , iter ) ;
Distance : 8

176
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

177
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

178
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

179
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

180
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator entries = this . iter . iterator ( res.entries ) ;
Code	Iterator entries = this . iter . iterator ( res.entries ) ;
Distance : 7

183
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 15

185
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

186
Tree	Iterator iter = this . entries . iterator ( entries , iter ) ;
Code	Iterator iter = this . entries . iterator ( entries , iter ) ;
Distance : 7

187
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

189
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Distance : 11

190
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

191
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

192
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

193
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

194
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

195
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

196
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

197
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

198
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Distance : 13

199
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

1
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

2
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

3
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 8

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

5
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

6
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

7
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

8
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

9
Tree	Iterator iter = this . iter . iterator ( res.entries ) ;
Code	Iterator iter = this . iter . iterator ( res.entries ) ;
Distance : 6

10
Tree	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 10

11
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

12
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

13
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

15
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

16
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

17
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 7

18
Tree	Iterator entries = this . entries . iterator ( res.entries ) ;
Code	Iterator entries = this . entries . iterator ( res.entries ) ;
Distance : 6

19
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

20
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

21
Tree	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

22
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

23
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

24
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

25
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

26
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 8

27
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 8

28
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

29
Tree	Iterator iter = new Iterator () . iterator () ; Class
Code	Iterator iter = new Iterator () . iterator () ; Class
Distance : 4

30
Tree	Iterator iter = new Iterator () . iterator () ; Test
Code	Iterator iter = new Iterator () . iterator () ; Test
Distance : 4

31
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

33
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Distance : 6

34
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Distance : 5

35
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

36
Tree	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 10

37
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

38
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

39
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

40
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

41
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

42
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

43
Tree	Iterator iter = res.entries . iterator () . iterator () ; Class
Code	Iterator iter = res.entries . iterator () . iterator () ; Class
Distance : 5

44
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Distance : 13

45
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Distance : 7

46
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

47
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

48
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

49
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

50
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

51
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

52
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

53
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

54
Tree	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 12

55
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 8

56
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

57
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

60
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Distance : 9

61
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 9

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

63
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

64
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

65
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

66
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Distance : 7

68
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

69
Tree	Iterator iter = this . entries . iterator ( res.entries ) ;
Code	Iterator iter = this . entries . iterator ( res.entries ) ;
Distance : 5

70
Tree	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

72
Tree	Iterator iter = res.entries . iterator () . iterator () ; Test
Code	Iterator iter = res.entries . iterator () . iterator () ; Test
Distance : 5

73
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

74
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

75
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

76
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

77
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

78
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

79
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

80
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

81
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

82
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

83
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

84
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 9

85
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

86
Tree	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

87
Tree	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

89
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Distance : 7

90
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

91
Tree	Iterator iter = iter . iterator ( iter , super(); ) ;
Code	Iterator iter = iter . iterator ( iter , super(); ) ;
Distance : 6

92
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

93
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

94
Tree	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

95
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Distance : 10

96
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

97
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

98
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 6

100
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

101
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	Iterator iter = this . iter . iterator ( iter , iter ) ;
Code	Iterator iter = this . iter . iterator ( iter , iter ) ;
Distance : 8

103
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

104
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

105
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

106
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 8

107
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

108
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

109
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 9

110
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

111
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 8

112
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

113
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 15

114
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

115
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

116
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

117
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

118
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

119
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

120
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

121
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

122
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

123
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

124
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

125
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

127
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

128
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

129
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Distance : 11

130
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

131
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

132
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

133
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

134
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

135
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

136
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

137
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

139
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Distance : 5

140
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

141
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 7

142
Tree	Iterator iter = this . entries . iterator ( iter , iter ) ;
Code	Iterator iter = this . entries . iterator ( iter , iter ) ;
Distance : 7

143
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 7

144
Tree	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 8

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Distance : 10

146
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

147
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

150
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

151
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Distance : 6

152
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

153
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

154
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

156
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

157
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

158
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Distance : 7

160
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

161
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

162
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 7

163
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

164
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

165
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

166
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

168
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

169
Tree	Iterator iter ; Test
Code	Iterator iter ; Test
Distance : 6

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Distance : 9

171
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

172
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

173
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

174
Tree	Iterator iter ; Class
Code	Iterator iter ; Class
Distance : 6

175
Tree	Iterator iter = this . iter . iterator ( entries , iter ) ;
Code	Iterator iter = this . iter . iterator ( entries , iter ) ;
Distance : 8

176
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

177
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

178
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

179
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

180
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator entries = this . iter . iterator ( res.entries ) ;
Code	Iterator entries = this . iter . iterator ( res.entries ) ;
Distance : 7

183
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 15

185
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

186
Tree	Iterator iter = this . entries . iterator ( entries , iter ) ;
Code	Iterator iter = this . entries . iterator ( entries , iter ) ;
Distance : 7

187
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

189
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Distance : 11

190
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

191
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

192
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

193
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

194
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

195
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

196
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

197
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

198
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Distance : 13

199
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

1
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

2
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

3
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 8

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

5
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

6
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

7
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

8
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

9
Tree	Iterator iter = this . iter . iterator ( res.entries ) ;
Code	Iterator iter = this . iter . iterator ( res.entries ) ;
Distance : 6

10
Tree	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 10

11
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

12
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

13
Tree	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

15
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

16
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

17
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 7

18
Tree	Iterator entries = this . entries . iterator ( res.entries ) ;
Code	Iterator entries = this . entries . iterator ( res.entries ) ;
Distance : 6

19
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

20
Tree	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

21
Tree	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

22
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

23
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , entries . iterator () ) ;
Distance : 7

24
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

25
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

26
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 8

27
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 8

28
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

29
Tree	Iterator iter = new Iterator () . iterator () ; Class
Code	Iterator iter = new Iterator () . iterator () ; Class
Distance : 4

30
Tree	Iterator iter = new Iterator () . iterator () ; Test
Code	Iterator iter = new Iterator () . iterator () ; Test
Distance : 4

31
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

33
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Test
Distance : 6

34
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Class
Distance : 5

35
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

36
Tree	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 10

37
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 7

38
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

39
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

40
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

41
Tree	Iterator iter = iterator () ; Class
Code	Iterator iter = iterator () ; Class
Distance : 3

42
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

43
Tree	Iterator iter = res.entries . iterator () . iterator () ; Class
Code	Iterator iter = res.entries . iterator () . iterator () ; Class
Distance : 5

44
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Test
Distance : 13

45
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Test
Distance : 7

46
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

47
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

48
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

49
Tree	Iterator entries = iterator ( res.entries , res.entries ) ;
Code	Iterator entries = iterator ( res.entries , res.entries ) ;
Distance : 7

50
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

51
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

52
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

53
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

54
Tree	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator entries = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 12

55
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , res.entries ) ;
Distance : 8

56
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

57
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

60
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Test
Distance : 9

61
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 9

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

63
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

64
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

65
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

66
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Class
Distance : 7

68
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

69
Tree	Iterator iter = this . entries . iterator ( res.entries ) ;
Code	Iterator iter = this . entries . iterator ( res.entries ) ;
Distance : 5

70
Tree	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator entries = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

72
Tree	Iterator iter = res.entries . iterator () . iterator () ; Test
Code	Iterator iter = res.entries . iterator () . iterator () ; Test
Distance : 5

73
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

74
Tree	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

75
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

76
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 6

77
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

78
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

79
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

80
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

81
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

82
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

83
Tree	Iterator iter = iterator ( res.entries , res.entries ) ;
Code	Iterator iter = iterator ( res.entries , res.entries ) ;
Distance : 6

84
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 9

85
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

86
Tree	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 9

87
Tree	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( res.entries ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

89
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Class
Distance : 7

90
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

91
Tree	Iterator iter = iter . iterator ( iter , super(); ) ;
Code	Iterator iter = iter . iterator ( iter , super(); ) ;
Distance : 6

92
Tree	Iterator iter = iterator ( res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries ) ; Class
Distance : 5

93
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

94
Tree	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Code	Iterator iter = iter . iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT ) , res.entries ) ;
Distance : 11

95
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Class
Distance : 10

96
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

97
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

98
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

99
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 6

100
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

101
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	Iterator iter = this . iter . iterator ( iter , iter ) ;
Code	Iterator iter = this . iter . iterator ( iter , iter ) ;
Distance : 8

103
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

104
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

105
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Test
Distance : 5

106
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 8

107
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 5

108
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

109
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ;
Distance : 9

110
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

111
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , res.entries ) ;
Distance : 8

112
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

113
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 15

114
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

115
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Class
Distance : 7

116
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

117
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

118
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

119
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

120
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Class
Distance : 5

121
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

122
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Test
Distance : 5

123
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

124
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

125
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

127
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

128
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

129
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Test
Distance : 11

130
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

131
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

132
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

133
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

134
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

135
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

136
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

137
Tree	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 6

138
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

139
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Test
Distance : 5

140
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

141
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 7

142
Tree	Iterator iter = this . entries . iterator ( iter , iter ) ;
Code	Iterator iter = this . entries . iterator ( iter , iter ) ;
Distance : 7

143
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 7

144
Tree	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Code	Iterator iter = entries . iterator ( iterator ( res.entries ) , res.entries ) ;
Distance : 8

145
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; Test
Distance : 10

146
Tree	Iterator iter = iterator ( res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries ) ; Test
Distance : 5

147
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 11

150
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

151
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Class
Distance : 6

152
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

153
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

154
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

156
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

157
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

158
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

159
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Test
Distance : 7

160
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

161
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

162
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , iter . iterator () ) ;
Distance : 7

163
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 11

164
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

165
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

166
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 9

168
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Code	Iterator iter = iterator ( res.entries ) . iterator () ; Class
Distance : 5

169
Tree	Iterator iter ; Test
Code	Iterator iter ; Test
Distance : 6

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator ( STRING_CONSTANT ) ; Class
Distance : 9

171
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

172
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

173
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

174
Tree	Iterator iter ; Class
Code	Iterator iter ; Class
Distance : 6

175
Tree	Iterator iter = this . iter . iterator ( entries , iter ) ;
Code	Iterator iter = this . iter . iterator ( entries , iter ) ;
Distance : 8

176
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

177
Tree	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( res.entries , NUMBER_CONSTANT ) ;
Distance : 5

178
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

179
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , res.entries ) ;
Distance : 7

180
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

181
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

182
Tree	Iterator entries = this . iter . iterator ( res.entries ) ;
Code	Iterator entries = this . iter . iterator ( res.entries ) ;
Distance : 7

183
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , res.entries . iterator () ) ;
Distance : 8

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Class
Distance : 15

185
Tree	Iterator iter = iterator () ; Test
Code	Iterator iter = iterator () ; Test
Distance : 3

186
Tree	Iterator iter = this . entries . iterator ( entries , iter ) ;
Code	Iterator iter = this . entries . iterator ( entries , iter ) ;
Distance : 7

187
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 7

189
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Class
Distance : 11

190
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

191
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

192
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

193
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

194
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

195
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

196
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Test
Distance : 9

197
Tree	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Code	Iterator iter = iterator ( res.entries , res.entries ) ; Test
Distance : 7

198
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( res.entries ) , STRING_CONSTANT + STRING_CONSTANT ) ; Class
Distance : 13

199
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( isTypeCompatible ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

1
Tree	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Distance : 12

2
Tree	if ( this . renderAsPercentages ( divisor ) ) { return NaN ; }
Code	if ( this . renderAsPercentages ( divisor ) ) { return NaN ; }
Distance : 10

3
Tree	if ( options.skipNonTranspilationPasses ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

4
Tree	if ( this . divisor . getVertices () ) { return NaN ; }
Code	if ( this . divisor . getVertices () ) { return NaN ; }
Distance : 9

5
Tree	if ( ready ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

6
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

7
Tree	if ( options.skipNonTranspilationPasses . getText () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . getText () ) { return NaN ; }
Distance : 8

8
Tree	if ( divisor . getVertices ( divisor , PropertyCollapseLevel.ALL ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , PropertyCollapseLevel.ALL ) ) { return NaN ; }
Distance : 11

9
Tree	if ( this . divisor . getMethod () ) { return NaN ; }
Code	if ( this . divisor . getMethod () ) { return NaN ; }
Distance : 9

10
Tree	if ( options.skipNonTranspilationPasses ( getSlope () ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( getSlope () ) ) { return NaN ; }
Distance : 9

11
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

12
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

13
Tree	if ( divisor . isAssignableFrom ( divisor , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return NaN ; }
Distance : 11

14
Tree	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Distance : 9

15
Tree	if ( divisor . getInstrumentForCoverageOnly ( this ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( this ) ) { return NaN ; }
Distance : 9

16
Tree	if ( options.skipNonTranspilationPasses . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Distance : 10

17
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Distance : 12

18
Tree	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Distance : 8

19
Tree	if ( options.skipNonTranspilationPasses ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor ) ) { return NaN ; }
Distance : 8

20
Tree	if ( ready ( divisor , divisor , NaN ) ) { return NaN ; }
Code	if ( ready ( divisor , divisor , NaN ) ) { return NaN ; }
Distance : 11

21
Tree	if ( divisor . getVertices () ) { return NaN ; }
Code	if ( divisor . getVertices () ) { return NaN ; }
Distance : 7

22
Tree	if ( divisor . getVertices ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getVertices ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

23
Tree	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Distance : 9

24
Tree	if ( isTypeCompatible ( divisor , divisor , NaN ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor , divisor , NaN ) ) { return NaN ; }
Distance : 11

25
Tree	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Distance : 12

26
Tree	if ( this . optimizePropertyIndex ( divisor ) ) { return NaN ; }
Code	if ( this . optimizePropertyIndex ( divisor ) ) { return NaN ; }
Distance : 10

27
Tree	if ( ! wantedArgumentPositionIsValidForInvocation ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ! wantedArgumentPositionIsValidForInvocation ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

28
Tree	if ( ready ( getSlope () ) ) { return NaN ; }
Code	if ( ready ( getSlope () ) ) { return NaN ; }
Distance : 9

29
Tree	if ( divisor . isAliasDefinition ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

30
Tree	if ( options.skipNonTranspilationPasses . isAssignableFrom ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . isAssignableFrom ( divisor ) ) { return NaN ; }
Distance : 10

31
Tree	if ( ready ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

32
Tree	if ( options.skipNonTranspilationPasses ( divisor , divisor , NaN ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor , divisor , NaN ) ) { return NaN ; }
Distance : 11

33
Tree	if ( divisor . getVertices ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

34
Tree	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

35
Tree	if ( ! matchesOtherAffix ( divisor ) ) { return NaN ; }
Code	if ( ! matchesOtherAffix ( divisor ) ) { return NaN ; }
Distance : 9

36
Tree	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

37
Tree	if ( divisor . isAliasDefinition ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

38
Tree	if ( isTypeCompatible () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isTypeCompatible () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

39
Tree	if ( this . containsNow () ) { return NaN ; }
Code	if ( this . containsNow () ) { return NaN ; }
Distance : 8

40
Tree	if ( this . renderAsPercentages () ) { return NaN ; }
Code	if ( this . renderAsPercentages () ) { return NaN ; }
Distance : 8

41
Tree	if ( isPrimitiveWrapper ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

42
Tree	if ( isExprConditional ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( isExprConditional ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

44
Tree	if ( divisor < rhs.length ) { return NaN ; }
Code	if ( divisor < rhs.length ) { return NaN ; }
Distance : 6

45
Tree	if ( STRING_CONSTANT . getText ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getText ( divisor ) ) { return NaN ; }
Distance : 10

46
Tree	if ( isPrimitiveWrapper () ) { return NaN ; }
Code	if ( isPrimitiveWrapper () ) { return NaN ; }
Distance : 7

47
Tree	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Distance : 9

48
Tree	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

49
Tree	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

50
Tree	if ( STRING_CONSTANT + divisor ) { return NaN ; }
Code	if ( STRING_CONSTANT + divisor ) { return NaN ; }
Distance : 7

51
Tree	if ( this . chartArea () ) { return NaN ; }
Code	if ( this . chartArea () ) { return NaN ; }
Distance : 8

52
Tree	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Distance : 9

53
Tree	if ( divisor . getVertices ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getVertices ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

54
Tree	if ( ready ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

55
Tree	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

56
Tree	if ( options.skipNonTranspilationPasses . isSubtype ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . isSubtype ( divisor ) ) { return NaN ; }
Distance : 10

57
Tree	if ( ! isNonSingular ( divisor ) ) { return NaN ; }
Code	if ( ! isNonSingular ( divisor ) ) { return NaN ; }
Distance : 9

58
Tree	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

59
Tree	if ( divisor . isAssignableFrom ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

60
Tree	if ( ready ( divisor ) ) { return NaN ; }
Code	if ( ready ( divisor ) ) { return NaN ; }
Distance : 8

61
Tree	if ( ready ( isNotNull () ) ) { return NaN ; }
Code	if ( ready ( isNotNull () ) ) { return NaN ; }
Distance : 9

62
Tree	if ( divisor . isAliasDefinition ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 12

63
Tree	if ( options.skipNonTranspilationPasses . isSubtype () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . isSubtype () ) { return NaN ; }
Distance : 8

64
Tree	if ( ! ) <=
Code	if ( ! ) <=
Distance : 12

65
Tree	if ( options.skipNonTranspilationPasses ( this , divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( this , divisor ) ) { return NaN ; }
Distance : 10

66
Tree	if ( isTypeCompatible ( this , divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( this , divisor ) ) { return NaN ; }
Distance : 10

67
Tree	if ( divisor . isAliasDefinition ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

68
Tree	if ( isTypeCompatible ( false ) ) { return NaN ; }
Code	if ( isTypeCompatible ( false ) ) { return NaN ; }
Distance : 8

69
Tree	if ( ready () ) { return NaN ; }
Code	if ( ready () ) { return NaN ; }
Distance : 7

70
Tree	if ( divisor . isAliasDefinition ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor , false ) ) { return NaN ; }
Distance : 11

71
Tree	if ( isTypeCompatible () ) { return NaN ; }
Code	if ( isTypeCompatible () ) { return NaN ; }
Distance : 7

72
Tree	if ( divisor . getVertices ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , false ) ) { return NaN ; }
Distance : 11

73
Tree	if ( divisor . isAliasDefinition ( this ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( this ) ) { return NaN ; }
Distance : 9

74
Tree	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

75
Tree	if ( ready ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( ready ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

76
Tree	if ( options.skipNonTranspilationPasses () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses () ) { return NaN ; }
Distance : 7

77
Tree	if ( ! ) {}
Code	if ( ! ) {}
Distance : 12

78
Tree	if ( ! containsNow ( divisor ) ) { return NaN ; }
Code	if ( ! containsNow ( divisor ) ) { return NaN ; }
Distance : 9

79
Tree	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

80
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . NaN ( NaN ) ) { return NaN ; }
Distance : 12

81
Tree	if ( CHAR_CONS ) <=
Code	if ( CHAR_CONS ) <=
Distance : 12

82
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . incrementalCheckMode ( NaN ) ) { return NaN ; }
Distance : 12

83
Tree	if ( divisor . isAliasDefinition () ) { return NaN ; }
Code	if ( divisor . isAliasDefinition () ) { return NaN ; }
Distance : 7

84
Tree	if ( isPrimitiveWrapper ( false ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( false ) ) { return NaN ; }
Distance : 8

85
Tree	if ( this . divisor . getAllValues () ) { return NaN ; }
Code	if ( this . divisor . getAllValues () ) { return NaN ; }
Distance : 9

86
Tree	if ( STRING_CONSTANT . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Distance : 10

87
Tree	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

88
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

89
Tree	if ( divisor . divisor ( divisor ) ) { return NaN ; }
Code	if ( divisor . divisor ( divisor ) ) { return NaN ; }
Distance : 9

90
Tree	if ( divisor . isAssignableFrom ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

91
Tree	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

92
Tree	if ( divisor . isAliasDefinition ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( config.tracerMode ) ) { return NaN ; }
Distance : 9

93
Tree	if ( new VerifyingRecorder ( divisor ) . has () ) { return NaN ; }
Code	if ( new VerifyingRecorder ( divisor ) . has () ) { return NaN ; }
Distance : 11

94
Tree	if ( isPrimitiveWrapper () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isPrimitiveWrapper () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

95
Tree	if ( divisor < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( divisor < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 6

96
Tree	if ( divisor . isAssignableFrom ( this ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( this ) ) { return NaN ; }
Distance : 9

97
Tree	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Distance : 8

98
Tree	if ( options.skipNonTranspilationPasses ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

99
Tree	if ( divisor . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

100
Tree	if ( divisor . getVertices ( divisor , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return NaN ; }
Distance : 11

101
Tree	if ( divisor . isAssignableFrom ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor , false ) ) { return NaN ; }
Distance : 11

102
Tree	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

103
Tree	if ( divisor . isAssignableFrom () ) { return NaN ; }
Code	if ( divisor . isAssignableFrom () ) { return NaN ; }
Distance : 7

104
Tree	if ( this . divisor . getDaysInYearMax () ) { return NaN ; }
Code	if ( this . divisor . getDaysInYearMax () ) { return NaN ; }
Distance : 9

105
Tree	if ( isTypeCompatible ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( isTypeCompatible ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

106
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

107
Tree	if ( isPrimitiveWrapper () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 11

108
Tree	if ( divisor < startConfiguration.length ) { return NaN ; }
Code	if ( divisor < startConfiguration.length ) { return NaN ; }
Distance : 6

109
Tree	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

110
Tree	if ( final ) <=
Code	if ( final ) <=
Distance : 12

111
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Distance : 9

112
Tree	if ( divisor . isAliasDefinition ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 10

113
Tree	if ( this . containsNow ( divisor ) ) { return NaN ; }
Code	if ( this . containsNow ( divisor ) ) { return NaN ; }
Distance : 10

114
Tree	if ( ready () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( ready () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

115
Tree	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Distance : 12

116
Tree	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

117
Tree	if ( isPrimitiveWrapper ( this , divisor ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( this , divisor ) ) { return NaN ; }
Distance : 10

118
Tree	if ( ! wantedArgumentPositionIsValidForInvocation ( divisor ) ) { return NaN ; }
Code	if ( ! wantedArgumentPositionIsValidForInvocation ( divisor ) ) { return NaN ; }
Distance : 9

119
Tree	if ( divisor . isAssignableFrom ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 10

120
Tree	if ( ! containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ! containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

121
Tree	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Distance : 12

122
Tree	if ( isTypeCompatible ( getSlope () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( getSlope () ) ) { return NaN ; }
Distance : 9

123
Tree	if ( divisor . isAliasDefinition ( divisor , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor , Es6ToEs3Util.CANNOT_CONVERT_YET ) ) { return NaN ; }
Distance : 11

124
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor , false ) ) { return NaN ; }
Distance : 11

125
Tree	if ( options.skipNonTranspilationPasses ( false ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( false ) ) { return NaN ; }
Distance : 8

126
Tree	if ( STRING_CONSTANT . hasHaltingErrors ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . hasHaltingErrors ( divisor ) ) { return NaN ; }
Distance : 10

127
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

128
Tree	if ( options.skipNonTranspilationPasses . isAssignableFrom () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . isAssignableFrom () ) { return NaN ; }
Distance : 8

129
Tree	if ( ! isNonSingular ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ! isNonSingular ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

130
Tree	if ( divisor . getVertices ( this ) ) { return NaN ; }
Code	if ( divisor . getVertices ( this ) ) { return NaN ; }
Distance : 9

131
Tree	if ( divisor . isAssignableFrom ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 12

132
Tree	if ( options.skipNonTranspilationPasses () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

133
Tree	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Distance : 7

134
Tree	if ( ! matchesOtherAffix ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ! matchesOtherAffix ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

135
Tree	if ( options.skipNonTranspilationPasses () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 11

136
Tree	if ( divisor . getVertices ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . getVertices ( config.tracerMode ) ) { return NaN ; }
Distance : 9

137
Tree	if ( this . optimizePropertyIndex () ) { return NaN ; }
Code	if ( this . optimizePropertyIndex () ) { return NaN ; }
Distance : 8

138
Tree	if ( divisor . getVertices ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Code	if ( divisor . getVertices ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Distance : 13

139
Tree	if ( isTypeCompatible () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( isTypeCompatible () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 11

140
Tree	if ( new Es6SyntacticScopeCreator ( divisor ) . has () ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator ( divisor ) . has () ) { return NaN ; }
Distance : 11

141
Tree	if ( ready ( this , divisor ) ) { return NaN ; }
Code	if ( ready ( this , divisor ) ) { return NaN ; }
Distance : 10

142
Tree	if ( divisor . getVertices ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . getVertices ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 10

143
Tree	if ( STRING_CONSTANT . getClass ( getSlope () ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getClass ( getSlope () ) ) { return NaN ; }
Distance : 11

144
Tree	if ( this . chartArea ( divisor ) ) { return NaN ; }
Code	if ( this . chartArea ( divisor ) ) { return NaN ; }
Distance : 10

145
Tree	if ( this . divisor . getMethod ( divisor ) ) { return NaN ; }
Code	if ( this . divisor . getMethod ( divisor ) ) { return NaN ; }
Distance : 11

146
Tree	if ( new AtLeastDiscrepancy ( divisor ) . has ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( divisor ) . has ( NaN ) ) { return NaN ; }
Distance : 13

147
Tree	if ( divisor . isAssignableFrom ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 11

148
Tree	if ( this . divisor . getAllValues ( divisor ) ) { return NaN ; }
Code	if ( this . divisor . getAllValues ( divisor ) ) { return NaN ; }
Distance : 11

149
Tree	if ( ready () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( ready () . contains ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 11

150
Tree	if ( divisor . isAliasDefinition ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Distance : 13

151
Tree	if ( divisor . getVertices ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 12

152
Tree	if ( divisor . getInstrumentForCoverageOnly ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 10

153
Tree	if ( divisor . getInstrumentForCoverageOnly ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Distance : 13

154
Tree	if ( divisor < PropertyCollapseLevel.NONE ) { return NaN ; }
Code	if ( divisor < PropertyCollapseLevel.NONE ) { return NaN ; }
Distance : 6

155
Tree	if ( ready () ) { return this . NaN . NaN ; }
Code	if ( ready () ) { return this . NaN . NaN ; }
Distance : 7

156
Tree	if ( divisor . getVertices ( divisor ) ) { return this . NaN . NaN ; }
Code	if ( divisor . getVertices ( divisor ) ) { return this . NaN . NaN ; }
Distance : 9

157
Tree	if ( STRING_CONSTANT . getClass ( and () ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getClass ( and () ) ) { return NaN ; }
Distance : 11

158
Tree	if ( options.skipNonTranspilationPasses . getText ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . getText ( divisor ) ) { return NaN ; }
Distance : 10

159
Tree	if ( ready ( false ) ) { return NaN ; }
Code	if ( ready ( false ) ) { return NaN ; }
Distance : 8

160
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 12

161
Tree	if ( options.skipNonTranspilationPasses . equalsIgnoreCase () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses . equalsIgnoreCase () ) { return NaN ; }
Distance : 8

162
Tree	if ( new Es6SyntacticScopeCreator ( divisor ) . has ( NaN ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator ( divisor ) . has ( NaN ) ) { return NaN ; }
Distance : 13

163
Tree	if ( STRING_CONSTANT . getClass ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getClass ( divisor ) ) { return NaN ; }
Distance : 10

164
Tree	if ( new Converter ( divisor ) . has () ) { return NaN ; }
Code	if ( new Converter ( divisor ) . has () ) { return NaN ; }
Distance : 11

165
Tree	if ( this . divisor . getDaysInYearMax ( divisor ) ) { return NaN ; }
Code	if ( this . divisor . getDaysInYearMax ( divisor ) ) { return NaN ; }
Distance : 11

166
Tree	if ( new AtLeastDiscrepancy ( divisor ) . has () ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( divisor ) . has () ) { return NaN ; }
Distance : 11

167
Tree	if ( divisor . isAliasDefinition ( divisor ) ) { return this . NaN . NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor ) ) { return this . NaN . NaN ; }
Distance : 9

168
Tree	if ( options.skipNonTranspilationPasses () ) { return this . NaN . NaN ; }
Code	if ( options.skipNonTranspilationPasses () ) { return this . NaN . NaN ; }
Distance : 7

169
Tree	if ( new VerifyingRecorder ( divisor ) . has ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( divisor ) . has ( NaN ) ) { return NaN ; }
Distance : 13

170
Tree	if ( this . divisor . getVertices ( divisor ) ) { return NaN ; }
Code	if ( this . divisor . getVertices ( divisor ) ) { return NaN ; }
Distance : 11

171
Tree	if ( STRING_CONSTANT . equalsIgnoreCase ( getSlope () ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . equalsIgnoreCase ( getSlope () ) ) { return NaN ; }
Distance : 11

172
Tree	if ( divisor . isAssignableFrom ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( this . divisor , PropAccess.INCLUDE_STRAY_PROPS ) ) { return NaN ; }
Distance : 13

173
Tree	if ( isTypeCompatible () ) { return this . NaN . NaN ; }
Code	if ( isTypeCompatible () ) { return this . NaN . NaN ; }
Distance : 7

174
Tree	if ( new Converter ( divisor ) . has ( NaN ) ) { return NaN ; }
Code	if ( new Converter ( divisor ) . has ( NaN ) ) { return NaN ; }
Distance : 13

175
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

176
Tree	if ( divisor . isAssignableFrom ( divisor ) ) { return this . NaN . NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor ) ) { return this . NaN . NaN ; }
Distance : 9

177
Tree	if ( STRING_CONSTANT . hasHaltingErrors ( getSlope () ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . hasHaltingErrors ( getSlope () ) ) { return NaN ; }
Distance : 11

178
Tree	if ( isPrimitiveWrapper () ) { return this . NaN . NaN ; }
Code	if ( isPrimitiveWrapper () ) { return this . NaN . NaN ; }
Distance : 7

179
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return this . NaN . NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return this . NaN . NaN ; }
Distance : 9

180
Tree	if ( ready ( divisor , divisor ) ) { return NaN ; }
Code	if ( ready ( divisor , divisor ) ) { return NaN ; }
Distance : 9

181
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

182
Tree	if ( isTypeCompatible ( divisor , divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor , divisor ) ) { return NaN ; }
Distance : 9

183
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

184
Tree	if ( divisor . isZero ( divisor ) ) { return NaN ; }
Code	if ( divisor . isZero ( divisor ) ) { return NaN ; }
Distance : 9

185
Tree	if ( options.skipNonTranspilationPasses ( divisor , divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor , divisor ) ) { return NaN ; }
Distance : 9

186
Tree	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

187
Tree	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

188
Tree	if ( divisor ) { return divisor ; }
Code	if ( divisor ) { return divisor ; }
Distance : 7

189
Tree	if ( isExprConditional ( divisor , divisor ) ) { return NaN ; }
Code	if ( isExprConditional ( divisor , divisor ) ) { return NaN ; }
Distance : 9

190
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

191
Tree	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

192
Tree	if ( divisor . isAssignableFrom ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( onlyThoseClasses () , hasFirstMethodInStackTrace ( divisor ) ) ) { return NaN ; }
Distance : 15

193
Tree	if ( divisor . NaN ( divisor ) ) { return NaN ; }
Code	if ( divisor . NaN ( divisor ) ) { return NaN ; }
Distance : 9

194
Tree	if ( STRING_CONSTANT + isZero ) { return NaN ; }
Code	if ( STRING_CONSTANT + isZero ) { return NaN ; }
Distance : 7

195
Tree	if ( divisor . == ( divisor ) ) { return NaN ; }
Code	if ( divisor . == ( divisor ) ) { return NaN ; }
Distance : 8

196
Tree	if ( NaN ) { return NaN ; }
Code	if ( NaN ) { return NaN ; }
Distance : 7

197
Tree	if ( STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 7

198
Tree	if ( STRING_CONSTANT + divisor ) { return NaN ; }
Code	if ( STRING_CONSTANT + divisor ) { return NaN ; }
Distance : 7

199
Tree	if ( ready ( divisor , NaN , NaN ) ) { return NaN ; }
Code	if ( ready ( divisor , NaN , NaN ) ) { return NaN ; }
Distance : 11

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 144
Correct
========================================================================
True

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 1

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 1

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Distance : 1

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta () ? CHAR_CONS : null ; }
Distance : 7

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getNumberInstance () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getNumberInstance () : NaN ; }
Distance : 7

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 7

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Distance : 9

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( STRING_CONSTANT ) : NaN ; }
Distance : 9

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface () ? CHAR_CONS : null ; }
Distance : 7

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Distance : 7

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 4

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : NaN ; }
Distance : 7

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 0

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) ; }
Distance : 7

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : /= ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : /= ; }
Distance : 7

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getEmptyObjectLiteral () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getEmptyObjectLiteral () : NaN ; }
Distance : 7

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , divisor ) ; }
Distance : 7

20
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Distance : 1

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( STRING_CONSTANT ) : NaN ; }
Distance : 9

24
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

26
Tree	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.ELITISM_RATE , NaN ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.ELITISM_RATE , NaN ) ; }
Distance : 7

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

28
Tree	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS , NaN ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS , NaN ) ; }
Distance : 7

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , divisor ) ; }
Distance : 12

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

32
Tree	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( options.skipNonTranspilationPasses , NaN ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( options.skipNonTranspilationPasses , NaN ) ; }
Distance : 7

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , divisor ) ; }
Distance : 12

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? startPoint.length : FunctionFlavor.NORMAL ; }
Distance : 7

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Distance : 9

38
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : : ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : : ; }
Distance : 4

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface () : divisor ; }
Distance : 7

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface () : divisor ; }
Distance : 7

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Distance : 9

44
Tree	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END , NaN ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SUBARRAY_ENDS_AFTER_ARRAY_END , NaN ) ; }
Distance : 7

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , config.tracerMode ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , config.tracerMode ) ; }
Distance : 7

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBeta () : divisor ; }
Distance : 9

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( STRING_CONSTANT ) : NaN ; }
Distance : 9

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : case ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : case ; }
Distance : 7

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface ( STRING_CONSTANT ) : NaN ; }
Distance : 9

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( CHAR_CONS ) : divisor ; }
Distance : 9

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId ( NaN , false ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId ( NaN , false ) : divisor ; }
Distance : 9

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType ( NaN , false ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType ( NaN , false ) : divisor ; }
Distance : 9

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping ( NaN , false ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping ( NaN , false ) : divisor ; }
Distance : 9

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : NaN ; }
Distance : 5

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , divisor ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , divisor ) : NaN ; }
Distance : 11

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : FunctionFlavor.NORMAL ; }
Distance : 7

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW ( NaN , false ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW ( NaN , false ) : divisor ; }
Distance : 9

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( CHAR_CONS ) : divisor ; }
Distance : 9

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Distance : 11

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , that.zValues ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , that.zValues ) : NaN ; }
Distance : 11

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

63
Tree	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Distance : 2

64
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : getEnums ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : getEnums ; }
Distance : 7

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping () : NaN ; }
Distance : 5

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface () : divisor ; }
Distance : 7

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface () : divisor ; }
Distance : 7

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ) : NaN ; }
Distance : 11

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , startPoint.length ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( NUMBER_CONSTANT , startPoint.length ) : NaN ; }
Distance : 11

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Distance : 7

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : <= ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : <= ; }
Distance : 4

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Distance : 4

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBottomObject () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBottomObject () : divisor ; }
Distance : 9

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , divisor ) ; }
Distance : 12

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( NaN . escapeJson () ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( NaN . escapeJson () ) : divisor ; }
Distance : 12

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : FunctionFlavor.NORMAL ; }
Distance : 7

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( false , NaN ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( false , NaN ) : divisor ; }
Distance : 11

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Distance : 1

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( false , NaN ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( false , NaN ) : divisor ; }
Distance : 11

81
Tree	if ( isZero == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Distance : 2

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( false , NaN ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( false , NaN ) : divisor ; }
Distance : 11

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Distance : 1

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return this . JAVA_1_8 () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return this . JAVA_1_8 () ? CHAR_CONS : null ; }
Distance : 8

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface ( NaN . escapeJson () ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface ( NaN . escapeJson () ) : divisor ; }
Distance : 12

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf () ? CHAR_CONS : null ; }
Distance : 7

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Distance : 13

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return getYearMonthTypeUTC ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getYearMonthTypeUTC ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : FunctionFlavor.NORMAL ; }
Distance : 4

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return getReferenceName ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getReferenceName ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : divisor ; }
Distance : 7

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : isReturnTypeNullable ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : isReturnTypeNullable ; }
Distance : 7

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( NaN . getLastChild () ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( NaN . getLastChild () ) : divisor ; }
Distance : 12

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( config.tracerMode ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( config.tracerMode ) : divisor ; }
Distance : 9

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : NaN ; }
Distance : 5

100
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 1

101
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

102
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Distance : 13

103
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

104
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Distance : 13

105
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Distance : 11

106
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW () : NaN ; }
Distance : 5

107
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getLValue () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getLValue () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

108
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , leftOfArrow.type ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( NUMBER_CONSTANT , leftOfArrow.type ) ; }
Distance : 7

109
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( CHAR_CONS ) : divisor ; }
Distance : 9

110
Tree	if ( NaN == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Distance : 2

111
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Distance : 11

112
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

113
Tree	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Distance : 1

114
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( CHAR_CONS ) : divisor ; }
Distance : 9

115
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta ( NUMBER_CONSTANT , NUMBER_CONSTANT ) : NaN ; }
Distance : 11

116
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( STRING_CONSTANT ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( STRING_CONSTANT ) : divisor ; }
Distance : 9

117
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

118
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : /= ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : /= ; }
Distance : 4

119
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Distance : 7

120
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 4

121
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Distance : 7

122
Tree	if ( divisor == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NUMBER_CONSTANT ; }
Distance : 1

123
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

124
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : super ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : super ; }
Distance : 4

125
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getNumberInstance () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getNumberInstance () : divisor ; }
Distance : 9

126
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) : divisor ; }
Distance : 9

127
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Distance : 4

128
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

129
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( divisor , divisor , NUMBER_CONSTANT ) : divisor ; }
Distance : 13

130
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

131
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Distance : 4

132
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Distance : 4

133
Tree	if ( divisor == NUMBER_CONSTANT ) { return this . primitiveTypeOf () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return this . primitiveTypeOf () ? CHAR_CONS : null ; }
Distance : 8

134
Tree	if ( divisor == NUMBER_CONSTANT ) { return this . isDeclaredSloppy () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return this . isDeclaredSloppy () ? CHAR_CONS : null ; }
Distance : 8

135
Tree	if ( divisor == NUMBER_CONSTANT ) { return this . containsNow () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return this . containsNow () ? CHAR_CONS : null ; }
Distance : 8

136
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( false , NaN ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( false , NaN ) : divisor ; }
Distance : 11

137
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Distance : 7

138
Tree	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw NaN . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

139
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) : divisor ; }
Distance : 9

140
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . withLoose () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . withLoose () : divisor ; }
Distance : 9

141
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

142
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( config.tracerMode ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of ( config.tracerMode ) : divisor ; }
Distance : 9

143
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( NaN . hasChildren () ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface ( NaN . hasChildren () ) : divisor ; }
Distance : 12

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( this . getStringBuffer () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

1
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return null ; }
Distance : 6

2
Tree	if ( isZero . runMode ( CHAR_CONS ) ) { return divisor.isZero ; }
Code	if ( isZero . runMode ( CHAR_CONS ) ) { return divisor.isZero ; }
Distance : 7

3
Tree	if ( this . isZero . equals () ) { return false ; }
Code	if ( this . isZero . equals () ) { return false ; }
Distance : 7

4
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

5
Tree	if ( this . isZero . withLoose () ) { return null ; }
Code	if ( this . isZero . withLoose () ) { return null ; }
Distance : 7

6
Tree	if ( isZero . isChromePassEnabled ( divisor.isZero ) ) { return false ; }
Code	if ( isZero . isChromePassEnabled ( divisor.isZero ) ) { return false ; }
Distance : 6

7
Tree	if ( this . isZero . withLoose () ) { return false ; }
Code	if ( this . isZero . withLoose () ) { return false ; }
Distance : 7

8
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return isZero ; }
Distance : 6

9
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return isZero ; }
Distance : 6

10
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return isZero ; }
Distance : 6

11
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return isZero ; }
Distance : 6

12
Tree	if ( isZero . isChromePassEnabled ( STRING_CONSTANT ) ) { return false ; }
Code	if ( isZero . isChromePassEnabled ( STRING_CONSTANT ) ) { return false ; }
Distance : 7

13
Tree	if ( shouldRunRemoveUnusedCode ( divisor.isZero ) ) { return false ; }
Code	if ( shouldRunRemoveUnusedCode ( divisor.isZero ) ) { return false ; }
Distance : 4

14
Tree	if ( getRhs ( divisor.isZero ) ) { return false ; }
Code	if ( getRhs ( divisor.isZero ) ) { return false ; }
Distance : 4

15
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

16
Tree	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

17
Tree	if ( this . radiusGridlinesVisible () ) { return isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return isZero ; }
Distance : 5

18
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

19
Tree	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

20
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

21
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

22
Tree	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

23
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

24
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

25
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

26
Tree	if ( isZero . runMode ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . runMode ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

27
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

28
Tree	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return isZero ; }
Code	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return isZero ; }
Distance : 7

29
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return null ; }
Distance : 6

30
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return isZero ; }
Distance : 7

31
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return false ; }
Distance : 6

32
Tree	if ( isZero . regionMatches ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . regionMatches ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

33
Tree	if ( shouldRunRemoveUnusedCode ( isZero , NUMBER_CONSTANT , NaN ) ) { return false ; }
Code	if ( shouldRunRemoveUnusedCode ( isZero , NUMBER_CONSTANT , NaN ) ) { return false ; }
Distance : 9

34
Tree	if ( getRhs ( isZero , NUMBER_CONSTANT , NaN ) ) { return false ; }
Code	if ( getRhs ( isZero , NUMBER_CONSTANT , NaN ) ) { return false ; }
Distance : 9

35
Tree	if ( isTypeCompatible ( isZero , NUMBER_CONSTANT , isZero ) ) { return false ; }
Code	if ( isTypeCompatible ( isZero , NUMBER_CONSTANT , isZero ) ) { return false ; }
Distance : 9

36
Tree	if ( isTypeCompatible ( isZero . getFirstChild ( CHAR_CONS ) , false ) ) { return false ; }
Code	if ( isTypeCompatible ( isZero . getFirstChild ( CHAR_CONS ) , false ) ) { return false ; }
Distance : 12

37
Tree	if ( isZero . regionMatches ( CHAR_CONS ) ) { return null ; }
Code	if ( isZero . regionMatches ( CHAR_CONS ) ) { return null ; }
Distance : 7

38
Tree	if ( isZero . runMode ( STRING_CONSTANT ) ) { return false ; }
Code	if ( isZero . runMode ( STRING_CONSTANT ) ) { return false ; }
Distance : 7

39
Tree	if ( this . radiusGridlinesVisible () ) { return NUMBER_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NUMBER_CONSTANT ; }
Distance : 5

40
Tree	if ( isTypeCompatible ( isZero . escapeJson ( CHAR_CONS ) , false ) ) { return false ; }
Code	if ( isTypeCompatible ( isZero . escapeJson ( CHAR_CONS ) , false ) ) { return false ; }
Distance : 12

41
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

42
Tree	if ( this . getTracerMode () ) { return NUMBER_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NUMBER_CONSTANT ; }
Distance : 5

43
Tree	if ( this . getTracerMode () ) { return isZero ; }
Code	if ( this . getTracerMode () ) { return isZero ; }
Distance : 5

44
Tree	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return isZero ; }
Code	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return isZero ; }
Distance : 7

45
Tree	if ( this . isTopLevel () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NUMBER_CONSTANT ; }
Distance : 5

46
Tree	if ( isZero . regionMatches ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . regionMatches ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

47
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

48
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

49
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? : : divisor.isZero ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? : : divisor.isZero ; }
Distance : 9

50
Tree	if ( isZero . isChromePassEnabled ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . isChromePassEnabled ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

51
Tree	if ( isPrimitiveWrapper ( divisor.isZero ) ) { return false ; }
Code	if ( isPrimitiveWrapper ( divisor.isZero ) ) { return false ; }
Distance : 4

52
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

53
Tree	if ( this . isTopLevel () ) { return isZero ; }
Code	if ( this . isTopLevel () ) { return isZero ; }
Distance : 5

54
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 6

55
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN . of () : INF ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN . of () : INF ; }
Distance : 11

56
Tree	if ( this . getStringBuffer () ) { return NUMBER_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NUMBER_CONSTANT ; }
Distance : 5

57
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN . of () : isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN . of () : isZero ; }
Distance : 11

58
Tree	if ( this . getStringBuffer () ) { return isZero ; }
Code	if ( this . getStringBuffer () ) { return isZero ; }
Distance : 5

59
Tree	if ( this . getTracerMode () ) { return NaN ? NaN . of () : INF ; }
Code	if ( this . getTracerMode () ) { return NaN ? NaN . of () : INF ; }
Distance : 11

60
Tree	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

61
Tree	if ( shouldRunRemoveUnusedCode ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( shouldRunRemoveUnusedCode ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 7

62
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

63
Tree	if ( getRhs ( divisor.isZero ) ) { return NaN ? NaN : : ; }
Code	if ( getRhs ( divisor.isZero ) ) { return NaN ? NaN : : ; }
Distance : 7

64
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

65
Tree	if ( this . isTopLevel () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Code	if ( this . isTopLevel () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Distance : 8

66
Tree	if ( isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Distance : 7

67
Tree	if ( this . getTracerMode () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

68
Tree	if ( this . isZero . copySelf () ) { return null ; }
Code	if ( this . isZero . copySelf () ) { return null ; }
Distance : 7

69
Tree	if ( isTypeCompatible ( isZero , NUMBER_CONSTANT , NaN ) ) { return false ; }
Code	if ( isTypeCompatible ( isZero , NUMBER_CONSTANT , NaN ) ) { return false ; }
Distance : 9

70
Tree	if ( this . isZero . equals () ) { return null ; }
Code	if ( this . isZero . equals () ) { return null ; }
Distance : 7

71
Tree	if ( isZero . regionMatches ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . regionMatches ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

72
Tree	if ( this . getStringBuffer () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Code	if ( this . getStringBuffer () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Distance : 8

73
Tree	if ( this . isZero . copySelf () ) { return false ; }
Code	if ( this . isZero . copySelf () ) { return false ; }
Distance : 7

74
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

75
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

76
Tree	if ( this . isZero . escapeJson () ) { return null ; }
Code	if ( this . isZero . escapeJson () ) { return null ; }
Distance : 7

77
Tree	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

78
Tree	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

79
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return false ; }
Distance : 7

80
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

81
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

82
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return isZero ; }
Distance : 7

83
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 7

84
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

85
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return isZero ; }
Distance : 7

86
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

87
Tree	if ( this . isTopLevel () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

88
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return false ; }
Distance : 6

89
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return false ; }
Distance : 7

90
Tree	if ( isZero . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

91
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 6

92
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return null ; }
Distance : 6

93
Tree	if ( this . isZero . escapeJson () ) { return false ; }
Code	if ( this . isZero . escapeJson () ) { return false ; }
Distance : 7

94
Tree	if ( isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Code	if ( isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Distance : 6

95
Tree	if ( isZero . isChromePassEnabled ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isChromePassEnabled ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

96
Tree	if ( isZero . regionMatches ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . regionMatches ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

97
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return null ; }
Distance : 6

98
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

99
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return null ; }
Distance : 7

100
Tree	if ( isZero . isAliasDefinition ( STRING_CONSTANT ) ) { return false ; }
Code	if ( isZero . isAliasDefinition ( STRING_CONSTANT ) ) { return false ; }
Distance : 7

101
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return null ; }
Distance : 7

102
Tree	if ( isZero . runMode ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . runMode ( CHAR_CONS ) ) { return false ; }
Distance : 7

103
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

104
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return null ; }
Distance : 6

105
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Distance : 6

106
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return false ; }
Distance : 7

107
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

108
Tree	if ( new astValidationEnabled () . options.removeUnusedLocalVars () ) { return false ; }
Code	if ( new astValidationEnabled () . options.removeUnusedLocalVars () ) { return false ; }
Distance : 7

109
Tree	if ( new astValidationEnabled () . getDeclaringClass () ) { return false ; }
Code	if ( new astValidationEnabled () . getDeclaringClass () ) { return false ; }
Distance : 7

110
Tree	if ( new HarmonicFunction () . options.removeUnusedLocalVars () ) { return false ; }
Code	if ( new HarmonicFunction () . options.removeUnusedLocalVars () ) { return false ; }
Distance : 7

111
Tree	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return null ; }
Code	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return null ; }
Distance : 7

112
Tree	if ( this . getTracerMode () ) { return NaN ? NaN . of () : isZero ; }
Code	if ( this . getTracerMode () ) { return NaN ? NaN . of () : isZero ; }
Distance : 11

113
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return null ; }
Distance : 7

114
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return isZero ; }
Distance : 7

115
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return false ; }
Distance : 6

116
Tree	if ( this . radiusGridlinesVisible () ) { return false ; }
Code	if ( this . radiusGridlinesVisible () ) { return false ; }
Distance : 5

117
Tree	if ( new HarmonicFunction () . getDeclaringClass () ) { return false ; }
Code	if ( new HarmonicFunction () . getDeclaringClass () ) { return false ; }
Distance : 7

118
Tree	if ( this . getTracerMode () ) { return false ; }
Code	if ( this . getTracerMode () ) { return false ; }
Distance : 5

119
Tree	if ( shouldRunRemoveUnusedCode ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( shouldRunRemoveUnusedCode ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

120
Tree	if ( this . isTopLevel () ) { return false ; }
Code	if ( this . isTopLevel () ) { return false ; }
Distance : 5

121
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return null ; }
Distance : 6

122
Tree	if ( this . getStringBuffer () ) { return false ; }
Code	if ( this . getStringBuffer () ) { return false ; }
Distance : 5

123
Tree	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

124
Tree	if ( getRhs ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( getRhs ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

125
Tree	if ( isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isPrimitiveWrapper ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

126
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return null ; }
Distance : 7

127
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return false ; }
Distance : 6

128
Tree	if ( isZero . runMode ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . runMode ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

129
Tree	if ( isZero . isChromePassEnabled ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . isChromePassEnabled ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

130
Tree	if ( isTypeCompatible ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isTypeCompatible ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 7

131
Tree	if ( isZero . regionMatches ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . regionMatches ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

132
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

133
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return null ; }
Distance : 6

134
Tree	if ( isZero . regionMatches ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . regionMatches ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

135
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NUMBER_CONSTANT ; }
Distance : 6

136
Tree	if ( isZero . runMode ( divisor.isZero ) ) { return false ; }
Code	if ( isZero . runMode ( divisor.isZero ) ) { return false ; }
Distance : 6

137
Tree	if ( isTypeCompatible ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

138
Tree	if ( isZero . runMode ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . runMode ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

139
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

140
Tree	if ( isZero . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

141
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

142
Tree	if ( this . radiusGridlinesVisible () ) { return null ; }
Code	if ( this . radiusGridlinesVisible () ) { return null ; }
Distance : 5

143
Tree	if ( isZero . isChromePassEnabled ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isChromePassEnabled ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

144
Tree	if ( this . getTracerMode () ) { return null ; }
Code	if ( this . getTracerMode () ) { return null ; }
Distance : 5

145
Tree	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return false ; }
Distance : 7

146
Tree	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

147
Tree	if ( this . isTopLevel () ) { return null ; }
Code	if ( this . isTopLevel () ) { return null ; }
Distance : 5

148
Tree	if ( this . getStringBuffer () ) { return null ; }
Code	if ( this . getStringBuffer () ) { return null ; }
Distance : 5

149
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return false ; }
Distance : 6

150
Tree	if ( isTypeCompatible ( divisor.isZero ) ) { return false ; }
Code	if ( isTypeCompatible ( divisor.isZero ) ) { return false ; }
Distance : 4

151
Tree	if ( isTypeCompatible ( isZero . copySelf ( CHAR_CONS ) , false ) ) { return false ; }
Code	if ( isTypeCompatible ( isZero . copySelf ( CHAR_CONS ) , false ) ) { return false ; }
Distance : 12

152
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

153
Tree	if ( isZero . regionMatches ( STRING_CONSTANT ) ) { return false ; }
Code	if ( isZero . regionMatches ( STRING_CONSTANT ) ) { return false ; }
Distance : 7

154
Tree	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return null ; }
Code	if ( isZero . isChromePassEnabled ( CHAR_CONS ) ) { return null ; }
Distance : 7

155
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return null ; }
Distance : 6

156
Tree	if ( isZero . regionMatches ( divisor.isZero ) ) { return false ; }
Code	if ( isZero . regionMatches ( divisor.isZero ) ) { return false ; }
Distance : 6

157
Tree	if ( isZero . regionMatches ( CHAR_CONS ) ) { return isZero ; }
Code	if ( isZero . regionMatches ( CHAR_CONS ) ) { return isZero ; }
Distance : 7

158
Tree	if ( isTypeCompatible ( isZero . getLastChild ( CHAR_CONS ) , false ) ) { return false ; }
Code	if ( isTypeCompatible ( isZero . getLastChild ( CHAR_CONS ) , false ) ) { return false ; }
Distance : 12

159
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

160
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

161
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

162
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

163
Tree	if ( isZero . isChromePassEnabled ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isChromePassEnabled ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

164
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

165
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

166
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

167
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

168
Tree	if ( this . isTopLevel () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isTopLevel () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

169
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return isZero ; }
Distance : 6

170
Tree	if ( this . getStringBuffer () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

171
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return divisor.isZero ; }
Distance : 6

172
Tree	if ( isZero . runMode ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . runMode ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

173
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return isZero ; }
Distance : 6

174
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

175
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

176
Tree	if ( isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

177
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return isZero ; }
Distance : 6

178
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

179
Tree	if ( isZero . isAliasDefinition ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAliasDefinition ( divisor.isZero , false ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

180
Tree	if ( isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

181
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return NaN ? NaN : ( ; }
Distance : 9

182
Tree	if ( isZero . runMode ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . runMode ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

183
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

184
Tree	if ( isZero . regionMatches ( CHAR_CONS ) ) { return false ; }
Code	if ( isZero . regionMatches ( CHAR_CONS ) ) { return false ; }
Distance : 7

185
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

186
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

187
Tree	if ( isZero . runMode ( CHAR_CONS ) ) { return null ; }
Code	if ( isZero . runMode ( CHAR_CONS ) ) { return null ; }
Distance : 7

188
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

189
Tree	if ( this . radiusGridlinesVisible () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Distance : 8

190
Tree	if ( isZero . runMode ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . runMode ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

191
Tree	if ( this . getTracerMode () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Code	if ( this . getTracerMode () ) { return ( JAVA_1_8 ) divisor.isZero ; }
Distance : 8

192
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

193
Tree	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . isAliasDefinition ( CHAR_CONS ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

194
Tree	if ( isZero . runMode ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . runMode ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

195
Tree	if ( isZero . regionMatches ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( isZero . regionMatches ( STRING_CONSTANT ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 10

196
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

197
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

198
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

199
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? : : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? : : divisor.isZero ; }
Distance : 9

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ break; this . populationLimit = this ( populationLimit ) ; }
Code	{ break; this . populationLimit = this ( populationLimit ) ; }
Distance : 7

1
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

2
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Distance : 5

3
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; fireChangeEvent }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; fireChangeEvent }
Distance : 6

4
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 22

5
Tree	{ super ( populationLimit , elitismRate , populationLimit ) ; }
Code	{ super ( populationLimit , elitismRate , populationLimit ) ; }
Distance : 5

6
Tree	{ super(); this . populationLimit = ; ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = ; ( populationLimit ) ; super }
Distance : 7

7
Tree	{ this . populationLimit = populationLimit . elitismRate () ; }
Code	{ this . populationLimit = populationLimit . elitismRate () ; }
Distance : 7

8
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 18

9
Tree	{}
Code	{}
Distance : 12

10
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 12

11
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer ( populationLimit ) ; }
Distance : 7

12
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Distance : 9

13
Tree	{ break; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ break; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

14
Tree	{ continue; this . populationLimit = this ( populationLimit ) ; }
Code	{ continue; this . populationLimit = this ( populationLimit ) ; }
Distance : 7

15
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque ( populationLimit ) ; }
Distance : 7

16
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; }
Distance : 7

17
Tree	{ super ( populationLimit ) ; this . elitismRate = return; ; }
Code	{ super ( populationLimit ) ; this . elitismRate = return; ; }
Distance : 4

18
Tree	{ super ( elitismRate ) ; this . elitismRate = this ; }
Code	{ super ( elitismRate ) ; this . elitismRate = this ; }
Distance : 5

19
Tree	{ this . populationLimit = elitismRate ; super () ; }
Code	{ this . populationLimit = elitismRate ; super () ; }
Distance : 8

20
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

21
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate , Verification.EXPLICIT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate , Verification.EXPLICIT } ; }
Distance : 11

22
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 18

23
Tree	{ this . populationLimit = new SerializableTypeVariable ( populationLimit ) ; }
Code	{ this . populationLimit = new SerializableTypeVariable ( populationLimit ) ; }
Distance : 6

24
Tree	{ this ( LocalizedFormats.NOT_POSITIVE_BETA , populationLimit ) ; }
Code	{ this ( LocalizedFormats.NOT_POSITIVE_BETA , populationLimit ) ; }
Distance : 7

25
Tree	{ super(); this . populationLimit = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; }
Distance : 8

26
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 13

27
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 7

28
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 8

29
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 22

30
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

31
Tree	{ super ( elitismRate , elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , elitismRate , populationLimit ) ; }
Distance : 6

32
Tree	{ super ( populationLimit ) ; } Class
Code	{ super ( populationLimit ) ; } Class
Distance : 6

33
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Distance : 10

34
Tree	{ super ( populationLimit , elitismRate , elitismRate ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate , elitismRate ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 13

35
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

36
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Distance : 11

37
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; super }
Distance : 5

38
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

39
Tree	{ this . elitismRate = super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 8

40
Tree	{ ; }
Code	{ ; }
Distance : 9

41
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 14

42
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; fireAnnotationChanged }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; fireAnnotationChanged }
Distance : 5

43
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

44
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

45
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 13

46
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; if super }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; if super }
Distance : 15

47
Tree	{ continue; this . populationLimit = elitismRate ; }
Code	{ continue; this . populationLimit = elitismRate ; }
Distance : 8

48
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate , Verification.EXPLICIT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate , Verification.EXPLICIT } ; }
Distance : 11

49
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; if }
Distance : 5

50
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 5

51
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; }
Distance : 7

52
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Distance : 10

53
Tree	{ break; this . populationLimit = elitismRate ; }
Code	{ break; this . populationLimit = elitismRate ; }
Distance : 8

54
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Distance : 6

55
Tree	{ super ( populationLimit ) ; this . elitismRate = null ; }
Code	{ super ( populationLimit ) ; this . elitismRate = null ; }
Distance : 4

56
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

57
Tree	{ continue; }
Code	{ continue; }
Distance : 10

58
Tree	{ return; }
Code	{ return; }
Distance : 10

59
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 8

60
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 14

61
Tree	{ super ( populationLimit , elitismRate , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 13

62
Tree	{ super ( populationLimit ) ; this . elitismRate = super(); ; }
Code	{ super ( populationLimit ) ; this . elitismRate = super(); ; }
Distance : 4

63
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 8

64
Tree	{ this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = populationLimit ; }
Distance : 9

65
Tree	{ break; }
Code	{ break; }
Distance : 10

66
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 7

67
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

68
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 18

69
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

70
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; super }
Distance : 10

71
Tree	{ break; this . populationLimit = this ( populationLimit ) ; super }
Code	{ break; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

72
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 13

73
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; super }
Distance : 10

74
Tree	{ super ( populationLimit , elitismRate , populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate , populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 13

75
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 8

76
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 6

77
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Distance : 11

78
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Distance : 9

79
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 14

80
Tree	{ this . populationLimit = new DummyLocalizable ( populationLimit ) ; }
Code	{ this . populationLimit = new DummyLocalizable ( populationLimit ) ; }
Distance : 6

81
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

82
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

83
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

84
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; assertFalse }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; assertFalse }
Distance : 6

85
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

86
Tree	{ super(); }
Code	{ super(); }
Distance : 10

87
Tree	{ this ( LocalizedFormats.NOT_POSITIVE_SHAPE , populationLimit ) ; }
Code	{ this ( LocalizedFormats.NOT_POSITIVE_SHAPE , populationLimit ) ; }
Distance : 7

88
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

89
Tree	{ this . elitismRate = elitismRate . elitismRate ( populationLimit ) ; }
Code	{ this . elitismRate = elitismRate . elitismRate ( populationLimit ) ; }
Distance : 8

90
Tree	{ super ( populationLimit ) ; this . populationLimit = this ; }
Code	{ super ( populationLimit ) ; this . populationLimit = this ; }
Distance : 5

91
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 22

92
Tree	{ this . populationLimit = elitismRate . super () ; }
Code	{ this . populationLimit = elitismRate . super () ; }
Distance : 8

93
Tree	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Code	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Distance : 6

94
Tree	{ this . populationLimit = this ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = this ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 9

95
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; }
Distance : 7

96
Tree	{} array
Code	{} array
Distance : 12

97
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; static }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; static }
Distance : 10

98
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

99
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 14

100
Tree	{ this . populationLimit = elitismRate . super ( populationLimit ) ; }
Code	{ this . populationLimit = elitismRate . super ( populationLimit ) ; }
Distance : 7

101
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

102
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 8

103
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

104
Tree	{ this ( populationLimit , ( elitismRate ) null ) ; }
Code	{ this ( populationLimit , ( elitismRate ) null ) ; }
Distance : 6

105
Tree	{ continue; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ continue; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

106
Tree	{ this . elitismRate = super ( elitismRate ) ; }
Code	{ this . elitismRate = super ( elitismRate ) ; }
Distance : 6

107
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 22

108
Tree	{ this ( LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE , populationLimit ) ; }
Code	{ this ( LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE , populationLimit ) ; }
Distance : 7

109
Tree	{ this . populationLimit = new JUnit44RunnerImpl ( populationLimit ) ; }
Code	{ this . populationLimit = new JUnit44RunnerImpl ( populationLimit ) ; }
Distance : 6

110
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

111
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate , Verification.EXPLICIT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate , Verification.EXPLICIT } ; }
Distance : 11

112
Tree	{} class
Code	{} class
Distance : 12

113
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

114
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Distance : 10

115
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Distance : 11

116
Tree	{ this ( LocalizedFormats.OUT_OF_RANGE_SIMPLE , populationLimit ) ; }
Code	{ this ( LocalizedFormats.OUT_OF_RANGE_SIMPLE , populationLimit ) ; }
Distance : 7

117
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; if short }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; if short }
Distance : 15

118
Tree	{ super ( populationLimit ) ; this . elitismRate = this ; }
Code	{ super ( populationLimit ) ; this . elitismRate = this ; }
Distance : 4

119
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; super }
Distance : 8

120
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

121
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; super }
Distance : 8

122
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 8

123
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 13

124
Tree	{ super ( populationLimit , elitismRate , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 13

125
Tree	{ this . populationLimit = populationLimit . super ( populationLimit ) ; }
Code	{ this . populationLimit = populationLimit . super ( populationLimit ) ; }
Distance : 7

126
Tree	{ this . populationLimit = new ThreadSafeDelegatingErrorManager ( populationLimit ) ; }
Code	{ this . populationLimit = new ThreadSafeDelegatingErrorManager ( populationLimit ) ; }
Distance : 6

127
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 14

128
Tree	{ this . elitismRate = elitismRate ; super () ; }
Code	{ this . elitismRate = elitismRate ; super () ; }
Distance : 9

129
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 11

130
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager ( populationLimit ) ; }
Distance : 7

131
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 11

132
Tree	{ super ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; }
Distance : 5

133
Tree	{ continue; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ continue; this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

134
Tree	{ return; this . populationLimit = this ( populationLimit ) ; }
Code	{ return; this . populationLimit = this ( populationLimit ) ; }
Distance : 7

135
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 12

136
Tree	{ this . populationLimit = super ( populationLimit ) ; }
Code	{ this . populationLimit = super ( populationLimit ) ; }
Distance : 6

137
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 9

138
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; }
Distance : 7

139
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 5

140
Tree	{ this . elitismRate = this ( populationLimit ) ; }
Code	{ this . elitismRate = this ( populationLimit ) ; }
Distance : 7

141
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 18

142
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; super char }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; super char }
Distance : 15

143
Tree	{ return; this . populationLimit = elitismRate ; }
Code	{ return; this . populationLimit = elitismRate ; }
Distance : 8

144
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; super }
Distance : 8

145
Tree	{ this . populationLimit = this ( elitismRate ) ; }
Code	{ this . populationLimit = this ( elitismRate ) ; }
Distance : 5

146
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

147
Tree	{ this . elitismRate = elitismRate . elitismRate () ; }
Code	{ this . elitismRate = elitismRate . elitismRate () ; }
Distance : 8

148
Tree	{ this . elitismRate = populationLimit . super () ; }
Code	{ this . elitismRate = populationLimit . super () ; }
Distance : 9

149
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 14

150
Tree	{ super ( populationLimit , populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit , populationLimit ) ; }
Distance : 5

151
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

152
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

153
Tree	{ this . populationLimit = populationLimit ; { () ; }
Code	{ this . populationLimit = populationLimit ; { () ; }
Distance : 8

154
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 12

155
Tree	{ continue; this . populationLimit = this ( populationLimit ) ; super }
Code	{ continue; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

156
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

157
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; else }
Distance : 5

158
Tree	{ return; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ return; this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

159
Tree	{ ; } array
Code	{ ; } array
Distance : 10

160
Tree	{ super ( populationLimit ) ; } Test
Code	{ super ( populationLimit ) ; } Test
Distance : 6

161
Tree	{ super ( populationLimit , elitismRate , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate , elitismRate ) ; }
Distance : 4

162
Tree	{ super ( populationLimit ) ; this . populationLimit = null ; }
Code	{ super ( populationLimit ) ; this . populationLimit = null ; }
Distance : 5

163
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 11

164
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; fireAnnotationChanged }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; fireAnnotationChanged }
Distance : 6

165
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 5

166
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Distance : 10

167
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 7

168
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 7

169
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; if char }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = new double [] { populationLimit } ; if char }
Distance : 15

170
Tree	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Distance : 6

171
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 12

172
Tree	{ return; this . populationLimit = this ( populationLimit ) ; super }
Code	{ return; this . populationLimit = this ( populationLimit ) ; super }
Distance : 8

173
Tree	{ super ( elitismRate ) ; this . populationLimit = this ; }
Code	{ super ( elitismRate ) ; this . populationLimit = this ; }
Distance : 6

174
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , } ; }
Distance : 14

175
Tree	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 9

176
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 8

177
Tree	{ this . populationLimit = this ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = this ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 10

178
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Distance : 7

179
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 8

180
Tree	{ ; } class
Code	{ ; } class
Distance : 10

181
Tree	{ this . populationLimit = super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ this . populationLimit = super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 8

182
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate . elitismRate () ; }
Distance : 7

183
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Distance : 9

184
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

185
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; super }
Distance : 10

186
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; super }
Distance : 8

187
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

188
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Distance : 9

189
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 11

190
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath ( populationLimit ) ; }
Distance : 7

191
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

192
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { STRING_CONSTANT , STRING_CONSTANT } ; }
Distance : 11

193
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate , interpolator.currentDerivative } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate , interpolator.currentDerivative } ; }
Distance : 11

194
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

195
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 10

196
Tree	{ this . populationLimit = elitismRate . super ( elitismRate ) ; }
Code	{ this . populationLimit = elitismRate . super ( elitismRate ) ; }
Distance : 6

197
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; disableTypeCheck }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; disableTypeCheck }
Distance : 6

198
Tree	{ this . elitismRate = populationLimit ; super () ; }
Code	{ this . elitismRate = populationLimit ; super () ; }
Distance : 9

199
Tree	{} notifyListeners
Code	{} notifyListeners
Distance : 12

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; if }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; if }
Distance : 10

1
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 8

2
Tree	{ this ( chromosomes , populationLimit , Verification.EXPLICIT ) ; }
Code	{ this ( chromosomes , populationLimit , Verification.EXPLICIT ) ; }
Distance : 6

3
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

4
Tree	{ this ( new Matches ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new Matches ( chromosomes ) , populationLimit ) ; }
Distance : 9

5
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { interpolator.currentDerivative , invocationListeners } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { interpolator.currentDerivative , invocationListeners } ; }
Distance : 11

6
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; super }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; super }
Distance : 12

7
Tree	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 14

8
Tree	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

9
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes , populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes , populationLimit } ; }
Distance : 11

10
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

11
Tree	{ this ( chromosomes , populationLimit , true ) ; }
Code	{ this ( chromosomes , populationLimit , true ) ; }
Distance : 6

12
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Boolean.TRUE , invocationListeners } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Boolean.TRUE , invocationListeners } ; }
Distance : 11

13
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

14
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 9

15
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

16
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [] <> ; }
Distance : 7

17
Tree	{ return; this . chromosomes = populationLimit ; }
Code	{ return; this . chromosomes = populationLimit ; }
Distance : 10

18
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

19
Tree	{ super ( chromosomes , elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; }
Distance : 5

20
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

21
Tree	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 5

22
Tree	{ ; }
Code	{ ; }
Distance : 11

23
Tree	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Code	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Distance : 7

24
Tree	{ this ( labelLinksVisible , populationLimit ) ; }
Code	{ this ( labelLinksVisible , populationLimit ) ; }
Distance : 7

25
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

26
Tree	{ null this . chromosomes = populationLimit ; }
Code	{ null this . chromosomes = populationLimit ; }
Distance : 10

27
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

28
Tree	{ continue; this . chromosomes = populationLimit ; }
Code	{ continue; this . chromosomes = populationLimit ; }
Distance : 10

29
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

30
Tree	{ this ( chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , false ) ; }
Distance : 7

31
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 8

32
Tree	{ this ( populationLimit , populationLimit , false ) ; }
Code	{ this ( populationLimit , populationLimit , false ) ; }
Distance : 7

33
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Distance : 8

34
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 13

35
Tree	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

36
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; super }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; super }
Distance : 10

37
Tree	{ this . chromosomes = new double [] { populationLimit } ; }
Code	{ this . chromosomes = new double [] { populationLimit } ; }
Distance : 10

38
Tree	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 14

39
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

40
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

41
Tree	{ this ( new ThrowsException ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new ThrowsException ( chromosomes ) , populationLimit ) ; }
Distance : 9

42
Tree	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 14

43
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

44
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 5

45
Tree	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( null , chromosomes , null , null ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 14

46
Tree	{}
Code	{}
Distance : 14

47
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 14

48
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

49
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { interpolator.currentDerivative . elitismRate () } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { interpolator.currentDerivative . elitismRate () } ; }
Distance : 12

50
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 6

51
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , false , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , false , NUMBER_CONSTANT } ; }
Distance : 15

52
Tree	{ this ( chromosomes , elitismRate , null ) ; }
Code	{ this ( chromosomes , elitismRate , null ) ; }
Distance : 7

53
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; static }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; static }
Distance : 12

54
Tree	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , false ) ; }
Distance : 7

55
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 13

56
Tree	{ super ( chromosomes , chromosomes ) ; }
Code	{ super ( chromosomes , chromosomes ) ; }
Distance : 6

57
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

58
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 9

59
Tree	{ super ( chromosomes , populationLimit ) ; chromosomes = NUMBER_CONSTANT / chromosomes ; }
Code	{ super ( chromosomes , populationLimit ) ; chromosomes = NUMBER_CONSTANT / chromosomes ; }
Distance : 5

60
Tree	{ super ( chromosomes , populationLimit ) ; chromosomes = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; chromosomes = NUMBER_CONSTANT / elitismRate ; }
Distance : 5

61
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

62
Tree	{ this ( dialBackgroundPaint , populationLimit ) ; }
Code	{ this ( dialBackgroundPaint , populationLimit ) ; }
Distance : 7

63
Tree	{ this ( new SerializableTypeVariable ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new SerializableTypeVariable ( chromosomes ) , populationLimit ) ; }
Distance : 9

64
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

65
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

66
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

67
Tree	{ this . chromosomes = new int [] { populationLimit } ; }
Code	{ this . chromosomes = new int [] { populationLimit } ; }
Distance : 10

68
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [] <> ; }
Distance : 7

69
Tree	{ super ( Locale.JAPAN , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Locale.JAPAN , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

70
Tree	{ super(); this . chromosomes = populationLimit ; }
Code	{ super(); this . chromosomes = populationLimit ; }
Distance : 10

71
Tree	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

72
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 9

73
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 14

74
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

75
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

76
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { super , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

77
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; static }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; static }
Distance : 10

78
Tree	{ super ( dialBackgroundPaint , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( dialBackgroundPaint , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

79
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

80
Tree	{ this ( chromosomes , populationLimit , LocalizedFormats.NUMBER_TOO_SMALL ) ; }
Code	{ this ( chromosomes , populationLimit , LocalizedFormats.NUMBER_TOO_SMALL ) ; }
Distance : 6

81
Tree	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 11

82
Tree	{ this ( chromosomes , populationLimit , super(); ) ; }
Code	{ this ( chromosomes , populationLimit , super(); ) ; }
Distance : 6

83
Tree	{ super ( chromosomes , populationLimit ) ; BarRenderer.defaultBarPainter = source.nDev ; }
Code	{ super ( chromosomes , populationLimit ) ; BarRenderer.defaultBarPainter = source.nDev ; }
Distance : 4

84
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super short }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super short }
Distance : 15

85
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

86
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 9

87
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 13

88
Tree	{ continue; this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ continue; this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 14

89
Tree	{ this . chromosomes = chromosomes ; this () ; }
Code	{ this . chromosomes = chromosomes ; this () ; }
Distance : 9

90
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 7

91
Tree	{ this ( Locale.JAPAN , populationLimit ) ; }
Code	{ this ( Locale.JAPAN , populationLimit ) ; }
Distance : 7

92
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 9

93
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

94
Tree	{ this ( chromosomes , new populationLimit ( populationLimit ) ) ; }
Code	{ this ( chromosomes , new populationLimit ( populationLimit ) ) ; }
Distance : 7

95
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { problem.y . elitismRate () } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { problem.y . elitismRate () } ; }
Distance : 12

96
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Distance : 8

97
Tree	{ super(); this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Code	{ super(); this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Distance : 10

98
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { LocalizedFormats.USER_EXCEPTION . elitismRate () } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { LocalizedFormats.USER_EXCEPTION . elitismRate () } ; }
Distance : 12

99
Tree	{ this ( chromosomes , populationLimit , elitismRate , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , elitismRate , elitismRate , false ) ; }
Distance : 7

100
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; assertFalse }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; assertFalse }
Distance : 12

101
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ( chromosomes ) ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ( chromosomes ) ; }
Distance : 6

102
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 8

103
Tree	{ this ( chromosomes , populationLimit , chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , chromosomes , elitismRate , false ) ; }
Distance : 7

104
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 11

105
Tree	{ this ( chromosomes . populationLimit () , populationLimit , populationLimit , elitismRate ) ; }
Code	{ this ( chromosomes . populationLimit () , populationLimit , populationLimit , elitismRate ) ; }
Distance : 8

106
Tree	{ this ( chromosomes , new MathException ( populationLimit ) ) ; }
Code	{ this ( chromosomes , new MathException ( populationLimit ) ) ; }
Distance : 7

107
Tree	{ super ( chromosomes , populationLimit ) ; setFixedRangeAxisSpaceForSubplots = source.m1 ; }
Code	{ super ( chromosomes , populationLimit ) ; setFixedRangeAxisSpaceForSubplots = source.m1 ; }
Distance : 4

108
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

109
Tree	{ this . chromosomes = new short [] { populationLimit } ; }
Code	{ this . chromosomes = new short [] { populationLimit } ; }
Distance : 10

110
Tree	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Code	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Distance : 6

111
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 7

112
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

113
Tree	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Distance : 6

114
Tree	{ this . chromosomes = chromosomes ; }
Code	{ this . chromosomes = chromosomes ; }
Distance : 10

115
Tree	{ this ( chromosomes , populationLimit , null ) ; }
Code	{ this ( chromosomes , populationLimit , null ) ; }
Distance : 6

116
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , CHAR_CONS , NUMBER_CONSTANT } ; }
Distance : 15

117
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Boolean.TRUE . } () } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { Boolean.TRUE . } () } ; }
Distance : 12

118
Tree	{ this . chromosomes = populationLimit ; this () ; }
Code	{ this . chromosomes = populationLimit ; this () ; }
Distance : 8

119
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

120
Tree	{ this ( chromosomes , new newBeta ( populationLimit ) ) ; }
Code	{ this ( chromosomes , new newBeta ( populationLimit ) ) ; }
Distance : 7

121
Tree	{ this . chromosomes = elitismRate ; this () ; }
Code	{ this . chromosomes = elitismRate ; this () ; }
Distance : 9

122
Tree	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

123
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

124
Tree	{ this ( new DummyLocalizable ( chromosomes ) , populationLimit ) ; }
Code	{ this ( new DummyLocalizable ( chromosomes ) , populationLimit ) ; }
Distance : 9

125
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 6

126
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

127
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 8

128
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 13

129
Tree	{ this . chromosomes = super ( chromosomes ) ; }
Code	{ this . chromosomes = super ( chromosomes ) ; }
Distance : 8

130
Tree	{} class
Code	{} class
Distance : 14

131
Tree	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 12

132
Tree	{} array
Code	{} array
Distance : 14

133
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; super extends }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; super extends }
Distance : 10

134
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

135
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

136
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

137
Tree	{ this ( chromosomes , new DEFAULT_EXPANSION_FACTOR ( populationLimit ) ) ; }
Code	{ this ( chromosomes , new DEFAULT_EXPANSION_FACTOR ( populationLimit ) ) ; }
Distance : 7

138
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; super short }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; super short }
Distance : 10

139
Tree	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

140
Tree	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

141
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [] <> ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [] <> ; }
Distance : 7

142
Tree	{ continue; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ continue; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

143
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; fireAnnotationChanged extends }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; fireAnnotationChanged extends }
Distance : 10

144
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = chromosomes ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = chromosomes ; }
Distance : 4

145
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super : }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super : }
Distance : 15

146
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super += }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super += }
Distance : 15

147
Tree	{ this ( chromosomes , populationLimit , SimplexSolver.DEFAULT_ULPS ) ; }
Code	{ this ( chromosomes , populationLimit , SimplexSolver.DEFAULT_ULPS ) ; }
Distance : 6

148
Tree	{ this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; }
Distance : 9

149
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { interpolator.currentDerivative , elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { interpolator.currentDerivative , elitismRate } ; }
Distance : 11

150
Tree	{ this ( chromosomes , populationLimit , populationLimit , chromosomes , false ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , chromosomes , false ) ; }
Distance : 7

151
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes , populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes , populationLimit } ; }
Distance : 11

152
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; fireAnnotationChanged short }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; fireAnnotationChanged short }
Distance : 10

153
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes , populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes , populationLimit } ; }
Distance : 11

154
Tree	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Distance : 9

155
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Distance : 5

156
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Distance : 9

157
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 14

158
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 8

159
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Distance : 9

160
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super super }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = new double [] { chromosomes } ; super super }
Distance : 15

161
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 12

162
Tree	{ super ( chromosomes , populationLimit ) ; setFixedRangeAxisSpaceForSubplots = MonotoneChain ; }
Code	{ super ( chromosomes , populationLimit ) ; setFixedRangeAxisSpaceForSubplots = MonotoneChain ; }
Distance : 4

163
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Distance : 9

164
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { problem.y , invocationListeners } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { problem.y , invocationListeners } ; }
Distance : 11

165
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireAnnotationChanged }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; fireAnnotationChanged }
Distance : 10

166
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

167
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

168
Tree	{ this . chromosomes = new float [] { populationLimit } ; }
Code	{ this . chromosomes = new float [] { populationLimit } ; }
Distance : 10

169
Tree	{ return; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ return; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

170
Tree	{ this ( chromosomes , populationLimit , getSimplifiedName ) ; }
Code	{ this ( chromosomes , populationLimit , getSimplifiedName ) ; }
Distance : 6

171
Tree	{ this . populationLimit = populationLimit ; this () ; }
Code	{ this . populationLimit = populationLimit ; this () ; }
Distance : 9

172
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

173
Tree	{ this ( chromosomes . populationLimit () , populationLimit , chromosomes , elitismRate ) ; }
Code	{ this ( chromosomes . populationLimit () , populationLimit , chromosomes , elitismRate ) ; }
Distance : 8

174
Tree	{ this ( chromosomes . populationLimit () , populationLimit , populationLimit , chromosomes ) ; }
Code	{ this ( chromosomes . populationLimit () , populationLimit , populationLimit , chromosomes ) ; }
Distance : 9

175
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 9

176
Tree	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

177
Tree	{ super ( chromosomes , populationLimit ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Distance : 5

178
Tree	{ ; } array
Code	{ ; } array
Distance : 12

179
Tree	{ super ( chromosomes , populationLimit ) ; setFixedRangeAxisSpaceForSubplots = source.nDev ; }
Code	{ super ( chromosomes , populationLimit ) ; setFixedRangeAxisSpaceForSubplots = source.nDev ; }
Distance : 4

180
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 9

181
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 10

182
Tree	{ super ( ComposableFunction.SINH , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( ComposableFunction.SINH , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

183
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new Coordinates3D [] { elitismRate } ; }
Distance : 9

184
Tree	{} notifyListeners
Code	{} notifyListeners
Distance : 14

185
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes , populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes , populationLimit } ; }
Distance : 11

186
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , super , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , super , NUMBER_CONSTANT } ; }
Distance : 15

187
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , false , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , false , NUMBER_CONSTANT } ; }
Distance : 15

188
Tree	{ ; } class
Code	{ ; } class
Distance : 12

189
Tree	{ this . elitismRate = super ( chromosomes ) ; }
Code	{ this . elitismRate = super ( chromosomes ) ; }
Distance : 9

190
Tree	{ this ( populationLimit , populationLimit , null ) ; }
Code	{ this ( populationLimit , populationLimit , null ) ; }
Distance : 7

191
Tree	{ super ( dialBackgroundPaint , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( dialBackgroundPaint , populationLimit , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

192
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

193
Tree	{ this . populationLimit = super ( chromosomes ) ; }
Code	{ this . populationLimit = super ( chromosomes ) ; }
Distance : 8

194
Tree	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 12

195
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; if }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; if }
Distance : 12

196
Tree	{ this . chromosomes = super ( populationLimit ) ; }
Code	{ this . chromosomes = super ( populationLimit ) ; }
Distance : 8

197
Tree	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 12

198
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ( elitismRate ) ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ( elitismRate ) ; }
Distance : 5

199
Tree	{ this ( chromosomes . populationLimit () , populationLimit , elitismRate , elitismRate ) ; }
Code	{ this ( chromosomes . populationLimit () , populationLimit , elitismRate , elitismRate ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Distance : 7

1
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; }
Distance : 8

2
Tree	{ return new RealMatrixImpl < chromosomes > () ; }
Code	{ return new RealMatrixImpl < chromosomes > () ; }
Distance : 5

3
Tree	{ return chromosomes == null ? super(); : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? super(); : chromosomes . iterator () ; }
Distance : 7

4
Tree	{ return chromosomes . iterator () != super(); ; }
Code	{ return chromosomes . iterator () != super(); ; }
Distance : 4

5
Tree	{ return chromosomes . iterator () ; } Class
Code	{ return chromosomes . iterator () ; } Class
Distance : 3

6
Tree	{ return ! iterator ( chromosomes ) ; } Test
Code	{ return ! iterator ( chromosomes ) ; } Test
Distance : 6

7
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; }
Distance : 6

8
Tree	{ return chromosomes == null ? continue; : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? continue; : chromosomes . iterator () ; }
Distance : 7

9
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Class
Code	{ return chromosomes . iterator ( chromosomes ) ; } Class
Distance : 6

10
Tree	{ return chromosomes + chromosomes . iterator () ; } Test
Code	{ return chromosomes + chromosomes . iterator () ; } Test
Distance : 4

11
Tree	{ return chromosomes == null ? break; : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? break; : chromosomes . iterator () ; }
Distance : 7

12
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Test
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Test
Distance : 5

13
Tree	{ return new chromosomes () ; } array
Code	{ return new chromosomes () ; } array
Distance : 5

14
Tree	{ return ! chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return ! chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 7

15
Tree	{ return new chromosomes () ; } class
Code	{ return new chromosomes () ; } class
Distance : 5

16
Tree	{ return chromosomes + chromosomes . getChromosomes () ; }
Code	{ return chromosomes + chromosomes . getChromosomes () ; }
Distance : 4

17
Tree	{ return chromosomes . iterator ( return; ) ; }
Code	{ return chromosomes . iterator ( return; ) ; }
Distance : 5

18
Tree	{ return ! chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return ! chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Distance : 7

19
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; }
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; }
Distance : 6

20
Tree	{ return chromosomes . iterator ( chromosomes , NUMBER_CONSTANT , chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( chromosomes , NUMBER_CONSTANT , chromosomes . getChromosomes () ) ; }
Distance : 11

21
Tree	{ return getChromosomes ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Distance : 7

22
Tree	{ return chromosomes . iterator () . getChromosomes ( getChromosomes () ) ; }
Code	{ return chromosomes . iterator () . getChromosomes ( getChromosomes () ) ; }
Distance : 7

23
Tree	{ return chromosomes . iterator () () chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () () chromosomes . getChromosomes () ; }
Distance : 6

24
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 6

25
Tree	{ return chromosomes == super(); chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == super(); chromosomes chromosomes . iterator () ; }
Distance : 5

26
Tree	{ return chromosomes . getChromosomes () . < chromosomes > iterator () ; }
Code	{ return chromosomes . getChromosomes () . < chromosomes > iterator () ; }
Distance : 5

27
Tree	{ return chromosomes . getChromosomes ( chromosomes , NUMBER_CONSTANT , chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes , NUMBER_CONSTANT , chromosomes . getChromosomes () ) ; }
Distance : 10

28
Tree	{ return chromosomes . getChromosomes () . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes ( chromosomes ) ; }
Distance : 6

29
Tree	{ return chromosomes . getChromosomes () . iterator () ; }
Code	{ return chromosomes . getChromosomes () . iterator () ; }
Distance : 2

30
Tree	{ return new chromosomes ( chromosomes ) ; } notifyListeners
Code	{ return new chromosomes ( chromosomes ) ; } notifyListeners
Distance : 6

31
Tree	{ return chromosomes . getChromosomes () . < chromosomes > getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . < chromosomes > getChromosomes () ; }
Distance : 6

32
Tree	{ return iterator ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Distance : 8

33
Tree	{ return new RealMatrixImpl () ; }
Code	{ return new RealMatrixImpl () ; }
Distance : 4

34
Tree	{ return new ByteArrayInputStream () ; }
Code	{ return new ByteArrayInputStream () ; }
Distance : 4

35
Tree	{ return chromosomes ; }
Code	{ return chromosomes ; }
Distance : 5

36
Tree	{ return iterator ( chromosomes ) ; }
Code	{ return iterator ( chromosomes ) ; }
Distance : 5

37
Tree	{ return iterator () ; } Class
Code	{ return iterator () ; } Class
Distance : 4

38
Tree	{ return chromosomes - NUMBER_CONSTANT ; } array
Code	{ return chromosomes - NUMBER_CONSTANT ; } array
Distance : 6

39
Tree	{ return iterator ( chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () ) ; }
Distance : 4

40
Tree	{ return chromosomes - NUMBER_CONSTANT ; }
Code	{ return chromosomes - NUMBER_CONSTANT ; }
Distance : 5

41
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 6

42
Tree	{ return chromosomes - NUMBER_CONSTANT ; } notifyListeners
Code	{ return chromosomes - NUMBER_CONSTANT ; } notifyListeners
Distance : 6

43
Tree	{ return chromosomes . iterator ( LocalizedFormats.NO_DATA ) ; }
Code	{ return chromosomes . iterator ( LocalizedFormats.NO_DATA ) ; }
Distance : 5

44
Tree	{ return chromosomes ; } class
Code	{ return chromosomes ; } class
Distance : 6

45
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Class
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Class
Distance : 5

46
Tree	{ return chromosomes ; } array
Code	{ return chromosomes ; } array
Distance : 6

47
Tree	{ return new chromosomes ( chromosomes ) ; } class
Code	{ return new chromosomes ( chromosomes ) ; } class
Distance : 6

48
Tree	{ return ( double [] ) chromosomes . iterator () ; }
Code	{ return ( double [] ) chromosomes . iterator () ; }
Distance : 5

49
Tree	{ return iterator ( chromosomes ) ; } Class
Code	{ return iterator ( chromosomes ) ; } Class
Distance : 6

50
Tree	{ return iterator ( chromosomes ) ; } Test
Code	{ return iterator ( chromosomes ) ; } Test
Distance : 6

51
Tree	{ return ! iterator ( chromosomes ) ; }
Code	{ return ! iterator ( chromosomes ) ; }
Distance : 5

52
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

53
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 6

54
Tree	{ return this . chromosomes ; } array
Code	{ return this . chromosomes ; } array
Distance : 5

55
Tree	{ return ( long [] ) chromosomes . iterator () ; }
Code	{ return ( long [] ) chromosomes . iterator () ; }
Distance : 5

56
Tree	{ return new chromosomes ( chromosomes ) ; }
Code	{ return new chromosomes ( chromosomes ) ; }
Distance : 5

57
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

58
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; }
Distance : 3

59
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; }
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; }
Distance : 6

60
Tree	{ return ( byte [] ) chromosomes . iterator () ; }
Code	{ return ( byte [] ) chromosomes . iterator () ; }
Distance : 5

61
Tree	{ return chromosomes == null chromosomes chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null chromosomes chromosomes . getChromosomes () ; }
Distance : 6

62
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 5

63
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 6

64
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . iterator () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . iterator () ; }
Distance : 7

65
Tree	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Distance : 9

66
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

67
Tree	{ return iterator ( chromosomes . iterator () , getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . iterator () , getChromosomes () ) ; }
Distance : 7

68
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 6

69
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Class
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Class
Distance : 5

70
Tree	{ return chromosomes < < NUMBER_CONSTANT ; } notifyListeners
Code	{ return chromosomes < < NUMBER_CONSTANT ; } notifyListeners
Distance : 6

71
Tree	{ return chromosomes . getChromosomes () . iterator ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes () . iterator ( chromosomes ) ; }
Distance : 5

72
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

73
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; }
Distance : 7

74
Tree	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; }
Distance : 6

75
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Test
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Test
Distance : 5

76
Tree	{ return new BigFraction () ; }
Code	{ return new BigFraction () ; }
Distance : 4

77
Tree	{ return chromosomes . iterator () . iterator ( getChromosomes () ) ; }
Code	{ return chromosomes . iterator () . iterator ( getChromosomes () ) ; }
Distance : 6

78
Tree	{ return chromosomes < < NUMBER_CONSTANT ; } class
Code	{ return chromosomes < < NUMBER_CONSTANT ; } class
Distance : 6

79
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Distance : 6

80
Tree	{ return chromosomes () ; } class
Code	{ return chromosomes () ; } class
Distance : 5

81
Tree	{ return new RealMatrixImpl ( chromosomes ) ; }
Code	{ return new RealMatrixImpl ( chromosomes ) ; }
Distance : 5

82
Tree	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Distance : 5

83
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 4

84
Tree	{ return ! chromosomes . iterator () ; } Class
Code	{ return ! chromosomes . iterator () ; } Class
Distance : 3

85
Tree	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Distance : 3

86
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Test
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Test
Distance : 6

87
Tree	{ return chromosomes . iterator ( chromosomes , NUMBER_CONSTANT , chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes , NUMBER_CONSTANT , chromosomes . iterator () ) ; }
Distance : 10

88
Tree	{ return this . chromosomes . getChromosomes () ; }
Code	{ return this . chromosomes . getChromosomes () ; }
Distance : 4

89
Tree	{ return new chromosomes () . getChromosomes () ; }
Code	{ return new chromosomes () . getChromosomes () ; }
Distance : 3

90
Tree	{ return ! chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return ! chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Distance : 6

91
Tree	{ return super . getChromosomes () ; }
Code	{ return super . getChromosomes () ; }
Distance : 3

92
Tree	{ return new ByteArrayInputStream ( chromosomes ) ; }
Code	{ return new ByteArrayInputStream ( chromosomes ) ; }
Distance : 5

93
Tree	{ return chromosomes . iterator () . getChromosomes () ; }
Code	{ return chromosomes . iterator () . getChromosomes () ; }
Distance : 4

94
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Distance : 6

95
Tree	{ return false ; }
Code	{ return false ; }
Distance : 5

96
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 6

97
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . getChromosomes () ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . getChromosomes () ; }
Distance : 9

98
Tree	{ return CompilerOptions.J2clPassMode ; }
Code	{ return CompilerOptions.J2clPassMode ; }
Distance : 5

99
Tree	{ return chromosomes < < NUMBER_CONSTANT ; } array
Code	{ return chromosomes < < NUMBER_CONSTANT ; } array
Distance : 6

100
Tree	{ return chromosomes () ; }
Code	{ return chromosomes () ; }
Distance : 4

101
Tree	{ return chromosomes == null ? null : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? null : chromosomes . iterator () ; }
Distance : 7

102
Tree	{ return ( int [] ) chromosomes . iterator () ; }
Code	{ return ( int [] ) chromosomes . iterator () ; }
Distance : 5

103
Tree	{ return ( chromosomes ) chromosomes . iterator () ; }
Code	{ return ( chromosomes ) chromosomes . iterator () ; }
Distance : 4

104
Tree	{ return getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () ) ; }
Distance : 3

105
Tree	{ return chromosomes . getChromosomes () () chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () () chromosomes . getChromosomes () ; }
Distance : 5

106
Tree	{ return chromosomes . iterator ( null ) ; }
Code	{ return chromosomes . iterator ( null ) ; }
Distance : 5

107
Tree	{ return new chromosomes ( chromosomes ) ; } array
Code	{ return new chromosomes ( chromosomes ) ; } array
Distance : 6

108
Tree	{ return Locale.US ; }
Code	{ return Locale.US ; }
Distance : 5

109
Tree	{ return chromosomes . iterator ( java.util.Locale.US ) ; }
Code	{ return chromosomes . iterator ( java.util.Locale.US ) ; }
Distance : 5

110
Tree	{ return chromosomes . iterator ( LocalizedFormats.NON_POSITIVE_POLYNOMIAL_DEGREE ) ; }
Code	{ return chromosomes . iterator ( LocalizedFormats.NON_POSITIVE_POLYNOMIAL_DEGREE ) ; }
Distance : 5

111
Tree	{ return new BigFraction < chromosomes > () ; }
Code	{ return new BigFraction < chromosomes > () ; }
Distance : 5

112
Tree	{ return new iterator () ; }
Code	{ return new iterator () ; }
Distance : 3

113
Tree	{ return ! getChromosomes ( chromosomes ) ; }
Code	{ return ! getChromosomes ( chromosomes ) ; }
Distance : 5

114
Tree	{ return new chromosomes () . iterator () ; }
Code	{ return new chromosomes () . iterator () ; }
Distance : 2

115
Tree	{ return chromosomes . iterator () . iterator () ; }
Code	{ return chromosomes . iterator () . iterator () ; }
Distance : 3

116
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 6

117
Tree	{ return super . iterator () ; }
Code	{ return super . iterator () ; }
Distance : 2

118
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Distance : 7

119
Tree	{ return chromosomes . iterator () != null ; }
Code	{ return chromosomes . iterator () != null ; }
Distance : 4

120
Tree	{ return this . chromosomes ; }
Code	{ return this . chromosomes ; }
Distance : 4

121
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

122
Tree	{ return ! chromosomes . iterator () ; }
Code	{ return ! chromosomes . iterator () ; }
Distance : 2

123
Tree	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Distance : 5

124
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Class
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Class
Distance : 8

125
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () ) ; }
Distance : 5

126
Tree	{ return new ByteArrayInputStream < chromosomes > () ; }
Code	{ return new ByteArrayInputStream < chromosomes > () ; }
Distance : 5

127
Tree	{ return changeListeners ; }
Code	{ return changeListeners ; }
Distance : 5

128
Tree	{ return Pair ; }
Code	{ return Pair ; }
Distance : 5

129
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . iterator () ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . iterator () ; }
Distance : 7

130
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () ; }
Distance : 4

131
Tree	{ return super . iterator () ; } Test
Code	{ return super . iterator () ; } Test
Distance : 3

132
Tree	{ return iterator ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Distance : 9

133
Tree	{ return ! chromosomes . iterator () ; } Test
Code	{ return ! chromosomes . iterator () ; } Test
Distance : 3

134
Tree	{ return new iterator ( chromosomes ) ; }
Code	{ return new iterator ( chromosomes ) ; }
Distance : 5

135
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 6

136
Tree	{ return chromosomes () ; } array
Code	{ return chromosomes () ; } array
Distance : 5

137
Tree	{ return getChromosomes () ; }
Code	{ return getChromosomes () ; }
Distance : 3

138
Tree	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Code	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Distance : 5

139
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } Class
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } Class
Distance : 4

140
Tree	{ return new chromosomes () . iterator () ; } Test
Code	{ return new chromosomes () . iterator () ; } Test
Distance : 3

141
Tree	{ return ( ( chromosomes ) chromosomes ) . getChromosomes () ; }
Code	{ return ( ( chromosomes ) chromosomes ) . getChromosomes () ; }
Distance : 7

142
Tree	{ return this . chromosomes ; } notifyListeners
Code	{ return this . chromosomes ; } notifyListeners
Distance : 5

143
Tree	{ return this . chromosomes . iterator () ; } Test
Code	{ return this . chromosomes . iterator () ; } Test
Distance : 4

144
Tree	{ return new chromosomes () . iterator () ; } Class
Code	{ return new chromosomes () . iterator () ; } Class
Distance : 3

145
Tree	{ return chromosomes . iterator () ; } Test
Code	{ return chromosomes . iterator () ; } Test
Distance : 3

146
Tree	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

147
Tree	{ return iterator () ; } Test
Code	{ return iterator () ; } Test
Distance : 4

148
Tree	{ return chromosomes - NUMBER_CONSTANT ; } class
Code	{ return chromosomes - NUMBER_CONSTANT ; } class
Distance : 6

149
Tree	{ return true ; }
Code	{ return true ; }
Distance : 5

150
Tree	{ return ! chromosomes . getChromosomes () ; }
Code	{ return ! chromosomes . getChromosomes () ; }
Distance : 3

151
Tree	{ return chromosomes . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes ) ; }
Distance : 5

152
Tree	{ return this . chromosomes . iterator () ; }
Code	{ return this . chromosomes . iterator () ; }
Distance : 3

153
Tree	{ return chromosomes . iterator ( super(); ) ; }
Code	{ return chromosomes . iterator ( super(); ) ; }
Distance : 5

154
Tree	{ return new iterator < chromosomes > () ; }
Code	{ return new iterator < chromosomes > () ; }
Distance : 5

155
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Test
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Test
Distance : 7

156
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Test
Code	{ return chromosomes . iterator ( chromosomes ) ; } Test
Distance : 6

157
Tree	{ return this . chromosomes ; } class
Code	{ return this . chromosomes ; } class
Distance : 5

158
Tree	{ return chromosomes . getChromosomes () != null ; }
Code	{ return chromosomes . getChromosomes () != null ; }
Distance : 5

159
Tree	{ return getChromosomes ( chromosomes ) ; }
Code	{ return getChromosomes ( chromosomes ) ; }
Distance : 4

160
Tree	{ return chromosomes . getChromosomes ( null ) ; }
Code	{ return chromosomes . getChromosomes ( null ) ; }
Distance : 6

161
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 5

162
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Distance : 5

163
Tree	{ return chromosomes . getChromosomes () () chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () () chromosomes . iterator () ; }
Distance : 4

164
Tree	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Distance : 6

165
Tree	{ return new chromosomes () ; }
Code	{ return new chromosomes () ; }
Distance : 4

166
Tree	{ return chromosomes == null chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == null chromosomes chromosomes . iterator () ; }
Distance : 5

167
Tree	{ return ! chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return ! chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 7

168
Tree	{ return new BigFraction ( chromosomes ) ; }
Code	{ return new BigFraction ( chromosomes ) ; }
Distance : 5

169
Tree	{ return chromosomes < < NUMBER_CONSTANT ; }
Code	{ return chromosomes < < NUMBER_CONSTANT ; }
Distance : 5

170
Tree	{ return chromosomes . iterator () . iterator ( iterator () ) ; }
Code	{ return chromosomes . iterator () . iterator ( iterator () ) ; }
Distance : 6

171
Tree	{ return chromosomes + chromosomes . iterator () ; }
Code	{ return chromosomes + chromosomes . iterator () ; }
Distance : 3

172
Tree	{ return chromosomes == return; chromosomes chromosomes . iterator () ; }
Code	{ return chromosomes == return; chromosomes chromosomes . iterator () ; }
Distance : 5

173
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Class
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Class
Distance : 6

174
Tree	{ return chromosomes . getChromosomes ( chromosomes , chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes , chromosomes ) ; }
Distance : 7

175
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Distance : 5

176
Tree	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Distance : 4

177
Tree	{ return iterator ( chromosomes . iterator () , iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () , iterator () ) ; }
Distance : 7

178
Tree	{ return chromosomes . iterator () != return; ; }
Code	{ return chromosomes . iterator () != return; ; }
Distance : 4

179
Tree	{ return chromosomes . iterator () . getChromosomes ( iterator () ) ; }
Code	{ return chromosomes . iterator () . getChromosomes ( iterator () ) ; }
Distance : 6

180
Tree	{ return getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 4

181
Tree	{ return new chromosomes () ; } notifyListeners
Code	{ return new chromosomes () ; } notifyListeners
Distance : 5

182
Tree	{ return chromosomes . iterator () . < chromosomes > getChromosomes () ; }
Code	{ return chromosomes . iterator () . < chromosomes > getChromosomes () ; }
Distance : 7

183
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Distance : 5

184
Tree	{ return chromosomes . getChromosomes ( chromosomes , NUMBER_CONSTANT , chromosomes . iterator () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes , NUMBER_CONSTANT , chromosomes . iterator () ) ; }
Distance : 9

185
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Class
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Class
Distance : 7

186
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 6

187
Tree	{ return this . chromosomes . iterator () ; } Class
Code	{ return this . chromosomes . iterator () ; } Class
Distance : 4

188
Tree	{ return chromosomes () ; } notifyListeners
Code	{ return chromosomes () ; } notifyListeners
Distance : 5

189
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Test
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Test
Distance : 8

190
Tree	{ return iterator ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Distance : 7

191
Tree	{ return chromosomes . iterator ( Any.ANY ) ; }
Code	{ return chromosomes . iterator ( Any.ANY ) ; }
Distance : 5

192
Tree	{ return chromosomes ; } notifyListeners
Code	{ return chromosomes ; } notifyListeners
Distance : 6

193
Tree	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Distance : 9

194
Tree	{ return chromosomes . iterator () . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . iterator () . getChromosomes ( chromosomes ) ; }
Distance : 7

195
Tree	{ return super . iterator () ; } Class
Code	{ return super . iterator () ; } Class
Distance : 3

196
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 6

197
Tree	{ return chromosomes + chromosomes . iterator () ; } Class
Code	{ return chromosomes + chromosomes . iterator () ; } Class
Distance : 4

198
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } Test
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } Test
Distance : 4

199
Tree	{ return ! iterator ( chromosomes ) ; } Class
Code	{ return ! iterator ( chromosomes ) ; } Class
Distance : 6

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

1
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

2
Tree	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

3
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 3

4
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

5
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

6
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

7
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

8
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) . add ( null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) . add ( null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

9
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

10
Tree	if ( entry . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

11
Tree	if ( entry . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

12
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

13
Tree	if ( Var.ARGUMENTS == IncrementalCheckMode.GENERATE_IJS ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS == IncrementalCheckMode.GENERATE_IJS ) { columnsToDrop . add ( i ) ; }
Distance : 12

14
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

15
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i , maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i , maxUlps ) ; }
Distance : 4

16
Tree	if ( entry . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

17
Tree	if ( entry . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

18
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 13

19
Tree	if ( c.length . compareTo ( entry , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length . compareTo ( entry , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

20
Tree	if ( c.length . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

21
Tree	if ( Precision . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

22
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

23
Tree	if ( c.length != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( c.length != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

24
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

25
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

26
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

27
Tree	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

28
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

29
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && maxUlps == add ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && maxUlps == add ) { columnsToDrop . add ( i ) ; }
Distance : 5

30
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

31
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

32
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && cutOff == add ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && cutOff == add ) { columnsToDrop . add ( i ) ; }
Distance : 6

33
Tree	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

34
Tree	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

35
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

36
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 13

37
Tree	if ( c.length == IncrementalCheckMode.GENERATE_IJS ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length == IncrementalCheckMode.GENERATE_IJS ) { columnsToDrop . add ( i ) ; }
Distance : 12

38
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

39
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

40
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) . add ( null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) . add ( null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

41
Tree	if ( c.length == Integer.MIN_VALUE ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length == Integer.MIN_VALUE ) { columnsToDrop . add ( i ) ; }
Distance : 12

42
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

43
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

44
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

45
Tree	if ( Var.ARGUMENTS . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

46
Tree	if ( Var.ARGUMENTS ) { columnsToDrop . add ( entry ) ; }
Code	if ( Var.ARGUMENTS ) { columnsToDrop . add ( entry ) ; }
Distance : 13

47
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

48
Tree	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

49
Tree	if ( compareTo ( STRING_CONSTANT , MathUtils.TWO_PI , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , MathUtils.TWO_PI , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

50
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

51
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

52
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

53
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

54
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

55
Tree	if ( entry . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

56
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

57
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

58
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

59
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

60
Tree	if ( Double.MIN_VALUE ) { columnsToDrop . add ( entry ) ; }
Code	if ( Double.MIN_VALUE ) { columnsToDrop . add ( entry ) ; }
Distance : 13

61
Tree	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

62
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

63
Tree	if ( Boolean.FALSE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Boolean.FALSE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

64
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

65
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 13

66
Tree	if ( entry . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

67
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 4

68
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

69
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

70
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , maxUlps ) ; }
Distance : 5

71
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) . add ( null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) . add ( null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

72
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

73
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

74
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i , maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i , maxUlps ) ; }
Distance : 4

75
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

76
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

77
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

78
Tree	if ( Var.ARGUMENTS ) { compareTo ( entry . compareTo ( entry ) ) ; }
Code	if ( Var.ARGUMENTS ) { compareTo ( entry . compareTo ( entry ) ) ; }
Distance : 16

79
Tree	if ( compareTo ( STRING_CONSTANT , source.incMoment , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , source.incMoment , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

80
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && maxUlps == Context.OTHER ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && maxUlps == Context.OTHER ) { columnsToDrop . add ( i ) ; }
Distance : 6

81
Tree	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 8

82
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

83
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

84
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i , maxUlps ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i , maxUlps ) ; }
Distance : 3

85
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && maxUlps == add ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) && maxUlps == add ) { columnsToDrop . add ( i ) ; }
Distance : 6

86
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

87
Tree	if ( Precision . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

88
Tree	if ( entry . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

89
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

90
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

91
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

92
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

93
Tree	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

94
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 12

95
Tree	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 8

96
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

97
Tree	if ( Var.ARGUMENTS . compareTo ( entry , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS . compareTo ( entry , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

98
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

99
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

100
Tree	if ( Boolean.FALSE ) { columnsToDrop . add ( entry ) ; }
Code	if ( Boolean.FALSE ) { columnsToDrop . add ( entry ) ; }
Distance : 13

101
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) . add ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) . add ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

102
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

103
Tree	if ( c.length ) { columnsToDrop . add ( entry ) ; }
Code	if ( c.length ) { columnsToDrop . add ( entry ) ; }
Distance : 13

104
Tree	if ( compareTo ( entry . compareTo ( entry , this . maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , this . maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

105
Tree	if ( Precision . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( CHAR_CONS ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

106
Tree	if ( compareTo ( entry . compareTo ( entry , this . entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , this . entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

107
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

108
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

109
Tree	if ( entry . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

110
Tree	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

111
Tree	if ( Precision . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry ) . compareTo () > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

112
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

113
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

114
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

115
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

116
Tree	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

117
Tree	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

118
Tree	if ( entry . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

119
Tree	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

120
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i , maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i , maxUlps ) ; }
Distance : 5

121
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 3

122
Tree	if ( compareTo ( STRING_CONSTANT , verifierStub.invocations , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , verifierStub.invocations , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

123
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

124
Tree	if ( Double.MIN_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Double.MIN_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

125
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

126
Tree	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

127
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

128
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

129
Tree	if ( compareTo ( entry . compareTo ( entry , this . epsilon ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , this . epsilon ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

130
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

131
Tree	if ( Double.MIN_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Double.MIN_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

132
Tree	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

133
Tree	if ( Var.ARGUMENTS == Integer.MIN_VALUE ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS == Integer.MIN_VALUE ) { columnsToDrop . add ( i ) ; }
Distance : 12

134
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , maxUlps ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , maxUlps ) ; }
Distance : 4

135
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

136
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

137
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

138
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

139
Tree	if ( Boolean.FALSE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Boolean.FALSE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

140
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

141
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

142
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 10

143
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

144
Tree	if ( compareTo ( entry . i ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . i ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

145
Tree	if ( compareTo ( entry . compareTo ( entry , this . maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , this . maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 9

146
Tree	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

147
Tree	if ( compareTo ( STRING_CONSTANT , Calendar.OCTOBER , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , Calendar.OCTOBER , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

148
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , columnsToDrop ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , columnsToDrop ) ; }
Distance : 4

149
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

150
Tree	if ( entry . compareTo ( entry , cutOff , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , cutOff , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

151
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

152
Tree	if ( this . Precision != Calendar.OCTOBER ) { columnsToDrop . add ( entry ) ; }
Code	if ( this . Precision != Calendar.OCTOBER ) { columnsToDrop . add ( entry ) ; }
Distance : 12

153
Tree	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

154
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

155
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) . add ( null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) . add ( null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

156
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( FeatureSet.Feature.MODULES ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( FeatureSet.Feature.MODULES ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

157
Tree	if ( this . Precision != rhs.length ) { columnsToDrop . add ( entry ) ; }
Code	if ( this . Precision != rhs.length ) { columnsToDrop . add ( entry ) ; }
Distance : 12

158
Tree	if ( this . entry != Calendar.OCTOBER ) { columnsToDrop . add ( entry ) ; }
Code	if ( this . entry != Calendar.OCTOBER ) { columnsToDrop . add ( entry ) ; }
Distance : 11

159
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , i / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , i / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

160
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

161
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

162
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

163
Tree	if ( Precision . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

164
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

165
Tree	if ( Var.ARGUMENTS . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

166
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

167
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 13

168
Tree	if ( entry . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

169
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

170
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 11

171
Tree	if ( this . Precision != getResult ) { columnsToDrop . add ( entry ) ; }
Code	if ( this . Precision != getResult ) { columnsToDrop . add ( entry ) ; }
Distance : 12

172
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

173
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

174
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

175
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 14

176
Tree	if ( Precision . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , STRING_CONSTANT , null , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

177
Tree	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

178
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

179
Tree	if ( Var.ARGUMENTS != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Var.ARGUMENTS != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

180
Tree	if ( c.length ) { compareTo ( entry . compareTo ( entry ) ) ; }
Code	if ( c.length ) { compareTo ( entry . compareTo ( entry ) ) ; }
Distance : 16

181
Tree	if ( Precision . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

182
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 14

183
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

184
Tree	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

185
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , entry / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , entry / maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

186
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , false ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , false ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

187
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add , i , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

188
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , columnsToDrop ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( NUMBER_CONSTANT , columnsToDrop ) ; }
Distance : 5

189
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT , false ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT , false ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

190
Tree	if ( entry . compareTo ( entry , entry , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , maxUlps , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

191
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

192
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

193
Tree	if ( Double.MIN_VALUE ) { compareTo ( entry . compareTo ( entry ) ) ; }
Code	if ( Double.MIN_VALUE ) { compareTo ( entry . compareTo ( entry ) ) ; }
Distance : 16

194
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 14

195
Tree	if ( entry compareTo entry ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry compareTo entry ) { columnsToDrop . add ( entry ) ; }
Distance : 11

196
Tree	if ( Precision . entry ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . entry ) { columnsToDrop . add ( entry ) ; }
Distance : 10

197
Tree	if ( entry Precision minValue ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry Precision minValue ) { columnsToDrop . add ( entry ) ; }
Distance : 12

198
Tree	if ( entry entry BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry entry BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Distance : 12

199
Tree	if ( Boolean.FALSE ) { compareTo ( entry . compareTo ( entry ) ) ; }
Code	if ( Boolean.FALSE ) { compareTo ( entry . compareTo ( entry ) ) ; }
Distance : 16

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Distance : 6

1
Tree	final int n1n2prod = n1 - / ;
Code	final int n1n2prod = n1 - / ;
Distance : 3

2
Tree	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

3
Tree	final int n1n2prod = super * n2 ;
Code	final int n1n2prod = super * n2 ;
Distance : 2

4
Tree	final int n1n2prod = n1 * n2 / n1 ;
Code	final int n1n2prod = n1 * n2 / n1 ;
Distance : 3

5
Tree	final int n1n2prod = n2 * n1 ;
Code	final int n1n2prod = n2 * n1 ;
Distance : 3

6
Tree	int n1n2prod = ( long ) n1 * n1 ;
Code	int n1n2prod = ( long ) n1 * n1 ;
Distance : 6

7
Tree	final int n1n2prod = n1 [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] ;
Distance : 3

8
Tree	final int n1n2prod = n2 - / ;
Code	final int n1n2prod = n2 - / ;
Distance : 4

9
Tree	final int n1n2prod = CHAR_CONS - n2 ;
Code	final int n1n2prod = CHAR_CONS - n2 ;
Distance : 3

10
Tree	final int n1n2prod = f.length * / ;
Code	final int n1n2prod = f.length * / ;
Distance : 3

11
Tree	final int n1n2prod = CHAR_CONS + n2 ;
Code	final int n1n2prod = CHAR_CONS + n2 ;
Distance : 3

12
Tree	final int n1n2prod = n1 > n1 ;
Code	final int n1n2prod = n1 > n1 ;
Distance : 3

13
Tree	final int n1n2prod = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Distance : 7

14
Tree	final int n1n2prod = n1 * n2 / n2 ;
Code	final int n1n2prod = n1 * n2 / n2 ;
Distance : 3

15
Tree	final int n1n2prod = location [ n2 ] - / ;
Code	final int n1n2prod = location [ n2 ] - / ;
Distance : 6

16
Tree	final int n1n2prod = n2 - n2 [ NUMBER_CONSTANT ] ;
Code	final int n1n2prod = n2 - n2 [ NUMBER_CONSTANT ] ;
Distance : 6

17
Tree	final int n1n2prod = f.length + NUMBER_CONSTANT ;
Code	final int n1n2prod = f.length + NUMBER_CONSTANT ;
Distance : 4

18
Tree	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

19
Tree	final int n1n2prod = super - NUMBER_CONSTANT ;
Code	final int n1n2prod = super - NUMBER_CONSTANT ;
Distance : 4

20
Tree	final int n1n2prod = n2 ;
Code	final int n1n2prod = n2 ;
Distance : 3

21
Tree	final int n1n2prod = / - n2 ;
Code	final int n1n2prod = / - n2 ;
Distance : 3

22
Tree	final int n1n2prod = NUMBER_CONSTANT / observed1.length . print () ;
Code	final int n1n2prod = NUMBER_CONSTANT / observed1.length . print () ;
Distance : 7

23
Tree	int n1n2prod = ( long ) n1 * n2 ;
Code	int n1n2prod = ( long ) n1 * n2 ;
Distance : 5

24
Tree	final int n1n2prod = compiler.globalTypeInfo - NUMBER_CONSTANT ;
Code	final int n1n2prod = compiler.globalTypeInfo - NUMBER_CONSTANT ;
Distance : 4

25
Tree	final int n1n2prod = NUMBER_CONSTANT + n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT + n1 ;
Distance : 4

26
Tree	final int n1n2prod = location [ n2 ] - NUMBER_CONSTANT ;
Code	final int n1n2prod = location [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

27
Tree	final int n1n2prod = CHAR_CONS - NUMBER_CONSTANT ;
Code	final int n1n2prod = CHAR_CONS - NUMBER_CONSTANT ;
Distance : 4

28
Tree	final int n1n2prod = ( long ) currentState.length . returnZero () * n2 ;
Code	final int n1n2prod = ( long ) currentState.length . returnZero () * n2 ;
Distance : 8

29
Tree	final int n1n2prod = n1 + n1 + n2 + n2 ;
Code	final int n1n2prod = n1 + n1 + n2 + n2 ;
Distance : 6

30
Tree	final int n1n2prod = {} - NUMBER_CONSTANT ;
Code	final int n1n2prod = {} - NUMBER_CONSTANT ;
Distance : 4

31
Tree	final int n1n2prod = / - NUMBER_CONSTANT ;
Code	final int n1n2prod = / - NUMBER_CONSTANT ;
Distance : 4

32
Tree	final int n2 = NUMBER_CONSTANT ;
Code	final int n2 = NUMBER_CONSTANT ;
Distance : 5

33
Tree	final int n2 = n1 > > NUMBER_CONSTANT ;
Code	final int n2 = n1 > > NUMBER_CONSTANT ;
Distance : 5

34
Tree	final int n1n2prod = n1 * / ;
Code	final int n1n2prod = n1 * / ;
Distance : 2

35
Tree	final int n1n2prod = n1 [ n1 ] - / ;
Code	final int n1n2prod = n1 [ n1 ] - / ;
Distance : 6

36
Tree	final int n1n2prod = ( int ) n1 * n1 ;
Code	final int n1n2prod = ( int ) n1 * n1 ;
Distance : 5

37
Tree	final int n1n2prod = n2 - / ;
Code	final int n1n2prod = n2 - / ;
Distance : 4

38
Tree	final int n1n2prod = n1 > n2 ;
Code	final int n1n2prod = n1 > n2 ;
Distance : 2

39
Tree	final int n1n2prod = n2 ^ n1 ;
Code	final int n1n2prod = n2 ^ n1 ;
Distance : 4

40
Tree	final int n1n2prod = n1 * n1 ;
Code	final int n1n2prod = n1 * n1 ;
Distance : 2

41
Tree	final int n1n2prod = compiler.globalTypeInfo / NUMBER_CONSTANT ;
Code	final int n1n2prod = compiler.globalTypeInfo / NUMBER_CONSTANT ;
Distance : 4

42
Tree	final int n1n2prod = n1 * n1 / n2 ;
Code	final int n1n2prod = n1 * n1 / n2 ;
Distance : 3

43
Tree	final int n1n2prod = super + n2 ;
Code	final int n1n2prod = super + n2 ;
Distance : 3

44
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

45
Tree	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Code	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Distance : 3

46
Tree	final int n1n2prod = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Distance : 4

47
Tree	final int n1n2prod = n1 - n2 [ n2 ] ;
Code	final int n1n2prod = n1 - n2 [ n2 ] ;
Distance : 5

48
Tree	final int n1n2prod = super * n2 * n2 ;
Code	final int n1n2prod = super * n2 * n2 ;
Distance : 4

49
Tree	final int n1n2prod = super / n2 ;
Code	final int n1n2prod = super / n2 ;
Distance : 3

50
Tree	final int n1n2prod = n2 * n2 / n2 ;
Code	final int n1n2prod = n2 * n2 / n2 ;
Distance : 4

51
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

52
Tree	final int n2 = NUMBER_CONSTANT / n1 ;
Code	final int n2 = NUMBER_CONSTANT / n1 ;
Distance : 5

53
Tree	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

54
Tree	final int n1n2prod = n1 ^ n1 ;
Code	final int n1n2prod = n1 ^ n1 ;
Distance : 3

55
Tree	final int n1n2prod = ( int ) n1 * n2 ;
Code	final int n1n2prod = ( int ) n1 * n2 ;
Distance : 4

56
Tree	final int n2 = NUMBER_CONSTANT / n2 ;
Code	final int n2 = NUMBER_CONSTANT / n2 ;
Distance : 4

57
Tree	final int n1n2prod = NUMBER_CONSTANT * f.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * f.length ;
Distance : 3

58
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

59
Tree	final int n1n2prod = n1 . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . is () - NUMBER_CONSTANT ;
Distance : 6

60
Tree	final int n1n2prod = n2 - NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 - NUMBER_CONSTANT ;
Distance : 4

61
Tree	final int n1n2prod = n1 - n1 [ n2 ] ;
Code	final int n1n2prod = n1 - n1 [ n2 ] ;
Distance : 5

62
Tree	final int n1n2prod = n1 - / ;
Code	final int n1n2prod = n1 - / ;
Distance : 3

63
Tree	final int n1n2prod = n1 - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 - NUMBER_CONSTANT ;
Distance : 3

64
Tree	final int n1n2prod = / / n1 ;
Code	final int n1n2prod = / / n1 ;
Distance : 4

65
Tree	final int n1n2prod = n2 == CHAR_CONS ;
Code	final int n1n2prod = n2 == CHAR_CONS ;
Distance : 4

66
Tree	final int n1n2prod = super + n1 ;
Code	final int n1n2prod = super + n1 ;
Distance : 4

67
Tree	final int n1n2prod = / * n2 ;
Code	final int n1n2prod = / * n2 ;
Distance : 2

68
Tree	final int n1 = n1 ;
Code	final int n1 = n1 ;
Distance : 4

69
Tree	final int n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

70
Tree	final int n1n2prod = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Distance : 7

71
Tree	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

72
Tree	final int n1n2prod = n1 < < NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 < < NUMBER_CONSTANT ;
Distance : 4

73
Tree	final int n1n2prod = CHAR_CONS + n2 ;
Code	final int n1n2prod = CHAR_CONS + n2 ;
Distance : 3

74
Tree	final int n1n2prod = n1 ;
Code	final int n1n2prod = n1 ;
Distance : 3

75
Tree	final int n1n2prod = n1 - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 - NUMBER_CONSTANT ;
Distance : 3

76
Tree	final int n1n2prod = n1 - n2 [ NUMBER_CONSTANT ] ;
Code	final int n1n2prod = n1 - n2 [ NUMBER_CONSTANT ] ;
Distance : 5

77
Tree	final int n1n2prod = n1 ^ n2 ;
Code	final int n1n2prod = n1 ^ n2 ;
Distance : 2

78
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

79
Tree	final int n1n2prod = n2 - n2 ;
Code	final int n1n2prod = n2 - n2 ;
Distance : 3

80
Tree	final int n1n2prod = NUMBER_CONSTANT ;
Code	final int n1n2prod = NUMBER_CONSTANT ;
Distance : 4

81
Tree	final int n1n2prod = super * n1 ;
Code	final int n1n2prod = super * n1 ;
Distance : 3

82
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * currentState.length ;
Distance : 6

83
Tree	final int n1n2prod = CHAR_CONS * n2 ;
Code	final int n1n2prod = CHAR_CONS * n2 ;
Distance : 2

84
Tree	final int n1n2prod = super * n1 * n2 ;
Code	final int n1n2prod = super * n1 * n2 ;
Distance : 3

85
Tree	final int n1n2prod = n1 [ n2 ] - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 [ n2 ] - NUMBER_CONSTANT ;
Distance : 5

86
Tree	final int n1n2prod = n1 - n2 ;
Code	final int n1n2prod = n1 - n2 ;
Distance : 2

87
Tree	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

88
Tree	final int n1n2prod = ( n1 < n1 > ) n2 * n2 ;
Code	final int n1n2prod = ( n1 < n1 > ) n2 * n2 ;
Distance : 7

89
Tree	final int n1n2prod = / / n2 ;
Code	final int n1n2prod = / / n2 ;
Distance : 3

90
Tree	final int n1n2prod = n1 * n2 * n2 ;
Code	final int n1n2prod = n1 * n2 * n2 ;
Distance : 3

91
Tree	final int n1n2prod = n1 - n2 [ n1 ] ;
Code	final int n1n2prod = n1 - n2 [ n1 ] ;
Distance : 5

92
Tree	final int n1n2prod = n1 [ n1 ] ;
Code	final int n1n2prod = n1 [ n1 ] ;
Distance : 4

93
Tree	int n1n2prod = ( int ) n1 * n2 ;
Code	int n1n2prod = ( int ) n1 * n2 ;
Distance : 5

94
Tree	final int n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

95
Tree	final int n1n2prod = NUMBER_CONSTANT * Vector1D.ZERO ;
Code	final int n1n2prod = NUMBER_CONSTANT * Vector1D.ZERO ;
Distance : 3

96
Tree	final int n1n2prod = n1 [ n1 ] - n2 [ n2 ] ;
Code	final int n1n2prod = n1 [ n1 ] - n2 [ n2 ] ;
Distance : 8

97
Tree	final int n1n2prod = NUMBER_CONSTANT / observed1.length . returnZero () ;
Code	final int n1n2prod = NUMBER_CONSTANT / observed1.length . returnZero () ;
Distance : 7

98
Tree	final int n1n2prod = location [ n2 ] ;
Code	final int n1n2prod = location [ n2 ] ;
Distance : 4

99
Tree	final int n1n2prod = ( int ) currentState.length . returnZero () * n2 ;
Code	final int n1n2prod = ( int ) currentState.length . returnZero () * n2 ;
Distance : 8

100
Tree	final int n1n2prod = n1 + n2 + n2 + n1 ;
Code	final int n1n2prod = n1 + n2 + n2 + n1 ;
Distance : 6

101
Tree	final int n1n2prod = n1 - n1 [ NUMBER_CONSTANT ] ;
Code	final int n1n2prod = n1 - n1 [ NUMBER_CONSTANT ] ;
Distance : 6

102
Tree	final int n1n2prod = STRING_CONSTANT + n2 ;
Code	final int n1n2prod = STRING_CONSTANT + n2 ;
Distance : 3

103
Tree	final int n1n2prod = n1 + n2 + n2 + n2 ;
Code	final int n1n2prod = n1 + n2 + n2 + n2 ;
Distance : 6

104
Tree	final int n1n2prod = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Distance : 7

105
Tree	final int n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

106
Tree	final int n1n2prod = n2 < < NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 < < NUMBER_CONSTANT ;
Distance : 5

107
Tree	final int n1n2prod = NUMBER_CONSTANT / / . returnZero () ;
Code	final int n1n2prod = NUMBER_CONSTANT / / . returnZero () ;
Distance : 7

108
Tree	final int n1n2prod = ( long ) n1 * n1 ;
Code	final int n1n2prod = ( long ) n1 * n1 ;
Distance : 5

109
Tree	final int n1n2prod = STRING_CONSTANT + n1 ;
Code	final int n1n2prod = STRING_CONSTANT + n1 ;
Distance : 4

110
Tree	final int n1n2prod = MathUtils.TWO_PI - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI - NUMBER_CONSTANT ;
Distance : 4

111
Tree	final int n1n2prod = n2 - n2 [ n2 ] ;
Code	final int n1n2prod = n2 - n2 [ n2 ] ;
Distance : 6

112
Tree	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Distance : 3

113
Tree	final int n1n2prod = super / n1 ;
Code	final int n1n2prod = super / n1 ;
Distance : 4

114
Tree	final int n1n2prod = / * n2 * n2 ;
Code	final int n1n2prod = / * n2 * n2 ;
Distance : 4

115
Tree	final int n1n2prod = CHAR_CONS - NUMBER_CONSTANT ;
Code	final int n1n2prod = CHAR_CONS - NUMBER_CONSTANT ;
Distance : 4

116
Tree	final int n1n2prod = n1 - extends ;
Code	final int n1n2prod = n1 - extends ;
Distance : 3

117
Tree	final int n1n2prod = n1 == CHAR_CONS ;
Code	final int n1n2prod = n1 == CHAR_CONS ;
Distance : 3

118
Tree	final int n2 = n1 + NUMBER_CONSTANT ;
Code	final int n2 = n1 + NUMBER_CONSTANT ;
Distance : 4

119
Tree	final int n1n2prod = n1 - n1 ;
Code	final int n1n2prod = n1 - n1 ;
Distance : 3

120
Tree	final int n1n2prod = n1 [ n1 ] - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 [ n1 ] - NUMBER_CONSTANT ;
Distance : 6

121
Tree	final int n1 = n1 == CHAR_CONS ;
Code	final int n1 = n1 == CHAR_CONS ;
Distance : 4

122
Tree	final int n1n2prod = / + n2 ;
Code	final int n1n2prod = / + n2 ;
Distance : 3

123
Tree	final int n1n2prod = n2 > n2 ;
Code	final int n1n2prod = n2 > n2 ;
Distance : 3

124
Tree	final int n1n2prod = n2 > n1 ;
Code	final int n1n2prod = n2 > n1 ;
Distance : 4

125
Tree	final int n1n2prod = super - NUMBER_CONSTANT ;
Code	final int n1n2prod = super - NUMBER_CONSTANT ;
Distance : 4

126
Tree	final int n1n2prod = n1 - extends ;
Code	final int n1n2prod = n1 - extends ;
Distance : 3

127
Tree	final int n1n2prod = u [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = u [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

128
Tree	final int n1n2prod = n1 [ n2 ] - n2 [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] - n2 [ n2 ] ;
Distance : 8

129
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

130
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 6

131
Tree	final int n2 = n1 < < NUMBER_CONSTANT ;
Code	final int n2 = n1 < < NUMBER_CONSTANT ;
Distance : 5

132
Tree	final int n1n2prod = n1 . getGeneratorUpperBounds () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . getGeneratorUpperBounds () - NUMBER_CONSTANT ;
Distance : 6

133
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 10

134
Tree	final int n1n2prod = super - n2 ;
Code	final int n1n2prod = super - n2 ;
Distance : 3

135
Tree	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 4

136
Tree	final int n1n2prod = ( n1 < n1 > ) n1 * n2 ;
Code	final int n1n2prod = ( n1 < n1 > ) n1 * n2 ;
Distance : 7

137
Tree	final int n1n2prod = CHAR_CONS * n2 * n2 ;
Code	final int n1n2prod = CHAR_CONS * n2 * n2 ;
Distance : 4

138
Tree	final int n1n2prod = ( int ) values.length . returnZero () * n2 ;
Code	final int n1n2prod = ( int ) values.length . returnZero () * n2 ;
Distance : 8

139
Tree	final int n1n2prod = f.length / NUMBER_CONSTANT ;
Code	final int n1n2prod = f.length / NUMBER_CONSTANT ;
Distance : 4

140
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Distance : 5

141
Tree	final int n1n2prod = u [ n2 ] - / ;
Code	final int n1n2prod = u [ n2 ] - / ;
Distance : 6

142
Tree	final int n1n2prod = u [ n2 ] ;
Code	final int n1n2prod = u [ n2 ] ;
Distance : 4

143
Tree	int n1n2prod = ( int ) n1 * n1 ;
Code	int n1n2prod = ( int ) n1 * n1 ;
Distance : 6

144
Tree	final int n1n2prod = ( long ) values.length . returnZero () * n2 ;
Code	final int n1n2prod = ( long ) values.length . returnZero () * n2 ;
Distance : 8

145
Tree	final int n1n2prod = CHAR_CONS + n1 ;
Code	final int n1n2prod = CHAR_CONS + n1 ;
Distance : 4

146
Tree	final int n1n2prod = ( n1 < n1 > ) n1 * n1 ;
Code	final int n1n2prod = ( n1 < n1 > ) n1 * n1 ;
Distance : 8

147
Tree	final int n1n2prod = ( n1 < n2 > ) n1 * n2 ;
Code	final int n1n2prod = ( n1 < n2 > ) n1 * n2 ;
Distance : 7

148
Tree	final int n1n2prod = location [ n2 ] - n2 [ n2 ] ;
Code	final int n1n2prod = location [ n2 ] - n2 [ n2 ] ;
Distance : 9

149
Tree	final int n1n2prod = MathUtils.TWO_PI * / ;
Code	final int n1n2prod = MathUtils.TWO_PI * / ;
Distance : 3

150
Tree	final int n1n2prod = / - NUMBER_CONSTANT ;
Code	final int n1n2prod = / - NUMBER_CONSTANT ;
Distance : 4

151
Tree	final int n1n2prod = compiler.globalTypeInfo * / ;
Code	final int n1n2prod = compiler.globalTypeInfo * / ;
Distance : 3

152
Tree	final int n1n2prod = n1 + n2 + n1 + n2 ;
Code	final int n1n2prod = n1 + n2 + n1 + n2 ;
Distance : 6

153
Tree	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

154
Tree	final int n1n2prod = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Distance : 7

155
Tree	final int n1n2prod = n1 [ n2 ] - / ;
Code	final int n1n2prod = n1 [ n2 ] - / ;
Distance : 5

156
Tree	final int n1n2prod = n1 / NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 / NUMBER_CONSTANT ;
Distance : 3

157
Tree	final int n2 = NUMBER_CONSTANT + n2 ;
Code	final int n2 = NUMBER_CONSTANT + n2 ;
Distance : 4

158
Tree	final int n1n2prod = n1 - R [ NUMBER_CONSTANT ] ;
Code	final int n1n2prod = n1 - R [ NUMBER_CONSTANT ] ;
Distance : 6

159
Tree	final int n1n2prod = n1 * n1 * n2 ;
Code	final int n1n2prod = n1 * n1 * n2 ;
Distance : 3

160
Tree	final int n1n2prod = f.length - NUMBER_CONSTANT ;
Code	final int n1n2prod = f.length - NUMBER_CONSTANT ;
Distance : 4

161
Tree	final int n1n2prod = super - n1 ;
Code	final int n1n2prod = super - n1 ;
Distance : 4

162
Tree	final int n1n2prod = u [ n2 ] - n2 [ n2 ] ;
Code	final int n1n2prod = u [ n2 ] - n2 [ n2 ] ;
Distance : 9

163
Tree	final int n1n2prod = n1 * n2 * n1 ;
Code	final int n1n2prod = n1 * n2 * n1 ;
Distance : 3

164
Tree	final int n1 = NUMBER_CONSTANT ;
Code	final int n1 = NUMBER_CONSTANT ;
Distance : 5

165
Tree	final int n1n2prod = MathUtils.TWO_PI + NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI + NUMBER_CONSTANT ;
Distance : 4

166
Tree	final int n2 = STRING_CONSTANT + n1 ;
Code	final int n2 = STRING_CONSTANT + n1 ;
Distance : 5

167
Tree	final int n1n2prod = n2 * n2 * n2 ;
Code	final int n1n2prod = n2 * n2 * n2 ;
Distance : 4

168
Tree	final int n2 = NUMBER_CONSTANT + n1 ;
Code	final int n2 = NUMBER_CONSTANT + n1 ;
Distance : 5

169
Tree	final int n1n2prod = n1 . abs () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . abs () - NUMBER_CONSTANT ;
Distance : 6

170
Tree	final int n2 = CHAR_CONS + n2 ;
Code	final int n2 = CHAR_CONS + n2 ;
Distance : 4

171
Tree	final int n1n2prod = {} - NUMBER_CONSTANT ;
Code	final int n1n2prod = {} - NUMBER_CONSTANT ;
Distance : 4

172
Tree	final int n1n2prod = compiler.globalTypeInfo + NUMBER_CONSTANT ;
Code	final int n1n2prod = compiler.globalTypeInfo + NUMBER_CONSTANT ;
Distance : 4

173
Tree	final int n1n2prod = NUMBER_CONSTANT / / . print () ;
Code	final int n1n2prod = NUMBER_CONSTANT / / . print () ;
Distance : 7

174
Tree	final int n1n2prod = u [ n2 ] - NUMBER_CONSTANT ;
Code	final int n1n2prod = u [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

175
Tree	final int n2 = n1 - n2 ;
Code	final int n2 = n1 - n2 ;
Distance : 3

176
Tree	final int n1n2prod = n2 . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 . is () - NUMBER_CONSTANT ;
Distance : 7

177
Tree	final int n1n2prod = this != n1 ;
Code	final int n1n2prod = this != n1 ;
Distance : 4

178
Tree	final int n1n2prod = n2 ^ n2 ;
Code	final int n1n2prod = n2 ^ n2 ;
Distance : 3

179
Tree	final int n1 = n1 + NUMBER_CONSTANT ;
Code	final int n1 = n1 + NUMBER_CONSTANT ;
Distance : 4

180
Tree	final int n1n2prod = n1 - <> ;
Code	final int n1n2prod = n1 - <> ;
Distance : 3

181
Tree	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

182
Tree	final int n1 = n1 > > NUMBER_CONSTANT ;
Code	final int n1 = n1 > > NUMBER_CONSTANT ;
Distance : 5

183
Tree	final int n1n2prod = n1 - <> ;
Code	final int n1n2prod = n1 - <> ;
Distance : 3

184
Tree	final int n2 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n2 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

185
Tree	final double n1n2prod = NUMBER_CONSTANT ;
Code	final double n1n2prod = NUMBER_CONSTANT ;
Distance : 3

186
Tree	final int n2 = CHAR_CONS + n1 ;
Code	final int n2 = CHAR_CONS + n1 ;
Distance : 5

187
Tree	final int n2 = n1 ;
Code	final int n2 = n1 ;
Distance : 4

188
Tree	final int n2 = n1 == CHAR_CONS ;
Code	final int n2 = n1 == CHAR_CONS ;
Distance : 4

189
Tree	final int n2 = n1 - NUMBER_CONSTANT ;
Code	final int n2 = n1 - NUMBER_CONSTANT ;
Distance : 4

190
Tree	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 10

191
Tree	final int n1 = STRING_CONSTANT + n1 ;
Code	final int n1 = STRING_CONSTANT + n1 ;
Distance : 5

192
Tree	final int n1 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

193
Tree	final int n2 = NUMBER_CONSTANT - n2 ;
Code	final int n2 = NUMBER_CONSTANT - n2 ;
Distance : 4

194
Tree	final int n1 = n1 < < NUMBER_CONSTANT ;
Code	final int n1 = n1 < < NUMBER_CONSTANT ;
Distance : 5

195
Tree	final int n1 = n1 - NUMBER_CONSTANT ;
Code	final int n1 = n1 - NUMBER_CONSTANT ;
Distance : 4

196
Tree	final int n1 = NUMBER_CONSTANT - n2 ;
Code	final int n1 = NUMBER_CONSTANT - n2 ;
Distance : 4

197
Tree	final int n1n2prod = this != n2 ;
Code	final int n1n2prod = this != n2 ;
Distance : 3

198
Tree	final int n2 = this != n1 ;
Code	final int n2 = this != n1 ;
Distance : 5

199
Tree	final int n1 = this != n1 ;
Code	final int n1 = this != n1 ;
Distance : 5

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

1
Tree	if ( y > - x.length - y.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length - y.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 7

2
Tree	if ( y > - TWO_POWER_52 y sample2.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y sample2.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

3
Tree	if ( y > - x.length y sample2.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y sample2.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

4
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , y , y ) ; }
Distance : 8

5
Tree	if ( y > - x.length y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

6
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

7
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

8
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , x.length , y , x.length ) ; }
Distance : 10

9
Tree	if ( y > - y.length y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

10
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

11
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

12
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

13
Tree	if ( y > - y.length y TWO_POWER_52 < TWO_POWER_52 + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < TWO_POWER_52 + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 8

14
Tree	if ( x.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

15
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 4

16
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , v2.y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , v2.y ) ; }
Distance : 10

17
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sample1.length ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sample1.length ) { return pow ( - x , y ) ; }
Distance : 3

18
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . y . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . y . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 10

19
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

20
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

21
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

22
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

23
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 == NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 == NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 6

24
Tree	if ( y > - y.length y TWO_POWER_52 < NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 7

25
Tree	if ( y.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

26
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

27
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 == NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 == NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

28
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , y , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , y , x ) ; }
Distance : 8

29
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

30
Tree	if ( v.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

31
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

32
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 > sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 > sample2.length ) { return pow ( - x , y ) ; }
Distance : 6

33
Tree	if ( y > - y.length y TWO_POWER_52 > model.steps ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 > model.steps ) { return pow ( - x , y ) ; }
Distance : 6

34
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , x.length , y , Precision.SAFE_MIN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , x.length , y , Precision.SAFE_MIN ) ; }
Distance : 10

35
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

36
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

37
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 > var.scope ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 > var.scope ) { return pow ( - x , y ) ; }
Distance : 6

38
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 10

39
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 == NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 == NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

40
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Precision.SAFE_MIN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Precision.SAFE_MIN ) ; }
Distance : 10

41
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

42
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , true ) ; }
Distance : 4

43
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 10

44
Tree	if ( y > - y.length y TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 7

45
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sample2.length ) { return pow ( - x , y ) ; }
Distance : 3

46
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , MathUtils.TWO_PI , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , MathUtils.TWO_PI , y , x.length ) ; }
Distance : 10

47
Tree	if ( y > - x.length y TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 7

48
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

49
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

50
Tree	if ( y > - x.length y TWO_POWER_52 > Entities.ISO8859_1_ARRAY_LENGTH ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 > Entities.ISO8859_1_ARRAY_LENGTH ) { return pow ( - x , y ) ; }
Distance : 6

51
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return x . pow ( - x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return x . pow ( - x ) ; }
Distance : 7

52
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . TWO_POWER_52 . y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . TWO_POWER_52 . y ) { return pow ( - x , y ) ; }
Distance : 8

53
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , y * x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , y * x ) ; }
Distance : 8

54
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . y . y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . y . y ) { return pow ( - x , y ) ; }
Distance : 8

55
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

56
Tree	if ( y <= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y <= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

57
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , ! ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , ! ) ; }
Distance : 4

58
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

59
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

60
Tree	if ( y > - x.length y TWO_POWER_52 < TWO_POWER_52 + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < TWO_POWER_52 + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 8

61
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 14

62
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 10

63
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

64
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

65
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

66
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 5

67
Tree	if ( y > - TWO_POWER_52 - TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Code	if ( y > - TWO_POWER_52 - TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Distance : 13

68
Tree	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < x.length ) { return pow ( - x , y ) ; }
Distance : 6

69
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

70
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( - x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( - x ) ; }
Distance : 7

71
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

72
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Distance : 6

73
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 > model.steps ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 > model.steps ) { return pow ( - x , y ) ; }
Distance : 6

74
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

75
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 == NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 == NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

76
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

77
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y.length ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y.length ) { return pow ( - x , y ) ; }
Distance : 3

78
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

79
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

80
Tree	if ( y <= TWO_POWER_52 <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y <= TWO_POWER_52 <= TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

81
Tree	if ( x.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

82
Tree	if ( y >= y y TWO_POWER_52 >= this . y . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= y y TWO_POWER_52 >= this . y . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 10

83
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Distance : 6

84
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

85
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

86
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

87
Tree	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

88
Tree	if ( y > - x.length y TWO_POWER_52 > model.steps ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 > model.steps ) { return pow ( - x , y ) ; }
Distance : 6

89
Tree	if ( y > - Double.NaN y TWO_POWER_52 < TWO_POWER_52 + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 < TWO_POWER_52 + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 8

90
Tree	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

91
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . TWO_POWER_52 . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . TWO_POWER_52 . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 10

92
Tree	if ( y > - x.length y x.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y x.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

93
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , x.length ) ; }
Distance : 10

94
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

95
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= TWO_POWER_52 . pow ( y , NUMBER_CONSTANT ) ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= TWO_POWER_52 . pow ( y , NUMBER_CONSTANT ) ) { return pow ( - x , y ) ; }
Distance : 10

96
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) - NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) - NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

97
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

98
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - mant.length ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - mant.length ) { return pow ( - x , y ) ; }
Distance : 3

99
Tree	if ( y > - x.length y TWO_POWER_52 < x + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < x + NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 8

100
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

101
Tree	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

102
Tree	if ( y != - x.length y y < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y y < x.length ) { return pow ( - x , y ) ; }
Distance : 6

103
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return TWO_POWER_52 . pow ( - x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return TWO_POWER_52 . pow ( - x ) ; }
Distance : 7

104
Tree	if ( y != - x.length y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

105
Tree	if ( y > - TWO_POWER_52 - y.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - y.length == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 7

106
Tree	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

107
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 > Entities.ISO8859_1_ARRAY_LENGTH ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 > Entities.ISO8859_1_ARRAY_LENGTH ) { return pow ( - x , y ) ; }
Distance : 6

108
Tree	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

109
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

110
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 12

111
Tree	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Distance : 17

112
Tree	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

113
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , x.length , y , v2.y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return y . pow ( x , x.length , y , v2.y ) ; }
Distance : 10

114
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

115
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

116
Tree	if ( y > - / y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - / y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

117
Tree	if ( y > - TWO_POWER_52 y Entities.ISO8859_1_ARRAY_LENGTH == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y Entities.ISO8859_1_ARRAY_LENGTH == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

118
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

119
Tree	if ( y > - x.length y TWO_POWER_52 > sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 > sample2.length ) { return pow ( - x , y ) ; }
Distance : 6

120
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return MathUtils.TWO_PI . pow ( x , y * y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return MathUtils.TWO_PI . pow ( x , y * y ) ; }
Distance : 8

121
Tree	if ( y >= y - TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y - TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

122
Tree	if ( y > - Double.NaN y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.NaN y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

123
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

124
Tree	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , x , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , x , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Distance : 18

125
Tree	if ( y > - x.length y TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y > - x.length y TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 12

126
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , true ) ; }
Distance : 4

127
Tree	if ( y >= TWO_POWER_52 . pow ( - , y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . pow ( - , y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Distance : 17

128
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return var.scope . pow ( x , y * y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return var.scope . pow ( x , y * y ) ; }
Distance : 8

129
Tree	if ( y > - TWO_POWER_52 - <= == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - <= == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

130
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

131
Tree	if ( y > - x.length y <= == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y <= == NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

132
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , y , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , y , y ) ; }
Distance : 8

133
Tree	if ( y >= TWO_POWER_52 y x >= this . y . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y x >= this . y . y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 10

134
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

135
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . y . y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . y . y ) { return pow ( - x , x ) ; }
Distance : 9

136
Tree	if ( y >= TWO_POWER_52 <= TWO_POWER_52 <= TWO_POWER_52 . pow ( TWO_POWER_52 , NUMBER_CONSTANT ) ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 <= TWO_POWER_52 <= TWO_POWER_52 . pow ( TWO_POWER_52 , NUMBER_CONSTANT ) ) { return pow ( - x , y ) ; }
Distance : 11

137
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

138
Tree	if ( y > - Double.NaN y TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y > - Double.NaN y TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 12

139
Tree	if ( y > - x - TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y > - x - TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 12

140
Tree	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

141
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 3

142
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

143
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

144
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( - x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( - x ) ; }
Distance : 7

145
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - y < pow ( - x , y ) * x ) /
Distance : 14

146
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

147
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

148
Tree	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

149
Tree	if ( y > - v.length y TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y > - v.length y TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 12

150
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , x , y ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( x , null , x , y ) ; }
Distance : 8

151
Tree	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

152
Tree	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

153
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

154
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= TWO_POWER_52 . pow ( TWO_POWER_52 , NUMBER_CONSTANT ) ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= TWO_POWER_52 . pow ( TWO_POWER_52 , NUMBER_CONSTANT ) ) { return pow ( - x , y ) ; }
Distance : 11

155
Tree	if ( y >= TWO_POWER_52 . y () - y < pow ( - TWO_POWER_52 , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . y () - y < pow ( - TWO_POWER_52 , y ) * x ) /
Distance : 12

156
Tree	if ( y >= TWO_POWER_52 . pow ( y , y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . pow ( y , y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * x ) /
Distance : 17

157
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 6

158
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

159
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

160
Tree	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

161
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

162
Tree	if ( y.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

163
Tree	if ( y == CHAR_CONS y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

164
Tree	if ( v.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( v.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

165
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

166
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

167
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 12

168
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , MathUtils.TWO_PI , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , MathUtils.TWO_PI , y , x.length ) ; }
Distance : 11

169
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

170
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

171
Tree	if ( y >= TWO_POWER_52 . TWO_POWER_52 () - y < pow ( - TWO_POWER_52 , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . TWO_POWER_52 () - y < pow ( - TWO_POWER_52 , y ) * x ) /
Distance : 13

172
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 11

173
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 10

174
Tree	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y >= pow ( x , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 14

175
Tree	if ( y <= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y <= TWO_POWER_52 - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

176
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 9

177
Tree	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) /
Distance : 14

178
Tree	if ( y <= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y <= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

179
Tree	if ( y > - y.length y TWO_POWER_52 < pow ( - x , y ) * x ) /
Code	if ( y > - y.length y TWO_POWER_52 < pow ( - x , y ) * x ) /
Distance : 12

180
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) <=
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < pow ( - x , y ) * x ) <=
Distance : 14

181
Tree	if ( y > - x.length y TWO_POWER_52 < NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 7

182
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , true ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , true ) ; }
Distance : 4

183
Tree	if ( y >= TWO_POWER_52 . y () - TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . y () - TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Distance : 12

184
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

185
Tree	if ( y >= TWO_POWER_52 . TWO_POWER_52 () - TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . TWO_POWER_52 () - TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Distance : 13

186
Tree	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) /
Code	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) /
Distance : 14

187
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y < x.length ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y < x.length ) { return pow ( - x , y ) ; }
Distance : 10

188
Tree	if ( y > - y y TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Code	if ( y > - y y TWO_POWER_52 < pow ( - TWO_POWER_52 , y ) * x ) /
Distance : 13

189
Tree	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) <=
Code	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) <=
Distance : 14

190
Tree	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) <=
Code	if ( y >= TWO_POWER_52 . pow ( TWO_POWER_52 , null ) - x < pow ( - x , y ) * x ) <=
Distance : 14

191
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= TWO_POWER_52 . pow ( TWO_POWER_52 , NUMBER_CONSTANT ) ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= TWO_POWER_52 . pow ( TWO_POWER_52 , NUMBER_CONSTANT ) ) { return pow ( - x , x ) ; }
Distance : 11

192
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , y * y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow . pow ( x , y * y ) ; }
Distance : 8

193
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) - TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 10

194
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= TWO_POWER_52 < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 11

195
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return x . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return x . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

196
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) <= y < NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 11

197
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x + NUMBER_CONSTANT ) ; }
Distance : 9

198
Tree	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= pow ( TWO_POWER_52 , NUMBER_CONSTANT , y ) y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 10

199
Tree	if ( y >= y y TWO_POWER_52 >= this . y . y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 >= this . y . y ) { return pow ( - x , y ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 16
Wrong
========================================================================
False

0
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Distance : 17

1
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Distance : 17

2
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Distance : 16

3
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

4
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

5
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

6
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

7
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

8
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

9
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

10
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

11
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

12
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

13
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

14
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

15
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , ^ ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , ^ ) ;
Distance : 6

1
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , super ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , super ) ;
Distance : 6

2
Tree	iterations = new Incrementor < iterations > ( super(); ) ;
Code	iterations = new Incrementor < iterations > ( super(); ) ;
Distance : 6

3
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

4
Tree	iterations = new Incrementor < iterations > ( iterations , true ) ;
Code	iterations = new Incrementor < iterations > ( iterations , true ) ;
Distance : 7

5
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS , iterations ) ;
Distance : 4

6
Tree	iterations = new Incrementor ( new Incrementor ( return; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( return; ) ) ;
Distance : 5

7
Tree	iterations = new Incrementor < iterations > ( return; ) ;
Code	iterations = new Incrementor < iterations > ( return; ) ;
Distance : 6

8
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , else , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , else , iterations ) ;
Distance : 7

9
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , CHAR_CONS ) ;
Distance : 6

10
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , iterations ) ;
Distance : 4

11
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Distance : 5

12
Tree	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ;
Distance : 7

13
Tree	iterations = new Incrementor ( iterations . IEEEremainder () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations . IEEEremainder () , iterations , iterations ) ;
Distance : 7

14
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , else ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , else ) ;
Distance : 6

15
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , false ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , false ) ;
Distance : 6

16
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; notifyListeners
Distance : 6

17
Tree	iterations = new Incrementor ( new Incrementor () ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () ) ; notifyListeners
Distance : 4

18
Tree	iterations = new Incrementor ( new Incrementor ( super(); ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( super(); ) ) ;
Distance : 5

19
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ;
Distance : 7

20
Tree	iterations = new iterations ( iterations , boundDifference () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , boundDifference () , new MaxIterCallback () ) ;
Distance : 5

21
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 2

22
Tree	iterations = new Incrementor ( STRING_CONSTANT , null ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , null ) ;
Distance : 4

23
Tree	iterations = new Incrementor ( CHAR_CONS ) ;
Code	iterations = new Incrementor ( CHAR_CONS ) ;
Distance : 5

24
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

25
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

26
Tree	iterations = new Incrementor ( iterations , boundDifference () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , boundDifference () , CHAR_CONS ) ;
Distance : 5

27
Tree	iterations = new Incrementor ( iterations , getTolerance () , CHAR_CONS , false , false ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , CHAR_CONS , false , false ) ;
Distance : 9

28
Tree	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 7

29
Tree	iterations = new Incrementor ( iterations , boundDifference () , CHAR_CONS , false , false ) ;
Code	iterations = new Incrementor ( iterations , boundDifference () , CHAR_CONS , false , false ) ;
Distance : 9

30
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; class
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; class
Distance : 2

31
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , CHAR_CONS ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , CHAR_CONS ) ;
Distance : 6

32
Tree	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 14

33
Tree	iterations = new Incrementor ( iterations , getTolerance () , else ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , else ) ;
Distance : 5

34
Tree	iterations = new Incrementor ( iterations , getTolerance () , else , false , false ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , else , false , false ) ;
Distance : 9

35
Tree	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 4

36
Tree	iterations = new Incrementor ( new Incrementor () , false , super ) ;
Code	iterations = new Incrementor ( new Incrementor () , false , super ) ;
Distance : 6

37
Tree	iterations = new Incrementor ( iterations , getNodes () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getNodes () , new MaxIterCallback () ) ;
Distance : 4

38
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 3

39
Tree	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

40
Tree	iterations = new Incrementor ( new Incrementor () , false , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , false , false ) ;
Distance : 6

41
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; notifyListeners
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; notifyListeners
Distance : 2

42
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

43
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; array
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; array
Distance : 2

44
Tree	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ; class
Code	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ; class
Distance : 7

45
Tree	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ; array
Code	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ; array
Distance : 7

46
Tree	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; notifyListeners
Code	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; notifyListeners
Distance : 8

47
Tree	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; class
Code	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; class
Distance : 15

48
Tree	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ; notifyListeners
Distance : 8

49
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Test
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Test
Distance : 8

50
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Class
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Class
Distance : 8

51
Tree	iterations = new Incrementor ( new Incrementor < iterations > () ) ; array
Code	iterations = new Incrementor ( new Incrementor < iterations > () ) ; array
Distance : 6

52
Tree	iterations = new Incrementor ( new Incrementor < iterations > () ) ; class
Code	iterations = new Incrementor ( new Incrementor < iterations > () ) ; class
Distance : 6

53
Tree	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; array
Code	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; array
Distance : 15

54
Tree	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ; class
Code	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ; class
Distance : 8

55
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; class
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; class
Distance : 1

56
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; notifyListeners
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; notifyListeners
Distance : 1

57
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; array
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; array
Distance : 6

58
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; notifyListeners
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; notifyListeners
Distance : 6

59
Tree	iterations = new Incrementor ( iterations . getBytes () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations . getBytes () , iterations , iterations ) ;
Distance : 7

60
Tree	iterations = new Incrementor ( new Incrementor () , true , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new Incrementor () , true , NUMBER_CONSTANT ) ;
Distance : 6

61
Tree	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; array
Code	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; array
Distance : 8

62
Tree	iterations = new Incrementor <> () ; notifyListeners
Code	iterations = new Incrementor <> () ; notifyListeners
Distance : 7

63
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Distance : 3

64
Tree	iterations = new Incrementor ( STRING_CONSTANT , return; ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , return; ) ;
Distance : 4

65
Tree	iterations = new Incrementor <> () ; class
Code	iterations = new Incrementor <> () ; class
Distance : 7

66
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else ) ;
Distance : 2

67
Tree	iterations = new iterations ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Distance : 5

68
Tree	iterations = new Incrementor ( new Incrementor () , true , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , true , false ) ;
Distance : 6

69
Tree	iterations = new Incrementor ( new Incrementor () , else ) ;
Code	iterations = new Incrementor ( new Incrementor () , else ) ;
Distance : 5

70
Tree	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ; class
Code	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ; class
Distance : 6

71
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

72
Tree	iterations = new Incrementor ( new Incrementor () , hex ) ;
Code	iterations = new Incrementor ( new Incrementor () , hex ) ;
Distance : 5

73
Tree	iterations = new Incrementor ( new Incrementor () , else ) ;
Code	iterations = new Incrementor ( new Incrementor () , else ) ;
Distance : 5

74
Tree	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ;
Distance : 6

75
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Distance : 3

76
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex ) ;
Distance : 2

77
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; notifyListeners
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; notifyListeners
Distance : 2

78
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 2

79
Tree	iterations = new Incrementor ( new Incrementor < iterations > () ) ;
Code	iterations = new Incrementor ( new Incrementor < iterations > () ) ;
Distance : 5

80
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , else ) ;
Distance : 3

81
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 3

82
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , else ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , else ) ;
Distance : 6

83
Tree	iterations = new Incrementor ( iterations , iterations . IEEEremainder () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , iterations . IEEEremainder () , new MaxIterCallback () ) ;
Distance : 6

84
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , super , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , super , iterations ) ;
Distance : 9

85
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ;
Distance : 5

86
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback ( null ) , CHAR_CONS ) ;
Distance : 6

87
Tree	iterations = new Incrementor ( new Incrementor ( return; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( return; ) , Integer.MAX_VALUE ) ;
Distance : 7

88
Tree	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ; array
Code	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ; array
Distance : 6

89
Tree	iterations = new Incrementor < iterations > () ; notifyListeners
Code	iterations = new Incrementor < iterations > () ; notifyListeners
Distance : 7

90
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Distance : 5

91
Tree	iterations = new Incrementor ( new Incrementor ( break; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( break; ) , Integer.MAX_VALUE ) ;
Distance : 7

92
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; array
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; array
Distance : 6

93
Tree	iterations = new Incrementor ( false , new MaxIterCallback () ) ; Test
Code	iterations = new Incrementor ( false , new MaxIterCallback () ) ; Test
Distance : 2

94
Tree	iterations = new Incrementor ( iterations , iterations . getChangedScopeNodesForPass () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , iterations . getChangedScopeNodesForPass () , new MaxIterCallback () ) ;
Distance : 6

95
Tree	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ; array
Code	iterations = new Incrementor ( new Incrementor < iterations > () , Integer.MAX_VALUE ) ; array
Distance : 8

96
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , Color.green , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , Color.green , iterations ) ;
Distance : 9

97
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; class
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; class
Distance : 6

98
Tree	iterations = new Incrementor ( new Incrementor ( super(); ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( super(); ) , Integer.MAX_VALUE ) ;
Distance : 7

99
Tree	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 5

100
Tree	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 5

101
Tree	iterations = new Incrementor ( iterations , iterations . getPropertyCollapseLevel () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , iterations . getPropertyCollapseLevel () , new MaxIterCallback () ) ;
Distance : 6

102
Tree	iterations = new Incrementor ( new Incrementor () , false , CHAR_CONS ) ;
Code	iterations = new Incrementor ( new Incrementor () , false , CHAR_CONS ) ;
Distance : 6

103
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; class
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; class
Distance : 2

104
Tree	iterations = new Incrementor ( STRING_CONSTANT , super(); ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , super(); ) ;
Distance : 4

105
Tree	iterations = new Incrementor ( new Incrementor () ) ; array
Code	iterations = new Incrementor ( new Incrementor () ) ; array
Distance : 4

106
Tree	iterations = new Incrementor ( iterations . getKey () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations . getKey () , iterations , iterations ) ;
Distance : 7

107
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; notifyListeners
Distance : 6

108
Tree	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; array
Code	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; array
Distance : 8

109
Tree	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; notifyListeners
Distance : 15

110
Tree	iterations = new Incrementor ( STRING_CONSTANT , break; ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , break; ) ;
Distance : 4

111
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; class
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; class
Distance : 6

112
Tree	iterations = new Incrementor < iterations > ( iterations . IEEEremainder () ) ;
Code	iterations = new Incrementor < iterations > ( iterations . IEEEremainder () ) ;
Distance : 7

113
Tree	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ; notifyListeners
Distance : 6

114
Tree	iterations = new Incrementor <> () ; array
Code	iterations = new Incrementor <> () ; array
Distance : 7

115
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super ) ;
Distance : 6

116
Tree	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 5

117
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Distance : 3

118
Tree	iterations = new Incrementor ( iterations . copySelf () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations . copySelf () , iterations , iterations ) ;
Distance : 7

119
Tree	iterations = new iterations ( iterations , getNodes () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getNodes () , new MaxIterCallback () ) ;
Distance : 5

120
Tree	iterations = new Incrementor ( new Incrementor < iterations > () ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor < iterations > () ) ; notifyListeners
Distance : 6

121
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , ^ , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , ^ , iterations ) ;
Distance : 7

122
Tree	iterations = new Incrementor ( new Incrementor () , false , NUMBER_CONSTANT ) ; Test
Code	iterations = new Incrementor ( new Incrementor () , false , NUMBER_CONSTANT ) ; Test
Distance : 7

123
Tree	iterations = new Incrementor < iterations > ( iterations . newBuilder () ) ;
Code	iterations = new Incrementor < iterations > ( iterations . newBuilder () ) ;
Distance : 7

124
Tree	iterations = new Incrementor ( new Incrementor () , else , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , else , false ) ;
Distance : 6

125
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; array
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; array
Distance : 6

126
Tree	iterations = new Incrementor ( ! ) ;
Code	iterations = new Incrementor ( ! ) ;
Distance : 5

127
Tree	iterations = new Incrementor ( false , new MaxIterCallback () ) ; Class
Code	iterations = new Incrementor ( false , new MaxIterCallback () ) ; Class
Distance : 2

128
Tree	iterations = new Incrementor ( new Incrementor () , false , NUMBER_CONSTANT ) ; Class
Code	iterations = new Incrementor ( new Incrementor () , false , NUMBER_CONSTANT ) ; Class
Distance : 7

129
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; notifyListeners
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; notifyListeners
Distance : 5

130
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ;
Distance : 4

131
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; class
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; class
Distance : 5

132
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; array
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; array
Distance : 1

133
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , CHAR_CONS , iterations ) ;
Distance : 9

134
Tree	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; class
Code	iterations = new Incrementor < iterations > ( iterations , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; class
Distance : 8

135
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , false , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , false , iterations ) ;
Distance : 9

136
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Distance : 1

137
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , else ) ;
Distance : 3

138
Tree	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ; notifyListeners
Code	iterations = new Incrementor < iterations > ( Integer.MAX_VALUE ) ; notifyListeners
Distance : 7

139
Tree	iterations = new Incrementor ( new Incrementor ( break; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( break; ) ) ;
Distance : 5

140
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , hex ) ;
Distance : 3

141
Tree	iterations = new Incrementor ( new Incrementor () , CHAR_CONS , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , CHAR_CONS , false ) ;
Distance : 6

142
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ;
Distance : 5

143
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , false ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , false ) ;
Distance : 6

144
Tree	iterations = new Incrementor ( true , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( true , new MaxIterCallback () ) ;
Distance : 1

145
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . getBytes () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . getBytes () ) ;
Distance : 4

146
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . getInstance () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . getInstance () ) ;
Distance : 4

147
Tree	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR , false ) ;
Distance : 6

148
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , ^ ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , ^ ) ;
Distance : 6

149
Tree	iterations = new Incrementor < iterations > () ;
Code	iterations = new Incrementor < iterations > () ;
Distance : 6

150
Tree	iterations = new Incrementor ( false ) ; Test
Code	iterations = new Incrementor ( false ) ; Test
Distance : 6

151
Tree	iterations = new Incrementor ( new Incrementor () ) ;
Code	iterations = new Incrementor ( new Incrementor () ) ;
Distance : 3

152
Tree	iterations = new Incrementor ( iterations , getNodes () , CHAR_CONS , false , false ) ;
Code	iterations = new Incrementor ( iterations , getNodes () , CHAR_CONS , false , false ) ;
Distance : 9

153
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , super , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , super , iterations ) ;
Distance : 7

154
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 3

155
Tree	iterations = new Incrementor < iterations > () ; class
Code	iterations = new Incrementor < iterations > () ; class
Distance : 7

156
Tree	iterations = new Incrementor < iterations > ( continue; ) ;
Code	iterations = new Incrementor < iterations > ( continue; ) ;
Distance : 6

157
Tree	iterations = new Incrementor < iterations > () ; array
Code	iterations = new Incrementor < iterations > () ; array
Distance : 7

158
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . getClass () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . getClass () ) ;
Distance : 4

159
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , else , iterations ) ;
Distance : 4

160
Tree	iterations = new Incrementor ( new Incrementor () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( new Incrementor () , CHAR_CONS ) ;
Distance : 5

161
Tree	iterations = new Incrementor ( iterations , getTolerance () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , CHAR_CONS ) ;
Distance : 5

162
Tree	iterations = new Incrementor < iterations > ( iterations . getBytes () ) ;
Code	iterations = new Incrementor < iterations > ( iterations . getBytes () ) ;
Distance : 7

163
Tree	iterations = new Incrementor <> () ;
Code	iterations = new Incrementor <> () ;
Distance : 6

164
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . emptySet () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , iterations . emptySet () ) ;
Distance : 4

165
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 3

166
Tree	iterations = new Incrementor < iterations > ( null ) ;
Code	iterations = new Incrementor < iterations > ( null ) ;
Distance : 6

167
Tree	iterations = new Incrementor ( new Incrementor () , false , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new Incrementor () , false , NUMBER_CONSTANT ) ;
Distance : 6

168
Tree	iterations = new Incrementor ( new Incrementor () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( new Incrementor () , CHAR_CONS ) ;
Distance : 5

169
Tree	iterations = new Incrementor ( new Incrementor () , hex ) ;
Code	iterations = new Incrementor ( new Incrementor () , hex ) ;
Distance : 5

170
Tree	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( STRING_CONSTANT ) ) ;
Distance : 5

171
Tree	iterations = new Incrementor ( iterations , getNodes () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , getNodes () , CHAR_CONS ) ;
Distance : 5

172
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Distance : 1

173
Tree	iterations = new Incrementor ( iterations , boundDifference () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , boundDifference () , new MaxIterCallback () ) ;
Distance : 4

174
Tree	iterations = new Incrementor ( false , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( false , new MaxIterCallback () ) ;
Distance : 1

175
Tree	iterations = new Incrementor ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Distance : 4

176
Tree	iterations = new Incrementor < iterations > ( iterations . getKey () ) ;
Code	iterations = new Incrementor < iterations > ( iterations . getKey () ) ;
Distance : 7

177
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
Distance : 0

178
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , hex , iterations ) ;
Distance : 4

179
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , hex ) ;
Distance : 3

180
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Distance : 3

181
Tree	iterations = new Incrementor ( new Incrementor () ) ; class
Code	iterations = new Incrementor ( new Incrementor () ) ; class
Distance : 4

182
Tree	iterations = new Incrementor ( false ) ; Class
Code	iterations = new Incrementor ( false ) ; Class
Distance : 6

183
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , CHAR_CONS , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , CHAR_CONS , iterations ) ;
Distance : 7

184
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , else ) ;
Distance : 3

185
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , super ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback ( null ) , super ) ;
Distance : 6

186
Tree	iterations = new Incrementor ( new Incrementor () , hex , false ) ;
Code	iterations = new Incrementor ( new Incrementor () , hex , false ) ;
Distance : 6

187
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; array
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; array
Distance : 2

188
Tree	iterations = new Incrementor ( iterations , iterations . getBytes () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , iterations . getBytes () , new MaxIterCallback () ) ;
Distance : 6

189
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , false ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , false ) ;
Distance : 3

190
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; array
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; array
Distance : 5

191
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; class
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; class
Distance : 6

192
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Distance : 5

193
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ;
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ;
Distance : 5

194
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ;
Code	iterations = new Incrementor < iterations > ( iterations , false ) ;
Distance : 7

195
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ;
Distance : 5

196
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , hex ) ;
Distance : 3

197
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 3

198
Tree	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; notifyListeners
Code	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; notifyListeners
Distance : 8

199
Tree	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; class
Code	iterations = new Incrementor ( new Incrementor ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; class
Distance : 8

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( real == NUMBER_CONSTANT && imaginary + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary + STRING_CONSTANT ) { return NaN ; }
Distance : 3

1
Tree	if ( real == NUMBER_CONSTANT && imaginary > FunctionFlavor.NORMAL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > FunctionFlavor.NORMAL ) { return NaN ; }
Distance : 3

2
Tree	if ( real == NUMBER_CONSTANT && children () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

3
Tree	if ( real == NUMBER_CONSTANT && imaginary > rhs.b ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > rhs.b ) { return NaN ; }
Distance : 3

4
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isPointInRect () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isPointInRect () ) { return NaN ; }
Distance : 4

5
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE < imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE < imaginary ) { return NaN ; }
Distance : 4

6
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE != null ) { return NaN ; }
Distance : 4

7
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

8
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

9
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

10
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

11
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

12
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

13
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions != null ) { return NaN ; }
Distance : 4

14
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions < imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions < imaginary ) { return NaN ; }
Distance : 4

15
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 13

16
Tree	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

17
Tree	if ( real == NUMBER_CONSTANT && real % NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real % NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

18
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary . imaginary ( imaginary ) > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary . imaginary ( imaginary ) > imaginary ) { return NaN ; }
Distance : 9

19
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 14

20
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

21
Tree	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Distance : 4

22
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 5

23
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () <= imaginary ) { return NaN ; }
Distance : 5

24
Tree	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED >= NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED >= NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

25
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary < startConfiguration.length ) { return NaN ; }
Distance : 4

26
Tree	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

27
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isObjectLiteralThatCanBeSkipped () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isObjectLiteralThatCanBeSkipped () ) { return NaN ; }
Distance : 4

28
Tree	if ( real == NUMBER_CONSTANT && imaginary == firstNonBottom () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == firstNonBottom () ) { return NaN ; }
Distance : 3

29
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

30
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 10

31
Tree	if ( real . copySelf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

32
Tree	if ( real == NUMBER_CONSTANT && real < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

33
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

34
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary < Euclidean3D ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary < Euclidean3D ) { return NaN ; }
Distance : 5

35
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary < startPoint.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary < startPoint.length ) { return NaN ; }
Distance : 4

36
Tree	if ( real == NUMBER_CONSTANT && removable [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && removable [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Distance : 6

37
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

38
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 5

39
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

40
Tree	if ( real == NUMBER_CONSTANT && imaginary != TernaryValue.TRUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != TernaryValue.TRUE ) { return NaN ; }
Distance : 3

41
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

42
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

43
Tree	if ( real == NUMBER_CONSTANT && imaginary imaginary sample1.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary imaginary sample1.length ) { return NaN ; }
Distance : 3

44
Tree	if ( real == NUMBER_CONSTANT && imaginary != definitionsGatherer.definitions ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != definitionsGatherer.definitions ) { return NaN ; }
Distance : 3

45
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

46
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P != null ) { return NaN ; }
Distance : 4

47
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length imaginary startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length imaginary startConfiguration.length ) { return NaN ; }
Distance : 5

48
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

49
Tree	if ( real == NUMBER_CONSTANT && imaginary == findDomainAxisIndex () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == findDomainAxisIndex () ) { return NaN ; }
Distance : 3

50
Tree	if ( real == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Distance : 3

51
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 3

52
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 4

53
Tree	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Distance : 3

54
Tree	if ( real == NUMBER_CONSTANT && imaginary [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Distance : 5

55
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

56
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Distance : 4

57
Tree	if ( real == NUMBER_CONSTANT && getEnums + NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums + NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

58
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS >= NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS >= NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

59
Tree	if ( real == NUMBER_CONSTANT && children [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Distance : 6

60
Tree	if ( real == NUMBER_CONSTANT && getEnums != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums != null ) { return NaN ; }
Distance : 4

61
Tree	if ( real == NUMBER_CONSTANT && imaginary () > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () > imaginary ) { return NaN ; }
Distance : 4

62
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

63
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

64
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

65
Tree	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Distance : 4

66
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

67
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT && imaginary ) { return NaN ; }
Distance : 4

68
Tree	if ( real == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == CHAR_CONS ) { return NaN ; }
Distance : 3

69
Tree	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

70
Tree	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 3

71
Tree	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 3

72
Tree	if ( real == NUMBER_CONSTANT && real < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

73
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

74
Tree	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 3

75
Tree	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

76
Tree	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

77
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT && imaginary ) { return NaN ; }
Distance : 4

78
Tree	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

79
Tree	if ( real . regionMatches ( real ) imaginary imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 9

80
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

81
Tree	if ( real == NUMBER_CONSTANT && imaginary % NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary % NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

82
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT && real ) { return NaN ; }
Distance : 3

83
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

84
Tree	if ( real . regionMatches ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Distance : 8

85
Tree	if ( real . getPrinter ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Code	if ( real . getPrinter ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Distance : 8

86
Tree	if ( real == NUMBER_CONSTANT && imaginary imaginary LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary imaginary LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Distance : 3

87
Tree	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

88
Tree	if ( real . regionMatches ( real ) imaginary imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 9

89
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary . imaginary ( real ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary . imaginary ( real ) ) { return NaN ; }
Distance : 7

90
Tree	if ( real . escapeJson ( real ) imaginary imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real . escapeJson ( real ) imaginary imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 9

91
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS imaginary IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS imaginary IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 5

92
Tree	if ( real == NUMBER_CONSTANT && imaginary == withSettings () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == withSettings () ) { return NaN ; }
Distance : 3

93
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary . real ( real ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary . real ( real ) ) { return NaN ; }
Distance : 7

94
Tree	if ( real . copySelf ( real ) imaginary imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real . copySelf ( real ) imaginary imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 9

95
Tree	if ( real . escapeJson ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Code	if ( real . escapeJson ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Distance : 8

96
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary . imaginary ( NaN ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary . imaginary ( NaN ) ) { return NaN ; }
Distance : 7

97
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == null ) { return NaN ; }
Distance : 3

98
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Distance : 3

99
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length >= NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length >= NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

100
Tree	if ( real == NUMBER_CONSTANT && imaginary > Boolean.TRUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > Boolean.TRUE ) { return NaN ; }
Distance : 3

101
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Distance : 4

102
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Distance : 3

103
Tree	if ( real == NUMBER_CONSTANT && getEnums == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

104
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 3

105
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

106
Tree	if ( real == NUMBER_CONSTANT && imaginary > Year.MAXIMUM_YEAR ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > Year.MAXIMUM_YEAR ) { return NaN ; }
Distance : 3

107
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == null ) { return NaN ; }
Distance : 3

108
Tree	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Distance : 4

109
Tree	if ( real == NUMBER_CONSTANT && imaginary <= - imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= - imaginary ) { return NaN ; }
Distance : 4

110
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE + NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE + NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

111
Tree	if ( real == NUMBER_CONSTANT && getEnums () > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () > imaginary ) { return NaN ; }
Distance : 5

112
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

113
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

114
Tree	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 3

115
Tree	if ( real == NUMBER_CONSTANT && imaginary != RegularizedGamma.P ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != RegularizedGamma.P ) { return NaN ; }
Distance : 3

116
Tree	if ( real == NUMBER_CONSTANT && getEnums == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums == null ) { return NaN ; }
Distance : 3

117
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == null ) { return NaN ; }
Distance : 3

118
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

119
Tree	if ( real == NUMBER_CONSTANT && imaginary != IncrementalCheckMode.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != IncrementalCheckMode.OFF ) { return NaN ; }
Distance : 3

120
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions + NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions + NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

121
Tree	if ( real == NUMBER_CONSTANT && imaginary () <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () <= imaginary ) { return NaN ; }
Distance : 4

122
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getIntercept () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getIntercept () ) { return NaN ; }
Distance : 4

123
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P < imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P < imaginary ) { return NaN ; }
Distance : 4

124
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () > imaginary ) { return NaN ; }
Distance : 5

125
Tree	if ( real == NUMBER_CONSTANT && children () <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () <= imaginary ) { return NaN ; }
Distance : 5

126
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

127
Tree	if ( real . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

128
Tree	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF >= NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF >= NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

129
Tree	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Distance : 4

130
Tree	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Distance : 4

131
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

132
Tree	if ( real == NUMBER_CONSTANT && getEnums < imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums < imaginary ) { return NaN ; }
Distance : 4

133
Tree	if ( real == NUMBER_CONSTANT && children () > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () > imaginary ) { return NaN ; }
Distance : 5

134
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P + NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P + NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

135
Tree	if ( real == NUMBER_CONSTANT && getEnums () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

136
Tree	if ( real == NUMBER_CONSTANT && imaginary . imaginary ( imaginary ) > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary . imaginary ( imaginary ) > imaginary ) { return NaN ; }
Distance : 8

137
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary < startConfiguration.length ) { return NaN ; }
Distance : 5

138
Tree	if ( imaginary == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

139
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

140
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Distance : 4

141
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

142
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT > imaginary ) { return NaN ; }
Distance : 3

143
Tree	if ( real == NUMBER_CONSTANT && real <= - imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= - imaginary ) { return NaN ; }
Distance : 5

144
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT > imaginary ) { return NaN ; }
Distance : 4

145
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 4

146
Tree	if ( real . escapeJson ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

147
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

148
Tree	if ( real == NUMBER_CONSTANT && getEnums == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums == IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

149
Tree	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

150
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

151
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Distance : 5

152
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

153
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

154
Tree	if ( real == NUMBER_CONSTANT && callSite [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && callSite [ NUMBER_CONSTANT ] == null ) { return NaN ; }
Distance : 6

155
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

156
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

157
Tree	if ( real == NUMBER_CONSTANT && imaginary & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Distance : 7

158
Tree	if ( real == NUMBER_CONSTANT && real + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real + STRING_CONSTANT ) { return NaN ; }
Distance : 4

159
Tree	if ( real == NUMBER_CONSTANT && imaginary % NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary % NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

160
Tree	if ( real == NUMBER_CONSTANT && imaginary () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

161
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= - imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= - imaginary ) { return NaN ; }
Distance : 5

162
Tree	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

163
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

164
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 14

165
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary % NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary % NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

166
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

167
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT && imaginary ) { return NaN ; }
Distance : 3

168
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT > imaginary ) { return NaN ; }
Distance : 4

169
Tree	if ( real == NUMBER_CONSTANT && imaginary . real ( imaginary ) > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary . real ( imaginary ) > imaginary ) { return NaN ; }
Distance : 8

170
Tree	if ( real == NUMBER_CONSTANT && imaginary <= - real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= - real ) { return NaN ; }
Distance : 4

171
Tree	if ( real . getPrinter ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

172
Tree	if ( real == NUMBER_CONSTANT && getEnums () <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () <= imaginary ) { return NaN ; }
Distance : 5

173
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

174
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

175
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

176
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT > real ) { return NaN ; }
Distance : 3

177
Tree	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

178
Tree	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Distance : 4

179
Tree	if ( real == NUMBER_CONSTANT && real & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Distance : 8

180
Tree	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

181
Tree	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

182
Tree	if ( real == NUMBER_CONSTANT && imaginary . imaginary ( real ) > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary . imaginary ( real ) > imaginary ) { return NaN ; }
Distance : 8

183
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary + STRING_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary + STRING_CONSTANT ) { return NaN ; }
Distance : 4

184
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT < < NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

185
Tree	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + real ) { return NaN ; }
Distance : 4

186
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

187
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 13

188
Tree	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

189
Tree	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

190
Tree	if ( real == NUMBER_CONSTANT && imaginary + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary + STRING_CONSTANT ) { return NaN ; }
Distance : 3

191
Tree	if ( real == NUMBER_CONSTANT && imaginary imaginary mant.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary imaginary mant.length ) { return NaN ; }
Distance : 3

192
Tree	if ( real == NUMBER_CONSTANT && imaginary imaginary LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary imaginary LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Distance : 3

193
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Distance : 8

194
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

195
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS imaginary startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS imaginary startConfiguration.length ) { return NaN ; }
Distance : 5

196
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary . imaginary ( imaginary ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary . imaginary ( imaginary ) ) { return NaN ; }
Distance : 7

197
Tree	if ( real == NUMBER_CONSTANT && imaginary & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary & ( NUMBER_CONSTANT < < NUMBER_CONSTANT ) ) { return NaN ; }
Distance : 7

198
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS imaginary Long.MAX_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS imaginary Long.MAX_VALUE ) { return NaN ; }
Distance : 5

199
Tree	if ( real . copySelf ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Code	if ( real . copySelf ( real ) imaginary imaginary == imaginary ) { return NaN ; }
Distance : 8

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Distance : 5

1
Tree	location . smartNullPointerException ( location , obj , location , new Reporter () , false ) ;
Code	location . smartNullPointerException ( location , obj , location , new Reporter () , false ) ;
Distance : 11

2
Tree	smartNullPointerException ( Feature.INTERFACE ) ;
Code	smartNullPointerException ( Feature.INTERFACE ) ;
Distance : 7

3
Tree	location () . smartNullPointerException ( location ) ;
Code	location () . smartNullPointerException ( location ) ;
Distance : 4

4
Tree	new Reporter () . smartNullPointerException ( obj , location ) ;
Code	new Reporter () . smartNullPointerException ( obj , location ) ;
Distance : 0

5
Tree	location . smartNullPointerException ( location , location , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( location , location , new Reporter ( location ) ) ;
Distance : 10

6
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , obj ) ;
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , obj ) ;
Distance : 5

7
Tree	obj () . smartNullPointerException ( obj ) ;
Code	obj () . smartNullPointerException ( obj ) ;
Distance : 4

8
Tree	obj . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Distance : 4

9
Tree	location . smartNullPointerException ( location , location , obj , new Reporter () , false ) ;
Code	location . smartNullPointerException ( location , location , obj , new Reporter () , false ) ;
Distance : 12

10
Tree	location . smartNullPointerException ( location , location , this ) ;
Code	location . smartNullPointerException ( location , location , this ) ;
Distance : 6

11
Tree	location . smartNullPointerException ( new Reporter () ) ;
Code	location . smartNullPointerException ( new Reporter () ) ;
Distance : 6

12
Tree	obj . smartNullPointerException ( false ) ;
Code	obj . smartNullPointerException ( false ) ;
Distance : 6

13
Tree	obj . smartNullPointerException ( location , location ) ;
Code	obj . smartNullPointerException ( location , location ) ;
Distance : 4

14
Tree	obj . smartNullPointerException ( location , location , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , location , new Reporter () ) ;
Distance : 8

15
Tree	obj . smartNullPointerException ( location , obj ) ;
Code	obj . smartNullPointerException ( location , obj ) ;
Distance : 5

16
Tree	obj . smartNullPointerException ( location , obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , obj , new Reporter () ) ;
Distance : 8

17
Tree	smartNullPointerException ( location , location , Verification.EXPLICIT ) ;
Code	smartNullPointerException ( location , location , Verification.EXPLICIT ) ;
Distance : 7

18
Tree	smartNullPointerException ( location , obj , Verification.EXPLICIT ) ;
Code	smartNullPointerException ( location , obj , Verification.EXPLICIT ) ;
Distance : 7

19
Tree	obj . smartNullPointerException ( location , true ) ;
Code	obj . smartNullPointerException ( location , true ) ;
Distance : 5

20
Tree	smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) ;
Distance : 6

21
Tree	location . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Code	location . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Distance : 9

22
Tree	new Reporter ( false ) . smartNullPointerException ( location ) ;
Code	new Reporter ( false ) . smartNullPointerException ( location ) ;
Distance : 5

23
Tree	location . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ; Test
Code	location . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ; Test
Distance : 7

24
Tree	new Reporter () . smartNullPointerException ( @ ) ;
Code	new Reporter () . smartNullPointerException ( @ ) ;
Distance : 3

25
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 5

26
Tree	location . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ; Class
Code	location . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ; Class
Distance : 7

27
Tree	smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 4

28
Tree	smartNullPointerException ( obj , new Reporter () ) ;
Code	smartNullPointerException ( obj , new Reporter () ) ;
Distance : 7

29
Tree	obj . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ;
Distance : 6

30
Tree	location . smartNullPointerException ( java.util.Locale.US ) ;
Code	location . smartNullPointerException ( java.util.Locale.US ) ;
Distance : 6

31
Tree	location . smartNullPointerException ( CompilerOptions.LanguageMode.ECMASCRIPT_NEXT ) ;
Code	location . smartNullPointerException ( CompilerOptions.LanguageMode.ECMASCRIPT_NEXT ) ;
Distance : 6

32
Tree	new Reporter () . smartNullPointerException ( obj , obj ) ;
Code	new Reporter () . smartNullPointerException ( obj , obj ) ;
Distance : 1

33
Tree	obj . smartNullPointerException ( Feature.MODULES ) ;
Code	obj . smartNullPointerException ( Feature.MODULES ) ;
Distance : 6

34
Tree	smartNullPointerException ( obj , location ) ;
Code	smartNullPointerException ( obj , location ) ;
Distance : 4

35
Tree	location . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 8

36
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

37
Tree	smartNullPointerException () . smartNullPointerException ( location ) ;
Code	smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 4

38
Tree	smartNullPointerException ( new Reporter ( location ) ) ;
Code	smartNullPointerException ( new Reporter ( location ) ) ;
Distance : 8

39
Tree	obj . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 8

40
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 6

41
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 4

42
Tree	smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Code	smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Distance : 4

43
Tree	new Reporter ( obj ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( obj ) ;
Distance : 5

44
Tree	obj . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 8

45
Tree	location . smartNullPointerException ( location , obj ) ;
Code	location . smartNullPointerException ( location , obj ) ;
Distance : 5

46
Tree	smartNullPointerException ( location , obj , location . smartNullPointerException () ) ;
Code	smartNullPointerException ( location , obj , location . smartNullPointerException () ) ;
Distance : 9

47
Tree	new Reporter ( true ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( true ) . smartNullPointerException ( obj ) ;
Distance : 5

48
Tree	location . smartNullPointerException ( location , location , new Reporter () ) ;
Code	location . smartNullPointerException ( location , location , new Reporter () ) ;
Distance : 8

49
Tree	location . smartNullPointerException ( location , location ) ;
Code	location . smartNullPointerException ( location , location ) ;
Distance : 4

50
Tree	obj . smartNullPointerException ( location , location , new Reporter ( location ) ) ;
Code	obj . smartNullPointerException ( location , location , new Reporter ( location ) ) ;
Distance : 10

51
Tree	smartNullPointerException ( location , location , new Reporter () . smartNullPointerException ( obj ) ) ;
Code	smartNullPointerException ( location , location , new Reporter () . smartNullPointerException ( obj ) ) ;
Distance : 8

52
Tree	new Reporter ( location ) . smartNullPointerException ( location . smartNullPointerException () , obj ) ;
Code	new Reporter ( location ) . smartNullPointerException ( location . smartNullPointerException () , obj ) ;
Distance : 8

53
Tree	smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 6

54
Tree	smartNullPointerException ( new Reporter () ) ; array
Code	smartNullPointerException ( new Reporter () ) ; array
Distance : 8

55
Tree	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 8

56
Tree	smartNullPointerException ( CheckLevel.ERROR ) ;
Code	smartNullPointerException ( CheckLevel.ERROR ) ;
Distance : 7

57
Tree	new Reporter ( obj ) . smartNullPointerException ( location ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( location ) ;
Distance : 5

58
Tree	smartNullPointerException () . smartNullPointerException ( location ) ; Class
Code	smartNullPointerException () . smartNullPointerException ( location ) ; Class
Distance : 5

59
Tree	smartNullPointerException () ; array
Code	smartNullPointerException () ; array
Distance : 10

60
Tree	smartNullPointerException () ; class
Code	smartNullPointerException () ; class
Distance : 10

61
Tree	new Reporter () . smartNullPointerException () ; notifyListeners
Code	new Reporter () . smartNullPointerException () ; notifyListeners
Distance : 6

62
Tree	location . smartNullPointerException ( new Reporter () ) ; Class
Code	location . smartNullPointerException ( new Reporter () ) ; Class
Distance : 7

63
Tree	location . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( new Reporter () ) ;
Distance : 6

64
Tree	new Reporter () . smartNullPointerException ( location ) ; Class
Code	new Reporter () . smartNullPointerException ( location ) ; Class
Distance : 3

65
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location , obj ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location , obj ) ;
Distance : 7

66
Tree	smartNullPointerException ( location , new Reporter () ) ; Test
Code	smartNullPointerException ( location , new Reporter () ) ; Test
Distance : 9

67
Tree	obj . smartNullPointerException ( this , obj ) ;
Code	obj . smartNullPointerException ( this , obj ) ;
Distance : 5

68
Tree	smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 6

69
Tree	location . smartNullPointerException ( location , obj , new Reporter () ) ;
Code	location . smartNullPointerException ( location , obj , new Reporter () ) ;
Distance : 8

70
Tree	smartNullPointerException ( new Reporter ( location ) ) ; Class
Code	smartNullPointerException ( new Reporter ( location ) ) ; Class
Distance : 9

71
Tree	smartNullPointerException ( new Reporter () ) ; class
Code	smartNullPointerException ( new Reporter () ) ; class
Distance : 8

72
Tree	smartNullPointerException ( location ) ; Test
Code	smartNullPointerException ( location ) ; Test
Distance : 7

73
Tree	smartNullPointerException ( new Reporter () ) ; notifyListeners
Code	smartNullPointerException ( new Reporter () ) ; notifyListeners
Distance : 8

74
Tree	obj . smartNullPointerException ( new Reporter () ) ;
Code	obj . smartNullPointerException ( new Reporter () ) ;
Distance : 6

75
Tree	obj . smartNullPointerException ( true ) ;
Code	obj . smartNullPointerException ( true ) ;
Distance : 6

76
Tree	location . smartNullPointerException ( this , location ) ;
Code	location . smartNullPointerException ( this , location ) ;
Distance : 4

77
Tree	smartNullPointerException ( location , obj , tree.access ) ;
Code	smartNullPointerException ( location , obj , tree.access ) ;
Distance : 7

78
Tree	location () . smartNullPointerException ( location , obj ) ;
Code	location () . smartNullPointerException ( location , obj ) ;
Distance : 4

79
Tree	location . smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 5

80
Tree	location . smartNullPointerException ( new Reporter () , location ) ;
Code	location . smartNullPointerException ( new Reporter () , location ) ;
Distance : 6

81
Tree	smartNullPointerException ( new Reporter ( obj ) ) ;
Code	smartNullPointerException ( new Reporter ( obj ) ) ;
Distance : 7

82
Tree	obj . smartNullPointerException ( location , obj , new Reporter ( location ) ) ;
Code	obj . smartNullPointerException ( location , obj , new Reporter ( location ) ) ;
Distance : 9

83
Tree	location . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location , location ) ;
Distance : 4

84
Tree	smartNullPointerException ( location , obj , new Reporter () . smartNullPointerException ( location ) ) ;
Code	smartNullPointerException ( location , obj , new Reporter () . smartNullPointerException ( location ) ) ;
Distance : 9

85
Tree	obj . smartNullPointerException ( location , obj . smartNullPointerException () ) ;
Code	obj . smartNullPointerException ( location , obj . smartNullPointerException () ) ;
Distance : 8

86
Tree	smartNullPointerException ( location , location , new Reporter () . smartNullPointerException ( location ) ) ;
Code	smartNullPointerException ( location , location , new Reporter () . smartNullPointerException ( location ) ) ;
Distance : 9

87
Tree	smartNullPointerException ( location , obj , location ) ;
Code	smartNullPointerException ( location , obj , location ) ;
Distance : 6

88
Tree	location () . smartNullPointerException ( location , location ) ;
Code	location () . smartNullPointerException ( location , location ) ;
Distance : 3

89
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 5

90
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location , obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location , obj ) ;
Distance : 6

91
Tree	smartNullPointerException ( location , obj , smartNullPointerException ( obj ) ) ;
Code	smartNullPointerException ( location , obj , smartNullPointerException ( obj ) ) ;
Distance : 8

92
Tree	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , location ) ;
Code	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , location ) ;
Distance : 3

93
Tree	location . smartNullPointerException ( true ) ;
Code	location . smartNullPointerException ( true ) ;
Distance : 6

94
Tree	obj . smartNullPointerException ( location , location , this ) ;
Code	obj . smartNullPointerException ( location , location , this ) ;
Distance : 6

95
Tree	obj . smartNullPointerException ( location , location . smartNullPointerException () ) ;
Code	obj . smartNullPointerException ( location , location . smartNullPointerException () ) ;
Distance : 7

96
Tree	smartNullPointerException ( location , location , location ) ;
Code	smartNullPointerException ( location , location , location ) ;
Distance : 7

97
Tree	obj . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException ( obj ) ;
Distance : 5

98
Tree	new Reporter () . smartNullPointerException ( location ) ; Test
Code	new Reporter () . smartNullPointerException ( location ) ; Test
Distance : 3

99
Tree	smartNullPointerException ( obj , obj ) ;
Code	smartNullPointerException ( obj , obj ) ;
Distance : 5

100
Tree	obj . smartNullPointerException ( new Reporter () , obj ) ;
Code	obj . smartNullPointerException ( new Reporter () , obj ) ;
Distance : 7

101
Tree	smartNullPointerException ( location , new Reporter () ) ; Class
Code	smartNullPointerException ( location , new Reporter () ) ; Class
Distance : 9

102
Tree	location . smartNullPointerException ( Feature.MODULES , CheckLevel.ERROR ) ;
Code	location . smartNullPointerException ( Feature.MODULES , CheckLevel.ERROR ) ;
Distance : 5

103
Tree	location . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 8

104
Tree	smartNullPointerException ( false ) ; Class
Code	smartNullPointerException ( false ) ; Class
Distance : 8

105
Tree	smartNullPointerException ( location , location , obj . smartNullPointerException () ) ;
Code	smartNullPointerException ( location , location , obj . smartNullPointerException () ) ;
Distance : 9

106
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 5

107
Tree	smartNullPointerException () . smartNullPointerException ( location , location ) ;
Code	smartNullPointerException () . smartNullPointerException ( location , location ) ;
Distance : 3

108
Tree	smartNullPointerException ( location , obj , obj . smartNullPointerException () ) ;
Code	smartNullPointerException ( location , obj , obj . smartNullPointerException () ) ;
Distance : 9

109
Tree	new Reporter () . smartNullPointerException ( long ) ;
Code	new Reporter () . smartNullPointerException ( long ) ;
Distance : 3

110
Tree	new Reporter () . smartNullPointerException ( super ) ;
Code	new Reporter () . smartNullPointerException ( super ) ;
Distance : 3

111
Tree	obj . smartNullPointerException ( location , obj , obj , new Reporter () , false ) ;
Code	obj . smartNullPointerException ( location , obj , obj , new Reporter () , false ) ;
Distance : 12

112
Tree	new Reporter () . smartNullPointerException ( long ) ;
Code	new Reporter () . smartNullPointerException ( long ) ;
Distance : 3

113
Tree	obj . smartNullPointerException () ;
Code	obj . smartNullPointerException () ;
Distance : 8

114
Tree	new Reporter () . smartNullPointerException ( @ ) ;
Code	new Reporter () . smartNullPointerException ( @ ) ;
Distance : 3

115
Tree	obj . smartNullPointerException ( obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( obj , new Reporter () ) ;
Distance : 6

116
Tree	location . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException ( obj ) ;
Distance : 5

117
Tree	location . smartNullPointerException ( false ) ;
Code	location . smartNullPointerException ( false ) ;
Distance : 6

118
Tree	obj . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException ( location ) ;
Distance : 5

119
Tree	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Distance : 4

120
Tree	new Reporter () . smartNullPointerException ( location , obj ) ;
Code	new Reporter () . smartNullPointerException ( location , obj ) ;
Distance : 2

121
Tree	smartNullPointerException ( false ) ;
Code	smartNullPointerException ( false ) ;
Distance : 7

122
Tree	new Reporter ( location ) . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Code	new Reporter ( location ) . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Distance : 7

123
Tree	new Reporter () . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) ;
Distance : 2

124
Tree	smartNullPointerException ( location , new Reporter () ) ;
Code	smartNullPointerException ( location , new Reporter () ) ;
Distance : 8

125
Tree	smartNullPointerException () . smartNullPointerException ( obj , obj ) ;
Code	smartNullPointerException () . smartNullPointerException ( obj , obj ) ;
Distance : 3

126
Tree	smartNullPointerException () . smartNullPointerException ( obj , location ) ;
Code	smartNullPointerException () . smartNullPointerException ( obj , location ) ;
Distance : 2

127
Tree	smartNullPointerException ( location , obj , obj ) ;
Code	smartNullPointerException ( location , obj , obj ) ;
Distance : 7

128
Tree	smartNullPointerException () ;
Code	smartNullPointerException () ;
Distance : 9

129
Tree	location . smartNullPointerException ( location , obj . smartNullPointerException () ) ;
Code	location . smartNullPointerException ( location , obj . smartNullPointerException () ) ;
Distance : 8

130
Tree	location . smartNullPointerException ( location , location . smartNullPointerException () ) ;
Code	location . smartNullPointerException ( location , location . smartNullPointerException () ) ;
Distance : 7

131
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location , location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location , location ) ;
Distance : 6

132
Tree	smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 6

133
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

134
Tree	location . smartNullPointerException ( location , obj , obj , new Reporter () , false ) ;
Code	location . smartNullPointerException ( location , obj , obj , new Reporter () , false ) ;
Distance : 12

135
Tree	smartNullPointerException ( location , location , obj ) ;
Code	smartNullPointerException ( location , location , obj ) ;
Distance : 7

136
Tree	new Reporter () . smartNullPointerException () ;
Code	new Reporter () . smartNullPointerException () ;
Distance : 5

137
Tree	new Reporter () . smartNullPointerException ( CHAR_CONS ) ;
Code	new Reporter () . smartNullPointerException ( CHAR_CONS ) ;
Distance : 3

138
Tree	location . smartNullPointerException ( Feature.MODULES , PropertyCollapseLevel.ALL ) ;
Code	location . smartNullPointerException ( Feature.MODULES , PropertyCollapseLevel.ALL ) ;
Distance : 5

139
Tree	new Reporter () . smartNullPointerException ( CHAR_CONS ) ;
Code	new Reporter () . smartNullPointerException ( CHAR_CONS ) ;
Distance : 3

140
Tree	location . smartNullPointerException () ;
Code	location . smartNullPointerException () ;
Distance : 8

141
Tree	obj . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	obj . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 8

142
Tree	obj . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

143
Tree	new Reporter ( true ) . smartNullPointerException ( location ) ;
Code	new Reporter ( true ) . smartNullPointerException ( location ) ;
Distance : 5

144
Tree	location . smartNullPointerException ( location , false ) ;
Code	location . smartNullPointerException ( location , false ) ;
Distance : 5

145
Tree	smartNullPointerException ( PropertyCollapseLevel.ALL ) ;
Code	smartNullPointerException ( PropertyCollapseLevel.ALL ) ;
Distance : 7

146
Tree	new Reporter ( location ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( location ) . smartNullPointerException ( obj ) ;
Distance : 5

147
Tree	obj () . smartNullPointerException ( location ) ;
Code	obj () . smartNullPointerException ( location ) ;
Distance : 4

148
Tree	obj . smartNullPointerException ( new Reporter () , location ) ;
Code	obj . smartNullPointerException ( new Reporter () , location ) ;
Distance : 6

149
Tree	smartNullPointerException ( options.propertyRenaming ) ;
Code	smartNullPointerException ( options.propertyRenaming ) ;
Distance : 7

150
Tree	location . smartNullPointerException ( Feature.MODULES ) ;
Code	location . smartNullPointerException ( Feature.MODULES ) ;
Distance : 6

151
Tree	obj . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location , obj ) ;
Distance : 5

152
Tree	smartNullPointerException ( location , location , smartNullPointerException ( location ) ) ;
Code	smartNullPointerException ( location , location , smartNullPointerException ( location ) ) ;
Distance : 9

153
Tree	location . smartNullPointerException ( this , obj ) ;
Code	location . smartNullPointerException ( this , obj ) ;
Distance : 5

154
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj , obj ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj , obj ) ;
Distance : 6

155
Tree	location . smartNullPointerException ( location , obj , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( location , obj , new Reporter ( location ) ) ;
Distance : 9

156
Tree	smartNullPointerException ( location , obj , smartNullPointerException ( location ) ) ;
Code	smartNullPointerException ( location , obj , smartNullPointerException ( location ) ) ;
Distance : 9

157
Tree	location . smartNullPointerException ( new Reporter () ) ; Test
Code	location . smartNullPointerException ( new Reporter () ) ; Test
Distance : 7

158
Tree	location . smartNullPointerException () ; Test
Code	location . smartNullPointerException () ; Test
Distance : 9

159
Tree	obj . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Code	obj . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Distance : 9

160
Tree	smartNullPointerException () . smartNullPointerException ( location ) ; Test
Code	smartNullPointerException () . smartNullPointerException ( location ) ; Test
Distance : 5

161
Tree	location . smartNullPointerException ( new Reporter () , obj ) ;
Code	location . smartNullPointerException ( new Reporter () , obj ) ;
Distance : 7

162
Tree	smartNullPointerException ( new Reporter ( location ) ) ; Test
Code	smartNullPointerException ( new Reporter ( location ) ) ; Test
Distance : 9

163
Tree	smartNullPointerException ( false ) ; Test
Code	smartNullPointerException ( false ) ; Test
Distance : 8

164
Tree	new Reporter () . smartNullPointerException () ; class
Code	new Reporter () . smartNullPointerException () ; class
Distance : 6

165
Tree	smartNullPointerException () ; notifyListeners
Code	smartNullPointerException () ; notifyListeners
Distance : 10

166
Tree	location . smartNullPointerException () ; Class
Code	location . smartNullPointerException () ; Class
Distance : 9

167
Tree	obj . smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 5

168
Tree	smartNullPointerException ( location ) ; Class
Code	smartNullPointerException ( location ) ; Class
Distance : 7

169
Tree	obj . smartNullPointerException ( this , location ) ;
Code	obj . smartNullPointerException ( this , location ) ;
Distance : 4

170
Tree	location . smartNullPointerException ( obj , new Reporter () ) ;
Code	location . smartNullPointerException ( obj , new Reporter () ) ;
Distance : 6

171
Tree	new Reporter ( location ) . smartNullPointerException ( obj . smartNullPointerException () , location ) ;
Code	new Reporter ( location ) . smartNullPointerException ( obj . smartNullPointerException () , location ) ;
Distance : 6

172
Tree	location . smartNullPointerException ( location , obj , this ) ;
Code	location . smartNullPointerException ( location , obj , this ) ;
Distance : 6

173
Tree	location . smartNullPointerException ( Feature.MODULES , Feature.STRING_CONTINUATION ) ;
Code	location . smartNullPointerException ( Feature.MODULES , Feature.STRING_CONTINUATION ) ;
Distance : 5

174
Tree	location () . smartNullPointerException ( obj ) ;
Code	location () . smartNullPointerException ( obj ) ;
Distance : 4

175
Tree	new Reporter () . smartNullPointerException ( location , location ) ;
Code	new Reporter () . smartNullPointerException ( location , location ) ;
Distance : 1

176
Tree	location . smartNullPointerException ( location , new Reporter () ) ;
Code	location . smartNullPointerException ( location , new Reporter () ) ;
Distance : 7

177
Tree	obj . smartNullPointerException ( location , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , new Reporter () ) ;
Distance : 7

178
Tree	location . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException ( location ) ;
Distance : 5

179
Tree	smartNullPointerException ( location , location , location . smartNullPointerException () ) ;
Code	smartNullPointerException ( location , location , location . smartNullPointerException () ) ;
Distance : 10

180
Tree	new Reporter () . smartNullPointerException ( super ) ;
Code	new Reporter () . smartNullPointerException ( super ) ;
Distance : 3

181
Tree	smartNullPointerException ( new Reporter () ) ;
Code	smartNullPointerException ( new Reporter () ) ;
Distance : 7

182
Tree	obj . smartNullPointerException ( location , false ) ;
Code	obj . smartNullPointerException ( location , false ) ;
Distance : 5

183
Tree	smartNullPointerException ( location , location , tree.access ) ;
Code	smartNullPointerException ( location , location , tree.access ) ;
Distance : 7

184
Tree	obj . smartNullPointerException ( location , obj , this ) ;
Code	obj . smartNullPointerException ( location , obj , this ) ;
Distance : 6

185
Tree	new Reporter ( obj ) . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( location . smartNullPointerException () , location ) ;
Distance : 7

186
Tree	smartNullPointerException ( location , location , smartNullPointerException ( obj ) ) ;
Code	smartNullPointerException ( location , location , smartNullPointerException ( obj ) ) ;
Distance : 8

187
Tree	new Reporter ( false ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( false ) . smartNullPointerException ( obj ) ;
Distance : 5

188
Tree	smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( obj ) ;
Distance : 6

189
Tree	smartNullPointerException ( location , obj ) ;
Code	smartNullPointerException ( location , obj ) ;
Distance : 6

190
Tree	smartNullPointerException ( location , location ) ;
Code	smartNullPointerException ( location , location ) ;
Distance : 5

191
Tree	obj () . smartNullPointerException ( location , obj ) ;
Code	obj () . smartNullPointerException ( location , obj ) ;
Distance : 4

192
Tree	obj () . smartNullPointerException ( location , location ) ;
Code	obj () . smartNullPointerException ( location , location ) ;
Distance : 3

193
Tree	smartNullPointerException ( location , obj , new Reporter () . smartNullPointerException ( obj ) ) ;
Code	smartNullPointerException ( location , obj , new Reporter () . smartNullPointerException ( obj ) ) ;
Distance : 8

194
Tree	location . smartNullPointerException ( java.util.Locale.US , CheckLevel.ERROR ) ;
Code	location . smartNullPointerException ( java.util.Locale.US , CheckLevel.ERROR ) ;
Distance : 5

195
Tree	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , obj ) ;
Code	new Reporter () . smartNullPointerException ( obj . smartNullPointerException () , obj ) ;
Distance : 4

196
Tree	smartNullPointerException ( true ) ;
Code	smartNullPointerException ( true ) ;
Distance : 7

197
Tree	smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 6

198
Tree	location . smartNullPointerException ( location , true ) ;
Code	location . smartNullPointerException ( location , true ) ;
Distance : 5

199
Tree	new Reporter () . smartNullPointerException () ; array
Code	new Reporter () . smartNullPointerException () ; array
Distance : 6

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return ! getMock ( returnTypeGenericMetadata ) ;
Code	return ! getMock ( returnTypeGenericMetadata ) ;
Distance : 3

1
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation ) ;
Distance : 4

2
Tree	return returnTypeGenericMetadata != that.cache.functionScope ;
Code	return returnTypeGenericMetadata != that.cache.functionScope ;
Distance : 6

3
Tree	return invocation . getMock ( this , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

4
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock ( invocation ) ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock ( invocation ) ) ;
Distance : 12

5
Tree	return returnTypeGenericMetadata != return; ;
Code	return returnTypeGenericMetadata != return; ;
Distance : 6

6
Tree	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata ) ;
Distance : 5

7
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 9

8
Tree	return returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ;
Distance : 4

9
Tree	return getMock ( returnTypeGenericMetadata ) . getMock ( invocation ) ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock ( invocation ) ;
Distance : 6

10
Tree	return returnTypeGenericMetadata + getMock ( invocation , invocation , returnTypeGenericMetadata , invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( invocation , invocation , returnTypeGenericMetadata , invocation ) ;
Distance : 6

11
Tree	return invocation + getMock ( invocation , invocation , invocation , invocation ) ;
Code	return invocation + getMock ( invocation , invocation , invocation , invocation ) ;
Distance : 7

12
Tree	return getMock ( returnTypeGenericMetadata ) < invocation ;
Code	return getMock ( returnTypeGenericMetadata ) < invocation ;
Distance : 4

13
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 9

14
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , this . returnTypeGenericMetadata . getMock () ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , this . returnTypeGenericMetadata . getMock () ) ;
Distance : 11

15
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( Locale.US , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( Locale.US , invocation , invocation ) ;
Distance : 9

16
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , invocation , invocation ) ;
Distance : 9

17
Tree	return invocation + returnTypeGenericMetadata . getMock ( this ) ;
Code	return invocation + returnTypeGenericMetadata . getMock ( this ) ;
Distance : 7

18
Tree	return continue; ;
Code	return continue; ;
Distance : 6

19
Tree	return getMock ( returnTypeGenericMetadata , invocation , false ) ;
Code	return getMock ( returnTypeGenericMetadata , invocation , false ) ;
Distance : 3

20
Tree	return getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) ;
Distance : 2

21
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

22
Tree	return super(); ;
Code	return super(); ;
Distance : 6

23
Tree	return returnTypeGenericMetadata . getMock () ; Test
Code	return returnTypeGenericMetadata . getMock () ; Test
Distance : 7

24
Tree	return invocation . getMock ( this , invocation ) ;
Code	return invocation . getMock ( this , invocation ) ;
Distance : 4

25
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Class
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Class
Distance : 7

26
Tree	return returnTypeGenericMetadata ; Class
Code	return returnTypeGenericMetadata ; Class
Distance : 6

27
Tree	return getMock ( invocation , invocation , returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return getMock ( invocation , invocation , returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 4

28
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Test
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Test
Distance : 7

29
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , PropAccess.INCLUDE_STRAY_PROPS , false , invocation ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , PropAccess.INCLUDE_STRAY_PROPS , false , invocation ) ;
Distance : 9

30
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , invocation , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , invocation , invocation , invocation ) ;
Distance : 9

31
Tree	return returnTypeGenericMetadata . getMock ( this , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

32
Tree	return getMock ( invocation ) . getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( invocation ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

33
Tree	return invocation * getMock ( invocation ) ;
Code	return invocation * getMock ( invocation ) ;
Distance : 4

34
Tree	return invocation + invocation . getMock ( invocation ) ;
Code	return invocation + invocation . getMock ( invocation ) ;
Distance : 6

35
Tree	return returnTypeGenericMetadata * getMock ( invocation ) ;
Code	return returnTypeGenericMetadata * getMock ( invocation ) ;
Distance : 4

36
Tree	return getMock ( invocation ) . getMock ( invocation ) ;
Code	return getMock ( invocation ) . getMock ( invocation ) ;
Distance : 5

37
Tree	return getMock ( invocation ) . getMock () ;
Code	return getMock ( invocation ) . getMock () ;
Distance : 4

38
Tree	return invocation + getMock ( invocation ) ;
Code	return invocation + getMock ( invocation ) ;
Distance : 4

39
Tree	return NUMBER_CONSTANT / getTopObject ;
Code	return NUMBER_CONSTANT / getTopObject ;
Distance : 6

40
Tree	return returnTypeGenericMetadata + getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( invocation ) ;
Distance : 4

41
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( invocation , that.data ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( invocation , that.data ) ;
Distance : 7

42
Tree	return STRING_CONSTANT + getMock ( invocation ) ;
Code	return STRING_CONSTANT + getMock ( invocation ) ;
Distance : 4

43
Tree	return getMock () ; array
Code	return getMock () ; array
Distance : 6

44
Tree	return invocation . getMock () ;
Code	return invocation . getMock () ;
Distance : 5

45
Tree	return returnTypeGenericMetadata . getMock () ;
Code	return returnTypeGenericMetadata . getMock () ;
Distance : 6

46
Tree	return returnTypeGenericMetadata != createsScope ;
Code	return returnTypeGenericMetadata != createsScope ;
Distance : 6

47
Tree	return getMock () ;
Code	return getMock () ;
Distance : 5

48
Tree	return reflectionCompare && getMock ( invocation ) ;
Code	return reflectionCompare && getMock ( invocation ) ;
Distance : 4

49
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 7

50
Tree	return invocation ^ returnTypeGenericMetadata ;
Code	return invocation ^ returnTypeGenericMetadata ;
Distance : 4

51
Tree	return invocation != null ;
Code	return invocation != null ;
Distance : 5

52
Tree	return getMock ( invocation , invocation , false ) ;
Code	return getMock ( invocation , invocation , false ) ;
Distance : 3

53
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock ( invocation ) ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock ( invocation ) ) ;
Distance : 12

54
Tree	return returnTypeGenericMetadata ^ invocation ;
Code	return returnTypeGenericMetadata ^ invocation ;
Distance : 5

55
Tree	return invocation + invocation . getMock ( this ) ;
Code	return invocation + invocation . getMock ( this ) ;
Distance : 6

56
Tree	return this . returnTypeGenericMetadata . getMock () ; Test
Code	return this . returnTypeGenericMetadata . getMock () ; Test
Distance : 7

57
Tree	return getSlot ;
Code	return getSlot ;
Distance : 6

58
Tree	return ! getMock ( invocation ) ; Class
Code	return ! getMock ( invocation ) ; Class
Distance : 4

59
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , getMock ( invocation ) ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , getMock ( invocation ) ) ;
Distance : 10

60
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Distance : 8

61
Tree	return invocation . getMock ( invocation ) ;
Code	return invocation . getMock ( invocation ) ;
Distance : 4

62
Tree	return getMock ( invocation , invocation , invocation , invocation ) ;
Code	return getMock ( invocation , invocation , invocation , invocation ) ;
Distance : 5

63
Tree	return returnTypeGenericMetadata + bindComponents.thisValue . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + bindComponents.thisValue . getMock ( invocation ) ;
Distance : 6

64
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Distance : 6

65
Tree	return ! getMock ( invocation ) ; Test
Code	return ! getMock ( invocation ) ; Test
Distance : 4

66
Tree	return returnTypeGenericMetadata + getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata + getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Distance : 6

67
Tree	return returnTypeGenericMetadata + getMock ( Locale.US , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( Locale.US , this . invocation ) ;
Distance : 6

68
Tree	return that.data ;
Code	return that.data ;
Distance : 6

69
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 7

70
Tree	return this == invocation ;
Code	return this == invocation ;
Distance : 5

71
Tree	return getMock ( invocation ) < invocation ;
Code	return getMock ( invocation ) < invocation ;
Distance : 3

72
Tree	return returnTypeGenericMetadata ^ returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata ^ returnTypeGenericMetadata ;
Distance : 5

73
Tree	return STRING_CONSTANT + getMock ( returnTypeGenericMetadata ) ;
Code	return STRING_CONSTANT + getMock ( returnTypeGenericMetadata ) ;
Distance : 4

74
Tree	return getSlot && getMock ( invocation ) ;
Code	return getSlot && getMock ( invocation ) ;
Distance : 4

75
Tree	return returnTypeGenericMetadata + invocation . getMock ( this ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( this ) ;
Distance : 6

76
Tree	return getMock ( invocation ) . getMock () ; Test
Code	return getMock ( invocation ) . getMock () ; Test
Distance : 5

77
Tree	return true ;
Code	return true ;
Distance : 6

78
Tree	return this . returnTypeGenericMetadata ; Test
Code	return this . returnTypeGenericMetadata ; Test
Distance : 6

79
Tree	return this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

80
Tree	return ( invocation ) getMock ( invocation ) ;
Code	return ( invocation ) getMock ( invocation ) ;
Distance : 5

81
Tree	return returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 8

82
Tree	return returnTypeGenericMetadata != super(); ;
Code	return returnTypeGenericMetadata != super(); ;
Distance : 6

83
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock ( invocation ) ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock ( invocation ) ) ;
Distance : 12

84
Tree	return getMock ( invocation ) == bindComponents.thisValue ;
Code	return getMock ( invocation ) == bindComponents.thisValue ;
Distance : 3

85
Tree	return invocation . getMock ( returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

86
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 9

87
Tree	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 1

88
Tree	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return this == returnTypeGenericMetadata ; Test
Code	return this == returnTypeGenericMetadata ; Test
Distance : 6

90
Tree	return invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 8

91
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , this . returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , this . returnTypeGenericMetadata . getMock () ) ;
Distance : 11

92
Tree	return returnTypeGenericMetadata != null invocation ? ;
Code	return returnTypeGenericMetadata != null invocation ? ;
Distance : 6

93
Tree	return this . returnTypeGenericMetadata ; Class
Code	return this . returnTypeGenericMetadata ; Class
Distance : 6

94
Tree	return invocation ;
Code	return invocation ;
Distance : 5

95
Tree	return false ;
Code	return false ;
Distance : 6

96
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , PropertyCollapseLevel.ALL , false , invocation ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , PropertyCollapseLevel.ALL , false , invocation ) ;
Distance : 9

97
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , getMock ( invocation ) ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , getMock ( invocation ) ) ;
Distance : 10

98
Tree	return returnTypeGenericMetadata + getMock ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Distance : 6

99
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

100
Tree	return getMock ( invocation ) < returnTypeGenericMetadata ;
Code	return getMock ( invocation ) < returnTypeGenericMetadata ;
Distance : 3

101
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

102
Tree	return returnTypeGenericMetadata + getMock ( invocation , invocation , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( invocation , invocation , invocation , invocation ) ;
Distance : 7

103
Tree	return reflectionCompare ;
Code	return reflectionCompare ;
Distance : 6

104
Tree	return return; ;
Code	return return; ;
Distance : 6

105
Tree	return getMock ( invocation ) == BooleanLiteralSet.EMPTY ;
Code	return getMock ( invocation ) == BooleanLiteralSet.EMPTY ;
Distance : 3

106
Tree	return that.data && getMock ( invocation ) ;
Code	return that.data && getMock ( invocation ) ;
Distance : 4

107
Tree	return getMock ( returnTypeGenericMetadata , invocation ) ;
Code	return getMock ( returnTypeGenericMetadata , invocation ) ;
Distance : 2

108
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Distance : 7

109
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( invocation , that.data ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( invocation , that.data ) ;
Distance : 7

110
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation ) ;
Distance : 6

111
Tree	return getMock ( invocation , invocation ) ;
Code	return getMock ( invocation , invocation ) ;
Distance : 1

112
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation ) ;
Distance : 6

113
Tree	return NUMBER_CONSTANT / that.data ;
Code	return NUMBER_CONSTANT / that.data ;
Distance : 6

114
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Distance : 4

115
Tree	return invocation + getMock ( this , invocation ) ;
Code	return invocation + getMock ( this , invocation ) ;
Distance : 4

116
Tree	return getMock ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return getMock ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 4

117
Tree	return returnTypeGenericMetadata + getSlot . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + getSlot . getMock ( invocation ) ;
Distance : 6

118
Tree	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 5

119
Tree	return null ;
Code	return null ;
Distance : 6

120
Tree	return this . invocation . getMock () ;
Code	return this . invocation . getMock () ;
Distance : 5

121
Tree	return ! getMock ( invocation ) ;
Code	return ! getMock ( invocation ) ;
Distance : 3

122
Tree	return this == returnTypeGenericMetadata ; Class
Code	return this == returnTypeGenericMetadata ; Class
Distance : 6

123
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Test
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; Test
Distance : 7

124
Tree	return getMock ( invocation , invocation , returnTypeGenericMetadata , invocation ) ;
Code	return getMock ( invocation , invocation , returnTypeGenericMetadata , invocation ) ;
Distance : 4

125
Tree	return getMock ( invocation ) == rhs.b ;
Code	return getMock ( invocation ) == rhs.b ;
Distance : 3

126
Tree	return this . returnTypeGenericMetadata . getMock () ;
Code	return this . returnTypeGenericMetadata . getMock () ;
Distance : 6

127
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NameBasedDefinitionProvider , false , invocation ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NameBasedDefinitionProvider , false , invocation ) ;
Distance : 9

128
Tree	return returnTypeGenericMetadata * getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata * getMock ( returnTypeGenericMetadata ) ;
Distance : 4

129
Tree	return returnTypeGenericMetadata + getMock ( TernaryValue.UNKNOWN , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( TernaryValue.UNKNOWN , this . invocation ) ;
Distance : 6

130
Tree	return getMock () ; notifyListeners
Code	return getMock () ; notifyListeners
Distance : 6

131
Tree	return invocation ^ invocation ;
Code	return invocation ^ invocation ;
Distance : 5

132
Tree	return this . returnTypeGenericMetadata . getMock () ; Class
Code	return this . returnTypeGenericMetadata . getMock () ; Class
Distance : 7

133
Tree	return invocation + invocation . getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Code	return invocation + invocation . getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Distance : 8

134
Tree	return returnTypeGenericMetadata + getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Distance : 6

135
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock ( invocation ) ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock ( invocation ) ) ;
Distance : 11

136
Tree	return getMock ( invocation , invocation , true ) ;
Code	return getMock ( invocation , invocation , true ) ;
Distance : 3

137
Tree	return returnTypeGenericMetadata + getMock ( this , invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( this , invocation ) ;
Distance : 4

138
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , this . returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , this . returnTypeGenericMetadata . getMock () ) ;
Distance : 11

139
Tree	return getMock () ; class
Code	return getMock () ; class
Distance : 6

140
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 7

141
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Test
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Test
Distance : 7

142
Tree	return returnTypeGenericMetadata != null ;
Code	return returnTypeGenericMetadata != null ;
Distance : 6

143
Tree	return invocation + invocation . getMock ( invocation , invocation , invocation , invocation ) ;
Code	return invocation + invocation . getMock ( invocation , invocation , invocation , invocation ) ;
Distance : 9

144
Tree	return invocation < < NUMBER_CONSTANT ;
Code	return invocation < < NUMBER_CONSTANT ;
Distance : 5

145
Tree	return bindComponents.thisValue && getMock ( invocation ) ;
Code	return bindComponents.thisValue && getMock ( invocation ) ;
Distance : 4

146
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

147
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 6

148
Tree	return getMock ( invocation ) ; Test
Code	return getMock ( invocation ) ; Test
Distance : 3

149
Tree	return getMock ( invocation ) == Double.NaN ;
Code	return getMock ( invocation ) == Double.NaN ;
Distance : 3

150
Tree	return returnTypeGenericMetadata != null invocation instanceof ;
Code	return returnTypeGenericMetadata != null invocation instanceof ;
Distance : 6

151
Tree	return invocation * getMock ( returnTypeGenericMetadata ) ;
Code	return invocation * getMock ( returnTypeGenericMetadata ) ;
Distance : 4

152
Tree	return returnTypeGenericMetadata ; Test
Code	return returnTypeGenericMetadata ; Test
Distance : 6

153
Tree	return ( returnTypeGenericMetadata ) getMock ( invocation ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( invocation ) ;
Distance : 5

154
Tree	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) ;
Distance : 5

155
Tree	return invocation + getMock ( returnTypeGenericMetadata ) ;
Code	return invocation + getMock ( returnTypeGenericMetadata ) ;
Distance : 4

156
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( this ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( this ) ;
Distance : 7

157
Tree	return getMock ( returnTypeGenericMetadata ) . getMock () ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock () ;
Distance : 5

158
Tree	return getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Code	return getMock ( invocation , invocation , invocation , returnTypeGenericMetadata ) ;
Distance : 4

159
Tree	return ( invocation ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( invocation ) getMock ( returnTypeGenericMetadata ) ;
Distance : 4

160
Tree	return returnTypeGenericMetadata != null invocation : ;
Code	return returnTypeGenericMetadata != null invocation : ;
Distance : 6

161
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Class
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; Class
Distance : 7

162
Tree	return this . returnTypeGenericMetadata ;
Code	return this . returnTypeGenericMetadata ;
Distance : 5

163
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , getMock ( invocation ) ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , getMock ( invocation ) ) ;
Distance : 10

164
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Distance : 6

165
Tree	return NUMBER_CONSTANT / bindComponents.thisValue ;
Code	return NUMBER_CONSTANT / bindComponents.thisValue ;
Distance : 6

166
Tree	return NUMBER_CONSTANT / getSlot ;
Code	return NUMBER_CONSTANT / getSlot ;
Distance : 6

167
Tree	return getMock ( invocation ) ; Class
Code	return getMock ( invocation ) ; Class
Distance : 3

168
Tree	return STRING_CONSTANT + getMock ( invocation ) ; Class
Code	return STRING_CONSTANT + getMock ( invocation ) ; Class
Distance : 5

169
Tree	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

170
Tree	return false ; Test
Code	return false ; Test
Distance : 7

171
Tree	return returnTypeGenericMetadata . getMock () ; Class
Code	return returnTypeGenericMetadata . getMock () ; Class
Distance : 7

172
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

173
Tree	return returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 7

174
Tree	return returnTypeGenericMetadata != getSlot ;
Code	return returnTypeGenericMetadata != getSlot ;
Distance : 6

175
Tree	return false ; Class
Code	return false ; Class
Distance : 7

176
Tree	return getMock ( invocation ) ;
Code	return getMock ( invocation ) ;
Distance : 2

177
Tree	return getMock ( invocation , returnTypeGenericMetadata , false ) ;
Code	return getMock ( invocation , returnTypeGenericMetadata , false ) ;
Distance : 2

178
Tree	return invocation + NUMBER_CONSTANT ;
Code	return invocation + NUMBER_CONSTANT ;
Distance : 5

179
Tree	return this . invocation ;
Code	return this . invocation ;
Distance : 5

180
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 9

181
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

182
Tree	return returnTypeGenericMetadata + that.data . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + that.data . getMock ( invocation ) ;
Distance : 6

183
Tree	return returnTypeGenericMetadata + getMock ( this , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata + getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

184
Tree	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

185
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , that.data , false , invocation ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , that.data , false , invocation ) ;
Distance : 9

186
Tree	return getMock ( invocation ) . getMock () ; Class
Code	return getMock ( invocation ) . getMock () ; Class
Distance : 5

187
Tree	return returnTypeGenericMetadata != bindComponents.thisValue ;
Code	return returnTypeGenericMetadata != bindComponents.thisValue ;
Distance : 6

188
Tree	return returnTypeGenericMetadata + MockHandlerInterface . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata + MockHandlerInterface . getMock ( invocation ) ;
Distance : 6

189
Tree	return this == returnTypeGenericMetadata ;
Code	return this == returnTypeGenericMetadata ;
Distance : 5

190
Tree	return returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata ;
Distance : 5

191
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

192
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ;
Distance : 6

193
Tree	return bindComponents.thisValue ;
Code	return bindComponents.thisValue ;
Distance : 6

194
Tree	return invocation + getMock ( this , returnTypeGenericMetadata ) ;
Code	return invocation + getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

195
Tree	return getMock ( invocation , returnTypeGenericMetadata ) ;
Code	return getMock ( invocation , returnTypeGenericMetadata ) ;
Distance : 0

196
Tree	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Class
Code	return returnTypeGenericMetadata < < NUMBER_CONSTANT ; Class
Distance : 7

197
Tree	return returnTypeGenericMetadata != null invocation extends ;
Code	return returnTypeGenericMetadata != null invocation extends ;
Distance : 6

198
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , this . invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , this . invocation . getMock () ) ;
Distance : 12

199
Tree	return STRING_CONSTANT + getMock ( invocation ) ; Test
Code	return STRING_CONSTANT + getMock ( invocation ) ; Test
Distance : 5

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

1
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () && super ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () && super ;
Distance : 10

2
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

3
Tree	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata ) ) ;
Distance : 5

4
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Distance : 9

5
Tree	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata ) ) ;
Distance : 5

6
Tree	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata ) ) ;
Distance : 5

7
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( ComposableFunction.ASIN ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( ComposableFunction.ASIN ) ;
Distance : 8

8
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 5

9
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Distance : 7

10
Tree	return mockSettings * mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings * mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

11
Tree	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

12
Tree	return mockSettings == null ? null : mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings == null ? null : mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

13
Tree	return this . returnTypeGenericMetadata ;
Code	return this . returnTypeGenericMetadata ;
Distance : 10

14
Tree	return mockSettings . defaultAnswer ( mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) ;
Distance : 7

15
Tree	return LanguageMode.ECMASCRIPT_NEXT . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return LanguageMode.ECMASCRIPT_NEXT . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

16
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

17
Tree	return defaultAnswer ( ! defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( ! defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

18
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 6

19
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 6

20
Tree	return mockSettings * mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings * mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

21
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Distance : 11

22
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

23
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

24
Tree	return defaultAnswer ( super(); , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( super(); , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

25
Tree	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

26
Tree	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Distance : 9

27
Tree	return mockSettings . defaultAnswer ( mockSettings , NUMBER_CONSTANT ) ;
Code	return mockSettings . defaultAnswer ( mockSettings , NUMBER_CONSTANT ) ;
Distance : 7

28
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == IncrementalCheckMode.GENERATE_IJS ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

29
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) ;
Distance : 8

30
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

31
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

32
Tree	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

33
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Distance : 8

34
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Distance : 8

35
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

36
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

37
Tree	return this . mockSettings ;
Code	return this . mockSettings ;
Distance : 11

38
Tree	return ! defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ! defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

39
Tree	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata ) ) ;
Distance : 5

40
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Distance : 7

41
Tree	return ImmutableMultiset.Builder . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return ImmutableMultiset.Builder . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 8

42
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

43
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

44
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Distance : 9

45
Tree	return defaultAnswer ( mockSettings ) ;
Code	return defaultAnswer ( mockSettings ) ;
Distance : 9

46
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

47
Tree	return mockSettings . defaultAnswer ( ! defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( ! defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

48
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

49
Tree	return OngoingVerifyingMode . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return OngoingVerifyingMode . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

50
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

51
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Distance : 7

52
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 7

53
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

54
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer () && super ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer () && super ;
Distance : 10

55
Tree	return ( mockSettings ) serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

56
Tree	return returnTypeGenericMetadata . defaultAnswer () ;
Code	return returnTypeGenericMetadata . defaultAnswer () ;
Distance : 10

57
Tree	return mockSettings . defaultAnswer ( ! serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( ! serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

58
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () && CHAR_CONS ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () && CHAR_CONS ;
Distance : 10

59
Tree	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Distance : 9

60
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

61
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

62
Tree	return mockSettings . defaultAnswer () && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 5

63
Tree	return mockSettings . defaultAnswer () && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 5

64
Tree	return defaultAnswer ( null , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

65
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( mockSettings ) ;
Distance : 8

66
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , returnTypeGenericMetadata , false ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , returnTypeGenericMetadata , false ) ;
Distance : 10

67
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

68
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

69
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

70
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 8

71
Tree	return defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 8

72
Tree	return defaultAnswer ( returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

73
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT ) ;
Distance : 7

74
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( CompilerOptions.LanguageMode.ECMASCRIPT_2017 ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( CompilerOptions.LanguageMode.ECMASCRIPT_2017 ) ;
Distance : 8

75
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

76
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

77
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , NUMBER_CONSTANT ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , NUMBER_CONSTANT ) ;
Distance : 7

78
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( NUMBER_CONSTANT ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( NUMBER_CONSTANT ) ;
Distance : 8

79
Tree	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

80
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

81
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

82
Tree	return mockSettings . defaultAnswer () && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && serializable ( returnTypeGenericMetadata ) ;
Distance : 6

83
Tree	return mockSettings . returnsDeepStubsAnswerUsing () ;
Code	return mockSettings . returnsDeepStubsAnswerUsing () ;
Distance : 9

84
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( TokenType.STRING ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( TokenType.STRING ) ;
Distance : 8

85
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 4

86
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

87
Tree	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata ) ;
Distance : 6

88
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

89
Tree	return ImmutableMultiset.Builder . defaultAnswer ( returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ImmutableMultiset.Builder . defaultAnswer ( returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

90
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

91
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

92
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

93
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

94
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == StringUtils.EMPTY ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == StringUtils.EMPTY ;
Distance : 5

95
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Distance : 5

96
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

97
Tree	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

98
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

99
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

100
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

101
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Distance : 5

102
Tree	return mockSettings == null ? null : mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings == null ? null : mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

103
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( NUMBER_CONSTANT ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( NUMBER_CONSTANT ) ;
Distance : 8

104
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

105
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata != null && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata != null && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

106
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == PropertyCollapseLevel.NONE ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == PropertyCollapseLevel.NONE ;
Distance : 5

107
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 7

108
Tree	return ImmutableMultiset.Builder . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return ImmutableMultiset.Builder . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

109
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer ( NUMBER_CONSTANT ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer ( NUMBER_CONSTANT ) ;
Distance : 8

110
Tree	return LanguageMode.ECMASCRIPT_NEXT . defaultAnswer ( returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return LanguageMode.ECMASCRIPT_NEXT . defaultAnswer ( returnTypeGenericMetadata ) && mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

111
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

112
Tree	return mockSettings . defaultAnswer ( ! returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( ! returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

113
Tree	return mockSettings . serializable ( returnTypeGenericMetadata , NUMBER_CONSTANT ) ;
Code	return mockSettings . serializable ( returnTypeGenericMetadata , NUMBER_CONSTANT ) ;
Distance : 7

114
Tree	return mockSettings . defaultAnswer () && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 2

115
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

116
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 5

117
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 5

118
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

119
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 6

120
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 7

121
Tree	return defaultAnswer ( null , serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , serializable ( returnTypeGenericMetadata ) ) ;
Distance : 8

122
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 5

123
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == rhs.b ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) == rhs.b ;
Distance : 5

124
Tree	return mockSettings . defaultAnswer () && returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

125
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 7

126
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

127
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

128
Tree	return defaultAnswer ( mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

129
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

130
Tree	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

131
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Distance : 8

132
Tree	return ! mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

133
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , mockSettings ) ;
Distance : 7

134
Tree	return ( mockSettings ) mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

135
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Distance : 7

136
Tree	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) ;
Distance : 9

137
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 8

138
Tree	return ! returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

139
Tree	return serializable ( returnTypeGenericMetadata ) ;
Code	return serializable ( returnTypeGenericMetadata ) ;
Distance : 8

140
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Distance : 11

141
Tree	return ! mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

142
Tree	return defaultAnswer ( ! returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( ! returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

143
Tree	return ! defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

144
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Distance : 10

145
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

146
Tree	return mockSettings . defaultAnswer () && defaultAnswer ( mockSettings ) ;
Code	return mockSettings . defaultAnswer () && defaultAnswer ( mockSettings ) ;
Distance : 6

147
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 5

148
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , false ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , false ) ;
Distance : 9

149
Tree	return mockSettings . defaultAnswer () && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 3

150
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 6

151
Tree	return mockSettings . defaultAnswer () && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

152
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing () ;
Distance : 10

153
Tree	return LanguageMode.ECMASCRIPT_NEXT . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return LanguageMode.ECMASCRIPT_NEXT . defaultAnswer ( returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 8

154
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Distance : 5

155
Tree	return ( mockSettings ) defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

156
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

157
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

158
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata != null && serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata != null && serializable ( returnTypeGenericMetadata ) ) ;
Distance : 9

159
Tree	return mockSettings . defaultAnswer () ;
Code	return mockSettings . defaultAnswer () ;
Distance : 9

160
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 8

161
Tree	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

162
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

163
Tree	return mockSettings * mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings * mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

164
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

165
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata , false ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata , false ) ;
Distance : 9

166
Tree	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata != null && serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( mockSettings , returnTypeGenericMetadata != null && serializable ( returnTypeGenericMetadata ) ) ;
Distance : 9

167
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

168
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

169
Tree	return mockSettings == null ? null : mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings == null ? null : mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 7

170
Tree	return ( mockSettings ) returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 7

171
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 9

172
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

173
Tree	return defaultAnswer ( returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) ) ;
Distance : 7

174
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer ( NUMBER_CONSTANT ) ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer ( NUMBER_CONSTANT ) ;
Distance : 8

175
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata , mockSettings , mockSettings ) ;
Distance : 11

176
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 8

177
Tree	return ! serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ! serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

178
Tree	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return ! mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

179
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

180
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata , returnTypeGenericMetadata , mockSettings ) ;
Distance : 11

181
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

182
Tree	return mockSettings == null ? null : mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings == null ? null : mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 7

183
Tree	return defaultAnswer ( ! serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( ! serializable ( returnTypeGenericMetadata ) ) ;
Distance : 7

184
Tree	return defaultAnswer ( returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

185
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

186
Tree	return mockSettings . serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( returnTypeGenericMetadata ) ;
Distance : 6

187
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () && return ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () && return ;
Distance : 10

188
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata != null && defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata != null && defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 9

189
Tree	return this . mockSettings ; Class
Code	return this . mockSettings ; Class
Distance : 12

190
Tree	return mockSettings . serializable () ;
Code	return mockSettings . serializable () ;
Distance : 8

191
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

192
Tree	return mockSettings . defaultAnswer ( mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

193
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

194
Tree	return defaultAnswer ( returnTypeGenericMetadata , mockSettings , false ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , mockSettings , false ) ;
Distance : 10

195
Tree	return mockSettings * mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings * mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 4

196
Tree	return ( mockSettings ) returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

197
Tree	return defaultAnswer ( ! returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return defaultAnswer ( ! returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 7

198
Tree	return mockSettings . defaultAnswer ( ! returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( ! returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

199
Tree	return this . mockSettings ; Test
Code	return this . mockSettings ; Test
Distance : 12

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new orientation () ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new orientation () ) ; } return withOuterClass ( cls ) ; }
Distance : 6

1
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new orientation ( cls ) ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new orientation ( cls ) ) ; } return withOuterClass ( cls ) ; }
Distance : 7

2
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( null ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( null ) ; } return withOuterClass ( cls ) ; }
Distance : 6

3
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Distance : 4

4
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Range () ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Range () ) ; } return withOuterClass ( cls ) ; }
Distance : 6

5
Tree	{ if ( cls == null ) { return noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Distance : 6

6
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

7
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 3

8
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance ) ; }
Distance : 1

9
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

10
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , true ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , true ) ; }
Distance : 2

11
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } indexOfAny }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } indexOfAny }
Distance : 10

12
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

13
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

14
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

15
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

16
Tree	{ if ( cls == null ) { noArgConstructor ( cls ) ; return true ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { noArgConstructor ( cls ) ; return true ; } return withOuterClass ( cls ) ; }
Distance : 8

17
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

18
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , false ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , false ) ; }
Distance : 3

19
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

20
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 9

21
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Range ( cls ) ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Range ( cls ) ) ; } return withOuterClass ( cls ) ; }
Distance : 7

22
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( cls ) ; }
Distance : 6

23
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Distance : 6

24
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) () ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) () ) ; }
Distance : 6

25
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

26
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

27
Tree	{ if ( cls == null ) { return this . cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return this . cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

28
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US ) ; } return withOuterClass ( cls ) ; }
Distance : 6

29
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 6

30
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls ) ; }
Distance : 3

31
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

32
Tree	{ if ( cls == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 10

33
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new Random ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new Random ( cls ) ) ; }
Distance : 6

34
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

35
Tree	{ if ( outerClassInstance == null ) { return ( ( cls ) cls ) . withOuterClass () ; } return cls ; }
Code	{ if ( outerClassInstance == null ) { return ( ( cls ) cls ) . withOuterClass () ; } return cls ; }
Distance : 10

36
Tree	{ if ( outerClassInstance == null ) { return cls () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls () ; } return withOuterClass ( cls ) ; }
Distance : 6

37
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass () ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass () ) ; }
Distance : 8

38
Tree	{ if ( outerClassInstance == null ) { return null ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return null ; } return withOuterClass ( cls ) ; }
Distance : 7

39
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

40
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

41
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } inlineEmptyMethod }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } inlineEmptyMethod }
Distance : 9

42
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . == ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . == ( outerClassInstance ) ) ; }
Distance : 5

43
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

44
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Distance : 7

45
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

46
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

47
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

48
Tree	{ if ( outerClassInstance == super(); ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 10

49
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 7

50
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Distance : 5

51
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , Ref.Type.ALIASING_GET ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , Ref.Type.ALIASING_GET ) ; } return withOuterClass ( cls ) ; }
Distance : 7

52
Tree	{ if ( outerClassInstance == null ) { return super(); ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return super(); ; } return withOuterClass ( cls ) ; }
Distance : 7

53
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , Format.PRETTY ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , Format.PRETTY ) ; } return withOuterClass ( cls ) ; }
Distance : 7

54
Tree	{ if ( outerClassInstance == null ) { return new ReturnsDeepStubsSerializationFallback () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return new ReturnsDeepStubsSerializationFallback () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

55
Tree	{ if ( outerClassInstance == super(); ) { return ( ( cls ) cls ) . withOuterClass () ; } return cls ; }
Code	{ if ( outerClassInstance == super(); ) { return ( ( cls ) cls ) . withOuterClass () ; } return cls ; }
Distance : 11

56
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , StringUtils.EMPTY ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , StringUtils.EMPTY ) ; } return withOuterClass ( cls ) ; }
Distance : 5

57
Tree	{ if ( outerClassInstance == null ) { return this . cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

58
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

59
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } validateObjectPattern }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } validateObjectPattern }
Distance : 9

60
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

61
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Distance : 8

62
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass ( cls ) ) ; }
Distance : 10

63
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

64
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

65
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Distance : 6

66
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( Token.PARAM_LIST , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( Token.PARAM_LIST , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

67
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Distance : 7

68
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY ) ; } return withOuterClass ( cls ) ; }
Distance : 6

69
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , null ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , null ) ; }
Distance : 2

70
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

71
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Distance : 7

72
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( super(); ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( super(); ) ; } return withOuterClass ( cls ) ; }
Distance : 6

73
Tree	{ if ( cls == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

74
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

75
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 10

76
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , configureWith ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , configureWith ) ; } return withOuterClass ( cls ) ; }
Distance : 5

77
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } validateObjectPattern }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } validateObjectPattern }
Distance : 7

78
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

79
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

80
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

81
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

82
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

83
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 3

84
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new TitleChangeEvent ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new TitleChangeEvent ( cls ) ) ; }
Distance : 6

85
Tree	{ if ( cls == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

86
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

87
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

88
Tree	{ if ( cls == null ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Distance : 8

89
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , true ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , true ) ; } return withOuterClass ( cls ) ; }
Distance : 5

90
Tree	{ if ( outerClassInstance == null ) { return this . outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

91
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

92
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

93
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } validateObjectPattern }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } validateObjectPattern }
Distance : 10

94
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

95
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( () ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( () ) ; }
Distance : 5

96
Tree	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

97
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

98
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Array2DRowRealMatrix () ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Array2DRowRealMatrix () ) ; } return withOuterClass ( cls ) ; }
Distance : 6

99
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . == ( cls ) , withOuterClass ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . == ( cls ) , withOuterClass ( outerClassInstance ) ) ; }
Distance : 9

100
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

101
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) ( cls ) ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) ( cls ) ) ; }
Distance : 8

102
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( cls ) ; }
Distance : 7

103
Tree	{ if ( outerClassInstance == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

104
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE ) ; } return withOuterClass ( cls ) ; }
Distance : 6

105
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , return; ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , return; ) ; }
Distance : 2

106
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

107
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } else }
Distance : 10

108
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

109
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( ( ( cls ) ) ; } else }
Distance : 9

110
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 7

111
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 4

112
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } inlineEmptyMethod }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls . ) ( cls ) ) ; } inlineEmptyMethod }
Distance : 10

113
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

114
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

115
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( null ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( null ) ; } return withOuterClass ( cls ) ; }
Distance : 7

116
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

117
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , true ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , true ) ; } return withOuterClass ( cls ) ; }
Distance : 7

118
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) . withOuterClass () ; } return withOuterClass ( cls ) ; }
Distance : 7

119
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) , withOuterClass ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) , withOuterClass ( cls ) ) ; }
Distance : 10

120
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

121
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 6

122
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new BasicStroke ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new BasicStroke ( cls ) ) ; }
Distance : 6

123
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

124
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass ( cls ) ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass ( cls ) ) ; }
Distance : 11

125
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

126
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ( () ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ( () ) ; }
Distance : 4

127
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( this ) ; } return withOuterClass ( cls ) ; }
Distance : 6

128
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , super(); ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , super(); ) ; }
Distance : 2

129
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Distance : 2

130
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( outerClassInstance ) ) ; }
Distance : 6

131
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) , withOuterClass () ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) , withOuterClass () ) ; }
Distance : 8

132
Tree	{ if ( cls == null ) { return noArgConstructor () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

133
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , RemovalType.REMOVE_RHS ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , RemovalType.REMOVE_RHS ) ; }
Distance : 4

134
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

135
Tree	{ if ( outerClassInstance == null ) { return continue; ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return continue; ; } return withOuterClass ( cls ) ; }
Distance : 7

136
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 7

137
Tree	{ if ( outerClassInstance == null ) { return new AstValidator () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return new AstValidator () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

138
Tree	{ if ( outerClassInstance == null ) { return new GeneralPath () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return new GeneralPath () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

139
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return false ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return false ; } return withOuterClass ( cls ) ; }
Distance : 7

140
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , Ref.Type.ALIASING_GET ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , Ref.Type.ALIASING_GET ) ; }
Distance : 4

141
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , StringUtils.EMPTY ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , StringUtils.EMPTY ) ; }
Distance : 2

142
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , configureWith ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , configureWith ) ; }
Distance : 2

143
Tree	{ if ( outerClassInstance == null ) { return ( ( outerClassInstance ) cls ) . withOuterClass () ; } return cls ; }
Code	{ if ( outerClassInstance == null ) { return ( ( outerClassInstance ) cls ) . withOuterClass () ; } return cls ; }
Distance : 11

144
Tree	{ if ( outerClassInstance == null ) { return return; ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return return; ; } return withOuterClass ( cls ) ; }
Distance : 7

145
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

146
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , iValues.length ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , iValues.length ) ; } return withOuterClass ( cls ) ; }
Distance : 5

147
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; }
Distance : 3

148
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , TokenType.STRING ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , TokenType.STRING ) ; } return withOuterClass ( cls ) ; }
Distance : 7

149
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 5

150
Tree	{ if ( cls == null ) { return ( ( cls ) cls ) . withOuterClass () ; } return cls ; }
Code	{ if ( cls == null ) { return ( ( cls ) cls ) . withOuterClass () ; } return cls ; }
Distance : 11

151
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( Any.ANY , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( Any.ANY , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

152
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new cls () ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new cls () ) ; } return withOuterClass ( cls ) ; }
Distance : 5

153
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , false ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , false ) ; }
Distance : 2

154
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return true ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return true ; } return withOuterClass ( cls ) ; }
Distance : 7

155
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } inlineEmptyMethod }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } inlineEmptyMethod }
Distance : 7

156
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( LocalizedFormats.EVALUATION_FAILED , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

157
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , Any.ANY ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , Any.ANY ) ; } return withOuterClass ( cls ) ; }
Distance : 5

158
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , null ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , null ) ; }
Distance : 3

159
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 7

160
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Distance : 7

161
Tree	{ if ( cls == null ) { noArgConstructor ( cls ) ; return false ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { noArgConstructor ( cls ) ; return false ; } return withOuterClass ( cls ) ; }
Distance : 8

162
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new cls ( cls ) ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new cls ( cls ) ) ; } return withOuterClass ( cls ) ; }
Distance : 7

163
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } else }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } else }
Distance : 7

164
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( null ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( null ) ; } return withOuterClass ( cls ) ; }
Distance : 6

165
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls ) ; }
Distance : 2

166
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 5

167
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

168
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

169
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } indexOfAny }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( withOuterClass ( cls ) ) ; } indexOfAny }
Distance : 9

170
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

171
Tree	{ if ( cls == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

172
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Distance : 7

173
Tree	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } indexOfAny }
Code	{ if ( outerClassInstance == null ) { noArgConstructor ( cls ) ; return withOuterClass ( cls ) ; } indexOfAny }
Distance : 7

174
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , Any.ANY ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , Any.ANY ) ; }
Distance : 2

175
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance () ; } return withOuterClass ( cls ) ; }
Distance : 7

176
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , Format.COMPACT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls , NUMBER_CONSTANT , Format.COMPACT ) ; } return withOuterClass ( cls ) ; }
Distance : 7

177
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Distance : 6

178
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , iValues.length ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , iValues.length ) ; }
Distance : 2

179
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , Format.COMPACT ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , Format.COMPACT ) ; }
Distance : 4

180
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , false ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , false ) ; }
Distance : 3

181
Tree	{ if ( outerClassInstance == null ) { return new JAVA_1_8 () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return new JAVA_1_8 () . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

182
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Array2DRowRealMatrix ( cls ) ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( new Array2DRowRealMatrix ( cls ) ) ; } return withOuterClass ( cls ) ; }
Distance : 7

183
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

184
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

185
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

186
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

187
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

188
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls ) ; }
Distance : 3

189
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( STRING_CONSTANT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

190
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , outerClassInstance ) ; }
Distance : 3

191
Tree	{ if ( outerClassInstance == null ) { return this . cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

192
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , false ) ; } return withOuterClass ( cls ) ; }
Distance : 8

193
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

194
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 8

195
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( () ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( () ) ; }
Distance : 6

196
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass () ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass () ) ; }
Distance : 9

197
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass () ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls . ) ( cls ) , withOuterClass () ) ; }
Distance : 9

198
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 4

199
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls , CauchyDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 5

1
Tree	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

2
Tree	Object mocks = injected . filterCandidate ( false ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( false ) . thenInject () ;
Distance : 9

3
Tree	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 6

4
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 2

5
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

6
Tree	Object injected = this . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = this . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

7
Tree	Object injected = filterCandidate ( mocks , null ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , null ) . thenInject () ;
Distance : 7

8
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

9
Tree	Object field = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object field = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 9

10
Tree	Object mocks = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

11
Tree	Object injected = this . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = this . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

12
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

13
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Distance : 5

14
Tree	Object mocks = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 4

15
Tree	Object mocks = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

16
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

17
Tree	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

18
Tree	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

19
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 6

20
Tree	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 8

21
Tree	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 7

22
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Distance : 4

23
Tree	Object injected = mockCandidateFilter . filterCandidate ( this , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( this , field , instance , instance ) . thenInject () ;
Distance : 2

24
Tree	Object mocks = injected . filterCandidate ( this , field ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( this , field ) . thenInject () ;
Distance : 7

25
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , instance ) ;
Distance : 10

26
Tree	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

27
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Distance : 4

28
Tree	Object injected = injected . filterCandidate ( mocks , p2.vector ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , p2.vector ) . thenInject () ;
Distance : 6

29
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

30
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , Color.RED ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , Color.RED ) . thenInject () ;
Distance : 7

31
Tree	Object injected = injected . filterCandidate ( mocks , false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , false ) . thenInject () ;
Distance : 6

32
Tree	Object injected = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 6

33
Tree	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

34
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . < ? > thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . < ? > thenInject () ;
Distance : 6

35
Tree	Object injected = filterCandidate ( mocks , field , false ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , false ) . thenInject () ;
Distance : 5

36
Tree	Object injected = injected . filterCandidate ( finderStub.actualToReturn , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( finderStub.actualToReturn , field , instance ) . thenInject () ;
Distance : 4

37
Tree	Object injected = injected . filterCandidate ( this , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this , field , instance , instance ) . thenInject () ;
Distance : 3

38
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

39
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

40
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 6

41
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

42
Tree	Object injected = filterCandidate ( STRING_CONSTANT , mockCandidateFilter ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , mockCandidateFilter ) . thenInject () ;
Distance : 8

43
Tree	Object injected = mockCandidateFilter . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate () ;
Distance : 11

44
Tree	Object injected = filterCandidate ( false ) . thenInject () ;
Code	Object injected = filterCandidate ( false ) . thenInject () ;
Distance : 9

45
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Distance : 3

46
Tree	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Distance : 5

47
Tree	Object mocks = injected ( mocks , field ) . thenInject () ;
Code	Object mocks = injected ( mocks , field ) . thenInject () ;
Distance : 8

48
Tree	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , field , instance ) . thenInject () ;
Distance : 5

49
Tree	Object injected = injected . filterCandidate ( mocks , FastMath.PI ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , FastMath.PI ) . thenInject () ;
Distance : 6

50
Tree	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 6

51
Tree	Object injected = this . filterCandidate () . filterCandidate () ;
Code	Object injected = this . filterCandidate () . filterCandidate () ;
Distance : 11

52
Tree	Object injected = filterCandidate ( mocks , field , instance , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , field ) . thenInject () ;
Distance : 4

53
Tree	Object mocks = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 4

54
Tree	Object injected = filterCandidate ( STRING_CONSTANT , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , injected ) . thenInject () ;
Distance : 8

55
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

56
Tree	Object mocks = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

57
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Distance : 6

58
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

59
Tree	Object injected = injected . filterCandidate () ;
Code	Object injected = injected . filterCandidate () ;
Distance : 12

60
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 3

61
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . < / > thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . < / > thenInject () ;
Distance : 6

62
Tree	Object injected = injected . filterCandidate ( this , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this , field ) . thenInject () ;
Distance : 6

63
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance ( mocks , instance , instance ) ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance ( mocks , instance , instance ) ) ;
Distance : 9

64
Tree	Object injected = injected . filterCandidate ( true ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( true ) . thenInject () ;
Distance : 8

65
Tree	final Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	final Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

66
Tree	Object injected = mockCandidateFilter . filterCandidate ( this , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( this , field , instance ) . thenInject () ;
Distance : 3

67
Tree	Object injected = injected . filterCandidate ( this , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this , field , instance ) . thenInject () ;
Distance : 4

68
Tree	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

69
Tree	Object mocks = filterCandidate ( false ) . thenInject () ;
Code	Object mocks = filterCandidate ( false ) . thenInject () ;
Distance : 10

70
Tree	Object mocks = filterCandidate ( mocks , null ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , null ) . thenInject () ;
Distance : 8

71
Tree	Object injected = mockCandidateFilter . filterCandidate ( this . field , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( this . field , field , instance , instance ) . thenInject () ;
Distance : 4

72
Tree	Object injected = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 6

73
Tree	Object mocks = injected . filterCandidate ( mocks , field ) ;
Code	Object mocks = injected . filterCandidate ( mocks , field ) ;
Distance : 9

74
Tree	Object injected = injected . filterCandidate () ;
Code	Object injected = injected . filterCandidate () ;
Distance : 12

75
Tree	Object injected = injected . filterCandidate ( mocks , field ) ;
Code	Object injected = injected . filterCandidate ( mocks , field ) ;
Distance : 8

76
Tree	Object injected = injected . filterCandidate ( this . field , field , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this . field , field , instance , field ) . thenInject () ;
Distance : 6

77
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) ;
Distance : 7

78
Tree	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , field , instance ) . thenInject () ;
Distance : 4

79
Tree	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , injected . instance () ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , injected . instance () ) . thenInject () ;
Distance : 7

80
Tree	Object injected = mockCandidateFilter . filterCandidate ( false ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( false ) . thenInject () ;
Distance : 7

81
Tree	Object mocks = filterCandidate ( STRING_CONSTANT , injected ) . thenInject () ;
Code	Object mocks = filterCandidate ( STRING_CONSTANT , injected ) . thenInject () ;
Distance : 9

82
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , AllowedSolution.LEFT_SIDE ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , AllowedSolution.LEFT_SIDE ) . thenInject () ;
Distance : 3

83
Tree	Object injected = injected . filterCandidate ( this , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this , field ) . thenInject () ;
Distance : 6

84
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

85
Tree	Object field = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 7

86
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Distance : 5

87
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

88
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT , injected ) . thenInject () ;
Distance : 2

89
Tree	Object field = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 8

90
Tree	Object injected = filterCandidate ( false ) . thenInject () ;
Code	Object injected = filterCandidate ( false ) . thenInject () ;
Distance : 9

91
Tree	Object field = this . filterCandidate () . filterCandidate () ;
Code	Object field = this . filterCandidate () . filterCandidate () ;
Distance : 12

92
Tree	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

93
Tree	Object injected = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field , instance ) . thenInject () ;
Distance : 4

94
Tree	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

95
Tree	Object injected = injected . filterCandidate ( mocks , field ) ;
Code	Object injected = injected . filterCandidate ( mocks , field ) ;
Distance : 8

96
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 7

97
Tree	Object field = filterCandidate ( mocks , null ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , null ) . thenInject () ;
Distance : 8

98
Tree	Object injected = injected . filterCandidate ( mocks , b1.value , instance , FastMath.PI , injected , Color.BLUE ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , b1.value , instance , FastMath.PI , injected , Color.BLUE ) . thenInject () ;
Distance : 8

99
Tree	Object injected = injected . filterCandidate ( mocks , b1.value ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , b1.value ) . thenInject () ;
Distance : 6

100
Tree	Object injected = injected . filterCandidate ( mocks , b1.value , instance , values.length , injected , Color.BLUE ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , b1.value , instance , values.length , injected , Color.BLUE ) . thenInject () ;
Distance : 8

101
Tree	Object injected = injected . filterCandidate ( mocks , b1.value , instance , Verification.EXPLICIT , injected , Color.BLUE ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , b1.value , instance , Verification.EXPLICIT , injected , Color.BLUE ) . thenInject () ;
Distance : 8

102
Tree	Object field = filterCandidate ( mocks , field , false ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , false ) . thenInject () ;
Distance : 6

103
Tree	Object injected = this . filterCandidate () . filterCandidate () ;
Code	Object injected = this . filterCandidate () . filterCandidate () ;
Distance : 11

104
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , injected ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , injected ) . thenInject () ;
Distance : 3

105
Tree	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

106
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 4

107
Tree	Object injected = mockCandidateFilter . filterCandidate ( new Object ( mocks , field ) , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( new Object ( mocks , field ) , instance , instance ) . thenInject () ;
Distance : 5

108
Tree	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

109
Tree	Object injected = filterCandidate ( mocks , field , instance , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , injected ) . thenInject () ;
Distance : 4

110
Tree	Object mocks = filterCandidate ( mocks , field , false ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , false ) . thenInject () ;
Distance : 6

111
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 11

112
Tree	Object injected = source.moment . filterCandidate () ;
Code	Object injected = source.moment . filterCandidate () ;
Distance : 12

113
Tree	Object injected = injected . filterCandidate ( BASE_DATE , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( BASE_DATE , field , instance ) . thenInject () ;
Distance : 4

114
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Distance : 7

115
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject ( mocks ) ;
Distance : 6

116
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Distance : 2

117
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , thenInject ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , thenInject ) . thenInject () ;
Distance : 3

118
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

119
Tree	Object injected = filterCandidate ( STRING_CONSTANT , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , injected ) . thenInject () ;
Distance : 8

120
Tree	Object injected = injected . filterCandidate ( this , field , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this , field , instance , field ) . thenInject () ;
Distance : 4

121
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Distance : 3

122
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , field ) . thenInject () ;
Distance : 3

123
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , field , field ) . thenInject () ;
Distance : 6

124
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , b1.value ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , b1.value ) . thenInject () ;
Distance : 7

125
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 1

126
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 2

127
Tree	Object injected = filterCandidate ( true ) . thenInject () ;
Code	Object injected = filterCandidate ( true ) . thenInject () ;
Distance : 9

128
Tree	Object injected = injected . filterCandidate ( this . field , field , instance , injected ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this . field , field , instance , injected ) . thenInject () ;
Distance : 6

129
Tree	Object injected = injected . filterCandidate ( false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( false ) . thenInject () ;
Distance : 8

130
Tree	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 6

131
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

132
Tree	Object injected = injected . filterCandidate ( mocks , b1.value , instance , FastMath.PI , injected , values.length ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , b1.value , instance , FastMath.PI , injected , values.length ) . thenInject () ;
Distance : 8

133
Tree	Object mocks = injected . filterCandidate () ;
Code	Object mocks = injected . filterCandidate () ;
Distance : 13

134
Tree	Object injected = StandardBasicTypes.STRING . filterCandidate () ;
Code	Object injected = StandardBasicTypes.STRING . filterCandidate () ;
Distance : 12

135
Tree	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 7

136
Tree	Object injected = sgX . filterCandidate () ;
Code	Object injected = sgX . filterCandidate () ;
Distance : 12

137
Tree	Object injected = filterCandidate ( mocks , field , false ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , false ) . thenInject () ;
Distance : 5

138
Tree	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , false ) . thenInject () ;
Distance : 7

139
Tree	Object injected = injected . filterCandidate ( BASE_DATE , false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( BASE_DATE , false ) . thenInject () ;
Distance : 7

140
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 3

141
Tree	Object mocks = this . filterCandidate () . filterCandidate () ;
Code	Object mocks = this . filterCandidate () . filterCandidate () ;
Distance : 12

142
Tree	Object injected = injected . filterCandidate ( new Object ( mocks , field ) , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( new Object ( mocks , field ) , instance , field ) . thenInject () ;
Distance : 7

143
Tree	Object mocks = injected ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected ( mocks , field , instance ) . thenInject () ;
Distance : 6

144
Tree	Object injected = injected . filterCandidate ( finderStub.actualToReturn , false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( finderStub.actualToReturn , false ) . thenInject () ;
Distance : 7

145
Tree	abstract Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	abstract Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

146
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , RealMethod.IsIllegal.INSTANCE ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , RealMethod.IsIllegal.INSTANCE ) . thenInject () ;
Distance : 3

147
Tree	Object injected = mockCandidateFilter . filterCandidate ( this , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( this , field ) . thenInject () ;
Distance : 5

148
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . < >= > thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . < >= > thenInject () ;
Distance : 6

149
Tree	Object injected = filterCandidate ( mocks , null ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , null ) . thenInject () ;
Distance : 7

150
Tree	public Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	public Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

151
Tree	Object injected = injected . filterCandidate ( new Object ( mocks , field ) , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( new Object ( mocks , field ) , instance , instance ) . thenInject () ;
Distance : 6

152
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

153
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance ( mocks , field , instance ) ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance ( mocks , field , instance ) ) ;
Distance : 11

154
Tree	Object mocks = this . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = this . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

155
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

156
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , FastMath.PI , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , FastMath.PI , instance ) . thenInject () ;
Distance : 5

157
Tree	Object injected = injected . filterCandidate ( mocks , PolymerClassDefinition.DefinitionType.ObjectLiteral ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , PolymerClassDefinition.DefinitionType.ObjectLiteral ) . thenInject () ;
Distance : 6

158
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , values.length ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , values.length ) . thenInject () ;
Distance : 7

159
Tree	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Distance : 3

160
Tree	Object mocks = injected . filterCandidate ( this , field , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( this , field , instance , instance ) . thenInject () ;
Distance : 4

161
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , RotationConvention.FRAME_TRANSFORM ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , RotationConvention.FRAME_TRANSFORM ) . thenInject () ;
Distance : 3

162
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

163
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , JUnitRule.Strictness.WARN , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , JUnitRule.Strictness.WARN , instance ) . thenInject () ;
Distance : 5

164
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , FastMath.PI ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , FastMath.PI ) . thenInject () ;
Distance : 7

165
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance ( mocks , instance , instance ) ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance ( mocks , instance , instance ) ) ;
Distance : 10

166
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . < /= > thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . < /= > thenInject () ;
Distance : 6

167
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , field ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , field ) ;
Distance : 11

168
Tree	Object mocks = injected . filterCandidate ( this , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( this , field , instance ) . thenInject () ;
Distance : 5

169
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 10

170
Tree	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , injected . instance () ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , injected . instance () ) . thenInject () ;
Distance : 7

171
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , values.length , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , values.length , instance ) . thenInject () ;
Distance : 5

172
Tree	Object mocks = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 6

173
Tree	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 3

174
Tree	Object mocks = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , injected . instance () ) . thenInject () ;
Code	Object mocks = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , injected . instance () ) . thenInject () ;
Distance : 8

175
Tree	Object injected = coefficients.length . filterCandidate () ;
Code	Object injected = coefficients.length . filterCandidate () ;
Distance : 12

176
Tree	Object injected = injected . filterCandidate ( this . field , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this . field , field , instance , instance ) . thenInject () ;
Distance : 5

177
Tree	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

178
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance ( mocks , instance , field ) ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance ( mocks , instance , field ) ) ;
Distance : 10

179
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , NUMBER_CONSTANT , NUMBER_CONSTANT ) . thenInject () ;
Distance : 2

180
Tree	static Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	static Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

181
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate () , NodeUtil.isNameDeclaration , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate () , NodeUtil.isNameDeclaration , instance ) . thenInject () ;
Distance : 5

182
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , TokenType.MODULE ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , TokenType.MODULE ) . thenInject () ;
Distance : 3

183
Tree	Object mocks = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

184
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 4

185
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

186
Tree	Object mocks = injected . filterCandidate ( new Object ( mocks , field ) , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( new Object ( mocks , field ) , instance , instance ) . thenInject () ;
Distance : 7

187
Tree	Object injected = injected . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance , false ) . thenInject () ;
Distance : 3

188
Tree	Object field = this . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object field = this . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

189
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 4

190
Tree	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

191
Tree	Object injected = injected . filterCandidate ( this , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( this , field , instance ) . thenInject () ;
Distance : 4

192
Tree	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , injected ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , NUMBER_CONSTANT , injected ) . thenInject () ;
Distance : 4

193
Tree	Object mocks = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 7

194
Tree	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , mockCandidateFilter . instance () ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , mockCandidateFilter . instance () ) . thenInject () ;
Distance : 7

195
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 3

196
Tree	Object mocks = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object mocks = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 9

197
Tree	Object mocks = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 7

198
Tree	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

199
Tree	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Code	Object injected = filterCandidate ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) . thenInject () ;
Distance : 8

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Distance : 2

1
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock () ) ; }
Distance : 3

2
Tree	{ mock ( classToMock ) ; return false ; }
Code	{ mock ( classToMock ) ; return false ; }
Distance : 8

3
Tree	{ return mock ( classToMock , classToMock ) ; }
Code	{ return mock ( classToMock , classToMock ) ; }
Distance : 5

4
Tree	{ return MOCKITO_CORE . mock () . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( mockSettings , mockSettings ) ; }
Distance : 5

5
Tree	{ return MOCKITO_CORE . mock () . mock ( mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( mockSettings ) ; }
Distance : 6

6
Tree	{ return mock ( classToMock , null , mockSettings ) ; }
Code	{ return mock ( classToMock , null , mockSettings ) ; }
Distance : 4

7
Tree	{ return mock ( classToMock . mock () , mockSettings ) ; }
Code	{ return mock ( classToMock . mock () , mockSettings ) ; }
Distance : 6

8
Tree	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

9
Tree	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( classToMock ) ) ; }
Distance : 7

10
Tree	{ return mock ( classToMock , classToMock , mockSettings , null ) ; }
Code	{ return mock ( classToMock , classToMock , mockSettings , null ) ; }
Distance : 5

11
Tree	{ return super . mock ( this ) ; }
Code	{ return super . mock ( this ) ; }
Distance : 6

12
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 1

13
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

14
Tree	{ return mock ( classToMock , classToMock , mockSettings , false ) ; }
Code	{ return mock ( classToMock , classToMock , mockSettings , false ) ; }
Distance : 5

15
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

16
Tree	{ return mock ( classToMock , mockSettings , null , false , false ) ; }
Code	{ return mock ( classToMock , mockSettings , null , false , false ) ; }
Distance : 7

17
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock , mockSettings . mock () ) ; }
Distance : 5

18
Tree	{ return mock ( classToMock , classToMock , null , false , false ) ; }
Code	{ return mock ( classToMock , classToMock , null , false , false ) ; }
Distance : 8

19
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , null , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , null , null , classToMock ) ; }
Distance : 6

20
Tree	{ return mock . mock ( classToMock , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings ) ; }
Distance : 3

21
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , null , mockSettings ) ; }
Distance : 5

22
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , null , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , null , null , mockSettings ) ; }
Distance : 6

23
Tree	{ return mock ( classToMock , classToMock - NUMBER_CONSTANT ) ; }
Code	{ return mock ( classToMock , classToMock - NUMBER_CONSTANT ) ; }
Distance : 5

24
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , mockSettings . mock () ) ; }
Distance : 5

25
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new OngoingVerifyingMode ( false ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new OngoingVerifyingMode ( false ) ) ; }
Distance : 5

26
Tree	{ return mock ( mockSettings , mockSettings , mockSettings , null ) ; }
Code	{ return mock ( mockSettings , mockSettings , mockSettings , null ) ; }
Distance : 6

27
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings , null ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings , null ) ; }
Distance : 2

28
Tree	{ return mock ( MOCKITO_CORE , null ) ; }
Code	{ return mock ( MOCKITO_CORE , null ) ; }
Distance : 6

29
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock ) ; }
Distance : 5

30
Tree	{ return mock ( classToMock , mockSettings , mockSettings , null ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , null ) ; }
Distance : 5

31
Tree	{ return mock ( mockSettings , mockSettings , mockSettings , false ) ; }
Code	{ return mock ( mockSettings , mockSettings , mockSettings , false ) ; }
Distance : 6

32
Tree	{ return classToMock . mock ( this , classToMock ) ; }
Code	{ return classToMock . mock ( this , classToMock ) ; }
Distance : 5

33
Tree	{ return mock ( mockSettings , null , mockSettings ) ; }
Code	{ return mock ( mockSettings , null , mockSettings ) ; }
Distance : 5

34
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , TypeInferenceMode.NEITHER , false , false , false ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , TypeInferenceMode.NEITHER , false , false , false ) ; }
Distance : 13

35
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , iValues.length , false , false , false ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , iValues.length , false , false , false ) ; }
Distance : 13

36
Tree	{ return mock ( classToMock , classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , classToMock , mockSettings ) ; }
Distance : 4

37
Tree	{ return mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Distance : 7

38
Tree	{ return mock ( new RuntimeException ( classToMock ) ) ; }
Code	{ return mock ( new RuntimeException ( classToMock ) ) ; }
Distance : 7

39
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

40
Tree	{ return mock ( classToMock , mockSettings , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings . mock ( classToMock ) ) ; }
Distance : 8

41
Tree	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 6

42
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock , null ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock , null ) ; }
Distance : 2

43
Tree	{ return mock () ; }
Code	{ return mock () ; }
Distance : 9

44
Tree	{ return this . classToMock . mock ( classToMock ) ; }
Code	{ return this . classToMock . mock ( classToMock ) ; }
Distance : 7

45
Tree	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE ) ; }
Distance : 6

46
Tree	{ return final . mock ( this ) ; }
Code	{ return final . mock ( this ) ; }
Distance : 6

47
Tree	{ return mock ( mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings ) ; }
Distance : 5

48
Tree	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

49
Tree	{ return this . MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Code	{ return this . MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Distance : 7

50
Tree	{ return mock ( new DummyLocalizable ( classToMock ) ) ; }
Code	{ return mock ( new DummyLocalizable ( classToMock ) ) ; }
Distance : 7

51
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Distance : 10

52
Tree	{ return MOCKITO_CORE . mock ( null , classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( null , classToMock , null , mockSettings ) ; }
Distance : 4

53
Tree	{ return classToMock . mock ( classToMock ) ; }
Code	{ return classToMock . mock ( classToMock ) ; }
Distance : 5

54
Tree	{ return mock () . mock ( mockSettings , mockSettings ) ; }
Code	{ return mock () . mock ( mockSettings , mockSettings ) ; }
Distance : 5

55
Tree	{ return MOCKITO_CORE . mock ( null , mockSettings , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( null , mockSettings , null , classToMock ) ; }
Distance : 4

56
Tree	{ return mock ( classToMock , OngoingVerifyingMode , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock , OngoingVerifyingMode , mockSettings . mock ( classToMock ) ) ; }
Distance : 9

57
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings , MOCKITO_CORE . mock ( classToMock ) ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings , MOCKITO_CORE . mock ( classToMock ) ) ; }
Distance : 11

58
Tree	{ return MOCKITO_CORE . mock ( this , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( this , MOCKITO_CORE ) ; }
Distance : 4

59
Tree	{ return MOCKITO_CORE . mock ( this , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( this , mockSettings ) ; }
Distance : 3

60
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Distance : 3

61
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 ) ; }
Distance : 5

62
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Distance : 3

63
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , classToMock ) ; }
Distance : 6

64
Tree	{ return mock () . mock ( classToMock , classToMock ) ; }
Code	{ return mock () . mock ( classToMock , classToMock ) ; }
Distance : 5

65
Tree	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 5

66
Tree	{ return mock ( classToMock , new OngoingVerifyingMode ( classToMock , mockSettings ) ) ; }
Code	{ return mock ( classToMock , new OngoingVerifyingMode ( classToMock , mockSettings ) ) ; }
Distance : 8

67
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE . mock ( mockSettings ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE . mock ( mockSettings ) ) ; }
Distance : 10

68
Tree	{ return MOCKITO_CORE . mock ( mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings ) ; }
Distance : 4

69
Tree	{ return mock ( MOCKITO_CORE , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

70
Tree	{ return mock ( mockSettings , mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings , mockSettings ) ; }
Distance : 4

71
Tree	{ return mock ( classToMock , getMockSettings , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock , getMockSettings , mockSettings . mock ( classToMock ) ) ; }
Distance : 9

72
Tree	{ return mock ( new Returns ( classToMock ) ) ; }
Code	{ return mock ( new Returns ( classToMock ) ) ; }
Distance : 7

73
Tree	{ return mock ( classToMock . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) ) ; }
Distance : 7

74
Tree	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

75
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( classToMock , mockSettings ) ; }
Distance : 7

76
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , null , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , null , null , mockSettings ) ; }
Distance : 7

77
Tree	{ return mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Distance : 5

78
Tree	{ return mock ( classToMock , mockSettings , mockSettings . mock ( mockSettings ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings . mock ( mockSettings ) ) ; }
Distance : 8

79
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , classToMock . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , classToMock . mock () ) ; }
Distance : 4

80
Tree	{ return mock () . mock ( classToMock . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( MOCKITO_CORE ) ) ; }
Distance : 7

81
Tree	{ return MOCKITO_CORE . mock ( mockSettings , null , null , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , null , null , null , mockSettings ) ; }
Distance : 7

82
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( mockSettings , mockSettings ) ; }
Distance : 5

83
Tree	{ return mock ( classToMock , new InvocationContainerImpl ( classToMock , mockSettings ) ) ; }
Code	{ return mock ( classToMock , new InvocationContainerImpl ( classToMock , mockSettings ) ) ; }
Distance : 8

84
Tree	{ return mock ( mockSettings , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( mockSettings , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

85
Tree	{ return mock ( MOCKITO_CORE . mock ( classToMock ) ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( classToMock ) ) ; }
Distance : 6

86
Tree	{ return MOCKITO_CORE . mock ( mockSettings . mock () , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings . mock () , mockSettings ) ; }
Distance : 5

87
Tree	{ return MOCKITO_CORE . mock ( classToMock , new OngoingVerifyingMode ( mockSettings , mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new OngoingVerifyingMode ( mockSettings , mockSettings ) ) ; }
Distance : 5

88
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock ) ; }
Distance : 6

89
Tree	{ return mock () . mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Distance : 7

90
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , classToMock ) ; }
Distance : 1

91
Tree	{ return mock () . mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Distance : 8

92
Tree	{ return mock () . mock ( MOCKITO_CORE . mock ( classToMock ) ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE . mock ( classToMock ) ) ; }
Distance : 8

93
Tree	{ return mock ( new Sin ( classToMock ) ) ; }
Code	{ return mock ( new Sin ( classToMock ) ) ; }
Distance : 7

94
Tree	{ return mock ( classToMock , return; ) ; }
Code	{ return mock ( classToMock , return; ) ; }
Distance : 5

95
Tree	{ return mock () . mock ( mock () ) ; }
Code	{ return mock () . mock ( mock () ) ; }
Distance : 7

96
Tree	{ return classToMock . mock ( classToMock ) . mock () ; }
Code	{ return classToMock . mock ( classToMock ) . mock () ; }
Distance : 6

97
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock ( classToMock ) ) ; }
Distance : 6

98
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

99
Tree	{ return MOCKITO_CORE . mock ( mockSettings ) . mock () ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings ) . mock () ; }
Distance : 6

100
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

101
Tree	{ return mock ( classToMock , null ) ; }
Code	{ return mock ( classToMock , null ) ; }
Distance : 5

102
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings . mock () ) ; }
Distance : 4

103
Tree	{ return mock ( mockSettings . mock () , mockSettings ) ; }
Code	{ return mock ( mockSettings . mock () , mockSettings ) ; }
Distance : 7

104
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings . mock () ) ; }
Distance : 4

105
Tree	{ return mock ( classToMock , mockSettings , mockSettings , false ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , false ) ; }
Distance : 5

106
Tree	{ return mock () . mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Distance : 8

107
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( mockSettings ) ) ; }
Distance : 5

108
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 6

109
Tree	{ return mock ( classToMock . mock () , classToMock ) ; }
Code	{ return mock ( classToMock . mock () , classToMock ) ; }
Distance : 6

110
Tree	{ return MOCKITO_CORE . mock ( Any.ANY ) ; }
Code	{ return MOCKITO_CORE . mock ( Any.ANY ) ; }
Distance : 5

111
Tree	{ mock ( classToMock ) ; return true ; }
Code	{ mock ( classToMock ) ; return true ; }
Distance : 7

112
Tree	{ return mock () . mock ( mock () ) ; } class
Code	{ return mock () . mock ( mock () ) ; } class
Distance : 8

113
Tree	{ return mock ( classToMock , mockSettings , mockSettings . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings . mock ( MOCKITO_CORE ) ) ; }
Distance : 8

114
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock ) ; }
Distance : 5

115
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings , null ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings , null ) ; }
Distance : 6

116
Tree	{ return mock () . mock ( mock () ) ; } notifyListeners
Code	{ return mock () . mock ( mock () ) ; } notifyListeners
Distance : 8

117
Tree	{ return MOCKITO_CORE . mock ( null , mockSettings , null , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( null , mockSettings , null , MOCKITO_CORE ) ; }
Distance : 4

118
Tree	{ return mock () ; } notifyListeners
Code	{ return mock () ; } notifyListeners
Distance : 10

119
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , null ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings , null ) ; }
Distance : 2

120
Tree	{ return mock () . mock ( classToMock . mock ( mockSettings ) ) ; }
Code	{ return mock () . mock ( classToMock . mock ( mockSettings ) ) ; }
Distance : 7

121
Tree	{ return mock () ; } class
Code	{ return mock () ; } class
Distance : 10

122
Tree	{ return MOCKITO_CORE . mock ( classToMock . mock () , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock . mock () , mockSettings ) ; }
Distance : 4

123
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock , mockSettings ) ; }
Distance : 4

124
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Distance : 2

125
Tree	{ return MOCKITO_CORE . mock ( null , mockSettings , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( null , mockSettings , null , mockSettings ) ; }
Distance : 4

126
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , null , mockSettings ) ; }
Distance : 4

127
Tree	{ return MOCKITO_CORE . mock ( classToMock , new MockSettingsImpl ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new MockSettingsImpl ( mockSettings ) ) ; }
Distance : 5

128
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

129
Tree	{ return false . mock ( this ) ; }
Code	{ return false . mock ( this ) ; }
Distance : 6

130
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE . mock ( classToMock ) ) ; }
Distance : 10

131
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 1

132
Tree	{ return mock ( classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings ) ; }
Distance : 4

133
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( classToMock ) ) ; }
Distance : 5

134
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

135
Tree	{ return MOCKITO_CORE . mock ( Any.ANY , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( Any.ANY , mockSettings ) ; }
Distance : 3

136
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 4

137
Tree	{ return mock ( classToMock , new MockSettingsImpl ( classToMock , mockSettings ) ) ; }
Code	{ return mock ( classToMock , new MockSettingsImpl ( classToMock , mockSettings ) ) ; }
Distance : 8

138
Tree	{ return mock ( classToMock , new mockSettings ( classToMock , mockSettings ) ) ; }
Code	{ return mock ( classToMock , new mockSettings ( classToMock , mockSettings ) ) ; }
Distance : 7

139
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new mockSettings ( false ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new mockSettings ( false ) ) ; }
Distance : 5

140
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 ) ; }
Distance : 5

141
Tree	{ return MOCKITO_CORE . mock ( classToMock , new mockSettings ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new mockSettings ( mockSettings ) ) ; }
Distance : 4

142
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , null ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , null ) ; }
Distance : 1

143
Tree	{ return MOCKITO_CORE . mock ( classToMock , new InvocationContainerImpl ( mockSettings , mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new InvocationContainerImpl ( mockSettings , mockSettings ) ) ; }
Distance : 5

144
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , Verification.EXPLICIT , false , false , false ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , Verification.EXPLICIT , false , false , false ) ; }
Distance : 13

145
Tree	{ return mock ( MOCKITO_CORE , mockSettings , null , false , false ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , null , false , false ) ; }
Distance : 8

146
Tree	{ return MOCKITO_CORE . mock ( this , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( this , classToMock ) ; }
Distance : 4

147
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

148
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

149
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Distance : 3

150
Tree	{ return MOCKITO_CORE . mock ( mockSettings , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , null , mockSettings ) ; }
Distance : 3

151
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings , false ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings , false ) ; }
Distance : 6

152
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 , mockSettings ) ; }
Distance : 3

153
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new InvocationContainerImpl ( false ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new InvocationContainerImpl ( false ) ) ; }
Distance : 5

154
Tree	{ return mock ( classToMock , InvocationContainerImpl , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock , InvocationContainerImpl , mockSettings . mock ( classToMock ) ) ; }
Distance : 9

155
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock () ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock () ; }
Distance : 6

156
Tree	{ return MOCKITO_CORE . mock ( mockSettings , null , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , null , null , mockSettings ) ; }
Distance : 5

157
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 , mockSettings ) ; }
Distance : 3

158
Tree	{ return MOCKITO_CORE . mock ( classToMock , new InvocationContainerImpl ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new InvocationContainerImpl ( mockSettings ) ) ; }
Distance : 5

159
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 5

160
Tree	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , Locale.US , false , false , false ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings , MOCKITO_CORE , Locale.US , false , false , false ) ; }
Distance : 13

161
Tree	{ return classToMock . mock () . mock ( classToMock ) ; }
Code	{ return classToMock . mock () . mock ( classToMock ) ; }
Distance : 7

162
Tree	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

163
Tree	{ return this . MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return this . MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 6

164
Tree	{ return mock ( classToMock , mockSettings , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings . mock ( classToMock ) ) ; }
Distance : 8

165
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new MockSettingsImpl ( false ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , new MockSettingsImpl ( false ) ) ; }
Distance : 5

166
Tree	{ return mock . mock ( classToMock ) ; }
Code	{ return mock . mock ( classToMock ) ; }
Distance : 5

167
Tree	{ return MOCKITO_CORE . mock ( classToMock , new mockSettings ( mockSettings , mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new mockSettings ( mockSettings , mockSettings ) ) ; }
Distance : 5

168
Tree	{ return MOCKITO_CORE . mock ( classToMock , new MockSettingsImpl ( mockSettings , mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new MockSettingsImpl ( mockSettings , mockSettings ) ) ; }
Distance : 5

169
Tree	{ return mock ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 4

170
Tree	{ return mock ( mockSettings , mockSettings , null , false , false ) ; }
Code	{ return mock ( mockSettings , mockSettings , null , false , false ) ; }
Distance : 8

171
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 6

172
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 3

173
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock () ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock () ; }
Distance : 5

174
Tree	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Distance : 6

175
Tree	{ return MOCKITO_CORE . mock ( classToMock , new OngoingVerifyingMode ( mockSettings ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , new OngoingVerifyingMode ( mockSettings ) ) ; }
Distance : 5

176
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Distance : 3

177
Tree	{ return try . mock ( this ) ; }
Code	{ return try . mock ( this ) ; }
Distance : 6

178
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Distance : 5

179
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Distance : 2

180
Tree	{ return mock ( classToMock . mock ( mockSettings ) ) ; }
Code	{ return mock ( classToMock . mock ( mockSettings ) ) ; }
Distance : 7

181
Tree	{ return mock ( mockSettings , null ) ; }
Code	{ return mock ( mockSettings , null ) ; }
Distance : 5

182
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings ) ; }
Distance : 4

183
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , null , classToMock ) ; }
Distance : 4

184
Tree	{ return mock ( classToMock , null , classToMock ) ; }
Code	{ return mock ( classToMock , null , classToMock ) ; }
Distance : 4

185
Tree	{ return this . MOCKITO_CORE . mock ( mockSettings ) ; }
Code	{ return this . MOCKITO_CORE . mock ( mockSettings ) ; }
Distance : 6

186
Tree	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings , mockSettings . mock ( classToMock ) ) ; }
Distance : 9

187
Tree	{ mock ( MOCKITO_CORE ) ; return false ; }
Code	{ mock ( MOCKITO_CORE ) ; return false ; }
Distance : 9

188
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock , mockSettings ) ; }
Distance : 2

189
Tree	{ return mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Distance : 7

190
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( MOCKITO_CORE ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . mock ( MOCKITO_CORE ) ) ; }
Distance : 5

191
Tree	{ return mock ( classToMock . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mock ( classToMock . mock ( MOCKITO_CORE ) ) ; }
Distance : 7

192
Tree	{ return mock () . mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Distance : 8

193
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE . mock () , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE . mock () , mockSettings ) ; }
Distance : 5

194
Tree	{ return mock ( MOCKITO_CORE . mock () , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock () , mockSettings ) ; }
Distance : 6

195
Tree	{ mock ( mockSettings ) ; return false ; }
Code	{ mock ( mockSettings ) ; return false ; }
Distance : 9

196
Tree	{ return MOCKITO_CORE . mock ( classToMock . mock () , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock . mock () , classToMock ) ; }
Distance : 4

197
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock . mock () ) ; }
Distance : 4

198
Tree	{ return mock () . mock ( mock () ) ; } array
Code	{ return mock () . mock ( mock () ) ; } array
Distance : 8

199
Tree	{ return mock () ; } array
Code	{ return mock () ; } array
Distance : 10

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	PeepholeOptimizationsPass . verificationStarted ( mode ) ;
Code	PeepholeOptimizationsPass . verificationStarted ( mode ) ;
Distance : 7

1
Tree	mockingProgress = continue; ;
Code	mockingProgress = continue; ;
Distance : 11

2
Tree	this . mock . verificationStarted ( mode ) ;
Code	this . mock . verificationStarted ( mode ) ;
Distance : 8

3
Tree	mockingProgress . verificationStarted ( mode , true ) ;
Code	mockingProgress . verificationStarted ( mode , true ) ;
Distance : 6

4
Tree	mockingProgress . verificationStarted ( mockingProgress , false ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , false ) ;
Distance : 6

5
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

6
Tree	mockingProgress . verificationStarted () ; Class
Code	mockingProgress . verificationStarted () ; Class
Distance : 10

7
Tree	verificationStarted ( mockingProgress . verificationStarted () ) ;
Code	verificationStarted ( mockingProgress . verificationStarted () ) ;
Distance : 9

8
Tree	mockingProgress . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Distance : 5

9
Tree	mockingProgress . verificationStarted ( this , mode ) ;
Code	mockingProgress . verificationStarted ( this , mode ) ;
Distance : 5

10
Tree	mockingProgress . verificationStarted ( mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 7

11
Tree	verificationStarted ( mode , mode , false ) ;
Code	verificationStarted ( mode , mode , false ) ;
Distance : 8

12
Tree	verificationStarted () ;
Code	verificationStarted () ;
Distance : 11

13
Tree	verificationStarted ( false ) ;
Code	verificationStarted ( false ) ;
Distance : 9

14
Tree	mockingProgress ( mode ) ;
Code	mockingProgress ( mode ) ;
Distance : 8

15
Tree	this . mode = mockingProgress ;
Code	this . mode = mockingProgress ;
Distance : 10

16
Tree	mockingProgress = mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress = mockingProgress . verificationStarted ( mode ) ;
Distance : 8

17
Tree	verificationStarted ( mode , mockingProgress , false ) ;
Code	verificationStarted ( mode , mockingProgress , false ) ;
Distance : 8

18
Tree	Color.BLUE . verificationStarted ( mode ) ;
Code	Color.BLUE . verificationStarted ( mode ) ;
Distance : 7

19
Tree	verificationStarted ( mode , mock , false ) ;
Code	verificationStarted ( mode , mock , false ) ;
Distance : 7

20
Tree	CodePrinter.Builder . verificationStarted ( mode ) ;
Code	CodePrinter.Builder . verificationStarted ( mode ) ;
Distance : 7

21
Tree	mockingProgress = null ;
Code	mockingProgress = null ;
Distance : 11

22
Tree	verificationStarted ( mock ) ;
Code	verificationStarted ( mock ) ;
Distance : 8

23
Tree	verificationStarted ( mode , verificationStarted () ) ;
Code	verificationStarted ( mode , verificationStarted () ) ;
Distance : 8

24
Tree	mockingProgress = mockingProgress . verificationStarted ( mockingProgress ) ;
Code	mockingProgress = mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 9

25
Tree	mockingProgress . verificationStarted ( mockingProgress , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mockingProgress . verificationStarted () ) ;
Distance : 7

26
Tree	mock = false ;
Code	mock = false ;
Distance : 11

27
Tree	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH ) ;
Code	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH ) ;
Distance : 7

28
Tree	mockingProgress . verificationStarted ( mode , mockingProgress , new mock () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress , new mock () ) ;
Distance : 7

29
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mockingProgress ) ;
Distance : 6

30
Tree	mockingProgress . verificationStarted ( NUMBER_CONSTANT ) ; Class
Code	mockingProgress . verificationStarted ( NUMBER_CONSTANT ) ; Class
Distance : 8

31
Tree	new mockingProgress () . verificationStarted () ; Class
Code	new mockingProgress () . verificationStarted () ; Class
Distance : 12

32
Tree	this . mockingProgress . verificationStarted ( mode ) ;
Code	this . mockingProgress . verificationStarted ( mode ) ;
Distance : 8

33
Tree	verificationStarted ( false ) ; Class
Code	verificationStarted ( false ) ; Class
Distance : 10

34
Tree	verificationStarted ( mock , NUMBER_CONSTANT ) ;
Code	verificationStarted ( mock , NUMBER_CONSTANT ) ;
Distance : 7

35
Tree	mock . verificationStarted ( mode , mockingProgress ) ;
Code	mock . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

36
Tree	this . mode . verificationStarted ( mock ) ;
Code	this . mode . verificationStarted ( mock ) ;
Distance : 8

37
Tree	mock = verificationStarted ( mode ) ;
Code	mock = verificationStarted ( mode ) ;
Distance : 8

38
Tree	mockingProgress . verificationStarted ( mode , new MockSettingsImpl () ) ;
Code	mockingProgress . verificationStarted ( mode , new MockSettingsImpl () ) ;
Distance : 7

39
Tree	mockingProgress . verificationStarted ( NUMBER_CONSTANT ) ;
Code	mockingProgress . verificationStarted ( NUMBER_CONSTANT ) ;
Distance : 7

40
Tree	mockingProgress . verificationStarted ( mode , mockingProgress , new mockingProgress () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress , new mockingProgress () ) ;
Distance : 7

41
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 ) ;
Distance : 7

42
Tree	mock . verificationStarted ( new mode () ) ;
Code	mock . verificationStarted ( new mode () ) ;
Distance : 6

43
Tree	new mockingProgress () . verificationStarted () ;
Code	new mockingProgress () . verificationStarted () ;
Distance : 11

44
Tree	verificationStarted ( mockingProgress ) ;
Code	verificationStarted ( mockingProgress ) ;
Distance : 9

45
Tree	mock . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mock . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

46
Tree	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Distance : 6

47
Tree	mockingProgress . verificationStarted ( mode , STRING_CONSTANT , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , STRING_CONSTANT , mockingProgress . verificationStarted () ) ;
Distance : 8

48
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 5

49
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

50
Tree	mockingProgress . verificationStarted () ;
Code	mockingProgress . verificationStarted () ;
Distance : 9

51
Tree	verificationStarted ( verificationStarted () , mockingProgress ) ;
Code	verificationStarted ( verificationStarted () , mockingProgress ) ;
Distance : 8

52
Tree	mockingProgress . verificationStarted ( ( mode ) null ) ;
Code	mockingProgress . verificationStarted ( ( mode ) null ) ;
Distance : 5

53
Tree	mockingProgress () . verificationStarted () ;
Code	mockingProgress () . verificationStarted () ;
Distance : 10

54
Tree	verificationStarted ( mode , mode , mockingProgress ) ;
Code	verificationStarted ( mode , mode , mockingProgress ) ;
Distance : 8

55
Tree	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Distance : 7

56
Tree	mockingProgress . verificationStarted ( mode , mode ) ;
Code	mockingProgress . verificationStarted ( mode , mode ) ;
Distance : 5

57
Tree	mock . verificationStarted ( NUMBER_CONSTANT ) ;
Code	mock . verificationStarted ( NUMBER_CONSTANT ) ;
Distance : 8

58
Tree	verificationStarted ( verificationStarted () , mock ) ;
Code	verificationStarted ( verificationStarted () , mock ) ;
Distance : 8

59
Tree	mockingProgress . verificationStarted ( NUMBER_CONSTANT , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( NUMBER_CONSTANT , mockingProgress ) ;
Distance : 6

60
Tree	this . mockingProgress = mode ;
Code	this . mockingProgress = mode ;
Distance : 10

61
Tree	verificationStarted ( true ) ;
Code	verificationStarted ( true ) ;
Distance : 9

62
Tree	mockingProgress . verificationStarted ( mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode . verificationStarted () ) ;
Distance : 7

63
Tree	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH , mode ) ;
Code	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH , mode ) ;
Distance : 5

64
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

65
Tree	mockingProgress . verificationStarted ( new mockingProgress () ) ;
Code	mockingProgress . verificationStarted ( new mockingProgress () ) ;
Distance : 6

66
Tree	mock . verificationStarted ( mode , false ) ;
Code	mock . verificationStarted ( mode , false ) ;
Distance : 7

67
Tree	mock . verificationStarted () ;
Code	mock . verificationStarted () ;
Distance : 10

68
Tree	new mock () . verificationStarted ( mode ) ;
Code	new mock () . verificationStarted ( mode ) ;
Distance : 9

69
Tree	new mock () . verificationStarted () ;
Code	new mock () . verificationStarted () ;
Distance : 10

70
Tree	mock . verificationStarted ( null ) ;
Code	mock . verificationStarted ( null ) ;
Distance : 8

71
Tree	mockingProgress . verificationStarted ( mode , mock ) ;
Code	mockingProgress . verificationStarted ( mode , mock ) ;
Distance : 6

72
Tree	mockingProgress () . verificationStarted ( mock ) ;
Code	mockingProgress () . verificationStarted ( mock ) ;
Distance : 7

73
Tree	mode () . verificationStarted ( mode ) ;
Code	mode () . verificationStarted ( mode ) ;
Distance : 8

74
Tree	mode . verificationStarted ( false ) ;
Code	mode . verificationStarted ( false ) ;
Distance : 8

75
Tree	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Distance : 6

76
Tree	mode . verificationStarted ( NUMBER_CONSTANT ) ;
Code	mode . verificationStarted ( NUMBER_CONSTANT ) ;
Distance : 8

77
Tree	mock () . verificationStarted () ;
Code	mock () . verificationStarted () ;
Distance : 11

78
Tree	mode ( mode ) ;
Code	mode ( mode ) ;
Distance : 9

79
Tree	mode () . verificationStarted () ;
Code	mode () . verificationStarted () ;
Distance : 11

80
Tree	mode . verificationStarted ( mode ) ;
Code	mode . verificationStarted ( mode ) ;
Distance : 7

81
Tree	mockingProgress = verificationStarted ( mockingProgress ) ;
Code	mockingProgress = verificationStarted ( mockingProgress ) ;
Distance : 8

82
Tree	mockingProgress = super(); ;
Code	mockingProgress = super(); ;
Distance : 11

83
Tree	mockingProgress . verificationStarted ( mode , mock . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mock . verificationStarted () ) ;
Distance : 6

84
Tree	mockingProgress . verificationStarted ( new mode () ) ;
Code	mockingProgress . verificationStarted ( new mode () ) ;
Distance : 5

85
Tree	verificationStarted ( mockingProgress , STRING_CONSTANT , mockingProgress ) ;
Code	verificationStarted ( mockingProgress , STRING_CONSTANT , mockingProgress ) ;
Distance : 8

86
Tree	mode = false ;
Code	mode = false ;
Distance : 11

87
Tree	mockingProgress . verificationStarted ( mode , mockingProgress , new mode () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress , new mode () ) ;
Distance : 6

88
Tree	mode = new MockAwareVerificationMode ( mode ) ;
Code	mode = new MockAwareVerificationMode ( mode ) ;
Distance : 7

89
Tree	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

90
Tree	mockingProgress . verificationStarted ( this , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( this , mockingProgress ) ;
Distance : 6

91
Tree	mock . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mock . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

92
Tree	mockingProgress . verificationStarted ( mode , STRING_CONSTANT , mock . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , STRING_CONSTANT , mock . verificationStarted () ) ;
Distance : 7

93
Tree	verificationStarted ( mock . verificationStarted () , mode ) ;
Code	verificationStarted ( mock . verificationStarted () , mode ) ;
Distance : 7

94
Tree	mockingProgress . mode ( mode ) ;
Code	mockingProgress . mode ( mode ) ;
Distance : 7

95
Tree	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode () ) ;
Distance : 7

96
Tree	mock . mock ( mode ) ;
Code	mock . mock ( mode ) ;
Distance : 8

97
Tree	verificationStarted ( mode , NUMBER_CONSTANT ) ;
Code	verificationStarted ( mode , NUMBER_CONSTANT ) ;
Distance : 8

98
Tree	mockingProgress . verificationStarted ( mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress . verificationStarted () ) ;
Distance : 7

99
Tree	mode . verificationStarted ( mode , new MockAwareVerificationMode () ) ;
Code	mode . verificationStarted ( mode , new MockAwareVerificationMode () ) ;
Distance : 8

100
Tree	verificationStarted ( mock , verificationStarted () ) ;
Code	verificationStarted ( mock , verificationStarted () ) ;
Distance : 7

101
Tree	verificationStarted ( mode . verificationStarted () , mockingProgress . verificationStarted () ) ;
Code	verificationStarted ( mode . verificationStarted () , mockingProgress . verificationStarted () ) ;
Distance : 10

102
Tree	mode . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mode . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 6

103
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 7

104
Tree	mockingProgress = return; ;
Code	mockingProgress = return; ;
Distance : 11

105
Tree	mock () . verificationStarted ( mode ) ;
Code	mock () . verificationStarted ( mode ) ;
Distance : 8

106
Tree	PeepholeOptimizationsPass . verificationStarted ( mode , mockingProgress ) ;
Code	PeepholeOptimizationsPass . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

107
Tree	verificationStarted ( mode ) ; Class
Code	verificationStarted ( mode ) ; Class
Distance : 9

108
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 ) ;
Distance : 7

109
Tree	mockingProgress . verificationStarted ( ( mockingProgress ) null ) ;
Code	mockingProgress . verificationStarted ( ( mockingProgress ) null ) ;
Distance : 6

110
Tree	verificationStarted ( mode . verificationStarted () , mode . verificationStarted () ) ;
Code	verificationStarted ( mode . verificationStarted () , mode . verificationStarted () ) ;
Distance : 9

111
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode () ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode () ) ;
Distance : 7

112
Tree	mode . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mode . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

113
Tree	verificationStarted ( mock . verificationStarted () ) ;
Code	verificationStarted ( mock . verificationStarted () ) ;
Distance : 8

114
Tree	mockingProgress . verificationStarted ( ( mode ) super(); ) ;
Code	mockingProgress . verificationStarted ( ( mode ) super(); ) ;
Distance : 5

115
Tree	new mockingProgress () . verificationStarted ( mockingProgress ) ;
Code	new mockingProgress () . verificationStarted ( mockingProgress ) ;
Distance : 9

116
Tree	mockingProgress . mock ( mode ) ;
Code	mockingProgress . mock ( mode ) ;
Distance : 7

117
Tree	verificationStarted ( mode , STRING_CONSTANT , mockingProgress ) ;
Code	verificationStarted ( mode , STRING_CONSTANT , mockingProgress ) ;
Distance : 8

118
Tree	verificationStarted ( mode ) ;
Code	verificationStarted ( mode ) ;
Distance : 8

119
Tree	mockingProgress () . verificationStarted () ; Class
Code	mockingProgress () . verificationStarted () ; Class
Distance : 11

120
Tree	verificationStarted ( mode , mockingProgress , mode ) ;
Code	verificationStarted ( mode , mockingProgress , mode ) ;
Distance : 7

121
Tree	mockingProgress . verificationStarted ( mode , new TypeInferenceMode.NEITHER () ) ;
Code	mockingProgress . verificationStarted ( mode , new TypeInferenceMode.NEITHER () ) ;
Distance : 7

122
Tree	verificationStarted () ; notifyListeners
Code	verificationStarted () ; notifyListeners
Distance : 12

123
Tree	verificationStarted () ; class
Code	verificationStarted () ; class
Distance : 12

124
Tree	verificationStarted () ; array
Code	verificationStarted () ; array
Distance : 12

125
Tree	mock . verificationStarted ( false ) ;
Code	mock . verificationStarted ( false ) ;
Distance : 8

126
Tree	mockingProgress . verificationStarted ( super(); ) ;
Code	mockingProgress . verificationStarted ( super(); ) ;
Distance : 7

127
Tree	verificationStarted ( verificationStarted () , mode ) ;
Code	verificationStarted ( verificationStarted () , mode ) ;
Distance : 7

128
Tree	mockingProgress . verificationStarted ( mode , false ) ;
Code	mockingProgress . verificationStarted ( mode , false ) ;
Distance : 6

129
Tree	mock = mockingProgress ;
Code	mock = mockingProgress ;
Distance : 11

130
Tree	verificationStarted ( mode , NUMBER_CONSTANT ) ; Class
Code	verificationStarted ( mode , NUMBER_CONSTANT ) ; Class
Distance : 9

131
Tree	mockingProgress = verificationStarted ( mode ) ;
Code	mockingProgress = verificationStarted ( mode ) ;
Distance : 7

132
Tree	verificationStarted ( mode . verificationStarted () , mockingProgress ) ;
Code	verificationStarted ( mode . verificationStarted () , mockingProgress ) ;
Distance : 8

133
Tree	mockingProgress . verificationStarted ( null ) ;
Code	mockingProgress . verificationStarted ( null ) ;
Distance : 7

134
Tree	mock . verificationStarted ( this , mode ) ;
Code	mock . verificationStarted ( this , mode ) ;
Distance : 6

135
Tree	verificationStarted ( false ) ; Test
Code	verificationStarted ( false ) ; Test
Distance : 10

136
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 , mode ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 , mode ) ;
Distance : 5

137
Tree	mockingProgress () . verificationStarted ( mode ) ;
Code	mockingProgress () . verificationStarted ( mode ) ;
Distance : 7

138
Tree	verificationStarted ( mockingProgress . verificationStarted () , mode . verificationStarted () ) ;
Code	verificationStarted ( mockingProgress . verificationStarted () , mode . verificationStarted () ) ;
Distance : 9

139
Tree	mode . verificationStarted ( mode . verificationStarted () ) ;
Code	mode . verificationStarted ( mode . verificationStarted () ) ;
Distance : 8

140
Tree	mockingProgress = mock . verificationStarted ( mode ) ;
Code	mockingProgress = mock . verificationStarted ( mode ) ;
Distance : 8

141
Tree	mode = verificationStarted ( mode ) ;
Code	mode = verificationStarted ( mode ) ;
Distance : 8

142
Tree	this . mockingProgress = mockingProgress ;
Code	this . mockingProgress = mockingProgress ;
Distance : 11

143
Tree	mockingProgress . verificationStarted ( mode , new Verification.EXPLICIT () ) ;
Code	mockingProgress . verificationStarted ( mode , new Verification.EXPLICIT () ) ;
Distance : 7

144
Tree	mockingProgress . verificationStarted ( mode , new rhs.b () ) ;
Code	mockingProgress . verificationStarted ( mode , new rhs.b () ) ;
Distance : 7

145
Tree	mockingProgress . verificationStarted ( mode , mode ) ;
Code	mockingProgress . verificationStarted ( mode , mode ) ;
Distance : 5

146
Tree	verificationStarted ( mode , mode ) ;
Code	verificationStarted ( mode , mode ) ;
Distance : 7

147
Tree	mockingProgress = true ;
Code	mockingProgress = true ;
Distance : 11

148
Tree	mode . verificationStarted ( this , mode ) ;
Code	mode . verificationStarted ( this , mode ) ;
Distance : 6

149
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

150
Tree	Color.BLUE . verificationStarted ( mode , mockingProgress ) ;
Code	Color.BLUE . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

151
Tree	CodePrinter.Builder . verificationStarted ( mode , mockingProgress ) ;
Code	CodePrinter.Builder . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

152
Tree	mockingProgress = new MockAwareVerificationMode ( mode ) ;
Code	mockingProgress = new MockAwareVerificationMode ( mode ) ;
Distance : 6

153
Tree	verificationStarted ( mode , STRING_CONSTANT , mock ) ;
Code	verificationStarted ( mode , STRING_CONSTANT , mock ) ;
Distance : 8

154
Tree	mockingProgress . mockingProgress ( mode ) ;
Code	mockingProgress . mockingProgress ( mode ) ;
Distance : 7

155
Tree	mode . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Code	mode . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Distance : 6

156
Tree	mode . verificationStarted ( null ) ;
Code	mode . verificationStarted ( null ) ;
Distance : 8

157
Tree	mockingProgress = mode . verificationStarted ( mode ) ;
Code	mockingProgress = mode . verificationStarted ( mode ) ;
Distance : 8

158
Tree	mock ( mode ) ;
Code	mock ( mode ) ;
Distance : 9

159
Tree	verificationStarted ( mode , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress ) ;
Distance : 8

160
Tree	mode . verificationStarted ( new mode () ) ;
Code	mode . verificationStarted ( new mode () ) ;
Distance : 6

161
Tree	verificationStarted ( mode , mockingProgress , mock ) ;
Code	verificationStarted ( mode , mockingProgress , mock ) ;
Distance : 8

162
Tree	mockingProgress . verificationStarted ( mode , STRING_CONSTANT , mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , STRING_CONSTANT , mode . verificationStarted () ) ;
Distance : 7

163
Tree	mockingProgress = new MockAwareVerificationMode ( mockingProgress ) ;
Code	mockingProgress = new MockAwareVerificationMode ( mockingProgress ) ;
Distance : 7

164
Tree	mockingProgress . verificationStarted ( false ) ;
Code	mockingProgress . verificationStarted ( false ) ;
Distance : 7

165
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 , mode ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 , mode ) ;
Distance : 5

166
Tree	verificationStarted ( mode , STRING_CONSTANT , mode ) ;
Code	verificationStarted ( mode , STRING_CONSTANT , mode ) ;
Distance : 7

167
Tree	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Distance : 8

168
Tree	new mockingProgress () . verificationStarted ( mode ) ;
Code	new mockingProgress () . verificationStarted ( mode ) ;
Distance : 8

169
Tree	mockingProgress = mode ;
Code	mockingProgress = mode ;
Distance : 10

170
Tree	verificationStarted ( verificationStarted () , mode ) ; Class
Code	verificationStarted ( verificationStarted () , mode ) ; Class
Distance : 8

171
Tree	mockingProgress = mockingProgress ;
Code	mockingProgress = mockingProgress ;
Distance : 11

172
Tree	this . mode . verificationStarted ( mode ) ;
Code	this . mode . verificationStarted ( mode ) ;
Distance : 8

173
Tree	mockingProgress = false ;
Code	mockingProgress = false ;
Distance : 11

174
Tree	mockingProgress . verificationStarted ( true ) ;
Code	mockingProgress . verificationStarted ( true ) ;
Distance : 7

175
Tree	mockingProgress = mock ;
Code	mockingProgress = mock ;
Distance : 10

176
Tree	verificationStarted ( mode . verificationStarted () ) ;
Code	verificationStarted ( mode . verificationStarted () ) ;
Distance : 9

177
Tree	mock . verificationStarted ( mode ) ;
Code	mock . verificationStarted ( mode ) ;
Distance : 7

178
Tree	verificationStarted ( mode . verificationStarted () , mode ) ;
Code	verificationStarted ( mode . verificationStarted () , mode ) ;
Distance : 7

179
Tree	this . mode = mode ;
Code	this . mode = mode ;
Distance : 10

180
Tree	mockingProgress . verificationStarted ( mode , mode , new mockingProgress () ) ;
Code	mockingProgress . verificationStarted ( mode , mode , new mockingProgress () ) ;
Distance : 7

181
Tree	mock = new MockAwareVerificationMode ( mode ) ;
Code	mock = new MockAwareVerificationMode ( mode ) ;
Distance : 7

182
Tree	new mode () . verificationStarted ( mode ) ;
Code	new mode () . verificationStarted ( mode ) ;
Distance : 9

183
Tree	verificationStarted ( mode , mock ) ;
Code	verificationStarted ( mode , mock ) ;
Distance : 8

184
Tree	mock . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Code	mock . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Distance : 6

185
Tree	verificationStarted ( mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mockingProgress , mockingProgress ) ;
Distance : 8

186
Tree	mode . verificationStarted () ;
Code	mode . verificationStarted () ;
Distance : 10

187
Tree	new mode () . verificationStarted () ;
Code	new mode () . verificationStarted () ;
Distance : 11

188
Tree	mockingProgress ( mockingProgress ) ;
Code	mockingProgress ( mockingProgress ) ;
Distance : 9

189
Tree	mockingProgress . verificationStarted ( ( mock ) null ) ;
Code	mockingProgress . verificationStarted ( ( mock ) null ) ;
Distance : 5

190
Tree	verificationStarted ( mockingProgress , NUMBER_CONSTANT ) ;
Code	verificationStarted ( mockingProgress , NUMBER_CONSTANT ) ;
Distance : 8

191
Tree	verificationStarted ( mockingProgress , mockingProgress , false ) ;
Code	verificationStarted ( mockingProgress , mockingProgress , false ) ;
Distance : 8

192
Tree	mock . verificationStarted ( mode . verificationStarted () ) ;
Code	mock . verificationStarted ( mode . verificationStarted () ) ;
Distance : 8

193
Tree	mock . verificationStarted ( mode , STRING_CONSTANT , mockingProgress . verificationStarted () ) ;
Code	mock . verificationStarted ( mode , STRING_CONSTANT , mockingProgress . verificationStarted () ) ;
Distance : 9

194
Tree	verificationStarted ( mockingProgress . verificationStarted () , mode ) ;
Code	verificationStarted ( mockingProgress . verificationStarted () , mode ) ;
Distance : 7

195
Tree	mock . verificationStarted ( mode , new MockAwareVerificationMode () ) ;
Code	mock . verificationStarted ( mode , new MockAwareVerificationMode () ) ;
Distance : 8

196
Tree	verificationStarted ( mock . verificationStarted () , mode . verificationStarted () ) ;
Code	verificationStarted ( mock . verificationStarted () , mode . verificationStarted () ) ;
Distance : 9

197
Tree	verificationStarted ( mockingProgress , verificationStarted () ) ;
Code	verificationStarted ( mockingProgress , verificationStarted () ) ;
Distance : 8

198
Tree	verificationStarted ( mode . verificationStarted () ) ; Class
Code	verificationStarted ( mode . verificationStarted () ) ; Class
Distance : 10

199
Tree	verificationStarted ( mode , verificationStarted () ) ; Class
Code	verificationStarted ( mode , verificationStarted () ) ; Class
Distance : 9

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

1
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 7

2
Tree	container . recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Code	container . recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Distance : 12

3
Tree	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) ;
Distance : 10

4
Tree	return ( container ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

5
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () ) < container ;
Distance : 7

6
Tree	return ( returnTypeGenericMetadata ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) container ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

7
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Distance : 10

8
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () ) < container ;
Distance : 7

9
Tree	return ( returnTypeGenericMetadata ) container . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) container . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 10

10
Tree	return getMock ( returnTypeGenericMetadata , getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( returnTypeGenericMetadata , getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

11
Tree	container . recordDeepStubAnswer ( returnTypeGenericMetadata ) && container ( returnTypeGenericMetadata )
Code	container . recordDeepStubAnswer ( returnTypeGenericMetadata ) && container ( returnTypeGenericMetadata )
Distance : 13

12
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

13
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < returnTypeGenericMetadata ;
Distance : 8

14
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 7

15
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

16
Tree	return ( double ) returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( double ) returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

17
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

18
Tree	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata , container ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata , container ) ;
Distance : 8

19
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 7

20
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

21
Tree	{ return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Code	{ return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Distance : 9

22
Tree	{ return ( container ) ; return this ; }
Code	{ return ( container ) ; return this ; }
Distance : 14

23
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

24
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Distance : 8

25
Tree	return ( int [] ) getMock ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) getMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

26
Tree	return ( double [] ) getMock ( returnTypeGenericMetadata , container ) ;
Code	return ( double [] ) getMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

27
Tree	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 10

28
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

29
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) ;
Distance : 6

30
Tree	return ( int [] ) container ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) container ( returnTypeGenericMetadata , container ) ;
Distance : 10

31
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Distance : 9

32
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

33
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

34
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

35
Tree	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 10

36
Tree	invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

37
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Distance : 8

38
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && suffix ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && suffix ;
Distance : 9

39
Tree	return getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

40
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

41
Tree	return ( long [] ) getMock ( returnTypeGenericMetadata , container ) ;
Code	return ( long [] ) getMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

42
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && osVersion ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && osVersion ;
Distance : 9

43
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

44
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) && container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) && container ( returnTypeGenericMetadata ) ;
Distance : 10

45
Tree	return container . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

46
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 5

47
Tree	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata ) ;
Distance : 11

48
Tree	return getMock ( returnTypeGenericMetadata ) . container ;
Code	return getMock ( returnTypeGenericMetadata ) . container ;
Distance : 10

49
Tree	{ return ( invocation ) ; return this ; }
Code	{ return ( invocation ) ; return this ; }
Distance : 13

50
Tree	return ( long [] ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( long [] ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 10

51
Tree	return ( container ) container . ) ( returnTypeGenericMetadata ) ;
Code	return ( container ) container . ) ( returnTypeGenericMetadata ) ;
Distance : 10

52
Tree	return recordDeepStubAnswer ( container , container ) ;
Code	return recordDeepStubAnswer ( container , container ) ;
Distance : 9

53
Tree	return recordDeepStubAnswer ( container , container , false ) ;
Code	return recordDeepStubAnswer ( container , container , false ) ;
Distance : 9

54
Tree	return container . recordDeepStubAnswer ( NUMBER_CONSTANT / TokenType.STRING ) < container ;
Code	return container . recordDeepStubAnswer ( NUMBER_CONSTANT / TokenType.STRING ) < container ;
Distance : 11

55
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 6

56
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( NUMBER_CONSTANT / TokenType.STRING ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( NUMBER_CONSTANT / TokenType.STRING ) < container ;
Distance : 11

57
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

58
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < container ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 8

59
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

60
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) ;
Distance : 8

61
Tree	return ( double [] ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( double [] ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 10

62
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

63
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

64
Tree	{ recordDeepStubAnswer ( returnTypeGenericMetadata ) ; return false ; }
Code	{ recordDeepStubAnswer ( returnTypeGenericMetadata ) ; return false ; }
Distance : 12

65
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

66
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ;
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ;
Distance : 11

67
Tree	getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata )
Code	getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata )
Distance : 9

68
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

69
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 6

70
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Distance : 10

71
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

72
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return ( container ) getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 10

73
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

74
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

75
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) ;
Distance : 6

76
Tree	return recordDeepStubAnswer ( container ) < container ;
Code	return recordDeepStubAnswer ( container ) < container ;
Distance : 10

77
Tree	return ( returnTypeGenericMetadata ) container . getMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) container . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

78
Tree	{ return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Code	{ return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Distance : 9

79
Tree	return ( int [] ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( int [] ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 10

80
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

81
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Distance : 6

82
Tree	return recordDeepStubAnswer ( container ) . container ;
Code	return recordDeepStubAnswer ( container ) . container ;
Distance : 10

83
Tree	{ recordDeepStubAnswer ( returnTypeGenericMetadata ) ; return NUMBER_CONSTANT ; }
Code	{ recordDeepStubAnswer ( returnTypeGenericMetadata ) ; return NUMBER_CONSTANT ; }
Distance : 12

84
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ;
Distance : 9

85
Tree	return ( int [] ) container . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( int [] ) container . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 11

86
Tree	return getMock ( returnTypeGenericMetadata , container , false ) ;
Code	return getMock ( returnTypeGenericMetadata , container , false ) ;
Distance : 9

87
Tree	returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Code	returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Distance : 12

88
Tree	return ( container ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

89
Tree	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

90
Tree	container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

91
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container , false ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container , false ) ;
Distance : 8

92
Tree	return ( returnTypeGenericMetadata ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

93
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Distance : 13

94
Tree	{ return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Code	{ return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Distance : 10

95
Tree	invocation . recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Code	invocation . recordDeepStubAnswer ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Distance : 12

96
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Distance : 7

97
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

98
Tree	{ recordDeepStubAnswer ( invocation ) ; return false ; }
Code	{ recordDeepStubAnswer ( invocation ) ; return false ; }
Distance : 12

99
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

100
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) ;
Distance : 6

101
Tree	return getMock ( returnTypeGenericMetadata , container ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( returnTypeGenericMetadata , container ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

102
Tree	getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Code	getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata )
Distance : 12

103
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () ) < container ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () ) < container ;
Distance : 7

104
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + this . container . recordDeepStubAnswer ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

105
Tree	container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 9

106
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

107
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

108
Tree	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) ;
Distance : 6

109
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

110
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

111
Tree	return recordDeepStubAnswer ( container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

112
Tree	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

113
Tree	{ recordDeepStubAnswer ( returnTypeGenericMetadata ) ; return this ; }
Code	{ recordDeepStubAnswer ( returnTypeGenericMetadata ) ; return this ; }
Distance : 12

114
Tree	returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

115
Tree	return ( container ) container . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) container . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 10

116
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 10

117
Tree	{ getMock ( returnTypeGenericMetadata ) ; return this ; }
Code	{ getMock ( returnTypeGenericMetadata ) ; return this ; }
Distance : 13

118
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

119
Tree	return container . getMock ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

120
Tree	return getMock ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

121
Tree	return container . recordDeepStubAnswer ( NUMBER_CONSTANT / OPTION.semiColonRequired ) < container ;
Code	return container . recordDeepStubAnswer ( NUMBER_CONSTANT / OPTION.semiColonRequired ) < container ;
Distance : 11

122
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

123
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 8

124
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

125
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / options.removeUnusedPrototypeProperties ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / options.removeUnusedPrototypeProperties ) ;
Distance : 10

126
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ;
Distance : 9

127
Tree	return ( returnTypeGenericMetadata ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

128
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

129
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Distance : 8

130
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

131
Tree	getMock ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata )
Code	getMock ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata )
Distance : 12

132
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

133
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Distance : 13

134
Tree	{ getMock ( returnTypeGenericMetadata ) ; return false ; }
Code	{ getMock ( returnTypeGenericMetadata ) ; return false ; }
Distance : 13

135
Tree	return ( container ) container ( returnTypeGenericMetadata , container , false ) ;
Code	return ( container ) container ( returnTypeGenericMetadata , container , false ) ;
Distance : 10

136
Tree	return ( int ) returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( int ) returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

137
Tree	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata , container , false ) ;
Code	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata , container , false ) ;
Distance : 10

138
Tree	return container . recordDeepStubAnswer ( NUMBER_CONSTANT / mant.length ) < container ;
Code	return container . recordDeepStubAnswer ( NUMBER_CONSTANT / mant.length ) < container ;
Distance : 11

139
Tree	return ( container ) getMock ( returnTypeGenericMetadata , container , false ) ;
Code	return ( container ) getMock ( returnTypeGenericMetadata , container , false ) ;
Distance : 10

140
Tree	return ( returnTypeGenericMetadata ) container . newDeepStubMock ( returnTypeGenericMetadata ) ;
Code	return ( returnTypeGenericMetadata ) container . newDeepStubMock ( returnTypeGenericMetadata ) ;
Distance : 10

141
Tree	return container . getMock ( returnTypeGenericMetadata . getMock () ) < container ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock () ) < container ;
Distance : 7

142
Tree	return ( container ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( container ) container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 10

143
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

144
Tree	{ recordDeepStubAnswer ( container ) ; return false ; }
Code	{ recordDeepStubAnswer ( container ) ; return false ; }
Distance : 13

145
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / options.removeUnusedPrototypeProperties ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / options.removeUnusedPrototypeProperties ) ;
Distance : 10

146
Tree	return getMock ( returnTypeGenericMetadata , container ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

147
Tree	return ( container ) container ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return ( container ) container ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 10

148
Tree	return ( double ) returnTypeGenericMetadata . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( double ) returnTypeGenericMetadata . ) ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

149
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

150
Tree	return ( container ) container ( returnTypeGenericMetadata , container ) ;
Code	return ( container ) container ( returnTypeGenericMetadata , container ) ;
Distance : 10

151
Tree	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

152
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

153
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 7

154
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . returnTypeGenericMetadata ;
Distance : 10

155
Tree	return getMock ( returnTypeGenericMetadata ) < container ;
Code	return getMock ( returnTypeGenericMetadata ) < container ;
Distance : 10

156
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 7

157
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) ) ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

158
Tree	return ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata )
Code	return ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata )
Distance : 11

159
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 8

160
Tree	return getMock ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Code	return getMock ( returnTypeGenericMetadata . newDeepStubMock () , container ) < container ;
Distance : 9

161
Tree	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata , container ) ;
Code	return ( returnTypeGenericMetadata ) container ( returnTypeGenericMetadata , container ) ;
Distance : 9

162
Tree	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Distance : 10

163
Tree	getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata )
Code	getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata )
Distance : 12

164
Tree	return ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	return ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 7

165
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 9

166
Tree	return ( container ) getMock ( returnTypeGenericMetadata , container ) ;
Code	return ( container ) getMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

167
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

168
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Distance : 6

169
Tree	return ( int ) returnTypeGenericMetadata . newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( int ) returnTypeGenericMetadata . newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

170
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata , this . container ) ) ;
Distance : 10

171
Tree	return getMock ( returnTypeGenericMetadata , container ) < container ;
Code	return getMock ( returnTypeGenericMetadata , container ) < container ;
Distance : 9

172
Tree	getMock ( getMock ( returnTypeGenericMetadata ) , container )
Code	getMock ( getMock ( returnTypeGenericMetadata ) , container )
Distance : 9

173
Tree	return container . getMock ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

174
Tree	return ( container ) container . getMock ( returnTypeGenericMetadata ) ;
Code	return ( container ) container . getMock ( returnTypeGenericMetadata ) ;
Distance : 10

175
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

176
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 7

177
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && annotationType ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && annotationType ;
Distance : 9

178
Tree	{ getMock ( returnTypeGenericMetadata ) ; return NUMBER_CONSTANT ; }
Code	{ getMock ( returnTypeGenericMetadata ) ; return NUMBER_CONSTANT ; }
Distance : 13

179
Tree	return container . getMock ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Code	return container . getMock ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Distance : 13

180
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && suffix ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) && suffix ;
Distance : 9

181
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 9

182
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

183
Tree	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata , container , false ) ;
Code	return ( returnTypeGenericMetadata ) getMock ( returnTypeGenericMetadata , container , false ) ;
Distance : 10

184
Tree	{ recordDeepStubAnswer ( container ) ; return NUMBER_CONSTANT ; }
Code	{ recordDeepStubAnswer ( container ) ; return NUMBER_CONSTANT ; }
Distance : 13

185
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 6

186
Tree	return getMock ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

187
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , container ) , container ) ;
Distance : 6

188
Tree	getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Code	getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container )
Distance : 8

189
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Distance : 9

190
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , false ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata , false ) ;
Distance : 8

191
Tree	{ return ( invocation ) ; return NUMBER_CONSTANT ; }
Code	{ return ( invocation ) ; return NUMBER_CONSTANT ; }
Distance : 13

192
Tree	return ( container ) container ( returnTypeGenericMetadata ) ;
Code	return ( container ) container ( returnTypeGenericMetadata ) ;
Distance : 12

193
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata + this . container . getMock ( CHAR_CONS , CHAR_CONS ) ) < container ;
Distance : 13

194
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 8

195
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

196
Tree	{ return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Code	{ return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Distance : 9

197
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / TimeUnit.DAYS ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / TimeUnit.DAYS ) ;
Distance : 10

198
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

199
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / TimeUnit.DAYS ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , NUMBER_CONSTANT / TimeUnit.DAYS ) ;
Distance : 10

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return return ( this , Collection ) ; }
Code	{ return return ( this , Collection ) ; }
Distance : 6

1
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

2
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Distance : 7

3
Tree	{ reportMatcher () ; Collection = returnList ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher () ; Collection = returnList ( Any.ANY ) . returnList () ; }
Distance : 11

4
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; initializeRegistry }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; initializeRegistry }
Distance : 7

5
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

6
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 11

7
Tree	{ return Collection ; } array
Code	{ return Collection ; } array
Distance : 3

8
Tree	{ return ( Collection ) Collection . returnList ( Collection ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

9
Tree	{ return ( Collection ) reportMatcher ( Collection , Collection . returnList () - NUMBER_CONSTANT ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection , Collection . returnList () - NUMBER_CONSTANT ) ; }
Distance : 13

10
Tree	{ return ( Collection ) Collection . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) Collection . reportMatcher ( Collection ) ; }
Distance : 9

11
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 8

12
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

13
Tree	{ ( ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ ( ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

14
Tree	{ return reportMatcher ( Collection ) . reportMatcher () ; }
Code	{ return reportMatcher ( Collection ) . reportMatcher () ; }
Distance : 6

15
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 6

16
Tree	{ Collection = Collection . returnList ( Collection ) ; return null ; }
Code	{ Collection = Collection . returnList ( Collection ) ; return null ; }
Distance : 11

17
Tree	{ return ( Collection ) Collection . returnList () ; }
Code	{ return ( Collection ) Collection . returnList () ; }
Distance : 6

18
Tree	{ return ( Collection ) Collection . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

19
Tree	{ super ( Collection ) ; returnList () ; }
Code	{ super ( Collection ) ; returnList () ; }
Distance : 6

20
Tree	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 8

21
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; returnList () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; returnList () ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 8

23
Tree	{ return Collection . reportMatcher ( Collection ) ; }
Code	{ return Collection . reportMatcher ( Collection ) ; }
Distance : 6

24
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; super }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; super }
Distance : 12

25
Tree	{ return ( Collection ) reportMatcher ( Collection , Any.ANY ( Any.ANY ) ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection , Any.ANY ( Any.ANY ) ) ; }
Distance : 12

26
Tree	{ super ( Collection . returnList ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . returnList ( Collection ) ) ; returnList () ; }
Distance : 11

27
Tree	{ return ( Collection ) reportMatcher () ; } Class
Code	{ return ( Collection ) reportMatcher () ; } Class
Distance : 5

28
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Distance : 11

29
Tree	{ return ( Collection ) reportMatcher ( Any.ANY , Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY , Collection . returnList () ) ; }
Distance : 11

30
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } Class
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } Class
Distance : 10

31
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

32
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 7

33
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

34
Tree	{ return ( Collection ) returnList () ; }
Code	{ return ( Collection ) returnList () ; }
Distance : 4

35
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Distance : 7

36
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

37
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

38
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

39
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } Class
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } Class
Distance : 8

40
Tree	{ return ( Collection ) reportMatcher ( this , Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( this , Collection ) ; }
Distance : 9

41
Tree	{ reportMatcher ( Any.ANY ) ; return this . Collection ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return this . Collection ; } Class
Distance : 9

42
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

43
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Distance : 9

44
Tree	{ Collection . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ Collection . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 9

45
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

46
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

47
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

48
Tree	{
Code	{
Distance : 5

49
Tree	{ return ( Collection ) reportMatcher ( Collection , returnList ( Any.ANY ) ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection , returnList ( Any.ANY ) ) ; }
Distance : 12

50
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

51
Tree	{ return ( Collection ) reportMatcher ( Collection ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . reportMatcher () ; }
Distance : 9

52
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Distance : 7

53
Tree	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Distance : 9

54
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Distance : 7

55
Tree	{ return ( Collection ) Collection . returnList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Collection ) Collection . returnList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

56
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

57
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; initializeRegistry }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; initializeRegistry }
Distance : 7

58
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

59
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 6

60
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

61
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

62
Tree	{ reportMatcher () ; Collection = reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher () ; Collection = reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 11

63
Tree	{ return this . Collection ; }
Code	{ return this . Collection ; }
Distance : 3

64
Tree	{ return ( Collection ) Collection . returnList () ; }
Code	{ return ( Collection ) Collection . returnList () ; }
Distance : 6

65
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 3

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

67
Tree	{ return ( Collection ) Collection . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

68
Tree	{ return reportMatcher ( Collection ) . returnList () ; }
Code	{ return reportMatcher ( Collection ) . returnList () ; }
Distance : 6

69
Tree	{ Collection . reportMatcher ( Collection ) ; return null ; }
Code	{ Collection . reportMatcher ( Collection ) ; return null ; }
Distance : 9

70
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; Object }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; Object }
Distance : 12

71
Tree	{ return ( Collection ) returnList ( Any.ANY , Collection . returnList () ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY , Collection . returnList () ) ; }
Distance : 11

72
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; static }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; static }
Distance : 12

73
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

74
Tree	{ return ( Collection ) Collection . returnList ( returnList ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Collection ) Collection . returnList ( returnList ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

75
Tree	{ return ( Collection ) reportMatcher ( Collection , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

77
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

78
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; }
Distance : 11

79
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

80
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Distance : 9

81
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 6

82
Tree	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

83
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Distance : 7

84
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; reportMatcher () ; }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; reportMatcher () ; }
Distance : 11

85
Tree	{ Collection . return ( Any.ANY ) ; return null ; }
Code	{ Collection . return ( Any.ANY ) ; return null ; }
Distance : 8

86
Tree	private
Code	private
Distance : 6

87
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

88
Tree	{ reportMatcher ( Any.ANY ) ; return this . Collection ; }
Code	{ reportMatcher ( Any.ANY ) ; return this . Collection ; }
Distance : 8

89
Tree	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . reportMatcher () ) ; }
Distance : 9

90
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

91
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

92
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

93
Tree	{ return Collection . Collection ( Collection ) ; }
Code	{ return Collection . Collection ( Collection ) ; }
Distance : 6

94
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Class
Distance : 8

95
Tree	{ return Collection ; }
Code	{ return Collection ; }
Distance : 2

96
Tree	{ return ( Collection ) Collection . returnList () ; } Class
Code	{ return ( Collection ) Collection . returnList () ; } Class
Distance : 7

97
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

98
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 6

99
Tree	{ return ( Collection ) Collection . reportMatcher ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Collection ) Collection . reportMatcher ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

100
Tree	{ return ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ return ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 6

101
Tree	{ return Collection ; } notifyListeners
Code	{ return Collection ; } notifyListeners
Distance : 3

102
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 6

103
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

104
Tree	{ return reportMatcher ( this , Collection ) ; }
Code	{ return reportMatcher ( this , Collection ) ; }
Distance : 6

105
Tree	{ Collection . reportMatcher ( Collection , STRING_CONSTANT ) ; return null ; }
Code	{ Collection . reportMatcher ( Collection , STRING_CONSTANT ) ; return null ; }
Distance : 11

106
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

107
Tree	{ Collection . returnList ( Any.ANY ) ; return null ; }
Code	{ Collection . returnList ( Any.ANY ) ; return null ; }
Distance : 9

108
Tree	{ return Collection . returnList ( Collection ) ; } Class
Code	{ return Collection . returnList ( Collection ) ; } Class
Distance : 7

109
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; returnList () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; returnList () ; }
Distance : 11

110
Tree	{ return ( Collection ) this . Collection . reportMatcher () ; }
Code	{ return ( Collection ) this . Collection . reportMatcher () ; }
Distance : 8

111
Tree	{ return reportMatcher ( Collection ) . returnList () ; }
Code	{ return reportMatcher ( Collection ) . returnList () ; }
Distance : 6

112
Tree	{ return ( Collection ) returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Collection ) ; }
Distance : 7

113
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) ; }
Distance : 7

114
Tree	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; initializeRegistry }
Code	{ super ( Collection . reportMatcher ( Collection ) ) ; returnList () ; initializeRegistry }
Distance : 12

115
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

116
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

117
Tree	{ return ( Collection ) this . Collection . returnList () ; }
Code	{ return ( Collection ) this . Collection . returnList () ; }
Distance : 8

118
Tree	{ return ( Collection ) returnList ( Collection . returnList () ) ; }
Code	{ return ( Collection ) returnList ( Collection . returnList () ) ; }
Distance : 9

119
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

120
Tree	{ super ( Collection ) ; reportMatcher () ; }
Code	{ super ( Collection ) ; reportMatcher () ; }
Distance : 6

121
Tree	{ Collection . reportMatcher ( Collection , STRING_CONSTANT ) ; return return; ; }
Code	{ Collection . reportMatcher ( Collection , STRING_CONSTANT ) ; return return; ; }
Distance : 11

122
Tree	{ return ( Any.ANY ) ; return this . Collection ; }
Code	{ return ( Any.ANY ) ; return this . Collection ; }
Distance : 8

123
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Distance : 7

124
Tree	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection . returnList () ) ; }
Distance : 9

125
Tree	protected
Code	protected
Distance : 6

126
Tree	{ return ( Collection ) returnList ( Collection , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( Collection ) returnList ( Collection , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

127
Tree	{ reportMatcher () ; Collection = reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher () ; Collection = reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 11

128
Tree	{ return Collection ; } class
Code	{ return Collection ; } class
Distance : 3

129
Tree	{ returnList () ; return null ; }
Code	{ returnList () ; return null ; }
Distance : 5

130
Tree	{ super(); reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

131
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

132
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

133
Tree	{ Collection . reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ Collection . reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 9

134
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Distance : 12

135
Tree	{ return { ( Any.ANY ) . returnList () ; }
Code	{ return { ( Any.ANY ) . returnList () ; }
Distance : 6

136
Tree	{ return ( Collection ) reportMatcher ( this , Collection ) ; } Class
Code	{ return ( Collection ) reportMatcher ( this , Collection ) ; } Class
Distance : 10

137
Tree	{ Collection . return ( Collection ) ; return null ; }
Code	{ Collection . return ( Collection ) ; return null ; }
Distance : 8

138
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

139
Tree	{ return ( Collection ) returnList ( this , Collection ) ; }
Code	{ return ( Collection ) returnList ( this , Collection ) ; }
Distance : 9

140
Tree	{ return ( Collection ) reportMatcher ( Any.ANY , Collection . reportMatcher () ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY , Collection . reportMatcher () ) ; }
Distance : 11

141
Tree	{ continue; reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

142
Tree	{ Collection . returnList ( Collection ) ; return null ; }
Code	{ Collection . returnList ( Collection ) ; return null ; }
Distance : 9

143
Tree	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

144
Tree	{ return; reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ return; reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

145
Tree	{ ( ( Any.ANY ) ; returnList () ; }
Code	{ ( ( Any.ANY ) ; returnList () ; }
Distance : 6

146
Tree	{ Collection . return ( Collection , STRING_CONSTANT ) ; return null ; }
Code	{ Collection . return ( Collection , STRING_CONSTANT ) ; return null ; }
Distance : 10

147
Tree	{ super ( Collection ) ; returnList () ; }
Code	{ super ( Collection ) ; returnList () ; }
Distance : 6

148
Tree	{ return ( Collection ) reportMatcher ( Any.ANY , Collection . returnList () ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY , Collection . returnList () ) ; }
Distance : 11

149
Tree	{ return ( Collection ) this . Collection . returnList () ; }
Code	{ return ( Collection ) this . Collection . returnList () ; }
Distance : 8

150
Tree	{ Collection . returnList ( Collection , STRING_CONSTANT ) ; return null ; }
Code	{ Collection . returnList ( Collection , STRING_CONSTANT ) ; return null ; }
Distance : 11

151
Tree	{ return { ( Collection ) . returnList () ; }
Code	{ return { ( Collection ) . returnList () ; }
Distance : 6

152
Tree	{ Collection . reportMatcher ( Collection ) ; return return; ; }
Code	{ Collection . reportMatcher ( Collection ) ; return return; ; }
Distance : 9

153
Tree	{ return ( Collection ) Collection . reportMatcher () ; }
Code	{ return ( Collection ) Collection . reportMatcher () ; }
Distance : 6

154
Tree	{ return ( Collection ) Collection . returnList ( Collection ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

155
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; returnList () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; returnList () ; }
Distance : 11

156
Tree	{ return ( Collection ) reportMatcher ( Collection , Collection . reportMatcher () - NUMBER_CONSTANT ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection , Collection . reportMatcher () - NUMBER_CONSTANT ) ; }
Distance : 13

157
Tree	{ return ( Collection ) returnList ( Collection ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Collection ) . returnList () ; }
Distance : 9

158
Tree	{ Collection = Collection . reportMatcher ( Collection ) ; return null ; }
Code	{ Collection = Collection . reportMatcher ( Collection ) ; return null ; }
Distance : 11

159
Tree	{ return ( Collection ) Collection . returnList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Collection ) Collection . returnList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

160
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) ; }
Distance : 7

161
Tree	{ return ( Collection ) reportMatcher ( this , Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( this , Collection ) ; }
Distance : 9

162
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 9

163
Tree	{ reportMatcher () ; Collection = ( ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher () ; Collection = ( ( Any.ANY ) . returnList () ; }
Distance : 11

164
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

165
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Distance : 9

166
Tree	{ return ( Collection ) Collection . reportMatcher ( Collection ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . reportMatcher ( Collection ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

167
Tree	{ returnList ( Any.ANY ) ; return this . Collection ; }
Code	{ returnList ( Any.ANY ) ; return this . Collection ; }
Distance : 8

168
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

169
Tree	{ return () ; return null ; }
Code	{ return () ; return null ; }
Distance : 4

170
Tree	{ return ( Collection ) Collection . returnList ( Collection ) . returnList ( returnList ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) . returnList ( returnList ( Any.ANY ) , super ) ; }
Distance : 19

171
Tree	{ return this . Collection ; } array
Code	{ return this . Collection ; } array
Distance : 4

172
Tree	{ return this . Collection ; } class
Code	{ return this . Collection ; } class
Distance : 4

173
Tree	{ return Collection . returnList ( Collection ) ; }
Code	{ return Collection . returnList ( Collection ) ; }
Distance : 6

174
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

175
Tree	{ Collection = Collection . reportMatcher ( Collection ) ; return null ; }
Code	{ Collection = Collection . reportMatcher ( Collection ) ; return null ; }
Distance : 11

176
Tree	{ return this . Collection ; } notifyListeners
Code	{ return this . Collection ; } notifyListeners
Distance : 4

177
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

178
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

179
Tree	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) . returnList () ; }
Distance : 9

180
Tree	{ super ( Collection ) ; returnList () ; } Class
Code	{ super ( Collection ) ; returnList () ; } Class
Distance : 7

181
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 9

182
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

183
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

184
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 3

185
Tree	{ super(); reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

186
Tree	{ return ( Collection ) reportMatcher ( Collection , Collection . returnList () - NUMBER_CONSTANT ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection , Collection . returnList () - NUMBER_CONSTANT ) ; }
Distance : 13

187
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 3

188
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 4

189
Tree	public
Code	public
Distance : 6

190
Tree	{ return returnList ( this , Collection ) ; }
Code	{ return returnList ( this , Collection ) ; }
Distance : 6

191
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Distance : 10

192
Tree	{ return ( Collection ) Collection . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

193
Tree	{ return ( Collection ) Collection . returnList () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Collection ) Collection . returnList () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

194
Tree	{ Collection = Collection . reportMatcher ( Collection ) ; return return; ; }
Code	{ Collection = Collection . reportMatcher ( Collection ) ; return return; ; }
Distance : 11

195
Tree	{ return ( Collection ) returnList ( Collection , Collection . returnList () - NUMBER_CONSTANT ) ; }
Code	{ return ( Collection ) returnList ( Collection , Collection . returnList () - NUMBER_CONSTANT ) ; }
Distance : 13

196
Tree	{ return ( Collection ) this . Collection . returnList () ; } Class
Code	{ return ( Collection ) this . Collection . returnList () ; } Class
Distance : 9

197
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

198
Tree	{ return reportMatcher ( this , Collection ) ; } Class
Code	{ return reportMatcher ( this , Collection ) ; } Class
Distance : 7

199
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Distance : 9

1
Tree	{ super ( Collection ) ; returnList ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Collection ) ; returnList ( NUMBER_CONSTANT ) ; } Class
Distance : 13

2
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 11

3
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; null }
Distance : 9

4
Tree	{ return Collection ; } notifyListeners
Code	{ return Collection ; } notifyListeners
Distance : 13

5
Tree	{ return this . Collection ; } notifyListeners
Code	{ return this . Collection ; } notifyListeners
Distance : 13

6
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

7
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = Any.ANY ; }
Distance : 11

8
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; super }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; super }
Distance : 10

9
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

10
Tree	{ returnList ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Code	{ returnList ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Distance : 13

11
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; Collection = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; Collection = Any.ANY ; }
Distance : 12

12
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; return }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; return }
Distance : 10

13
Tree	{ return returnList ( Collection . returnList () ) ; }
Code	{ return returnList ( Collection . returnList () ) ; }
Distance : 9

14
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Collection ; }
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = true ; }
Distance : 11

16
Tree	{ return returnList ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 10

17
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = super(); ; }
Distance : 11

18
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Distance : 12

20
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 9

21
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ return Collection ; }
Code	{ return Collection ; }
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super = {} ; }
Distance : 11

24
Tree	{ reportMatcher ( Any.ANY ) ; Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = false ; }
Distance : 11

25
Tree	{ returnList ( Any.ANY ) ; return false ; }
Code	{ returnList ( Any.ANY ) ; return false ; }
Distance : 12

26
Tree	{ super ( Collection ) ; }
Code	{ super ( Collection ) ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; continue; }
Distance : 9

28
Tree	{ return returnList ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnList ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

29
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; throw }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = false ; }
Distance : 11

31
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Test
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = return; ; }
Distance : 11

33
Tree	{ super ( Collection ) ; } class
Code	{ super ( Collection ) ; } class
Distance : 12

34
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

35
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

36
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; } Class
Distance : 12

37
Tree	{ returnList ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Distance : 12

38
Tree	{ returnList ( Any.ANY ) . returnList () ; }
Code	{ returnList ( Any.ANY ) . returnList () ; }
Distance : 9

39
Tree	{ super ( Collection ) ; returnList () ; } Class
Code	{ super ( Collection ) ; returnList () ; } Class
Distance : 10

40
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; return }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; return }
Distance : 10

41
Tree	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

42
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = true ; }
Distance : 12

43
Tree	{ return returnList ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

44
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

45
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

46
Tree	{ return ( Collection ) returnList () ; }
Code	{ return ( Collection ) returnList () ; }
Distance : 8

47
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

48
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = false ; }
Distance : 11

50
Tree	{ Collection = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Collection = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

51
Tree	{ Collection = reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ Collection = reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

52
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; return = super ; }
Distance : 11

54
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 10

55
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super = super ; }
Distance : 11

57
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = true ; }
Distance : 11

58
Tree	{ Collection = returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ Collection = returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

59
Tree	{ super ( Collection ) ; returnList () ; }
Code	{ super ( Collection ) ; returnList () ; }
Distance : 9

60
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

61
Tree	{ return reportMatcher ( Collection . reportMatcher () ) ; }
Code	{ return reportMatcher ( Collection . reportMatcher () ) ; }
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

63
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

64
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

65
Tree	{ returnList ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Distance : 10

66
Tree	{ super ( Collection ) ; returnList ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Collection ) ; returnList ( NUMBER_CONSTANT ) ; } Test
Distance : 13

67
Tree	{ null reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 11

68
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

69
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

70
Tree	{ return Collection ; } class
Code	{ return Collection ; } class
Distance : 13

71
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 11

72
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; getMethodProxy }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; getMethodProxy }
Distance : 13

73
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

74
Tree	{ returnList ( Any.ANY ) . returnList () ; Collection = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . returnList () ; Collection = Any.ANY ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = Any.ANY ; }
Distance : 12

76
Tree	private
Code	private
Distance : 17

77
Tree	{ super(); }
Code	{ super(); }
Distance : 15

78
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

79
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; super }
Distance : 13

80
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

81
Tree	{ return returnList ( Any.ANY ) . < Collection > returnList () ; }
Code	{ return returnList ( Any.ANY ) . < Collection > returnList () ; }
Distance : 9

82
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = null ; }
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; return; }
Distance : 9

84
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Distance : 11

85
Tree	{ return returnList ( Collection . reportMatcher () ) ; }
Code	{ return returnList ( Collection . reportMatcher () ) ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

87
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Distance : 8

88
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

89
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

90
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

91
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 12

92
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

93
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

94
Tree	{ return reportMatcher ( Collection . returnList () ) ; }
Code	{ return reportMatcher ( Collection . returnList () ) ; }
Distance : 8

95
Tree	{ returnList ( Any.ANY ) ; Collection = true ; }
Code	{ returnList ( Any.ANY ) ; Collection = true ; }
Distance : 12

96
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } Test
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } Test
Distance : 11

97
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

98
Tree	{ returnList ( Any.ANY ) . returnList () ; this . Collection = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . returnList () ; this . Collection = Any.ANY ; }
Distance : 13

99
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Distance : 11

100
Tree	{ super ( Collection ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Collection ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = null ; }
Distance : 12

103
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

104
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

105
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

106
Tree	{ reportMatcher () ; Collection = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Collection = Any.ANY . reportMatcher () ; }
Distance : 10

107
Tree	{ Collection = returnList ( Any.ANY ) . returnList () ; }
Code	{ Collection = returnList ( Any.ANY ) . returnList () ; }
Distance : 9

108
Tree	{ return this . Collection ; } class
Code	{ return this . Collection ; } class
Distance : 13

109
Tree	{ returnList ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Code	{ returnList ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super = else ; }
Distance : 11

111
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

112
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

113
Tree	{ return Collection ; } array
Code	{ return Collection ; } array
Distance : 13

114
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

115
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = super(); ; }
Distance : 12

116
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; super }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; super }
Distance : 10

117
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

118
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = false ; }
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; if }
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; if }
Distance : 12

120
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

121
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = null ; }
Distance : 11

122
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

123
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

124
Tree	{ return this . Collection ; }
Code	{ return this . Collection ; }
Distance : 12

125
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnList () ; }
Distance : 7

126
Tree	{ return this . Collection ; } array
Code	{ return this . Collection ; } array
Distance : 13

127
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

128
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

129
Tree	{ return; }
Code	{ return; }
Distance : 15

130
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

131
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

132
Tree	{ returnList ( Any.ANY ) ; Collection = false ; }
Code	{ returnList ( Any.ANY ) ; Collection = false ; }
Distance : 12

133
Tree	{ returnList () ; Collection = Any.ANY . reportMatcher () ; }
Code	{ returnList () ; Collection = Any.ANY . reportMatcher () ; }
Distance : 11

134
Tree	{ returnList ( Any.ANY ) ; return true ; }
Code	{ returnList ( Any.ANY ) ; return true ; }
Distance : 12

135
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > returnList () ; }
Distance : 8

136
Tree	{ super ( Collection ) ; returnList ( NUMBER_CONSTANT ) ; }
Code	{ super ( Collection ) ; returnList ( NUMBER_CONSTANT ) ; }
Distance : 12

137
Tree	{ return returnList ( returnList ( Any.ANY ) ) ; }
Code	{ return returnList ( returnList ( Any.ANY ) ) ; }
Distance : 9

138
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; return }
Distance : 12

139
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; this . Collection = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; this . Collection = Any.ANY ; }
Distance : 13

140
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = false ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = Any.ANY ; }
Distance : 11

142
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

143
Tree	{ super ( Collection ) ; reportMatcher () ; }
Code	{ super ( Collection ) ; reportMatcher () ; }
Distance : 10

144
Tree	{ super ( Collection ) ; } array
Code	{ super ( Collection ) ; } array
Distance : 12

145
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

146
Tree	{ throw returnList ( Any.ANY ) ; }
Code	{ throw returnList ( Any.ANY ) ; }
Distance : 12

147
Tree	{ return ( Collection ) returnList () ; } Class
Code	{ return ( Collection ) returnList () ; } Class
Distance : 9

148
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 9

149
Tree	{ return ( Collection ) returnList () ; } Test
Code	{ return ( Collection ) returnList () ; } Test
Distance : 9

150
Tree	{ return returnList ( Any.ANY , Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY , Any.ANY ) . returnList () ; }
Distance : 8

151
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = continue; ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . Collection = continue; ; }
Distance : 12

152
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super(); }
Distance : 9

153
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Collection = null ; }
Distance : 11

154
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

155
Tree	{ return reportMatcher ( returnList ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnList ( Any.ANY ) ) ; }
Distance : 8

156
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Collection = true ; }
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

158
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

159
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

161
Tree	{ returnList () ; Collection = Any.ANY . returnList () ; }
Code	{ returnList () ; Collection = Any.ANY . returnList () ; }
Distance : 10

162
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

163
Tree	protected
Code	protected
Distance : 17

164
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

165
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

166
Tree	{
Code	{
Distance : 16

167
Tree	{ super ( Collection ) ; returnList () ; } Test
Code	{ super ( Collection ) ; returnList () ; } Test
Distance : 10

168
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

169
Tree	public
Code	public
Distance : 17

170
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

171
Tree	{ null }
Code	{ null }
Distance : 15

172
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

173
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

174
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 11

175
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

176
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

177
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Class
Distance : 13

178
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

179
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

180
Tree	{ continue; }
Code	{ continue; }
Distance : 15

181
Tree	{ returnList ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ returnList ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 12

182
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } Class
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } Class
Distance : 11

183
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 11

184
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 11

185
Tree	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; super }
Distance : 12

186
Tree	{ reportMatcher ( Any.ANY ) ; Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = true ; }
Distance : 11

187
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

188
Tree	{ reportMatcher () ; Collection = Any.ANY . returnList () ; }
Code	{ reportMatcher () ; Collection = Any.ANY . returnList () ; }
Distance : 9

189
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

190
Tree	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

191
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 10

192
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Collection = Any.ANY ; }
Distance : 11

193
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = Any.ANY ; }
Distance : 12

194
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

195
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Collection = true ; }
Distance : 12

196
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; this . Collection = Collection ; }
Distance : 13

197
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Test
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } Test
Distance : 13

198
Tree	{ super ( Collection ) ; } notifyListeners
Code	{ super ( Collection ) ; } notifyListeners
Distance : 12

199
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = map ; }
Distance : 12

1
Tree	{ return reportMatcher ( Any.ANY . reportMatcher () ) ; }
Code	{ return reportMatcher ( Any.ANY . reportMatcher () ) ; }
Distance : 6

2
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; }
Distance : 9

3
Tree	{ reportMatcher () ; currentDerivative = Any.ANY . returnMap () ; }
Code	{ reportMatcher () ; currentDerivative = Any.ANY . returnMap () ; }
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = false ; }
Distance : 10

5
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

6
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 5

7
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = null ; }
Distance : 10

8
Tree	{ return reportMatcher ( period . reportMatcher () ) ; }
Code	{ return reportMatcher ( period . reportMatcher () ) ; }
Distance : 6

9
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 7

10
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

11
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = map ; }
Distance : 12

12
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = Any.ANY ; }
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super = {} ; }
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super = else ; }
Distance : 10

16
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = Any.ANY ; }
Distance : 10

17
Tree	private
Code	private
Distance : 6

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = scalar ; }
Distance : 12

20
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 3

21
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = null ; }
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = false ; }
Distance : 10

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 7

25
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 5

26
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super = super ; }
Distance : 10

27
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 5

28
Tree	{ reportMatcher () ; compiler = Any.ANY . returnMap () ; }
Code	{ reportMatcher () ; compiler = Any.ANY . returnMap () ; }
Distance : 8

29
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

30
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Distance : 10

31
Tree	{ super ( T ) ; returnMap ( NUMBER_CONSTANT ) ; }
Code	{ super ( T ) ; returnMap ( NUMBER_CONSTANT ) ; }
Distance : 9

32
Tree	{ super ( reportMatcher ) ; }
Code	{ super ( reportMatcher ) ; }
Distance : 4

33
Tree	{ return reportMatcher ( Any.ANY ) . < getParameterTypes > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < getParameterTypes > reportMatcher () ; }
Distance : 9

34
Tree	{ super ( classToMock ) ; returnMap ( NUMBER_CONSTANT ) ; }
Code	{ super ( classToMock ) ; returnMap ( NUMBER_CONSTANT ) ; }
Distance : 9

35
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 7

36
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 3

37
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

38
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; null }
Distance : 7

39
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Distance : 9

40
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 6

41
Tree	{ super ( object ) ; returnMap ( NUMBER_CONSTANT ) ; }
Code	{ super ( object ) ; returnMap ( NUMBER_CONSTANT ) ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; returnMap () ; }
Code	{ super ( classToMock ) ; returnMap () ; }
Distance : 6

43
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = null ; }
Distance : 12

45
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 5

46
Tree	{ reportMatcher () ; Preconditions = Any.ANY . returnMap () ; }
Code	{ reportMatcher () ; Preconditions = Any.ANY . returnMap () ; }
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

48
Tree	{ return reportMatcher ; }
Code	{ return reportMatcher ; }
Distance : 2

49
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

50
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; }
Distance : 9

51
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

52
Tree	{ super ( reportMatcher ) ; returnMap ( NUMBER_CONSTANT ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( NUMBER_CONSTANT ) ; }
Distance : 9

53
Tree	{ super ( reportMatcher ) ; returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap () ; }
Distance : 6

54
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 10

55
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

56
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

57
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Distance : 11

59
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 7

60
Tree	{ returnMap ( Any.ANY ) . returnMap () ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; }
Distance : 6

61
Tree	{ return returnMap ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnMap ( reportMatcher ( Any.ANY ) ) ; }
Distance : 7

62
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 4

63
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 8

64
Tree	{ return reportMatcher ( map . reportMatcher () ) ; }
Code	{ return reportMatcher ( map . reportMatcher () ) ; }
Distance : 6

65
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnMap () ; }
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

67
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 5

68
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 3

69
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

70
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

71
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = Any.ANY ; }
Distance : 12

72
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 11

73
Tree	{ super ( T ) ; returnMap () ; }
Code	{ super ( T ) ; returnMap () ; }
Distance : 6

74
Tree	{ super ( object ) ; returnMap () ; }
Code	{ super ( object ) ; returnMap () ; }
Distance : 6

75
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

76
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

77
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = false ; }
Distance : 10

78
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

79
Tree	{ super(); }
Code	{ super(); }
Distance : 4

80
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

81
Tree	{ return returnMap ( Any.ANY , Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY , Any.ANY ) . returnMap () ; }
Distance : 8

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

83
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = false ; }
Distance : 12

84
Tree	{ return reportMatcher ( iValues . reportMatcher () ) ; }
Code	{ return reportMatcher ( iValues . reportMatcher () ) ; }
Distance : 6

85
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

86
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

87
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

88
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

89
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . labelAnchor = false ; }
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; continue; }
Distance : 7

92
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 9

93
Tree	{ returnMap ( Any.ANY ) ; return false ; }
Code	{ returnMap ( Any.ANY ) ; return false ; }
Distance : 7

94
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Distance : 9

96
Tree	{ return ( T ) returnMap () ; }
Code	{ return ( T ) returnMap () ; }
Distance : 4

97
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

98
Tree	{ return; }
Code	{ return; }
Distance : 4

99
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 10

100
Tree	{ return returnMap ( Any.ANY ) ; }
Code	{ return returnMap ( Any.ANY ) ; }
Distance : 4

101
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Distance : 10

102
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 7

103
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; super }
Distance : 11

105
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = null ; }
Distance : 10

106
Tree	{ return returnMap () ; }
Code	{ return returnMap () ; }
Distance : 1

107
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

108
Tree	{ return reportMatcher ( Any.ANY ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( Any.ANY ( Any.ANY ) ) ; }
Distance : 7

109
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

110
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

111
Tree	{ return ( T ) returnMap ( Any.ANY ) ; }
Code	{ return ( T ) returnMap ( Any.ANY ) ; }
Distance : 7

112
Tree	{
Code	{
Distance : 5

113
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Distance : 9

114
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Distance : 9

115
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 3

116
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = null ; }
Distance : 10

117
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 10

118
Tree	{ reportMatcher = reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ reportMatcher = reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

119
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = false ; }
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

121
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return; }
Distance : 7

122
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 3

123
Tree	{ return reportMatcher ( returnMap ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnMap ( Any.ANY ) ) ; }
Distance : 7

124
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super(); }
Distance : 7

125
Tree	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > reportMatcher () ; }
Distance : 9

126
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 5

127
Tree	{ return ( classToMock ) returnMap ( Any.ANY ) ; }
Code	{ return ( classToMock ) returnMap ( Any.ANY ) ; }
Distance : 7

128
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = Any.ANY . returnMap () ; }
Distance : 10

129
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

130
Tree	{ continue; }
Code	{ continue; }
Distance : 4

131
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 4

132
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = true ; }
Distance : 10

133
Tree	{ return chronology ; }
Code	{ return chronology ; }
Distance : 2

134
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 10

135
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = false ; }
Distance : 12

136
Tree	{ return ( reportMatcher ) returnMap () ; }
Code	{ return ( reportMatcher ) returnMap () ; }
Distance : 4

137
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 4

138
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = false ; }
Distance : 12

139
Tree	{ returnMap ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Distance : 9

140
Tree	{ return MockitoCore ; }
Code	{ return MockitoCore ; }
Distance : 2

141
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

142
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = null ; }
Distance : 12

143
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

144
Tree	{ reportMatcher () ; Assert = Any.ANY . returnMap () ; }
Code	{ reportMatcher () ; Assert = Any.ANY . returnMap () ; }
Distance : 8

145
Tree	{ return ( T ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

146
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

147
Tree	{ return ( classToMock ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( classToMock ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

148
Tree	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Code	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Distance : 12

149
Tree	{ languageMode = reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ languageMode = reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

150
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

151
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; constructorsToProcess = null ; }
Distance : 10

152
Tree	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Code	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Distance : 12

153
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

154
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

155
Tree	{}
Code	{}
Distance : 6

156
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = false ; }
Distance : 10

157
Tree	{ return mockSettings ; }
Code	{ return mockSettings ; }
Distance : 2

158
Tree	{ T = reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ T = reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

159
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = Any.ANY . returnMap () ; }
Distance : 10

160
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; }
Distance : 9

161
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Distance : 11

162
Tree	{ mockSettings = reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ mockSettings = reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

163
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendItemPaint = Any.ANY ; }
Distance : 12

164
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

165
Tree	{ returnMap ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

166
Tree	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

167
Tree	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = Any.ANY . returnMap () ; }
Distance : 10

169
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

170
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; tooShortStats = Any.ANY ; }
Distance : 10

171
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

172
Tree	{ null }
Code	{ null }
Distance : 4

173
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Distance : 12

174
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnMap () ; }
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

176
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

177
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 4

178
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

179
Tree	protected
Code	protected
Distance : 6

180
Tree	{ return ( classToMock ) returnMap () ; }
Code	{ return ( classToMock ) returnMap () ; }
Distance : 4

181
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; correlationMatrix = Any.ANY ; }
Distance : 10

182
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = Any.ANY . returnMap () ; }
Distance : 10

183
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 10

184
Tree	{ throw returnMap ( Any.ANY ) ; }
Code	{ throw returnMap ( Any.ANY ) ; }
Distance : 5

185
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = null ; }
Distance : 12

186
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 7

187
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . legendBackgroundPaint = map ; }
Distance : 12

188
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return = super ; }
Distance : 10

189
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

190
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

191
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = Any.ANY ; }
Distance : 10

192
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 10

193
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 6

194
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

195
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 8

196
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

197
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

198
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 3

199
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 3

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher () ; Map = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Map = Any.ANY . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

2
Tree	{ return returnMap ( Any.ANY , Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY , Any.ANY ) . returnMap () ; }
Distance : 8

3
Tree	{ returnMap ( Any.ANY ) . returnMap () ; Map = false ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; Map = false ; }
Distance : 12

4
Tree	{ return Map ; } class
Code	{ return Map ; } class
Distance : 13

5
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

6
Tree	{ returnMap ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Distance : 12

7
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

8
Tree	{ super ( Map ) ; returnMap ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Map ) ; returnMap ( NUMBER_CONSTANT ) ; } Test
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = false ; }
Distance : 12

10
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 10

12
Tree	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Distance : 13

13
Tree	{ returnMap ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Code	{ returnMap ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; Map = Any.ANY ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; Map = Any.ANY ; }
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = false ; }
Distance : 12

16
Tree	{ returnMap ( Any.ANY ) ; Map = true ; }
Code	{ returnMap ( Any.ANY ) ; Map = true ; }
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Distance : 12

18
Tree	{ returnMap ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ returnMap ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = null ; }
Distance : 11

20
Tree	{ returnMap ( Any.ANY ) . returnMap () ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

21
Tree	{ return Map ; } array
Code	{ return Map ; } array
Distance : 13

22
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

23
Tree	{ super ( Map ) ; returnMap () ; }
Code	{ super ( Map ) ; returnMap () ; }
Distance : 9

24
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 9

25
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

26
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeRegistry }
Distance : 13

27
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; isAssertionCall }
Distance : 13

28
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = false ; }
Distance : 11

30
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; super }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; super }
Distance : 10

31
Tree	{ return reportMatcher ( returnMap ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnMap ( Any.ANY ) ) ; }
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

33
Tree	{ super ( Map ) ; } notifyListeners
Code	{ super ( Map ) ; } notifyListeners
Distance : 12

34
Tree	{ return ( Map ) returnMap () ; } Class
Code	{ return ( Map ) returnMap () ; } Class
Distance : 9

35
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Distance : 11

36
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

37
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

38
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

39
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; super }
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = true ; }
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = Any.ANY ; }
Distance : 12

42
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = false ; }
Distance : 11

44
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

45
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; return }
Distance : 12

47
Tree	{ return returnMap ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 10

48
Tree	{ super ( Map ) ; returnMap ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Map ) ; returnMap ( NUMBER_CONSTANT ) ; } Class
Distance : 13

49
Tree	{ null reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super = {} ; }
Distance : 11

51
Tree	{ return this . Map ; } class
Code	{ return this . Map ; } class
Distance : 13

52
Tree	{ super ( Map ) ; }
Code	{ super ( Map ) ; }
Distance : 11

53
Tree	{ Map = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Map = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

54
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; if }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; if }
Distance : 10

55
Tree	{ super ( Map ) ; returnMap ( NUMBER_CONSTANT ) ; }
Code	{ super ( Map ) ; returnMap ( NUMBER_CONSTANT ) ; }
Distance : 12

56
Tree	{ return reportMatcher ( Map . returnMap () ) ; }
Code	{ return reportMatcher ( Map . returnMap () ) ; }
Distance : 8

57
Tree	{ returnMap ( Any.ANY ) ; Map = false ; }
Code	{ returnMap ( Any.ANY ) ; Map = false ; }
Distance : 12

58
Tree	{ return returnMap ( Any.ANY ) ; }
Code	{ return returnMap ( Any.ANY ) ; }
Distance : 11

59
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; null }
Distance : 9

60
Tree	{ super ( Map ) ; reportMatcher () ; }
Code	{ super ( Map ) ; reportMatcher () ; }
Distance : 10

61
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return NUMBER_CONSTANT ; }
Distance : 11

62
Tree	{ returnMap ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ returnMap ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 9

63
Tree	{ returnMap () ; Map = Any.ANY . reportMatcher () ; }
Code	{ returnMap () ; Map = Any.ANY . reportMatcher () ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return = super ; }
Distance : 11

65
Tree	{ return this . Map ; } notifyListeners
Code	{ return this . Map ; } notifyListeners
Distance : 13

66
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

67
Tree	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = Any.ANY ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = Any.ANY ; }
Distance : 13

68
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 11

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; continue; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super = else ; }
Distance : 11

72
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

73
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

74
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

75
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

76
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = true ; }
Distance : 11

77
Tree	{ return reportMatcher ( Any.ANY ) . < Map > returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > returnMap () ; }
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

79
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

80
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; throw }
Distance : 12

81
Tree	{ super ( Map ) ; } array
Code	{ super ( Map ) ; } array
Distance : 12

82
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 10

83
Tree	{ returnMap ( Any.ANY ) . returnMap () ; Map = Any.ANY ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; Map = Any.ANY ; }
Distance : 12

84
Tree	{ return ( Map ) reportMatcher () ; }
Code	{ return ( Map ) reportMatcher () ; }
Distance : 9

85
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

86
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 11

87
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Test
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Test
Distance : 13

88
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

89
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; return }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; return }
Distance : 10

90
Tree	{ Map = returnMap ( Any.ANY ) . returnMap () ; }
Code	{ Map = returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

91
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

92
Tree	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

93
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 11

94
Tree	{ return ( Map ) returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

95
Tree	{ returnMap ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; Any.ANY = false ; }
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; Map = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = true ; }
Distance : 11

97
Tree	{ return this . Map ; } array
Code	{ return this . Map ; } array
Distance : 13

98
Tree	{ reportMatcher () ; Map = Any.ANY . returnMap () ; }
Code	{ reportMatcher () ; Map = Any.ANY . returnMap () ; }
Distance : 9

99
Tree	{ return returnMap () ; }
Code	{ return returnMap () ; }
Distance : 11

100
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

101
Tree	{ return; }
Code	{ return; }
Distance : 15

102
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super(); }
Distance : 9

104
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; }
Distance : 11

105
Tree	{ return this . Map ; }
Code	{ return this . Map ; }
Distance : 12

106
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Any.ANY = true ; }
Distance : 11

108
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Any.ANY ; }
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = Any.ANY ; }
Distance : 11

110
Tree	{ null }
Code	{ null }
Distance : 15

111
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

112
Tree	protected
Code	protected
Distance : 17

113
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; super = super ; }
Distance : 11

114
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

115
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = null ; }
Distance : 11

116
Tree	{ continue; }
Code	{ continue; }
Distance : 15

117
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

118
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = null ; }
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Map = null ; }
Distance : 12

120
Tree	{ return returnMap ( Any.ANY ) . < Map > returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . < Map > returnMap () ; }
Distance : 9

121
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } Test
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } Test
Distance : 11

122
Tree	{ return returnMap ( returnMap ( Any.ANY ) ) ; }
Code	{ return returnMap ( returnMap ( Any.ANY ) ) ; }
Distance : 9

123
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

124
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Map = Any.ANY ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

126
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; this . Map = Any.ANY ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; this . Map = Any.ANY ; }
Distance : 13

127
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = super(); ; }
Distance : 11

128
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

129
Tree	{ returnMap ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

130
Tree	{ super(); }
Code	{ super(); }
Distance : 15

131
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; if }
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; if }
Distance : 12

132
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = return; ; }
Distance : 11

133
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Class
Distance : 12

134
Tree	{ returnMap () ; Map = Any.ANY . returnMap () ; }
Code	{ returnMap () ; Map = Any.ANY . returnMap () ; }
Distance : 10

135
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = super(); ; }
Distance : 12

136
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

137
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = return; ; }
Distance : 12

138
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

139
Tree	{}
Code	{}
Distance : 17

140
Tree	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = false ; }
Code	{ returnMap ( Any.ANY ) . returnMap () ; this . Map = false ; }
Distance : 13

141
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

142
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; return; }
Distance : 9

144
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Distance : 9

145
Tree	{ Map = returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ Map = returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 10

146
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

147
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

148
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; super }
Distance : 10

149
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

150
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

151
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Class
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } Class
Distance : 13

152
Tree	{ return returnMap ( Map . reportMatcher () ) ; }
Code	{ return returnMap ( Map . reportMatcher () ) ; }
Distance : 9

153
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnMap () ; }
Distance : 7

154
Tree	{ return Map ; } notifyListeners
Code	{ return Map ; } notifyListeners
Distance : 13

155
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . Map = Map ; }
Distance : 12

156
Tree	{ super ( Map ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Map ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

157
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

158
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

159
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

160
Tree	{ return ( Map ) returnMap () ; } Test
Code	{ return ( Map ) returnMap () ; } Test
Distance : 9

161
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

162
Tree	{ return reportMatcher ( Map . reportMatcher () ) ; }
Code	{ return reportMatcher ( Map . reportMatcher () ) ; }
Distance : 8

163
Tree	{ throw returnMap ( Any.ANY ) ; }
Code	{ throw returnMap ( Any.ANY ) ; }
Distance : 12

164
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

165
Tree	private
Code	private
Distance : 17

166
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

167
Tree	{ super ( Map ) ; returnMap () ; } Test
Code	{ super ( Map ) ; returnMap () ; } Test
Distance : 10

168
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

169
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

170
Tree	{ return Map ; }
Code	{ return Map ; }
Distance : 12

171
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

172
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

173
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; setTolerance }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; setTolerance }
Distance : 13

174
Tree	{
Code	{
Distance : 16

175
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

176
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) ; }
Distance : 10

177
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

178
Tree	{ super ( Map ) ; returnMap () ; } Class
Code	{ super ( Map ) ; returnMap () ; } Class
Distance : 10

179
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

180
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

181
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

182
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

183
Tree	{ Map = reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ Map = reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

184
Tree	{ return ( Map ) returnMap () ; }
Code	{ return ( Map ) returnMap () ; }
Distance : 8

185
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

187
Tree	{ returnMap ( Any.ANY ) ; return false ; }
Code	{ returnMap ( Any.ANY ) ; return false ; }
Distance : 12

188
Tree	{ return returnMap ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnMap ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

189
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

190
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) ; }
Distance : 10

191
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

192
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; Map = false ; }
Distance : 11

193
Tree	{ returnMap ( Any.ANY ) ; return true ; }
Code	{ returnMap ( Any.ANY ) ; return true ; }
Distance : 12

194
Tree	{ return returnMap ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

195
Tree	{ return returnMap ( Map . returnMap () ) ; }
Code	{ return returnMap ( Map . returnMap () ) ; }
Distance : 9

196
Tree	{ returnMap ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Code	{ returnMap ( Any.ANY ) . reportMatcher () ; this . Map = Map ; }
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Map = Any.ANY ; } Test
Distance : 12

198
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } Class
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } Class
Distance : 11

199
Tree	{ super ( Map ) ; } class
Code	{ super ( Map ) ; } class
Distance : 12

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( Set ) Set . returnSet ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Set ) Set . returnSet ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

1
Tree	{ Set . reportMatcher ( Set ) ; return super(); ; }
Code	{ Set . reportMatcher ( Set ) ; return super(); ; }
Distance : 9

2
Tree	{ Set . reportMatcher ( Set , STRING_CONSTANT ) ; return return; ; }
Code	{ Set . reportMatcher ( Set , STRING_CONSTANT ) ; return return; ; }
Distance : 11

3
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; returnSet () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; returnSet () ; }
Distance : 11

4
Tree	{ return ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ return ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 6

5
Tree	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Distance : 11

6
Tree	{ return ( Set ) Set . reportMatcher ( Set ) . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . reportMatcher ( Set ) . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

7
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

8
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; return }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; return }
Distance : 7

9
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 6

10
Tree	private
Code	private
Distance : 6

11
Tree	{ return this . Set ; } class
Code	{ return this . Set ; } class
Distance : 4

12
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

13
Tree	{ return ( Set ) reportMatcher ( Set ) ; } Test
Code	{ return ( Set ) reportMatcher ( Set ) ; } Test
Distance : 8

14
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

15
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

16
Tree	{ return ( Set ) Set . returnSet ( Set ) . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . returnSet ( Set ) . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

17
Tree	{ return ( Set ) Set . reportMatcher ( Set ) . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . reportMatcher ( Set ) . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

18
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Distance : 12

19
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

20
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Distance : 9

21
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Distance : 9

22
Tree	{ return reportMatcher ( Set ) . returnSet () ; }
Code	{ return reportMatcher ( Set ) . returnSet () ; }
Distance : 6

23
Tree	{ return ( Set ) reportMatcher ( Set , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( Set ) reportMatcher ( Set , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

24
Tree	{ return ( Any.ANY ) ; reportMatcher () ; }
Code	{ return ( Any.ANY ) ; reportMatcher () ; }
Distance : 5

25
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

26
Tree	{ return ( Set ) Set . reportMatcher ( Set ) ; }
Code	{ return ( Set ) Set . reportMatcher ( Set ) ; }
Distance : 9

27
Tree	{ ( () ; Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ ( () ; Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 11

28
Tree	{ return ( Set ) reportMatcher ( Set , Any.ANY ( Any.ANY ) ) ; }
Code	{ return ( Set ) reportMatcher ( Set , Any.ANY ( Any.ANY ) ) ; }
Distance : 12

29
Tree	{ return ( Set ) Set . returnSet ( Set ) ; }
Code	{ return ( Set ) Set . returnSet ( Set ) ; }
Distance : 9

30
Tree	{ super ( Set ) ; reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher () ; }
Distance : 6

31
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 5

32
Tree	{ return ( Set ) reportMatcher ( this , Set ) ; } Class
Code	{ return ( Set ) reportMatcher ( this , Set ) ; } Class
Distance : 10

33
Tree	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Distance : 9

34
Tree	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . returnSet () ) ; }
Distance : 9

35
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 8

36
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 8

37
Tree	{ return return ( Set ) . returnSet () ; }
Code	{ return return ( Set ) . returnSet () ; }
Distance : 6

38
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; super }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; super }
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 8

40
Tree	{ return Set . reportMatcher ( Set ) ; } Class
Code	{ return Set . reportMatcher ( Set ) ; } Class
Distance : 7

41
Tree	{ return ( Set ) Set . returnSet () ; }
Code	{ return ( Set ) Set . returnSet () ; }
Distance : 6

42
Tree	{ return Set ; } notifyListeners
Code	{ return Set ; } notifyListeners
Distance : 3

43
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 8

44
Tree	{ reportMatcher () ; Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ reportMatcher () ; Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 11

45
Tree	{ return ( Set ) reportMatcher ( Set , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( Set ) reportMatcher ( Set , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

46
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 3

47
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

48
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

49
Tree	{ ( ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ ( ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

51
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

52
Tree	{ return ( Set ) reportMatcher ( Set , Set . returnSet () - NUMBER_CONSTANT ) ; }
Code	{ return ( Set ) reportMatcher ( Set , Set . returnSet () - NUMBER_CONSTANT ) ; }
Distance : 13

53
Tree	{ return ( Set ) reportMatcher ( Any.ANY , Set . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY , Set . returnSet () ) ; }
Distance : 11

54
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } Test
Code	{ return ( Set ) Set . returnSet ( Set ) ; } Test
Distance : 10

55
Tree	{ return ( Set ) reportMatcher ( Any.ANY , Set . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY , Set . reportMatcher () ) ; }
Distance : 11

56
Tree	{ super ( Set ) ; reportMatcher () ; } Class
Code	{ super ( Set ) ; reportMatcher () ; } Class
Distance : 7

57
Tree	{ return this . Set ; } array
Code	{ return this . Set ; } array
Distance : 4

58
Tree	{ return () ; return null ; }
Code	{ return () ; return null ; }
Distance : 4

59
Tree	public
Code	public
Distance : 6

60
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; if }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; if }
Distance : 7

61
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

62
Tree	protected
Code	protected
Distance : 6

63
Tree	{ return ( Set ) reportMatcher ( Set , Set . returnSet () - NUMBER_CONSTANT ) ; }
Code	{ return ( Set ) reportMatcher ( Set , Set . returnSet () - NUMBER_CONSTANT ) ; }
Distance : 13

64
Tree	{ null reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ null reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 7

65
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

66
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

67
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

68
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; Object }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; Object }
Distance : 12

69
Tree	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Distance : 9

70
Tree	{ super(); reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 7

71
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; short }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; short }
Distance : 12

72
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

73
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

74
Tree	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; returnSet () ; }
Distance : 11

75
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

76
Tree	{ return Set . Set ( Set ) ; }
Code	{ return Set . Set ( Set ) ; }
Distance : 6

77
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

78
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 2

79
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

80
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

81
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 5

82
Tree	{ reportMatcher ( Any.ANY ) ; return this . Set ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return this . Set ; } Class
Distance : 9

83
Tree	{ Set = Set . reportMatcher ( Set ) ; return null ; }
Code	{ Set = Set . reportMatcher ( Set ) ; return null ; }
Distance : 11

84
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

85
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; returnSet () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; returnSet () ; }
Distance : 11

86
Tree	{
Code	{
Distance : 5

87
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 6

88
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

89
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

90
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Distance : 11

91
Tree	{ Set . reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ Set . reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 9

92
Tree	{ Set . return ( Any.ANY ) ; return null ; }
Code	{ Set . return ( Any.ANY ) ; return null ; }
Distance : 8

93
Tree	{ return ( Set ) this . Set . returnSet () ; }
Code	{ return ( Set ) this . Set . returnSet () ; }
Distance : 8

94
Tree	{ reportMatcher () ; Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher () ; Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 11

95
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

96
Tree	{ return ( Any.ANY ) ; reportMatcher () ; }
Code	{ return ( Any.ANY ) ; reportMatcher () ; }
Distance : 5

97
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

98
Tree	{ return Set ; }
Code	{ return Set ; }
Distance : 2

99
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; static }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; static }
Distance : 12

100
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; return }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; return }
Distance : 7

101
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

102
Tree	{ Set . reportMatcher ( Set ) ; return null ; }
Code	{ Set . reportMatcher ( Set ) ; return null ; }
Distance : 9

103
Tree	{ return ( Set ) Set . returnSet () ; } Test
Code	{ return ( Set ) Set . returnSet () ; } Test
Distance : 7

104
Tree	{ return () ; Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return () ; Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

105
Tree	{ Set . return ( Set ) ; return null ; }
Code	{ Set . return ( Set ) ; return null ; }
Distance : 8

106
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 6

107
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 11

108
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

109
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

110
Tree	{ return ( Set ) Set . returnSet () ; } Class
Code	{ return ( Set ) Set . returnSet () ; } Class
Distance : 7

111
Tree	{ Set . reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ Set . reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 9

112
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

113
Tree	{ return reportMatcher ( Set ) . reportMatcher () ; }
Code	{ return reportMatcher ( Set ) . reportMatcher () ; }
Distance : 6

114
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

115
Tree	{ super ( Set ) ; reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher () ; }
Distance : 6

116
Tree	{ return this . Set ; }
Code	{ return this . Set ; }
Distance : 3

117
Tree	{ return ( Set ) reportMatcher ( Any.ANY , Set . returnSet () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY , Set . returnSet () ) ; }
Distance : 11

118
Tree	{ return ( Set ) this . Set . returnSet () ; } Class
Code	{ return ( Set ) this . Set . returnSet () ; } Class
Distance : 9

119
Tree	{ Set . reportMatcher ( Set , STRING_CONSTANT ) ; return super(); ; }
Code	{ Set . reportMatcher ( Set , STRING_CONSTANT ) ; return super(); ; }
Distance : 11

120
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 9

121
Tree	{ return ( Set ) reportMatcher ( Set , Any.ANY ( Any.ANY ) ) ; }
Code	{ return ( Set ) reportMatcher ( Set , Any.ANY ( Any.ANY ) ) ; }
Distance : 12

122
Tree	{ return reportMatcher ( this , Set ) ; } Class
Code	{ return reportMatcher ( this , Set ) ; } Class
Distance : 7

123
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

124
Tree	{ return ( Set ) reportMatcher ( Set , Set . reportMatcher () - NUMBER_CONSTANT ) ; }
Code	{ return ( Set ) reportMatcher ( Set , Set . reportMatcher () - NUMBER_CONSTANT ) ; }
Distance : 13

125
Tree	{ return Set ; } class
Code	{ return Set ; } class
Distance : 3

126
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Distance : 8

127
Tree	{ return Set . reportMatcher ( Set ) ; } Test
Code	{ return Set . reportMatcher ( Set ) ; } Test
Distance : 7

128
Tree	{ Set = Set . reportMatcher ( Set ) ; return return; ; }
Code	{ Set = Set . reportMatcher ( Set ) ; return return; ; }
Distance : 11

129
Tree	{ return ( Set ) this . Set . returnSet () ; } Test
Code	{ return ( Set ) this . Set . returnSet () ; } Test
Distance : 9

130
Tree	{ return ( Set ) Set . returnSet () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . returnSet () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

131
Tree	{ return return ( Any.ANY ) . reportMatcher () ; }
Code	{ return return ( Any.ANY ) . reportMatcher () ; }
Distance : 6

132
Tree	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . returnSet () ; }
Distance : 9

133
Tree	{ Set = Set . reportMatcher ( Set ) ; return super(); ; }
Code	{ Set = Set . reportMatcher ( Set ) ; return super(); ; }
Distance : 11

134
Tree	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( Set . reportMatcher () ) ; }
Distance : 9

135
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

136
Tree	{ return reportMatcher ( this , Set ) ; }
Code	{ return reportMatcher ( this , Set ) ; }
Distance : 6

137
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

138
Tree	{ return ( Set ) reportMatcher ( this , Set ) ; }
Code	{ return ( Set ) reportMatcher ( this , Set ) ; }
Distance : 9

139
Tree	{ Set . reportMatcher ( Set ) ; return return; ; }
Code	{ Set . reportMatcher ( Set ) ; return return; ; }
Distance : 9

140
Tree	{ return ( Set ) reportMatcher ( this , Set ) ; }
Code	{ return ( Set ) reportMatcher ( this , Set ) ; }
Distance : 9

141
Tree	{ return ( Set ) reportMatcher ( Any.ANY , Set . reportMatcher () ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY , Set . reportMatcher () ) ; }
Distance : 11

142
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

143
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 11

144
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; assert }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; assert }
Distance : 7

145
Tree	{ Set . reportMatcher ( Set , STRING_CONSTANT ) ; return null ; }
Code	{ Set . reportMatcher ( Set , STRING_CONSTANT ) ; return null ; }
Distance : 11

146
Tree	{ Set . ( ( Set , STRING_CONSTANT ) ; return null ; }
Code	{ Set . ( ( Set , STRING_CONSTANT ) ; return null ; }
Distance : 11

147
Tree	{ return ( Set ) reportMatcher ( Set , Set . reportMatcher () - NUMBER_CONSTANT ) ; }
Code	{ return ( Set ) reportMatcher ( Set , Set . reportMatcher () - NUMBER_CONSTANT ) ; }
Distance : 13

148
Tree	{ return return ( Any.ANY ) . returnSet () ; }
Code	{ return return ( Any.ANY ) . returnSet () ; }
Distance : 6

149
Tree	{ return ( Set ) reportMatcher () ; } Class
Code	{ return ( Set ) reportMatcher () ; } Class
Distance : 5

150
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Distance : 8

151
Tree	{ return ( Set ) reportMatcher () ; } Test
Code	{ return ( Set ) reportMatcher () ; } Test
Distance : 5

152
Tree	{ return ( Set ) Set . returnSet ( Any.ANY ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Set ) Set . returnSet ( Any.ANY ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

153
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; if }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; if }
Distance : 7

154
Tree	{ return ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ return ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 6

155
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

156
Tree	{ reportMatcher ( Any.ANY ) ; return this . Set ; }
Code	{ reportMatcher ( Any.ANY ) ; return this . Set ; }
Distance : 8

157
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

158
Tree	{ continue; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 7

159
Tree	{ return reportMatcher ( this , Set ) ; } Test
Code	{ return reportMatcher ( this , Set ) ; } Test
Distance : 7

160
Tree	{ reportMatcher ( Any.ANY ) ; return this . Set ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return this . Set ; } Test
Distance : 9

161
Tree	{ return ( Set ) Set . reportMatcher () ; }
Code	{ return ( Set ) Set . reportMatcher () ; }
Distance : 6

162
Tree	{ super ( Set ) ; reportMatcher () ; } Test
Code	{ super ( Set ) ; reportMatcher () ; } Test
Distance : 7

163
Tree	{ return; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ return; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 7

164
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

165
Tree	{ Set . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ Set . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 9

166
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Distance : 12

167
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

168
Tree	{ return ( Set ) Set . reportMatcher () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . reportMatcher () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

169
Tree	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Code	{ super ( Set . reportMatcher ( Set ) ) ; reportMatcher () ; }
Distance : 11

170
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Distance : 12

171
Tree	{ return Set . reportMatcher ( Set ) ; }
Code	{ return Set . reportMatcher ( Set ) ; }
Distance : 6

172
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

173
Tree	{ return ( Set ) Set . returnSet () . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . returnSet () . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

174
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

175
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

176
Tree	{ return ( Set ) this . Set . reportMatcher () ; }
Code	{ return ( Set ) this . Set . reportMatcher () ; }
Distance : 8

177
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 3

178
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

179
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 10

180
Tree	{ Set = Set . reportMatcher ( Set ) ; return continue; ; }
Code	{ Set = Set . reportMatcher ( Set ) ; return continue; ; }
Distance : 11

181
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 10

182
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } Class
Code	{ return ( Set ) Set . returnSet ( Set ) ; } Class
Distance : 10

183
Tree	{ return return ( Any.ANY ) ; }
Code	{ return return ( Any.ANY ) ; }
Distance : 4

184
Tree	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Set ) . reportMatcher () ; }
Distance : 9

185
Tree	{ return return ( Set ) . reportMatcher () ; }
Code	{ return return ( Set ) . reportMatcher () ; }
Distance : 6

186
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; assert }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; assert }
Distance : 7

187
Tree	{ return ( Set ) Set . reportMatcher () . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . reportMatcher () . returnSet ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

188
Tree	{ return return ( this , Set ) ; }
Code	{ return return ( this , Set ) ; }
Distance : 6

189
Tree	{ return ( Set ) Set . reportMatcher ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Set ) Set . reportMatcher ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

190
Tree	{ ( ( Any.ANY ) ; return this . Set ; }
Code	{ ( ( Any.ANY ) ; return this . Set ; }
Distance : 8

191
Tree	{ return ( Set ) Set . reportMatcher ( Any.ANY ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( Set ) Set . reportMatcher ( Any.ANY ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

192
Tree	{ return ( Set ) Set . returnSet ( Set ) . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( Set ) Set . returnSet ( Set ) . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

193
Tree	{ return ( Set ) reportMatcher ( Set ) ; } Class
Code	{ return ( Set ) reportMatcher ( Set ) ; } Class
Distance : 8

194
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Distance : 12

195
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

196
Tree	{ return Set ; } array
Code	{ return Set ; } array
Distance : 3

197
Tree	{ return ( Set ) reportMatcher ( this , Set ) ; } Test
Code	{ return ( Set ) reportMatcher ( this , Set ) ; } Test
Distance : 10

198
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 3

199
Tree	{ return this . Set ; } notifyListeners
Code	{ return this . Set ; } notifyListeners
Distance : 4

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

1
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Any.ANY = true ; }
Distance : 11

2
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = Any.ANY ; }
Distance : 11

3
Tree	{ super ( Set ) ; }
Code	{ super ( Set ) ; }
Distance : 11

4
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

5
Tree	{ return Set ; } array
Code	{ return Set ; } array
Distance : 13

6
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

7
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Any.ANY ; }
Distance : 12

8
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

9
Tree	{ return Set ; } class
Code	{ return Set ; } class
Distance : 13

10
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; return NUMBER_CONSTANT ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

13
Tree	{ return reportMatcher ( Set . reportMatcher () ) ; }
Code	{ return reportMatcher ( Set . reportMatcher () ) ; }
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Distance : 12

15
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

16
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Distance : 9

17
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Set ; }
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

19
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

20
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; return NUMBER_CONSTANT ; }
Distance : 11

23
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

24
Tree	{ reportMatcher ( Any.ANY ) ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = false ; }
Distance : 11

25
Tree	{ return reportMatcher ( Any.ANY ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( Any.ANY ( Any.ANY ) ) ; }
Distance : 8

26
Tree	{ return ( Set ) returnSet ( Any.ANY ) ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) ; }
Distance : 10

27
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

28
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

29
Tree	{ super ( Set ) ; returnSet ( NUMBER_CONSTANT ) ; }
Code	{ super ( Set ) ; returnSet ( NUMBER_CONSTANT ) ; }
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; super }
Distance : 12

31
Tree	{ super ( Set ) ; reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher () ; }
Distance : 10

32
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

33
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; return }
Distance : 12

34
Tree	{ return ( Set ) reportMatcher () ; } Class
Code	{ return ( Set ) reportMatcher () ; } Class
Distance : 10

35
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

36
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

37
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

38
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; }
Distance : 9

39
Tree	{ return ( Set ) returnSet () ; }
Code	{ return ( Set ) returnSet () ; }
Distance : 8

40
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = true ; }
Distance : 11

41
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = true ; }
Distance : 11

42
Tree	{ return this . Set ; } class
Code	{ return this . Set ; } class
Distance : 13

43
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

44
Tree	{}
Code	{}
Distance : 17

45
Tree	protected
Code	protected
Distance : 17

46
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

47
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

49
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

50
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; super }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; super }
Distance : 10

51
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 9

52
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

53
Tree	{ null reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

54
Tree	{ return reportMatcher ( Set . Any.ANY () ) ; }
Code	{ return reportMatcher ( Set . Any.ANY () ) ; }
Distance : 8

55
Tree	{ return; }
Code	{ return; }
Distance : 15

56
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

57
Tree	{ Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Any.ANY ; }
Distance : 12

59
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnSet () ; }
Distance : 7

60
Tree	{ return this . Set ; } notifyListeners
Code	{ return this . Set ; } notifyListeners
Distance : 13

61
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = Any.ANY ; }
Distance : 11

62
Tree	{ Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Set = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

63
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = null ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

65
Tree	{ return this . Set ; }
Code	{ return this . Set ; }
Distance : 12

66
Tree	private
Code	private
Distance : 17

67
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; if }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; if }
Distance : 12

68
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

69
Tree	{ return Set ; }
Code	{ return Set ; }
Distance : 12

70
Tree	{ reportMatcher () ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Set = Any.ANY . reportMatcher () ; }
Distance : 10

71
Tree	{ reportMatcher ( Any.ANY ) ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = true ; }
Distance : 11

72
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

73
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

74
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

75
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return; }
Distance : 10

76
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

77
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

78
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

79
Tree	{ Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

80
Tree	{ continue; }
Code	{ continue; }
Distance : 15

81
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

83
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

84
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

85
Tree	{ reportMatcher () ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Set = Any.ANY . reportMatcher () ; }
Distance : 10

86
Tree	{ return this . Set ; } array
Code	{ return this . Set ; } array
Distance : 13

87
Tree	{ reportMatcher ( Any.ANY ) ; Set = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = true ; }
Distance : 11

88
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = null ; }
Distance : 11

89
Tree	{ reportMatcher () ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher () ; Set = Any.ANY . returnSet () ; }
Distance : 9

90
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = Any.ANY ; }
Distance : 12

91
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 8

92
Tree	{ super ( Set ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Set ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

93
Tree	{ super ( Set ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Set ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

94
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = false ; }
Distance : 12

95
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

96
Tree	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Distance : 8

97
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

98
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

99
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; super }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; super }
Distance : 10

100
Tree	{ Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ Set = reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

101
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 10

102
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; super = else ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Distance : 11

104
Tree	{ super ( Set ) ; } class
Code	{ super ( Set ) ; } class
Distance : 12

105
Tree	{ super ( Set ) ; } array
Code	{ super ( Set ) ; } array
Distance : 12

106
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

107
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

108
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

109
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Test
Distance : 12

110
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; }
Distance : 12

111
Tree	{ super(); }
Code	{ super(); }
Distance : 15

112
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; throw }
Distance : 12

113
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = Any.ANY ; }
Distance : 11

114
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

115
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Distance : 9

116
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; super }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; super }
Distance : 11

117
Tree	{ return reportMatcher ( Set . Any.ANY () ) ; }
Code	{ return reportMatcher ( Set . Any.ANY () ) ; }
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

119
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = null ; }
Distance : 12

120
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = Any.ANY ; }
Distance : 11

121
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Distance : 8

122
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = null ; }
Distance : 12

123
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; super }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; super }
Distance : 11

124
Tree	{ return ( Set ) reportMatcher () ; } Test
Code	{ return ( Set ) reportMatcher () ; } Test
Distance : 10

125
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

126
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Set = false ; }
Distance : 11

127
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

128
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = true ; }
Distance : 12

129
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = continue; ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = continue; ; }
Distance : 12

130
Tree	{ reportMatcher ( Any.ANY ) ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = false ; }
Distance : 11

131
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = false ; }
Distance : 12

132
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

133
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; super = super ; }
Distance : 11

134
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

135
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; super = else ; }
Distance : 11

136
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnSet () ; }
Distance : 7

137
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Any.ANY ; }
Distance : 12

138
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = super(); ; }
Distance : 12

139
Tree	{ return reportMatcher ( Set . reportMatcher () ) ; }
Code	{ return reportMatcher ( Set . reportMatcher () ) ; }
Distance : 8

140
Tree	{ reportMatcher () ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher () ; Set = Any.ANY . returnSet () ; }
Distance : 9

141
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

142
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

143
Tree	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 9

144
Tree	{ return Set ; } notifyListeners
Code	{ return Set ; } notifyListeners
Distance : 13

145
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

146
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

147
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

148
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

149
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

150
Tree	{
Code	{
Distance : 16

151
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

152
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

153
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

154
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; return; }
Distance : 9

155
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Distance : 12

156
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

157
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; null }
Distance : 9

158
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; super = super ; }
Distance : 11

159
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

160
Tree	{ null }
Code	{ null }
Distance : 15

161
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

162
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; null }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; null }
Distance : 10

163
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

164
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

165
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

167
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

169
Tree	{ return reportMatcher ( Any.ANY ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( Any.ANY ( Any.ANY ) ) ; }
Distance : 8

170
Tree	{ super ( Set ) ; returnSet () ; }
Code	{ super ( Set ) ; returnSet () ; }
Distance : 9

171
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

172
Tree	{ super ( Set ) ; reportMatcher () ; } Class
Code	{ super ( Set ) ; reportMatcher () ; } Class
Distance : 11

173
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

174
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = super(); ; }
Distance : 11

175
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

176
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

177
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; } Class
Distance : 12

178
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

179
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

180
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

181
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

182
Tree	{ super ( Set ) ; } notifyListeners
Code	{ super ( Set ) ; } notifyListeners
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Any.ANY = false ; }
Distance : 11

184
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

185
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

186
Tree	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Set = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

188
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 10

189
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

190
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

191
Tree	{ super ( Set ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Set ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

192
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeRegistry }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; initializeRegistry }
Distance : 13

193
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = false ; }
Distance : 11

194
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

195
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; Set = return; ; }
Distance : 11

196
Tree	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnSet () ; this . Set = true ; }
Distance : 12

197
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Set = Set ; }
Distance : 12

198
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

199
Tree	{ super ( Set ) ; reportMatcher () ; } Test
Code	{ super ( Set ) ; reportMatcher () ; } Test
Distance : 11

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ super ( List . reportMatcher ( List ) ) ; returnList () ; }
Code	{ super ( List . reportMatcher ( List ) ) ; returnList () ; }
Distance : 11

1
Tree	{ List = List . anyList ( List ) ; return null ; }
Code	{ List = List . anyList ( List ) ; return null ; }
Distance : 10

2
Tree	{ return reportMatcher ( List ) . anyList () ; }
Code	{ return reportMatcher ( List ) . anyList () ; }
Distance : 5

3
Tree	{ anyList () ; return null ; }
Code	{ anyList () ; return null ; }
Distance : 4

4
Tree	{ return ( List ) List . returnList ( List ) ; }
Code	{ return ( List ) List . returnList ( List ) ; }
Distance : 9

5
Tree	{ return ( List ) List . anyList ( List ) ; }
Code	{ return ( List ) List . anyList ( List ) ; }
Distance : 8

6
Tree	{ anyList ( Any.ANY ) ; return this . List ; }
Code	{ anyList ( Any.ANY ) ; return this . List ; }
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 6

8
Tree	{ super ( List . reportMatcher ( List ) ) ; anyList () ; }
Code	{ super ( List . reportMatcher ( List ) ) ; anyList () ; }
Distance : 10

9
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Distance : 7

10
Tree	{ return ( List ) anyList ( List ) ; }
Code	{ return ( List ) anyList ( List ) ; }
Distance : 6

11
Tree	{ return ( List ) List . returnList ( List ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . returnList ( List ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 19

12
Tree	{ return ( List ) returnList ( List ) . returnList () ; }
Code	{ return ( List ) returnList ( List ) . returnList () ; }
Distance : 9

13
Tree	{ reportMatcher ( Any.ANY ) ; anyList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; anyList () ; super }
Distance : 6

14
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

15
Tree	{ return reportMatcher ( List ) . reportMatcher () ; }
Code	{ return reportMatcher ( List ) . reportMatcher () ; }
Distance : 6

16
Tree	{ super(); reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

17
Tree	{ super(); reportMatcher ( Any.ANY ) ; anyList () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; anyList () ; }
Distance : 6

18
Tree	{ reportMatcher () ; List = anyList ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher () ; List = anyList ( Any.ANY ) . returnList () ; }
Distance : 10

19
Tree	{ List . reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ List . reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 9

20
Tree	{ reportMatcher ( Any.ANY ) ; return this . List ; }
Code	{ reportMatcher ( Any.ANY ) ; return this . List ; }
Distance : 8

21
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( List ) ; }
Distance : 11

22
Tree	{ return ( List ) reportMatcher ( Any.ANY , List . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY , List . anyList () ) ; }
Distance : 10

23
Tree	{ List . anyList ( Any.ANY ) ; return null ; }
Code	{ List . anyList ( Any.ANY ) ; return null ; }
Distance : 8

24
Tree	{ return ( List ) reportMatcher ( List , List . anyList () - NUMBER_CONSTANT ) ; }
Code	{ return ( List ) reportMatcher ( List , List . anyList () - NUMBER_CONSTANT ) ; }
Distance : 12

25
Tree	{ continue; reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

26
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

27
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 8

28
Tree	{ return reportMatcher ( this , List ) ; } Class
Code	{ return reportMatcher ( this , List ) ; } Class
Distance : 7

29
Tree	{ super ( List ) ; anyList () ; } Class
Code	{ super ( List ) ; anyList () ; } Class
Distance : 6

30
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 3

31
Tree	{ return this . List ; }
Code	{ return this . List ; }
Distance : 3

32
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 6

33
Tree	{ return reportMatcher ( this , List ) ; }
Code	{ return reportMatcher ( this , List ) ; }
Distance : 6

34
Tree	{ List . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ List . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 9

35
Tree	{ return anyList ( this , List ) ; }
Code	{ return anyList ( this , List ) ; }
Distance : 5

36
Tree	protected
Code	protected
Distance : 6

37
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 7

38
Tree	{ List . returnList ( Any.ANY ) ; return null ; }
Code	{ List . returnList ( Any.ANY ) ; return null ; }
Distance : 9

39
Tree	{ return ( List ) reportMatcher ( this , List ) ; }
Code	{ return ( List ) reportMatcher ( this , List ) ; }
Distance : 9

40
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; super }
Distance : 7

41
Tree	{ return this . List ; } array
Code	{ return this . List ; } array
Distance : 4

42
Tree	{ reportMatcher () ; List = reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher () ; List = reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 11

43
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 6

44
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 2

45
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

46
Tree	{ return ( List ) List . anyList () . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . anyList () . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 15

47
Tree	{ return ( List ) reportMatcher ( List , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( List ) reportMatcher ( List , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

48
Tree	{ return reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 5

49
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher ( List ) ; }
Distance : 12

50
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

51
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

52
Tree	{
Code	{
Distance : 5

53
Tree	{ return; reportMatcher ( Any.ANY ) ; returnList () ; }
Code	{ return; reportMatcher ( Any.ANY ) ; returnList () ; }
Distance : 7

54
Tree	{ return ( List ) List . anyList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . anyList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 15

55
Tree	{ return ( List ) List . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . returnList () . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

56
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

57
Tree	{ return this . List ; } class
Code	{ return this . List ; } class
Distance : 4

58
Tree	{ return this . List ; } notifyListeners
Code	{ return this . List ; } notifyListeners
Distance : 4

59
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; anyList () ; }
Code	{ super ( List ) ; anyList ( Any.ANY ) ; anyList () ; }
Distance : 10

60
Tree	{ return returnList ( List ) . returnList () ; }
Code	{ return returnList ( List ) . returnList () ; }
Distance : 6

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

62
Tree	{ List = List . returnList ( List ) ; return null ; }
Code	{ List = List . returnList ( List ) ; return null ; }
Distance : 11

63
Tree	{ return ( List ) reportMatcher ( List , returnList ( Any.ANY ) ) ; }
Code	{ return ( List ) reportMatcher ( List , returnList ( Any.ANY ) ) ; }
Distance : 12

64
Tree	{ return ( List ) this . List . reportMatcher () ; }
Code	{ return ( List ) this . List . reportMatcher () ; }
Distance : 8

65
Tree	{ anyList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ anyList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

66
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

67
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 3

68
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

69
Tree	{ return anyList ( Any.ANY ) ; }
Code	{ return anyList ( Any.ANY ) ; }
Distance : 3

70
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

71
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

72
Tree	{ super ( List . reportMatcher ( List ) ) ; returnList () ; super }
Code	{ super ( List . reportMatcher ( List ) ) ; returnList () ; super }
Distance : 12

73
Tree	{ return anyList () ; }
Code	{ return anyList () ; }
Distance : 0

74
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

75
Tree	{ super ( List . reportMatcher ( List ) ) ; anyList () ; static }
Code	{ super ( List . reportMatcher ( List ) ) ; anyList () ; static }
Distance : 11

76
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Distance : 7

77
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

79
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 2

80
Tree	{ return ( List ) List . anyList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( List ) List . anyList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 13

81
Tree	{ return ( List ) reportMatcher ( List ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( List ) . reportMatcher () ; }
Distance : 9

82
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } Class
Distance : 8

83
Tree	{ return ( List ) anyList () ; }
Code	{ return ( List ) anyList () ; }
Distance : 3

84
Tree	{ anyList ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

85
Tree	{ reportMatcher ( Any.ANY ) ; anyList () ; }
Code	{ reportMatcher ( Any.ANY ) ; anyList () ; }
Distance : 5

86
Tree	{ super ( List . returnList ( List ) ) ; anyList () ; }
Code	{ super ( List . returnList ( List ) ) ; anyList () ; }
Distance : 10

87
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

88
Tree	{ return ( List ) reportMatcher ( List ) ; }
Code	{ return ( List ) reportMatcher ( List ) ; }
Distance : 7

89
Tree	{ return ( List ) reportMatcher ( List ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( List ) . returnList () ; }
Distance : 9

90
Tree	{ reportMatcher ( Any.ANY ) ; anyList () ; super }
Code	{ reportMatcher ( Any.ANY ) ; anyList () ; super }
Distance : 6

91
Tree	{ return returnList ( this , List ) ; }
Code	{ return returnList ( this , List ) ; }
Distance : 6

92
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; returnList () ; }
Code	{ super ( List ) ; anyList ( Any.ANY ) ; returnList () ; }
Distance : 10

93
Tree	{ return ( List ) List . anyList ( returnList ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( List ) List . anyList ( returnList ( Any.ANY ) , Any.ANY ) ; }
Distance : 13

94
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

95
Tree	{ List . reportMatcher ( List ) ; return null ; }
Code	{ List . reportMatcher ( List ) ; return null ; }
Distance : 9

96
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 7

97
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 3

98
Tree	{ super ( List . returnList ( List ) ) ; returnList () ; }
Code	{ super ( List . returnList ( List ) ) ; returnList () ; }
Distance : 11

99
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

100
Tree	{ return ( List ) List . returnList ( returnList ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( List ) List . returnList ( returnList ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

101
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; anyList () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; anyList () ; }
Distance : 10

102
Tree	{ reportMatcher ( Any.ANY ) ; return this . List ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return this . List ; } Class
Distance : 9

103
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 4

104
Tree	{ return ( List ) List . returnList () . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . returnList () . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 16

105
Tree	{ anyList ( Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY ) ; return null ; }
Distance : 7

106
Tree	{ return ( List ) returnList ( this , List ) ; }
Code	{ return ( List ) returnList ( this , List ) ; }
Distance : 9

107
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

108
Tree	{ return reportMatcher ( List ) . returnList () ; }
Code	{ return reportMatcher ( List ) . returnList () ; }
Distance : 6

109
Tree	{ return ( List ) returnList () ; }
Code	{ return ( List ) returnList () ; }
Distance : 4

110
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

111
Tree	{ super ( List ) ; reportMatcher () ; }
Code	{ super ( List ) ; reportMatcher () ; }
Distance : 6

112
Tree	{ reportMatcher () ; List = anyList ( Any.ANY ) . anyList () ; }
Code	{ reportMatcher () ; List = anyList ( Any.ANY ) . anyList () ; }
Distance : 10

113
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; assertFalse }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; assertFalse }
Distance : 7

114
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

115
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

116
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; static }
Distance : 7

117
Tree	{ return ( List ) anyList ( this , List ) ; }
Code	{ return ( List ) anyList ( this , List ) ; }
Distance : 8

118
Tree	{ return ( List ) returnList ( List , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( List ) returnList ( List , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

119
Tree	{ List . anyList ( List , STRING_CONSTANT ) ; return null ; }
Code	{ List . anyList ( List , STRING_CONSTANT ) ; return null ; }
Distance : 10

120
Tree	{ super ( List ) ; anyList () ; }
Code	{ super ( List ) ; anyList () ; }
Distance : 5

121
Tree	{ return List ; }
Code	{ return List ; }
Distance : 2

122
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 6

123
Tree	{ reportMatcher () ; List = reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ reportMatcher () ; List = reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 10

124
Tree	{ super ( List ) ; returnList () ; }
Code	{ super ( List ) ; returnList () ; }
Distance : 6

125
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

126
Tree	{ returnList ( Any.ANY ) ; return this . List ; }
Code	{ returnList ( Any.ANY ) ; return this . List ; }
Distance : 8

127
Tree	{ super ( List . reportMatcher ( List ) ) ; anyList () ; Object }
Code	{ super ( List . reportMatcher ( List ) ) ; anyList () ; Object }
Distance : 11

128
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

129
Tree	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnList ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 9

130
Tree	{ return List . returnList ( List ) ; }
Code	{ return List . returnList ( List ) ; }
Distance : 6

131
Tree	{ return ( List ) anyList ( Any.ANY ) ; }
Code	{ return ( List ) anyList ( Any.ANY ) ; }
Distance : 6

132
Tree	{ return ( List ) List . anyList () ; }
Code	{ return ( List ) List . anyList () ; }
Distance : 5

133
Tree	{ return ( List ) List . returnList () ; }
Code	{ return ( List ) List . returnList () ; }
Distance : 6

134
Tree	{ return ( List ) returnList ( Any.ANY , List . anyList () ) ; }
Code	{ return ( List ) returnList ( Any.ANY , List . anyList () ) ; }
Distance : 10

135
Tree	{ return ( List ) reportMatcher ( List ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( List ) . anyList () ; }
Distance : 8

136
Tree	{ List . returnList ( List , STRING_CONSTANT ) ; return null ; }
Code	{ List . returnList ( List , STRING_CONSTANT ) ; return null ; }
Distance : 11

137
Tree	{ return ( List ) List . reportMatcher () ; }
Code	{ return ( List ) List . reportMatcher () ; }
Distance : 6

138
Tree	{ return ( List ) reportMatcher ( List . reportMatcher () ) ; }
Code	{ return ( List ) reportMatcher ( List . reportMatcher () ) ; }
Distance : 9

139
Tree	{ returnList () ; return null ; }
Code	{ returnList () ; return null ; }
Distance : 5

140
Tree	{ return ( List ) returnList ( Any.ANY , List . returnList () ) ; }
Code	{ return ( List ) returnList ( Any.ANY , List . returnList () ) ; }
Distance : 11

141
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList ( List ) ; }
Distance : 12

142
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; }
Distance : 12

143
Tree	{ List . reportMatcher ( List , STRING_CONSTANT ) ; return null ; }
Code	{ List . reportMatcher ( List , STRING_CONSTANT ) ; return null ; }
Distance : 11

144
Tree	{ List = List . reportMatcher ( List ) ; return return; ; }
Code	{ List = List . reportMatcher ( List ) ; return return; ; }
Distance : 11

145
Tree	{ return ( List ) this . List . anyList () ; } Class
Code	{ return ( List ) this . List . anyList () ; } Class
Distance : 8

146
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; returnList () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; returnList () ; }
Distance : 11

147
Tree	{ anyList ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ anyList ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

148
Tree	{ return List . reportMatcher ( List ) ; }
Code	{ return List . reportMatcher ( List ) ; }
Distance : 6

149
Tree	{ return ( List ) List . returnList ( List ) . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . returnList ( List ) . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 18

150
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

151
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

152
Tree	{ List . reportMatcher ( List ) ; return return; ; }
Code	{ List . reportMatcher ( List ) ; return return; ; }
Distance : 9

153
Tree	{ List . reportMatcher ( List , STRING_CONSTANT ) ; return return; ; }
Code	{ List . reportMatcher ( List , STRING_CONSTANT ) ; return return; ; }
Distance : 11

154
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; } Class
Code	{ super ( List ) ; anyList ( Any.ANY ) ; } Class
Distance : 9

155
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 9

156
Tree	{ List . anyList ( List ) ; return null ; }
Code	{ List . anyList ( List ) ; return null ; }
Distance : 8

157
Tree	{ List . returnList ( List ) ; return null ; }
Code	{ List . returnList ( List ) ; return null ; }
Distance : 9

158
Tree	private
Code	private
Distance : 6

159
Tree	{ return List . anyList ( List ) ; }
Code	{ return List . anyList ( List ) ; }
Distance : 5

160
Tree	{ super ( List ) ; anyList ( Any.ANY ) ; }
Code	{ super ( List ) ; anyList ( Any.ANY ) ; }
Distance : 8

161
Tree	{ return ( List ) reportMatcher ( List . returnList () ) ; }
Code	{ return ( List ) reportMatcher ( List . returnList () ) ; }
Distance : 9

162
Tree	{ anyList ( Any.ANY ) ; returnList () ; }
Code	{ anyList ( Any.ANY ) ; returnList () ; }
Distance : 6

163
Tree	{ return ( List ) List . reportMatcher ( List ) ; }
Code	{ return ( List ) List . reportMatcher ( List ) ; }
Distance : 9

164
Tree	{ return ( List ) reportMatcher ( List , List . reportMatcher () - NUMBER_CONSTANT ) ; }
Code	{ return ( List ) reportMatcher ( List , List . reportMatcher () - NUMBER_CONSTANT ) ; }
Distance : 13

165
Tree	{ return ( List ) reportMatcher ( List , anyList ( Any.ANY ) ) ; }
Code	{ return ( List ) reportMatcher ( List , anyList ( Any.ANY ) ) ; }
Distance : 11

166
Tree	{ return ( List ) returnList ( List . anyList () ) ; }
Code	{ return ( List ) returnList ( List . anyList () ) ; }
Distance : 8

167
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 9

168
Tree	{ return ( List ) List . anyList ( List ) ; } Class
Code	{ return ( List ) List . anyList ( List ) ; } Class
Distance : 9

169
Tree	{ return ( List ) reportMatcher ( List , List . returnList () - NUMBER_CONSTANT ) ; }
Code	{ return ( List ) reportMatcher ( List , List . returnList () - NUMBER_CONSTANT ) ; }
Distance : 13

170
Tree	{ return ( List ) this . List . anyList () ; }
Code	{ return ( List ) this . List . anyList () ; }
Distance : 7

171
Tree	{ return ( List ) returnList ( List ) ; }
Code	{ return ( List ) returnList ( List ) ; }
Distance : 7

172
Tree	{ return List ; } array
Code	{ return List ; } array
Distance : 3

173
Tree	{ return List ; } class
Code	{ return List ; } class
Distance : 3

174
Tree	{ return ( List ) List . returnList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( List ) List . returnList ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 14

175
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 4

176
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

177
Tree	{ return ( List ) reportMatcher ( Any.ANY , List . returnList () ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY , List . returnList () ) ; }
Distance : 11

178
Tree	public
Code	public
Distance : 6

179
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 8

180
Tree	{ return List . returnList ( List ) ; } Class
Code	{ return List . returnList ( List ) ; } Class
Distance : 7

181
Tree	{ reportMatcher ( Any.ANY ) ; returnList () ; assertFalse }
Code	{ reportMatcher ( Any.ANY ) ; returnList () ; assertFalse }
Distance : 7

182
Tree	{ return ( List ) this . List . returnList () ; }
Code	{ return ( List ) this . List . returnList () ; }
Distance : 8

183
Tree	{ return ( List ) reportMatcher ( List . anyList () ) ; }
Code	{ return ( List ) reportMatcher ( List . anyList () ) ; }
Distance : 8

184
Tree	{ return ( List ) reportMatcher ( this , List ) ; } Class
Code	{ return ( List ) reportMatcher ( this , List ) ; } Class
Distance : 10

185
Tree	{ return ( List ) reportMatcher () ; } Class
Code	{ return ( List ) reportMatcher () ; } Class
Distance : 5

186
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

187
Tree	{ return ( List ) List . anyList ( List ) . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . anyList ( List ) . anyList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 18

188
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 5

189
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

190
Tree	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 7

191
Tree	{ return ( List ) reportMatcher ( List ) ; } Class
Code	{ return ( List ) reportMatcher ( List ) ; } Class
Distance : 8

192
Tree	{ List = List . reportMatcher ( List ) ; return null ; }
Code	{ List = List . reportMatcher ( List ) ; return null ; }
Distance : 11

193
Tree	{ return ( List ) List . anyList ( List ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( List ) List . anyList ( List ) . returnList ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 18

194
Tree	{ super ( List . reportMatcher ( List ) ) ; anyList () ; super }
Code	{ super ( List . reportMatcher ( List ) ) ; anyList () ; super }
Distance : 11

195
Tree	{ return ( List ) returnList ( List , List . anyList () - NUMBER_CONSTANT ) ; }
Code	{ return ( List ) returnList ( List , List . anyList () - NUMBER_CONSTANT ) ; }
Distance : 12

196
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

197
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 5

198
Tree	{ return List ; } notifyListeners
Code	{ return List ; } notifyListeners
Distance : 3

199
Tree	{ return ( List ) List . anyList () ; } Class
Code	{ return ( List ) List . anyList () ; } Class
Distance : 6

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = null ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; return }
Distance : 12

2
Tree	{ super ( List ) ; returnList ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( List ) ; returnList ( NUMBER_CONSTANT ) ; } Class
Distance : 13

3
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; null }
Distance : 9

4
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 11

5
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; super }
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; super }
Distance : 10

6
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

7
Tree	{ super ( List ) ; returnList ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( List ) ; returnList ( NUMBER_CONSTANT ) ; } Test
Distance : 13

8
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; throw }
Distance : 12

10
Tree	{ List = returnList ( Any.ANY ) . returnList () ; }
Code	{ List = returnList ( Any.ANY ) . returnList () ; }
Distance : 9

11
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Distance : 12

12
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; List = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; List = Any.ANY ; }
Distance : 12

13
Tree	{ return returnList ( returnList ( Any.ANY ) ) ; }
Code	{ return returnList ( returnList ( Any.ANY ) ) ; }
Distance : 9

14
Tree	{ return returnList ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

15
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = List ; }
Distance : 12

16
Tree	{ return returnList ( List . returnList () ) ; }
Code	{ return returnList ( List . returnList () ) ; }
Distance : 9

17
Tree	{ returnList ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ returnList ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = super(); ; }
Distance : 11

19
Tree	{ returnList ( Any.ANY ) . returnList () ; this . List = List ; }
Code	{ returnList ( Any.ANY ) . returnList () ; this . List = List ; }
Distance : 13

20
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = null ; }
Distance : 11

21
Tree	{ return List ; } array
Code	{ return List ; } array
Distance : 13

22
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

23
Tree	{ List = reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ List = reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

24
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = true ; }
Distance : 11

25
Tree	{ reportMatcher ( Any.ANY ) ; List = false ; }
Code	{ reportMatcher ( Any.ANY ) ; List = false ; }
Distance : 11

26
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; continue; }
Distance : 9

27
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 12

28
Tree	{ return ( List ) returnList () ; }
Code	{ return ( List ) returnList () ; }
Distance : 8

29
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 10

30
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; super }
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super = {} ; }
Distance : 11

32
Tree	{ super ( List ) ; } notifyListeners
Code	{ super ( List ) ; } notifyListeners
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Test
Distance : 12

34
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; super }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; super }
Distance : 13

35
Tree	{ super ( List ) ; } class
Code	{ super ( List ) ; } class
Distance : 12

36
Tree	{ return reportMatcher ( List . reportMatcher () ) ; }
Code	{ return reportMatcher ( List . reportMatcher () ) ; }
Distance : 8

37
Tree	{ return ( List ) returnList () ; } Test
Code	{ return ( List ) returnList () ; } Test
Distance : 9

38
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

39
Tree	{ reportMatcher () ; List = Any.ANY . returnList () ; }
Code	{ reportMatcher () ; List = Any.ANY . returnList () ; }
Distance : 9

40
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = null ; }
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = false ; }
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = Any.ANY ; }
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = false ; }
Distance : 11

44
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

45
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = true ; }
Distance : 11

47
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

48
Tree	{ return List ; }
Code	{ return List ; }
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Distance : 8

50
Tree	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

51
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; return = super ; }
Distance : 11

52
Tree	{ return this . List ; } notifyListeners
Code	{ return this . List ; } notifyListeners
Distance : 13

53
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super = super ; }
Distance : 11

55
Tree	{ super ( List ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( List ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

56
Tree	{ return reportMatcher ( Any.ANY ) . < List > returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < List > returnList () ; }
Distance : 8

57
Tree	{ returnList ( Any.ANY ) . returnList () ; this . List = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . returnList () ; this . List = Any.ANY ; }
Distance : 13

58
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; getMethodProxy }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; getMethodProxy }
Distance : 13

59
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

60
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

61
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

62
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

63
Tree	{ returnList ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Distance : 10

64
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

65
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

66
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; super }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; super }
Distance : 10

67
Tree	{ super ( List ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

68
Tree	{ returnList ( Any.ANY ) . returnList () ; List = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . returnList () ; List = Any.ANY ; }
Distance : 12

69
Tree	private
Code	private
Distance : 17

70
Tree	{ super(); }
Code	{ super(); }
Distance : 15

71
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = null ; }
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; return; }
Distance : 9

74
Tree	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = false ; }
Distance : 11

76
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

77
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

78
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

79
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

80
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

81
Tree	{ super ( List ) ; } array
Code	{ super ( List ) ; } array
Distance : 12

82
Tree	{ super ( List ) ; returnList () ; } Class
Code	{ super ( List ) ; returnList () ; } Class
Distance : 10

83
Tree	{ returnList ( Any.ANY ) ; List = true ; }
Code	{ returnList ( Any.ANY ) ; List = true ; }
Distance : 12

84
Tree	{ return reportMatcher ( List . returnList () ) ; }
Code	{ return reportMatcher ( List . returnList () ) ; }
Distance : 8

85
Tree	{ returnList ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Distance : 12

86
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = false ; }
Distance : 12

88
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

89
Tree	{ return returnList ( Any.ANY , Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY , Any.ANY ) . returnList () ; }
Distance : 8

90
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 11

91
Tree	{ returnList ( Any.ANY ) . returnList () ; }
Code	{ returnList ( Any.ANY ) . returnList () ; }
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super = else ; }
Distance : 11

93
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

94
Tree	{ List = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ List = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

95
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

96
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; return }
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; return }
Distance : 10

97
Tree	{ return; reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 11

98
Tree	{ return returnList ( List . reportMatcher () ) ; }
Code	{ return returnList ( List . reportMatcher () ) ; }
Distance : 9

99
Tree	{ return this . List ; } array
Code	{ return this . List ; } array
Distance : 13

100
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . List = true ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) ; List = true ; }
Code	{ reportMatcher ( Any.ANY ) ; List = true ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = Any.ANY ; }
Distance : 11

104
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } Class
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } Class
Distance : 13

105
Tree	{ reportMatcher () ; List = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; List = Any.ANY . reportMatcher () ; }
Distance : 10

106
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; return }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; return }
Distance : 10

107
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnList () ; }
Distance : 7

108
Tree	{ return reportMatcher ( returnList ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnList ( Any.ANY ) ) ; }
Distance : 8

109
Tree	{ returnList ( Any.ANY ) ; return true ; }
Code	{ returnList ( Any.ANY ) ; return true ; }
Distance : 12

110
Tree	{ return; }
Code	{ return; }
Distance : 15

111
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

112
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

113
Tree	{ return this . List ; }
Code	{ return this . List ; }
Distance : 12

114
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

115
Tree	{ return ( List ) returnList ( Any.ANY ) ; } Class
Code	{ return ( List ) returnList ( Any.ANY ) ; } Class
Distance : 11

116
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

117
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = Any.ANY ; }
Distance : 11

118
Tree	{ returnList () ; List = Any.ANY . reportMatcher () ; }
Code	{ returnList () ; List = Any.ANY . reportMatcher () ; }
Distance : 11

119
Tree	{ returnList ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Code	{ returnList ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Distance : 9

120
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

121
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; return NUMBER_CONSTANT ; }
Distance : 11

122
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; }
Distance : 9

123
Tree	{ super ( List ) ; reportMatcher () ; }
Code	{ super ( List ) ; reportMatcher () ; }
Distance : 10

124
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

125
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; Any.ANY = false ; }
Distance : 11

126
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

127
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; fireChangeEvent }
Distance : 12

128
Tree	{ return List ; } notifyListeners
Code	{ return List ; } notifyListeners
Distance : 13

129
Tree	{ List = returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ List = returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

130
Tree	{ return returnList ( Any.ANY ) . < List > returnList () ; }
Code	{ return returnList ( Any.ANY ) . < List > returnList () ; }
Distance : 9

131
Tree	{ null reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 11

132
Tree	{ super ( List ) ; returnList () ; }
Code	{ super ( List ) ; returnList () ; }
Distance : 9

133
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

134
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; List = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; List = return; ; }
Distance : 11

135
Tree	{ return List ; } class
Code	{ return List ; } class
Distance : 13

136
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

137
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; this . List = Any.ANY ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; this . List = Any.ANY ; }
Distance : 13

138
Tree	{ returnList ( Any.ANY ) ; List = false ; }
Code	{ returnList ( Any.ANY ) ; List = false ; }
Distance : 12

139
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

140
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } Test
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } Test
Distance : 13

141
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = Any.ANY ; }
Distance : 12

142
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

143
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

144
Tree	{ return this . List ; } class
Code	{ return this . List ; } class
Distance : 13

145
Tree	{ return ( List ) returnList () ; } Class
Code	{ return ( List ) returnList () ; } Class
Distance : 9

146
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

147
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 11

148
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 9

149
Tree	{ returnList () ; List = Any.ANY . returnList () ; }
Code	{ returnList () ; List = Any.ANY . returnList () ; }
Distance : 10

150
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; super(); }
Distance : 9

151
Tree	{ super ( List ) ; returnList ( NUMBER_CONSTANT ) ; }
Code	{ super ( List ) ; returnList ( NUMBER_CONSTANT ) ; }
Distance : 12

152
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Distance : 9

153
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

154
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

155
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = super(); ; }
Distance : 12

157
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

158
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

159
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

160
Tree	{ throw returnList ( Any.ANY ) ; }
Code	{ throw returnList ( Any.ANY ) ; }
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; List = true ; }
Distance : 11

162
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

163
Tree	protected
Code	protected
Distance : 17

164
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

165
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

166
Tree	{
Code	{
Distance : 16

167
Tree	{ super ( List ) ; returnList () ; } Test
Code	{ super ( List ) ; returnList () ; } Test
Distance : 10

168
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

169
Tree	public
Code	public
Distance : 17

170
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

171
Tree	{ null }
Code	{ null }
Distance : 15

172
Tree	{ return ( List ) returnList ( Any.ANY ) ; } Test
Code	{ return ( List ) returnList ( Any.ANY ) ; } Test
Distance : 11

173
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

174
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

175
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

176
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

177
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

178
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

179
Tree	{ super ( List ) ; }
Code	{ super ( List ) ; }
Distance : 11

180
Tree	{ continue; }
Code	{ continue; }
Distance : 15

181
Tree	{ return returnList ( Any.ANY ) . < List > reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . < List > reportMatcher () ; }
Distance : 10

182
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

183
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 10

184
Tree	{ returnList ( Any.ANY ) ; return false ; }
Code	{ returnList ( Any.ANY ) ; return false ; }
Distance : 12

185
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; }
Distance : 11

186
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

187
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

188
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

189
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

190
Tree	{ return returnList ( Any.ANY ) ; }
Code	{ return returnList ( Any.ANY ) ; }
Distance : 11

191
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

192
Tree	{ return returnList ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnList ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

193
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

194
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = true ; }
Distance : 12

195
Tree	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = continue; ; }
Code	{ reportMatcher ( Any.ANY ) . returnList () ; this . List = continue; ; }
Distance : 12

196
Tree	{ returnList ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Code	{ returnList ( Any.ANY ) . reportMatcher () ; this . List = List ; }
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

198
Tree	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . List = Any.ANY ; } Class
Distance : 12

199
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 8

1
Tree	{ returnString ( Any.ANY ) . returnString () ; this . String = Any.ANY ; }
Code	{ returnString ( Any.ANY ) . returnString () ; this . String = Any.ANY ; }
Distance : 13

2
Tree	{ return String ; } array
Code	{ return String ; } array
Distance : 13

3
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

4
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; null }
Distance : 9

5
Tree	{ reportMatcher () ; String = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; String = Any.ANY . reportMatcher () ; }
Distance : 10

6
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

7
Tree	{ return String ; } class
Code	{ return String ; } class
Distance : 13

8
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = null ; }
Distance : 11

9
Tree	{ reportMatcher () ; String = Any.ANY . returnString () ; }
Code	{ reportMatcher () ; String = Any.ANY . returnString () ; }
Distance : 9

10
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

11
Tree	{ super ( String ) ; returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 10

12
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

13
Tree	{ returnString ( Any.ANY ) . returnString () ; this . String = String ; }
Code	{ returnString ( Any.ANY ) . returnString () ; this . String = String ; }
Distance : 13

14
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; this . String = Any.ANY ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; this . String = Any.ANY ; }
Distance : 13

15
Tree	{ returnString ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Code	{ returnString ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Distance : 10

16
Tree	{ super ( String ) ; }
Code	{ super ( String ) ; }
Distance : 11

17
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = Any.ANY ; }
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Distance : 12

19
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) ; String = true ; }
Code	{ reportMatcher ( Any.ANY ) ; String = true ; }
Distance : 11

21
Tree	{ return returnString ( String . returnString () ) ; }
Code	{ return returnString ( String . returnString () ) ; }
Distance : 9

22
Tree	{ return returnString ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 10

23
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; continue; }
Distance : 9

24
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; Any.ANY = false ; }
Distance : 11

25
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

26
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 11

27
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 11

28
Tree	{ return reportMatcher ( String . returnString () ) ; }
Code	{ return reportMatcher ( String . returnString () ) ; }
Distance : 8

29
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

30
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; }
Distance : 12

31
Tree	{ return returnString () ; }
Code	{ return returnString () ; }
Distance : 11

32
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

33
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

34
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

35
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; throw }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; throw }
Distance : 13

36
Tree	{ String = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ String = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

37
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; return; }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; return; }
Distance : 13

38
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Test
Distance : 12

39
Tree	{ super ( String ) ; } class
Code	{ super ( String ) ; } class
Distance : 12

40
Tree	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; return }
Code	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; return }
Distance : 10

41
Tree	{ return returnString ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnString ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

42
Tree	public
Code	public
Distance : 17

43
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

44
Tree	{ return ( String ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

45
Tree	{ return ( String ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) ; }
Distance : 10

46
Tree	{ String = returnString ( Any.ANY ) . returnString () ; }
Code	{ String = returnString ( Any.ANY ) . returnString () ; }
Distance : 9

47
Tree	protected
Code	protected
Distance : 17

48
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

49
Tree	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; }
Distance : 9

50
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = Any.ANY ; }
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

52
Tree	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

53
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; super(); }
Distance : 9

54
Tree	{ returnString ( Any.ANY ) . returnString () ; return NUMBER_CONSTANT ; }
Code	{ returnString ( Any.ANY ) . returnString () ; return NUMBER_CONSTANT ; }
Distance : 12

55
Tree	{ returnString ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Code	{ returnString ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Distance : 9

56
Tree	{ continue; }
Code	{ continue; }
Distance : 15

57
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Distance : 9

58
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 7

59
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

60
Tree	{ returnString ( Any.ANY ) . returnString () ; String = Any.ANY ; }
Code	{ returnString ( Any.ANY ) . returnString () ; String = Any.ANY ; }
Distance : 12

61
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; throw }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; throw }
Distance : 13

62
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; throw }
Distance : 12

63
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnString () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnString () ; }
Distance : 7

64
Tree	private
Code	private
Distance : 17

65
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = null ; }
Distance : 11

66
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

67
Tree	{ returnString () ; String = Any.ANY . reportMatcher () ; }
Code	{ returnString () ; String = Any.ANY . reportMatcher () ; }
Distance : 11

68
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

69
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

70
Tree	{ return this . String ; }
Code	{ return this . String ; }
Distance : 12

71
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; }
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; }
Distance : 8

72
Tree	{ return ( String ) reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 8

73
Tree	{ super ( String ) ; } notifyListeners
Code	{ super ( String ) ; } notifyListeners
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

75
Tree	{ super ( String ) ; } array
Code	{ super ( String ) ; } array
Distance : 12

76
Tree	{ return returnString ( String . reportMatcher () ) ; }
Code	{ return returnString ( String . reportMatcher () ) ; }
Distance : 9

77
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; return; }
Distance : 9

78
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

79
Tree	{ returnString ( Any.ANY ) ; return false ; }
Code	{ returnString ( Any.ANY ) ; return false ; }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = super(); ; }
Distance : 12

81
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 11

82
Tree	{ null }
Code	{ null }
Distance : 15

83
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

84
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

85
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; super = else ; }
Distance : 11

86
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 9

87
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Distance : 8

88
Tree	{ return; reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 11

89
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; Any.ANY = true ; }
Distance : 11

90
Tree	{ returnString ( Any.ANY ) . returnString () ; }
Code	{ returnString ( Any.ANY ) . returnString () ; }
Distance : 9

91
Tree	{ null reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 11

92
Tree	{ return reportMatcher ( returnString ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnString ( Any.ANY ) ) ; }
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = false ; }
Distance : 11

94
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

95
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

96
Tree	{ return reportMatcher ( String . reportMatcher () ) ; }
Code	{ return reportMatcher ( String . reportMatcher () ) ; }
Distance : 8

97
Tree	{ super(); }
Code	{ super(); }
Distance : 15

98
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

99
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

100
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

101
Tree	{ return returnString ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnString ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

102
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

103
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = Any.ANY ; }
Distance : 11

104
Tree	{ returnString ( Any.ANY ) . returnString () ; this . String = false ; }
Code	{ returnString ( Any.ANY ) . returnString () ; this . String = false ; }
Distance : 13

105
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = null ; }
Distance : 12

106
Tree	{ return this . String ; } array
Code	{ return this . String ; } array
Distance : 13

107
Tree	{ return returnString ( Any.ANY ) . returnString () ; }
Code	{ return returnString ( Any.ANY ) . returnString () ; }
Distance : 8

108
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; return = super ; }
Distance : 11

109
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; super }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; super }
Distance : 10

110
Tree	{ return ( String ) returnString () ; } Test
Code	{ return ( String ) returnString () ; } Test
Distance : 9

111
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

112
Tree	{ returnString ( Any.ANY ) ; String = false ; }
Code	{ returnString ( Any.ANY ) ; String = false ; }
Distance : 12

113
Tree	{ returnString ( Any.ANY ) ; this . String = Any.ANY ; }
Code	{ returnString ( Any.ANY ) ; this . String = Any.ANY ; }
Distance : 12

114
Tree	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; super }
Code	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; super }
Distance : 10

115
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = false ; }
Distance : 12

116
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Distance : 11

117
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

118
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; super = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; super = false ; }
Distance : 11

119
Tree	{ returnString ( Any.ANY ) . returnString () ; String = false ; }
Code	{ returnString ( Any.ANY ) . returnString () ; String = false ; }
Distance : 12

120
Tree	{ return; }
Code	{ return; }
Distance : 15

121
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

122
Tree	{ returnString ( Any.ANY ) ; String = true ; }
Code	{ returnString ( Any.ANY ) ; String = true ; }
Distance : 12

123
Tree	{ returnString () ; String = Any.ANY . returnString () ; }
Code	{ returnString () ; String = Any.ANY . returnString () ; }
Distance : 10

124
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

125
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; return NUMBER_CONSTANT ; }
Distance : 11

126
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = return; ; }
Distance : 12

127
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; return; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; return; }
Distance : 13

128
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; return }
Distance : 12

129
Tree	{ return returnString ( returnString ( Any.ANY ) ) ; }
Code	{ return returnString ( returnString ( Any.ANY ) ) ; }
Distance : 9

130
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

131
Tree	{ return String ; } notifyListeners
Code	{ return String ; } notifyListeners
Distance : 13

132
Tree	{ return ( String ) returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( String ) returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

133
Tree	{ returnString ( Any.ANY ) ; return true ; }
Code	{ returnString ( Any.ANY ) ; return true ; }
Distance : 12

134
Tree	{ super ( String ) ; reportMatcher () ; }
Code	{ super ( String ) ; reportMatcher () ; }
Distance : 10

135
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; String = Any.ANY ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; String = Any.ANY ; }
Distance : 12

136
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 10

137
Tree	{ String = returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ String = returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 10

138
Tree	{ return this . String ; } class
Code	{ return this . String ; } class
Distance : 13

139
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

140
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = true ; }
Distance : 11

141
Tree	{ reportMatcher ( Any.ANY ) ; String = false ; }
Code	{ reportMatcher ( Any.ANY ) ; String = false ; }
Distance : 11

142
Tree	{ return ( String ) returnString ( Any.ANY ) ; }
Code	{ return ( String ) returnString ( Any.ANY ) ; }
Distance : 10

143
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; super = super ; }
Distance : 11

144
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

145
Tree	{ return returnString ( Any.ANY ) . < String > returnString () ; }
Code	{ return returnString ( Any.ANY ) . < String > returnString () ; }
Distance : 9

146
Tree	{ throw returnString ( Any.ANY ) ; }
Code	{ throw returnString ( Any.ANY ) ; }
Distance : 12

147
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

148
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

149
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

150
Tree	{
Code	{
Distance : 16

151
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

152
Tree	{ return ( String ) returnString () ; } Class
Code	{ return ( String ) returnString () ; } Class
Distance : 9

153
Tree	{ return returnString ( Any.ANY , Any.ANY ) . returnString () ; }
Code	{ return returnString ( Any.ANY , Any.ANY ) . returnString () ; }
Distance : 8

154
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; if }
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; if }
Distance : 12

155
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

156
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; super }
Distance : 12

157
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = return; ; }
Distance : 11

158
Tree	{ returnString ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnString ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

159
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

160
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

161
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = super(); ; }
Distance : 11

162
Tree	{ return String ; }
Code	{ return String ; }
Distance : 12

163
Tree	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

164
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

165
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

166
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

167
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

168
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = String ; }
Distance : 12

170
Tree	{ super ( String ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( String ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

171
Tree	{ super ( String ) ; reportMatcher () ; } Test
Code	{ super ( String ) ; reportMatcher () ; } Test
Distance : 11

172
Tree	{ return this . String ; } notifyListeners
Code	{ return this . String ; } notifyListeners
Distance : 13

173
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

174
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

175
Tree	{ return ( String ) returnString ( Any.ANY ) ; } Class
Code	{ return ( String ) returnString ( Any.ANY ) ; } Class
Distance : 11

176
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = null ; }
Distance : 12

177
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

178
Tree	{ return ( String ) returnString ( Any.ANY ) ; } Test
Code	{ return ( String ) returnString ( Any.ANY ) ; } Test
Distance : 11

179
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; return }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; return }
Distance : 10

180
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

181
Tree	{ return ( String ) returnString () ; }
Code	{ return ( String ) returnString () ; }
Distance : 8

182
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

183
Tree	{ super ( String ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( String ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

184
Tree	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . String = Any.ANY ; } Class
Distance : 12

185
Tree	{ return reportMatcher ( Any.ANY ) . < String > returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > returnString () ; }
Distance : 8

186
Tree	{ return ( String ) reportMatcher () ; }
Code	{ return ( String ) reportMatcher () ; }
Distance : 9

187
Tree	{ super ( String ) ; returnString ( NUMBER_CONSTANT ) ; }
Code	{ super ( String ) ; returnString ( NUMBER_CONSTANT ) ; }
Distance : 12

188
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 9

189
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; String = false ; }
Distance : 11

190
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

191
Tree	{ return returnString ( Any.ANY ) ; }
Code	{ return returnString ( Any.ANY ) ; }
Distance : 11

192
Tree	{ String = reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ String = reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 9

193
Tree	{ super ( String ) ; returnString () ; }
Code	{ super ( String ) ; returnString () ; }
Distance : 9

194
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; String = Any.ANY ; }
Distance : 11

195
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . String = false ; }
Distance : 12

196
Tree	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnString () ; this . String = true ; }
Distance : 12

197
Tree	{ returnString ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Code	{ returnString ( Any.ANY ) . reportMatcher () ; this . String = String ; }
Distance : 13

198
Tree	{ super ( String ) ; reportMatcher () ; } Class
Code	{ super ( String ) ; reportMatcher () ; } Class
Distance : 11

199
Tree	{ super ( String ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( String ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 8

1
Tree	{ return this . T . reportMatcher () ; } Class
Code	{ return this . T . reportMatcher () ; } Class
Distance : 9

2
Tree	{ return ( T ) anyObject ( anyObject ( T ) ) ; }
Code	{ return ( T ) anyObject ( anyObject ( T ) ) ; }
Distance : 6

3
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 11

4
Tree	{ return ( T ) T . reportMatcher ( T , ( Object [] ) null ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( Object [] ) null ) ; }
Distance : 10

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 4

6
Tree	private final double reportMatcher () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private final double reportMatcher () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 9

7
Tree	{ return T . reportMatcher ( T ) ; } Class
Code	{ return T . reportMatcher ( T ) ; } Class
Distance : 7

8
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 2

9
Tree	private int reportMatcher () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private int reportMatcher () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 8

10
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 10

11
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 9

12
Tree	{ return this . T . reportMatcher () ; }
Code	{ return this . T . reportMatcher () ; }
Distance : 8

13
Tree	{ return Any.ANY . anyObject () ; }
Code	{ return Any.ANY . anyObject () ; }
Distance : 7

14
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

16
Tree	{ return ( T [] ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T [] ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 5

17
Tree	{ return this . T . returnNull () ; }
Code	{ return this . T . returnNull () ; }
Distance : 7

18
Tree	{ return ( double [] ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( double [] ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 5

19
Tree	{ return ( T ) reportMatcher () ; } Class
Code	{ return ( T ) reportMatcher () ; } Class
Distance : 6

20
Tree	{ return ( T [] ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T [] ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

21
Tree	{ return T . returnNull ( T ) ; }
Code	{ return T . returnNull ( T ) ; }
Distance : 7

22
Tree	{ return ( T [] ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T [] ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

23
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 5

24
Tree	{ return anyObject ( T . reportMatcher () ) ; }
Code	{ return anyObject ( T . reportMatcher () ) ; }
Distance : 7

25
Tree	{ return ( T [] ) T . anyObject ( T ) ; }
Code	{ return ( T [] ) T . anyObject ( T ) ; }
Distance : 8

26
Tree	{ return T . returnNull ( null ) ; }
Code	{ return T . returnNull ( null ) ; }
Distance : 7

27
Tree	{ return T . anyObject () ; }
Code	{ return T . anyObject () ; }
Distance : 7

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( ( Object [] ) null ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( ( Object [] ) null ) ; }
Distance : 8

29
Tree	{ return ( T ) anyObject () . reportMatcher ( reportMatcher ( T ) ) ; }
Code	{ return ( T ) anyObject () . reportMatcher ( reportMatcher ( T ) ) ; }
Distance : 8

30
Tree	{ return this . T ; } class
Code	{ return this . T ; } class
Distance : 10

31
Tree	{ return this . T ; } array
Code	{ return this . T ; } array
Distance : 10

32
Tree	{ return ( T ) anyObject ( reportMatcher ( T ) ) ; }
Code	{ return ( T ) anyObject ( reportMatcher ( T ) ) ; }
Distance : 6

33
Tree	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 7

34
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 1

35
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 3

36
Tree	{ return reportMatcher () . < T > returnNull () ; }
Code	{ return reportMatcher () . < T > returnNull () ; }
Distance : 8

37
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 4

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Any.ANY ) ; }
Distance : 3

39
Tree	{ return ( T ) T . returnNull ( T , ( Object [] ) null ) ; }
Code	{ return ( T ) T . returnNull ( T , ( Object [] ) null ) ; }
Distance : 11

40
Tree	{ return ( T ) anyObject ( T , anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) anyObject ( T , anyObject ( Any.ANY ) ) ; }
Distance : 8

41
Tree	{ return reportMatcher ( T ) . < T > returnNull () ; }
Code	{ return reportMatcher ( T ) . < T > returnNull () ; }
Distance : 6

42
Tree	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 5

43
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 5

44
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 8

45
Tree	{ return this . T ; }
Code	{ return this . T ; }
Distance : 9

46
Tree	{ return ( T ) Any.ANY . reportMatcher () ; }
Code	{ return ( T ) Any.ANY . reportMatcher () ; }
Distance : 4

47
Tree	{ return ( T ) reportMatcher () . reportMatcher ( anyObject ( T ) ) ; }
Code	{ return ( T ) reportMatcher () . reportMatcher ( anyObject ( T ) ) ; }
Distance : 8

48
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 10

49
Tree	{ return ( T ) reportMatcher ( reportMatcher ( T ) ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ( T ) ) ; }
Distance : 5

50
Tree	{ return ( T ) reportMatcher () . reportMatcher ( reportMatcher ( T ) ) ; }
Code	{ return ( T ) reportMatcher () . reportMatcher ( reportMatcher ( T ) ) ; }
Distance : 8

51
Tree	private double returnNull () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	private double returnNull () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 7

52
Tree	{ return ( T ) T . returnNull ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) anyObject () ) ; }
Distance : 10

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

54
Tree	{ return ( T ) reportMatcher ( T , anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , anyObject ( Any.ANY ) ) ; }
Distance : 7

55
Tree	{ return reportMatcher ( T . anyObject () ) ; }
Code	{ return reportMatcher ( T . anyObject () ) ; }
Distance : 7

56
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 10

57
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 6

58
Tree	{ return anyObject ( T ) . < T > returnNull () ; }
Code	{ return anyObject ( T ) . < T > returnNull () ; }
Distance : 6

59
Tree	{ return T . reportMatcher () ; }
Code	{ return T . reportMatcher () ; }
Distance : 7

60
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher ( Any.ANY ) ) ; }
Distance : 11

61
Tree	{ return ( T [] ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T [] ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 6

62
Tree	{ return anyObject ( T ) . < T > anyObject () ; }
Code	{ return anyObject ( T ) . < T > anyObject () ; }
Distance : 7

63
Tree	{ return ( T ) reportMatcher ( T ) . anyObject () ; }
Code	{ return ( T ) reportMatcher ( T ) . anyObject () ; }
Distance : 2

64
Tree	{ return ( T [] ) T . reportMatcher ( T ) ; }
Code	{ return ( T [] ) T . reportMatcher ( T ) ; }
Distance : 7

65
Tree	{ return ( T [] ) reportMatcher () ; }
Code	{ return ( T [] ) reportMatcher () ; }
Distance : 6

66
Tree	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Code	{ return ( T ) reportMatcher ( T . anyObject () ) ; }
Distance : 4

67
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 6

68
Tree	{ return ( T ) reportMatcher ( anyObject ( T ) ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ( T ) ) ; }
Distance : 5

69
Tree	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Distance : 2

70
Tree	{ return ( T [] ) T . returnNull () ; }
Code	{ return ( T [] ) T . returnNull () ; }
Distance : 5

71
Tree	{ return ( T ) anyObject ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) anyObject ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 7

72
Tree	{ return ( T [] ) T . reportMatcher () ; }
Code	{ return ( T [] ) T . reportMatcher () ; }
Distance : 6

73
Tree	{ return ( T ) T . anyObject ( T ) ; }
Code	{ return ( T ) T . anyObject ( T ) ; }
Distance : 7

74
Tree	{ return ( double [] ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( double [] ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 6

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 3

76
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 9

77
Tree	{ return ( T ) this . T . anyObject () ; }
Code	{ return ( T ) this . T . anyObject () ; }
Distance : 5

78
Tree	{ return T . returnNull () ; }
Code	{ return T . returnNull () ; }
Distance : 6

79
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 9

80
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 1

81
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 0

82
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( ( T [] ) null ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( ( T [] ) null ) ; }
Distance : 8

83
Tree	{ return T . reportMatcher ( T ) ; }
Code	{ return T . reportMatcher ( T ) ; }
Distance : 6

84
Tree	{ return T ; }
Code	{ return T ; }
Distance : 9

85
Tree	{ return ( T ) T . anyObject () ; }
Code	{ return ( T ) T . anyObject () ; }
Distance : 5

86
Tree	{ anyObject ( Any.ANY ) ; return null ; }
Code	{ anyObject ( Any.ANY ) ; return null ; }
Distance : 8

87
Tree	{ return Any.ANY . reportMatcher () ; }
Code	{ return Any.ANY . reportMatcher () ; }
Distance : 7

88
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 5

89
Tree	{ return ( T ) Any.ANY . reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) Any.ANY . reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 7

90
Tree	{ return Any.ANY . reportMatcher () ; } Class
Code	{ return Any.ANY . reportMatcher () ; } Class
Distance : 8

91
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 4

92
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 6

93
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject ( Any.ANY ) ) ; }
Distance : 11

94
Tree	{ return reportMatcher () . < T > anyObject () ; }
Code	{ return reportMatcher () . < T > anyObject () ; }
Distance : 9

95
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 7

96
Tree	{ return ( T ) anyObject ( T ) . reportMatcher () ; }
Code	{ return ( T ) anyObject ( T ) . reportMatcher () ; }
Distance : 3

97
Tree	{ return reportMatcher ( T ) . < T > anyObject () ; }
Code	{ return reportMatcher ( T ) . < T > anyObject () ; }
Distance : 7

98
Tree	{ return ( T ) T . returnNull ( T , ( T [] ) null ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T [] ) null ) ; }
Distance : 11

99
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 6

100
Tree	{ return ( T ) T . reportMatcher ( T , ( T [] ) null ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T [] ) null ) ; }
Distance : 10

101
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 5

102
Tree	{ return returnNull ( Any.ANY ) ; }
Code	{ return returnNull ( Any.ANY ) ; }
Distance : 7

103
Tree	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 4

104
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 4

105
Tree	private int reportMatcher () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	private int reportMatcher () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 7

106
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 3

107
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 4

108
Tree	{ return ( T [] ) anyObject () ; }
Code	{ return ( T [] ) anyObject () ; }
Distance : 6

109
Tree	{ return ( T ) anyObject () . reportMatcher ( anyObject ( T ) ) ; }
Code	{ return ( T ) anyObject () . reportMatcher ( anyObject ( T ) ) ; }
Distance : 8

110
Tree	{ return ( T ) Any.ANY . reportMatcher ( anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) Any.ANY . reportMatcher ( anyObject ( Any.ANY ) ) ; }
Distance : 7

111
Tree	{ return ( int [] ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( int [] ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 6

112
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 3

113
Tree	{ return ( T ) this . T . reportMatcher () ; }
Code	{ return ( T ) this . T . reportMatcher () ; }
Distance : 5

114
Tree	{ return T . anyObject ( null ) ; }
Code	{ return T . anyObject ( null ) ; }
Distance : 7

115
Tree	private double reportMatcher () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	private double reportMatcher () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 7

116
Tree	{ return ( T ) Any.ANY . anyObject () ; }
Code	{ return ( T ) Any.ANY . anyObject () ; }
Distance : 4

117
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( Any.ANY ) ; }
Distance : 5

118
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( new T () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( new T () ) ; }
Distance : 5

119
Tree	private double returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private double returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 8

120
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Any.ANY ) ; }
Distance : 4

121
Tree	{ anyObject () ; return null ; }
Code	{ anyObject () ; return null ; }
Distance : 11

122
Tree	{ return ( T ) this . T . returnNull ( T ) ; }
Code	{ return ( T ) this . T . returnNull ( T ) ; }
Distance : 7

123
Tree	{ return anyObject ( Any.ANY ) . < T > returnNull () ; }
Code	{ return anyObject ( Any.ANY ) . < T > returnNull () ; }
Distance : 7

124
Tree	{ return ( T ) Any.ANY . anyObject ( anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) Any.ANY . anyObject ( anyObject ( Any.ANY ) ) ; }
Distance : 8

125
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( Any.ANY ) ; }
Distance : 4

126
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 10

127
Tree	{ return reportMatcher ( T . returnNull () ) ; }
Code	{ return reportMatcher ( T . returnNull () ) ; }
Distance : 6

128
Tree	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher () ) ; }
Distance : 10

129
Tree	{ return reportMatcher ( Any.ANY ) . < T > anyObject () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > anyObject () ; }
Distance : 7

130
Tree	{ return reportMatcher ( T . reportMatcher () ) ; }
Code	{ return reportMatcher ( T . reportMatcher () ) ; }
Distance : 7

131
Tree	{ return ( double [] ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( double [] ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 6

132
Tree	{ return ( T ) anyObject ( T . reportMatcher () ) ; }
Code	{ return ( T ) anyObject ( T . reportMatcher () ) ; }
Distance : 5

133
Tree	{ return ( T ) T . returnNull ( T , ( T ) anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) anyObject ( Any.ANY ) ) ; }
Distance : 12

134
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 10

135
Tree	{ return T . anyObject ( T ) ; }
Code	{ return T . anyObject ( T ) ; }
Distance : 7

136
Tree	{ return T ; } notifyListeners
Code	{ return T ; } notifyListeners
Distance : 10

137
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 4

138
Tree	{ return null ; }
Code	{ return null ; }
Distance : 10

139
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) reportMatcher () ) ; }
Distance : 9

140
Tree	{ return ( T ) this . T . returnNull () ; }
Code	{ return ( T ) this . T . returnNull () ; }
Distance : 4

141
Tree	private final int returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private final int returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 9

142
Tree	{ return ( T ) Any.ANY . returnNull () ; }
Code	{ return ( T ) Any.ANY . returnNull () ; }
Distance : 3

143
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( new Object () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( new Object () ) ; }
Distance : 5

144
Tree	{ return anyObject () . < T > returnNull () ; }
Code	{ return anyObject () . < T > returnNull () ; }
Distance : 8

145
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 8

146
Tree	{ return ( T ) this . T . anyObject ( T ) ; }
Code	{ return ( T ) this . T . anyObject ( T ) ; }
Distance : 8

147
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 11

148
Tree	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Distance : 4

149
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 11

150
Tree	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) T . returnNull ( T , ( T ) reportMatcher ( Any.ANY ) ) ; }
Distance : 12

151
Tree	{ return anyObject ( Any.ANY ) . < T > anyObject () ; }
Code	{ return anyObject ( Any.ANY ) . < T > anyObject () ; }
Distance : 8

152
Tree	{ return Any.ANY . returnNull () ; }
Code	{ return Any.ANY . returnNull () ; }
Distance : 6

153
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( ( T [] ) null ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( ( T [] ) null ) ; }
Distance : 8

154
Tree	{ returnNull () ; return null ; }
Code	{ returnNull () ; return null ; }
Distance : 11

155
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 11

156
Tree	private final double returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private final double returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 9

157
Tree	{ return ( T ) T . reportMatcher () ; } Class
Code	{ return ( T ) T . reportMatcher () ; } Class
Distance : 6

158
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 4

159
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( new ArrayRealVector () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( new ArrayRealVector () ) ; }
Distance : 5

160
Tree	{ return this . T . anyObject () ; }
Code	{ return this . T . anyObject () ; }
Distance : 8

161
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

162
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 10

163
Tree	{ return ( T [] ) T . reportMatcher ( T ) ; } Class
Code	{ return ( T [] ) T . reportMatcher ( T ) ; } Class
Distance : 8

164
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 10

165
Tree	{ return ( T [] ) T . returnNull ( T ) ; }
Code	{ return ( T [] ) T . returnNull ( T ) ; }
Distance : 8

166
Tree	{ return ( T ) this . T . reportMatcher ( T ) ; }
Code	{ return ( T ) this . T . reportMatcher ( T ) ; }
Distance : 8

167
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 11

168
Tree	{ return reportMatcher () . < T > reportMatcher () ; }
Code	{ return reportMatcher () . < T > reportMatcher () ; }
Distance : 9

169
Tree	private int returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private int returnNull () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 8

170
Tree	{ return ( T ) Any.ANY . returnNull ( anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) Any.ANY . returnNull ( anyObject ( Any.ANY ) ) ; }
Distance : 8

171
Tree	{ return T . reportMatcher ( null ) ; }
Code	{ return T . reportMatcher ( null ) ; }
Distance : 6

172
Tree	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T ) anyObject () ) ; }
Distance : 9

173
Tree	{ return this . T ; } notifyListeners
Code	{ return this . T ; } notifyListeners
Distance : 10

174
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 7

175
Tree	{ return ( T [] ) T . anyObject () ; }
Code	{ return ( T [] ) T . anyObject () ; }
Distance : 6

176
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( ( T [] ) null ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( ( T [] ) null ) ; }
Distance : 7

177
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 7

178
Tree	private int returnNull () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	private int returnNull () { return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 7

179
Tree	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Distance : 1

180
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 5

181
Tree	{ return ( T [] ) T . reportMatcher () ; } Class
Code	{ return ( T [] ) T . reportMatcher () ; } Class
Distance : 7

182
Tree	private int returnNull () { return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	private int returnNull () { return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 7

183
Tree	{ return ( T ) reportMatcher ( T ) ; } Class
Code	{ return ( T ) reportMatcher ( T ) ; } Class
Distance : 5

184
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( new T () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( new T () ) ; }
Distance : 4

185
Tree	{ return T . reportMatcher ( super(); ) ; }
Code	{ return T . reportMatcher ( super(); ) ; }
Distance : 6

186
Tree	{ return ( T [] ) returnNull () ; }
Code	{ return ( T [] ) returnNull () ; }
Distance : 5

187
Tree	{ return T ; } array
Code	{ return T ; } array
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 11

189
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 10

190
Tree	{ return ( T ) T . reportMatcher ( T ) ; } Class
Code	{ return ( T ) T . reportMatcher ( T ) ; } Class
Distance : 7

191
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 10

192
Tree	{ return ( T ) Any.ANY . reportMatcher () ; } Class
Code	{ return ( T ) Any.ANY . reportMatcher () ; } Class
Distance : 5

193
Tree	{ return ( T ) this . T . reportMatcher () ; } Class
Code	{ return ( T ) this . T . reportMatcher () ; } Class
Distance : 6

194
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } Class
Distance : 4

195
Tree	private final int reportMatcher () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	private final int reportMatcher () { return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 9

196
Tree	{ return T ; } class
Code	{ return T ; } class
Distance : 10

197
Tree	{ return ( T [] ) reportMatcher () ; } Class
Code	{ return ( T [] ) reportMatcher () ; } Class
Distance : 7

198
Tree	{ return T . reportMatcher () ; } Class
Code	{ return T . reportMatcher () ; } Class
Distance : 8

199
Tree	{ return ( T ) this . T . reportMatcher ( T ) ; } Class
Code	{ return ( T ) this . T . reportMatcher ( T ) ; } Class
Distance : 9

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

1
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

2
Tree	{ super . returnFor () ; return false ; }
Code	{ super . returnFor () ; return false ; }
Distance : 16

3
Tree	{ T = reportMatcher ( T ) ; return null ; }
Code	{ T = reportMatcher ( T ) ; return null ; }
Distance : 13

4
Tree	{ return this . T . reportMatcher () ; }
Code	{ return this . T . reportMatcher () ; }
Distance : 15

5
Tree	{ clazz = reportMatcher ( T ) ; return null ; }
Code	{ clazz = reportMatcher ( T ) ; return null ; }
Distance : 14

6
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 9

7
Tree	{ return reportMatcher ( T , T ) ; }
Code	{ return reportMatcher ( T , T ) ; }
Distance : 13

8
Tree	{ super . reportMatcher () ; return false ; }
Code	{ super . reportMatcher () ; return false ; }
Distance : 16

9
Tree	{ T = ( T ) reportMatcher ( clazz ) ; setCostAccuracy }
Code	{ T = ( T ) reportMatcher ( clazz ) ; setCostAccuracy }
Distance : 12

10
Tree	{ return reportMatcher ( clazz . returnFor ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz . returnFor ( clazz ) ) ; }
Distance : 9

11
Tree	{ return T . reportMatcher ( T ) ; }
Code	{ return T . reportMatcher ( T ) ; }
Distance : 12

12
Tree	{ returnFor ( Any.ANY ) ; return null ; }
Code	{ returnFor ( Any.ANY ) ; return null ; }
Distance : 15

13
Tree	{ return returnFor ( T ) ; }
Code	{ return returnFor ( T ) ; }
Distance : 13

14
Tree	{ return ( T ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , returnFor ( Any.ANY ) ) ; }
Distance : 8

15
Tree	{ return reportMatcher ( clazz , T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( clazz , T , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

16
Tree	{ reportMatcher ( T ) ; return return; ; }
Code	{ reportMatcher ( T ) ; return return; ; }
Distance : 14

17
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 11

18
Tree	{ return reportMatcher ( T ) . returnFor ( Any.ANY ) ; }
Code	{ return reportMatcher ( T ) . returnFor ( Any.ANY ) ; }
Distance : 9

19
Tree	{ returnFor ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnFor ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

20
Tree	{ return ( clazz ) reportMatcher ( this , clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( this , clazz ) ; }
Distance : 10

21
Tree	{ return reportMatcher ( T ) . reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( T ) . reportMatcher ( clazz ) ; }
Distance : 9

22
Tree	{ return reportMatcher ( this , clazz ) ; }
Code	{ return reportMatcher ( this , clazz ) ; }
Distance : 12

23
Tree	{ return ( T ) reportMatcher ( this , T ) ; }
Code	{ return ( T ) reportMatcher ( this , T ) ; }
Distance : 10

24
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

25
Tree	{ returnFor () ; return null ; }
Code	{ returnFor () ; return null ; }
Distance : 17

26
Tree	{ super . returnFor () ; return null ; }
Code	{ super . returnFor () ; return null ; }
Distance : 16

27
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 14

28
Tree	{ return reportMatcher () . returnFor ( clazz ) ; }
Code	{ return reportMatcher () . returnFor ( clazz ) ; }
Distance : 10

29
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

30
Tree	{ return T . returnFor ( Any.ANY , Any.ANY ) ; }
Code	{ return T . returnFor ( Any.ANY , Any.ANY ) ; }
Distance : 13

31
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

32
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 9

33
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

34
Tree	{ return reportMatcher () . reportMatcher ( clazz ) ; }
Code	{ return reportMatcher () . reportMatcher ( clazz ) ; }
Distance : 11

35
Tree	{ return ( T ) reportMatcher ( this , clazz ) ; }
Code	{ return ( T ) reportMatcher ( this , clazz ) ; }
Distance : 9

36
Tree	{ super return }
Code	{ super return }
Distance : 18

37
Tree	{ return reportMatcher ( T ) . returnFor () ; }
Code	{ return reportMatcher ( T ) . returnFor () ; }
Distance : 11

38
Tree	{ return returnFor ( this , clazz ) ; }
Code	{ return returnFor ( this , clazz ) ; }
Distance : 13

39
Tree	{ return T . returnFor ( T ) . returnFor ( clazz ) ; }
Code	{ return T . returnFor ( T ) . returnFor ( clazz ) ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

41
Tree	{ return ( clazz ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 10

42
Tree	{ T = T . returnFor ( T ) ; return null ; }
Code	{ T = T . returnFor ( T ) ; return null ; }
Distance : 14

43
Tree	{ return reportMatcher ( T , clazz ) ; }
Code	{ return reportMatcher ( T , clazz ) ; }
Distance : 12

44
Tree	{ return reportMatcher () . reportMatcher ( clazz . returnFor ( clazz ) , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( clazz . returnFor ( clazz ) , false ) ; }
Distance : 11

45
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

46
Tree	{ return reportMatcher () . reportMatcher ( clazz . reportMatcher ( clazz ) , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( clazz . reportMatcher ( clazz ) , super ) ; }
Distance : 11

47
Tree	{ T = T . returnFor ( T ) ; return this . clazz ; }
Code	{ T = T . returnFor ( T ) ; return this . clazz ; }
Distance : 13

48
Tree	{ return this . T . reportMatcher ( T ) ; }
Code	{ return this . T . reportMatcher ( T ) ; }
Distance : 13

49
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( super , false ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( super , false ) ; }
Distance : 11

50
Tree	{ return ( T ) returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( clazz ) ; }
Distance : 9

51
Tree	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Distance : 13

52
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 11

53
Tree	{ super ( T . reportMatcher ( clazz ) ) ; returnFor ; }
Code	{ super ( T . reportMatcher ( clazz ) ) ; returnFor ; }
Distance : 9

54
Tree	{ return T . reportMatcher ( T ) . returnFor ( super , [] ) ; }
Code	{ return T . reportMatcher ( T ) . returnFor ( super , [] ) ; }
Distance : 10

55
Tree	{ T = T . returnFor ( T ) ; return clazz ; }
Code	{ T = T . returnFor ( T ) ; return clazz ; }
Distance : 13

56
Tree	{ return reportMatcher () . returnFor ( reportMatcher ( Any.ANY ) , false ) ; }
Code	{ return reportMatcher () . returnFor ( reportMatcher ( Any.ANY ) , false ) ; }
Distance : 12

57
Tree	{ return reportMatcher ( super , super ) ; }
Code	{ return reportMatcher ( super , super ) ; }
Distance : 13

58
Tree	{ return ( T ) reportMatcher ( T ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( T ) . returnFor ( clazz ) ; }
Distance : 5

59
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

60
Tree	{ return T . reportMatcher ( Any.ANY , Any.ANY ) ; }
Code	{ return T . reportMatcher ( Any.ANY , Any.ANY ) ; }
Distance : 12

61
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

62
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 16

63
Tree	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

64
Tree	{ return reportMatcher ( T , T , reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( T , T , reportMatcher ( clazz ) ) ; }
Distance : 11

65
Tree	{ return reportMatcher ( T ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( T ) . returnFor ( clazz ) ; }
Distance : 8

66
Tree	{ return ( T ) reportMatcher ( clazz ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) . reportMatcher ( clazz ) ; }
Distance : 5

67
Tree	{ return reportMatcher ( T , T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , T , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

68
Tree	{ reportMatcher ( T ) ; return super(); ; }
Code	{ reportMatcher ( T ) ; return super(); ; }
Distance : 14

69
Tree	{ return ( clazz ) reportMatcher ( clazz ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz ) . returnFor ( clazz ) ; }
Distance : 5

70
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 16

71
Tree	{ return clazz . returnFor ( Any.ANY , Any.ANY ) ; }
Code	{ return clazz . returnFor ( Any.ANY , Any.ANY ) ; }
Distance : 13

72
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

73
Tree	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Distance : 13

74
Tree	{ return reportMatcher ( clazz ) . returnFor ( Any.ANY ) ; }
Code	{ return reportMatcher ( clazz ) . returnFor ( Any.ANY ) ; }
Distance : 8

75
Tree	{ T = T . reportMatcher ( T ) ; return clazz ; }
Code	{ T = T . reportMatcher ( T ) ; return clazz ; }
Distance : 12

76
Tree	{ return returnFor ( T ) . returnFor ( Any.ANY ) ; }
Code	{ return returnFor ( T ) . returnFor ( Any.ANY ) ; }
Distance : 10

77
Tree	{ T = T . reportMatcher ( T ) ; return null ; }
Code	{ T = T . reportMatcher ( T ) ; return null ; }
Distance : 13

78
Tree	{ return returnFor ( this , T ) ; }
Code	{ return returnFor ( this , T ) ; }
Distance : 14

79
Tree	{ return T . reportMatcher ( T ) . returnFor ( super , false ) ; }
Code	{ return T . reportMatcher ( T ) . returnFor ( super , false ) ; }
Distance : 10

80
Tree	{ return T . reportMatcher ( T ) . returnFor ( super , returnFor ) ; }
Code	{ return T . reportMatcher ( T ) . returnFor ( super , returnFor ) ; }
Distance : 10

81
Tree	{ return ( T ) clazz . returnFor ( clazz ) ; }
Code	{ return ( T ) clazz . returnFor ( clazz ) ; }
Distance : 7

82
Tree	{ return reportMatcher ( T , clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

83
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 13

84
Tree	{ throw super }
Code	{ throw super }
Distance : 18

85
Tree	{ return reportMatcher ( T , T , returnFor ( clazz ) ) ; }
Code	{ return reportMatcher ( T , T , returnFor ( clazz ) ) ; }
Distance : 11

86
Tree	{ return T . reportMatcher ( T ) . returnFor ( super , short ) ; }
Code	{ return T . reportMatcher ( T ) . returnFor ( super , short ) ; }
Distance : 10

87
Tree	{ return returnFor () . reportMatcher ( clazz ) ; }
Code	{ return returnFor () . reportMatcher ( clazz ) ; }
Distance : 12

88
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 14

89
Tree	{ return reportMatcher () . reportMatcher ( short , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , super ) ; }
Distance : 13

90
Tree	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

91
Tree	{ return this . T . returnFor ( clazz ) ; }
Code	{ return this . T . returnFor ( clazz ) ; }
Distance : 11

92
Tree	{ super super }
Code	{ super super }
Distance : 18

93
Tree	{ return reportMatcher () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 11

94
Tree	{ super ( T . reportMatcher ( clazz ) ) ; setCostAccuracy ; }
Code	{ super ( T . reportMatcher ( clazz ) ) ; setCostAccuracy ; }
Distance : 10

95
Tree	{ return reportMatcher ( this , T ) ; }
Code	{ return reportMatcher ( this , T ) ; }
Distance : 13

96
Tree	{ return reportMatcher ( super , CHAR_CONS ) ; }
Code	{ return reportMatcher ( super , CHAR_CONS ) ; }
Distance : 13

97
Tree	{ clazz = T . returnFor ( T ) ; return clazz ; }
Code	{ clazz = T . returnFor ( T ) ; return clazz ; }
Distance : 13

98
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 16

99
Tree	{ reportMatcher ( clazz ) ; return null ; }
Code	{ reportMatcher ( clazz ) ; return null ; }
Distance : 13

100
Tree	{ return T . returnFor ( T ) ; }
Code	{ return T . returnFor ( T ) ; }
Distance : 11

101
Tree	{ return returnFor ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnFor ( Any.ANY ) . reportMatcher () ; }
Distance : 13

102
Tree	{ return T . reportMatcher ( T , clazz . returnFor ( clazz ) && reportMatcher ( Any.ANY ) ) ; }
Code	{ return T . reportMatcher ( T , clazz . returnFor ( clazz ) && reportMatcher ( Any.ANY ) ) ; }
Distance : 12

103
Tree	{ return ( clazz ) returnFor ( Any.ANY ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) ; }
Distance : 10

104
Tree	{ return reportMatcher ( clazz , T , reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz , T , reportMatcher ( clazz ) ) ; }
Distance : 11

105
Tree	{ return reportMatcher ( T ) . reportMatcher () ; }
Code	{ return reportMatcher ( T ) . reportMatcher () ; }
Distance : 12

106
Tree	{ super . reportMatcher () ; return return; ; }
Code	{ super . reportMatcher () ; return return; ; }
Distance : 16

107
Tree	{ return T . reportMatcher ( T , clazz . returnFor ( clazz ) && returnFor ( Any.ANY ) ) ; }
Code	{ return T . reportMatcher ( T , clazz . returnFor ( clazz ) && returnFor ( Any.ANY ) ) ; }
Distance : 11

108
Tree	{ return T . reportMatcher ( T , T . returnFor ( clazz ) && returnFor ( Any.ANY ) ) ; }
Code	{ return T . reportMatcher ( T , T . returnFor ( clazz ) && returnFor ( Any.ANY ) ) ; }
Distance : 11

109
Tree	{ return ( T ) reportMatcher ( clazz ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) . returnFor ( clazz ) ; }
Distance : 4

110
Tree	{ return returnFor ( Any.ANY ) . returnFor () ; }
Code	{ return returnFor ( Any.ANY ) . returnFor () ; }
Distance : 12

111
Tree	{ return this . clazz . returnFor () ; }
Code	{ return this . clazz . returnFor () ; }
Distance : 13

112
Tree	{ return reportMatcher ( clazz , T ) ; }
Code	{ return reportMatcher ( clazz , T ) ; }
Distance : 12

113
Tree	{ return T . T ( clazz ) ; }
Code	{ return T . T ( clazz ) ; }
Distance : 11

114
Tree	{ return reportMatcher ( T , T , returnFor ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , T , returnFor ( Any.ANY ) ) ; }
Distance : 12

115
Tree	{ return this . clazz . reportMatcher () ; }
Code	{ return this . clazz . reportMatcher () ; }
Distance : 14

116
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 15

117
Tree	{ return returnFor ( clazz ) ; }
Code	{ return returnFor ( clazz ) ; }
Distance : 12

118
Tree	{ T = ( T ) reportMatcher ( clazz ) ; returnMap }
Code	{ T = ( T ) reportMatcher ( clazz ) ; returnMap }
Distance : 12

119
Tree	{ clazz = T . reportMatcher ( T ) ; return this . clazz ; }
Code	{ clazz = T . reportMatcher ( T ) ; return this . clazz ; }
Distance : 12

120
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 8

121
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 6

122
Tree	{ return reportMatcher ( T , clazz , reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( T , clazz , reportMatcher ( clazz ) ) ; }
Distance : 11

123
Tree	{ return ( T ) returnFor ( Any.ANY ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) ; }
Distance : 10

124
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

125
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

126
Tree	{ return clazz . returnFor ( T ) . returnFor ( clazz ) ; }
Code	{ return clazz . returnFor ( T ) . returnFor ( clazz ) ; }
Distance : 9

127
Tree	{ return reportMatcher () . reportMatcher ( clazz . reportMatcher ( clazz ) , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( clazz . reportMatcher ( clazz ) , false ) ; }
Distance : 11

128
Tree	{ return returnFor ( T ) . returnFor ( clazz ) ; }
Code	{ return returnFor ( T ) . returnFor ( clazz ) ; }
Distance : 9

129
Tree	{ return returnFor ( Any.ANY ) ; }
Code	{ return returnFor ( Any.ANY ) ; }
Distance : 13

130
Tree	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

131
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( short , false ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( short , false ) ; }
Distance : 11

132
Tree	{ return reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( clazz ) ; }
Distance : 12

133
Tree	{ T = ( T ) reportMatcher ( clazz ) ; returnFor }
Code	{ T = ( T ) reportMatcher ( clazz ) ; returnFor }
Distance : 11

134
Tree	{ T = ( T ) reportMatcher ( clazz ) ; anyObject }
Code	{ T = ( T ) reportMatcher ( clazz ) ; anyObject }
Distance : 12

135
Tree	{ return ( T ) T . reportMatcher ( clazz ) ; }
Code	{ return ( T ) T . reportMatcher ( clazz ) ; }
Distance : 9

136
Tree	{ return ( T ) T . returnFor ( clazz ) ; }
Code	{ return ( T ) T . returnFor ( clazz ) ; }
Distance : 8

137
Tree	{ return reportMatcher ( clazz ) . returnFor () ; }
Code	{ return reportMatcher ( clazz ) . returnFor () ; }
Distance : 10

138
Tree	{ return reportMatcher () . reportMatcher ( clazz . returnFor ( clazz ) , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( clazz . returnFor ( clazz ) , super ) ; }
Distance : 11

139
Tree	{ T = reportMatcher ( clazz ) ; return null ; }
Code	{ T = reportMatcher ( clazz ) ; return null ; }
Distance : 12

140
Tree	{ return clazz . reportMatcher ( T ) . returnFor ( clazz ) ; }
Code	{ return clazz . reportMatcher ( T ) . returnFor ( clazz ) ; }
Distance : 8

141
Tree	{ super . returnFor () ; return true ; }
Code	{ super . returnFor () ; return true ; }
Distance : 16

142
Tree	{ clazz = T . reportMatcher ( T ) ; return clazz ; }
Code	{ clazz = T . reportMatcher ( T ) ; return clazz ; }
Distance : 12

143
Tree	{ return T . T ( T ) ; }
Code	{ return T . T ( T ) ; }
Distance : 12

144
Tree	{ return T . clazz ( T ) ; }
Code	{ return T . clazz ( T ) ; }
Distance : 12

145
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 14

146
Tree	{ return returnFor () ; }
Code	{ return returnFor () ; }
Distance : 15

147
Tree	{ return reportMatcher () . reportMatcher ( T ) ; }
Code	{ return reportMatcher () . reportMatcher ( T ) ; }
Distance : 12

148
Tree	{ return this . T . returnFor () ; }
Code	{ return this . T . returnFor () ; }
Distance : 14

149
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 14

150
Tree	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

151
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( super , super ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( super , super ) ; }
Distance : 11

152
Tree	{ return reportMatcher ( T . returnFor ( clazz ) ) ; }
Code	{ return reportMatcher ( T . returnFor ( clazz ) ) ; }
Distance : 10

153
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( CHAR_CONS , false ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( CHAR_CONS , false ) ; }
Distance : 11

154
Tree	{ return ( clazz ) reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz ) ; }
Distance : 10

155
Tree	{ return reportMatcher ( clazz ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( clazz ) . returnFor ( clazz ) ; }
Distance : 7

156
Tree	{ super ( T . reportMatcher ( clazz ) ) ; verifyNoMoreInteractions ; }
Code	{ super ( T . reportMatcher ( clazz ) ) ; verifyNoMoreInteractions ; }
Distance : 10

157
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 9

158
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 14

159
Tree	{ return reportMatcher () . reportMatcher ( reportMatcher ( Any.ANY ) , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( reportMatcher ( Any.ANY ) , false ) ; }
Distance : 11

160
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

161
Tree	{ super . reportMatcher () ; return null ; }
Code	{ super . reportMatcher () ; return null ; }
Distance : 16

162
Tree	{ reportMatcher ( T ) ; return null ; }
Code	{ reportMatcher ( T ) ; return null ; }
Distance : 14

163
Tree	{ return clazz . reportMatcher ( Any.ANY , Any.ANY ) ; }
Code	{ return clazz . reportMatcher ( Any.ANY , Any.ANY ) ; }
Distance : 13

164
Tree	{ return clazz . reportMatcher ( T ) ; }
Code	{ return clazz . reportMatcher ( T ) ; }
Distance : 12

165
Tree	{ return reportMatcher ( super , false ) ; }
Code	{ return reportMatcher ( super , false ) ; }
Distance : 13

166
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

167
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 16

168
Tree	{ return reportMatcher ( super , class ) ; }
Code	{ return reportMatcher ( super , class ) ; }
Distance : 13

169
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

170
Tree	{ throw return }
Code	{ throw return }
Distance : 18

171
Tree	{ super ( T . reportMatcher ( clazz ) ) ; anyObject ; }
Code	{ super ( T . reportMatcher ( clazz ) ) ; anyObject ; }
Distance : 10

172
Tree	{ return reportMatcher ( clazz . reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( clazz . reportMatcher ( clazz ) ) ; }
Distance : 10

173
Tree	{ return this . clazz . returnFor ( T ) ; }
Code	{ return this . clazz . returnFor ( T ) ; }
Distance : 11

174
Tree	{ return this . T . returnFor ( T ) ; }
Code	{ return this . T . returnFor ( T ) ; }
Distance : 12

175
Tree	{ return reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 12

176
Tree	{ return T . reportMatcher ( T ) . returnFor ( clazz ) ; }
Code	{ return T . reportMatcher ( T ) . returnFor ( clazz ) ; }
Distance : 7

177
Tree	{ return returnFor ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnFor ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

178
Tree	{ return reportMatcher () . returnFor ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return reportMatcher () . returnFor ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 12

179
Tree	{ return reportMatcher ( T . reportMatcher ( clazz ) ) ; }
Code	{ return reportMatcher ( T . reportMatcher ( clazz ) ) ; }
Distance : 10

180
Tree	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Distance : 13

181
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 12

182
Tree	{ return returnFor ( T ) . returnFor () ; }
Code	{ return returnFor ( T ) . returnFor () ; }
Distance : 12

183
Tree	{ return clazz . returnFor ( T ) ; }
Code	{ return clazz . returnFor ( T ) ; }
Distance : 11

184
Tree	{ clazz = T . reportMatcher ( T ) ; return null ; }
Code	{ clazz = T . reportMatcher ( T ) ; return null ; }
Distance : 13

185
Tree	{ return reportMatcher ( T , returnFor ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , returnFor ( Any.ANY ) ) ; }
Distance : 12

186
Tree	{ return reportMatcher ( T ) . reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( T ) . reportMatcher ( Any.ANY ) ; }
Distance : 10

187
Tree	{ return clazz . T ( T ) ; }
Code	{ return clazz . T ( T ) ; }
Distance : 12

188
Tree	{ T = T . reportMatcher ( T ) ; return this . clazz ; }
Code	{ T = T . reportMatcher ( T ) ; return this . clazz ; }
Distance : 12

189
Tree	{ return ( T ) returnFor ( this , clazz ) ; }
Code	{ return ( T ) returnFor ( this , clazz ) ; }
Distance : 10

190
Tree	{ return ( T ) clazz . reportMatcher ( clazz ) ; }
Code	{ return ( T ) clazz . reportMatcher ( clazz ) ; }
Distance : 8

191
Tree	{ clazz = T . returnFor ( T ) ; return this . clazz ; }
Code	{ clazz = T . returnFor ( T ) ; return this . clazz ; }
Distance : 13

192
Tree	{ return reportMatcher ( clazz , clazz ) ; }
Code	{ return reportMatcher ( clazz , clazz ) ; }
Distance : 11

193
Tree	{ T = returnFor ( T ) ; return null ; }
Code	{ T = returnFor ( T ) ; return null ; }
Distance : 14

194
Tree	{ clazz = T . returnFor ( T ) ; return null ; }
Code	{ clazz = T . returnFor ( T ) ; return null ; }
Distance : 14

195
Tree	{ super . reportMatcher () ; return super(); ; }
Code	{ super . reportMatcher () ; return super(); ; }
Distance : 16

196
Tree	{ return T . returnFor ( T , clazz . returnFor ( clazz ) && returnFor ( Any.ANY ) ) ; }
Code	{ return T . returnFor ( T , clazz . returnFor ( clazz ) && returnFor ( Any.ANY ) ) ; }
Distance : 12

197
Tree	{ super . reportMatcher () ; return true ; }
Code	{ super . reportMatcher () ; return true ; }
Distance : 16

198
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

199
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 16

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; returnNull () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; returnNull () ; }
Distance : 10

1
Tree	{ return ( T ) T . returnNull ( Object ) . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( T ) T . returnNull ( Object ) . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 13

2
Tree	{ return ( T ) reportMatcher ( Object ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Object ) . returnNull () ; }
Distance : 6

3
Tree	{ return ( T ) T . reportMatcher () . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( T ) T . reportMatcher () . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 12

4
Tree	{ T = T . reportMatcher ( T ) ; return null ; }
Code	{ T = T . reportMatcher ( T ) ; return null ; }
Distance : 13

5
Tree	{ returnNull ( Any.ANY ) ; returnNull () ; }
Code	{ returnNull ( Any.ANY ) ; returnNull () ; }
Distance : 13

6
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

7
Tree	{ return T . reportMatcher ( T ) ; }
Code	{ return T . reportMatcher ( T ) ; }
Distance : 12

8
Tree	private
Code	private
Distance : 20

9
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 11

10
Tree	{ return ( T ) T . returnNull () . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( T ) T . returnNull () . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 13

11
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

12
Tree	{ return Object ; }
Code	{ return Object ; }
Distance : 15

13
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 17

14
Tree	{ return T ; } Class
Code	{ return T ; } Class
Distance : 16

15
Tree	{ return returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 12

16
Tree	{ Object . returnNull ( Any.ANY ) ; return null ; }
Code	{ Object . returnNull ( Any.ANY ) ; return null ; }
Distance : 15

17
Tree	{ Object . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ Object . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

18
Tree	{ return ( T ) reportMatcher ( Object , Object . returnNull () - NUMBER_CONSTANT ) ; }
Code	{ return ( T ) reportMatcher ( Object , Object . returnNull () - NUMBER_CONSTANT ) ; }
Distance : 9

19
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 13

20
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 14

21
Tree	{ return ( T ) T . returnNull ( T ) . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Code	{ return ( T ) T . returnNull ( T ) . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Distance : 14

22
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 11

23
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 15

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

25
Tree	{ super ( T . returnNull ( Object ) ) ; returnNull () ; }
Code	{ super ( T . returnNull ( Object ) ) ; returnNull () ; }
Distance : 9

26
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 15

27
Tree	{ reportMatcher ( Any.ANY ) ; returnNull () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnNull () ; super }
Distance : 13

28
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

29
Tree	{ return this . T ; } Class
Code	{ return this . T ; } Class
Distance : 16

30
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 8

31
Tree	{ return ( T ) reportMatcher ( Object , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( Object , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

32
Tree	{ return reportMatcher ( T ) . reportMatcher () ; }
Code	{ return reportMatcher ( T ) . reportMatcher () ; }
Distance : 11

33
Tree	{ return reportMatcher ( Object ) . returnNull () ; }
Code	{ return reportMatcher ( Object ) . returnNull () ; }
Distance : 9

34
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

35
Tree	{ super ( T ) ; reportMatcher () ; }
Code	{ super ( T ) ; reportMatcher () ; }
Distance : 13

36
Tree	{ return ( T ) reportMatcher ( T , returnNull ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , returnNull ( Any.ANY ) ) ; }
Distance : 9

37
Tree	{ return returnNull ( T ) . returnNull () ; }
Code	{ return returnNull ( T ) . returnNull () ; }
Distance : 11

38
Tree	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; short }
Code	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; short }
Distance : 9

39
Tree	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( T . reportMatcher () ) ; }
Distance : 9

40
Tree	{ T . returnNull ( Any.ANY ) ; return null ; }
Code	{ T . returnNull ( Any.ANY ) ; return null ; }
Distance : 14

41
Tree	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; }
Distance : 9

42
Tree	{ super ( T . reportMatcher ( Object ) ) ; reportMatcher () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; reportMatcher () ; }
Distance : 9

43
Tree	{ super(); reportMatcher ( Any.ANY ) ; returnNull () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; returnNull () ; }
Distance : 12

44
Tree	{ return ( T ) T . returnNull () . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Code	{ return ( T ) T . returnNull () . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Distance : 13

45
Tree	{ return ( T ) T . returnNull ( returnNull ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( T ) T . returnNull ( returnNull ( Any.ANY ) , Any.ANY ) ; }
Distance : 11

46
Tree	{ return ( T ) reportMatcher ( this , Object ) ; }
Code	{ return ( T ) reportMatcher ( this , Object ) ; }
Distance : 9

47
Tree	{ return ( T ) reportMatcher ( Any.ANY , T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY , T . returnNull () ) ; }
Distance : 9

48
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

49
Tree	{ return ( T ) T . returnNull ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( T ) T . returnNull ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 11

50
Tree	{ returnNull ( Any.ANY ) ; returnNull () ; super }
Code	{ returnNull ( Any.ANY ) ; returnNull () ; super }
Distance : 14

51
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 11

52
Tree	{ return ( T ) reportMatcher ( Any.ANY , T . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY , T . reportMatcher () ) ; }
Distance : 9

53
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 8

54
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

56
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 14

57
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 10

58
Tree	{ return ( T ) reportMatcher ( Any.ANY , Object . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY , Object . returnNull () ) ; }
Distance : 8

59
Tree	{ return ( Object ) reportMatcher ( this , T ) ; }
Code	{ return ( Object ) reportMatcher ( this , T ) ; }
Distance : 11

60
Tree	protected
Code	protected
Distance : 20

61
Tree	{ T = T . reportMatcher ( Object ) ; return null ; }
Code	{ T = T . reportMatcher ( Object ) ; return null ; }
Distance : 12

62
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 16

63
Tree	{ return ( T ) returnNull ( this , T ) ; }
Code	{ return ( T ) returnNull ( this , T ) ; }
Distance : 11

64
Tree	{ return ( T ) returnNull ( Any.ANY , T . returnNull () ) ; }
Code	{ return ( T ) returnNull ( Any.ANY , T . returnNull () ) ; }
Distance : 10

65
Tree	{ super ( Object ) ; reportMatcher () ; }
Code	{ super ( Object ) ; reportMatcher () ; }
Distance : 13

66
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 14

67
Tree	{ returnNull () ; T = reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ returnNull () ; T = reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 11

68
Tree	{ returnNull ( Any.ANY ) ; reportMatcher () ; super }
Code	{ returnNull ( Any.ANY ) ; reportMatcher () ; super }
Distance : 15

69
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 14

70
Tree	{ T . reportMatcher ( Object ) ; return null ; }
Code	{ T . reportMatcher ( Object ) ; return null ; }
Distance : 12

71
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 11

72
Tree	{ return ( T ) reportMatcher ( Object . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( Object . returnNull () ) ; }
Distance : 8

73
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Distance : 10

74
Tree	{ return ( T ) reportMatcher ( Object ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Object ) . reportMatcher () ; }
Distance : 7

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Object ) ; }
Distance : 10

76
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 12

77
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

78
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 16

79
Tree	{ T . returnNull ( Object , STRING_CONSTANT ) ; return null ; }
Code	{ T . returnNull ( Object , STRING_CONSTANT ) ; return null ; }
Distance : 13

80
Tree	{ return ( T ) T . reportMatcher ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( T ) T . reportMatcher ( reportMatcher ( Any.ANY ) , Any.ANY ) ; }
Distance : 11

81
Tree	{ T . returnNull ( T , STRING_CONSTANT ) ; return null ; }
Code	{ T . returnNull ( T , STRING_CONSTANT ) ; return null ; }
Distance : 14

82
Tree	{ returnNull ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

83
Tree	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( T ) . reportMatcher () ; }
Distance : 8

84
Tree	{ return ( Object ) returnNull () ; }
Code	{ return ( Object ) returnNull () ; }
Distance : 11

85
Tree	{ return ( T ) T . returnNull ( Object ) ; }
Code	{ return ( T ) T . returnNull ( Object ) ; }
Distance : 10

86
Tree	{ reportMatcher () ; T = reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ reportMatcher () ; T = reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 11

87
Tree	{ return ( T ) reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Object ) ; }
Distance : 9

88
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 14

89
Tree	{ T . reportMatcher ( T ) ; return null ; }
Code	{ T . reportMatcher ( T ) ; return null ; }
Distance : 13

90
Tree	{ super ( Object ) ; returnNull () ; }
Code	{ super ( Object ) ; returnNull () ; }
Distance : 12

91
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 10

92
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

93
Tree	{ return ( T ) T . reportMatcher () . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Code	{ return ( T ) T . reportMatcher () . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Distance : 12

94
Tree	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( T ) . returnNull () ; }
Distance : 7

95
Tree	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; super }
Code	{ super ( T . reportMatcher ( T ) ) ; returnNull () ; super }
Distance : 10

96
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 17

97
Tree	{ return T . returnNull ( T ) ; }
Code	{ return T . returnNull ( T ) ; }
Distance : 13

98
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 16

99
Tree	{ T . returnNull ( T ) ; return null ; }
Code	{ T . returnNull ( T ) ; return null ; }
Distance : 14

100
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 14

101
Tree	{ return ( T ) reportMatcher ( Object , T . returnNull () - NUMBER_CONSTANT ) ; }
Code	{ return ( T ) reportMatcher ( Object , T . returnNull () - NUMBER_CONSTANT ) ; }
Distance : 10

102
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; returnNull () ; }
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; returnNull () ; }
Distance : 10

103
Tree	{ Object = T . reportMatcher ( T ) ; return null ; }
Code	{ Object = T . reportMatcher ( T ) ; return null ; }
Distance : 13

104
Tree	{ reportMatcher () ; return return; ; }
Code	{ reportMatcher () ; return return; ; }
Distance : 16

105
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 11

106
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

107
Tree	{ returnNull ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnNull ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 15

108
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

109
Tree	{ returnNull () ; return null ; }
Code	{ returnNull () ; return null ; }
Distance : 17

110
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; reportMatcher () ; }
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; reportMatcher () ; }
Distance : 11

111
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 15

112
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

113
Tree	{ returnNull ( Any.ANY ) ; reportMatcher () ; }
Code	{ returnNull ( Any.ANY ) ; reportMatcher () ; }
Distance : 14

114
Tree	{ super(); reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 13

115
Tree	{ return returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return returnNull ( Any.ANY ) . returnNull () ; }
Distance : 11

116
Tree	{ return ( T ) reportMatcher ( Object . reportMatcher () ) ; }
Code	{ return ( T ) reportMatcher ( Object . reportMatcher () ) ; }
Distance : 8

117
Tree	{ returnNull ( Any.ANY ) ; returnNull () ; super }
Code	{ returnNull ( Any.ANY ) ; returnNull () ; super }
Distance : 14

118
Tree	{ return ( T ) T . returnNull ( T ) . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Code	{ return ( T ) T . returnNull ( T ) . returnNull ( reportMatcher ( Any.ANY ) , super ) ; }
Distance : 14

119
Tree	{ T . returnNull ( Object ) ; return null ; }
Code	{ T . returnNull ( Object ) ; return null ; }
Distance : 13

120
Tree	{ reportMatcher ( Any.ANY ) ; returnNull () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnNull () ; super }
Distance : 13

121
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Distance : 14

122
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 11

123
Tree	{ returnNull ( Any.ANY ) ; return this . T ; }
Code	{ returnNull ( Any.ANY ) ; return this . T ; }
Distance : 14

124
Tree	{ T . reportMatcher ( Any.ANY ) ; return null ; }
Code	{ T . reportMatcher ( Any.ANY ) ; return null ; }
Distance : 13

125
Tree	{ return ( T ) this . T . returnNull () ; }
Code	{ return ( T ) this . T . returnNull () ; }
Distance : 9

126
Tree	{ returnNull ( Any.ANY ) ; reportMatcher () ; super }
Code	{ returnNull ( Any.ANY ) ; reportMatcher () ; super }
Distance : 15

127
Tree	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; Object }
Code	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; Object }
Distance : 9

128
Tree	{ return ( T ) returnNull ( Object ) ; }
Code	{ return ( T ) returnNull ( Object ) ; }
Distance : 10

129
Tree	{ returnNull ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnNull ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 15

130
Tree	{ return T ; }
Code	{ return T ; }
Distance : 15

131
Tree	{ return ( Object ) returnNull ( Any.ANY ) ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) ; }
Distance : 12

132
Tree	{ return reportMatcher ( T ) . returnNull () ; }
Code	{ return reportMatcher ( T ) . returnNull () ; }
Distance : 10

133
Tree	{ return reportMatcher ( this , T ) ; }
Code	{ return reportMatcher ( this , T ) ; }
Distance : 13

134
Tree	{ return ( T ) Object . returnNull () ; }
Code	{ return ( T ) Object . returnNull () ; }
Distance : 9

135
Tree	{ return ( T ) T . reportMatcher ( Object ) ; }
Code	{ return ( T ) T . reportMatcher ( Object ) ; }
Distance : 10

136
Tree	public
Code	public
Distance : 20

137
Tree	{ return this . T ; }
Code	{ return this . T ; }
Distance : 15

138
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 11

139
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

140
Tree	{ reportMatcher ( Any.ANY ) ; returnNull () ; }
Code	{ reportMatcher ( Any.ANY ) ; returnNull () ; }
Distance : 12

141
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 10

142
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 17

143
Tree	{ reportMatcher ( Any.ANY ) ; return this . T ; }
Code	{ reportMatcher ( Any.ANY ) ; return this . T ; }
Distance : 14

144
Tree	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; super }
Code	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; super }
Distance : 9

145
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

146
Tree	{ return ( T ) reportMatcher ( T , Object . returnNull () - NUMBER_CONSTANT ) ; }
Code	{ return ( T ) reportMatcher ( T , Object . returnNull () - NUMBER_CONSTANT ) ; }
Distance : 9

147
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Distance : 12

148
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 9

149
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 11

150
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 17

151
Tree	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

152
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Distance : 14

153
Tree	{ return ( T ) reportMatcher ( Object , returnNull ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( Object , returnNull ( Any.ANY ) ) ; }
Distance : 9

154
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 17

155
Tree	{
Code	{
Distance : 19

156
Tree	{ return T . reportMatcher ( Object ) ; }
Code	{ return T . reportMatcher ( Object ) ; }
Distance : 11

157
Tree	{ reportMatcher () ; T = returnNull ( Any.ANY ) . returnNull () ; }
Code	{ reportMatcher () ; T = returnNull ( Any.ANY ) . returnNull () ; }
Distance : 12

158
Tree	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; }
Code	{ super ( T . reportMatcher ( Object ) ) ; returnNull () ; }
Distance : 8

159
Tree	{ return ( T ) reportMatcher ( T , T . returnNull () - NUMBER_CONSTANT ) ; }
Code	{ return ( T ) reportMatcher ( T , T . returnNull () - NUMBER_CONSTANT ) ; }
Distance : 10

160
Tree	{ reportMatcher ( Any.ANY ) ; return this . Object ; }
Code	{ reportMatcher ( Any.ANY ) ; return this . Object ; }
Distance : 14

161
Tree	{ return this . Object ; }
Code	{ return this . Object ; }
Distance : 15

162
Tree	{ return returnNull ( Any.ANY ) ; }
Code	{ return returnNull ( Any.ANY ) ; }
Distance : 14

163
Tree	{ T . reportMatcher ( T , STRING_CONSTANT ) ; return null ; }
Code	{ T . reportMatcher ( T , STRING_CONSTANT ) ; return null ; }
Distance : 13

164
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 15

165
Tree	{ super ( T ) ; returnNull () ; }
Code	{ super ( T ) ; returnNull () ; }
Distance : 12

166
Tree	{ return ( Object ) this . T . returnNull () ; }
Code	{ return ( Object ) this . T . returnNull () ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return super(); ; }
Distance : 14

168
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 10

169
Tree	{ super ( Object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 13

170
Tree	{ reportMatcher () ; Object = reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ reportMatcher () ; Object = reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 12

171
Tree	{ return; reportMatcher ( Any.ANY ) ; returnNull () ; }
Code	{ return; reportMatcher ( Any.ANY ) ; returnNull () ; }
Distance : 12

172
Tree	{ return T . returnNull ( Object ) ; }
Code	{ return T . returnNull ( Object ) ; }
Distance : 12

173
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; reportMatcher () ; }
Distance : 11

174
Tree	{ returnNull ( Any.ANY ) ; return this . Object ; }
Code	{ returnNull ( Any.ANY ) ; return this . Object ; }
Distance : 14

175
Tree	{ return ( T ) reportMatcher ( this , T ) ; }
Code	{ return ( T ) reportMatcher ( this , T ) ; }
Distance : 10

176
Tree	{ continue; reportMatcher ( Any.ANY ) ; returnNull () ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; returnNull () ; }
Distance : 12

177
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

178
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return return; ; }
Distance : 14

179
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

180
Tree	{ return returnNull ( this , Object ) ; }
Code	{ return returnNull ( this , Object ) ; }
Distance : 13

181
Tree	{ reportMatcher () ; return super(); ; }
Code	{ reportMatcher () ; return super(); ; }
Distance : 16

182
Tree	{ return reportMatcher ( this , Object ) ; }
Code	{ return reportMatcher ( this , Object ) ; }
Distance : 12

183
Tree	{ return ( T ) T . returnNull ( Object ) . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Code	{ return ( T ) T . returnNull ( Object ) . returnNull ( reportMatcher ( Any.ANY ) , false ) ; }
Distance : 13

184
Tree	{ return ( T ) Object . reportMatcher () ; }
Code	{ return ( T ) Object . reportMatcher () ; }
Distance : 10

185
Tree	{ return returnNull ( this , T ) ; }
Code	{ return returnNull ( this , T ) ; }
Distance : 14

186
Tree	{ return ( T ) T . reportMatcher ( returnNull ( Any.ANY ) , Any.ANY ) ; }
Code	{ return ( T ) T . reportMatcher ( returnNull ( Any.ANY ) , Any.ANY ) ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 15

188
Tree	{ return ( T ) this . T . reportMatcher () ; }
Code	{ return ( T ) this . T . reportMatcher () ; }
Distance : 10

189
Tree	{ super ( Object ) ; returnNull ( Any.ANY ) ; }
Code	{ super ( Object ) ; returnNull ( Any.ANY ) ; }
Distance : 13

190
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 15

191
Tree	{ return ( T ) this . Object . returnNull () ; }
Code	{ return ( T ) this . Object . returnNull () ; }
Distance : 9

192
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 14

193
Tree	{ T = T . returnNull ( T ) ; return null ; }
Code	{ T = T . returnNull ( T ) ; return null ; }
Distance : 14

194
Tree	{ T . reportMatcher ( Object , STRING_CONSTANT ) ; return null ; }
Code	{ T . reportMatcher ( Object , STRING_CONSTANT ) ; return null ; }
Distance : 12

195
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 17

196
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

197
Tree	{ return this . T ; } Test
Code	{ return this . T ; } Test
Distance : 16

198
Tree	{ return T ; } Test
Code	{ return T ; } Test
Distance : 16

199
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 15

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

1
Tree	{ super ( Short ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Short ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

2
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Distance : 11

4
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

5
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

6
Tree	{ return this . Short ; } array
Code	{ return this . Short ; } array
Distance : 13

7
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 11

9
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = Any.ANY ; }
Distance : 12

10
Tree	{ return ( Short ) returnZero ( Any.ANY ) ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) ; }
Distance : 10

11
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = null ; }
Distance : 11

12
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Short = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Short = Any.ANY ; }
Distance : 12

13
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Short = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Short = Any.ANY ; }
Distance : 13

14
Tree	{ returnZero ( Any.ANY ) ; Short = true ; }
Code	{ returnZero ( Any.ANY ) ; Short = true ; }
Distance : 12

15
Tree	{ returnZero ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Distance : 10

16
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = super(); ; }
Distance : 11

18
Tree	{ return returnZero ( Any.ANY ) . < Short > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Short > returnZero () ; }
Distance : 9

19
Tree	{ super ( Short ) ; }
Code	{ super ( Short ) ; }
Distance : 11

20
Tree	{ return reportMatcher ( Any.ANY ) . < Short > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Short > reportMatcher () ; }
Distance : 9

21
Tree	{ Short = returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ Short = returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

22
Tree	{ returnZero ( Any.ANY ) ; Short = false ; }
Code	{ returnZero ( Any.ANY ) ; Short = false ; }
Distance : 12

23
Tree	{ return ( Short ) reportMatcher () ; }
Code	{ return ( Short ) reportMatcher () ; }
Distance : 9

24
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Distance : 10

25
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

26
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

27
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

28
Tree	{ return ( Short ) reportMatcher () ; } Test
Code	{ return ( Short ) reportMatcher () ; } Test
Distance : 10

29
Tree	private
Code	private
Distance : 17

30
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

31
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Class
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; } Test
Distance : 12

33
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

34
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = Any.ANY ; }
Distance : 11

36
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

37
Tree	{ Short = reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ Short = reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

38
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; }
Distance : 10

39
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

40
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

41
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = false ; }
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = null ; }
Distance : 11

43
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

44
Tree	{ return ( Short ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

45
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

46
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 12

47
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

48
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Distance : 10

49
Tree	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 12

50
Tree	{ null reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 11

51
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

52
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

53
Tree	{ super ( Short ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Short ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

54
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

55
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Distance : 9

56
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

57
Tree	{ return Short ; }
Code	{ return Short ; }
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; fireChangeEvent }
Distance : 12

59
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Distance : 9

60
Tree	{ returnZero () ; Short = Any.ANY . reportMatcher () ; }
Code	{ returnZero () ; Short = Any.ANY . reportMatcher () ; }
Distance : 11

61
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

62
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

63
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

64
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

65
Tree	{ return returnZero ( Any.ANY ) . < Short > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Short > reportMatcher () ; }
Distance : 10

66
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = null ; }
Distance : 12

67
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

68
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; }
Distance : 12

69
Tree	{ returnZero ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Distance : 9

70
Tree	{ return Short ; } class
Code	{ return Short ; } class
Distance : 13

71
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Distance : 11

73
Tree	{ return; }
Code	{ return; }
Distance : 15

74
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

75
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Distance : 9

76
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

77
Tree	{ return Short ; } array
Code	{ return Short ; } array
Distance : 13

78
Tree	{ super ( Short ) ; } array
Code	{ super ( Short ) ; } array
Distance : 12

79
Tree	{ null }
Code	{ null }
Distance : 15

80
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Short = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Short = Any.ANY ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; return }
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; Short = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = true ; }
Distance : 11

83
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Distance : 9

84
Tree	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Code	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Distance : 9

85
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = false ; }
Distance : 13

86
Tree	{ Short = returnZero ( Any.ANY ) . returnZero () ; }
Code	{ Short = returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

87
Tree	{ super ( Short ) ; } class
Code	{ super ( Short ) ; } class
Distance : 12

88
Tree	{ reportMatcher () ; Short = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Short = Any.ANY . reportMatcher () ; }
Distance : 10

89
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = Any.ANY ; }
Distance : 13

90
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

91
Tree	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

92
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

93
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = null ; }
Distance : 12

94
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

95
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

96
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

97
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = false ; }
Distance : 11

98
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

99
Tree	{ reportMatcher () ; Short = Any.ANY . returnZero () ; }
Code	{ reportMatcher () ; Short = Any.ANY . returnZero () ; }
Distance : 9

100
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 11

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Distance : 11

102
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Distance : 10

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = true ; }
Distance : 11

104
Tree	{ return ( Short ) returnZero () ; }
Code	{ return ( Short ) returnZero () ; }
Distance : 8

105
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 8

106
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Any.ANY ; }
Distance : 12

108
Tree	{ super ( Short ) ; returnZero ( NUMBER_CONSTANT ) ; }
Code	{ super ( Short ) ; returnZero ( NUMBER_CONSTANT ) ; }
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

110
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

111
Tree	{ super ( Short ) ; returnZero () ; }
Code	{ super ( Short ) ; returnZero () ; }
Distance : 9

112
Tree	{ super ( Short ) ; reportMatcher () ; }
Code	{ super ( Short ) ; reportMatcher () ; }
Distance : 10

113
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

114
Tree	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Distance : 8

115
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Distance : 10

116
Tree	{ continue; }
Code	{ continue; }
Distance : 15

117
Tree	{ return returnZero ( Short . reportMatcher () ) ; }
Code	{ return returnZero ( Short . reportMatcher () ) ; }
Distance : 9

118
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

119
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

120
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; }
Distance : 8

121
Tree	{ returnZero () ; Short = Any.ANY . returnZero () ; }
Code	{ returnZero () ; Short = Any.ANY . returnZero () ; }
Distance : 10

122
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = true ; }
Distance : 12

123
Tree	{ return this . Short ; } notifyListeners
Code	{ return this . Short ; } notifyListeners
Distance : 13

124
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Distance : 12

125
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Distance : 12

126
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; throw }
Distance : 12

127
Tree	{ super ( Short ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Short ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

128
Tree	{ return this . Short ; }
Code	{ return this . Short ; }
Distance : 12

129
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Short = Any.ANY ; }
Distance : 11

130
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

131
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = Short ; }
Distance : 13

132
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Distance : 8

133
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

134
Tree	{ returnZero ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 12

135
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

136
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

137
Tree	{ return reportMatcher ( Short . returnZero () ) ; }
Code	{ return reportMatcher ( Short . returnZero () ) ; }
Distance : 8

138
Tree	{ super ( Short ) ; } notifyListeners
Code	{ super ( Short ) ; } notifyListeners
Distance : 12

139
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

140
Tree	{ return returnZero ( Short . returnZero () ) ; }
Code	{ return returnZero ( Short . returnZero () ) ; }
Distance : 9

141
Tree	{ return ( Short ) reportMatcher () ; } Class
Code	{ return ( Short ) reportMatcher () ; } Class
Distance : 10

142
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

144
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

145
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

146
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = return; ; }
Distance : 11

147
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

148
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Short = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Short = false ; }
Distance : 12

149
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

150
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

151
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Short = super(); ; }
Distance : 12

152
Tree	{
Code	{
Distance : 16

153
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 11

154
Tree	{ return this . Short ; } class
Code	{ return this . Short ; } class
Distance : 13

155
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

156
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

157
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 11

158
Tree	{}
Code	{}
Distance : 17

159
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

160
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

161
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = null ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Short = null ; }
Distance : 13

162
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Distance : 11

163
Tree	{ super ( Short ) ; reportMatcher () ; } Class
Code	{ super ( Short ) ; reportMatcher () ; } Class
Distance : 11

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

165
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Short = false ; }
Distance : 11

167
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

170
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

172
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Distance : 11

173
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

175
Tree	{ throw returnZero ( Any.ANY ) ; }
Code	{ throw returnZero ( Any.ANY ) ; }
Distance : 12

176
Tree	{ return returnZero () ; }
Code	{ return returnZero () ; }
Distance : 11

177
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

178
Tree	{ return reportMatcher ( Short . reportMatcher () ) ; }
Code	{ return reportMatcher ( Short . reportMatcher () ) ; }
Distance : 8

179
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; }
Distance : 11

181
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

182
Tree	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Short = Any.ANY ; super }
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) ; Short = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = false ; }
Distance : 11

184
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

185
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 7

186
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Distance : 9

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	protected
Code	protected
Distance : 17

190
Tree	{ return ( Short ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

191
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

192
Tree	{ returnZero ( Any.ANY ) . returnZero () ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

193
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Short = false ; }
Distance : 12

194
Tree	{ Short = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Short = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

195
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

196
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Short = Short ; }
Distance : 13

197
Tree	{ super ( Short ) ; reportMatcher () ; } Test
Code	{ super ( Short ) ; reportMatcher () ; } Test
Distance : 11

198
Tree	{ return Short ; } notifyListeners
Code	{ return Short ; } notifyListeners
Distance : 13

199
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( Double ) ; } array
Code	{ super ( Double ) ; } array
Distance : 12

1
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

2
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

3
Tree	{ return ( Double ) returnZero ( Any.ANY ) ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) ; }
Distance : 10

4
Tree	{ return ( Double ) reportMatcher () ; }
Code	{ return ( Double ) reportMatcher () ; }
Distance : 9

5
Tree	{ super ( Double ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Double ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

6
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = Any.ANY ; }
Distance : 12

7
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

8
Tree	{ super ( Double ) ; reportMatcher () ; }
Code	{ super ( Double ) ; reportMatcher () ; }
Distance : 10

9
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Distance : 13

10
Tree	{ return ( Double ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Distance : 12

12
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Double = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Double = Any.ANY ; }
Distance : 12

13
Tree	{ returnZero ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Distance : 10

14
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

15
Tree	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

16
Tree	{ reportMatcher () ; Double = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Double = Any.ANY . reportMatcher () ; }
Distance : 10

17
Tree	{ Double = reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ Double = reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

18
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Distance : 11

19
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

20
Tree	{ return reportMatcher ( Double . returnZero () ) ; }
Code	{ return reportMatcher ( Double . returnZero () ) ; }
Distance : 8

21
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Double = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Double = Any.ANY ; }
Distance : 13

22
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; }
Distance : 12

23
Tree	{ null reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 11

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = return; ; }
Distance : 11

25
Tree	private
Code	private
Distance : 17

26
Tree	{ returnZero () ; Double = Any.ANY . returnZero () ; }
Code	{ returnZero () ; Double = Any.ANY . returnZero () ; }
Distance : 10

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = null ; }
Distance : 11

28
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

31
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; fireChangeEvent }
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Class
Distance : 12

33
Tree	{ super ( Double ) ; reportMatcher () ; } Test
Code	{ super ( Double ) ; reportMatcher () ; } Test
Distance : 11

34
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 11

35
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

36
Tree	{ super ( Double ) ; reportMatcher () ; } Class
Code	{ super ( Double ) ; reportMatcher () ; } Class
Distance : 11

37
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

38
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; return }
Distance : 12

39
Tree	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 12

40
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 11

41
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

42
Tree	{ Double = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Double = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

43
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

44
Tree	{ return returnZero () ; }
Code	{ return returnZero () ; }
Distance : 11

45
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = false ; }
Distance : 12

46
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

47
Tree	{ return Double ; } array
Code	{ return Double ; } array
Distance : 13

48
Tree	{ super ( Double ) ; returnZero ( NUMBER_CONSTANT ) ; }
Code	{ super ( Double ) ; returnZero ( NUMBER_CONSTANT ) ; }
Distance : 12

49
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 11

50
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

51
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Distance : 9

53
Tree	{ returnZero ( Any.ANY ) ; Double = true ; }
Code	{ returnZero ( Any.ANY ) ; Double = true ; }
Distance : 12

54
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

55
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = null ; }
Distance : 12

56
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 8

57
Tree	{ return this . Double ; }
Code	{ return this . Double ; }
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = false ; }
Distance : 11

59
Tree	{ super ( Double ) ; } class
Code	{ super ( Double ) ; } class
Distance : 12

60
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

61
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Distance : 11

62
Tree	{ return; }
Code	{ return; }
Distance : 15

63
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = true ; }
Distance : 11

64
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = Any.ANY ; }
Distance : 11

66
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 11

67
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = null ; }
Distance : 11

68
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

69
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Distance : 10

70
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

71
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

72
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Distance : 9

74
Tree	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Code	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Distance : 9

75
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Distance : 9

76
Tree	{ return ( Double ) reportMatcher () ; } Class
Code	{ return ( Double ) reportMatcher () ; } Class
Distance : 10

77
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

78
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Distance : 11

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Any.ANY ; }
Distance : 12

81
Tree	{ return returnZero ( Any.ANY ) . < Double > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Double > reportMatcher () ; }
Distance : 10

82
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Double = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Double = false ; }
Distance : 12

83
Tree	{ return Double ; } class
Code	{ return Double ; } class
Distance : 13

84
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

85
Tree	{ return this . Double ; } array
Code	{ return this . Double ; } array
Distance : 13

86
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

87
Tree	{ returnZero ( Any.ANY ) ; Double = false ; }
Code	{ returnZero ( Any.ANY ) ; Double = false ; }
Distance : 12

88
Tree	{ return Double ; } notifyListeners
Code	{ return Double ; } notifyListeners
Distance : 13

89
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

90
Tree	{}
Code	{}
Distance : 17

91
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = Any.ANY ; }
Distance : 13

92
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

93
Tree	{ continue; }
Code	{ continue; }
Distance : 15

94
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Distance : 9

95
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = super(); ; }
Distance : 12

97
Tree	{ Double = returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ Double = returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

98
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

99
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = null ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = null ; }
Distance : 13

100
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = Double ; }
Distance : 12

101
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

102
Tree	{ super ( Double ) ; returnZero () ; }
Code	{ super ( Double ) ; returnZero () ; }
Distance : 9

103
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

104
Tree	{ return this . Double ; } class
Code	{ return this . Double ; } class
Distance : 13

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = Any.ANY ; }
Distance : 11

106
Tree	{ reportMatcher () ; Double = Any.ANY . returnZero () ; }
Code	{ reportMatcher () ; Double = Any.ANY . returnZero () ; }
Distance : 9

107
Tree	{ reportMatcher ( Any.ANY ) ; Double = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = false ; }
Distance : 11

108
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

109
Tree	{ return reportMatcher ( Double . reportMatcher () ) ; }
Code	{ return reportMatcher ( Double . reportMatcher () ) ; }
Distance : 8

110
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

111
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Distance : 10

112
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Distance : 8

113
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

114
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Distance : 11

115
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

116
Tree	{ reportMatcher ( Any.ANY ) ; Double = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = true ; }
Distance : 11

117
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Distance : 10

118
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; } Test
Distance : 12

119
Tree	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

120
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Double = true ; }
Distance : 12

121
Tree	{ return Double ; }
Code	{ return Double ; }
Distance : 12

122
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

123
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Double = super(); ; }
Distance : 11

124
Tree	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Distance : 8

125
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 12

126
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; super }
Distance : 12

127
Tree	{ returnZero ( Any.ANY ) ; this . Double = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Double = Any.ANY ; }
Distance : 12

128
Tree	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Double = Any.ANY ; throw }
Distance : 12

129
Tree	{ return this . Double ; } notifyListeners
Code	{ return this . Double ; } notifyListeners
Distance : 13

130
Tree	{ return returnZero ( Any.ANY ) . < Double > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Double > returnZero () ; }
Distance : 9

131
Tree	{ super ( Double ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Double ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

132
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Double = false ; }
Distance : 13

133
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

134
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

135
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

136
Tree	protected
Code	protected
Distance : 17

137
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

138
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

139
Tree	{ super ( Double ) ; } notifyListeners
Code	{ super ( Double ) ; } notifyListeners
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

141
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

142
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = null ; }
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

144
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

145
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

146
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

147
Tree	{ return returnZero ( Double . returnZero () ) ; }
Code	{ return returnZero ( Double . returnZero () ) ; }
Distance : 9

148
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

149
Tree	{ returnZero ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Distance : 9

150
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

151
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Double = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Double = Any.ANY ; }
Distance : 12

152
Tree	{ return ( Double ) reportMatcher () ; } Test
Code	{ return ( Double ) reportMatcher () ; } Test
Distance : 10

153
Tree	{ returnZero () ; Double = Any.ANY . reportMatcher () ; }
Code	{ returnZero () ; Double = Any.ANY . reportMatcher () ; }
Distance : 11

154
Tree	{
Code	{
Distance : 16

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

157
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

158
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

159
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; }
Distance : 8

160
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Distance : 10

161
Tree	{ Double = returnZero ( Any.ANY ) . returnZero () ; }
Code	{ Double = returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

162
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Distance : 11

163
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

165
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

166
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

167
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

170
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

172
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; }
Distance : 10

173
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

175
Tree	{ throw returnZero ( Any.ANY ) ; }
Code	{ throw returnZero ( Any.ANY ) ; }
Distance : 12

176
Tree	{ return reportMatcher ( Any.ANY ) . < Double > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Double > reportMatcher () ; }
Distance : 9

177
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

178
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

179
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Double = false ; }
Distance : 11

181
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

182
Tree	{ super ( Double ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Double ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

184
Tree	{ null }
Code	{ null }
Distance : 15

185
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 7

186
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Distance : 9

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

190
Tree	{ returnZero ( Any.ANY ) . returnZero () ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

191
Tree	{ super ( Double ) ; }
Code	{ super ( Double ) ; }
Distance : 11

192
Tree	{ return ( Double ) returnZero () ; }
Code	{ return ( Double ) returnZero () ; }
Distance : 8

193
Tree	{ return ( Double ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

194
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Double = false ; }
Distance : 12

195
Tree	{ return returnZero ( Double . reportMatcher () ) ; }
Code	{ return returnZero ( Double . reportMatcher () ) ; }
Distance : 9

196
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Double = Double ; }
Distance : 13

197
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

198
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

199
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ Float = reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ Float = reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

1
Tree	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = Any.ANY ; }
Distance : 11

3
Tree	{ return Float ; } array
Code	{ return Float ; } array
Distance : 13

4
Tree	{ return; }
Code	{ return; }
Distance : 15

5
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

6
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

7
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = null ; }
Distance : 11

8
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

9
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

10
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = null ; }
Distance : 12

11
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Float = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Float = Any.ANY ; }
Distance : 12

12
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Float = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Float = Any.ANY ; }
Distance : 13

13
Tree	{ Float = returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ Float = returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

14
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = Any.ANY ; }
Distance : 12

15
Tree	{ returnZero ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Distance : 10

16
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Distance : 13

17
Tree	{ Float = returnZero ( Any.ANY ) . returnZero () ; }
Code	{ Float = returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

18
Tree	{ returnZero ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Distance : 9

19
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = false ; }
Distance : 12

20
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Any.ANY ; }
Distance : 12

21
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

22
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

23
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = false ; }
Distance : 11

24
Tree	{}
Code	{}
Distance : 17

25
Tree	{ null }
Code	{ null }
Distance : 15

26
Tree	{ super ( Float ) ; returnZero () ; }
Code	{ super ( Float ) ; returnZero () ; }
Distance : 9

27
Tree	{ reportMatcher ( Any.ANY ) ; Float = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = false ; }
Distance : 11

28
Tree	{ super ( Float ) ; reportMatcher () ; }
Code	{ super ( Float ) ; reportMatcher () ; }
Distance : 10

29
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = null ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

31
Tree	{ super ( Float ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Float ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

32
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Distance : 10

33
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Test
Distance : 12

34
Tree	{ super ( Float ) ; } class
Code	{ super ( Float ) ; } class
Distance : 12

35
Tree	{ return ( Float ) reportMatcher () ; } Test
Code	{ return ( Float ) reportMatcher () ; } Test
Distance : 10

36
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

37
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Distance : 11

38
Tree	{ super ( Float ) ; } notifyListeners
Code	{ super ( Float ) ; } notifyListeners
Distance : 12

39
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

40
Tree	{ returnZero ( Any.ANY ) ; Float = false ; }
Code	{ returnZero ( Any.ANY ) ; Float = false ; }
Distance : 12

41
Tree	{ return ( Float ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

42
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

43
Tree	{ return reportMatcher ( Any.ANY ) . < Float > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > reportMatcher () ; }
Distance : 9

44
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

46
Tree	{ return this . Float ; } notifyListeners
Code	{ return this . Float ; } notifyListeners
Distance : 13

47
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

48
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 11

49
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

52
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

53
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Distance : 9

54
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

55
Tree	{ return Float ; }
Code	{ return Float ; }
Distance : 12

56
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 11

57
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

58
Tree	{ returnZero () ; Float = Any.ANY . reportMatcher () ; }
Code	{ returnZero () ; Float = Any.ANY . reportMatcher () ; }
Distance : 11

59
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Distance : 10

60
Tree	{ return reportMatcher ( Float . reportMatcher () ) ; }
Code	{ return reportMatcher ( Float . reportMatcher () ) ; }
Distance : 8

61
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Float = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Float = false ; }
Distance : 12

62
Tree	{ return this . Float ; } class
Code	{ return this . Float ; } class
Distance : 13

63
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Distance : 9

65
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

66
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

67
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

68
Tree	{ reportMatcher ( Any.ANY ) ; Float = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = true ; }
Distance : 11

69
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

70
Tree	{ return ( Float ) reportMatcher () ; }
Code	{ return ( Float ) reportMatcher () ; }
Distance : 9

71
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; return }
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Distance : 11

73
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

74
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

75
Tree	{ return returnZero () ; }
Code	{ return returnZero () ; }
Distance : 11

76
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

77
Tree	{ return returnZero ( Any.ANY ) . < Float > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Float > reportMatcher () ; }
Distance : 10

78
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

79
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Distance : 9

80
Tree	{ reportMatcher () ; Float = Any.ANY . returnZero () ; }
Code	{ reportMatcher () ; Float = Any.ANY . returnZero () ; }
Distance : 9

81
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

82
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 11

83
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

84
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Distance : 10

85
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Float = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Float = Any.ANY ; }
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

87
Tree	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Distance : 8

88
Tree	{ super ( Float ) ; reportMatcher () ; } Class
Code	{ super ( Float ) ; reportMatcher () ; } Class
Distance : 11

89
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = Any.ANY ; }
Distance : 11

90
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = Float ; }
Distance : 12

91
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

92
Tree	{ reportMatcher () ; Float = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Float = Any.ANY . reportMatcher () ; }
Distance : 10

93
Tree	{ super ( Float ) ; reportMatcher () ; } Test
Code	{ super ( Float ) ; reportMatcher () ; } Test
Distance : 11

94
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Distance : 11

96
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Float = false ; }
Distance : 11

97
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

98
Tree	{ super ( Float ) ; } array
Code	{ super ( Float ) ; } array
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Distance : 9

100
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = true ; }
Distance : 11

102
Tree	{ Float = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Float = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

103
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

104
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; }
Distance : 12

105
Tree	{ return returnZero ( Float . reportMatcher () ) ; }
Code	{ return returnZero ( Float . reportMatcher () ) ; }
Distance : 9

106
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

107
Tree	private
Code	private
Distance : 17

108
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = super(); ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = null ; }
Distance : 12

112
Tree	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

113
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; fireChangeEvent }
Distance : 12

114
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Distance : 10

115
Tree	{ returnZero ( Any.ANY ) ; Float = true ; }
Code	{ returnZero ( Any.ANY ) ; Float = true ; }
Distance : 12

116
Tree	{ super ( Float ) ; }
Code	{ super ( Float ) ; }
Distance : 11

117
Tree	{ return ( Float ) returnZero () ; }
Code	{ return ( Float ) returnZero () ; }
Distance : 8

118
Tree	{ return ( Float ) reportMatcher () ; } Class
Code	{ return ( Float ) reportMatcher () ; } Class
Distance : 10

119
Tree	{ return this . Float ; } array
Code	{ return this . Float ; } array
Distance : 13

120
Tree	{ returnZero () ; Float = Any.ANY . returnZero () ; }
Code	{ returnZero () ; Float = Any.ANY . returnZero () ; }
Distance : 10

121
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

122
Tree	{ return returnZero ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Float > returnZero () ; }
Distance : 9

123
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

124
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

125
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

126
Tree	{ return reportMatcher ( Float . returnZero () ) ; }
Code	{ return reportMatcher ( Float . returnZero () ) ; }
Distance : 8

127
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; super }
Distance : 12

128
Tree	{ returnZero ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 12

129
Tree	{
Code	{
Distance : 16

130
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 11

131
Tree	{ return returnZero ( Float . returnZero () ) ; }
Code	{ return returnZero ( Float . returnZero () ) ; }
Distance : 9

132
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

133
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

135
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

136
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

137
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

138
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

139
Tree	protected
Code	protected
Distance : 17

140
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = false ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; throw }
Distance : 12

142
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

143
Tree	{ return this . Float ; }
Code	{ return this . Float ; }
Distance : 12

144
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

145
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

146
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

147
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = false ; }
Distance : 13

148
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = super(); ; }
Distance : 12

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Float = true ; }
Distance : 12

150
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Distance : 11

151
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

152
Tree	{ super ( Float ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Float ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

153
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = Any.ANY ; }
Distance : 13

154
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

155
Tree	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Code	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Distance : 9

156
Tree	{ return Float ; } class
Code	{ return Float ; } class
Distance : 13

157
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

159
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

162
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

163
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

164
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

165
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Distance : 10

166
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

167
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

170
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

172
Tree	{ throw returnZero ( Any.ANY ) ; }
Code	{ throw returnZero ( Any.ANY ) ; }
Distance : 12

173
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

175
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

176
Tree	{ returnZero ( Any.ANY ) . returnZero () ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

177
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

178
Tree	{ super ( Float ) ; returnZero ( NUMBER_CONSTANT ) ; }
Code	{ super ( Float ) ; returnZero ( NUMBER_CONSTANT ) ; }
Distance : 12

179
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

181
Tree	{ continue; }
Code	{ continue; }
Distance : 15

182
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Distance : 8

183
Tree	{ return ( Float ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

184
Tree	{ return ( Float ) returnZero ( Any.ANY ) ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) ; }
Distance : 10

185
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 7

186
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Distance : 9

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Distance : 8

190
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

191
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

192
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

193
Tree	{ null reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; }
Distance : 11

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Float = return; ; }
Distance : 11

195
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = null ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Float = null ; }
Distance : 13

196
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Float = Float ; }
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Float = Any.ANY ; } Class
Distance : 12

198
Tree	{ super ( Float ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Float ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

199
Tree	{ return Float ; } notifyListeners
Code	{ return Float ; } notifyListeners
Distance : 13

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

1
Tree	{ super ( Long ) ; }
Code	{ super ( Long ) ; }
Distance : 11

2
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

3
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = null ; }
Distance : 12

4
Tree	{ return Long ; } class
Code	{ return Long ; } class
Distance : 13

5
Tree	{ return this . Long ; } array
Code	{ return this . Long ; } array
Distance : 13

6
Tree	{ returnZero ( Any.ANY ) . returnZero () ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

7
Tree	{ super ( Long ) ; reportMatcher () ; }
Code	{ super ( Long ) ; reportMatcher () ; }
Distance : 10

8
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = true ; }
Distance : 12

10
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ Long = returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ Long = returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Long = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Long = Any.ANY ; }
Distance : 13

13
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Long = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Long = Any.ANY ; }
Distance : 12

14
Tree	{ returnZero ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Distance : 10

15
Tree	{ return returnZero ( Any.ANY ) . < Long > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Long > reportMatcher () ; }
Distance : 10

16
Tree	{ return Long ; }
Code	{ return Long ; }
Distance : 12

17
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Distance : 11

18
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = false ; }
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; super }
Distance : 12

20
Tree	{ return ( Long ) returnZero () ; }
Code	{ return ( Long ) returnZero () ; }
Distance : 8

21
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; }
Distance : 12

22
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = Any.ANY ; }
Distance : 11

24
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

25
Tree	{ return ( Long ) returnZero ( Any.ANY ) ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) ; }
Distance : 10

26
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

27
Tree	{ return ( Long ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

28
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

29
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Test
Distance : 12

30
Tree	{ reportMatcher () ; Long = Any.ANY . returnZero () ; }
Code	{ reportMatcher () ; Long = Any.ANY . returnZero () ; }
Distance : 9

31
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; } Class
Distance : 12

32
Tree	{ return ( Long ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

33
Tree	private
Code	private
Distance : 17

34
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Distance : 9

35
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

36
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

37
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = null ; }
Distance : 11

38
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Long = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Long = false ; }
Distance : 12

39
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = super(); ; }
Distance : 11

41
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; }
Distance : 8

42
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

43
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 11

44
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

45
Tree	{ null reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 11

46
Tree	{ super ( Long ) ; } array
Code	{ super ( Long ) ; } array
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

49
Tree	{ super ( Long ) ; returnZero ( NUMBER_CONSTANT ) ; }
Code	{ super ( Long ) ; returnZero ( NUMBER_CONSTANT ) ; }
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = null ; }
Distance : 12

51
Tree	{ return reportMatcher ( Long . returnZero () ) ; }
Code	{ return reportMatcher ( Long . returnZero () ) ; }
Distance : 8

52
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

53
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

54
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Distance : 9

55
Tree	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

56
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

57
Tree	{ super ( Long ) ; } notifyListeners
Code	{ super ( Long ) ; } notifyListeners
Distance : 12

58
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

59
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Distance : 13

60
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Distance : 10

61
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = false ; }
Distance : 11

62
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Distance : 11

64
Tree	{ super ( Long ) ; returnZero () ; }
Code	{ super ( Long ) ; returnZero () ; }
Distance : 9

65
Tree	{ return; }
Code	{ return; }
Distance : 15

66
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Distance : 9

68
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . < Long > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Long > reportMatcher () ; }
Distance : 9

70
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; fireChangeEvent }
Distance : 12

71
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

72
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

73
Tree	{ return returnZero ( Long . returnZero () ) ; }
Code	{ return returnZero ( Long . returnZero () ) ; }
Distance : 9

74
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

75
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = return; ; }
Distance : 11

76
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

77
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = false ; }
Distance : 12

78
Tree	{ super ( Long ) ; } class
Code	{ super ( Long ) ; } class
Distance : 12

79
Tree	{ return Long ; } array
Code	{ return Long ; } array
Distance : 13

80
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

81
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

82
Tree	{}
Code	{}
Distance : 17

83
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; return }
Distance : 12

84
Tree	{ return ( Long ) reportMatcher () ; } Test
Code	{ return ( Long ) reportMatcher () ; } Test
Distance : 10

85
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Distance : 12

86
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Long = null ; }
Distance : 11

87
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

88
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

89
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Distance : 9

90
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 11

91
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = true ; }
Distance : 11

92
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; throw }
Distance : 12

93
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

94
Tree	{ Long = returnZero ( Any.ANY ) . returnZero () ; }
Code	{ Long = returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

95
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = null ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = null ; }
Distance : 13

96
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = false ; }
Distance : 11

97
Tree	{ super ( Long ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Long ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

98
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = false ; }
Distance : 13

99
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Distance : 10

100
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

101
Tree	{ continue; }
Code	{ continue; }
Distance : 15

102
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

103
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

104
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Distance : 11

106
Tree	{ reportMatcher () ; Long = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Long = Any.ANY . reportMatcher () ; }
Distance : 10

107
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

108
Tree	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Any.ANY ; }
Distance : 12

110
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = Long ; }
Distance : 12

111
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

112
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

113
Tree	{ returnZero ( Any.ANY ) ; Long = true ; }
Code	{ returnZero ( Any.ANY ) ; Long = true ; }
Distance : 12

114
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Distance : 8

115
Tree	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 11

116
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

117
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

118
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

119
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

120
Tree	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

121
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

122
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

123
Tree	protected
Code	protected
Distance : 17

124
Tree	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Distance : 8

125
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 11

126
Tree	{ return returnZero () ; }
Code	{ return returnZero () ; }
Distance : 11

127
Tree	{ return returnZero ( Any.ANY ) . < Long > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Long > returnZero () ; }
Distance : 9

128
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; }
Distance : 10

129
Tree	{ returnZero () ; Long = Any.ANY . returnZero () ; }
Code	{ returnZero () ; Long = Any.ANY . returnZero () ; }
Distance : 10

130
Tree	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Code	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Distance : 9

131
Tree	{ returnZero ( Any.ANY ) ; Long = false ; }
Code	{ returnZero ( Any.ANY ) ; Long = false ; }
Distance : 12

132
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Long = Any.ANY ; }
Distance : 13

133
Tree	{ return this . Long ; } class
Code	{ return this . Long ; } class
Distance : 13

134
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

135
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

136
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Long = Any.ANY ; }
Distance : 11

137
Tree	{ return this . Long ; } notifyListeners
Code	{ return this . Long ; } notifyListeners
Distance : 13

138
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

139
Tree	{ return returnZero ( Long . reportMatcher () ) ; }
Code	{ return returnZero ( Long . reportMatcher () ) ; }
Distance : 9

140
Tree	{ super ( Long ) ; reportMatcher () ; } Class
Code	{ super ( Long ) ; reportMatcher () ; } Class
Distance : 11

141
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

142
Tree	{ return ( Long ) reportMatcher () ; } Class
Code	{ return ( Long ) reportMatcher () ; } Class
Distance : 10

143
Tree	{ return Long ; } notifyListeners
Code	{ return Long ; } notifyListeners
Distance : 13

144
Tree	{ returnZero ( Any.ANY ) ; this . Long = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Long = Any.ANY ; }
Distance : 12

145
Tree	{ returnZero () ; Long = Any.ANY . reportMatcher () ; }
Code	{ returnZero () ; Long = Any.ANY . reportMatcher () ; }
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

147
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Long = Any.ANY ; }
Distance : 12

148
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

149
Tree	{ super ( Long ) ; reportMatcher () ; } Test
Code	{ super ( Long ) ; reportMatcher () ; } Test
Distance : 11

150
Tree	{ super ( Long ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Long ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

151
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

152
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Long = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Long = Any.ANY ; }
Distance : 12

153
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

154
Tree	{
Code	{
Distance : 16

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

157
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

158
Tree	{ return this . Long ; }
Code	{ return this . Long ; }
Distance : 12

159
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) ; Long = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = false ; }
Distance : 11

161
Tree	{ returnZero ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Distance : 9

162
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Distance : 11

163
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

165
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

166
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

167
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

170
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

172
Tree	{ return ( Long ) reportMatcher () ; }
Code	{ return ( Long ) reportMatcher () ; }
Distance : 9

173
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

175
Tree	{ throw returnZero ( Any.ANY ) ; }
Code	{ throw returnZero ( Any.ANY ) ; }
Distance : 12

176
Tree	{ Long = reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ Long = reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

177
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Distance : 11

178
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

179
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 12

181
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

182
Tree	{ super ( Long ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Long ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

183
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

184
Tree	{ null }
Code	{ null }
Distance : 15

185
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 7

186
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Distance : 9

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

190
Tree	{ return reportMatcher ( Long . reportMatcher () ) ; }
Code	{ return reportMatcher ( Long . reportMatcher () ) ; }
Distance : 8

191
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

192
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Distance : 10

193
Tree	{ reportMatcher ( Any.ANY ) ; Long = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = true ; }
Distance : 11

194
Tree	{ Long = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Long = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

195
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Long = super(); ; }
Distance : 12

196
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Long = Long ; }
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

198
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

199
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( Integer ) ; }
Code	{ super ( Integer ) ; }
Distance : 11

1
Tree	{ returnZero ( Any.ANY ) . returnZero () ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

2
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; fireChangeEvent }
Distance : 12

3
Tree	{ return; }
Code	{ return; }
Distance : 15

4
Tree	{ return this . Integer ; } notifyListeners
Code	{ return this . Integer ; } notifyListeners
Distance : 13

5
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

6
Tree	{ return this . Integer ; } class
Code	{ return this . Integer ; } class
Distance : 13

7
Tree	{ null reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 11

8
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

9
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = Any.ANY ; }
Distance : 12

10
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = true ; }
Distance : 12

12
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Distance : 13

13
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Integer = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Integer = Any.ANY ; }
Distance : 12

14
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Integer = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Integer = Any.ANY ; }
Distance : 13

15
Tree	{ returnZero () ; Integer = Any.ANY . reportMatcher () ; }
Code	{ returnZero () ; Integer = Any.ANY . reportMatcher () ; }
Distance : 11

16
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

17
Tree	{}
Code	{}
Distance : 17

18
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

19
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

20
Tree	{ return Integer ; }
Code	{ return Integer ; }
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

22
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

23
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 8

24
Tree	{ super ( Integer ) ; reportMatcher () ; }
Code	{ super ( Integer ) ; reportMatcher () ; }
Distance : 10

25
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Distance : 11

26
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Distance : 8

27
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

28
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

29
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; }
Distance : 12

30
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

31
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

32
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > reportMatcher () ; }
Distance : 9

33
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = null ; }
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

35
Tree	protected
Code	protected
Distance : 17

36
Tree	{ return ( Integer ) reportMatcher () ; } Class
Code	{ return ( Integer ) reportMatcher () ; } Class
Distance : 10

37
Tree	{ return ( Integer ) reportMatcher () ; } Test
Code	{ return ( Integer ) reportMatcher () ; } Test
Distance : 10

38
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Test
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Any.ANY ; }
Distance : 12

40
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

41
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Integer = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Integer = false ; }
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = true ; }
Distance : 11

43
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = false ; }
Distance : 11

45
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

46
Tree	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

48
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Distance : 10

49
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = Any.ANY ; }
Distance : 11

50
Tree	{ return Integer ; } notifyListeners
Code	{ return Integer ; } notifyListeners
Distance : 13

51
Tree	{ super ( Integer ) ; returnZero () ; }
Code	{ super ( Integer ) ; returnZero () ; }
Distance : 9

52
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 12

53
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

54
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = Integer ; }
Distance : 12

55
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Distance : 10

56
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Distance : 9

57
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; throw }
Distance : 12

58
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Distance : 10

59
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 11

60
Tree	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Distance : 10

61
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

62
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

63
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = false ; }
Distance : 11

64
Tree	{ return this . Integer ; } array
Code	{ return this . Integer ; } array
Distance : 13

65
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Distance : 9

66
Tree	{ super ( Integer ) ; reportMatcher () ; } Test
Code	{ super ( Integer ) ; reportMatcher () ; } Test
Distance : 11

67
Tree	{ Integer = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Integer = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

68
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

69
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

70
Tree	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

71
Tree	{ return returnZero ( Integer . returnZero () ) ; }
Code	{ return returnZero ( Integer . returnZero () ) ; }
Distance : 9

72
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Distance : 9

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Distance : 11

74
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

75
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

76
Tree	{ super ( Integer ) ; } notifyListeners
Code	{ super ( Integer ) ; } notifyListeners
Distance : 12

77
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

78
Tree	{ super ( Integer ) ; } class
Code	{ super ( Integer ) ; } class
Distance : 12

79
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

80
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

81
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Distance : 10

82
Tree	{ return ( Integer ) returnZero () ; }
Code	{ return ( Integer ) returnZero () ; }
Distance : 8

83
Tree	{ return returnZero ( Any.ANY ) . < Integer > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Integer > reportMatcher () ; }
Distance : 10

84
Tree	{ super ( Integer ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Integer ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

85
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Distance : 11

87
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 11

88
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

89
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

90
Tree	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 12

91
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = Any.ANY ; }
Distance : 13

92
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = false ; }
Distance : 12

93
Tree	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

94
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

95
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Distance : 13

96
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = null ; }
Distance : 11

97
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

98
Tree	{ return returnZero () ; }
Code	{ return returnZero () ; }
Distance : 11

99
Tree	{ reportMatcher ( Any.ANY ) ; Integer = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = true ; }
Distance : 11

100
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 8

101
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Integer = null ; }
Distance : 11

103
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

104
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

105
Tree	{ return reportMatcher ( Integer . returnZero () ) ; }
Code	{ return reportMatcher ( Integer . returnZero () ) ; }
Distance : 8

106
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

107
Tree	{ return returnZero ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 9

108
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = super(); ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Distance : 11

110
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Integer = null ; }
Distance : 12

111
Tree	{ return this . Integer ; }
Code	{ return this . Integer ; }
Distance : 12

112
Tree	{ return Integer ; } class
Code	{ return Integer ; } class
Distance : 13

113
Tree	{ super ( Integer ) ; returnZero ( NUMBER_CONSTANT ) ; }
Code	{ super ( Integer ) ; returnZero ( NUMBER_CONSTANT ) ; }
Distance : 12

114
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = Any.ANY ; }
Distance : 11

115
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

116
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

117
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = super(); ; }
Distance : 12

118
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Distance : 10

119
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

120
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Integer = return; ; }
Distance : 11

121
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

122
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

123
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

124
Tree	{ return ( Integer ) reportMatcher () ; }
Code	{ return ( Integer ) reportMatcher () ; }
Distance : 9

125
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

126
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = Integer ; }
Distance : 12

127
Tree	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Code	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Distance : 9

128
Tree	{ return returnZero ( Integer . reportMatcher () ) ; }
Code	{ return returnZero ( Integer . reportMatcher () ) ; }
Distance : 9

129
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

130
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

131
Tree	{ reportMatcher () ; Integer = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Integer = Any.ANY . reportMatcher () ; }
Distance : 10

132
Tree	{ Integer = reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ Integer = reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

133
Tree	{
Code	{
Distance : 16

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 11

135
Tree	{ returnZero ( Any.ANY ) ; Integer = false ; }
Code	{ returnZero ( Any.ANY ) ; Integer = false ; }
Distance : 12

136
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

137
Tree	{ returnZero ( Any.ANY ) ; Integer = true ; }
Code	{ returnZero ( Any.ANY ) ; Integer = true ; }
Distance : 12

138
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Integer = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Integer = Any.ANY ; }
Distance : 12

139
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

140
Tree	{ throw returnZero ( Any.ANY ) ; }
Code	{ throw returnZero ( Any.ANY ) ; }
Distance : 12

141
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

142
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

143
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

144
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; super }
Distance : 12

145
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

146
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

147
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Integer = false ; }
Distance : 12

148
Tree	{ super ( Integer ) ; } array
Code	{ super ( Integer ) ; } array
Distance : 12

149
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

150
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = null ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = null ; }
Distance : 13

151
Tree	{ returnZero () ; Integer = Any.ANY . returnZero () ; }
Code	{ returnZero () ; Integer = Any.ANY . returnZero () ; }
Distance : 10

152
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Distance : 11

153
Tree	{ super ( Integer ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Integer ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

154
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

155
Tree	{ Integer = returnZero ( Any.ANY ) . returnZero () ; }
Code	{ Integer = returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

156
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

157
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

159
Tree	{ super ( Integer ) ; reportMatcher () ; } Class
Code	{ super ( Integer ) ; reportMatcher () ; } Class
Distance : 11

160
Tree	{ returnZero ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 12

161
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

162
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

163
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

164
Tree	{ reportMatcher () ; Integer = Any.ANY . returnZero () ; }
Code	{ reportMatcher () ; Integer = Any.ANY . returnZero () ; }
Distance : 9

165
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

166
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

167
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

170
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

172
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

173
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

175
Tree	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Distance : 10

176
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 11

177
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

178
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; }
Distance : 11

179
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; return }
Distance : 12

181
Tree	{ continue; }
Code	{ continue; }
Distance : 15

182
Tree	{ super ( Integer ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Integer ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

183
Tree	{ return reportMatcher ( Integer . reportMatcher () ) ; }
Code	{ return reportMatcher ( Integer . reportMatcher () ) ; }
Distance : 8

184
Tree	{ reportMatcher ( Any.ANY ) ; Integer = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = false ; }
Distance : 11

185
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 7

186
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Distance : 9

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	private
Code	private
Distance : 17

190
Tree	{ null }
Code	{ null }
Distance : 15

191
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

193
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

194
Tree	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Distance : 9

195
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Integer = false ; }
Distance : 13

196
Tree	{ Integer = returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ Integer = returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

197
Tree	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Integer = Any.ANY ; } Class
Distance : 12

198
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

199
Tree	{ return Integer ; } array
Code	{ return Integer ; } array
Distance : 13

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

2
Tree	{ return reportMatcher ( Character . returnChar () ) ; }
Code	{ return reportMatcher ( Character . returnChar () ) ; }
Distance : 8

3
Tree	{ returnChar ( Any.ANY ) . returnChar () ; Character = false ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; Character = false ; }
Distance : 12

4
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

5
Tree	{ returnChar ( Any.ANY ) . returnChar () ; return NUMBER_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; return NUMBER_CONSTANT ; }
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = false ; }
Distance : 12

7
Tree	{ super ( Character ) ; returnChar ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Character ) ; returnChar ( NUMBER_CONSTANT ) ; } Test
Distance : 13

8
Tree	{ return this . Character ; } notifyListeners
Code	{ return this . Character ; } notifyListeners
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = Any.ANY ; }
Distance : 11

10
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = null ; }
Distance : 11

11
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; this . Character = Any.ANY ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; this . Character = Any.ANY ; }
Distance : 13

12
Tree	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Distance : 13

13
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; Character = Any.ANY ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; Character = Any.ANY ; }
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = null ; }
Distance : 12

15
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Character ; }
Distance : 12

16
Tree	{ returnChar ( Any.ANY ) ; Character = true ; }
Code	{ returnChar ( Any.ANY ) ; Character = true ; }
Distance : 12

17
Tree	{ Character = returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ Character = returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 10

18
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 10

19
Tree	{ returnChar ( Any.ANY ) . returnChar () ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

20
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

21
Tree	{ returnChar ( Any.ANY ) ; Character = false ; }
Code	{ returnChar ( Any.ANY ) ; Character = false ; }
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

23
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; super }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; super }
Distance : 10

24
Tree	{ throw returnChar ( Any.ANY ) ; }
Code	{ throw returnChar ( Any.ANY ) ; }
Distance : 12

25
Tree	{ return Character ; }
Code	{ return Character ; }
Distance : 12

26
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

27
Tree	{ super ( Character ) ; returnChar () ; }
Code	{ super ( Character ) ; returnChar () ; }
Distance : 9

28
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; return }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; return }
Distance : 10

29
Tree	private
Code	private
Distance : 17

30
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

31
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

32
Tree	{ super ( Character ) ; } array
Code	{ super ( Character ) ; } array
Distance : 12

33
Tree	{ super ( Character ) ; } notifyListeners
Code	{ super ( Character ) ; } notifyListeners
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

35
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

36
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

37
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

38
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = null ; }
Distance : 11

39
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) ; }
Distance : 10

40
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = false ; }
Distance : 12

41
Tree	{ super(); }
Code	{ super(); }
Distance : 15

42
Tree	{ return returnChar ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . < Character > returnChar () ; }
Distance : 9

43
Tree	{ reportMatcher () ; Character = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Character = Any.ANY . reportMatcher () ; }
Distance : 10

44
Tree	{ return Character ; } class
Code	{ return Character ; } class
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

46
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; return }
Distance : 12

47
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

48
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = Any.ANY ; }
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

52
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = Any.ANY ; }
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = true ; }
Distance : 11

55
Tree	{ returnChar () ; Character = Any.ANY . reportMatcher () ; }
Code	{ returnChar () ; Character = Any.ANY . reportMatcher () ; }
Distance : 11

56
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

57
Tree	{ super ( Character ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Character ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

58
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

59
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 9

60
Tree	{ return ( Character ) returnChar () ; }
Code	{ return ( Character ) returnChar () ; }
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = true ; }
Distance : 12

62
Tree	{ return ( Character ) returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

63
Tree	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = Any.ANY ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = Any.ANY ; }
Distance : 13

64
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; continue; }
Distance : 9

65
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; return; }
Distance : 9

67
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

68
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; super = {} ; }
Distance : 11

69
Tree	{ return; }
Code	{ return; }
Distance : 15

70
Tree	{ super ( Character ) ; returnChar () ; } Class
Code	{ super ( Character ) ; returnChar () ; } Class
Distance : 10

71
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; return = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; return = {} ; }
Distance : 11

72
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

73
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = super(); ; }
Distance : 11

74
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

75
Tree	{ returnChar ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

76
Tree	{ return returnChar ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnChar ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

77
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

78
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

79
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 11

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; if }
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; if }
Distance : 12

82
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

83
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Distance : 12

85
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Test
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Test
Distance : 13

86
Tree	{ Character = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Character = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

87
Tree	{ return returnChar ( Character . returnChar () ) ; }
Code	{ return returnChar ( Character . returnChar () ) ; }
Distance : 9

88
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; throw }
Distance : 12

89
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; return }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; return }
Distance : 13

90
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Character = false ; }
Distance : 11

91
Tree	{ return returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; Character = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = true ; }
Distance : 11

93
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 11

94
Tree	{ return Character ; } array
Code	{ return Character ; } array
Distance : 13

95
Tree	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

96
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

97
Tree	{ return returnChar ( Any.ANY ) ; }
Code	{ return returnChar ( Any.ANY ) ; }
Distance : 11

98
Tree	{ super ( Character ) ; }
Code	{ super ( Character ) ; }
Distance : 11

99
Tree	{ continue; }
Code	{ continue; }
Distance : 15

100
Tree	{ return ( Character ) reportMatcher () ; }
Code	{ return ( Character ) reportMatcher () ; }
Distance : 9

101
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

102
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

103
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

104
Tree	{ return this . Character ; } array
Code	{ return this . Character ; } array
Distance : 13

105
Tree	{ super ( Character ) ; reportMatcher () ; }
Code	{ super ( Character ) ; reportMatcher () ; }
Distance : 10

106
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

107
Tree	{}
Code	{}
Distance : 17

108
Tree	{ return returnChar ( Any.ANY , Any.ANY ) . returnChar () ; }
Code	{ return returnChar ( Any.ANY , Any.ANY ) . returnChar () ; }
Distance : 8

109
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = return; ; }
Distance : 11

110
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; reportMatcher }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; reportMatcher }
Distance : 10

111
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; super }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; super }
Distance : 10

112
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = true ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; return = super ; }
Distance : 11

114
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Distance : 12

115
Tree	{ returnChar ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Code	{ returnChar ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Distance : 10

116
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Class
Distance : 12

117
Tree	{ returnChar ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ returnChar ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 12

118
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = super(); ; }
Distance : 12

120
Tree	{ return ( Character ) returnChar () ; } Test
Code	{ return ( Character ) returnChar () ; } Test
Distance : 9

121
Tree	{ returnChar ( Any.ANY ) ; return true ; }
Code	{ returnChar ( Any.ANY ) ; return true ; }
Distance : 12

122
Tree	{ null }
Code	{ null }
Distance : 15

123
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; super(); }
Distance : 9

124
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = return; ; }
Distance : 12

125
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Distance : 9

126
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

127
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

128
Tree	{ super ( Character ) ; returnChar ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Character ) ; returnChar ( NUMBER_CONSTANT ) ; } Class
Distance : 13

129
Tree	{ super ( Character ) ; returnChar ( NUMBER_CONSTANT ) ; }
Code	{ super ( Character ) ; returnChar ( NUMBER_CONSTANT ) ; }
Distance : 12

130
Tree	{ return reportMatcher ( Character . reportMatcher () ) ; }
Code	{ return reportMatcher ( Character . reportMatcher () ) ; }
Distance : 8

131
Tree	{ reportMatcher () ; Character = Any.ANY . returnChar () ; }
Code	{ reportMatcher () ; Character = Any.ANY . returnChar () ; }
Distance : 9

132
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; super }
Distance : 12

133
Tree	{ returnChar ( Any.ANY ) ; return false ; }
Code	{ returnChar ( Any.ANY ) ; return false ; }
Distance : 12

134
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

135
Tree	{ Character = returnChar ( Any.ANY ) . returnChar () ; }
Code	{ Character = returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

136
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 11

137
Tree	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

138
Tree	{ return returnChar ( Any.ANY ) . < Character > reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . < Character > reportMatcher () ; }
Distance : 10

139
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = Any.ANY ; }
Distance : 11

140
Tree	{ return returnChar ( returnChar ( Any.ANY ) ) ; }
Code	{ return returnChar ( returnChar ( Any.ANY ) ) ; }
Distance : 9

141
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Character = null ; }
Distance : 12

142
Tree	{ returnChar ( Any.ANY ) . returnChar () ; Character = Any.ANY ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; Character = Any.ANY ; }
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

144
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

145
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } Test
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } Test
Distance : 11

146
Tree	{ returnChar () ; Character = Any.ANY . returnChar () ; }
Code	{ returnChar () ; Character = Any.ANY . returnChar () ; }
Distance : 10

147
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Any.ANY = false ; }
Distance : 11

148
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

149
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

150
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

151
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

152
Tree	protected
Code	protected
Distance : 17

153
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; return NUMBER_CONSTANT ; }
Distance : 11

154
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; null }
Distance : 9

155
Tree	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = false ; }
Code	{ returnChar ( Any.ANY ) . returnChar () ; this . Character = false ; }
Distance : 13

156
Tree	{ return this . Character ; } class
Code	{ return this . Character ; } class
Distance : 13

157
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

158
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

159
Tree	{ return returnChar ( Character . reportMatcher () ) ; }
Code	{ return returnChar ( Character . reportMatcher () ) ; }
Distance : 9

160
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Class
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } Class
Distance : 13

161
Tree	{ return Character ; } notifyListeners
Code	{ return Character ; } notifyListeners
Distance : 13

162
Tree	{ return ( Character ) returnChar () ; } Class
Code	{ return ( Character ) returnChar () ; } Class
Distance : 9

163
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; super = super ; }
Distance : 11

164
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

165
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

166
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

167
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

168
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

169
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Any.ANY = true ; }
Distance : 11

170
Tree	{ super ( Character ) ; returnChar () ; } Test
Code	{ super ( Character ) ; returnChar () ; } Test
Distance : 10

171
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

172
Tree	{ return reportMatcher ( returnChar ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnChar ( Any.ANY ) ) ; }
Distance : 8

173
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

174
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; Character = false ; }
Distance : 11

176
Tree	{ Character = reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ Character = reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 9

177
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

178
Tree	{ return reportMatcher ( Any.ANY ) . < Character > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > reportMatcher () ; }
Distance : 9

179
Tree	{ return returnChar () ; }
Code	{ return returnChar () ; }
Distance : 11

180
Tree	{ return this . Character ; }
Code	{ return this . Character ; }
Distance : 12

181
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; throw }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; throw }
Distance : 13

182
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

183
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) ; }
Distance : 10

184
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

185
Tree	{
Code	{
Distance : 16

186
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Distance : 8

187
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

188
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnChar () ; }
Distance : 7

189
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

190
Tree	{ reportMatcher ( Any.ANY ) ; Character = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = false ; }
Distance : 11

191
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

192
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

193
Tree	{ null reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; }
Distance : 11

194
Tree	{ return returnChar ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnChar ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

195
Tree	{ returnChar ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Code	{ returnChar ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Distance : 9

196
Tree	{ returnChar ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Code	{ returnChar ( Any.ANY ) . reportMatcher () ; this . Character = Character ; }
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Character = Any.ANY ; } Test
Distance : 12

198
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } Class
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } Class
Distance : 11

199
Tree	{ super ( Character ) ; } class
Code	{ super ( Character ) ; } class
Distance : 12

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Byte = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Byte = Any.ANY ; }
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

2
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

3
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

4
Tree	{ return Byte ; } notifyListeners
Code	{ return Byte ; } notifyListeners
Distance : 13

5
Tree	{ return Byte ; } array
Code	{ return Byte ; } array
Distance : 13

6
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; return }
Distance : 10

7
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = true ; }
Distance : 11

8
Tree	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Distance : 9

9
Tree	private
Code	private
Distance : 17

10
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; Byte = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; Byte = Any.ANY ; }
Distance : 12

11
Tree	{ Byte = returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ Byte = returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

12
Tree	{ return returnZero ( Any.ANY ) . < Byte > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Byte > returnZero () ; }
Distance : 9

13
Tree	{ return returnZero ( Any.ANY ) ; }
Code	{ return returnZero ( Any.ANY ) ; }
Distance : 11

14
Tree	{ returnZero () ; Byte = Any.ANY . reportMatcher () ; }
Code	{ returnZero () ; Byte = Any.ANY . reportMatcher () ; }
Distance : 11

15
Tree	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Distance : 10

16
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = Any.ANY ; }
Distance : 11

17
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

18
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Any.ANY ; }
Distance : 12

19
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = false ; }
Distance : 12

20
Tree	{ null reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 11

21
Tree	{ super ( Byte ) ; reportMatcher () ; }
Code	{ super ( Byte ) ; reportMatcher () ; }
Distance : 10

22
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

23
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

24
Tree	{}
Code	{}
Distance : 17

25
Tree	protected
Code	protected
Distance : 17

26
Tree	{ super ( Byte ) ; }
Code	{ super ( Byte ) ; }
Distance : 11

27
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = null ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = true ; }
Distance : 11

29
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

30
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = false ; }
Distance : 11

31
Tree	{ return reportMatcher ( Byte . reportMatcher () ) ; }
Code	{ return reportMatcher ( Byte . reportMatcher () ) ; }
Distance : 8

32
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Test
Distance : 12

34
Tree	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 12

35
Tree	{ super ( Byte ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Byte ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; } Class
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return = super ; }
Distance : 11

38
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

39
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

40
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = Any.ANY ; }
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; Byte = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = true ; }
Distance : 11

42
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; return }
Distance : 10

43
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

44
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; fireChangeEvent }
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; fireChangeEvent }
Distance : 12

45
Tree	{ returnZero ( Any.ANY ) ; Byte = false ; }
Code	{ returnZero ( Any.ANY ) ; Byte = false ; }
Distance : 12

46
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; }
Distance : 8

47
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

48
Tree	{ return Byte ; } class
Code	{ return Byte ; } class
Distance : 13

49
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

50
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

51
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

52
Tree	{ reportMatcher () ; Byte = Any.ANY . returnZero () ; }
Code	{ reportMatcher () ; Byte = Any.ANY . returnZero () ; }
Distance : 9

53
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = true ; }
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; continue; }
Distance : 9

55
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

56
Tree	{ return returnZero () ; }
Code	{ return returnZero () ; }
Distance : 11

57
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 8

58
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Distance : 13

59
Tree	{ return reportMatcher ( Byte . returnZero () ) ; }
Code	{ return reportMatcher ( Byte . returnZero () ) ; }
Distance : 8

60
Tree	{ null }
Code	{ null }
Distance : 15

61
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return; }
Distance : 9

62
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

63
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

64
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

65
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; super }
Distance : 10

66
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Byte = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Byte = false ; }
Distance : 12

67
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = Any.ANY ; }
Distance : 13

68
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 11

69
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = {} ; }
Distance : 11

70
Tree	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnZero ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

71
Tree	{ return; }
Code	{ return; }
Distance : 15

72
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

73
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

74
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

75
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

76
Tree	{ Byte = reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ Byte = reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

77
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 11

78
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Byte = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Byte = Any.ANY ; }
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super(); }
Distance : 9

80
Tree	{ super ( Byte ) ; reportMatcher () ; } Test
Code	{ super ( Byte ) ; reportMatcher () ; } Test
Distance : 11

81
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Distance : 9

82
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; return }
Distance : 12

84
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

85
Tree	{ return returnZero ( Byte . returnZero () ) ; }
Code	{ return returnZero ( Byte . returnZero () ) ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = Any.ANY ; }
Distance : 11

87
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

88
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; }
Distance : 12

89
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Class
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Class
Distance : 11

90
Tree	{ super ( Byte ) ; reportMatcher () ; } Class
Code	{ super ( Byte ) ; reportMatcher () ; } Class
Distance : 11

91
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

92
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 11

93
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = Byte ; }
Distance : 12

94
Tree	{ super ( Byte ) ; returnZero ( NUMBER_CONSTANT ) ; }
Code	{ super ( Byte ) ; returnZero ( NUMBER_CONSTANT ) ; }
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Byte = false ; }
Distance : 11

96
Tree	{ return this . Byte ; }
Code	{ return this . Byte ; }
Distance : 12

97
Tree	{ reportMatcher () ; Byte = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Byte = Any.ANY . reportMatcher () ; }
Distance : 10

98
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = else ; }
Distance : 11

99
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Distance : 8

100
Tree	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

101
Tree	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

102
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = null ; }
Distance : 12

103
Tree	{ return ( Byte ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

104
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = false ; }
Distance : 13

105
Tree	{ continue; }
Code	{ continue; }
Distance : 15

106
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

108
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

109
Tree	{ return ( Byte ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

110
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

111
Tree	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 12

112
Tree	{ returnZero ( Any.ANY ) ; Byte = true ; }
Code	{ returnZero ( Any.ANY ) ; Byte = true ; }
Distance : 12

113
Tree	{ return this . Byte ; } class
Code	{ return this . Byte ; } class
Distance : 13

114
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Byte > reportMatcher () ; }
Distance : 9

115
Tree	{ throw returnZero ( Any.ANY ) ; }
Code	{ throw returnZero ( Any.ANY ) ; }
Distance : 12

116
Tree	{ returnZero ( Any.ANY ) ; return true ; }
Code	{ returnZero ( Any.ANY ) ; return true ; }
Distance : 12

117
Tree	{ returnZero ( Any.ANY ) ; return false ; }
Code	{ returnZero ( Any.ANY ) ; return false ; }
Distance : 12

118
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

119
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = null ; }
Distance : 12

120
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

121
Tree	{ return this . Byte ; } array
Code	{ return this . Byte ; } array
Distance : 13

122
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

123
Tree	{ return Byte ; }
Code	{ return Byte ; }
Distance : 12

124
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

125
Tree	{ super ( Byte ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Byte ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Class
Distance : 13

126
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ returnZero ( Any.ANY ) . returnZero () ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

128
Tree	{ return returnZero ( Byte . reportMatcher () ) ; }
Code	{ return returnZero ( Byte . reportMatcher () ) ; }
Distance : 9

129
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Any.ANY = false ; }
Distance : 11

130
Tree	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Code	{ return returnZero ( returnZero ( Any.ANY ) ) ; }
Distance : 9

131
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

132
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

133
Tree	{ return returnZero ( Any.ANY ) . < Byte > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Byte > reportMatcher () ; }
Distance : 10

134
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; }
Distance : 10

135
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 11

136
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; super }
Distance : 12

137
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Distance : 12

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = return; ; }
Distance : 11

139
Tree	{ returnZero ( Any.ANY ) ; this . Byte = Any.ANY ; }
Code	{ returnZero ( Any.ANY ) ; this . Byte = Any.ANY ; }
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Byte = Any.ANY ; throw }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Byte = false ; }
Distance : 12

142
Tree	{
Code	{
Distance : 16

143
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; return NUMBER_CONSTANT ; }
Distance : 11

144
Tree	{ Byte = returnZero ( Any.ANY ) . returnZero () ; }
Code	{ Byte = returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

145
Tree	{ super ( Byte ) ; } array
Code	{ super ( Byte ) ; } array
Distance : 12

146
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

147
Tree	{ return this . Byte ; } notifyListeners
Code	{ return this . Byte ; } notifyListeners
Distance : 13

148
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

149
Tree	{ return ( Byte ) returnZero ( Any.ANY ) ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) ; }
Distance : 10

150
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

151
Tree	{ return ( Byte ) reportMatcher () ; } Test
Code	{ return ( Byte ) reportMatcher () ; } Test
Distance : 10

152
Tree	{ returnZero () ; Byte = Any.ANY . returnZero () ; }
Code	{ returnZero () ; Byte = Any.ANY . returnZero () ; }
Distance : 10

153
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

154
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

155
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

156
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

157
Tree	{ super ( Byte ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Byte ) ; reportMatcher ( NUMBER_CONSTANT ) ; } Test
Distance : 13

158
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . Byte = super(); ; }
Distance : 12

159
Tree	{ return ( Byte ) reportMatcher () ; } Class
Code	{ return ( Byte ) reportMatcher () ; } Class
Distance : 10

160
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

161
Tree	{ super ( Byte ) ; } class
Code	{ super ( Byte ) ; } class
Distance : 12

162
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; super = super ; }
Distance : 11

163
Tree	{ super ( Byte ) ; } notifyListeners
Code	{ super ( Byte ) ; } notifyListeners
Distance : 12

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

165
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) ; Byte = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = false ; }
Distance : 11

167
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Test
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } Test
Distance : 11

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

170
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

172
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

173
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Class
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Class
Distance : 13

174
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

175
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

176
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; reportMatcher }
Distance : 13

177
Tree	{ return ( Byte ) returnZero () ; }
Code	{ return ( Byte ) returnZero () ; }
Distance : 8

178
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

179
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

180
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; reportMatcher }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; reportMatcher }
Distance : 13

181
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

182
Tree	{ super ( Byte ) ; returnZero () ; }
Code	{ super ( Byte ) ; returnZero () ; }
Distance : 9

183
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

184
Tree	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnZero ( Any.ANY ) ) ; }
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnZero () ; }
Distance : 7

186
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

187
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; null }
Distance : 9

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	{ return ( Byte ) reportMatcher () ; }
Code	{ return ( Byte ) reportMatcher () ; }
Distance : 9

190
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; super }
Distance : 10

191
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

192
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = null ; }
Distance : 11

193
Tree	{ Byte = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Byte = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; Byte = super(); ; }
Distance : 11

195
Tree	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = null ; }
Code	{ returnZero ( Any.ANY ) . returnZero () ; this . Byte = null ; }
Distance : 13

196
Tree	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Code	{ returnZero ( Any.ANY ) . reportMatcher () ; this . Byte = Byte ; }
Distance : 13

197
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

198
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Test
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } Test
Distance : 13

199
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 11

1
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = false ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = false ; }
Distance : 13

2
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Distance : 10

3
Tree	{ return returnFalse ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return returnFalse ( reportMatcher ( Any.ANY ) ) ; }
Distance : 9

4
Tree	{ null reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ null reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 11

5
Tree	{ return Boolean ; } notifyListeners
Code	{ return Boolean ; } notifyListeners
Distance : 13

6
Tree	{ throw reportMatcher ( Any.ANY ) ; } Class
Code	{ throw reportMatcher ( Any.ANY ) ; } Class
Distance : 12

7
Tree	{ super ( Boolean ) ; } class
Code	{ super ( Boolean ) ; } class
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = super(); ; }
Distance : 11

9
Tree	{ return reportMatcher () ; } Class
Code	{ return reportMatcher () ; } Class
Distance : 12

10
Tree	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

11
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = Any.ANY ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = Any.ANY ; }
Distance : 12

12
Tree	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; return }
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; return }
Distance : 12

14
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Any.ANY = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Any.ANY = true ; }
Distance : 11

15
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 11

16
Tree	{ returnFalse () ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ returnFalse () ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 11

17
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 10

18
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Distance : 13

19
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 11

20
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

21
Tree	{ super ( Boolean ) ; returnFalse ( NUMBER_CONSTANT ) ; }
Code	{ super ( Boolean ) ; returnFalse ( NUMBER_CONSTANT ) ; }
Distance : 12

22
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = null ; }
Distance : 12

23
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

24
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; return }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; return }
Distance : 13

25
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

26
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

27
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = super(); ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = super(); ; }
Distance : 12

29
Tree	{ return Boolean ; }
Code	{ return Boolean ; }
Distance : 12

30
Tree	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

31
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

32
Tree	{ Boolean = reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ Boolean = reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 9

33
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 14

34
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Class
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return STRING_CONSTANT ; } Test
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = CHAR_CONS ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = CHAR_CONS ; }
Distance : 11

37
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; Any.ANY = false ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; Any.ANY = false ; }
Distance : 12

38
Tree	{ super ( Boolean ) ; returnFalse () ; } Test
Code	{ super ( Boolean ) ; returnFalse () ; } Test
Distance : 10

39
Tree	{ returnFalse ( Any.ANY ) ; Boolean = true ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = true ; }
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = return; ; }
Distance : 12

41
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; return NUMBER_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; return NUMBER_CONSTANT ; }
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = true ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = true ; }
Distance : 11

43
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

44
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Any.ANY ; }
Distance : 12

46
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

47
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = false ; }
Distance : 11

48
Tree	{ return this . Boolean ; } array
Code	{ return this . Boolean ; } array
Distance : 13

49
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = Any.ANY ; }
Distance : 11

50
Tree	{ return reportMatcher ( returnFalse ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( returnFalse ( Any.ANY ) ) ; }
Distance : 8

51
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Distance : 11

52
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = return; ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = return; ; }
Distance : 11

53
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) ; }
Distance : 10

54
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

55
Tree	{ return returnFalse ( returnFalse ( Any.ANY ) ) ; }
Code	{ return returnFalse ( returnFalse ( Any.ANY ) ) ; }
Distance : 9

56
Tree	{ super ( Boolean ) ; reportMatcher () ; }
Code	{ super ( Boolean ) ; reportMatcher () ; }
Distance : 10

57
Tree	{ Boolean = returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ Boolean = returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) ; null }
Code	{ reportMatcher ( Any.ANY ) ; null }
Distance : 12

59
Tree	{ return returnFalse ( Boolean . returnFalse () ) ; }
Code	{ return returnFalse ( Boolean . returnFalse () ) ; }
Distance : 9

60
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Class
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Any.ANY = false ; }
Distance : 11

62
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 13

63
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; return; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; return; }
Distance : 9

64
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

65
Tree	{ return ( Boolean ) returnFalse () ; }
Code	{ return ( Boolean ) returnFalse () ; }
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; super(); }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; super(); }
Distance : 9

67
Tree	{ Boolean = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ Boolean = reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

68
Tree	{ return this . Boolean ; } class
Code	{ return this . Boolean ; } class
Distance : 13

69
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 9

70
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = {} ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = {} ; }
Distance : 11

71
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; if }
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; if }
Distance : 12

72
Tree	{ returnFalse ( Any.ANY ) ; Boolean = false ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = false ; }
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = Any.ANY ; }
Distance : 11

74
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Test
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Test
Distance : 13

75
Tree	{ return reportMatcher ( Boolean . reportMatcher () ) ; }
Code	{ return reportMatcher ( Boolean . reportMatcher () ) ; }
Distance : 8

76
Tree	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( reportMatcher ( Any.ANY ) ) ; }
Distance : 8

77
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

78
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 11

79
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; throw }
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; throw }
Distance : 12

80
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

81
Tree	{ throw returnFalse ( Any.ANY ) ; }
Code	{ throw returnFalse ( Any.ANY ) ; }
Distance : 12

82
Tree	{ returnFalse ( Any.ANY ) ; return true ; }
Code	{ returnFalse ( Any.ANY ) ; return true ; }
Distance : 12

83
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

84
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; continue; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; continue; }
Distance : 9

85
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

86
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; super }
Distance : 12

87
Tree	{ reportMatcher () ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher () ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 10

88
Tree	{ reportMatcher ( Any.ANY ) ; continue; }
Code	{ reportMatcher ( Any.ANY ) ; continue; }
Distance : 12

89
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

90
Tree	{ return Boolean ; } array
Code	{ return Boolean ; } array
Distance : 13

91
Tree	{ return returnFalse ( Any.ANY ) ; }
Code	{ return returnFalse ( Any.ANY ) ; }
Distance : 11

92
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

93
Tree	{ return returnFalse () ; }
Code	{ return returnFalse () ; }
Distance : 11

94
Tree	{ super ( Boolean ) ; } array
Code	{ super ( Boolean ) ; } array
Distance : 12

95
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

96
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 11

97
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Class
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Class
Distance : 12

98
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

99
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = Any.ANY ; }
Distance : 12

100
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = true ; }
Distance : 12

101
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 10

102
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = false ; }
Distance : 12

103
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

104
Tree	{ return Any.ANY ; } array
Code	{ return Any.ANY ; } array
Distance : 14

105
Tree	{ returnFalse ( Any.ANY ) ; return STRING_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) ; return STRING_CONSTANT ; }
Distance : 12

106
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 14

107
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 14

108
Tree	{ return this . Boolean ; } notifyListeners
Code	{ return this . Boolean ; } notifyListeners
Distance : 13

109
Tree	{ return returnFalse ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 9

110
Tree	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

111
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; if }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; if }
Distance : 10

112
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 8

113
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Class
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Class
Distance : 11

114
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 9

115
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; return }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; return }
Distance : 10

116
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

117
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; returnFalse }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; returnFalse }
Distance : 12

118
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

119
Tree	{ return; }
Code	{ return; }
Distance : 15

120
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 8

121
Tree	{ return returnFalse ( Any.ANY , Any.ANY ) . returnFalse () ; }
Code	{ return returnFalse ( Any.ANY , Any.ANY ) . returnFalse () ; }
Distance : 8

122
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = null ; }
Distance : 11

123
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; Boolean = false ; }
Distance : 12

124
Tree	{ return reportMatcher ( Boolean . returnFalse () ) ; }
Code	{ return reportMatcher ( Boolean . returnFalse () ) ; }
Distance : 8

125
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Distance : 12

126
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; this . Boolean = Any.ANY ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; this . Boolean = Any.ANY ; }
Distance : 13

127
Tree	{ return returnFalse ( Any.ANY ) . < Boolean > reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . < Boolean > reportMatcher () ; }
Distance : 10

128
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = true ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Boolean = true ; }
Distance : 11

129
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = Any.ANY ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = Any.ANY ; }
Distance : 13

130
Tree	{ return ( Boolean ) reportMatcher () ; }
Code	{ return ( Boolean ) reportMatcher () ; }
Distance : 9

131
Tree	{ super ( Boolean ) ; returnFalse () ; } Class
Code	{ super ( Boolean ) ; returnFalse () ; } Class
Distance : 10

132
Tree	{ return returnFalse ( Boolean . reportMatcher () ) ; }
Code	{ return returnFalse ( Boolean . reportMatcher () ) ; }
Distance : 9

133
Tree	{ return returnFalse ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY , Any.ANY ) . reportMatcher () ; }
Distance : 9

134
Tree	{ returnFalse () ; Boolean = Any.ANY . returnFalse () ; }
Code	{ returnFalse () ; Boolean = Any.ANY . returnFalse () ; }
Distance : 10

135
Tree	{ throw reportMatcher ( Any.ANY ) ; } Test
Code	{ throw reportMatcher ( Any.ANY ) ; } Test
Distance : 12

136
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; null }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; null }
Distance : 9

137
Tree	{ reportMatcher ( Any.ANY ) ; super(); }
Code	{ reportMatcher ( Any.ANY ) ; super(); }
Distance : 12

138
Tree	{
Code	{
Distance : 16

139
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

140
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = else ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = else ; }
Distance : 11

141
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

142
Tree	{ return this . Boolean ; }
Code	{ return this . Boolean ; }
Distance : 12

143
Tree	{ return; reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 11

144
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; Any.ANY = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; Any.ANY = false ; }
Distance : 11

145
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = false ; }
Distance : 11

146
Tree	{ super ( Boolean ) ; returnFalse ( NUMBER_CONSTANT ) ; } Class
Code	{ super ( Boolean ) ; returnFalse ( NUMBER_CONSTANT ) ; } Class
Distance : 13

147
Tree	{ return Any.ANY ; } class
Code	{ return Any.ANY ; } class
Distance : 14

148
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > reportMatcher () ; }
Distance : 9

149
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Class
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } Class
Distance : 13

150
Tree	{ returnFalse ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Code	{ returnFalse ( Any.ANY ) ; this . Boolean = Any.ANY ; }
Distance : 12

151
Tree	{ reportMatcher () ; Boolean = Any.ANY . returnFalse () ; }
Code	{ reportMatcher () ; Boolean = Any.ANY . returnFalse () ; }
Distance : 9

152
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = Boolean ; }
Distance : 12

153
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; this . Boolean = null ; }
Distance : 12

154
Tree	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Code	{ returnFalse ( Any.ANY ) . returnFalse () ; this . Boolean = Boolean ; }
Distance : 13

155
Tree	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 9

156
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; return NUMBER_CONSTANT ; }
Distance : 11

157
Tree	{ return reportMatcher ( Any.ANY ) ; } Test
Code	{ return reportMatcher ( Any.ANY ) ; } Test
Distance : 11

158
Tree	{ super ( Boolean ) ; } notifyListeners
Code	{ super ( Boolean ) ; } notifyListeners
Distance : 12

159
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

160
Tree	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Test
Code	{ reportMatcher ( Any.ANY ) ; this . Boolean = Any.ANY ; } Test
Distance : 12

161
Tree	{ return reportMatcher () ; } Test
Code	{ return reportMatcher () ; } Test
Distance : 12

162
Tree	{ return Boolean ; } class
Code	{ return Boolean ; } class
Distance : 13

163
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Test
Distance : 12

164
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

165
Tree	{ return ( Boolean ) returnFalse () ; } Class
Code	{ return ( Boolean ) returnFalse () ; } Class
Distance : 9

166
Tree	{ super ( Boolean ) ; returnFalse ( NUMBER_CONSTANT ) ; } Test
Code	{ super ( Boolean ) ; returnFalse ( NUMBER_CONSTANT ) ; } Test
Distance : 13

167
Tree	{ super ( Boolean ) ; returnFalse () ; }
Code	{ super ( Boolean ) ; returnFalse () ; }
Distance : 9

168
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

169
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; super }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; super }
Distance : 10

170
Tree	{ continue; }
Code	{ continue; }
Distance : 15

171
Tree	{ null }
Code	{ null }
Distance : 15

172
Tree	{}
Code	{}
Distance : 17

173
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Boolean = false ; }
Distance : 12

174
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

175
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

176
Tree	{ throw reportMatcher ( Any.ANY ) ; }
Code	{ throw reportMatcher ( Any.ANY ) ; }
Distance : 11

177
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Test
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } Test
Distance : 11

178
Tree	{ returnFalse ( Any.ANY ) ; return false ; }
Code	{ returnFalse ( Any.ANY ) ; return false ; }
Distance : 12

179
Tree	{ reportMatcher ( Any.ANY ) ; return; }
Code	{ reportMatcher ( Any.ANY ) ; return; }
Distance : 12

180
Tree	{ return ( Boolean ) returnFalse () ; } Test
Code	{ return ( Boolean ) returnFalse () ; } Test
Distance : 9

181
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; super }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; super }
Distance : 10

182
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

183
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

184
Tree	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY , Any.ANY ) . returnFalse () ; }
Distance : 7

185
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 11

186
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = super ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; super = super ; }
Distance : 11

187
Tree	private
Code	private
Distance : 17

188
Tree	{ super(); }
Code	{ super(); }
Distance : 15

189
Tree	{ super ( Boolean ) ; }
Code	{ super ( Boolean ) ; }
Distance : 11

190
Tree	catch
Code	catch
Distance : 17

191
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFor }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; returnFor }
Distance : 13

192
Tree	{ super ( Boolean ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Code	{ super ( Boolean ) ; reportMatcher ( NUMBER_CONSTANT ) ; }
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = null ; }
Code	{ reportMatcher ( Any.ANY ) . reportMatcher () ; Boolean = null ; }
Distance : 11

194
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; return NUMBER_CONSTANT ; }
Distance : 12

195
Tree	{ Boolean = returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ Boolean = returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

196
Tree	{ returnFalse ( Any.ANY ) . reportMatcher () ; Boolean = Any.ANY ; }
Code	{ returnFalse ( Any.ANY ) . reportMatcher () ; Boolean = Any.ANY ; }
Distance : 12

197
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

198
Tree	{ return reportMatcher ( Any.ANY ) ; } Class
Code	{ return reportMatcher ( Any.ANY ) ; } Class
Distance : 11

199
Tree	{ return Any.ANY ; } notifyListeners
Code	{ return Any.ANY ; } notifyListeners
Distance : 14

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e , e ) ; }
Distance : 4

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e + class ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e + class ) ; }
Distance : 5

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , e . handleVerifyException () ) ; }
Distance : 6

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error ) ; }
Distance : 3

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Distance : 2

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e . handleVerifyException () ) ; }
Distance : 6

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 7

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e ) ; }
Distance : 3

9
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 2

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 6

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 7

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 6

14
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Distance : 5

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , handleVerifyException ( e ) ) ; }
Distance : 8

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( CHAR_CONS ) ; }
Distance : 10

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 6

18
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 7

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 6

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 2

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error . handleVerifyException ( e , e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error . handleVerifyException ( e , e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 12

23
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e , error . handleVerifyException () ) ; }
Distance : 10

24
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 8

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 7

26
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , this . e ) ; }
Distance : 7

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Distance : 3

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Distance : 8

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Distance : 5

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 6

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , e . handleVerifyException () ) ; }
Distance : 9

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , CHAR_CONS ) ; }
Distance : 10

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 8

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e + class ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e + class ) ; }
Distance : 5

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e + CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e + CHAR_CONS ) ; }
Distance : 5

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , error . handleVerifyException () ) ; }
Distance : 8

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e ) ; }
Distance : 4

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , e ) ; }
Distance : 4

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 4

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( handleVerifyException ( e ) , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( handleVerifyException ( e ) , e ) ; }
Distance : 6

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 7

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Distance : 9

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 10

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Distance : 10

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( byte ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( byte ) ; }
Distance : 10

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 8

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 12

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , e . handleVerifyException () ) ; }
Distance : 8

51
Tree	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( error ) ; }
Distance : 4

53
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 4

54
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

55
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 7

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 8

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 3

58
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Distance : 5

59
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

60
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 9

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , this . error ) ; }
Distance : 7

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 8

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 9

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , false ) ; }
Distance : 8

65
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error . handleVerifyException ( e , e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error . handleVerifyException ( e , e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 12

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , e . handleVerifyException () ) ; }
Distance : 8

67
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 3

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , false ) ; }
Distance : 10

69
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Distance : 3

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e , error ) ; }
Distance : 4

71
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 6

72
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , error . handleVerifyException () ) ; }
Distance : 9

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e + <> ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e + <> ) ; }
Distance : 5

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e , e ) ; }
Distance : 6

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 5

77
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 9

78
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( handleVerifyException ( error ) , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( handleVerifyException ( error ) , error ) ; }
Distance : 7

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , false ) ; }
Distance : 4

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( e ) ) ; }
Distance : 8

82
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Distance : 5

83
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 6

84
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 4

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 4

86
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Distance : 6

87
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > e ) { e = handleVerifyException ( e ) ; }
Distance : 5

88
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > e ) { error = handleVerifyException ( e ) ; }
Distance : 4

89
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( handleVerifyException ( e ) , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( handleVerifyException ( e ) , error ) ; }
Distance : 7

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 6

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( final ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( final ) ; }
Distance : 10

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 6

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

95
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 13

96
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , CHAR_CONS ) ; }
Distance : 8

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 9

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 4

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 11

100
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , e ) ; }
Distance : 3

101
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( false ) ; }
Distance : 7

102
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , error . handleVerifyException () ) ; }
Distance : 6

103
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException () ; }
Distance : 6

104
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 8

105
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 2

106
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) ; }
Distance : 4

107
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , error . handleVerifyException () ) ; }
Distance : 9

108
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 7

109
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 7

110
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

111
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , true ) ; }
Distance : 10

112
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e , error . handleVerifyException () ) ; }
Distance : 10

113
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , this . error ) ; }
Distance : 7

114
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , handleVerifyException ( e ) ) ; }
Distance : 9

115
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Distance : 4

116
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( super ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( super ) ; }
Distance : 7

117
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 9

118
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , e . handleVerifyException () ) ; }
Distance : 12

119
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 9

120
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 9

121
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 10

122
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 8

123
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error . handleVerifyException ( e , error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error . handleVerifyException ( e , error ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 12

124
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException () ; }
Distance : 6

125
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 7

126
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 10

127
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) . handleVerifyException () ) ; }
Distance : 9

128
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e , e . handleVerifyException () ) ; }
Distance : 10

129
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) ; }
Distance : 4

130
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) . handleVerifyException () ) ; }
Distance : 8

131
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e ) ; }
Distance : 3

132
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) ; }
Distance : 5

133
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , e . handleVerifyException () ) ; }
Distance : 7

134
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( error ) ) ; }
Distance : 8

135
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error + STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 12

136
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 5

137
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( true ) ; }
Distance : 7

138
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , error ) ; }
Distance : 5

139
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Distance : 5

140
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 8

141
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( e ) ) ; }
Distance : 8

142
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

143
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () ; }
Distance : 6

144
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 6

145
Tree	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

146
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 4

147
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( handleVerifyException ( error ) ) ; }
Distance : 10

148
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > e ) { error = handleVerifyException ( error ) ; }
Distance : 5

149
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( handleVerifyException ( e ) , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( handleVerifyException ( e ) , error ) ; }
Distance : 6

150
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( false ) ; }
Distance : 10

151
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 7

152
Tree	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

153
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 11

154
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . handleVerifyException ( CHAR_CONS ) ; }
Distance : 7

155
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , handleVerifyException ( e ) ) ; }
Distance : 7

156
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

157
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e , e ) ; }
Distance : 5

158
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 11

159
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent < org.mockito.exceptions.verification.junit.ArgumentsAreDifferent > error ) { error = handleVerifyException ( e ) ; }
Distance : 5

160
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 8

161
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 10

162
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 5

163
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , false ) ; }
Distance : 4

164
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , super ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , super ) ; }
Distance : 8

165
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 3

166
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) . handleVerifyException () ; }
Distance : 5

167
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e , e . handleVerifyException () ) ; }
Distance : 10

168
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Distance : 10

169
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e . handleVerifyException ( e , e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e . handleVerifyException ( e , e ) . handleVerifyException ( handleVerifyException ( e ) ) ; }
Distance : 13

170
Tree	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

171
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 4

172
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) . handleVerifyException () ) ; }
Distance : 10

173
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Distance : 5

174
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Distance : 3

175
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

176
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

177
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) ; }
Distance : 7

178
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , error . handleVerifyException () ) ; }
Distance : 8

179
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 2

180
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) . handleVerifyException () ) ; }
Distance : 10

181
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 5

182
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , handleVerifyException ( error ) ) ; }
Distance : 9

183
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) ; }
Distance : 6

184
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , this . error ) ; }
Distance : 8

185
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , e ) ; }
Distance : 4

186
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 8

187
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error ) ; }
Distance : 6

188
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException () . handleVerifyException ( STRING_CONSTANT ) ; }
Distance : 10

189
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 4

190
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Distance : 5

191
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + handleVerifyException ( e ) , true ) ; }
Distance : 8

192
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , e . handleVerifyException () ) ; }
Distance : 8

193
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , true ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , true ) ; }
Distance : 3

194
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

195
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , super ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . handleVerifyException () , super ) ; }
Distance : 10

196
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , org.mockito.exceptions.verification.junit.ArgumentsAreDifferent , handleVerifyException ( e ) ) ; }
Distance : 9

197
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Distance : 10

198
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( error ) . handleVerifyException ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) ; }
Distance : 7

199
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT , error . handleVerifyException () ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 96
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 11

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

8
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

9
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Distance : 15

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

11
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , class , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , class , undesired ) )
Distance : 16

13
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

15
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getLocation () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

18
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

19
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

20
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

21
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

22
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . join ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . join ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

24
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

25
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 20

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Distance : 16

27
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

29
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

30
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

31
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

32
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Distance : 16

33
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 9

34
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

35
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

36
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 16

37
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

38
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired , undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , CHAR_CONS , undesired ) )
Distance : 16

39
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 18

40
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Distance : 19

41
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

42
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

43
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

44
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 20

45
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 20

46
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . getLocation () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 20

47
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , extends )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , extends )
Distance : 19

48
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

49
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 19

50
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

51
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

52
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 19

53
Tree	new LocationImpl ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new LocationImpl ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

54
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false ) )
Distance : 19

55
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false )
Distance : 16

56
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , CHAR_CONS )
Distance : 19

57
Tree	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , false )
Code	new VerificationInOrderFailure ( undesired , new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , false , false )
Distance : 19

58
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

59
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 20

60
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 12

61
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , CHAR_CONS )
Distance : 16

62
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () ) . getMock ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () ) . getMock ( undesired . getMock () , this ) )
Distance : 16

63
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

64
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

65
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

66
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

67
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Distance : 16

68
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 12

69
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

70
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

71
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

72
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Distance : 16

73
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

74
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

75
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) ) , super )
Distance : 16

76
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 3

77
Tree	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 15

78
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 19

79
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 20

80
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

81
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

82
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

83
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , super )
Distance : 16

84
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () ) . getMock ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join () ) . getMock ( undesired . getMock () , this ) )
Distance : 17

85
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock ( undesired ) , undesired . getLocation () ) , undesired ) )
Distance : 16

86
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

87
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

88
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () ) . getLocation ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () ) . getLocation ( undesired . getMock () , this ) )
Distance : 16

89
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

90
Tree	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Code	new VerificationInOrderFailure ( new LocationImpl [] { STRING_CONSTANT , undesired . getMock () , undesired . getLocation () } , false )
Distance : 15

91
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

92
Tree	new LocationImpl ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new LocationImpl ( new LocationImpl [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

93
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

94
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () ) . safelyGetMockName ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join () ) . safelyGetMockName ( undesired . getMock () , this ) )
Distance : 16

95
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired , undesired . getMock () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 128
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 15

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 15

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 15

3
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired . getLocation () ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 15

4
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

6
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

8
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 13

10
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

11
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

17
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 20

19
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

20
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

22
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

23
Tree	new LocationImpl () . join ( new Location () , undesired . getLocation () , false )
Code	new LocationImpl () . join ( new Location () , undesired . getLocation () , false )
Distance : 15

24
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , false ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , false ) , false , STRING_CONSTANT )
Distance : 21

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

26
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

28
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

29
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

30
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 19

31
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

32
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

34
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

35
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 21

36
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

37
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 21

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

39
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

40
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , false ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , false ) , false , STRING_CONSTANT )
Distance : 20

44
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 22

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Location . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Location . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

47
Tree	new LocationImpl () . join ( new Es6SyntacticScopeCreator () , undesired . getLocation () , false )
Code	new LocationImpl () . join ( new Es6SyntacticScopeCreator () , undesired . getLocation () , false )
Distance : 15

48
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

50
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , false ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , false ) , false , STRING_CONSTANT )
Distance : 21

51
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 20

52
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 15

53
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

54
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

55
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , false ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , false ) , false , STRING_CONSTANT )
Distance : 20

56
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

57
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

58
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

59
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

60
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

61
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

62
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

63
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

64
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

65
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

66
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

67
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

68
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

69
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

70
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

71
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

72
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

73
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

74
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

75
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

76
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

77
Tree	new LocationImpl () . join ( new Double.POSITIVE_INFINITY () , undesired . getLocation () , false )
Code	new LocationImpl () . join ( new Double.POSITIVE_INFINITY () , undesired . getLocation () , false )
Distance : 15

78
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

79
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 19

80
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

81
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

82
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

83
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( undesired . getLocation () , undesired . getLocation () , options.assumeClosuresOnlyCaptureReferences ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

84
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

85
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

86
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

87
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

88
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

89
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

90
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

91
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

92
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

93
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

94
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

95
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

96
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

97
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

98
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

99
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

100
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

101
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

102
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

103
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 21

104
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

105
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

106
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

107
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , CHAR_CONS , super , STRING_CONSTANT )
Distance : 22

108
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

109
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 22

110
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( join ( undesired . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 21

111
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

112
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

113
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

114
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

115
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

116
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

117
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

118
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

119
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

120
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new scenario ( undesired . getLocation () , undesired ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 19

121
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

122
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new undesired ( undesired . getLocation () , undesired ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new LocationImpl () . getLocation ( undesired ) , new undesired ( undesired . getLocation () , undesired ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 19

123
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 14

124
Tree	new LocationImpl () . join ( new DoesNothing () , undesired . getLocation () , false )
Code	new LocationImpl () . join ( new DoesNothing () , undesired . getLocation () , false )
Distance : 15

125
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

126
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

127
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return convertLocalToUTC ( this , iZone ) ;
Code	return convertLocalToUTC ( this , iZone ) ;
Distance : 6

1
Tree	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Code	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Distance : 5

2
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Distance : 4

3
Tree	return ! iZone ;
Code	return ! iZone ;
Distance : 10

4
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

5
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

6
Tree	return ! instant ;
Code	return ! instant ;
Distance : 9

7
Tree	return com.google.protobuf.GeneratedMessageV3 == null ;
Code	return com.google.protobuf.GeneratedMessageV3 == null ;
Distance : 10

8
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

11
Tree	return printTimeZone == null ;
Code	return printTimeZone == null ;
Distance : 10

12
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

13
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

14
Tree	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

16
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

17
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

18
Tree	return this . iZone . convertLocalToUTC ( localInstant ) ;
Code	return this . iZone . convertLocalToUTC ( localInstant ) ;
Distance : 6

19
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Distance : 4

21
Tree	return iZone ( localInstant , localInstant , localInstant ) ;
Code	return iZone ( localInstant , localInstant , localInstant ) ;
Distance : 4

22
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

23
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

24
Tree	return TimeUnit.SECONDS == null ;
Code	return TimeUnit.SECONDS == null ;
Distance : 10

25
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

26
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

27
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Distance : 6

29
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 8

30
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

31
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

33
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 4

35
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 4

37
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

38
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

39
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

41
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Distance : 4

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return ! localInstant ;
Code	return ! localInstant ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

47
Tree	return iZone ( localInstant , localInstant , iZone ) ;
Code	return iZone ( localInstant , localInstant , iZone ) ;
Distance : 4

48
Tree	return ! instant && ! this . iZone . convertLocalToUTC () ;
Code	return ! instant && ! this . iZone . convertLocalToUTC () ;
Distance : 10

49
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

50
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

51
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

53
Tree	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Distance : 8

54
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Distance : 4

55
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

56
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

57
Tree	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Distance : 9

58
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Distance : 8

59
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 8

60
Tree	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Code	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Distance : 5

61
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

62
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

63
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Distance : 3

64
Tree	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

65
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

66
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Distance : 2

68
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Distance : 6

69
Tree	return iZone == null ;
Code	return iZone == null ;
Distance : 9

70
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

71
Tree	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

72
Tree	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

73
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( true ) ;
Code	return iZone . convertLocalToUTC ( true ) ;
Distance : 5

75
Tree	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

76
Tree	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

77
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Distance : 3

78
Tree	return this . iZone . convertLocalToUTC ( instant ) ;
Code	return this . iZone . convertLocalToUTC ( instant ) ;
Distance : 6

79
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

80
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Distance : 6

81
Tree	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Distance : 9

82
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

83
Tree	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

84
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

85
Tree	return this . instant . convertLocalToUTC ( localInstant ) ;
Code	return this . instant . convertLocalToUTC ( localInstant ) ;
Distance : 7

86
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

87
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

88
Tree	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

91
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

92
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Distance : 5

93
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

94
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

97
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Distance : 4

99
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Distance : 4

100
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

101
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 4

102
Tree	return iZone ( localInstant , iZone , localInstant ) ;
Code	return iZone ( localInstant , iZone , localInstant ) ;
Distance : 4

103
Tree	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Distance : 6

104
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

105
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Distance : 3

106
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

107
Tree	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

108
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

109
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

110
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Distance : 6

111
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

112
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

113
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Distance : 5

114
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

115
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

116
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Distance : 6

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

118
Tree	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

120
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

121
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Distance : 6

122
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

123
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Distance : 9

124
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Distance : 6

125
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

126
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

127
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

128
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

129
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 7

130
Tree	return iZone ( localInstant , instant , localInstant ) ;
Code	return iZone ( localInstant , instant , localInstant ) ;
Distance : 4

131
Tree	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Distance : 9

132
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

133
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Distance : 6

134
Tree	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Distance : 7

135
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

136
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 7

137
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

138
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

139
Tree	return iZone . convertLocalToUTC ( false ) ;
Code	return iZone . convertLocalToUTC ( false ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Distance : 7

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Distance : 5

142
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

143
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

144
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Distance : 5

145
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 8

146
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

147
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

148
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

149
Tree	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

150
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

151
Tree	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 9

152
Tree	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Code	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Distance : 5

153
Tree	return convertLocalToUTC ( this , localInstant ) ;
Code	return convertLocalToUTC ( this , localInstant ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Distance : 6

155
Tree	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Code	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Distance : 5

156
Tree	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Code	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Distance : 3

157
Tree	return this . iZone . convertLocalToUTC ( iZone ) ;
Code	return this . iZone . convertLocalToUTC ( iZone ) ;
Distance : 7

158
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

159
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

160
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 8

161
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

162
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

163
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

164
Tree	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Distance : 4

165
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Distance : 4

166
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

167
Tree	return convertLocalToUTC ( this , instant ) ;
Code	return convertLocalToUTC ( this , instant ) ;
Distance : 5

168
Tree	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

169
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

174
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Distance : 4

175
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

176
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

177
Tree	return ! iZone ; Class
Code	return ! iZone ; Class
Distance : 11

178
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

179
Tree	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Distance : 5

180
Tree	return ! iZone && ! this . instant . convertLocalToUTC () ;
Code	return ! iZone && ! this . instant . convertLocalToUTC () ;
Distance : 10

181
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

182
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Distance : 5

183
Tree	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

184
Tree	return localInstant . convertLocalToUTC ( false ) ;
Code	return localInstant . convertLocalToUTC ( false ) ;
Distance : 5

185
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Distance : 6

186
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Distance : 8

187
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Distance : 3

188
Tree	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Code	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Distance : 10

189
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

190
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Distance : 3

191
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

192
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Distance : 9

193
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

194
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

195
Tree	return convertLocalToUTC ( this , localInstant ) ; Class
Code	return convertLocalToUTC ( this , localInstant ) ; Class
Distance : 7

196
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Distance : 4

197
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Distance : 6

198
Tree	return instant . convertLocalToUTC ( false ) ;
Code	return instant . convertLocalToUTC ( false ) ;
Distance : 5

199
Tree	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Distance : 10

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return convertLocalToUTC ( this , iZone ) ;
Code	return convertLocalToUTC ( this , iZone ) ;
Distance : 6

1
Tree	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Code	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Distance : 5

2
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Distance : 4

3
Tree	return ! iZone ;
Code	return ! iZone ;
Distance : 10

4
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

5
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

6
Tree	return ! instant ;
Code	return ! instant ;
Distance : 9

7
Tree	return com.google.protobuf.GeneratedMessageV3 == null ;
Code	return com.google.protobuf.GeneratedMessageV3 == null ;
Distance : 10

8
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

11
Tree	return printTimeZone == null ;
Code	return printTimeZone == null ;
Distance : 10

12
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

13
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

14
Tree	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

16
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

17
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

18
Tree	return this . iZone . convertLocalToUTC ( localInstant ) ;
Code	return this . iZone . convertLocalToUTC ( localInstant ) ;
Distance : 6

19
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Distance : 4

21
Tree	return iZone ( localInstant , localInstant , localInstant ) ;
Code	return iZone ( localInstant , localInstant , localInstant ) ;
Distance : 4

22
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

23
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

24
Tree	return TimeUnit.SECONDS == null ;
Code	return TimeUnit.SECONDS == null ;
Distance : 10

25
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

26
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

27
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Distance : 6

29
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 8

30
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

31
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

33
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 4

35
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 4

37
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

38
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

39
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

41
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Distance : 4

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return ! localInstant ;
Code	return ! localInstant ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

47
Tree	return iZone ( localInstant , localInstant , iZone ) ;
Code	return iZone ( localInstant , localInstant , iZone ) ;
Distance : 4

48
Tree	return ! instant && ! this . iZone . convertLocalToUTC () ;
Code	return ! instant && ! this . iZone . convertLocalToUTC () ;
Distance : 10

49
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

50
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

51
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

53
Tree	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Distance : 8

54
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Distance : 4

55
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

56
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

57
Tree	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Distance : 9

58
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Distance : 8

59
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 8

60
Tree	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Code	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Distance : 5

61
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

62
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

63
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Distance : 3

64
Tree	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

65
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

66
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Distance : 2

68
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Distance : 6

69
Tree	return iZone == null ;
Code	return iZone == null ;
Distance : 9

70
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

71
Tree	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

72
Tree	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

73
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( true ) ;
Code	return iZone . convertLocalToUTC ( true ) ;
Distance : 5

75
Tree	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

76
Tree	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

77
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Distance : 3

78
Tree	return this . iZone . convertLocalToUTC ( instant ) ;
Code	return this . iZone . convertLocalToUTC ( instant ) ;
Distance : 6

79
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

80
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Distance : 6

81
Tree	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Distance : 9

82
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

83
Tree	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

84
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

85
Tree	return this . instant . convertLocalToUTC ( localInstant ) ;
Code	return this . instant . convertLocalToUTC ( localInstant ) ;
Distance : 7

86
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

87
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

88
Tree	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

91
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

92
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Distance : 5

93
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

94
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

97
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Distance : 4

99
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Distance : 4

100
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

101
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 4

102
Tree	return iZone ( localInstant , iZone , localInstant ) ;
Code	return iZone ( localInstant , iZone , localInstant ) ;
Distance : 4

103
Tree	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Distance : 6

104
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

105
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Distance : 3

106
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

107
Tree	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

108
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

109
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

110
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Distance : 6

111
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

112
Tree	return iZone != null return ? ;
Code	return iZone != null return ? ;
Distance : 9

113
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Distance : 5

114
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

115
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

116
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Distance : 6

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

118
Tree	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

120
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

121
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Distance : 6

122
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

123
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Distance : 9

124
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Distance : 6

125
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

126
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

127
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

128
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

129
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 7

130
Tree	return iZone ( localInstant , instant , localInstant ) ;
Code	return iZone ( localInstant , instant , localInstant ) ;
Distance : 4

131
Tree	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Distance : 9

132
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

133
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Distance : 6

134
Tree	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Distance : 7

135
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

136
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 7

137
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

138
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

139
Tree	return iZone . convertLocalToUTC ( false ) ;
Code	return iZone . convertLocalToUTC ( false ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Distance : 7

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Distance : 5

142
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

143
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

144
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Distance : 5

145
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 8

146
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

147
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

148
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

149
Tree	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

150
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

151
Tree	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 9

152
Tree	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Code	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Distance : 5

153
Tree	return convertLocalToUTC ( this , localInstant ) ;
Code	return convertLocalToUTC ( this , localInstant ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Distance : 6

155
Tree	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Code	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Distance : 5

156
Tree	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Code	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Distance : 3

157
Tree	return this . iZone . convertLocalToUTC ( iZone ) ;
Code	return this . iZone . convertLocalToUTC ( iZone ) ;
Distance : 7

158
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

159
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

160
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 8

161
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

162
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

163
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

164
Tree	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Distance : 4

165
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Distance : 4

166
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

167
Tree	return convertLocalToUTC ( this , instant ) ;
Code	return convertLocalToUTC ( this , instant ) ;
Distance : 5

168
Tree	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

169
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

174
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Distance : 4

175
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

176
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

177
Tree	return ! iZone ; Class
Code	return ! iZone ; Class
Distance : 11

178
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

179
Tree	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Distance : 5

180
Tree	return ! iZone && ! this . instant . convertLocalToUTC () ;
Code	return ! iZone && ! this . instant . convertLocalToUTC () ;
Distance : 10

181
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

182
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Distance : 5

183
Tree	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

184
Tree	return localInstant . convertLocalToUTC ( false ) ;
Code	return localInstant . convertLocalToUTC ( false ) ;
Distance : 5

185
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Distance : 6

186
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Distance : 8

187
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Distance : 3

188
Tree	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Code	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Distance : 10

189
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

190
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Distance : 3

191
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

192
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Distance : 9

193
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

194
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

195
Tree	return convertLocalToUTC ( this , localInstant ) ; Class
Code	return convertLocalToUTC ( this , localInstant ) ; Class
Distance : 7

196
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Distance : 4

197
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Distance : 6

198
Tree	return instant . convertLocalToUTC ( false ) ;
Code	return instant . convertLocalToUTC ( false ) ;
Distance : 5

199
Tree	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Distance : 10

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return convertLocalToUTC ( this , iZone ) ;
Code	return convertLocalToUTC ( this , iZone ) ;
Distance : 6

1
Tree	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Code	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Distance : 5

2
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Distance : 4

3
Tree	return ! iZone ;
Code	return ! iZone ;
Distance : 10

4
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

5
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

6
Tree	return ! instant ;
Code	return ! instant ;
Distance : 9

7
Tree	return com.google.protobuf.GeneratedMessageV3 == null ;
Code	return com.google.protobuf.GeneratedMessageV3 == null ;
Distance : 10

8
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

11
Tree	return printTimeZone == null ;
Code	return printTimeZone == null ;
Distance : 10

12
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

13
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

14
Tree	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

16
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

17
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

18
Tree	return this . iZone . convertLocalToUTC ( localInstant ) ;
Code	return this . iZone . convertLocalToUTC ( localInstant ) ;
Distance : 6

19
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Distance : 4

21
Tree	return iZone ( localInstant , localInstant , localInstant ) ;
Code	return iZone ( localInstant , localInstant , localInstant ) ;
Distance : 4

22
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

23
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

24
Tree	return TimeUnit.SECONDS == null ;
Code	return TimeUnit.SECONDS == null ;
Distance : 10

25
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

26
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

27
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Distance : 6

29
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 8

30
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

31
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

33
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 4

35
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 4

37
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

38
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

39
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

41
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Distance : 4

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return ! localInstant ;
Code	return ! localInstant ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

47
Tree	return iZone ( localInstant , localInstant , iZone ) ;
Code	return iZone ( localInstant , localInstant , iZone ) ;
Distance : 4

48
Tree	return ! instant && ! this . iZone . convertLocalToUTC () ;
Code	return ! instant && ! this . iZone . convertLocalToUTC () ;
Distance : 10

49
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

50
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

51
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

53
Tree	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Distance : 8

54
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Distance : 4

55
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

56
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

57
Tree	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Distance : 9

58
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Distance : 8

59
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 8

60
Tree	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Code	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Distance : 5

61
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

62
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

63
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Distance : 3

64
Tree	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

65
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

66
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Distance : 2

68
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Distance : 6

69
Tree	return iZone == null ;
Code	return iZone == null ;
Distance : 9

70
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

71
Tree	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

72
Tree	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

73
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( true ) ;
Code	return iZone . convertLocalToUTC ( true ) ;
Distance : 5

75
Tree	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

76
Tree	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

77
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Distance : 3

78
Tree	return this . iZone . convertLocalToUTC ( instant ) ;
Code	return this . iZone . convertLocalToUTC ( instant ) ;
Distance : 6

79
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

80
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Distance : 6

81
Tree	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Distance : 9

82
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

83
Tree	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

84
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

85
Tree	return this . instant . convertLocalToUTC ( localInstant ) ;
Code	return this . instant . convertLocalToUTC ( localInstant ) ;
Distance : 7

86
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

87
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

88
Tree	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

91
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

92
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Distance : 5

93
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

94
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

97
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Distance : 4

99
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Distance : 4

100
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

101
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 4

102
Tree	return iZone ( localInstant , iZone , localInstant ) ;
Code	return iZone ( localInstant , iZone , localInstant ) ;
Distance : 4

103
Tree	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Distance : 6

104
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

105
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Distance : 3

106
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

107
Tree	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

108
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

109
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

110
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Distance : 6

111
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

112
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

113
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Distance : 5

114
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

115
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

116
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Distance : 6

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

118
Tree	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

120
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

121
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Distance : 6

122
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

123
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Distance : 9

124
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Distance : 6

125
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

126
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

127
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

128
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

129
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 7

130
Tree	return iZone ( localInstant , instant , localInstant ) ;
Code	return iZone ( localInstant , instant , localInstant ) ;
Distance : 4

131
Tree	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Distance : 9

132
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

133
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Distance : 6

134
Tree	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Distance : 7

135
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

136
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 7

137
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

138
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

139
Tree	return iZone . convertLocalToUTC ( false ) ;
Code	return iZone . convertLocalToUTC ( false ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Distance : 7

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Distance : 5

142
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

143
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

144
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Distance : 5

145
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 8

146
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

147
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

148
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

149
Tree	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

150
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

151
Tree	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 9

152
Tree	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Code	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Distance : 5

153
Tree	return convertLocalToUTC ( this , localInstant ) ;
Code	return convertLocalToUTC ( this , localInstant ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Distance : 6

155
Tree	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Code	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Distance : 5

156
Tree	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Code	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Distance : 3

157
Tree	return this . iZone . convertLocalToUTC ( iZone ) ;
Code	return this . iZone . convertLocalToUTC ( iZone ) ;
Distance : 7

158
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

159
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

160
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 8

161
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

162
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

163
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

164
Tree	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Distance : 4

165
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Distance : 4

166
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

167
Tree	return convertLocalToUTC ( this , instant ) ;
Code	return convertLocalToUTC ( this , instant ) ;
Distance : 5

168
Tree	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

169
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

174
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Distance : 4

175
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

176
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

177
Tree	return ! iZone ; Class
Code	return ! iZone ; Class
Distance : 11

178
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

179
Tree	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Distance : 5

180
Tree	return ! iZone && ! this . instant . convertLocalToUTC () ;
Code	return ! iZone && ! this . instant . convertLocalToUTC () ;
Distance : 10

181
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

182
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Distance : 5

183
Tree	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

184
Tree	return localInstant . convertLocalToUTC ( false ) ;
Code	return localInstant . convertLocalToUTC ( false ) ;
Distance : 5

185
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Distance : 6

186
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Distance : 8

187
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Distance : 3

188
Tree	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Code	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Distance : 10

189
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

190
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Distance : 3

191
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

192
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Distance : 9

193
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

194
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

195
Tree	return convertLocalToUTC ( this , localInstant ) ; Class
Code	return convertLocalToUTC ( this , localInstant ) ; Class
Distance : 7

196
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Distance : 4

197
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Distance : 6

198
Tree	return instant . convertLocalToUTC ( false ) ;
Code	return instant . convertLocalToUTC ( false ) ;
Distance : 5

199
Tree	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Distance : 10

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	result result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	result result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

1
Tree	long result = iZone . convertLocalToUTC ( iZone , null ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , null ) ;
Distance : 4

2
Tree	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

3
Tree	boolean result = iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

4
Tree	long result = instant . convertLocalToUTC ( false ) ;
Code	long result = instant . convertLocalToUTC ( false ) ;
Distance : 5

5
Tree	long result = iZone . convertLocalToUTC ( iZone , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

6
Tree	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

7
Tree	long result = iZone . localInstant ( iZone ) ;
Code	long result = iZone . localInstant ( iZone ) ;
Distance : 6

8
Tree	boolean result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

9
Tree	long result = convertLocalToUTC ( localInstant , localInstant , instant ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , instant ) ;
Distance : 3

10
Tree	boolean result = convertLocalToUTC ( NUMBER_CONSTANT , localInstant , NUMBER_CONSTANT ) ;
Code	boolean result = convertLocalToUTC ( NUMBER_CONSTANT , localInstant , NUMBER_CONSTANT ) ;
Distance : 6

11
Tree	final long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	final long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

12
Tree	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Code	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Distance : 11

13
Tree	long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 3

14
Tree	long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Distance : 3

15
Tree	long result = iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

16
Tree	boolean result = iZone . convertLocalToUTC ( CHAR_CONS ) ;
Code	boolean result = iZone . convertLocalToUTC ( CHAR_CONS ) ;
Distance : 6

17
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , result ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , result ) ;
Distance : 3

18
Tree	long result = iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

19
Tree	long result = instant . convertLocalToUTC ( localInstant ) ;
Code	long result = instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

20
Tree	long result = iZone ;
Code	long result = iZone ;
Distance : 9

21
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 5

22
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

23
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Distance : 5

24
Tree	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

25
Tree	long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Distance : 3

26
Tree	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Code	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Distance : 11

27
Tree	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Code	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Distance : 11

28
Tree	long result = iZone . iZone ( localInstant ) ;
Code	long result = iZone . iZone ( localInstant ) ;
Distance : 5

29
Tree	result result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	result result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

30
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , this . result . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , this . result . convertLocalToUTC () ) ;
Distance : 9

31
Tree	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Distance : 3

32
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

33
Tree	long result = iZone ( localInstant ) ;
Code	long result = iZone ( localInstant ) ;
Distance : 6

34
Tree	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Code	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 6

35
Tree	final long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Code	final long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , STRING_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , STRING_CONSTANT ) ;
Distance : 4

37
Tree	long result = convertLocalToUTC ( localInstant , convertLocalToUTC () , null ) ;
Code	long result = convertLocalToUTC ( localInstant , convertLocalToUTC () , null ) ;
Distance : 5

38
Tree	boolean result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

39
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , iZone . convertLocalToUTC () ) ;
Distance : 6

40
Tree	final long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Distance : 4

41
Tree	long result = iZone . convertLocalToUTC ( localInstant , result ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , result ) ;
Distance : 3

42
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

43
Tree	long result = iZone . convertLocalToUTC ( true , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( true , localInstant ) ;
Distance : 4

44
Tree	long result = convertLocalToUTC ( localInstant , localInstant , result ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , result ) ;
Distance : 4

45
Tree	long result = iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

46
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , iZone ) ;
Distance : 3

47
Tree	long result = convertLocalToUTC ( localInstant , TimeUnit.SECONDS , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , TimeUnit.SECONDS , TimeUnit.SECONDS ) ;
Distance : 4

48
Tree	long result = iZone . localInstant ( localInstant ) ;
Code	long result = iZone . localInstant ( localInstant ) ;
Distance : 5

49
Tree	long result = iZone . convertLocalToUTC ( iZone ) ;
Code	long result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

50
Tree	long result = convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

51
Tree	long result = iZone . convertLocalToUTC ( iZone . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( iZone . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

52
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

53
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , iZone . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , iZone . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 7

54
Tree	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

55
Tree	long result = convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

56
Tree	long result = convertLocalToUTC ( localInstant , AllowedSolutions.ANY_SIDE , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , AllowedSolutions.ANY_SIDE , TimeUnit.SECONDS ) ;
Distance : 4

57
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC () ) ;
Distance : 7

58
Tree	long result = convertLocalToUTC ( localInstant , Calendar.SECOND , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , Calendar.SECOND , TimeUnit.SECONDS ) ;
Distance : 4

59
Tree	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , null ) ;
Distance : 8

60
Tree	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

61
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant , result ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant , result ) ;
Distance : 4

62
Tree	long result = createCompilerOptions . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , localInstant , result ) ;
Code	long result = createCompilerOptions . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , localInstant , result ) ;
Distance : 5

63
Tree	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	final long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 11

64
Tree	final long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Distance : 4

65
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , STRING_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , STRING_CONSTANT ) ;
Distance : 4

66
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

67
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , instant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , instant ) ;
Distance : 2

68
Tree	boolean result = iZone . convertLocalToUTC ( false ) ;
Code	boolean result = iZone . convertLocalToUTC ( false ) ;
Distance : 5

69
Tree	long result = iZone ( iZone ) ;
Code	long result = iZone ( iZone ) ;
Distance : 7

70
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 5

71
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC () , coefficients.length ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC () , coefficients.length ) ;
Distance : 7

72
Tree	long result = iZone . convertLocalToUTC ( LanguageMode.ECMASCRIPT6_TYPED , null , null ) ;
Code	long result = iZone . convertLocalToUTC ( LanguageMode.ECMASCRIPT6_TYPED , null , null ) ;
Distance : 3

73
Tree	long result = iZone . convertLocalToUTC ( this , instant ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

74
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Distance : 9

75
Tree	long result = iZone . convertLocalToUTC ( FeatureSet.TYPESCRIPT , null , null ) ;
Code	long result = iZone . convertLocalToUTC ( FeatureSet.TYPESCRIPT , null , null ) ;
Distance : 3

76
Tree	long result = iZone . convertLocalToUTC ( true ) ;
Code	long result = iZone . convertLocalToUTC ( true ) ;
Distance : 5

77
Tree	long result = alternatesList . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , instant , result ) ;
Code	long result = alternatesList . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , instant , result ) ;
Distance : 5

78
Tree	long result = convertLocalToUTC ( NUMBER_CONSTANT , result , NUMBER_CONSTANT ) ;
Code	long result = convertLocalToUTC ( NUMBER_CONSTANT , result , NUMBER_CONSTANT ) ;
Distance : 5

79
Tree	long result = iZone . convertLocalToUTC ( numberOfPoints , null , null ) ;
Code	long result = iZone . convertLocalToUTC ( numberOfPoints , null , null ) ;
Distance : 3

80
Tree	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , result ) ;
Code	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , result ) ;
Distance : 4

81
Tree	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Distance : 8

82
Tree	long result = iZone . convertLocalToUTC ( getArrayStart , Es6ToEs3Util.CANNOT_CONVERT_YET , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( getArrayStart , Es6ToEs3Util.CANNOT_CONVERT_YET , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 3

83
Tree	boolean result = iZone . convertLocalToUTC ( localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 5

84
Tree	boolean result = iZone ( localInstant ) ;
Code	boolean result = iZone ( localInstant ) ;
Distance : 7

85
Tree	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

86
Tree	final double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

87
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , localInstant ) ;
Distance : 3

88
Tree	public long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	public long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

89
Tree	final long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

90
Tree	final long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 4

91
Tree	long result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 4

92
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Distance : 5

93
Tree	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

94
Tree	long result = iZone . convertLocalToUTC ( copyList , Es6ToEs3Util.CANNOT_CONVERT_YET , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( copyList , Es6ToEs3Util.CANNOT_CONVERT_YET , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 3

95
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Distance : 10

96
Tree	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , iZone ) ;
Distance : 7

97
Tree	long result = alternatesList . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , localInstant , result ) ;
Code	long result = alternatesList . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , localInstant , result ) ;
Distance : 5

98
Tree	boolean result = iZone . localInstant ( localInstant ) ;
Code	boolean result = iZone . localInstant ( localInstant ) ;
Distance : 6

99
Tree	long result = instant ( localInstant ) ;
Code	long result = instant ( localInstant ) ;
Distance : 7

100
Tree	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , result , iZone , iZone ) ;
Distance : 8

101
Tree	long result = iZone . localInstant ( localInstant , new OngoingStubbingImpl ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new OngoingStubbingImpl ( localInstant ) ) ;
Distance : 6

102
Tree	final long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 4

103
Tree	public long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	public long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

104
Tree	long result = instant . convertLocalToUTC ( CHAR_CONS ) ;
Code	long result = instant . convertLocalToUTC ( CHAR_CONS ) ;
Distance : 6

105
Tree	long result = instant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = instant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

106
Tree	long result = iZone . convertLocalToUTC ( false , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( false , localInstant ) ;
Distance : 3

107
Tree	long result = instant . convertLocalToUTC ( localInstant , null ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , null ) ;
Distance : 4

108
Tree	boolean result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

109
Tree	long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 3

110
Tree	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

111
Tree	final long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	final long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 4

112
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

113
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 9

114
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Distance : 5

115
Tree	long result = iZone . convertLocalToUTC ( localInstant , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

116
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

117
Tree	double result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	double result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

118
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 3

119
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC ( localInstant ) , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC ( localInstant ) , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 9

120
Tree	long result = instant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

121
Tree	long result = convertLocalToUTC ( localInstant , iZone , false ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

122
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , convertLocalToUTC () ) ;
Distance : 4

123
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Distance : 5

124
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , convertLocalToUTC () ) ;
Distance : 5

125
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , iZone , result ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , iZone , result ) ;
Distance : 4

126
Tree	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

127
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC () ) ;
Distance : 7

128
Tree	boolean result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	boolean result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

129
Tree	long result = convertLocalToUTC ( localInstant , result , false ) ;
Code	long result = convertLocalToUTC ( localInstant , result , false ) ;
Distance : 4

130
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 7

131
Tree	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 5

132
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC () ) ;
Distance : 7

133
Tree	long result = convertLocalToUTC ( NUMBER_CONSTANT , localInstant , NUMBER_CONSTANT ) ;
Code	long result = convertLocalToUTC ( NUMBER_CONSTANT , localInstant , NUMBER_CONSTANT ) ;
Distance : 5

134
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 9

135
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , STRING_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , STRING_CONSTANT ) ;
Distance : 4

136
Tree	long result = iZone . convertLocalToUTC ( false , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( false , iZone ) ;
Distance : 3

137
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , result , result ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , result , result ) ;
Distance : 4

138
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , coefficients.length ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , coefficients.length ) ;
Distance : 9

139
Tree	long result = iZone . convertLocalToUTC ( copyList , p2.vector , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( copyList , p2.vector , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 3

140
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , null ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , null ) ;
Distance : 4

141
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Distance : 10

142
Tree	long result = iZone . convertLocalToUTC ( false ) ;
Code	long result = iZone . convertLocalToUTC ( false ) ;
Distance : 4

143
Tree	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , instant , iZone , null ) ;
Distance : 7

144
Tree	long result = convertLocalToUTC ( iZone , localInstant , false ) ;
Code	long result = convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

145
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 8

146
Tree	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Distance : 8

147
Tree	boolean result = iZone . convertLocalToUTC ( this . localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( this . localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 7

148
Tree	long result = iZone . convertLocalToUTC ( this . iZone . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this . iZone . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 7

149
Tree	long result = instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

150
Tree	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

151
Tree	long result = convertLocalToUTC ( iZone , convertLocalToUTC () , null ) ;
Code	long result = convertLocalToUTC ( iZone , convertLocalToUTC () , null ) ;
Distance : 6

152
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , this . result . convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Distance : 9

153
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

154
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , instant , result ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , instant , result ) ;
Distance : 4

155
Tree	final long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	final long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

156
Tree	long result = iZone . localInstant ( localInstant , new HashSet ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new HashSet ( localInstant ) ) ;
Distance : 6

157
Tree	boolean result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

158
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 9

159
Tree	boolean result = convertLocalToUTC ( localInstant , convertLocalToUTC () , null ) ;
Code	boolean result = convertLocalToUTC ( localInstant , convertLocalToUTC () , null ) ;
Distance : 6

160
Tree	long result = instant . convertLocalToUTC ( localInstant , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

161
Tree	long result = convertLocalToUTC ( localInstant , CheckLevel.ERROR , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , CheckLevel.ERROR , TimeUnit.SECONDS ) ;
Distance : 4

162
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 10

163
Tree	double result = iZone ;
Code	double result = iZone ;
Distance : 10

164
Tree	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

165
Tree	result result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	result result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

166
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 9

167
Tree	boolean result = iZone ;
Code	boolean result = iZone ;
Distance : 10

168
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , STRING_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , STRING_CONSTANT ) ;
Distance : 3

169
Tree	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Code	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Distance : 6

170
Tree	result result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	result result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

171
Tree	long result = iZone . convertLocalToUTC ( localInstant , null ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , null ) ;
Distance : 3

172
Tree	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Code	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Distance : 6

173
Tree	long result = iZone . convertLocalToUTC ( byteValue , Es6ToEs3Util.CANNOT_CONVERT_YET , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( byteValue , Es6ToEs3Util.CANNOT_CONVERT_YET , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 3

174
Tree	long result = instant ;
Code	long result = instant ;
Distance : 9

175
Tree	final double result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	final double result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

176
Tree	boolean result = iZone . convertLocalToUTC ( false , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( false , localInstant ) ;
Distance : 4

177
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Distance : 10

178
Tree	double result = iZone . convertLocalToUTC ( CHAR_CONS ) ;
Code	double result = iZone . convertLocalToUTC ( CHAR_CONS ) ;
Distance : 6

179
Tree	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

180
Tree	long result = iZone . convertLocalToUTC ( CHAR_CONS ) ;
Code	long result = iZone . convertLocalToUTC ( CHAR_CONS ) ;
Distance : 5

181
Tree	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 3

182
Tree	long result = alternatesList . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , iZone , result ) ;
Code	long result = alternatesList . convertLocalToUTC ( NUMBER_CONSTANT , localInstant , iZone , result ) ;
Distance : 5

183
Tree	long result = iZone . convertLocalToUTC ( Exec.INSTANCE , null , null ) ;
Code	long result = iZone . convertLocalToUTC ( Exec.INSTANCE , null , null ) ;
Distance : 3

184
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , this . result . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , this . result . convertLocalToUTC () ) ;
Distance : 9

185
Tree	long result = convertLocalToUTC ( NUMBER_CONSTANT , iZone , NUMBER_CONSTANT ) ;
Code	long result = convertLocalToUTC ( NUMBER_CONSTANT , iZone , NUMBER_CONSTANT ) ;
Distance : 5

186
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , instant . convertLocalToUTC ( localInstant ) , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , instant . convertLocalToUTC ( localInstant ) , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 9

187
Tree	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	final long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 6

188
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , this . result . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , this . result . convertLocalToUTC () ) ;
Distance : 9

189
Tree	long result = iZone . localInstant ( localInstant , new false ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new false ( localInstant ) ) ;
Distance : 5

190
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , this . result . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , this . result . convertLocalToUTC () ) ;
Distance : 8

191
Tree	long result = iZone . localInstant ( localInstant , new HandyReturnValues ( localInstant ) ) ;
Code	long result = iZone . localInstant ( localInstant , new HandyReturnValues ( localInstant ) ) ;
Distance : 6

192
Tree	long result = instant . convertLocalToUTC ( convertLocalToUTC ) ;
Code	long result = instant . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

193
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC ( localInstant ) , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC ( localInstant ) , TimeUnit.SECONDS ) ;
Distance : 9

194
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , instant . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , instant . convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 7

195
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC ( localInstant ) , com.google.protobuf.GeneratedMessageV3 ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , localInstant . convertLocalToUTC ( localInstant ) , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 9

196
Tree	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

197
Tree	long result = iZone . convertLocalToUTC ( this . instant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this . instant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 7

198
Tree	double result = convertLocalToUTC ( localInstant , convertLocalToUTC () , null ) ;
Code	double result = convertLocalToUTC ( localInstant , convertLocalToUTC () , null ) ;
Distance : 6

199
Tree	long result = iZone . convertLocalToUTC ( this . localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this . localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return convertLocalToUTC ( this , iZone ) ;
Code	return convertLocalToUTC ( this , iZone ) ;
Distance : 6

1
Tree	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Code	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Distance : 5

2
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Distance : 4

3
Tree	return ! iZone ;
Code	return ! iZone ;
Distance : 10

4
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

5
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

6
Tree	return ! instant ;
Code	return ! instant ;
Distance : 9

7
Tree	return com.google.protobuf.GeneratedMessageV3 == null ;
Code	return com.google.protobuf.GeneratedMessageV3 == null ;
Distance : 10

8
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

11
Tree	return printTimeZone == null ;
Code	return printTimeZone == null ;
Distance : 10

12
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

13
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

14
Tree	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

16
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

17
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

18
Tree	return this . iZone . convertLocalToUTC ( localInstant ) ;
Code	return this . iZone . convertLocalToUTC ( localInstant ) ;
Distance : 6

19
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Distance : 4

21
Tree	return iZone ( localInstant , localInstant , localInstant ) ;
Code	return iZone ( localInstant , localInstant , localInstant ) ;
Distance : 4

22
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

23
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

24
Tree	return TimeUnit.SECONDS == null ;
Code	return TimeUnit.SECONDS == null ;
Distance : 10

25
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

26
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

27
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Distance : 6

29
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 8

30
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

31
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

33
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 4

35
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 4

37
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

38
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

39
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

41
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Distance : 4

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return ! localInstant ;
Code	return ! localInstant ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

47
Tree	return iZone ( localInstant , localInstant , iZone ) ;
Code	return iZone ( localInstant , localInstant , iZone ) ;
Distance : 4

48
Tree	return ! instant && ! this . iZone . convertLocalToUTC () ;
Code	return ! instant && ! this . iZone . convertLocalToUTC () ;
Distance : 10

49
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

50
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

51
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

53
Tree	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Distance : 8

54
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Distance : 4

55
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

56
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

57
Tree	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Distance : 9

58
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Distance : 8

59
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 8

60
Tree	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Code	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Distance : 5

61
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

62
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

63
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Distance : 3

64
Tree	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

65
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

66
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Distance : 2

68
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Distance : 6

69
Tree	return iZone == null ;
Code	return iZone == null ;
Distance : 9

70
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

71
Tree	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

72
Tree	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

73
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( true ) ;
Code	return iZone . convertLocalToUTC ( true ) ;
Distance : 5

75
Tree	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

76
Tree	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

77
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Distance : 3

78
Tree	return this . iZone . convertLocalToUTC ( instant ) ;
Code	return this . iZone . convertLocalToUTC ( instant ) ;
Distance : 6

79
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

80
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Distance : 6

81
Tree	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Distance : 9

82
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

83
Tree	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

84
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

85
Tree	return this . instant . convertLocalToUTC ( localInstant ) ;
Code	return this . instant . convertLocalToUTC ( localInstant ) ;
Distance : 7

86
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

87
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

88
Tree	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

91
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

92
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Distance : 5

93
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

94
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

97
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Distance : 4

99
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Distance : 4

100
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

101
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 4

102
Tree	return iZone ( localInstant , iZone , localInstant ) ;
Code	return iZone ( localInstant , iZone , localInstant ) ;
Distance : 4

103
Tree	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Distance : 6

104
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

105
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Distance : 3

106
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

107
Tree	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

108
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

109
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

110
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Distance : 6

111
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

112
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

113
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Distance : 5

114
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

115
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

116
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Distance : 6

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

118
Tree	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

120
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

121
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Distance : 6

122
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

123
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Distance : 9

124
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Distance : 6

125
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

126
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

127
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

128
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

129
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 7

130
Tree	return iZone ( localInstant , instant , localInstant ) ;
Code	return iZone ( localInstant , instant , localInstant ) ;
Distance : 4

131
Tree	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Distance : 9

132
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

133
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Distance : 6

134
Tree	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Distance : 7

135
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

136
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 7

137
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

138
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

139
Tree	return iZone . convertLocalToUTC ( false ) ;
Code	return iZone . convertLocalToUTC ( false ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Distance : 7

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Distance : 5

142
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

143
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

144
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Distance : 5

145
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 8

146
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

147
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

148
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

149
Tree	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

150
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

151
Tree	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 9

152
Tree	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Code	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Distance : 5

153
Tree	return convertLocalToUTC ( this , localInstant ) ;
Code	return convertLocalToUTC ( this , localInstant ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Distance : 6

155
Tree	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Code	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Distance : 5

156
Tree	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Code	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Distance : 3

157
Tree	return this . iZone . convertLocalToUTC ( iZone ) ;
Code	return this . iZone . convertLocalToUTC ( iZone ) ;
Distance : 7

158
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

159
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

160
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 8

161
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

162
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

163
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

164
Tree	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Distance : 4

165
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Distance : 4

166
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

167
Tree	return convertLocalToUTC ( this , instant ) ;
Code	return convertLocalToUTC ( this , instant ) ;
Distance : 5

168
Tree	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

169
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

174
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Distance : 4

175
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

176
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

177
Tree	return ! iZone ; Class
Code	return ! iZone ; Class
Distance : 11

178
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

179
Tree	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Distance : 5

180
Tree	return ! iZone && ! this . instant . convertLocalToUTC () ;
Code	return ! iZone && ! this . instant . convertLocalToUTC () ;
Distance : 10

181
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

182
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Distance : 5

183
Tree	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

184
Tree	return localInstant . convertLocalToUTC ( false ) ;
Code	return localInstant . convertLocalToUTC ( false ) ;
Distance : 5

185
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Distance : 6

186
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Distance : 8

187
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Distance : 3

188
Tree	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Code	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Distance : 10

189
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

190
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Distance : 3

191
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

192
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Distance : 9

193
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

194
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

195
Tree	return convertLocalToUTC ( this , localInstant ) ; Class
Code	return convertLocalToUTC ( this , localInstant ) ; Class
Distance : 7

196
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Distance : 4

197
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Distance : 6

198
Tree	return instant . convertLocalToUTC ( false ) ;
Code	return instant . convertLocalToUTC ( false ) ;
Distance : 5

199
Tree	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Distance : 10

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return convertLocalToUTC ( this , iZone ) ;
Code	return convertLocalToUTC ( this , iZone ) ;
Distance : 6

1
Tree	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Code	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Distance : 5

2
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Distance : 4

3
Tree	return ! iZone ;
Code	return ! iZone ;
Distance : 10

4
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

5
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

6
Tree	return ! instant ;
Code	return ! instant ;
Distance : 9

7
Tree	return com.google.protobuf.GeneratedMessageV3 == null ;
Code	return com.google.protobuf.GeneratedMessageV3 == null ;
Distance : 10

8
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

11
Tree	return printTimeZone == null ;
Code	return printTimeZone == null ;
Distance : 10

12
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

13
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

14
Tree	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

16
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

17
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

18
Tree	return this . iZone . convertLocalToUTC ( localInstant ) ;
Code	return this . iZone . convertLocalToUTC ( localInstant ) ;
Distance : 6

19
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Distance : 4

21
Tree	return iZone ( localInstant , localInstant , localInstant ) ;
Code	return iZone ( localInstant , localInstant , localInstant ) ;
Distance : 4

22
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

23
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

24
Tree	return TimeUnit.SECONDS == null ;
Code	return TimeUnit.SECONDS == null ;
Distance : 10

25
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

26
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

27
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Distance : 6

29
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 8

30
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

31
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

33
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 4

35
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 4

37
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

38
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

39
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

41
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Distance : 4

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return ! localInstant ;
Code	return ! localInstant ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

47
Tree	return iZone ( localInstant , localInstant , iZone ) ;
Code	return iZone ( localInstant , localInstant , iZone ) ;
Distance : 4

48
Tree	return ! instant && ! this . iZone . convertLocalToUTC () ;
Code	return ! instant && ! this . iZone . convertLocalToUTC () ;
Distance : 10

49
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

50
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

51
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

53
Tree	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Distance : 8

54
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Distance : 4

55
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

56
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

57
Tree	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Distance : 9

58
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Distance : 8

59
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 8

60
Tree	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Code	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Distance : 5

61
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

62
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

63
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Distance : 3

64
Tree	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

65
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

66
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Distance : 2

68
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Distance : 6

69
Tree	return iZone == null ;
Code	return iZone == null ;
Distance : 9

70
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

71
Tree	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

72
Tree	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

73
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( true ) ;
Code	return iZone . convertLocalToUTC ( true ) ;
Distance : 5

75
Tree	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

76
Tree	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

77
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Distance : 3

78
Tree	return this . iZone . convertLocalToUTC ( instant ) ;
Code	return this . iZone . convertLocalToUTC ( instant ) ;
Distance : 6

79
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

80
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Distance : 6

81
Tree	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Distance : 9

82
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

83
Tree	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

84
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

85
Tree	return this . instant . convertLocalToUTC ( localInstant ) ;
Code	return this . instant . convertLocalToUTC ( localInstant ) ;
Distance : 7

86
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

87
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

88
Tree	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

91
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

92
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Distance : 5

93
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

94
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

97
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Distance : 4

99
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Distance : 4

100
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

101
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 4

102
Tree	return iZone ( localInstant , iZone , localInstant ) ;
Code	return iZone ( localInstant , iZone , localInstant ) ;
Distance : 4

103
Tree	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Distance : 6

104
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

105
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Distance : 3

106
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

107
Tree	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

108
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

109
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

110
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Distance : 6

111
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

112
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

113
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Distance : 5

114
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

115
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

116
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Distance : 6

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

118
Tree	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

120
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

121
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Distance : 6

122
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

123
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Distance : 9

124
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Distance : 6

125
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

126
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

127
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

128
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

129
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 7

130
Tree	return iZone ( localInstant , instant , localInstant ) ;
Code	return iZone ( localInstant , instant , localInstant ) ;
Distance : 4

131
Tree	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Distance : 9

132
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

133
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Distance : 6

134
Tree	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Distance : 7

135
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

136
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 7

137
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

138
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

139
Tree	return iZone . convertLocalToUTC ( false ) ;
Code	return iZone . convertLocalToUTC ( false ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Distance : 7

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Distance : 5

142
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

143
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

144
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Distance : 5

145
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 8

146
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

147
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

148
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

149
Tree	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

150
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

151
Tree	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 9

152
Tree	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Code	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Distance : 5

153
Tree	return convertLocalToUTC ( this , localInstant ) ;
Code	return convertLocalToUTC ( this , localInstant ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Distance : 6

155
Tree	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Code	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Distance : 5

156
Tree	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Code	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Distance : 3

157
Tree	return this . iZone . convertLocalToUTC ( iZone ) ;
Code	return this . iZone . convertLocalToUTC ( iZone ) ;
Distance : 7

158
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

159
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

160
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 8

161
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

162
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

163
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

164
Tree	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Distance : 4

165
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Distance : 4

166
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

167
Tree	return convertLocalToUTC ( this , instant ) ;
Code	return convertLocalToUTC ( this , instant ) ;
Distance : 5

168
Tree	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

169
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

174
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Distance : 4

175
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

176
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

177
Tree	return ! iZone ; Class
Code	return ! iZone ; Class
Distance : 11

178
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

179
Tree	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Distance : 5

180
Tree	return ! iZone && ! this . instant . convertLocalToUTC () ;
Code	return ! iZone && ! this . instant . convertLocalToUTC () ;
Distance : 10

181
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

182
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Distance : 5

183
Tree	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

184
Tree	return localInstant . convertLocalToUTC ( false ) ;
Code	return localInstant . convertLocalToUTC ( false ) ;
Distance : 5

185
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Distance : 6

186
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Distance : 8

187
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Distance : 3

188
Tree	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Code	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Distance : 10

189
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

190
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Distance : 3

191
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

192
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Distance : 9

193
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

194
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

195
Tree	return convertLocalToUTC ( this , localInstant ) ; Class
Code	return convertLocalToUTC ( this , localInstant ) ; Class
Distance : 7

196
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Distance : 4

197
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Distance : 6

198
Tree	return instant . convertLocalToUTC ( false ) ;
Code	return instant . convertLocalToUTC ( false ) ;
Distance : 5

199
Tree	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Distance : 10

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return convertLocalToUTC ( this , iZone ) ;
Code	return convertLocalToUTC ( this , iZone ) ;
Distance : 6

1
Tree	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Code	return iZone . convertLocalToUTC ( localInstant ) > DateUtils.MILLIS_PER_DAY ;
Distance : 5

2
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , return; ) ;
Distance : 4

3
Tree	return ! iZone ;
Code	return ! iZone ;
Distance : 10

4
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 6

5
Tree	return NUMBER_CONSTANT / localInstant ;
Code	return NUMBER_CONSTANT / localInstant ;
Distance : 9

6
Tree	return ! instant ;
Code	return ! instant ;
Distance : 9

7
Tree	return com.google.protobuf.GeneratedMessageV3 == null ;
Code	return com.google.protobuf.GeneratedMessageV3 == null ;
Distance : 10

8
Tree	return iZone != instant ;
Code	return iZone != instant ;
Distance : 8

9
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

11
Tree	return printTimeZone == null ;
Code	return printTimeZone == null ;
Distance : 10

12
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

13
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

14
Tree	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

15
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

16
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

17
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

18
Tree	return this . iZone . convertLocalToUTC ( localInstant ) ;
Code	return this . iZone . convertLocalToUTC ( localInstant ) ;
Distance : 6

19
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , CheckLevel.WARNING ) ;
Distance : 4

21
Tree	return iZone ( localInstant , localInstant , localInstant ) ;
Code	return iZone ( localInstant , localInstant , localInstant ) ;
Distance : 4

22
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

23
Tree	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , iZone , null ) ;
Distance : 4

24
Tree	return TimeUnit.SECONDS == null ;
Code	return TimeUnit.SECONDS == null ;
Distance : 10

25
Tree	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , localInstant , null ) ;
Distance : 4

26
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

27
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) null ) ;
Distance : 6

29
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 8

30
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

31
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

32
Tree	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone , null ) ;
Distance : 2

33
Tree	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Code	return convertLocalToUTC ( localInstant , ( localInstant ) return; ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 4

35
Tree	return iZone . iZone ( localInstant ) ;
Code	return iZone . iZone ( localInstant ) ;
Distance : 5

36
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 4

37
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

38
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

39
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

40
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

41
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

42
Tree	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , null , iZone , null ) ;
Distance : 4

43
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && <= ;
Distance : 6

44
Tree	return ! localInstant ;
Code	return ! localInstant ;
Distance : 9

45
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 3

47
Tree	return iZone ( localInstant , localInstant , iZone ) ;
Code	return iZone ( localInstant , localInstant , iZone ) ;
Distance : 4

48
Tree	return ! instant && ! this . iZone . convertLocalToUTC () ;
Code	return ! instant && ! this . iZone . convertLocalToUTC () ;
Distance : 10

49
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

50
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

51
Tree	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( iZone , STRING_CONSTANT , iZone ) ;
Distance : 5

52
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 6

53
Tree	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! instant . convertLocalToUTC ( localInstant ) ;
Distance : 8

54
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , TimeUnit.SECONDS ) ;
Distance : 4

55
Tree	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant , null ) ;
Distance : 2

56
Tree	return localInstant != iZone ;
Code	return localInstant != iZone ;
Distance : 9

57
Tree	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! instant && ! iZone . convertLocalToUTC () ;
Distance : 9

58
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone , iZone ) ;
Distance : 8

59
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && : ;
Distance : 8

60
Tree	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Code	return iZone . convertLocalToUTC ( localInstant ) > PropertyCollapseLevel.NONE ;
Distance : 5

61
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

62
Tree	return iZone . localInstant ( iZone ) ;
Code	return iZone . localInstant ( iZone ) ;
Distance : 6

63
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant ) ;
Distance : 3

64
Tree	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	return localInstant . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

65
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

66
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

67
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant ) ;
Distance : 2

68
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , false ) ;
Distance : 6

69
Tree	return iZone == null ;
Code	return iZone == null ;
Distance : 9

70
Tree	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Code	return iZone . convertLocalToUTC ( null , localInstant , instant , null ) ;
Distance : 4

71
Tree	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	return iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 2

72
Tree	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . instant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

73
Tree	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant , null ) ;
Distance : 3

74
Tree	return iZone . convertLocalToUTC ( true ) ;
Code	return iZone . convertLocalToUTC ( true ) ;
Distance : 5

75
Tree	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

76
Tree	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return localInstant && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

77
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant ) ;
Distance : 3

78
Tree	return this . iZone . convertLocalToUTC ( instant ) ;
Code	return this . iZone . convertLocalToUTC ( instant ) ;
Distance : 6

79
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

80
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , false ) ;
Distance : 6

81
Tree	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Code	return ! iZone && ! iZone . convertLocalToUTC ( iZone ) ;
Distance : 9

82
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

83
Tree	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return localInstant + this . iZone . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

84
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

85
Tree	return this . instant . convertLocalToUTC ( localInstant ) ;
Code	return this . instant . convertLocalToUTC ( localInstant ) ;
Distance : 7

86
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

87
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , instant ) ;
Distance : 3

88
Tree	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Code	return iZone + this . localInstant . convertLocalToUTC ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

89
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 3

90
Tree	return iZone . convertLocalToUTC ( iZone ) ;
Code	return iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

91
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

92
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false ? ;
Distance : 5

93
Tree	return iZone != localInstant ;
Code	return iZone != localInstant ;
Distance : 8

94
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

95
Tree	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Code	return convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 4

96
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

97
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

98
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , localInstant , localInstant , iZone ) ;
Distance : 4

99
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , localInstant , localInstant , iZone ) ;
Distance : 4

100
Tree	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) iZone ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

101
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 4

102
Tree	return iZone ( localInstant , iZone , localInstant ) ;
Code	return iZone ( localInstant , iZone , localInstant ) ;
Distance : 4

103
Tree	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Code	return convertLocalToUTC ( localInstant , ( iZone ) null ) ;
Distance : 6

104
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

105
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone ) ;
Distance : 3

106
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

107
Tree	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	return iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 4

108
Tree	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

109
Tree	return NUMBER_CONSTANT / instant ;
Code	return NUMBER_CONSTANT / instant ;
Distance : 9

110
Tree	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , localInstant , iZone , iZone ) ;
Distance : 6

111
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 8

112
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

113
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false / ;
Distance : 5

114
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

115
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

116
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , null ) ;
Distance : 6

117
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

118
Tree	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , instant , localInstant , iZone ) ;
Distance : 6

119
Tree	return iZone . iZone ( iZone ) ;
Code	return iZone . iZone ( iZone ) ;
Distance : 6

120
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

121
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , null ) ;
Distance : 6

122
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

123
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , iZone ) ;
Distance : 9

124
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , null ) ;
Distance : 6

125
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , iZone ) ;
Distance : 8

126
Tree	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , localInstant , null ) ;
Distance : 2

127
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

128
Tree	return NUMBER_CONSTANT / iZone ; Class
Code	return NUMBER_CONSTANT / iZone ; Class
Distance : 11

129
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , iZone ) ;
Distance : 7

130
Tree	return iZone ( localInstant , instant , localInstant ) ;
Code	return iZone ( localInstant , instant , localInstant ) ;
Distance : 4

131
Tree	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! instant . convertLocalToUTC () ;
Distance : 9

132
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone , iZone ) ;
Distance : 8

133
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , null ) ;
Distance : 6

134
Tree	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Code	return convertLocalToUTC ( iZone , ( localInstant ) null ) ;
Distance : 7

135
Tree	return iZone != null iZone + ;
Code	return iZone != null iZone + ;
Distance : 9

136
Tree	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , iZone . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 7

137
Tree	return localInstant . convertLocalToUTC ( localInstant ) ;
Code	return localInstant . convertLocalToUTC ( localInstant ) ;
Distance : 5

138
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

139
Tree	return iZone . convertLocalToUTC ( false ) ;
Code	return iZone . convertLocalToUTC ( false ) ;
Distance : 4

140
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( iZone ) ) ;
Distance : 7

141
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false & ;
Distance : 5

142
Tree	return iZone . localInstant ( localInstant ) ;
Code	return iZone . localInstant ( localInstant ) ;
Distance : 5

143
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

144
Tree	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone , localInstant , iZone ) ;
Distance : 5

145
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 8

146
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

147
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

148
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

149
Tree	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , instant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

150
Tree	return iZone . convertLocalToUTC ( localInstant ) ;
Code	return iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

151
Tree	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Code	return iZone && ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 9

152
Tree	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Code	return iZone . convertLocalToUTC ( localInstant ) > FunctionFlavor.NORMAL ;
Distance : 5

153
Tree	return convertLocalToUTC ( this , localInstant ) ;
Code	return convertLocalToUTC ( this , localInstant ) ;
Distance : 6

154
Tree	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this . localInstant , iZone , localInstant , iZone ) ;
Distance : 6

155
Tree	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Code	return iZone . convertLocalToUTC ( localInstant ) > rhs.b ;
Distance : 5

156
Tree	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Code	return iZone . convertLocalToUTC ( getArrayStart , false ) ;
Distance : 3

157
Tree	return this . iZone . convertLocalToUTC ( iZone ) ;
Code	return this . iZone . convertLocalToUTC ( iZone ) ;
Distance : 7

158
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , CheckLevel.ERROR ) ;
Distance : 4

159
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

160
Tree	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Code	return iZone && ! iZone . convertLocalToUTC ( localInstant ) && ^ ;
Distance : 8

161
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

162
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , iZone ) ;
Distance : 4

163
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

164
Tree	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( localInstant , return; , iZone , null ) ;
Distance : 4

165
Tree	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , iZone , iZone ) ;
Distance : 4

166
Tree	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Code	return convertLocalToUTC ( localInstant , instant . convertLocalToUTC ( localInstant ) , null ) ;
Distance : 8

167
Tree	return convertLocalToUTC ( this , instant ) ;
Code	return convertLocalToUTC ( this , instant ) ;
Distance : 5

168
Tree	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Code	return ! instant && ! iZone . convertLocalToUTC ( localInstant ) ;
Distance : 8

169
Tree	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Code	return iZone . convertLocalToUTC ( null , iZone , localInstant , null ) ;
Distance : 5

170
Tree	return iZone . convertLocalToUTC ( instant ) ;
Code	return iZone . convertLocalToUTC ( instant ) ;
Distance : 4

171
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

172
Tree	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) localInstant ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

173
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

174
Tree	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , localInstant , iZone ) ;
Distance : 4

175
Tree	return iZone != null iZone instanceof ;
Code	return iZone != null iZone instanceof ;
Distance : 9

176
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

177
Tree	return ! iZone ; Class
Code	return ! iZone ; Class
Distance : 11

178
Tree	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

179
Tree	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Code	return iZone . convertLocalToUTC ( iZone , null , iZone , null ) ;
Distance : 5

180
Tree	return ! iZone && ! this . instant . convertLocalToUTC () ;
Code	return ! iZone && ! this . instant . convertLocalToUTC () ;
Distance : 10

181
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

182
Tree	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) false instanceof ;
Distance : 5

183
Tree	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Code	return iZone . convertLocalToUTC ( this , iZone . convertLocalToUTC ( localInstant ) ) ;
Distance : 7

184
Tree	return localInstant . convertLocalToUTC ( false ) ;
Code	return localInstant . convertLocalToUTC ( false ) ;
Distance : 5

185
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , false ) ;
Distance : 6

186
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone , iZone ) ;
Distance : 8

187
Tree	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Code	return iZone . convertLocalToUTC ( org.mockito.MockitoAnnotations.Mock , false ) ;
Distance : 3

188
Tree	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Code	return ! iZone && ! this . iZone . convertLocalToUTC () ;
Distance : 10

189
Tree	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Code	return ! iZone . convertLocalToUTC ( localInstant ) && & ;
Distance : 6

190
Tree	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Code	return iZone . convertLocalToUTC ( DiagnosticGroups.LINT_CHECKS , false ) ;
Distance : 3

191
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

192
Tree	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Code	return convertLocalToUTC ( localInstant , localInstant . convertLocalToUTC ( iZone ) , null ) ;
Distance : 9

193
Tree	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , STRING_CONSTANT , localInstant ) ;
Distance : 4

194
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

195
Tree	return convertLocalToUTC ( this , localInstant ) ; Class
Code	return convertLocalToUTC ( this , localInstant ) ; Class
Distance : 7

196
Tree	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant , instant , iZone ) ;
Distance : 4

197
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , false ) ;
Distance : 6

198
Tree	return instant . convertLocalToUTC ( false ) ;
Code	return instant . convertLocalToUTC ( false ) ;
Distance : 5

199
Tree	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! this . localInstant . convertLocalToUTC () ;
Distance : 10

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Partial newPartial = new Partial ( iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes ) ;
Distance : 4

1
Tree	UnmockableHashCodeAndEquals newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	UnmockableHashCodeAndEquals newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 9

2
Tree	Partial newValues = Partial . is ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

3
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , false ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , false ) ;
Distance : 5

4
Tree	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 7

5
Tree	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_2016 , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_2016 , NUMBER_CONSTANT ) ;
Distance : 7

6
Tree	Partial newValues = new Partial ( iChronology , newTypes , values.length ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , values.length ) ;
Distance : 4

7
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( iChronology ) ) ;
Distance : 9

8
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . valueOf () ) ;
Distance : 6

9
Tree	Partial newValues = new Partial ( iChronology , newValues , values.length () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , values.length () ) ;
Distance : 4

10
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . getRightElement () ) ;
Distance : 6

11
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 4

12
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 3

13
Tree	Partial newValues = Partial . is ( hours , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( hours , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Distance : 8

15
Tree	Partial iChronology = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Partial iChronology = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

16
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 5

17
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 9

18
Tree	Partial newValues = new Partial ( this , newValues , newValues ) ;
Code	Partial newValues = new Partial ( this , newValues , newValues ) ;
Distance : 3

19
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( LanguageMode.ECMASCRIPT_NEXT ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( LanguageMode.ECMASCRIPT_NEXT ) ) ;
Distance : 10

20
Tree	Partial newValues = new Partial ( iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues ) ;
Distance : 4

21
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 6

22
Tree	Partial newPartial = new Partial ( null ) ;
Code	Partial newPartial = new Partial ( null ) ;
Distance : 5

23
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , null ) ;
Distance : 4

24
Tree	Partial newValues = new Partial ( this , iChronology , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , iChronology ) ;
Distance : 4

25
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 7

26
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , false ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , false ) ;
Distance : 3

27
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( NUMBER_CONSTANT , values.length ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( NUMBER_CONSTANT , values.length ) ) ;
Distance : 12

28
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Distance : 5

29
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Distance : 7

30
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , getChronology () , RotationConvention.FRAME_TRANSFORM ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , getChronology () , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 5

31
Tree	Partial newValues = new Partial ( this , newValues , newValues , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( this , newValues , newValues , NUMBER_CONSTANT ) ;
Distance : 5

32
Tree	Partial newValues = new Partial ( newValues , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( newValues , NUMBER_CONSTANT ) ;
Distance : 4

33
Tree	Partial newValues = new Partial ( new Partial ( this ) , newValues , newValues ) ;
Code	Partial newValues = new Partial ( new Partial ( this ) , newValues , newValues ) ;
Distance : 7

34
Tree	Partial newValues = new Partial ( iChronology . getInstance () , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , iChronology , newValues ) ;
Distance : 7

35
Tree	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , this , newValues ) ;
Distance : 4

36
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology ) ;
Distance : 5

37
Tree	Partial newValues = new Partial ( iChronology , newValues , in () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , in () ) ;
Distance : 4

38
Tree	Partial newValues = extractCauseUnchecked () ;
Code	Partial newValues = extractCauseUnchecked () ;
Distance : 10

39
Tree	Partial newPartial = new Partial ( new Partial ( iChronology ) , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( new Partial ( iChronology ) , newValues , newValues ) ;
Distance : 6

40
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , null ) ;
Distance : 5

41
Tree	Partial newValues = getOrCreateName () ;
Code	Partial newValues = getOrCreateName () ;
Distance : 10

42
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . of () ) ;
Distance : 6

43
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues , values.length ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues , values.length ) ;
Distance : 6

44
Tree	Partial newValues = new Partial ( iChronology . copySelf () , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , iChronology , newValues ) ;
Distance : 7

45
Tree	Partial newValues = new Partial ( super(); ) ;
Code	Partial newValues = new Partial ( super(); ) ;
Distance : 6

46
Tree	Partial newPartial = extractCauseUnchecked () ;
Code	Partial newPartial = extractCauseUnchecked () ;
Distance : 9

47
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 8

48
Tree	Partial newValues = createStringWriter () ;
Code	Partial newValues = createStringWriter () ;
Distance : 10

49
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Distance : 5

50
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Distance : 8

51
Tree	Partial newValues = new Partial ( iChronology , newTypes ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes ) ;
Distance : 5

52
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 4

53
Tree	Partial iChronology = new Partial ( this , iChronology , newValues , NUMBER_CONSTANT ) ;
Code	Partial iChronology = new Partial ( this , iChronology , newValues , NUMBER_CONSTANT ) ;
Distance : 5

54
Tree	Partial newPartial = new Partial ( iChronology , this , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , this , newValues ) ;
Distance : 3

55
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology ) ;
Distance : 5

56
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology ) ) ;
Distance : 6

57
Tree	Partial newValues = new Partial ( newValues , new newTypes ( this ) ) ;
Code	Partial newValues = new Partial ( newValues , new newTypes ( this ) ) ;
Distance : 7

58
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , in () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , in () ) ;
Distance : 6

59
Tree	Partial newValues = new Partial ( iChronology , newValues , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , NUMBER_CONSTANT ) ;
Distance : 3

60
Tree	Partial newValues = new Partial ( iChronology , newValues , values.length ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , values.length ) ;
Distance : 3

61
Tree	Partial iChronology = new Partial ( this , iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( this , iChronology , newValues ) ;
Distance : 4

62
Tree	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 5

63
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getRight () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getRight () ) ;
Distance : 6

64
Tree	abstract Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Code	abstract Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

65
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues ) ;
Distance : 5

66
Tree	Partial newValues = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Distance : 6

67
Tree	synchronized Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	synchronized Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 4

68
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( getChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( getChronology ) ) ;
Distance : 10

69
Tree	Partial newPartial = new Partial ( this , iChronology , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues , iChronology ) ;
Distance : 3

70
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 3

71
Tree	Partial newPartial = new Partial ( iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues ) ;
Distance : 3

72
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 8

73
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 5

74
Tree	Partial newValues = new Partial ( newValues , new newTypes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( newValues , new newTypes ( iChronology ) ) ;
Distance : 6

75
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . createLong () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . createLong () ) ;
Distance : 6

76
Tree	Partial newPartial = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 4

77
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newValues , newValues ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newValues , newValues ) ) ;
Distance : 8

78
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Distance : 6

79
Tree	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Distance : 4

80
Tree	Partial newPartial = new Partial ( new Partial ( this ) , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( new Partial ( this ) , newValues , newValues ) ;
Distance : 6

81
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , TimeUnit.SECONDS , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , TimeUnit.SECONDS , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 10

82
Tree	Partial newValues = new Partial ( new Partial ( this ) , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( new Partial ( this ) , iChronology , newValues ) ;
Distance : 8

83
Tree	Partial newValues = new Partial ( getChronology , obj2.props , false ) ;
Code	Partial newValues = new Partial ( getChronology , obj2.props , false ) ;
Distance : 4

84
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , times () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , times () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 5

85
Tree	Partial newPartial = new Partial ( this ) ;
Code	Partial newPartial = new Partial ( this ) ;
Distance : 5

86
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , iChronology . valueOf () ) ;
Distance : 5

87
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Distance : 8

88
Tree	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_2016 , obj2.props , false ) ;
Code	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_2016 , obj2.props , false ) ;
Distance : 4

89
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues () ) ;
Distance : 5

90
Tree	Partial newPartial = new Partial ( iChronology , newTypes , NUMBER_CONSTANT ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , NUMBER_CONSTANT ) ;
Distance : 3

91
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( STRING_CONSTANT ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( STRING_CONSTANT ) ) ;
Distance : 10

92
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 9

93
Tree	Partial newValues = new Partial ( this , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues ) ;
Distance : 4

94
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues () ) ;
Distance : 5

95
Tree	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT ) ;
Code	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT ) ;
Distance : 4

96
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( hours ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( hours ) ) ;
Distance : 10

97
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology ) ;
Distance : 6

98
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . < newValues > nextInt () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . < newValues > nextInt () ) ;
Distance : 11

99
Tree	Partial newValues = new Partial ( iChronology , new long [ FunctionFlavor.GENERATOR ] , false ) ;
Code	Partial newValues = new Partial ( iChronology , new long [ FunctionFlavor.GENERATOR ] , false ) ;
Distance : 8

100
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . valueOf () ) ;
Distance : 9

101
Tree	abstract Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	abstract Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 4

102
Tree	Partial newPartial = new Partial ( null , false ) ;
Code	Partial newPartial = new Partial ( null , false ) ;
Distance : 4

103
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , getChronology () , options.instrumentationTemplate ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , getChronology () , options.instrumentationTemplate ) ;
Distance : 5

104
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( NUMBER_CONSTANT , TimeUnit.SECONDS ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( NUMBER_CONSTANT , TimeUnit.SECONDS ) ) ;
Distance : 12

105
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues () ) ;
Distance : 6

106
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT ) ;
Distance : 5

107
Tree	Partial newValues = new Partial ( new Partial ( iChronology ) , newValues , newValues ) ;
Code	Partial newValues = new Partial ( new Partial ( iChronology ) , newValues , newValues ) ;
Distance : 7

108
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( STRING_CONSTANT ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( STRING_CONSTANT ) ) ;
Distance : 10

109
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Distance : 2

110
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( getChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( getChronology ) ) ;
Distance : 10

111
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 7

112
Tree	Partial newValues = new Partial ( new Partial ( iChronology ) , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( new Partial ( iChronology ) , iChronology , newValues ) ;
Distance : 8

113
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . < newValues > of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . < newValues > of () ) ;
Distance : 10

114
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , this . iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , this . iChronology ) ;
Distance : 4

115
Tree	Partial newValues = new Partial ( iChronology , new int [ FunctionFlavor.GENERATOR ] , false ) ;
Code	Partial newValues = new Partial ( iChronology , new int [ FunctionFlavor.GENERATOR ] , false ) ;
Distance : 8

116
Tree	Partial newPartial = new Partial ( this , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues ) ;
Distance : 3

117
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . < newValues > of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . < newValues > of () ) ;
Distance : 11

118
Tree	Partial iChronology = new Partial ( this ) ;
Code	Partial iChronology = new Partial ( this ) ;
Distance : 6

119
Tree	final Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	final Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 9

120
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Distance : 5

121
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . < newValues > getEnums () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . < newValues > getEnums () ) ;
Distance : 11

122
Tree	Partial newValues = new Partial ( this ) ;
Code	Partial newValues = new Partial ( this ) ;
Distance : 6

123
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newValues ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newValues ) ) ;
Distance : 8

124
Tree	Partial newValues = new Partial ( iChronology , newValues , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , LocalizedFormats.OVERFLOW_IN_ADDITION ) ;
Distance : 3

125
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 8

126
Tree	UnmockableHashCodeAndEquals newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	UnmockableHashCodeAndEquals newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 9

127
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newTypes ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newTypes ) ) ;
Distance : 7

128
Tree	final Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	final Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 4

129
Tree	abstract Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	abstract Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 9

130
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newTypes , newValues ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newTypes , newValues ) ) ;
Distance : 8

131
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues , null ) ;
Distance : 6

132
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newValues ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newValues ) ) ;
Distance : 7

133
Tree	abstract Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	abstract Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 9

134
Tree	Partial newValues = new Partial ( iChronology , newTypes , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , NUMBER_CONSTANT ) ;
Distance : 4

135
Tree	final Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	final Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 9

136
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newTypes ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newTypes ) ) ;
Distance : 8

137
Tree	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newValues , newValues ) ) ;
Code	Partial newPartial = new Partial ( iChronology , new newTypes ( iChronology , newValues , newValues ) ) ;
Distance : 7

138
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Class
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Class
Distance : 5

139
Tree	Partial newValues = new Partial ( null , false ) ;
Code	Partial newValues = new Partial ( null , false ) ;
Distance : 5

140
Tree	Partial newValues = new Partial ( this ) ; Class
Code	Partial newValues = new Partial ( this ) ; Class
Distance : 7

141
Tree	Partial iChronology = new Partial ( iChronology , NUMBER_CONSTANT ) ;
Code	Partial iChronology = new Partial ( iChronology , NUMBER_CONSTANT ) ;
Distance : 5

142
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , null ) ;
Distance : 4

143
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newTypes , newValues ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( iChronology , newTypes , newValues ) ) ;
Distance : 9

144
Tree	Partial newValues = new Partial ( iChronology , new long [ mant.length ] , false ) ;
Code	Partial newValues = new Partial ( iChronology , new long [ mant.length ] , false ) ;
Distance : 8

145
Tree	Partial newPartial = new Partial ( iChronology , copySelf () , CHAR_CONS ) ;
Code	Partial newPartial = new Partial ( iChronology , copySelf () , CHAR_CONS ) ;
Distance : 4

146
Tree	Partial newValues = new Partial ( iChronology , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE () , CHAR_CONS ) ;
Code	Partial newValues = new Partial ( iChronology , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE () , CHAR_CONS ) ;
Distance : 5

147
Tree	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 4

148
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( STRING_CONSTANT ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( STRING_CONSTANT ) ) ;
Distance : 10

149
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

150
Tree	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	Partial newValues = new Partial ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 4

151
Tree	Partial newValues = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Distance : 6

152
Tree	Partial newValues = new Partial ( null ) ;
Code	Partial newValues = new Partial ( null ) ;
Distance : 6

153
Tree	Partial iChronology = new Partial ( null ) ;
Code	Partial iChronology = new Partial ( null ) ;
Distance : 6

154
Tree	Partial newValues = new Partial ( iChronology , this , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , this , iChronology ) ;
Distance : 3

155
Tree	Partial newValues = new Partial ( iChronology , new long [ values.length ] , false ) ;
Code	Partial newValues = new Partial ( iChronology , new long [ values.length ] , false ) ;
Distance : 8

156
Tree	Partial newValues = new Partial ( newValues , this , newValues ) ;
Code	Partial newValues = new Partial ( newValues , this , newValues ) ;
Distance : 4

157
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Distance : 9

158
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues , null ) ;
Distance : 6

159
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( NUMBER_CONSTANT , TimeUnit.SECONDS ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( NUMBER_CONSTANT , TimeUnit.SECONDS ) ) ;
Distance : 12

160
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , iChronology . of () ) ;
Distance : 6

161
Tree	Partial newPartial = new Partial ( this , iChronology , newValues , NUMBER_CONSTANT ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues , NUMBER_CONSTANT ) ;
Distance : 4

162
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , values.length () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , values.length () ) ;
Distance : 6

163
Tree	Partial newValues = new Partial ( iChronology , getNodes () , CHAR_CONS ) ;
Code	Partial newValues = new Partial ( iChronology , getNodes () , CHAR_CONS ) ;
Distance : 5

164
Tree	Partial newValues = new Partial ( this , iChronology , newValues , NUMBER_CONSTANT ) ;
Code	Partial newValues = new Partial ( this , iChronology , newValues , NUMBER_CONSTANT ) ;
Distance : 5

165
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Distance : 9

166
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , Verification.AT_LEAST , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , Verification.AT_LEAST , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 10

167
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , false ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , false ) ;
Distance : 4

168
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues () ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues () ) ;
Distance : 4

169
Tree	Partial newPartial = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Partial newPartial = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

170
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 8

171
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 10

172
Tree	Partial newValues = new Partial ( NUMBER_CONSTANT , getChronology () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	Partial newValues = new Partial ( NUMBER_CONSTANT , getChronology () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 5

173
Tree	SparseGradient newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	SparseGradient newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 9

174
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , values.length ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , values.length ) ;
Distance : 7

175
Tree	Partial newValues = new Partial ( iChronology , copySelf () , CHAR_CONS ) ;
Code	Partial newValues = new Partial ( iChronology , copySelf () , CHAR_CONS ) ;
Distance : 5

176
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getLeft () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getLeft () ) ;
Distance : 6

177
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues ) ;
Distance : 4

178
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( STRING_CONSTANT ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( STRING_CONSTANT ) ) ;
Distance : 10

179
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , false ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , false ) ;
Distance : 4

180
Tree	Partial newValues = new Partial ( iChronology , newValues , getMillis () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , getMillis () ) ;
Distance : 4

181
Tree	Partial newValues = new Partial ( iChronology , newValues , Verification.AT_LEAST ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , Verification.AT_LEAST ) ;
Distance : 3

182
Tree	newValues newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	newValues newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 9

183
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , Verification.AT_LEAST ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues , Verification.AT_LEAST ) ;
Distance : 7

184
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Distance : 9

185
Tree	Partial newValues = new Partial ( CompositeFormat , obj2.props , false ) ;
Code	Partial newValues = new Partial ( CompositeFormat , obj2.props , false ) ;
Distance : 4

186
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Distance : 8

187
Tree	SparseGradient newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	SparseGradient newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 9

188
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( NUMBER_CONSTANT , values.length ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( NUMBER_CONSTANT , values.length ) ) ;
Distance : 12

189
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , null ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , null ) ;
Distance : 3

190
Tree	Partial newValues = new Partial ( iChronology , newValues , getChronology () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , getChronology () ) ;
Distance : 4

191
Tree	Partial newPartial = new Partial ( iChronology , newValues , NUMBER_CONSTANT ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , NUMBER_CONSTANT ) ;
Distance : 2

192
Tree	Partial iChronology = new Partial ( iChronology , new newTypes ( this ) ) ;
Code	Partial iChronology = new Partial ( iChronology , new newTypes ( this ) ) ;
Distance : 7

193
Tree	Partial newValues = new Partial ( new Partial ( this ) , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( new Partial ( this ) , newTypes , newValues ) ;
Distance : 8

194
Tree	Partial newValues = new Partial ( iChronology , new newTypes ( newValues ) ) ;
Code	Partial newValues = new Partial ( iChronology , new newTypes ( newValues ) ) ;
Distance : 7

195
Tree	Partial newValues = new Partial ( new Partial ( iChronology ) , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( new Partial ( iChronology ) , newTypes , newValues ) ;
Distance : 8

196
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

197
Tree	Partial newValues = new Partial ( null , true ) ;
Code	Partial newValues = new Partial ( null , true ) ;
Distance : 5

198
Tree	Partial newValues = new Partial ( super(); , false ) ;
Code	Partial newValues = new Partial ( super(); , false ) ;
Distance : 5

199
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 8

========================================================================


