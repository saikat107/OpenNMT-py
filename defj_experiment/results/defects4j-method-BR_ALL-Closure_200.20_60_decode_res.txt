========================================================================
Example Number: 1
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 60
Wrong
========================================================================
False

0
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

1
Tree	- NUMBER_CONSTANT && name.localSets == null && -
Code	- NUMBER_CONSTANT && name.localSets == null && -
Distance : 9

2
Tree	- NUMBER_CONSTANT && name.localSets == null && -
Code	- NUMBER_CONSTANT && name.localSets == null && -
Distance : 9

3
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

4
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

5
Tree	- NUMBER_CONSTANT && name.localSets == null && ]
Code	- NUMBER_CONSTANT && name.localSets == null && ]
Distance : 9

6
Tree	- NUMBER_CONSTANT && name.localSets == null && shouldPreserve
Code	- NUMBER_CONSTANT && name.localSets == null && shouldPreserve
Distance : 9

7
Tree	- NUMBER_CONSTANT && name.localSets == null && Character
Code	- NUMBER_CONSTANT && name.localSets == null && Character
Distance : 9

8
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

9
Tree	- NUMBER_CONSTANT && name.localSets == null && ]
Code	- NUMBER_CONSTANT && name.localSets == null && ]
Distance : 9

10
Tree	! name.globalSets && name.globalSets == null && TypeValidator.TYPE_MISMATCH_WARNING
Code	! name.globalSets && name.globalSets == null && TypeValidator.TYPE_MISMATCH_WARNING
Distance : 9

11
Tree	! name.globalSets && name.globalSets == null && extends
Code	! name.globalSets && name.globalSets == null && extends
Distance : 9

12
Tree	! name.globalSets && name.globalSets == null && {}
Code	! name.globalSets && name.globalSets == null && {}
Distance : 9

13
Tree	! name.globalSets && name.globalSets == null && []
Code	! name.globalSets && name.globalSets == null && []
Distance : 9

14
Tree	! name.globalSets && name.globalSets == null && ^
Code	! name.globalSets && name.globalSets == null && ^
Distance : 9

15
Tree	! name.globalSets && name.globalSets == null && *
Code	! name.globalSets && name.globalSets == null && *
Distance : 9

16
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * scope
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * scope
Distance : 8

17
Tree	! name.globalSets && name.globalSets == null && -
Code	! name.globalSets && name.globalSets == null && -
Distance : 9

18
Tree	! name.globalSets && name.globalSets == null && !
Code	! name.globalSets && name.globalSets == null && !
Distance : 9

19
Tree	! name.globalSets && name.globalSets == null && shouldPreserve
Code	! name.globalSets && name.globalSets == null && shouldPreserve
Distance : 9

20
Tree	! name.globalSets && name.globalSets == null && parts.length
Code	! name.globalSets && name.globalSets == null && parts.length
Distance : 9

21
Tree	! name.globalSets && name.globalSets == null && -
Code	! name.globalSets && name.globalSets == null && -
Distance : 9

22
Tree	! name.globalSets && name.globalSets == null && extends
Code	! name.globalSets && name.globalSets == null && extends
Distance : 9

23
Tree	! name.globalSets && name.globalSets == null && TypeValidator.TYPE_MISMATCH_WARNING
Code	! name.globalSets && name.globalSets == null && TypeValidator.TYPE_MISMATCH_WARNING
Distance : 9

24
Tree	! name.globalSets && name.globalSets == null && {}
Code	! name.globalSets && name.globalSets == null && {}
Distance : 9

25
Tree	! name.globalSets && name.globalSets == null && ^
Code	! name.globalSets && name.globalSets == null && ^
Distance : 9

26
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT
Distance : 4

27
Tree	! name.globalSets && name.globalSets == null && parts.length
Code	! name.globalSets && name.globalSets == null && parts.length
Distance : 9

28
Tree	! name.globalSets && name.globalSets == null && *
Code	! name.globalSets && name.globalSets == null && *
Distance : 9

29
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT NUMBER_CONSTANT
Distance : 5

30
Tree	name.globalSets == NUMBER_CONSTANT && name.globalSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT TypeInferenceMode.NEITHER
Code	name.globalSets == NUMBER_CONSTANT && name.globalSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT TypeInferenceMode.NEITHER
Distance : 6

31
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT super
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT super
Distance : 5

32
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT :
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT :
Distance : 5

33
Tree	! name.globalSets && name.globalSets == null && !
Code	! name.globalSets && name.globalSets == null && !
Distance : 9

34
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT t
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT t
Distance : 5

35
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT js
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT js
Distance : 5

36
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getParent
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getParent
Distance : 4

37
Tree	! name.globalSets && name.globalSets == null && shouldPreserve
Code	! name.globalSets && name.globalSets == null && shouldPreserve
Distance : 9

38
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT setUp
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT setUp
Distance : 5

39
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT checkNotNull
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && NUMBER_CONSTANT > NUMBER_CONSTANT checkNotNull
Distance : 5

40
Tree	- NUMBER_CONSTANT && name.localSets == null && *
Code	- NUMBER_CONSTANT && name.localSets == null && *
Distance : 9

41
Tree	- NUMBER_CONSTANT && name.localSets == null && shouldPreserve
Code	- NUMBER_CONSTANT && name.localSets == null && shouldPreserve
Distance : 9

42
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * jsdoc
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * jsdoc
Distance : 8

43
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * result
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * result
Distance : 8

44
Tree	- NUMBER_CONSTANT && name.localSets == null && Character
Code	- NUMBER_CONSTANT && name.localSets == null && Character
Distance : 9

45
Tree	! name.globalSets && name.globalSets == null && []
Code	! name.globalSets && name.globalSets == null && []
Distance : 9

46
Tree	- NUMBER_CONSTANT && name.localSets == null && *
Code	- NUMBER_CONSTANT && name.localSets == null && *
Distance : 9

47
Tree	- NUMBER_CONSTANT && name.localSets == null && >
Code	- NUMBER_CONSTANT && name.localSets == null && >
Distance : 8

48
Tree	- NUMBER_CONSTANT && name.localSets == null && >
Code	- NUMBER_CONSTANT && name.localSets == null && >
Distance : 8

49
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * ParamGroup
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * ParamGroup
Distance : 8

50
Tree	- NUMBER_CONSTANT && name.localSets == null && CompilationParam
Code	- NUMBER_CONSTANT && name.localSets == null && CompilationParam
Distance : 9

51
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * code
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * code
Distance : 8

52
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * propType
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * propType
Distance : 8

53
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * e
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * e
Distance : 8

54
Tree	- NUMBER_CONSTANT && name.localSets == null && parts.length
Code	- NUMBER_CONSTANT && name.localSets == null && parts.length
Distance : 9

55
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * escaped
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * escaped
Distance : 8

56
Tree	- NUMBER_CONSTANT && name.localSets == null && CompilationParam
Code	- NUMBER_CONSTANT && name.localSets == null && CompilationParam
Distance : 9

57
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * sourceMap
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * sourceMap
Distance : 8

58
Tree	- NUMBER_CONSTANT && name.localSets == null && parts.length
Code	- NUMBER_CONSTANT && name.localSets == null && parts.length
Distance : 9

59
Tree	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * registry
Code	! name.globalSets && name.globalSets == null && NUMBER_CONSTANT * registry
Distance : 8

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 270
Wrong
========================================================================
False

0
Tree	long rhsContext ;
Code	long rhsContext ;
Distance : 6

1
Tree	char rhsContext ;
Code	char rhsContext ;
Distance : 6

2
Tree	Context rhsContext ;
Code	Context rhsContext ;
Distance : 5

3
Tree	boolean rhsContext ;
Code	boolean rhsContext ;
Distance : 6

4
Tree	Context rhsContext = STRING_CONSTANT ;
Code	Context rhsContext = STRING_CONSTANT ;
Distance : 4

5
Tree	Context rhsContext = NUMBER_CONSTANT ;
Code	Context rhsContext = NUMBER_CONSTANT ;
Distance : 4

6
Tree	byte rhsContext ;
Code	byte rhsContext ;
Distance : 6

7
Tree	int rhsContext ;
Code	int rhsContext ;
Distance : 6

8
Tree	Context rhsContext [] = rhsContext . Context.OTHER () ; block
Code	Context rhsContext [] = rhsContext . Context.OTHER () ; block
Distance : 6

9
Tree	Context rhsContext ; node
Code	Context rhsContext ; node
Distance : 6

10
Tree	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ; []
Code	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ; []
Distance : 6

11
Tree	Context context = context . Context.OTHER ( context , Context.OTHER ) ;
Code	Context context = context . Context.OTHER ( context , Context.OTHER ) ;
Distance : 6

12
Tree	Context context = context . Context.OTHER ( ; , Context.OTHER ) ;
Code	Context context = context . Context.OTHER ( ; , Context.OTHER ) ;
Distance : 7

13
Tree	Context context = rhsContext . Context.OTHER ( context , Context.OTHER ) ;
Code	Context context = rhsContext . Context.OTHER ( context , Context.OTHER ) ;
Distance : 6

14
Tree	Context context = context . Context.OTHER ( context ) ;
Code	Context context = context . Context.OTHER ( context ) ;
Distance : 4

15
Tree	Context context = context . Context.OTHER ( ; ) ;
Code	Context context = context . Context.OTHER ( ; ) ;
Distance : 5

16
Tree	Context rhsContext = context . Context.OTHER ( ; , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( ; , Context.OTHER ) ;
Distance : 6

17
Tree	Context context = rhsContext . Context.OTHER ( ; , Context.OTHER ) ;
Code	Context context = rhsContext . Context.OTHER ( ; , Context.OTHER ) ;
Distance : 7

18
Tree	Context context = context ? Context.OTHER : Context.OTHER ;
Code	Context context = context ? Context.OTHER : Context.OTHER ;
Distance : 6

19
Tree	Context context = new rhsContext ( context , rhsContext ) ;
Code	Context context = new rhsContext ( context , rhsContext ) ;
Distance : 5

20
Tree	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Distance : 5

21
Tree	Context context = rhsContext . Context.OTHER ( ; ) ;
Code	Context context = rhsContext . Context.OTHER ( ; ) ;
Distance : 5

22
Tree	Context context = new rhsContext ( = , context ) ;
Code	Context context = new rhsContext ( = , context ) ;
Distance : 5

23
Tree	Context rhsContext = NUMBER_CONSTANT ; checkNotNull
Code	Context rhsContext = NUMBER_CONSTANT ; checkNotNull
Distance : 5

24
Tree	Context rhsContext = rhsContext ; pname
Code	Context rhsContext = rhsContext ; pname
Distance : 5

25
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; get
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; get
Distance : 5

26
Tree	Context rhsContext = Context.OTHER ; checkNotNull
Code	Context rhsContext = Context.OTHER ; checkNotNull
Distance : 5

27
Tree	Context rhsContext = STRING_CONSTANT ; false
Code	Context rhsContext = STRING_CONSTANT ; false
Distance : 5

28
Tree	Context rhsContext ; of
Code	Context rhsContext ; of
Distance : 6

29
Tree	Context rhsContext = STRING_CONSTANT ; js
Code	Context rhsContext = STRING_CONSTANT ; js
Distance : 5

30
Tree	Context rhsContext = STRING_CONSTANT ; >
Code	Context rhsContext = STRING_CONSTANT ; >
Distance : 5

31
Tree	Context rhsContext = STRING_CONSTANT ; setUp
Code	Context rhsContext = STRING_CONSTANT ; setUp
Distance : 5

32
Tree	Context rhsContext = Context.OTHER ; setUp
Code	Context rhsContext = Context.OTHER ; setUp
Distance : 5

33
Tree	Context rhsContext [] = rhsContext . Context.OTHER () ; of
Code	Context rhsContext [] = rhsContext . Context.OTHER () ; of
Distance : 6

34
Tree	Context rhsContext ; setUp
Code	Context rhsContext ; setUp
Distance : 6

35
Tree	Context rhsContext = NUMBER_CONSTANT ; of
Code	Context rhsContext = NUMBER_CONSTANT ; of
Distance : 5

36
Tree	Context rhsContext = rhsContext ; lines
Code	Context rhsContext = rhsContext ; lines
Distance : 5

37
Tree	Context rhsContext = rhsContext ; Override
Code	Context rhsContext = rhsContext ; Override
Distance : 5

38
Tree	Context rhsContext = Context.OTHER ; get
Code	Context rhsContext = Context.OTHER ; get
Distance : 5

39
Tree	Context rhsContext = rhsContext ; for
Code	Context rhsContext = rhsContext ; for
Distance : 5

40
Tree	Context context = Context.OTHER ( context , false ) ;
Code	Context context = Context.OTHER ( context , false ) ;
Distance : 4

41
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; for
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; for
Distance : 5

42
Tree	Context rhsContext = NUMBER_CONSTANT ; >
Code	Context rhsContext = NUMBER_CONSTANT ; >
Distance : 5

43
Tree	Context rhsContext = new rhsContext ( Context.OTHER , rhsContext ) ;
Code	Context rhsContext = new rhsContext ( Context.OTHER , rhsContext ) ;
Distance : 5

44
Tree	Context context = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Distance : 4

45
Tree	Context rhsContext = rhsContext . Context.OTHER ( context ) ;
Code	Context rhsContext = rhsContext . Context.OTHER ( context ) ;
Distance : 3

46
Tree	public Context rhsContext = Context.OTHER ;
Code	public Context rhsContext = Context.OTHER ;
Distance : 5

47
Tree	int context = Context.OTHER ;
Code	int context = Context.OTHER ;
Distance : 6

48
Tree	abstract Context rhsContext = Context.OTHER ;
Code	abstract Context rhsContext = Context.OTHER ;
Distance : 5

49
Tree	Context rhsContext = break; ;
Code	Context rhsContext = break; ;
Distance : 4

50
Tree	protected Context rhsContext = Context.OTHER ;
Code	protected Context rhsContext = Context.OTHER ;
Distance : 5

51
Tree	final Context rhsContext = Context.OTHER ;
Code	final Context rhsContext = Context.OTHER ;
Distance : 5

52
Tree	Context context = NUMBER_CONSTANT ;
Code	Context context = NUMBER_CONSTANT ;
Distance : 5

53
Tree	Context context = return; ;
Code	Context context = return; ;
Distance : 5

54
Tree	Context context = STRING_CONSTANT ;
Code	Context context = STRING_CONSTANT ;
Distance : 5

55
Tree	int context ;
Code	int context ;
Distance : 6

56
Tree	Context rhsContext = false ;
Code	Context rhsContext = false ;
Distance : 4

57
Tree	Context rhsContext = NON_HALTING_ERROR_MSG ;
Code	Context rhsContext = NON_HALTING_ERROR_MSG ;
Distance : 4

58
Tree	Context rhsContext = Annotation ;
Code	Context rhsContext = Annotation ;
Distance : 4

59
Tree	Context rhsContext = traverser ;
Code	Context rhsContext = traverser ;
Distance : 4

60
Tree	Context rhsContext ;
Code	Context rhsContext ;
Distance : 5

61
Tree	void rhsContext ;
Code	void rhsContext ;
Distance : 6

62
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

63
Tree	Context context = Context.OTHER ( Context.OTHER , false ) ;
Code	Context context = Context.OTHER ( Context.OTHER , false ) ;
Distance : 5

64
Tree	final Context context = Context.OTHER ;
Code	final Context context = Context.OTHER ;
Distance : 6

65
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ;
Distance : 4

66
Tree	Context context = context . Context.OTHER () ;
Code	Context context = context . Context.OTHER () ;
Distance : 5

67
Tree	Context rhsContext = Context.OTHER ; node
Code	Context rhsContext = Context.OTHER ; node
Distance : 5

68
Tree	Context context = Context.OTHER ( context , true ) ;
Code	Context context = Context.OTHER ( context , true ) ;
Distance : 4

69
Tree	Context rhsContext = rhsContext . Context.OTHER ( Context.OTHER ) ;
Code	Context rhsContext = rhsContext . Context.OTHER ( Context.OTHER ) ;
Distance : 4

70
Tree	Context context = Context.OTHER ( ; , true ) ;
Code	Context context = Context.OTHER ( ; , true ) ;
Distance : 5

71
Tree	Context Context [] = context . Context.OTHER () ;
Code	Context Context [] = context . Context.OTHER () ;
Distance : 6

72
Tree	Context context = Context.OTHER ( ; ) ;
Code	Context context = Context.OTHER ( ; ) ;
Distance : 3

73
Tree	Context context = break; ;
Code	Context context = break; ;
Distance : 5

74
Tree	Context rhsContext = Context.OTHER ( ; , false ) ;
Code	Context rhsContext = Context.OTHER ( ; , false ) ;
Distance : 4

75
Tree	Context rhsContext = context . Context.OTHER () ;
Code	Context rhsContext = context . Context.OTHER () ;
Distance : 4

76
Tree	Context context = super . Context.OTHER () ;
Code	Context context = super . Context.OTHER () ;
Distance : 5

77
Tree	Context context = context ;
Code	Context context = context ;
Distance : 4

78
Tree	Context rhsContext = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Code	Context rhsContext = Context.OTHER ( context , NUMBER_CONSTANT ) ;
Distance : 3

79
Tree	Context rhsContext = Context.OTHER ( context , true ) ;
Code	Context rhsContext = Context.OTHER ( context , true ) ;
Distance : 3

80
Tree	Context context = continue; ;
Code	Context context = continue; ;
Distance : 5

81
Tree	Context rhsContext = Context.OTHER ( context ) ;
Code	Context rhsContext = Context.OTHER ( context ) ;
Distance : 1

82
Tree	context context = Context.OTHER ;
Code	context context = Context.OTHER ;
Distance : 6

83
Tree	Context rhsContext = rhsContext ; []
Code	Context rhsContext = rhsContext ; []
Distance : 5

84
Tree	Context rhsContext = NUMBER_CONSTANT ; false
Code	Context rhsContext = NUMBER_CONSTANT ; false
Distance : 5

85
Tree	Context rhsContext = Context.OTHER ( ; , true ) ; disableTypeCheck
Code	Context rhsContext = Context.OTHER ( ; , true ) ; disableTypeCheck
Distance : 5

86
Tree	Context rhsContext = Context.OTHER ; checkNotNull
Code	Context rhsContext = Context.OTHER ; checkNotNull
Distance : 5

87
Tree	Context rhsContext = super . Context.OTHER () ; >
Code	Context rhsContext = super . Context.OTHER () ; >
Distance : 5

88
Tree	rhsContext rhsContext = Context.OTHER ; get
Code	rhsContext rhsContext = Context.OTHER ; get
Distance : 6

89
Tree	Context rhsContext = super . Context.OTHER () ; false
Code	Context rhsContext = super . Context.OTHER () ; false
Distance : 5

90
Tree	Context Context [] = rhsContext ; of
Code	Context Context [] = rhsContext ; of
Distance : 7

91
Tree	Context Context [] = rhsContext ; block
Code	Context Context [] = rhsContext ; block
Distance : 7

92
Tree	Context rhsContext = this . = ; lines
Code	Context rhsContext = this . = ; lines
Distance : 5

93
Tree	Context rhsContext = new rhsContext () ; block
Code	Context rhsContext = new rhsContext () ; block
Distance : 5

94
Tree	Context rhsContext = new rhsContext () ; node
Code	Context rhsContext = new rhsContext () ; node
Distance : 5

95
Tree	Context rhsContext = new rhsContext () ; >
Code	Context rhsContext = new rhsContext () ; >
Distance : 5

96
Tree	rhsContext rhsContext = Context.OTHER ; []
Code	rhsContext rhsContext = Context.OTHER ; []
Distance : 6

97
Tree	Context rhsContext = Context.OTHER ; of
Code	Context rhsContext = Context.OTHER ; of
Distance : 5

98
Tree	Context Context [] = rhsContext ; >
Code	Context Context [] = rhsContext ; >
Distance : 7

99
Tree	Context [] rhsContext = Context.OTHER ; checkNotNull
Code	Context [] rhsContext = Context.OTHER ; checkNotNull
Distance : 6

100
Tree	rhsContext rhsContext = Context.OTHER ; pname
Code	rhsContext rhsContext = Context.OTHER ; pname
Distance : 6

101
Tree	rhsContext rhsContext = Context.OTHER ; for
Code	rhsContext rhsContext = Context.OTHER ; for
Distance : 6

102
Tree	Context rhsContext = new rhsContext ( Context.OTHER , rhsContext ) ; TypeInferenceMode.CHECKED
Code	Context rhsContext = new rhsContext ( Context.OTHER , rhsContext ) ; TypeInferenceMode.CHECKED
Distance : 6

103
Tree	Context rhsContext = new rhsContext () ; js
Code	Context rhsContext = new rhsContext () ; js
Distance : 5

104
Tree	Context rhsContext = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ; []
Code	Context rhsContext = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ; []
Distance : 5

105
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; lines
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; lines
Distance : 5

106
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; Override
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; Override
Distance : 5

107
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; get
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; get
Distance : 5

108
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; for
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; for
Distance : 5

109
Tree	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; pname
Code	Context rhsContext = Context.OTHER ( ; , NUMBER_CONSTANT ) ; pname
Distance : 5

110
Tree	Context rhsContext = new rhsContext () ; setUp
Code	Context rhsContext = new rhsContext () ; setUp
Distance : 5

111
Tree	Context rhsContext = Context.OTHER ; block
Code	Context rhsContext = Context.OTHER ; block
Distance : 5

112
Tree	Context rhsContext = super . Context.OTHER () ; setUp
Code	Context rhsContext = super . Context.OTHER () ; setUp
Distance : 5

113
Tree	Context rhsContext = Context.OTHER ; >
Code	Context rhsContext = Context.OTHER ; >
Distance : 5

114
Tree	Context rhsContext [] = rhsContext ; false
Code	Context rhsContext [] = rhsContext ; false
Distance : 6

115
Tree	Context rhsContext [] = rhsContext ; checkNotNull
Code	Context rhsContext [] = rhsContext ; checkNotNull
Distance : 6

116
Tree	Context rhsContext = Context.OTHER ( ; ) ; lines
Code	Context rhsContext = Context.OTHER ( ; ) ; lines
Distance : 3

117
Tree	Context [] rhsContext = Context.OTHER ; >
Code	Context [] rhsContext = Context.OTHER ; >
Distance : 6

118
Tree	Context rhsContext = Context.OTHER ; setUp
Code	Context rhsContext = Context.OTHER ; setUp
Distance : 5

119
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( ; ) ; disableTypeCheck
Code	Context rhsContext = Context.OTHER . Context.OTHER ( ; ) ; disableTypeCheck
Distance : 5

120
Tree	Context [] rhsContext = Context.OTHER ; js
Code	Context [] rhsContext = Context.OTHER ; js
Distance : 6

121
Tree	Context rhsContext = Context.OTHER ; js
Code	Context rhsContext = Context.OTHER ; js
Distance : 5

122
Tree	Context [] rhsContext = Context.OTHER ; of
Code	Context [] rhsContext = Context.OTHER ; of
Distance : 6

123
Tree	Context rhsContext = true ; lines
Code	Context rhsContext = true ; lines
Distance : 5

124
Tree	Context rhsContext = true ; get
Code	Context rhsContext = true ; get
Distance : 5

125
Tree	Context [] rhsContext = Context.OTHER ; block
Code	Context [] rhsContext = Context.OTHER ; block
Distance : 6

126
Tree	Context Context [] = rhsContext ; node
Code	Context Context [] = rhsContext ; node
Distance : 7

127
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; for
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; for
Distance : 6

128
Tree	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ; get
Code	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ; get
Distance : 6

129
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; Override
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; Override
Distance : 6

130
Tree	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ; lines
Code	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ; lines
Distance : 6

131
Tree	Context rhsContext = this . rhsContext ; []
Code	Context rhsContext = this . rhsContext ; []
Distance : 5

132
Tree	Context rhsContext = true ; for
Code	Context rhsContext = true ; for
Distance : 5

133
Tree	Context rhsContext = new rhsContext () ; checkNotNull
Code	Context rhsContext = new rhsContext () ; checkNotNull
Distance : 5

134
Tree	Context rhsContext = new rhsContext () ; false
Code	Context rhsContext = new rhsContext () ; false
Distance : 5

135
Tree	Context [] rhsContext = Context.OTHER ; false
Code	Context [] rhsContext = Context.OTHER ; false
Distance : 6

136
Tree	Context rhsContext [] = rhsContext ; setUp
Code	Context rhsContext [] = rhsContext ; setUp
Distance : 6

137
Tree	Context rhsContext = super . Context.OTHER () ; js
Code	Context rhsContext = super . Context.OTHER () ; js
Distance : 5

138
Tree	Context rhsContext = context . Context.OTHER ( ; ) ;
Code	Context rhsContext = context . Context.OTHER ( ; ) ;
Distance : 4

139
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( ; , Context.OTHER ) ;
Code	Context rhsContext = Context.OTHER . Context.OTHER ( ; , Context.OTHER ) ;
Distance : 6

140
Tree	Context context = Context.OTHER . Context.OTHER ( context ) ;
Code	Context context = Context.OTHER . Context.OTHER ( context ) ;
Distance : 4

141
Tree	Context context = new rhsContext () ;
Code	Context context = new rhsContext () ;
Distance : 5

142
Tree	Context context = new rhsContext ( = , rhsContext ) ;
Code	Context context = new rhsContext ( = , rhsContext ) ;
Distance : 6

143
Tree	Context rhsContext = NUMBER_CONSTANT ; node
Code	Context rhsContext = NUMBER_CONSTANT ; node
Distance : 5

144
Tree	protected Context context = Context.OTHER ;
Code	protected Context context = Context.OTHER ;
Distance : 6

145
Tree	Context rhsContext = new rhsContext ( = , context ) ;
Code	Context rhsContext = new rhsContext ( = , context ) ;
Distance : 4

146
Tree	Context rhsContext = context . Context.OTHER ( context ) ;
Code	Context rhsContext = context . Context.OTHER ( context ) ;
Distance : 3

147
Tree	Context rhsContext ; >
Code	Context rhsContext ; >
Distance : 6

148
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; pname
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; pname
Distance : 6

149
Tree	context rhsContext = Context.OTHER ;
Code	context rhsContext = Context.OTHER ;
Distance : 5

150
Tree	Context Context [] = rhsContext . Context.OTHER () ;
Code	Context Context [] = rhsContext . Context.OTHER () ;
Distance : 6

151
Tree	Context rhsContext = rhsContext . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = rhsContext . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

152
Tree	Context rhsContext [] = rhsContext . Context.OTHER () ; node
Code	Context rhsContext [] = rhsContext . Context.OTHER () ; node
Distance : 6

153
Tree	abstract Context context = Context.OTHER ;
Code	abstract Context context = Context.OTHER ;
Distance : 6

154
Tree	Context rhsContext = Context.OTHER ( ; ) ;
Code	Context rhsContext = Context.OTHER ( ; ) ;
Distance : 2

155
Tree	Context Context [] = rhsContext . Context.OTHER () ; js
Code	Context Context [] = rhsContext . Context.OTHER () ; js
Distance : 7

156
Tree	Context rhsContext = new rhsContext ( context , context ) ;
Code	Context rhsContext = new rhsContext ( context , context ) ;
Distance : 4

157
Tree	Context Context [] = rhsContext . Context.OTHER () ; >
Code	Context Context [] = rhsContext . Context.OTHER () ; >
Distance : 7

158
Tree	Context rhsContext = true ; Override
Code	Context rhsContext = true ; Override
Distance : 5

159
Tree	Context rhsContext [] = rhsContext . Context.OTHER () ; setUp
Code	Context rhsContext [] = rhsContext . Context.OTHER () ; setUp
Distance : 6

160
Tree	public Context context = Context.OTHER ;
Code	public Context context = Context.OTHER ;
Distance : 6

161
Tree	Context [] rhsContext = Context.OTHER ; node
Code	Context [] rhsContext = Context.OTHER ; node
Distance : 6

162
Tree	char rhsContext = Context.OTHER ;
Code	char rhsContext = Context.OTHER ;
Distance : 5

163
Tree	Context rhsContext = Context.OTHER ( ; , true ) ;
Code	Context rhsContext = Context.OTHER ( ; , true ) ;
Distance : 4

164
Tree	boolean rhsContext = Context.OTHER ;
Code	boolean rhsContext = Context.OTHER ;
Distance : 5

165
Tree	Context rhsContext = Context.OTHER ; js
Code	Context rhsContext = Context.OTHER ; js
Distance : 5

166
Tree	Context rhsContext = super . Context.OTHER () ; block
Code	Context rhsContext = super . Context.OTHER () ; block
Distance : 5

167
Tree	long rhsContext = Context.OTHER ;
Code	long rhsContext = Context.OTHER ;
Distance : 5

168
Tree	Context rhsContext = rhsContext ;
Code	Context rhsContext = rhsContext ;
Distance : 4

169
Tree	Context Context [] = rhsContext . Context.OTHER () ; checkNotNull
Code	Context Context [] = rhsContext . Context.OTHER () ; checkNotNull
Distance : 7

170
Tree	Context rhsContext = NUMBER_CONSTANT ; block
Code	Context rhsContext = NUMBER_CONSTANT ; block
Distance : 5

171
Tree	Context [] rhsContext = Context.OTHER ; setUp
Code	Context [] rhsContext = Context.OTHER ; setUp
Distance : 6

172
Tree	Context context = true ;
Code	Context context = true ;
Distance : 5

173
Tree	char context ;
Code	char context ;
Distance : 6

174
Tree	Context context = null ;
Code	Context context = null ;
Distance : 5

175
Tree	Context rhsContext = true ; pname
Code	Context rhsContext = true ; pname
Distance : 5

176
Tree	Context rhsContext = NUMBER_CONSTANT ; js
Code	Context rhsContext = NUMBER_CONSTANT ; js
Distance : 5

177
Tree	Context [] rhsContext = Context.OTHER ;
Code	Context [] rhsContext = Context.OTHER ;
Distance : 5

178
Tree	char context = Context.OTHER ;
Code	char context = Context.OTHER ;
Distance : 6

179
Tree	Context Context [] = rhsContext ; js
Code	Context Context [] = rhsContext ; js
Distance : 7

180
Tree	Context rhsContext = STRING_CONSTANT ; block
Code	Context rhsContext = STRING_CONSTANT ; block
Distance : 5

181
Tree	Context rhsContext = rhsContext . Context.OTHER ( ; , Context.OTHER ) ; disableTypeCheck
Code	Context rhsContext = rhsContext . Context.OTHER ( ; , Context.OTHER ) ; disableTypeCheck
Distance : 7

182
Tree	Context rhsContext = rhsContext . Context.OTHER () ; lines
Code	Context rhsContext = rhsContext . Context.OTHER () ; lines
Distance : 5

183
Tree	Context rhsContext = new rhsContext ( = , rhsContext ) ; disableTypeCheck
Code	Context rhsContext = new rhsContext ( = , rhsContext ) ; disableTypeCheck
Distance : 6

184
Tree	Context context ;
Code	Context context ;
Distance : 5

185
Tree	byte rhsContext = Context.OTHER ;
Code	byte rhsContext = Context.OTHER ;
Distance : 5

186
Tree	Context Context [] = rhsContext ;
Code	Context Context [] = rhsContext ;
Distance : 6

187
Tree	Context rhsContext = STRING_CONSTANT ; checkNotNull
Code	Context rhsContext = STRING_CONSTANT ; checkNotNull
Distance : 5

188
Tree	int rhsContext = Context.OTHER ;
Code	int rhsContext = Context.OTHER ;
Distance : 5

189
Tree	Context context = false ;
Code	Context context = false ;
Distance : 5

190
Tree	void rhsContext = Context.OTHER ;
Code	void rhsContext = Context.OTHER ;
Distance : 5

191
Tree	Context rhsContext = Context.OTHER ( ; ) ; Override
Code	Context rhsContext = Context.OTHER ( ; ) ; Override
Distance : 3

192
Tree	Context rhsContext = STRING_CONSTANT ; node
Code	Context rhsContext = STRING_CONSTANT ; node
Distance : 5

193
Tree	Context rhsContext = Context.OTHER ( ; ) ; get
Code	Context rhsContext = Context.OTHER ( ; ) ; get
Distance : 3

194
Tree	Context rhsContext = true ; []
Code	Context rhsContext = true ; []
Distance : 5

195
Tree	static Context rhsContext = Context.OTHER ;
Code	static Context rhsContext = Context.OTHER ;
Distance : 5

196
Tree	Context rhsContext = Context.OTHER ( ; ) ; for
Code	Context rhsContext = Context.OTHER ( ; ) ; for
Distance : 3

197
Tree	Context context = rhsContext ? Context.OTHER : Context.OTHER ;
Code	Context context = rhsContext ? Context.OTHER : Context.OTHER ;
Distance : 6

198
Tree	Context rhsContext = Context.OTHER ( ; ) ; pname
Code	Context rhsContext = Context.OTHER ( ; ) ; pname
Distance : 3

199
Tree	Context rhsContext = default: ;
Code	Context rhsContext = default: ;
Distance : 4

200
Tree	Context rhsContext = STRING_CONSTANT ; of
Code	Context rhsContext = STRING_CONSTANT ; of
Distance : 5

201
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

202
Tree	Context rhsContext ; js
Code	Context rhsContext ; js
Distance : 6

203
Tree	Context context = new rhsContext ( context , context ) ;
Code	Context context = new rhsContext ( context , context ) ;
Distance : 5

204
Tree	Context rhsContext = rhsContext . Context.OTHER ( = , Context.OTHER ) ; TypeInferenceMode.CHECKED
Code	Context rhsContext = rhsContext . Context.OTHER ( = , Context.OTHER ) ; TypeInferenceMode.CHECKED
Distance : 7

205
Tree	Context rhsContext = continue; ;
Code	Context rhsContext = continue; ;
Distance : 4

206
Tree	Context rhsContext = rhsContext . Context.OTHER () ; Override
Code	Context rhsContext = rhsContext . Context.OTHER () ; Override
Distance : 5

207
Tree	Context rhsContext = Context.OTHER ( ; , true ) ; TypeInferenceMode.CHECKED
Code	Context rhsContext = Context.OTHER ( ; , true ) ; TypeInferenceMode.CHECKED
Distance : 5

208
Tree	Context rhsContext = Context.OTHER ( Context.OTHER ) ; []
Code	Context rhsContext = Context.OTHER ( Context.OTHER ) ; []
Distance : 3

209
Tree	Context context = rhsContext . Context.OTHER () ;
Code	Context context = rhsContext . Context.OTHER () ;
Distance : 5

210
Tree	rhsContext rhsContext = Context.OTHER ; lines
Code	rhsContext rhsContext = Context.OTHER ; lines
Distance : 6

211
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

212
Tree	Context rhsContext = this . rhsContext ; Override
Code	Context rhsContext = this . rhsContext ; Override
Distance : 5

213
Tree	Context rhsContext = true ;
Code	Context rhsContext = true ;
Distance : 4

214
Tree	Context rhsContext = super . Context.OTHER () ; of
Code	Context rhsContext = super . Context.OTHER () ; of
Distance : 5

215
Tree	Context rhsContext = null ;
Code	Context rhsContext = null ;
Distance : 4

216
Tree	Context rhsContext = this . rhsContext ; get
Code	Context rhsContext = this . rhsContext ; get
Distance : 5

217
Tree	rhsContext rhsContext = Context.OTHER ;
Code	rhsContext rhsContext = Context.OTHER ;
Distance : 5

218
Tree	Context rhsContext = this . rhsContext ; for
Code	Context rhsContext = this . rhsContext ; for
Distance : 5

219
Tree	Context rhsContext = this . = ; pname
Code	Context rhsContext = this . = ; pname
Distance : 5

220
Tree	Context rhsContext = new rhsContext ( context , rhsContext ) ;
Code	Context rhsContext = new rhsContext ( context , rhsContext ) ;
Distance : 4

221
Tree	long context ;
Code	long context ;
Distance : 6

222
Tree	Context rhsContext ; block
Code	Context rhsContext ; block
Distance : 6

223
Tree	Context rhsContext = return; ;
Code	Context rhsContext = return; ;
Distance : 4

224
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

225
Tree	Context rhsContext = Context.OTHER ; node
Code	Context rhsContext = Context.OTHER ; node
Distance : 5

226
Tree	Context rhsContext = isFwd ;
Code	Context rhsContext = isFwd ;
Distance : 4

227
Tree	Context rhsContext = this . rhsContext ;
Code	Context rhsContext = this . rhsContext ;
Distance : 4

228
Tree	Context context = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ;
Code	Context context = Context.OTHER ( Context.OTHER , NUMBER_CONSTANT ) ;
Distance : 5

229
Tree	Context rhsContext = context . Context.OTHER ( context , Context.OTHER ) ;
Code	Context rhsContext = context . Context.OTHER ( context , Context.OTHER ) ;
Distance : 5

230
Tree	Context rhsContext = Map.Entry ;
Code	Context rhsContext = Map.Entry ;
Distance : 4

231
Tree	Context rhsContext = ModuleLoader.ResolutionMode.BROWSER ;
Code	Context rhsContext = ModuleLoader.ResolutionMode.BROWSER ;
Distance : 4

232
Tree	Context context = this . context ;
Code	Context context = this . context ;
Distance : 4

233
Tree	long context = Context.OTHER ;
Code	long context = Context.OTHER ;
Distance : 6

234
Tree	Context rhsContext = Context.OTHER ( context , false ) ;
Code	Context rhsContext = Context.OTHER ( context , false ) ;
Distance : 3

235
Tree	rhsContext rhsContext = Context.OTHER ; Override
Code	rhsContext rhsContext = Context.OTHER ; Override
Distance : 6

236
Tree	Context rhsContext = SIMPLIFY_RHS ;
Code	Context rhsContext = SIMPLIFY_RHS ;
Distance : 4

237
Tree	Context rhsContext = moduleResolutionMode ;
Code	Context rhsContext = moduleResolutionMode ;
Distance : 4

238
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

239
Tree	Context rhsContext = Context.OTHER . Context.OTHER ( = ) ; TypeInferenceMode.CHECKED
Code	Context rhsContext = Context.OTHER . Context.OTHER ( = ) ; TypeInferenceMode.CHECKED
Distance : 5

240
Tree	Context rhsContext = flag ;
Code	Context rhsContext = flag ;
Distance : 4

241
Tree	Context rhsContext = super . Context.OTHER () ; checkNotNull
Code	Context rhsContext = super . Context.OTHER () ; checkNotNull
Distance : 5

242
Tree	Context [] context = Context.OTHER ;
Code	Context [] context = Context.OTHER ;
Distance : 6

243
Tree	Context rhsContext = incrementalCheckMode ;
Code	Context rhsContext = incrementalCheckMode ;
Distance : 4

244
Tree	Context rhsContext = Context.OTHER ; false
Code	Context rhsContext = Context.OTHER ; false
Distance : 5

245
Tree	private Context rhsContext = Context.OTHER ;
Code	private Context rhsContext = Context.OTHER ;
Distance : 5

246
Tree	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = rhsContext ? Context.OTHER : Context.OTHER ;
Distance : 5

247
Tree	Context rhsContext = rhsContext . Context.OTHER () ; pname
Code	Context rhsContext = rhsContext . Context.OTHER () ; pname
Distance : 5

248
Tree	Context rhsContext = Context.OTHER ; of
Code	Context rhsContext = Context.OTHER ; of
Distance : 5

249
Tree	Context Context [] = rhsContext . Context.OTHER () ; false
Code	Context Context [] = rhsContext . Context.OTHER () ; false
Distance : 7

250
Tree	Context rhsContext = rhsContext . Context.OTHER () ; []
Code	Context rhsContext = rhsContext . Context.OTHER () ; []
Distance : 5

251
Tree	Context rhsContext ; checkNotNull
Code	Context rhsContext ; checkNotNull
Distance : 6

252
Tree	Context rhsContext ; false
Code	Context rhsContext ; false
Distance : 6

253
Tree	Context rhsContext = Context.OTHER ; block
Code	Context rhsContext = Context.OTHER ; block
Distance : 5

254
Tree	Context rhsContext = Context.OTHER ; false
Code	Context rhsContext = Context.OTHER ; false
Distance : 5

255
Tree	Context rhsContext = Context.OTHER ; >
Code	Context rhsContext = Context.OTHER ; >
Distance : 5

256
Tree	Context rhsContext = NUMBER_CONSTANT ; setUp
Code	Context rhsContext = NUMBER_CONSTANT ; setUp
Distance : 5

257
Tree	Context rhsContext = context ;
Code	Context rhsContext = context ;
Distance : 3

258
Tree	Context rhsContext = new rhsContext () ;
Code	Context rhsContext = new rhsContext () ;
Distance : 4

259
Tree	Context context = Context.OTHER ( context ) ;
Code	Context context = Context.OTHER ( context ) ;
Distance : 2

260
Tree	Context rhsContext = super . Context.OTHER () ;
Code	Context rhsContext = super . Context.OTHER () ;
Distance : 4

261
Tree	rhsContext context = Context.OTHER ;
Code	rhsContext context = Context.OTHER ;
Distance : 6

262
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ;
Distance : 4

263
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

264
Tree	Context rhsContext = new rhsContext () ; of
Code	Context rhsContext = new rhsContext () ; of
Distance : 5

265
Tree	Context rhsContext [] = context ;
Code	Context rhsContext [] = context ;
Distance : 4

266
Tree	Context rhsContext = super . Context.OTHER () ; node
Code	Context rhsContext = super . Context.OTHER () ; node
Distance : 5

267
Tree	Context context = this . rhsContext ;
Code	Context context = this . rhsContext ;
Distance : 5

268
Tree	Context context = default: ;
Code	Context context = default: ;
Distance : 5

269
Tree	Context rhsContext = this . context ;
Code	Context rhsContext = this . context ;
Distance : 3

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 380
Wrong
========================================================================
False

0
Tree	{ return true ; }
Code	{ return true ; }
Distance : 11

1
Tree	{ return EvalMode.NORMAL ; }
Code	{ return EvalMode.NORMAL ; }
Distance : 11

2
Tree	{ return Format.PRETTY ; }
Code	{ return Format.PRETTY ; }
Distance : 11

3
Tree	{ return Format.TYPED ; }
Code	{ return Format.TYPED ; }
Distance : 11

4
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 11

5
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 11

6
Tree	{ return null ; }
Code	{ return null ; }
Distance : 11

7
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 11

8
Tree	{ return ( ARRAY_TYPE ) topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

9
Tree	static final boolean isAllType () { return ARRAY_TYPE ; }
Code	static final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

10
Tree	final abstract boolean isAllType () { return ARRAY_TYPE ; }
Code	final abstract boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

11
Tree	{ return getNativeType () ? break; : ARRAY_TYPE ; }
Code	{ return getNativeType () ? break; : ARRAY_TYPE ; }
Distance : 8

12
Tree	{ return ( topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 6

13
Tree	{ return getNativeType () ? default: : ARRAY_TYPE ; }
Code	{ return getNativeType () ? default: : ARRAY_TYPE ; }
Distance : 8

14
Tree	final final int isAllType () { return ARRAY_TYPE ; }
Code	final final int isAllType () { return ARRAY_TYPE ; }
Distance : 10

15
Tree	{ return ( topType ) { . isAllType () ; }
Code	{ return ( topType ) { . isAllType () ; }
Distance : 10

16
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Distance : 7

17
Tree	{ return ( topType . isAllType () ? null : topType ) ; }
Code	{ return ( topType . isAllType () ? null : topType ) ; }
Distance : 6

18
Tree	{ return ( topType ) ARRAY_TYPE . getNativeType () ; }
Code	{ return ( topType ) ARRAY_TYPE . getNativeType () ; }
Distance : 10

19
Tree	{ return ARRAY_TYPE ? topType . isAllType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? topType . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

20
Tree	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Distance : 10

21
Tree	{ return ARRAY_TYPE ? topType . getNativeType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? topType . getNativeType () : NUMBER_CONSTANT ; }
Distance : 9

22
Tree	{ return topType . getNativeType () ? null : topType ; }
Code	{ return topType . getNativeType () ? null : topType ; }
Distance : 5

23
Tree	final final boolean getNativeType () { return ARRAY_TYPE ; }
Code	final final boolean getNativeType () { return ARRAY_TYPE ; }
Distance : 11

24
Tree	{ return ( ARRAY_TYPE ) isAllType ( topType ) ; }
Code	{ return ( ARRAY_TYPE ) isAllType ( topType ) ; }
Distance : 9

25
Tree	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return topType . isAllType () ? null : ARRAY_TYPE ; }
Distance : 5

26
Tree	{ return isAllType () ? break; : ARRAY_TYPE ; }
Code	{ return isAllType () ? break; : ARRAY_TYPE ; }
Distance : 7

27
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Distance : 5

28
Tree	{ return isAllType () ? default: : ARRAY_TYPE ; }
Code	{ return isAllType () ? default: : ARRAY_TYPE ; }
Distance : 7

29
Tree	{ return topType ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Code	{ return topType ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

30
Tree	{ return topType ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Code	{ return topType ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Distance : 8

31
Tree	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( topType . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 5

32
Tree	final final boolean isAllType () { return topType ; }
Code	final final boolean isAllType () { return topType ; }
Distance : 10

33
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

34
Tree	protected boolean isAllType () { return ARRAY_TYPE ; }
Code	protected boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

35
Tree	{ return topType . getNativeType ( topType ) ; }
Code	{ return topType . getNativeType ( topType ) ; }
Distance : 6

36
Tree	{ return this . ARRAY_TYPE ; } false
Code	{ return this . ARRAY_TYPE ; } false
Distance : 10

37
Tree	{ return isAllType () ; } of
Code	{ return isAllType () ; } of
Distance : 10

38
Tree	{ return isAllType () ; } block
Code	{ return isAllType () ; } block
Distance : 10

39
Tree	{ return isAllType () ; } js
Code	{ return isAllType () ; } js
Distance : 10

40
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; } disableTypeCheck
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; } disableTypeCheck
Distance : 8

41
Tree	{ return this . ARRAY_TYPE . isAllType () ; } for
Code	{ return this . ARRAY_TYPE . isAllType () ; } for
Distance : 10

42
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; } TypeInferenceMode.CHECKED
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; } TypeInferenceMode.CHECKED
Distance : 8

43
Tree	{ return ARRAY_TYPE ; } node
Code	{ return ARRAY_TYPE ; } node
Distance : 11

44
Tree	{ return this . ARRAY_TYPE . isAllType () ; } lines
Code	{ return this . ARRAY_TYPE . isAllType () ; } lines
Distance : 10

45
Tree	{ return ARRAY_TYPE ; } js
Code	{ return ARRAY_TYPE ; } js
Distance : 11

46
Tree	{ return ARRAY_TYPE ; } >
Code	{ return ARRAY_TYPE ; } >
Distance : 11

47
Tree	{ return ARRAY_TYPE ; } setUp
Code	{ return ARRAY_TYPE ; } setUp
Distance : 11

48
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType ( topType ) ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType ( topType ) ; }
Distance : 9

49
Tree	{ return ARRAY_TYPE ; } block
Code	{ return ARRAY_TYPE ; } block
Distance : 11

50
Tree	{ return ARRAY_TYPE ; } checkNotNull
Code	{ return ARRAY_TYPE ; } checkNotNull
Distance : 11

51
Tree	{ return this . ARRAY_TYPE ; } block
Code	{ return this . ARRAY_TYPE ; } block
Distance : 10

52
Tree	{ return this . ARRAY_TYPE ; } js
Code	{ return this . ARRAY_TYPE ; } js
Distance : 10

53
Tree	{ return this . ARRAY_TYPE ; } >
Code	{ return this . ARRAY_TYPE ; } >
Distance : 10

54
Tree	{ return this . ARRAY_TYPE ; } setUp
Code	{ return this . ARRAY_TYPE ; } setUp
Distance : 10

55
Tree	{ return this . ARRAY_TYPE ; } node
Code	{ return this . ARRAY_TYPE ; } node
Distance : 10

56
Tree	{ return this . ARRAY_TYPE . isAllType () ; } Override
Code	{ return this . ARRAY_TYPE . isAllType () ; } Override
Distance : 10

57
Tree	public int isAllType () { return ARRAY_TYPE ; }
Code	public int isAllType () { return ARRAY_TYPE ; }
Distance : 10

58
Tree	private boolean isAllType () { return ARRAY_TYPE ; }
Code	private boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

59
Tree	final boolean isAllType () { return topType ; }
Code	final boolean isAllType () { return topType ; }
Distance : 10

60
Tree	{ return ( ARRAY_TYPE ) getNativeType ( topType ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( topType ) ; }
Distance : 8

61
Tree	final boolean getNativeType () { return ARRAY_TYPE ; }
Code	final boolean getNativeType () { return ARRAY_TYPE ; }
Distance : 11

62
Tree	{ return ARRAY_TYPE ; } false
Code	{ return ARRAY_TYPE ; } false
Distance : 11

63
Tree	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Distance : 10

64
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : topType ) ; }
Distance : 7

65
Tree	{ return ( ARRAY_TYPE ) topType . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) topType . isAllType () ; }
Distance : 10

66
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 11

67
Tree	{ return ARRAY_TYPE ? MatchResult.LOOSE_MATCH : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? MatchResult.LOOSE_MATCH : EvalMode.NORMAL ; }
Distance : 9

68
Tree	{ return ARRAY_TYPE ? EvalMode.NORMAL : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? EvalMode.NORMAL : EvalMode.NORMAL ; }
Distance : 9

69
Tree	{ return isAllType () ; }
Code	{ return isAllType () ; }
Distance : 9

70
Tree	{ return new ContextualRenamer < ARRAY_TYPE > () ; }
Code	{ return new ContextualRenamer < ARRAY_TYPE > () ; }
Distance : 10

71
Tree	{ return new InstrumentFunctions < ARRAY_TYPE > () ; }
Code	{ return new InstrumentFunctions < ARRAY_TYPE > () ; }
Distance : 10

72
Tree	{ return new CodingConvention < ARRAY_TYPE > () ; }
Code	{ return new CodingConvention < ARRAY_TYPE > () ; }
Distance : 10

73
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

74
Tree	{ return this . ARRAY_TYPE ; }
Code	{ return this . ARRAY_TYPE ; }
Distance : 9

75
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

76
Tree	{ return new ContextualRenamer ( this ) ; }
Code	{ return new ContextualRenamer ( this ) ; }
Distance : 9

77
Tree	{ return new InstrumentFunctions ( this ) ; }
Code	{ return new InstrumentFunctions ( this ) ; }
Distance : 9

78
Tree	{ return new CodingConvention ( this ) ; }
Code	{ return new CodingConvention ( this ) ; }
Distance : 9

79
Tree	{ return createEnumTypeFromNodes ; }
Code	{ return createEnumTypeFromNodes ; }
Distance : 11

80
Tree	{ return new ClosureBundler ( this ) ; }
Code	{ return new ClosureBundler ( this ) ; }
Distance : 9

81
Tree	{ return CallSiteType.DECOMPOSABLE_EXPRESSION ; }
Code	{ return CallSiteType.DECOMPOSABLE_EXPRESSION ; }
Distance : 11

82
Tree	{ return new CrossModuleCodeMotion ( this ) ; }
Code	{ return new CrossModuleCodeMotion ( this ) ; }
Distance : 9

83
Tree	{ return new ContextualRenameInverter ( this ) ; }
Code	{ return new ContextualRenameInverter ( this ) ; }
Distance : 9

84
Tree	{ return new RescopeGlobalSymbols ( this ) ; }
Code	{ return new RescopeGlobalSymbols ( this ) ; }
Distance : 9

85
Tree	{ return call.returnTypeInferred ; }
Code	{ return call.returnTypeInferred ; }
Distance : 11

86
Tree	{ return new Es7RewriteExponentialOperator ( this ) ; }
Code	{ return new Es7RewriteExponentialOperator ( this ) ; }
Distance : 9

87
Tree	{ return DecompositionType.UNDECOMPOSABLE ; }
Code	{ return DecompositionType.UNDECOMPOSABLE ; }
Distance : 11

88
Tree	{ return new ModulePath ( this ) ; }
Code	{ return new ModulePath ( this ) ; }
Distance : 9

89
Tree	{ return false ; }
Code	{ return false ; }
Distance : 11

90
Tree	{ return RemovalType.REMOVE_ALL ; }
Code	{ return RemovalType.REMOVE_ALL ; }
Distance : 11

91
Tree	{ return new ModulePath ( this . ARRAY_TYPE ) ; }
Code	{ return new ModulePath ( this . ARRAY_TYPE ) ; }
Distance : 9

92
Tree	{ return ARRAY_TYPE ? DecompositionType.UNDECOMPOSABLE : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? DecompositionType.UNDECOMPOSABLE : EvalMode.NORMAL ; }
Distance : 9

93
Tree	{ return ! this . ARRAY_TYPE ; }
Code	{ return ! this . ARRAY_TYPE ; }
Distance : 10

94
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 11

95
Tree	{ return this . ARRAY_TYPE ; } checkNotNull
Code	{ return this . ARRAY_TYPE ; } checkNotNull
Distance : 10

96
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType () ; }
Distance : 10

97
Tree	final final boolean isAllType () { return ARRAY_TYPE ; }
Code	final final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

98
Tree	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 5

99
Tree	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Distance : 6

100
Tree	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 6

101
Tree	{ return this . topType . getNativeType () ; }
Code	{ return this . topType . getNativeType () ; }
Distance : 9

102
Tree	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ) ; }
Distance : 6

103
Tree	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

104
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; }
Distance : 10

105
Tree	{ return ( topType ) isAllType () ; }
Code	{ return ( topType ) isAllType () ; }
Distance : 9

106
Tree	{ return this . topType . isAllType () ; }
Code	{ return this . topType . isAllType () ; }
Distance : 9

107
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ) ; }
Distance : 7

108
Tree	{ return ( topType ) getNativeType () ; }
Code	{ return ( topType ) getNativeType () ; }
Distance : 9

109
Tree	{ return topType . isAllType () ; }
Code	{ return topType . isAllType () ; }
Distance : 7

110
Tree	{ return ( ARRAY_TYPE ) isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) isAllType ( ARRAY_TYPE ) ; }
Distance : 8

111
Tree	{ return ARRAY_TYPE . getNativeType () ; }
Code	{ return ARRAY_TYPE . getNativeType () ; }
Distance : 9

112
Tree	{ return isAllType () ? null : topType ; }
Code	{ return isAllType () ? null : topType ; }
Distance : 6

113
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

114
Tree	{ super . getNativeType () ; }
Code	{ super . getNativeType () ; }
Distance : 10

115
Tree	{ return STRING_CONSTANT + getNativeType () ; }
Code	{ return STRING_CONSTANT + getNativeType () ; }
Distance : 10

116
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 11

117
Tree	{ return getNativeType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return getNativeType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

118
Tree	{ return getNativeType ( STRING_CONSTANT ) ; }
Code	{ return getNativeType ( STRING_CONSTANT ) ; }
Distance : 8

119
Tree	{ return super . isAllType () ; }
Code	{ return super . isAllType () ; }
Distance : 8

120
Tree	{ super . isAllType () ; }
Code	{ super . isAllType () ; }
Distance : 9

121
Tree	{ return getNativeType () ? null : topType ; }
Code	{ return getNativeType () ? null : topType ; }
Distance : 7

122
Tree	{ return true ; } of
Code	{ return true ; } of
Distance : 12

123
Tree	final boolean isAllType () { return this . ARRAY_TYPE ; }
Code	final boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

124
Tree	{ return true ; } js
Code	{ return true ; } js
Distance : 12

125
Tree	{ return isAllType ( STRING_CONSTANT ) ; } false
Code	{ return isAllType ( STRING_CONSTANT ) ; } false
Distance : 9

126
Tree	{ return ARRAY_TYPE . isAllType () ; } []
Code	{ return ARRAY_TYPE . isAllType () ; } []
Distance : 9

127
Tree	{ return null ; } get
Code	{ return null ; } get
Distance : 12

128
Tree	{ return ARRAY_TYPE . isAllType () ; } lines
Code	{ return ARRAY_TYPE . isAllType () ; } lines
Distance : 9

129
Tree	{ return STRING_CONSTANT ; } TypeInferenceMode.NEITHER
Code	{ return STRING_CONSTANT ; } TypeInferenceMode.NEITHER
Distance : 12

130
Tree	{ return STRING_CONSTANT ; } super
Code	{ return STRING_CONSTANT ; } super
Distance : 12

131
Tree	{ return STRING_CONSTANT ; } :
Code	{ return STRING_CONSTANT ; } :
Distance : 12

132
Tree	{ return STRING_CONSTANT ; } t
Code	{ return STRING_CONSTANT ; } t
Distance : 12

133
Tree	{ return STRING_CONSTANT ; } js
Code	{ return STRING_CONSTANT ; } js
Distance : 12

134
Tree	{ return STRING_CONSTANT ; } getParent
Code	{ return STRING_CONSTANT ; } getParent
Distance : 12

135
Tree	getNativeType () ; node
Code	getNativeType () ; node
Distance : 13

136
Tree	getNativeType () ; js
Code	getNativeType () ; js
Distance : 13

137
Tree	getNativeType () ; block
Code	getNativeType () ; block
Distance : 13

138
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } checkNotNull
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } checkNotNull
Distance : 10

139
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } false
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } false
Distance : 10

140
Tree	getNativeType () ; >
Code	getNativeType () ; >
Distance : 13

141
Tree	getNativeType () ; false
Code	getNativeType () ; false
Distance : 13

142
Tree	{ return NUMBER_CONSTANT ; } TypeInferenceMode.NEITHER
Code	{ return NUMBER_CONSTANT ; } TypeInferenceMode.NEITHER
Distance : 12

143
Tree	{ return true ; } setUp
Code	{ return true ; } setUp
Distance : 12

144
Tree	getNativeType () ; checkNotNull
Code	getNativeType () ; checkNotNull
Distance : 13

145
Tree	{ return ARRAY_TYPE ; } >
Code	{ return ARRAY_TYPE ; } >
Distance : 11

146
Tree	{ return true ; } false
Code	{ return true ; } false
Distance : 12

147
Tree	{ return ARRAY_TYPE ; } checkNotNull
Code	{ return ARRAY_TYPE ; } checkNotNull
Distance : 11

148
Tree	{ return ARRAY_TYPE ; } setUp
Code	{ return ARRAY_TYPE ; } setUp
Distance : 11

149
Tree	{ return ARRAY_TYPE ; } node
Code	{ return ARRAY_TYPE ; } node
Distance : 11

150
Tree	{ return true ; } node
Code	{ return true ; } node
Distance : 12

151
Tree	{ return ARRAY_TYPE ; } js
Code	{ return ARRAY_TYPE ; } js
Distance : 11

152
Tree	{ return null ; } Node
Code	{ return null ; } Node
Distance : 12

153
Tree	{ return null ; } for
Code	{ return null ; } for
Distance : 12

154
Tree	{ return isAllType ( STRING_CONSTANT ) ; } js
Code	{ return isAllType ( STRING_CONSTANT ) ; } js
Distance : 9

155
Tree	{ return isAllType ( STRING_CONSTANT ) ; } >
Code	{ return isAllType ( STRING_CONSTANT ) ; } >
Distance : 9

156
Tree	{ return isAllType ( STRING_CONSTANT ) ; } setUp
Code	{ return isAllType ( STRING_CONSTANT ) ; } setUp
Distance : 9

157
Tree	{ return isAllType ( STRING_CONSTANT ) ; } node
Code	{ return isAllType ( STRING_CONSTANT ) ; } node
Distance : 9

158
Tree	{ return isAllType ( STRING_CONSTANT ) ; } checkNotNull
Code	{ return isAllType ( STRING_CONSTANT ) ; } checkNotNull
Distance : 9

159
Tree	{ return true ; } checkNotNull
Code	{ return true ; } checkNotNull
Distance : 12

160
Tree	{ return isAllType ( STRING_CONSTANT ) ; } block
Code	{ return isAllType ( STRING_CONSTANT ) ; } block
Distance : 9

161
Tree	{ return ARRAY_TYPE ; } block
Code	{ return ARRAY_TYPE ; } block
Distance : 11

162
Tree	{ super . isAllType () ; } checkNotNull
Code	{ super . isAllType () ; } checkNotNull
Distance : 10

163
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType ( topType ) ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType ( topType ) ; }
Distance : 8

164
Tree	{ return ( ARRAY_TYPE ) { . isAllType ( topType ) ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType ( topType ) ; }
Distance : 9

165
Tree	{ super . isAllType () ; } node
Code	{ super . isAllType () ; } node
Distance : 10

166
Tree	final boolean isAllType () { return this . topType ; }
Code	final boolean isAllType () { return this . topType ; }
Distance : 10

167
Tree	public int isAllType () { return this . ARRAY_TYPE ; }
Code	public int isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

168
Tree	{ this . ARRAY_TYPE = Mode.ES8_OR_GREATER ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = Mode.ES8_OR_GREATER ; return ARRAY_TYPE ; }
Distance : 10

169
Tree	{ this . ARRAY_TYPE = DecompositionType.DECOMPOSABLE ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = DecompositionType.DECOMPOSABLE ; return ARRAY_TYPE ; }
Distance : 10

170
Tree	{ return ARRAY_TYPE . isAllType () ? default: : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? default: : ARRAY_TYPE ; }
Distance : 6

171
Tree	static boolean isAllType () { return this . ARRAY_TYPE ; }
Code	static boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

172
Tree	final byte isAllType () { return this . ARRAY_TYPE ; }
Code	final byte isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

173
Tree	static boolean isAllType () { return ARRAY_TYPE ; }
Code	static boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

174
Tree	super . isAllType () ;
Code	super . isAllType () ;
Distance : 11

175
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) getNativeType () ; }
Distance : 8

176
Tree	final byte isAllType () { return ARRAY_TYPE ; }
Code	final byte isAllType () { return ARRAY_TYPE ; }
Distance : 10

177
Tree	{ return ARRAY_TYPE . isAllType () ? break; : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? break; : ARRAY_TYPE ; }
Distance : 6

178
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

179
Tree	super . isAllType () ; false
Code	super . isAllType () ; false
Distance : 11

180
Tree	{ return ARRAY_TYPE ; } of
Code	{ return ARRAY_TYPE ; } of
Distance : 11

181
Tree	super . getNativeType () ;
Code	super . getNativeType () ;
Distance : 12

182
Tree	super . isAllType () ; checkNotNull
Code	super . isAllType () ; checkNotNull
Distance : 11

183
Tree	super . isAllType () ; node
Code	super . isAllType () ; node
Distance : 11

184
Tree	super . isAllType () ; setUp
Code	super . isAllType () ; setUp
Distance : 11

185
Tree	super . isAllType () ; >
Code	super . isAllType () ; >
Distance : 11

186
Tree	super . isAllType () ; js
Code	super . isAllType () ; js
Distance : 11

187
Tree	getNativeType () ; of
Code	getNativeType () ; of
Distance : 13

188
Tree	{ return this . ARRAY_TYPE . isAllType () ; }
Code	{ return this . ARRAY_TYPE . isAllType () ; }
Distance : 9

189
Tree	{ return this . ARRAY_TYPE ; } of
Code	{ return this . ARRAY_TYPE ; } of
Distance : 10

190
Tree	super . isAllType () ; block
Code	super . isAllType () ; block
Distance : 11

191
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } node
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } node
Distance : 10

192
Tree	super . isAllType () ; of
Code	super . isAllType () ; of
Distance : 11

193
Tree	{ return NUMBER_CONSTANT ; } checkNotNull
Code	{ return NUMBER_CONSTANT ; } checkNotNull
Distance : 12

194
Tree	{ return ARRAY_TYPE . isAllType () ; }
Code	{ return ARRAY_TYPE . isAllType () ; }
Distance : 8

195
Tree	final int isAllType () { return this . ARRAY_TYPE ; }
Code	final int isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

196
Tree	{ super . isAllType () ; } setUp
Code	{ super . isAllType () ; } setUp
Distance : 10

197
Tree	{ return getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return getNativeType () ? null : ARRAY_TYPE ; }
Distance : 8

198
Tree	{ this . ARRAY_TYPE = EvalMode.NORMAL ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = EvalMode.NORMAL ; return ARRAY_TYPE ; }
Distance : 10

199
Tree	{ this . ARRAY_TYPE = PropertyCollapseLevel.NONE ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = PropertyCollapseLevel.NONE ; return ARRAY_TYPE ; }
Distance : 10

200
Tree	{ return ARRAY_TYPE ? definitionsGatherer.definitions : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? definitionsGatherer.definitions : EvalMode.NORMAL ; }
Distance : 9

201
Tree	{ return ! isAllType () ; } false
Code	{ return ! isAllType () ; } false
Distance : 10

202
Tree	{ return ( ARRAY_TYPE ) isAllType () ; }
Code	{ return ( ARRAY_TYPE ) isAllType () ; }
Distance : 8

203
Tree	{ return new RescopeGlobalSymbols ( this . ARRAY_TYPE ) ; }
Code	{ return new RescopeGlobalSymbols ( this . ARRAY_TYPE ) ; }
Distance : 9

204
Tree	{ this . ARRAY_TYPE = ScopeType.EXEC_CONTEXT ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = ScopeType.EXEC_CONTEXT ; return ARRAY_TYPE ; }
Distance : 10

205
Tree	{ return NUMBER_CONSTANT ; } NUMBER_CONSTANT
Code	{ return NUMBER_CONSTANT ; } NUMBER_CONSTANT
Distance : 12

206
Tree	{ super . isAllType () ; } false
Code	{ super . isAllType () ; } false
Distance : 10

207
Tree	{ return ! isAllType () ; } checkNotNull
Code	{ return ! isAllType () ; } checkNotNull
Distance : 10

208
Tree	{ this . ARRAY_TYPE = current.parent ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = current.parent ; return ARRAY_TYPE ; }
Distance : 10

209
Tree	{ super . isAllType () ; } >
Code	{ super . isAllType () ; } >
Distance : 10

210
Tree	{ return STRING_CONSTANT + isAllType () ; } node
Code	{ return STRING_CONSTANT + isAllType () ; } node
Distance : 10

211
Tree	{ return isAllType () ? null : ARRAY_TYPE ; }
Code	{ return isAllType () ? null : ARRAY_TYPE ; }
Distance : 7

212
Tree	{ return STRING_CONSTANT + isAllType () ; } setUp
Code	{ return STRING_CONSTANT + isAllType () ; } setUp
Distance : 10

213
Tree	{ return ( ARRAY_TYPE . isAllType () ? default: : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? default: : ARRAY_TYPE ) ; }
Distance : 6

214
Tree	{ return STRING_CONSTANT + isAllType () ; } >
Code	{ return STRING_CONSTANT + isAllType () ; } >
Distance : 10

215
Tree	{ this . ARRAY_TYPE = EvalMode.EVAL ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = EvalMode.EVAL ; return ARRAY_TYPE ; }
Distance : 10

216
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } setUp
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } setUp
Distance : 10

217
Tree	{ return NUMBER_CONSTANT ; } setUp
Code	{ return NUMBER_CONSTANT ; } setUp
Distance : 12

218
Tree	{ return ( topType ) ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

219
Tree	{ return true ; } >
Code	{ return true ; } >
Distance : 12

220
Tree	{ this . ARRAY_TYPE = definitionsGatherer.definitions ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = definitionsGatherer.definitions ; return ARRAY_TYPE ; }
Distance : 10

221
Tree	{ super . isAllType () ; } js
Code	{ super . isAllType () ; } js
Distance : 10

222
Tree	{ super . isAllType () ; } block
Code	{ super . isAllType () ; } block
Distance : 10

223
Tree	{ return STRING_CONSTANT + isAllType () ; } js
Code	{ return STRING_CONSTANT + isAllType () ; } js
Distance : 10

224
Tree	{ return new ContextualRenameInverter ( this . ARRAY_TYPE ) ; }
Code	{ return new ContextualRenameInverter ( this . ARRAY_TYPE ) ; }
Distance : 9

225
Tree	{ return STRING_CONSTANT + isAllType () ; } false
Code	{ return STRING_CONSTANT + isAllType () ; } false
Distance : 10

226
Tree	{ return super . getNativeType () ; }
Code	{ return super . getNativeType () ; }
Distance : 9

227
Tree	{ return new CrossModuleCodeMotion ( this . ARRAY_TYPE ) ; }
Code	{ return new CrossModuleCodeMotion ( this . ARRAY_TYPE ) ; }
Distance : 9

228
Tree	{ return this . ARRAY_TYPE . getNativeType () ; }
Code	{ return this . ARRAY_TYPE . getNativeType () ; }
Distance : 9

229
Tree	{ this . ARRAY_TYPE = builder.removeUnusedStaticProperties ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = builder.removeUnusedStaticProperties ; return ARRAY_TYPE ; }
Distance : 10

230
Tree	{ return ( topType ) { . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) { . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

231
Tree	{ return ! isAllType () ; } node
Code	{ return ! isAllType () ; } node
Distance : 10

232
Tree	{ super . isAllType () ; } of
Code	{ super . isAllType () ; } of
Distance : 10

233
Tree	{ return STRING_CONSTANT + isAllType () ; } block
Code	{ return STRING_CONSTANT + isAllType () ; } block
Distance : 10

234
Tree	{ return super . isAllType () ; } false
Code	{ return super . isAllType () ; } false
Distance : 9

235
Tree	{ return STRING_CONSTANT + isAllType () ; } of
Code	{ return STRING_CONSTANT + isAllType () ; } of
Distance : 10

236
Tree	{ return ARRAY_TYPE ? BooleanLiteralSet.EMPTY : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? BooleanLiteralSet.EMPTY : EvalMode.NORMAL ; }
Distance : 9

237
Tree	{ return ARRAY_TYPE ? DecompositionType.DECOMPOSABLE : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? DecompositionType.DECOMPOSABLE : EvalMode.NORMAL ; }
Distance : 9

238
Tree	{ return ( ARRAY_TYPE . isAllType () ? break; : ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE . isAllType () ? break; : ARRAY_TYPE ) ; }
Distance : 6

239
Tree	{ return ! isAllType () ; } setUp
Code	{ return ! isAllType () ; } setUp
Distance : 10

240
Tree	{ return NUMBER_CONSTANT ; } getParent
Code	{ return NUMBER_CONSTANT ; } getParent
Distance : 12

241
Tree	{ return super . isAllType () ; } checkNotNull
Code	{ return super . isAllType () ; } checkNotNull
Distance : 9

242
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; } TypeInferenceMode.CHECKED
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; } TypeInferenceMode.CHECKED
Distance : 10

243
Tree	final boolean getNativeType () { return this . ARRAY_TYPE ; }
Code	final boolean getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

244
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; } disableTypeCheck
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; } disableTypeCheck
Distance : 10

245
Tree	protected boolean isAllType () { return this . ARRAY_TYPE ; }
Code	protected boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

246
Tree	{ return super . isAllType () ; } of
Code	{ return super . isAllType () ; } of
Distance : 9

247
Tree	{ this . ARRAY_TYPE = IncrementalCheckMode.GENERATE_IJS ; return ARRAY_TYPE ; }
Code	{ this . ARRAY_TYPE = IncrementalCheckMode.GENERATE_IJS ; return ARRAY_TYPE ; }
Distance : 10

248
Tree	{ return NUMBER_CONSTANT ; } js
Code	{ return NUMBER_CONSTANT ; } js
Distance : 12

249
Tree	{ return super . isAllType () ; } node
Code	{ return super . isAllType () ; } node
Distance : 9

250
Tree	{ return ARRAY_TYPE ? Mode.ES8_OR_GREATER : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? Mode.ES8_OR_GREATER : EvalMode.NORMAL ; }
Distance : 9

251
Tree	{ return ( topType . getNativeType () ? null : topType ) ; }
Code	{ return ( topType . getNativeType () ? null : topType ) ; }
Distance : 7

252
Tree	{ return getNativeType () ; }
Code	{ return getNativeType () ; }
Distance : 10

253
Tree	{ return ! isAllType () ; } >
Code	{ return ! isAllType () ; } >
Distance : 10

254
Tree	{ return NUMBER_CONSTANT ; } t
Code	{ return NUMBER_CONSTANT ; } t
Distance : 12

255
Tree	{ return ARRAY_TYPE . isAllType () ; } Override
Code	{ return ARRAY_TYPE . isAllType () ; } Override
Distance : 9

256
Tree	private boolean isAllType () { return this . ARRAY_TYPE ; }
Code	private boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

257
Tree	{ return ! isAllType () ; } js
Code	{ return ! isAllType () ; } js
Distance : 10

258
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

259
Tree	{ return ( topType ) isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) isAllType ( ARRAY_TYPE ) ; }
Distance : 7

260
Tree	{ return isAllType () ? return; : ARRAY_TYPE ; }
Code	{ return isAllType () ? return; : ARRAY_TYPE ; }
Distance : 7

261
Tree	{ return NUMBER_CONSTANT ; } :
Code	{ return NUMBER_CONSTANT ; } :
Distance : 12

262
Tree	{ return ARRAY_TYPE . isAllType () ; } for
Code	{ return ARRAY_TYPE . isAllType () ; } for
Distance : 9

263
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . getNativeType () : NUMBER_CONSTANT ; }
Distance : 9

264
Tree	{ return ! this . ARRAY_TYPE ; } false
Code	{ return ! this . ARRAY_TYPE ; } false
Distance : 11

265
Tree	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Distance : 6

266
Tree	{ return ! isAllType () ; } block
Code	{ return ! isAllType () ; } block
Distance : 10

267
Tree	{ return topType . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return topType . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 6

268
Tree	{ return ! this . ARRAY_TYPE ; } checkNotNull
Code	{ return ! this . ARRAY_TYPE ; } checkNotNull
Distance : 11

269
Tree	{ return ! isAllType () ; } of
Code	{ return ! isAllType () ; } of
Distance : 10

270
Tree	{ return STRING_CONSTANT ; } NUMBER_CONSTANT
Code	{ return STRING_CONSTANT ; } NUMBER_CONSTANT
Distance : 12

271
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

272
Tree	{ return ! this . ARRAY_TYPE ; } node
Code	{ return ! this . ARRAY_TYPE ; } node
Distance : 11

273
Tree	public final boolean isAllType () { return ARRAY_TYPE ; }
Code	public final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

274
Tree	{ return STRING_CONSTANT ; } setUp
Code	{ return STRING_CONSTANT ; } setUp
Distance : 12

275
Tree	{ return options.skipNonTranspilationPasses ; }
Code	{ return options.skipNonTranspilationPasses ; }
Distance : 11

276
Tree	{ return ARRAY_TYPE ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Code	{ return ARRAY_TYPE ? ARRAY_TYPE . isAllType () : NUMBER_CONSTANT ; }
Distance : 9

277
Tree	{ return new ClosureOptimizePrimitives ( this ) ; }
Code	{ return new ClosureOptimizePrimitives ( this ) ; }
Distance : 9

278
Tree	{ return topType . isAllType () ? null : topType ; }
Code	{ return topType . isAllType () ? null : topType ; }
Distance : 4

279
Tree	final final byte isAllType () { return ARRAY_TYPE ; }
Code	final final byte isAllType () { return ARRAY_TYPE ; }
Distance : 10

280
Tree	{ return ( topType ) getNativeType ( topType ) ; }
Code	{ return ( topType ) getNativeType ( topType ) ; }
Distance : 8

281
Tree	final boolean isAllType () { return ARRAY_TYPE ; }
Code	final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

282
Tree	{ return new Es7RewriteExponentialOperator ( this . ARRAY_TYPE ) ; }
Code	{ return new Es7RewriteExponentialOperator ( this . ARRAY_TYPE ) ; }
Distance : 9

283
Tree	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Distance : 7

284
Tree	protected final boolean isAllType () { return ARRAY_TYPE ; }
Code	protected final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

285
Tree	{ return ! this . ARRAY_TYPE ; } setUp
Code	{ return ! this . ARRAY_TYPE ; } setUp
Distance : 11

286
Tree	{ return topType ? topType . getNativeType () : NUMBER_CONSTANT ; }
Code	{ return topType ? topType . getNativeType () : NUMBER_CONSTANT ; }
Distance : 8

287
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

288
Tree	{ return ( topType ) isAllType ( topType ) ; }
Code	{ return ( topType ) isAllType ( topType ) ; }
Distance : 8

289
Tree	{ return topType ? topType . isAllType () : NUMBER_CONSTANT ; }
Code	{ return topType ? topType . isAllType () : NUMBER_CONSTANT ; }
Distance : 8

290
Tree	{ return ( topType ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 8

291
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 6

292
Tree	{ return new ModulePath ( ARRAY_TYPE ) ; }
Code	{ return new ModulePath ( ARRAY_TYPE ) ; }
Distance : 8

293
Tree	{ return ! this . topType ; }
Code	{ return ! this . topType ; }
Distance : 10

294
Tree	{ return topType . isAllType ( topType ) ; }
Code	{ return topType . isAllType ( topType ) ; }
Distance : 6

295
Tree	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : ARRAY_TYPE ; }
Distance : 7

296
Tree	private final boolean isAllType () { return ARRAY_TYPE ; }
Code	private final boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

297
Tree	{ return ARRAY_TYPE ? ScopeType.EXEC_CONTEXT : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? ScopeType.EXEC_CONTEXT : EvalMode.NORMAL ; }
Distance : 9

298
Tree	{ return new Es7RewriteExponentialOperator ( ARRAY_TYPE ) ; }
Code	{ return new Es7RewriteExponentialOperator ( ARRAY_TYPE ) ; }
Distance : 8

299
Tree	public boolean isAllType () { return ARRAY_TYPE ; }
Code	public boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

300
Tree	{ return true ; } block
Code	{ return true ; } block
Distance : 12

301
Tree	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return topType . getNativeType ( ARRAY_TYPE ) ; }
Distance : 5

302
Tree	{ return new ModulePath < ARRAY_TYPE > () ; }
Code	{ return new ModulePath < ARRAY_TYPE > () ; }
Distance : 10

303
Tree	{ return new Es7RewriteExponentialOperator < ARRAY_TYPE > () ; }
Code	{ return new Es7RewriteExponentialOperator < ARRAY_TYPE > () ; }
Distance : 10

304
Tree	{ return isAllType () ? continue; : ARRAY_TYPE ; }
Code	{ return isAllType () ? continue; : ARRAY_TYPE ; }
Distance : 7

305
Tree	{ return new RescopeGlobalSymbols < ARRAY_TYPE > () ; }
Code	{ return new RescopeGlobalSymbols < ARRAY_TYPE > () ; }
Distance : 10

306
Tree	{ return ( ARRAY_TYPE ) topType . getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) topType . getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

307
Tree	{ return new RescopeGlobalSymbols ( ARRAY_TYPE ) ; }
Code	{ return new RescopeGlobalSymbols ( ARRAY_TYPE ) ; }
Distance : 8

308
Tree	{ return new CrossModuleCodeMotion < ARRAY_TYPE > () ; }
Code	{ return new CrossModuleCodeMotion < ARRAY_TYPE > () ; }
Distance : 10

309
Tree	getNativeType () ;
Code	getNativeType () ;
Distance : 13

310
Tree	{ return ARRAY_TYPE . isAllType () ; } get
Code	{ return ARRAY_TYPE . isAllType () ; } get
Distance : 9

311
Tree	{ return new ContextualRenameInverter ( ARRAY_TYPE ) ; }
Code	{ return new ContextualRenameInverter ( ARRAY_TYPE ) ; }
Distance : 8

312
Tree	{ return new CrossModuleCodeMotion ( ARRAY_TYPE ) ; }
Code	{ return new CrossModuleCodeMotion ( ARRAY_TYPE ) ; }
Distance : 8

313
Tree	{ return new ClosureOptimizePrimitives ( ARRAY_TYPE ) ; }
Code	{ return new ClosureOptimizePrimitives ( ARRAY_TYPE ) ; }
Distance : 8

314
Tree	{ return this . topType ; }
Code	{ return this . topType ; }
Distance : 9

315
Tree	{ return new ContextualRenameInverter < ARRAY_TYPE > () ; }
Code	{ return new ContextualRenameInverter < ARRAY_TYPE > () ; }
Distance : 10

316
Tree	{ return new ClosureOptimizePrimitives < ARRAY_TYPE > () ; }
Code	{ return new ClosureOptimizePrimitives < ARRAY_TYPE > () ; }
Distance : 10

317
Tree	{ return new ClosureBundler ( ARRAY_TYPE ) ; }
Code	{ return new ClosureBundler ( ARRAY_TYPE ) ; }
Distance : 8

318
Tree	{ return topType . getNativeType () ; }
Code	{ return topType . getNativeType () ; }
Distance : 8

319
Tree	{ return new CodingConvention ( ARRAY_TYPE ) ; }
Code	{ return new CodingConvention ( ARRAY_TYPE ) ; }
Distance : 8

320
Tree	{ return new InstrumentFunctions ( ARRAY_TYPE ) ; }
Code	{ return new InstrumentFunctions ( ARRAY_TYPE ) ; }
Distance : 8

321
Tree	{ return new ClosureBundler < ARRAY_TYPE > () ; }
Code	{ return new ClosureBundler < ARRAY_TYPE > () ; }
Distance : 10

322
Tree	{ return ARRAY_TYPE ? EvalMode.EVAL : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? EvalMode.EVAL : EvalMode.NORMAL ; }
Distance : 9

323
Tree	{ return ( topType ) topType . getNativeType () ; }
Code	{ return ( topType ) topType . getNativeType () ; }
Distance : 10

324
Tree	{ return new ContextualRenamer ( ARRAY_TYPE ) ; }
Code	{ return new ContextualRenamer ( ARRAY_TYPE ) ; }
Distance : 8

325
Tree	{ return ! isAllType () ; }
Code	{ return ! isAllType () ; }
Distance : 9

326
Tree	{ return ARRAY_TYPE . isAllType () ; } pname
Code	{ return ARRAY_TYPE . isAllType () ; } pname
Distance : 9

327
Tree	{ return new ClosureBundler ( this . ARRAY_TYPE ) ; }
Code	{ return new ClosureBundler ( this . ARRAY_TYPE ) ; }
Distance : 9

328
Tree	{ return new ClosureOptimizePrimitives ( this . ARRAY_TYPE ) ; }
Code	{ return new ClosureOptimizePrimitives ( this . ARRAY_TYPE ) ; }
Distance : 9

329
Tree	{ return ARRAY_TYPE ? MatchResult.NO_MATCH : EvalMode.NORMAL ; }
Code	{ return ARRAY_TYPE ? MatchResult.NO_MATCH : EvalMode.NORMAL ; }
Distance : 9

330
Tree	{ return STRING_CONSTANT + isAllType () ; }
Code	{ return STRING_CONSTANT + isAllType () ; }
Distance : 9

331
Tree	isAllType () ;
Code	isAllType () ;
Distance : 12

332
Tree	{ return new CodingConvention ( this . ARRAY_TYPE ) ; }
Code	{ return new CodingConvention ( this . ARRAY_TYPE ) ; }
Distance : 9

333
Tree	{ return isAllType ( STRING_CONSTANT ) ; }
Code	{ return isAllType ( STRING_CONSTANT ) ; }
Distance : 8

334
Tree	{ return isAllType ( STRING_CONSTANT ) ; } of
Code	{ return isAllType ( STRING_CONSTANT ) ; } of
Distance : 9

335
Tree	public boolean isAllType () { return this . ARRAY_TYPE ; }
Code	public boolean isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

336
Tree	{ return new InstrumentFunctions ( this . ARRAY_TYPE ) ; }
Code	{ return new InstrumentFunctions ( this . ARRAY_TYPE ) ; }
Distance : 9

337
Tree	{ return new ContextualRenamer ( this . ARRAY_TYPE ) ; }
Code	{ return new ContextualRenamer ( this . ARRAY_TYPE ) ; }
Distance : 9

338
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

339
Tree	{ return ! getNativeType () ; }
Code	{ return ! getNativeType () ; }
Distance : 10

340
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 11

341
Tree	{ return this . ARRAY_TYPE . isAllType () ; } []
Code	{ return this . ARRAY_TYPE . isAllType () ; } []
Distance : 10

342
Tree	{ return ! this . ARRAY_TYPE ; } >
Code	{ return ! this . ARRAY_TYPE ; } >
Distance : 11

343
Tree	{ return ! this . ARRAY_TYPE ; } block
Code	{ return ! this . ARRAY_TYPE ; } block
Distance : 11

344
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } block
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } block
Distance : 10

345
Tree	{ return ! this . ARRAY_TYPE ; } of
Code	{ return ! this . ARRAY_TYPE ; } of
Distance : 11

346
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; } lines
Code	{ return ( ARRAY_TYPE ) getNativeType () ; } lines
Distance : 9

347
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; } Override
Code	{ return ( ARRAY_TYPE ) getNativeType () ; } Override
Distance : 9

348
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; } get
Code	{ return ( ARRAY_TYPE ) getNativeType () ; } get
Distance : 9

349
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; } for
Code	{ return ( ARRAY_TYPE ) getNativeType () ; } for
Distance : 9

350
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; } pname
Code	{ return ( ARRAY_TYPE ) getNativeType () ; } pname
Distance : 9

351
Tree	{ return ( ARRAY_TYPE ) getNativeType () ; } []
Code	{ return ( ARRAY_TYPE ) getNativeType () ; } []
Distance : 9

352
Tree	{ return ARRAY_TYPE ; } of
Code	{ return ARRAY_TYPE ; } of
Distance : 11

353
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 12

354
Tree	{ return ARRAY_TYPE ; } false
Code	{ return ARRAY_TYPE ; } false
Distance : 11

355
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; } disableTypeCheck
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; } disableTypeCheck
Distance : 11

356
Tree	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; } TypeInferenceMode.CHECKED
Code	{ return ( ARRAY_TYPE ) ARRAY_TYPE . isAllType () ; } TypeInferenceMode.CHECKED
Distance : 11

357
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; } TypeInferenceMode.CHECKED
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; } TypeInferenceMode.CHECKED
Distance : 7

358
Tree	{ return super . isAllType () ; } setUp
Code	{ return super . isAllType () ; } setUp
Distance : 9

359
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; } disableTypeCheck
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; } disableTypeCheck
Distance : 7

360
Tree	{ return this . ARRAY_TYPE . isAllType () ; } pname
Code	{ return this . ARRAY_TYPE . isAllType () ; } pname
Distance : 10

361
Tree	{ return super . isAllType () ; } >
Code	{ return super . isAllType () ; } >
Distance : 9

362
Tree	{ return super . isAllType () ; } js
Code	{ return super . isAllType () ; } js
Distance : 9

363
Tree	{ return isAllType () ; } false
Code	{ return isAllType () ; } false
Distance : 10

364
Tree	{ return isAllType () ; } checkNotNull
Code	{ return isAllType () ; } checkNotNull
Distance : 10

365
Tree	{ return isAllType () ; } node
Code	{ return isAllType () ; } node
Distance : 10

366
Tree	{ return super . isAllType () ; } block
Code	{ return super . isAllType () ; } block
Distance : 9

367
Tree	{ return isAllType () ; } setUp
Code	{ return isAllType () ; } setUp
Distance : 10

368
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } js
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } js
Distance : 10

369
Tree	{ return isAllType () ; } >
Code	{ return isAllType () ; } >
Distance : 10

370
Tree	{ return ! this . ARRAY_TYPE ; } js
Code	{ return ! this . ARRAY_TYPE ; } js
Distance : 11

371
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } >
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } >
Distance : 10

372
Tree	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } of
Code	{ return isAllType ( STRING_CONSTANT , STRING_CONSTANT ) ; } of
Distance : 10

373
Tree	{ return NUMBER_CONSTANT ; } super
Code	{ return NUMBER_CONSTANT ; } super
Distance : 12

374
Tree	getNativeType () ; setUp
Code	getNativeType () ; setUp
Distance : 13

375
Tree	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Code	{ return ( ARRAY_TYPE . getNativeType () ? null : topType ) ; }
Distance : 8

376
Tree	{ return STRING_CONSTANT ; } checkNotNull
Code	{ return STRING_CONSTANT ; } checkNotNull
Distance : 12

377
Tree	final int isAllType () { return ARRAY_TYPE ; }
Code	final int isAllType () { return ARRAY_TYPE ; }
Distance : 10

378
Tree	{ return this . ARRAY_TYPE . isAllType () ; } get
Code	{ return this . ARRAY_TYPE . isAllType () ; } get
Distance : 10

379
Tree	{ return STRING_CONSTANT + isAllType () ; } checkNotNull
Code	{ return STRING_CONSTANT + isAllType () ; } checkNotNull
Distance : 10

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 330
Wrong
========================================================================
False

0
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

1
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Distance : 13

2
Tree	{ if ( ! parent ) { return true ; } return false ; }
Code	{ if ( ! parent ) { return true ; } return false ; }
Distance : 13

3
Tree	{ if ( ! NodeUtil ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil ) { return true ; } return true ; }
Distance : 13

4
Tree	{ if ( parent != null ) { return true ; } return true ; }
Code	{ if ( parent != null ) { return true ; } return true ; }
Distance : 11

5
Tree	{ if ( NodeUtil != null ) { return true ; } return true ; }
Code	{ if ( NodeUtil != null ) { return true ; } return true ; }
Distance : 11

6
Tree	{ if ( ! NodeUtil ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false ; }
Distance : 13

7
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

8
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

9
Tree	{ if ( assignLhsChild != null ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return true ; }
Distance : 10

10
Tree	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 7

11
Tree	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 19

12
Tree	{ if ( ! parent ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! parent ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

13
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Distance : 18

14
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 17

15
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 4

16
Tree	{ if ( ! NodeUtil . isGet ( ) ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( ) ) ) { return true ; } return true ; }
Distance : 17

17
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } else }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } else }
Distance : 19

18
Tree	{ if ( ! parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

19
Tree	{ if ( ! NodeUtil . isGet ( parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , false ) ) { return true ; } return false ; }
Distance : 19

20
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , true ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , true ) ) { return true ; } return false ; }
Distance : 18

21
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } else }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } else }
Distance : 19

22
Tree	{ if ( ! parent . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return true ; }
Distance : 19

23
Tree	{ if ( ! isGet ( assignLhsChild , { , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , { , true ) ) { return true ; } return false ; }
Distance : 18

24
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

25
Tree	{ if ( ! isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

26
Tree	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 18

27
Tree	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return true ; }
Distance : 18

28
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return true ; }
Distance : 17

29
Tree	{ if ( ! isGet ( parent , NodeUtil , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil , true ) ) { return true ; } return false ; }
Distance : 19

30
Tree	{ if ( parent . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( parent . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

31
Tree	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

32
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return false ; }
Distance : 18

33
Tree	{ if ( ! NodeUtil . isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 19

34
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return false ; }
Distance : 20

35
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 16

36
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return true ; }
Distance : 19

37
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

38
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

39
Tree	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return true ; }
Distance : 19

40
Tree	{ if ( ! isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return false ; } return false ; }
Distance : 16

41
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return true ; } else }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return true ; } else }
Distance : 19

42
Tree	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return true ; }
Distance : 19

43
Tree	{ if ( ! this . isGet ( NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( NodeUtil ) ) { return false ; } return false ; }
Distance : 18

44
Tree	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

45
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

46
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } else }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } else }
Distance : 18

47
Tree	{ if ( ! parent . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return false ; }
Distance : 19

48
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 8

49
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return false ; } return false ; }
Distance : 18

50
Tree	{ if ( NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

51
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 6

52
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 10

53
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

54
Tree	{ if ( assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Distance : 15

55
Tree	{ if ( ! parent . isGet ( parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , true ) ) { return true ; } return false ; }
Distance : 19

56
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 18

57
Tree	{ if ( ! parent . isGet ( parent , inheritedPropDef.methodType ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , inheritedPropDef.methodType ) ) { return true ; } return false ; }
Distance : 19

58
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

59
Tree	{ if ( ! parent ) { return true ; } return isGet ( parent , parent . isGet ( ; ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( parent , parent . isGet ( ; ) ) ; }
Distance : 10

60
Tree	{ if ( ! parent . isGet ( parent , that.cache.functionScope ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , that.cache.functionScope ) ) { return true ; } return false ; }
Distance : 19

61
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return true ; }
Distance : 16

62
Tree	{ if ( ! parent . isGet ( NodeUtil ) ) { return true ; } else }
Code	{ if ( ! parent . isGet ( NodeUtil ) ) { return true ; } else }
Distance : 19

63
Tree	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 18

64
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 19

65
Tree	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 19

66
Tree	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return false ; }
Distance : 19

67
Tree	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 7

68
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } CHAR_CONS }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } CHAR_CONS }
Distance : 19

69
Tree	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return true ; } return true ; }
Distance : 19

70
Tree	{ if ( ! isGet ( parent , parent , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , parent , parent , true ) ) { return true ; } return true ; }
Distance : 20

71
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

72
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

73
Tree	{ if ( ! parent ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! parent ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 7

74
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return true ; }
Distance : 18

75
Tree	{ if ( ! isGet ( parent , parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent , true ) ) { return true ; } return false ; }
Distance : 20

76
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 18

77
Tree	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 4

78
Tree	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( ; ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( ; ) ; }
Distance : 6

79
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 16

80
Tree	{ if ( ! assignLhsChild . isGet ( parent , inheritedPropDef.methodType ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , inheritedPropDef.methodType ) ) { return true ; } return false ; }
Distance : 18

81
Tree	{ if ( ! assignLhsChild . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , PropAccess.INCLUDE_STRAY_PROPS ) ) { return true ; } return false ; }
Distance : 18

82
Tree	{ if ( ! parent . isGet ( parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , true ) ) { return true ; } return true ; }
Distance : 19

83
Tree	{ if ( ! parent . isGet ( parent , LanguageMode.NO_TRANSPILE ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , LanguageMode.NO_TRANSPILE ) ) { return true ; } return false ; }
Distance : 19

84
Tree	{ if ( ! parent . isGet ( parent , other.features ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , other.features ) ) { return true ; } return false ; }
Distance : 19

85
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil , true ) ) { return true ; } return false ; }
Distance : 19

86
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return true ; }
Distance : 17

87
Tree	{ if ( ! this . isGet ( parent ) ) { return false ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return false ; } return false ; }
Distance : 18

88
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Distance : 16

89
Tree	{ if ( parent != null ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( parent != null ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 5

90
Tree	{ if ( ! isGet ( parent , NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 19

91
Tree	{ if ( ! isGet ( this , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( this , parent ) ) { return true ; } return true ; }
Distance : 17

92
Tree	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Distance : 14

93
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

94
Tree	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 5

95
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return true ; } return false ; }
Distance : 19

96
Tree	{ if ( ! parent . isGet ( parent , EquivalenceMethod.DATA_FLOW ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , EquivalenceMethod.DATA_FLOW ) ) { return true ; } return false ; }
Distance : 19

97
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 17

98
Tree	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return false ; }
Distance : 18

99
Tree	{ if ( ! NodeUtil . isGet ( parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , true ) ) { return true ; } return false ; }
Distance : 19

100
Tree	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return false ; }
Distance : 19

101
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

102
Tree	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , false ) ) { return true ; } return false ; }
Distance : 19

103
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

104
Tree	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 5

105
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } else }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } else }
Distance : 19

106
Tree	{ if ( ! isGet ( NodeUtil , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , true ) ) { return true ; } return true ; }
Distance : 19

107
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 22

108
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return true ; }
Distance : 17

109
Tree	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 23

110
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

111
Tree	{ if ( ! parent ) { return true ; } return true ; }
Code	{ if ( ! parent ) { return true ; } return true ; }
Distance : 13

112
Tree	{ if ( ! assignLhsChild ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return true ; }
Distance : 13

113
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return true ; }
Distance : 16

114
Tree	{ if ( ! assignLhsChild . isGet ( parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , true ) ) { return true ; } return false ; }
Distance : 18

115
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 8

116
Tree	{ if ( NodeUtil != null ) { return false ; } return false ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false ; }
Distance : 12

117
Tree	{ if ( NodeUtil != null ) { return false ; } return true ; }
Code	{ if ( NodeUtil != null ) { return false ; } return true ; }
Distance : 12

118
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

119
Tree	{ if ( NodeUtil != break; ) { return true ; } return false ; }
Code	{ if ( NodeUtil != break; ) { return true ; } return false ; }
Distance : 12

120
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 10

121
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil , parent , true ) ) { return true ; } return false ; }
Distance : 20

122
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Distance : 16

123
Tree	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( != ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( != ) ; }
Distance : 8

124
Tree	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 5

125
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( NodeUtil . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( NodeUtil . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 10

126
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

127
Tree	{ if ( ! parent . isGet ( parent , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , NodeUtil ) ) { return true ; } return true ; }
Distance : 19

128
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

129
Tree	{ if ( ! isGet ( parent , NodeUtil , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil , parent , true ) ) { return true ; } return false ; }
Distance : 20

130
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , true ) ) { return true ; } return false ; }
Distance : 18

131
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 15

132
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

133
Tree	{ if ( ! parent . isGet ( parent , TernaryValue.TRUE ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , TernaryValue.TRUE ) ) { return true ; } return false ; }
Distance : 19

134
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

135
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

136
Tree	{ if ( ! NodeUtil . isGet ( != ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( != ) ) { return true ; } return false ; }
Distance : 16

137
Tree	{ if ( parent != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 9

138
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

139
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 8

140
Tree	{ if ( ! isGet ( parent , NodeUtil , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , NodeUtil , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 23

141
Tree	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

142
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return false ; }
Distance : 17

143
Tree	{ if ( ! isGet ( NodeUtil , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , true ) ) { return true ; } return false ; }
Distance : 19

144
Tree	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 10

145
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return true ; } return true ; }
Distance : 18

146
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , parent . isGet ( assignLhsChild ) ) ; }
Distance : 11

147
Tree	{ if ( ! isGet ( NodeUtil , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 23

148
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

149
Tree	{ if ( parent != null ) { return true ; } return parent . isGet ( ; ) ; }
Code	{ if ( parent != null ) { return true ; } return parent . isGet ( ; ) ; }
Distance : 6

150
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 22

151
Tree	{ if ( NodeUtil != null ) { return false ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( NodeUtil != null ) { return false ; } return NodeUtil . isGet ( parent ) ; }
Distance : 6

152
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( != ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( != ) ) ) { return true ; } return false ; }
Distance : 23

153
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 10

154
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , true ) ) { return true ; } return true ; }
Distance : 20

155
Tree	{ if ( ! isGet ( assignLhsChild , != ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , != ) ) { return true ; } return false ; }
Distance : 15

156
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( { ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( { ) ; }
Distance : 8

157
Tree	{ if ( ! parent ) { return true ; } return parent . isGet ( ; ) ; }
Code	{ if ( ! parent ) { return true ; } return parent . isGet ( ; ) ; }
Distance : 8

158
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil . isGet ( { ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil . isGet ( { ) , isGet () ) ; }
Distance : 12

159
Tree	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( NodeUtil ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return parent . isGet ( NodeUtil ) ; }
Distance : 8

160
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 10

161
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 21

162
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 10

163
Tree	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

164
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

165
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 9

166
Tree	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent ) ) { return true ; } return false ; }
Distance : 15

167
Tree	{ if ( parent != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 7

168
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 5

169
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

170
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

171
Tree	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

172
Tree	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 17

173
Tree	{ if ( ! NodeUtil ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil ) { return false ; } return false ; }
Distance : 14

174
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 10

175
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 10

176
Tree	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( != ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( != ) ) ) { return true ; } return false ; }
Distance : 21

177
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Distance : 9

178
Tree	{ if ( ! isGet ( assignLhsChild , LanguageMode.NO_TRANSPILE , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , LanguageMode.NO_TRANSPILE , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

179
Tree	{ if ( ! isGet ( NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil ) ) { return false ; } return false ; }
Distance : 16

180
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 22

181
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 11

182
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

183
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 17

184
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 9

185
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 12

186
Tree	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 23

187
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 7

188
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( NodeUtil ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( NodeUtil ) ) ; }
Distance : 10

189
Tree	{ if ( NodeUtil . isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( NodeUtil . isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 16

190
Tree	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 15

191
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 10

192
Tree	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return true ; }
Distance : 21

193
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( { ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( { ) ) ; }
Distance : 9

194
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 10

195
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return false ; }
Distance : 17

196
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } while }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } while }
Distance : 19

197
Tree	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( NodeUtil . isGet ( parent ) ) { return true ; } return true ; }
Distance : 16

198
Tree	{ if ( ! isGet ( NodeUtil , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , inheritedPropDef.methodType , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

199
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

200
Tree	{ if ( parent != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 11

201
Tree	{ if ( ! parent ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

202
Tree	{ if ( NodeUtil ) { return true ; } return isGet ( false , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil ) { return true ; } return isGet ( false , parent . isGet ( parent ) ) ; }
Distance : 9

203
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

204
Tree	{ if ( parent ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( parent ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 10

205
Tree	{ if ( ! assignLhsChild . isGet ( != ) ) { return true ; } else }
Code	{ if ( ! assignLhsChild . isGet ( != ) ) { return true ; } else }
Distance : 17

206
Tree	{ if ( parent != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 10

207
Tree	{ if ( ! NodeUtil . isGet ( != ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil . isGet ( != ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 10

208
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 8

209
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( != ) ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( != ) ) ) { return true ; } return true ; }
Distance : 21

210
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 10

211
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 10

212
Tree	{ if ( parent . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( parent . isGet ( parent ) ) { return true ; } return true ; }
Distance : 16

213
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , parent . isGet ( assignLhsChild ) ) ; }
Distance : 9

214
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return false ; }
Distance : 17

215
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 12

216
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

217
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

218
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 13

219
Tree	{ if ( parent != null ) { return true ; } return isGet ( parent , parent . isGet ( { ) ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( parent , parent . isGet ( { ) ) ; }
Distance : 8

220
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return false ; } return true ; }
Distance : 18

221
Tree	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( this , parent ) ) { return true ; } return false ; }
Distance : 17

222
Tree	{ if ( ! isGet ( assignLhsChild , Level.FINE , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , Level.FINE , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 21

223
Tree	{ if ( NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( return ) ) ; }
Code	{ if ( NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( return ) ) ; }
Distance : 10

224
Tree	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( null ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , inheritedPropDef.methodType , parent . isGet ( null ) ) ) { return true ; } return false ; }
Distance : 22

225
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return false ; } return true ; }
Distance : 18

226
Tree	{ if ( ! NodeUtil . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

227
Tree	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( this , assignLhsChild ) ) { return true ; } return true ; }
Distance : 17

228
Tree	{ if ( NodeUtil ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

229
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 11

230
Tree	{ if ( ! this . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! this . isGet ( parent ) ) { return true ; } return true ; }
Distance : 17

231
Tree	{ if ( ! NodeUtil . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 24

232
Tree	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( this , NodeUtil ) ) { return true ; } return true ; }
Distance : 17

233
Tree	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return false ; }
Distance : 15

234
Tree	{ if ( ! parent . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

235
Tree	{ if ( ! isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent ) ) { return true ; } return true ; }
Distance : 15

236
Tree	{ if ( ! NodeUtil ) { return false ; } return true ; }
Code	{ if ( ! NodeUtil ) { return false ; } return true ; }
Distance : 14

237
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

238
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Distance : 7

239
Tree	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! this . isGet ( NodeUtil ) ) { return true ; } return true ; }
Distance : 17

240
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 10

241
Tree	{ if ( ! parent ) { return false ; } return false ; }
Code	{ if ( ! parent ) { return false ; } return false ; }
Distance : 14

242
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 11

243
Tree	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return true ; }
Distance : 24

244
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

245
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

246
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

247
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 13

248
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 9

249
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 13

250
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 12

251
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 12

252
Tree	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 24

253
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 14

254
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 7

255
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

256
Tree	{ if ( ! isGet ( NodeUtil , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 23

257
Tree	{ if ( ! NodeUtil . isGet ( return ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil . isGet ( return ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

258
Tree	{ if ( parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

259
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

260
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 17

261
Tree	{ if ( ! parent ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 11

262
Tree	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil ) ) { return true ; } return true ; }
Distance : 15

263
Tree	{ if ( ! assignLhsChild . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

264
Tree	{ if ( assignLhsChild ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Distance : 8

265
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , isGet () ) ; }
Distance : 11

266
Tree	{ if ( ! parent ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( parent . isGet ( parent ) , isGet () ) ; }
Distance : 12

267
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

268
Tree	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , false , parent , parent , NUMBER_CONSTANT , assignLhsChild ) ) { return true ; } return false ; }
Distance : 24

269
Tree	{ if ( assignLhsChild != null ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return true ; }
Distance : 10

270
Tree	{ if ( NodeUtil != null ) { return false ; } return true ; }
Code	{ if ( NodeUtil != null ) { return false ; } return true ; }
Distance : 12

271
Tree	{ if ( parent != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 6

272
Tree	{ if ( ! assignLhsChild . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 22

273
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

274
Tree	{ if ( NodeUtil != null ) { return false ; } return false ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false ; }
Distance : 12

275
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , parent . isGet ( parent ) ) ; }
Distance : 8

276
Tree	{ if ( parent != null ) { return true ; } return true ; }
Code	{ if ( parent != null ) { return true ; } return true ; }
Distance : 11

277
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 11

278
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

279
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

280
Tree	{ if ( ! parent ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , isGet () ) ; }
Distance : 13

281
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 13

282
Tree	{ if ( ! NodeUtil . isGet ( != , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( != , true , parent , parent , NUMBER_CONSTANT , parent ) ) { return true ; } return false ; }
Distance : 23

283
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , parent . isGet ( parent ) ) ) { return true ; } return false ; }
Distance : 22

284
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

285
Tree	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

286
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

287
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent , true ) ) { return true ; } return true ; }
Distance : 20

288
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

289
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( ; , parent . isGet ( parent ) ) ; }
Distance : 13

290
Tree	{ if ( ! isGet ( assignLhsChild , != , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , != , parent ) ) { return true ; } return false ; }
Distance : 17

291
Tree	{ if ( NodeUtil != null ) { return true ; } return true ; }
Code	{ if ( NodeUtil != null ) { return true ; } return true ; }
Distance : 11

292
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( parent ) ) ; }
Distance : 10

293
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

294
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( != ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( != ) ) ; }
Distance : 11

295
Tree	{ if ( ! NodeUtil . isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 19

296
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent , true ) ) { return true ; } return false ; }
Distance : 20

297
Tree	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( ! this . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Distance : 18

298
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 11

299
Tree	{ if ( ! parent . isGet ( return ) ) { return true ; } else }
Code	{ if ( ! parent . isGet ( return ) ) { return true ; } else }
Distance : 19

300
Tree	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

301
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 13

302
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

303
Tree	{ if ( ! isGet ( NodeUtil , parent , parent , true ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent , true ) ) { return true ; } return true ; }
Distance : 20

304
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 7

305
Tree	{ if ( parent != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( parent ) ) ; }
Distance : 7

306
Tree	{ if ( ! parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! parent ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

307
Tree	{ if ( NodeUtil != break; ) { return true ; } return false ; }
Code	{ if ( NodeUtil != break; ) { return true ; } return false ; }
Distance : 12

308
Tree	{ if ( ! assignLhsChild . isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Distance : 18

309
Tree	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! isGet ( NodeUtil , parent ) ) { return true ; } return parent . isGet ( parent ) ; }
Distance : 11

310
Tree	{ if ( ! parent . isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( parent , NodeUtil ) ) { return true ; } return false ; }
Distance : 19

311
Tree	{ if ( ! isGet ( NodeUtil , parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent , true ) ) { return true ; } return false ; }
Distance : 20

312
Tree	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 5

313
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 10

314
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , parent . isGet ( parent ) ) ; }
Distance : 11

315
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , assignLhsChild . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , assignLhsChild . isGet ( parent ) ) ; }
Distance : 11

316
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , assignLhsChild . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , assignLhsChild . isGet ( parent ) ) ; }
Distance : 11

317
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( parent ) ) ; }
Distance : 11

318
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( assignLhsChild ) ) ; }
Distance : 9

319
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 12

320
Tree	{ if ( parent != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Code	{ if ( parent != null ) { return true ; } return isGet ( isGet () , NodeUtil . isGet ( assignLhsChild ) ) ; }
Distance : 8

321
Tree	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( ; ) ) ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return true ; } return isGet ( parent , parent . isGet ( ; ) ) ; }
Distance : 14

322
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return isGet ( parent , parent . isGet ( assignLhsChild ) ) ; }
Distance : 14

323
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( NodeUtil . isGet ( parent ) , NodeUtil . isGet ( parent ) ) ; }
Distance : 11

324
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( { ) , assignLhsChild . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( { ) , assignLhsChild . isGet ( assignLhsChild ) ) ; }
Distance : 12

325
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( isGet () , assignLhsChild . isGet ( parent ) ) ; }
Distance : 8

326
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , parent . isGet ( assignLhsChild ) ) ; }
Distance : 12

327
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , != . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , != . isGet ( assignLhsChild ) ) ; }
Distance : 12

328
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( assignLhsChild ) , NodeUtil . isGet ( parent ) ) ; }
Distance : 10

329
Tree	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( assignLhsChild ) ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return isGet ( parent . isGet ( parent ) , parent . isGet ( assignLhsChild ) ) ; }
Distance : 12

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 400
Correct
========================================================================
True

0
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

1
Tree	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

2
Tree	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

4
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

5
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

7
Tree	int RawNominalType [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int RawNominalType [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

8
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Distance : 5

9
Tree	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

10
Tree	int namespace = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

11
Tree	abstract boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	int indexOfDot = new ReferenceCollectingCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ReferenceCollectingCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

13
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 15

14
Tree	abstract byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

15
Tree	int VisibleForTesting [] = indexOf () ;
Code	int VisibleForTesting [] = indexOf () ;
Distance : 8

16
Tree	int ImmutableMultiset.Builder [] = indexOf () ;
Code	int ImmutableMultiset.Builder [] = indexOf () ;
Distance : 8

17
Tree	int exitCodeValue [] = indexOf () ;
Code	int exitCodeValue [] = indexOf () ;
Distance : 8

18
Tree	final byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

19
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

20
Tree	int RawNominalType [] = indexOf () ;
Code	int RawNominalType [] = indexOf () ;
Distance : 8

21
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

22
Tree	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

23
Tree	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 12

24
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

25
Tree	long namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

26
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 14

27
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 5

28
Tree	long namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

29
Tree	long namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 8

30
Tree	int indexOfDot = namespace . lastIndexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( false , namespace ) ;
Distance : 3

31
Tree	char indexOfDot = NUMBER_CONSTANT ;
Code	char indexOfDot = NUMBER_CONSTANT ;
Distance : 7

32
Tree	byte namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Code	byte namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 7

33
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

34
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

35
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

36
Tree	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

37
Tree	abstract boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

38
Tree	int getPropTypeHelper [] = namespace ( namespace ) ;
Code	int getPropTypeHelper [] = namespace ( namespace ) ;
Distance : 5

39
Tree	abstract byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

40
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

41
Tree	final byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

42
Tree	int namespace = namespace . indexOf ( false , namespace ) ;
Code	int namespace = namespace . indexOf ( false , namespace ) ;
Distance : 5

43
Tree	int ModulePath [] = indexOf () ;
Code	int ModulePath [] = indexOf () ;
Distance : 8

44
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

45
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

46
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

47
Tree	int namespace = RandomNameGenerator.FIRST_CHAR ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR ;
Distance : 7

48
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

49
Tree	int IdentifierToken [] = indexOf () ;
Code	int IdentifierToken [] = indexOf () ;
Distance : 8

50
Tree	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Distance : 3

51
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

52
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

53
Tree	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

54
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

55
Tree	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

56
Tree	byte namespace ;
Code	byte namespace ;
Distance : 8

57
Tree	int ParseResult [] = indexOf () ;
Code	int ParseResult [] = indexOf () ;
Distance : 8

58
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

59
Tree	int namespace = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

60
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

61
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

62
Tree	int indexOfDot = pair.env ;
Code	int indexOfDot = pair.env ;
Distance : 6

63
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

64
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 5

65
Tree	int indexOfDot = buildNameDeclarationStatement ;
Code	int indexOfDot = buildNameDeclarationStatement ;
Distance : 6

66
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 4

67
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

68
Tree	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Code	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Distance : 7

69
Tree	int namespace = false ;
Code	int namespace = false ;
Distance : 7

70
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

71
Tree	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

72
Tree	long namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	long namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 12

73
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

74
Tree	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 4

75
Tree	int namespace = namespace . indexOf ( true , namespace ) ;
Code	int namespace = namespace . indexOf ( true , namespace ) ;
Distance : 5

76
Tree	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Distance : 3

77
Tree	int namespace = namespace . lastIndexOf ( namespace , null ) ;
Code	int namespace = namespace . lastIndexOf ( namespace , null ) ;
Distance : 4

78
Tree	int indexOfDot = Mode.ES8_OR_GREATER ;
Code	int indexOfDot = Mode.ES8_OR_GREATER ;
Distance : 6

79
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Distance : 12

80
Tree	int indexOfDot = BASE64_DECODE_MAP ;
Code	int indexOfDot = BASE64_DECODE_MAP ;
Distance : 6

81
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

82
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

83
Tree	int RawNominalType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int RawNominalType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

84
Tree	int ModulePath [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ModulePath [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

85
Tree	final boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

86
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

87
Tree	int namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

88
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

89
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

90
Tree	int indexOfDot = indexOf ;
Code	int indexOfDot = indexOf ;
Distance : 6

91
Tree	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 4

92
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

93
Tree	int namespace = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

94
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

95
Tree	int IdentifierToken [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int IdentifierToken [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

96
Tree	int ModulePath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ModulePath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

97
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 3

98
Tree	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

99
Tree	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

100
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 13

101
Tree	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	int namespace = namespace . lastIndexOf ( false , namespace ) ;
Code	int namespace = namespace . lastIndexOf ( false , namespace ) ;
Distance : 4

103
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

104
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Distance : 3

105
Tree	int namespace ;
Code	int namespace ;
Distance : 7

106
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Distance : 12

107
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 6

108
Tree	abstract byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

109
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

110
Tree	int TypeTransformation [] = indexOf () ;
Code	int TypeTransformation [] = indexOf () ;
Distance : 8

111
Tree	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

112
Tree	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

113
Tree	byte indexOfDot = true ;
Code	byte indexOfDot = true ;
Distance : 7

114
Tree	char namespace = NUMBER_CONSTANT ;
Code	char namespace = NUMBER_CONSTANT ;
Distance : 8

115
Tree	long namespace = namespace ;
Code	long namespace = namespace ;
Distance : 7

116
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	byte namespace = false ;
Code	byte namespace = false ;
Distance : 8

119
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

120
Tree	int namespace = namespace ( namespace , namespace , ( , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , ( , namespace ) ;
Distance : 8

121
Tree	char indexOfDot = null ;
Code	char indexOfDot = null ;
Distance : 7

122
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME ) ;
Distance : 13

123
Tree	long namespace = null ;
Code	long namespace = null ;
Distance : 8

124
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

125
Tree	boolean namespace = null ;
Code	boolean namespace = null ;
Distance : 8

126
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

127
Tree	long namespace = CHAR_CONS ;
Code	long namespace = CHAR_CONS ;
Distance : 7

128
Tree	int indexOfDot = TemplateAstMatcher ;
Code	int indexOfDot = TemplateAstMatcher ;
Distance : 6

129
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

130
Tree	char namespace = namespace ;
Code	char namespace = namespace ;
Distance : 7

131
Tree	int testObjectDefineProperties4 [] = indexOf () ;
Code	int testObjectDefineProperties4 [] = indexOf () ;
Distance : 8

132
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

133
Tree	long namespace = namespace . indexOf ( namespace , null ) ;
Code	long namespace = namespace . indexOf ( namespace , null ) ;
Distance : 6

134
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getTypedefType ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getTypedefType ) ;
Distance : 12

135
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

136
Tree	long namespace = NUMBER_CONSTANT ;
Code	long namespace = NUMBER_CONSTANT ;
Distance : 8

137
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 6

138
Tree	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

139
Tree	char indexOfDot ;
Code	char indexOfDot ;
Distance : 8

140
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

141
Tree	int IdentifierToken [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int IdentifierToken [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

142
Tree	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

143
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

144
Tree	byte indexOfDot = CHAR_CONS ;
Code	byte indexOfDot = CHAR_CONS ;
Distance : 6

145
Tree	boolean namespace = namespace ;
Code	boolean namespace = namespace ;
Distance : 7

146
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR ) ;
Distance : 13

147
Tree	int indexOfDot = namespace ( namespace , namespace , . , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , . , namespace ) ;
Distance : 8

148
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , RandomNameGenerator.FIRST_CHAR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , RandomNameGenerator.FIRST_CHAR ) ;
Distance : 13

149
Tree	abstract boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

150
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

151
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , BaseTranspiler.CompileResult ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , BaseTranspiler.CompileResult ) ;
Distance : 13

152
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

153
Tree	int ParseResult [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ParseResult [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

154
Tree	char indexOfDot = CHAR_CONS ;
Code	char indexOfDot = CHAR_CONS ;
Distance : 6

155
Tree	byte indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	byte indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

156
Tree	long namespace = false ;
Code	long namespace = false ;
Distance : 8

157
Tree	int namespace = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Code	int namespace = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Distance : 2

158
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , false ) ;
Distance : 14

159
Tree	int indexOfDot = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Code	int indexOfDot = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Distance : 5

160
Tree	byte namespace = CHAR_CONS ;
Code	byte namespace = CHAR_CONS ;
Distance : 7

161
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

162
Tree	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

163
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Distance : 15

164
Tree	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

165
Tree	int indexOfDot = super ;
Code	int indexOfDot = super ;
Distance : 6

166
Tree	byte namespace = namespace . indexOf ( true , namespace ) ;
Code	byte namespace = namespace . indexOf ( true , namespace ) ;
Distance : 6

167
Tree	char namespace = this . namespace ;
Code	char namespace = this . namespace ;
Distance : 7

168
Tree	byte namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Code	byte namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 7

169
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

170
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Distance : 15

171
Tree	int namespace = lastCompiler ;
Code	int namespace = lastCompiler ;
Distance : 7

172
Tree	static indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	static indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

173
Tree	byte indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

174
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

175
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

176
Tree	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

177
Tree	long namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	long namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 10

178
Tree	byte indexOfDot = namespace ( namespace , namespace , indexOf , namespace ) ;
Code	byte indexOfDot = namespace ( namespace , namespace , indexOf , namespace ) ;
Distance : 9

179
Tree	byte namespace = namespace . indexOf ( false , namespace ) ;
Code	byte namespace = namespace . indexOf ( false , namespace ) ;
Distance : 6

180
Tree	int indexOfDot = getObjs ;
Code	int indexOfDot = getObjs ;
Distance : 6

181
Tree	byte indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Code	byte indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

182
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

183
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

184
Tree	byte indexOfDot = false ;
Code	byte indexOfDot = false ;
Distance : 7

185
Tree	long namespace = this . namespace ;
Code	long namespace = this . namespace ;
Distance : 7

186
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

187
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 3

188
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

189
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Distance : 1

190
Tree	int namespace = indexOf ( namespace , namespace , true , null , null ) ;
Code	int namespace = indexOf ( namespace , namespace , true , null , null ) ;
Distance : 11

191
Tree	int namespace = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Code	int namespace = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

192
Tree	int TypeTransformation [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int TypeTransformation [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

193
Tree	byte namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	byte namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 12

194
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 13

195
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 13

196
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

197
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

198
Tree	byte indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	byte indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

199
Tree	long namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	long namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

200
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

201
Tree	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Code	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Distance : 8

202
Tree	long indexOfDot = CHAR_CONS ;
Code	long indexOfDot = CHAR_CONS ;
Distance : 6

203
Tree	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Distance : 4

204
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

205
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

206
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Distance : 6

207
Tree	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

208
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.maxFunctionSizeAfterInlining ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.maxFunctionSizeAfterInlining ) ;
Distance : 14

209
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

210
Tree	char namespace = CHAR_CONS ;
Code	char namespace = CHAR_CONS ;
Distance : 7

211
Tree	abstract boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

212
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Distance : 14

213
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

214
Tree	int indexOfDot = indexOf . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = indexOf . indexOf ( STRING_CONSTANT ) ;
Distance : 3

215
Tree	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

216
Tree	int indexOfDot = lastCompiler ;
Code	int indexOfDot = lastCompiler ;
Distance : 6

217
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

218
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

219
Tree	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

220
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ResolutionMode.BROWSER ) ;
Distance : 14

221
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

222
Tree	int indexOfDot = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

223
Tree	int indexOfDot = TemplateAstMatcher ;
Code	int indexOfDot = TemplateAstMatcher ;
Distance : 6

224
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 13

225
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Distance : 14

226
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

227
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

228
Tree	int indexOfDot = true ;
Code	int indexOfDot = true ;
Distance : 6

229
Tree	int TypeTransformation [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int TypeTransformation [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

230
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Distance : 9

231
Tree	int testObjectDefineProperties4 [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int testObjectDefineProperties4 [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

232
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

233
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

234
Tree	int VisibleForTesting [] = namespace ( namespace ) ;
Code	int VisibleForTesting [] = namespace ( namespace ) ;
Distance : 5

235
Tree	NominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	NominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

236
Tree	int namespace = NUMBER_CONSTANT ;
Code	int namespace = NUMBER_CONSTANT ;
Distance : 7

237
Tree	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

238
Tree	abstract byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

239
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Distance : 9

240
Tree	int indexOfDot = Mode.ES8_OR_GREATER . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = Mode.ES8_OR_GREATER . indexOf ( STRING_CONSTANT ) ;
Distance : 3

241
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

242
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

243
Tree	int exitCodeValue [] = namespace ( namespace ) ;
Code	int exitCodeValue [] = namespace ( namespace ) ;
Distance : 5

244
Tree	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Code	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Distance : 5

245
Tree	abstract boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

246
Tree	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

247
Tree	int RawNominalType [] = namespace ( namespace ) ;
Code	int RawNominalType [] = namespace ( namespace ) ;
Distance : 5

248
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 15

249
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Distance : 9

250
Tree	int indexOfDot = super ;
Code	int indexOfDot = super ;
Distance : 6

251
Tree	int ModulePath [] = namespace ( namespace ) ;
Code	int ModulePath [] = namespace ( namespace ) ;
Distance : 5

252
Tree	char namespace ;
Code	char namespace ;
Distance : 8

253
Tree	int ParseResult [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ParseResult [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

254
Tree	byte namespace = NUMBER_CONSTANT ;
Code	byte namespace = NUMBER_CONSTANT ;
Distance : 8

255
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

256
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Distance : 9

257
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.collection ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.collection ) ;
Distance : 9

258
Tree	int namespace = CHAR_CONS ;
Code	int namespace = CHAR_CONS ;
Distance : 6

259
Tree	int namespace = this . namespace ;
Code	int namespace = this . namespace ;
Distance : 6

260
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

261
Tree	abstract boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

262
Tree	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

263
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Distance : 10

264
Tree	int namespace = null ;
Code	int namespace = null ;
Distance : 7

265
Tree	int IdentifierToken [] = namespace ( namespace ) ;
Code	int IdentifierToken [] = namespace ( namespace ) ;
Distance : 5

266
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Distance : 10

267
Tree	count indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	count indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

268
Tree	NominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	NominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

269
Tree	int namespace = true ;
Code	int namespace = true ;
Distance : 7

270
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

271
Tree	int indexOfDot = lastCompiler ;
Code	int indexOfDot = lastCompiler ;
Distance : 6

272
Tree	int namespace = lastCompiler ;
Code	int namespace = lastCompiler ;
Distance : 7

273
Tree	boolean namespace ;
Code	boolean namespace ;
Distance : 8

274
Tree	int indexOfDot = getObjs ;
Code	int indexOfDot = getObjs ;
Distance : 6

275
Tree	int testObjectDefineProperties4 [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int testObjectDefineProperties4 [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

276
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

277
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 9

278
Tree	abstract byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

279
Tree	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

280
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

281
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 9

282
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

283
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

284
Tree	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

285
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

286
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

287
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 14

288
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

289
Tree	int namespace = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

290
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

291
Tree	int ParseResult [] = namespace ( namespace ) ;
Code	int ParseResult [] = namespace ( namespace ) ;
Distance : 5

292
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Distance : 6

293
Tree	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

294
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

295
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

296
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

297
Tree	int indexOfDot = BASE64_DECODE_MAP . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = BASE64_DECODE_MAP . indexOf ( STRING_CONSTANT ) ;
Distance : 3

298
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Distance : 10

299
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

300
Tree	int namespace = namespace . indexOf ( namespace , null ) ;
Code	int namespace = namespace . indexOf ( namespace , null ) ;
Distance : 5

301
Tree	int indexOfDot = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

302
Tree	int TypeTransformation [] = namespace ( namespace ) ;
Code	int TypeTransformation [] = namespace ( namespace ) ;
Distance : 5

303
Tree	abstract namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

304
Tree	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 4

305
Tree	int namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

306
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

307
Tree	EnvTypePair namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	EnvTypePair namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

308
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Distance : 10

309
Tree	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

310
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 5

311
Tree	final boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

312
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

313
Tree	byte namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	byte namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 10

314
Tree	final namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

315
Tree	boolean namespace = CHAR_CONS ;
Code	boolean namespace = CHAR_CONS ;
Distance : 7

316
Tree	int indexOfDot = TypeTransformation ;
Code	int indexOfDot = TypeTransformation ;
Distance : 6

317
Tree	final byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

318
Tree	byte indexOfDot = namespace . indexOf ( true , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( true , namespace ) ;
Distance : 5

319
Tree	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

320
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

321
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 14

322
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

323
Tree	TemplateAstMatcher indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	TemplateAstMatcher indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

324
Tree	abstract byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

325
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 12

326
Tree	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 13

327
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

328
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Distance : 10

329
Tree	final indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

330
Tree	final namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

331
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , relationship.type ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , relationship.type ) ;
Distance : 12

332
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Distance : 12

333
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 5

334
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Distance : 13

335
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.RECORD ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.RECORD ) ;
Distance : 12

336
Tree	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 8

337
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 5

338
Tree	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Code	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Distance : 13

339
Tree	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

340
Tree	boolean namespace = this . namespace ;
Code	boolean namespace = this . namespace ;
Distance : 7

341
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

342
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

343
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Distance : 11

344
Tree	protected indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	protected indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

345
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Distance : 12

346
Tree	boolean namespace = NUMBER_CONSTANT ;
Code	boolean namespace = NUMBER_CONSTANT ;
Distance : 8

347
Tree	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

348
Tree	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

349
Tree	int namespace = lastIndexOf ( namespace , namespace , false , null , null ) ;
Code	int namespace = lastIndexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

350
Tree	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

351
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

352
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Distance : 12

353
Tree	boolean indexOfDot = CHAR_CONS ;
Code	boolean indexOfDot = CHAR_CONS ;
Distance : 6

354
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Distance : 12

355
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Distance : 12

356
Tree	int indexOfDot = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 9

357
Tree	int namespace = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

358
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

359
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

360
Tree	byte indexOfDot = this . namespace ;
Code	byte indexOfDot = this . namespace ;
Distance : 6

361
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

362
Tree	byte indexOfDot = namespace ;
Code	byte indexOfDot = namespace ;
Distance : 6

363
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

364
Tree	byte namespace = null ;
Code	byte namespace = null ;
Distance : 8

365
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.renamePrefixNamespaceAssumeCrossChunkNames ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.renamePrefixNamespaceAssumeCrossChunkNames ) ;
Distance : 14

366
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

367
Tree	long namespace ;
Code	long namespace ;
Distance : 8

368
Tree	byte namespace = this . namespace ;
Code	byte namespace = this . namespace ;
Distance : 7

369
Tree	byte namespace = namespace ;
Code	byte namespace = namespace ;
Distance : 7

370
Tree	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

371
Tree	int indexOfDot = pair.env . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = pair.env . indexOf ( STRING_CONSTANT ) ;
Distance : 3

372
Tree	final boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

373
Tree	int indexOfDot = new ModuleLoader ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ModuleLoader ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

374
Tree	int indexOfDot = buildNameDeclarationStatement . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = buildNameDeclarationStatement . indexOf ( STRING_CONSTANT ) ;
Distance : 3

375
Tree	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Distance : 4

376
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 14

377
Tree	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 15

378
Tree	char indexOfDot = this . namespace ;
Code	char indexOfDot = this . namespace ;
Distance : 6

379
Tree	int indexOfDot = indexOf ( namespace , namespace , true , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , true , null , null ) ;
Distance : 10

380
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 12

381
Tree	boolean indexOfDot = this . namespace ;
Code	boolean indexOfDot = this . namespace ;
Distance : 6

382
Tree	byte indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

383
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Distance : 14

384
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

385
Tree	byte namespace = namespace . indexOf ( namespace , null ) ;
Code	byte namespace = namespace . indexOf ( namespace , null ) ;
Distance : 6

386
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

387
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Distance : 14

388
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , false ) ;
Distance : 14

389
Tree	int indexOfDot = lastIndexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = lastIndexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

390
Tree	char indexOfDot = namespace ;
Code	char indexOfDot = namespace ;
Distance : 6

391
Tree	char namespace = null ;
Code	char namespace = null ;
Distance : 8

392
Tree	EnvTypePair indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	EnvTypePair indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

393
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , false ) ;
Distance : 14

394
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Distance : 13

395
Tree	byte namespace = true ;
Code	byte namespace = true ;
Distance : 8

396
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , true ) ;
Distance : 14

397
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 13

398
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

399
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Distance : 13

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 400
Correct
========================================================================
True

0
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

1
Tree	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

2
Tree	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int exitCodeValue [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int VisibleForTesting [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

4
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

5
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ImmutableMultiset.Builder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

7
Tree	int RawNominalType [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int RawNominalType [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

8
Tree	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Code	int RandomNameGenerator.FIRST_CHAR [] = namespace ( namespace ) ;
Distance : 5

9
Tree	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int exitCodeValue [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

10
Tree	int namespace = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

11
Tree	abstract boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	int indexOfDot = new ReferenceCollectingCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ReferenceCollectingCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

13
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 15

14
Tree	abstract byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

15
Tree	int VisibleForTesting [] = indexOf () ;
Code	int VisibleForTesting [] = indexOf () ;
Distance : 8

16
Tree	int ImmutableMultiset.Builder [] = indexOf () ;
Code	int ImmutableMultiset.Builder [] = indexOf () ;
Distance : 8

17
Tree	int exitCodeValue [] = indexOf () ;
Code	int exitCodeValue [] = indexOf () ;
Distance : 8

18
Tree	final byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

19
Tree	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

20
Tree	int RawNominalType [] = indexOf () ;
Code	int RawNominalType [] = indexOf () ;
Distance : 8

21
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

22
Tree	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

23
Tree	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 12

24
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

25
Tree	long namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

26
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 14

27
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 5

28
Tree	long namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

29
Tree	long namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 8

30
Tree	int indexOfDot = namespace . lastIndexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( false , namespace ) ;
Distance : 3

31
Tree	char indexOfDot = NUMBER_CONSTANT ;
Code	char indexOfDot = NUMBER_CONSTANT ;
Distance : 7

32
Tree	byte namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Code	byte namespace = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 7

33
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

34
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

35
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

36
Tree	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

37
Tree	abstract boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

38
Tree	int getPropTypeHelper [] = namespace ( namespace ) ;
Code	int getPropTypeHelper [] = namespace ( namespace ) ;
Distance : 5

39
Tree	abstract byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

40
Tree	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

41
Tree	final byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

42
Tree	int namespace = namespace . indexOf ( false , namespace ) ;
Code	int namespace = namespace . indexOf ( false , namespace ) ;
Distance : 5

43
Tree	int ModulePath [] = indexOf () ;
Code	int ModulePath [] = indexOf () ;
Distance : 8

44
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 2

45
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

46
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

47
Tree	int namespace = RandomNameGenerator.FIRST_CHAR ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR ;
Distance : 7

48
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

49
Tree	int IdentifierToken [] = indexOf () ;
Code	int IdentifierToken [] = indexOf () ;
Distance : 8

50
Tree	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = TypeTransformation . indexOf ( STRING_CONSTANT ) ;
Distance : 3

51
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

52
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

53
Tree	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

54
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

55
Tree	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

56
Tree	byte namespace ;
Code	byte namespace ;
Distance : 8

57
Tree	int ParseResult [] = indexOf () ;
Code	int ParseResult [] = indexOf () ;
Distance : 8

58
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

59
Tree	int namespace = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 4

60
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

61
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

62
Tree	int indexOfDot = pair.env ;
Code	int indexOfDot = pair.env ;
Distance : 6

63
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

64
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 5

65
Tree	int indexOfDot = buildNameDeclarationStatement ;
Code	int indexOfDot = buildNameDeclarationStatement ;
Distance : 6

66
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 4

67
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

68
Tree	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Code	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Distance : 7

69
Tree	int namespace = false ;
Code	int namespace = false ;
Distance : 7

70
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

71
Tree	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	int namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

72
Tree	long namespace = indexOf ( namespace , namespace , false , null , null ) ;
Code	long namespace = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 12

73
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

74
Tree	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 4

75
Tree	int namespace = namespace . indexOf ( true , namespace ) ;
Code	int namespace = namespace . indexOf ( true , namespace ) ;
Distance : 5

76
Tree	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . lastIndexOf ( namespace , null ) ;
Distance : 3

77
Tree	int namespace = namespace . lastIndexOf ( namespace , null ) ;
Code	int namespace = namespace . lastIndexOf ( namespace , null ) ;
Distance : 4

78
Tree	int indexOfDot = Mode.ES8_OR_GREATER ;
Code	int indexOfDot = Mode.ES8_OR_GREATER ;
Distance : 6

79
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Distance : 12

80
Tree	int indexOfDot = BASE64_DECODE_MAP ;
Code	int indexOfDot = BASE64_DECODE_MAP ;
Distance : 6

81
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

82
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

83
Tree	int RawNominalType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int RawNominalType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

84
Tree	int ModulePath [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ModulePath [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

85
Tree	final boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

86
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

87
Tree	int namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

88
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

89
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

90
Tree	int indexOfDot = indexOf ;
Code	int indexOfDot = indexOf ;
Distance : 6

91
Tree	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 4

92
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

93
Tree	int namespace = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

94
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

95
Tree	int IdentifierToken [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int IdentifierToken [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

96
Tree	int ModulePath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ModulePath [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

97
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR . indexOf ( STRING_CONSTANT ) ;
Distance : 3

98
Tree	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

99
Tree	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

100
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , InliningMode.DIRECT ) ;
Distance : 13

101
Tree	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 5

102
Tree	int namespace = namespace . lastIndexOf ( false , namespace ) ;
Code	int namespace = namespace . lastIndexOf ( false , namespace ) ;
Distance : 4

103
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

104
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Distance : 3

105
Tree	int namespace ;
Code	int namespace ;
Distance : 7

106
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Distance : 12

107
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 6

108
Tree	abstract byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

109
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

110
Tree	int TypeTransformation [] = indexOf () ;
Code	int TypeTransformation [] = indexOf () ;
Distance : 8

111
Tree	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

112
Tree	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

113
Tree	byte indexOfDot = true ;
Code	byte indexOfDot = true ;
Distance : 7

114
Tree	char namespace = NUMBER_CONSTANT ;
Code	char namespace = NUMBER_CONSTANT ;
Distance : 8

115
Tree	long namespace = namespace ;
Code	long namespace = namespace ;
Distance : 7

116
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	byte namespace = false ;
Code	byte namespace = false ;
Distance : 8

119
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

120
Tree	int namespace = namespace ( namespace , namespace , ( , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , ( , namespace ) ;
Distance : 8

121
Tree	char indexOfDot = null ;
Code	char indexOfDot = null ;
Distance : 7

122
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME ) ;
Distance : 13

123
Tree	long namespace = null ;
Code	long namespace = null ;
Distance : 8

124
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

125
Tree	boolean namespace = null ;
Code	boolean namespace = null ;
Distance : 8

126
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

127
Tree	long namespace = CHAR_CONS ;
Code	long namespace = CHAR_CONS ;
Distance : 7

128
Tree	int indexOfDot = TemplateAstMatcher ;
Code	int indexOfDot = TemplateAstMatcher ;
Distance : 6

129
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

130
Tree	char namespace = namespace ;
Code	char namespace = namespace ;
Distance : 7

131
Tree	int testObjectDefineProperties4 [] = indexOf () ;
Code	int testObjectDefineProperties4 [] = indexOf () ;
Distance : 8

132
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

133
Tree	long namespace = namespace . indexOf ( namespace , null ) ;
Code	long namespace = namespace . indexOf ( namespace , null ) ;
Distance : 6

134
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getTypedefType ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getTypedefType ) ;
Distance : 12

135
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

136
Tree	long namespace = NUMBER_CONSTANT ;
Code	long namespace = NUMBER_CONSTANT ;
Distance : 8

137
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 6

138
Tree	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

139
Tree	char indexOfDot ;
Code	char indexOfDot ;
Distance : 8

140
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

141
Tree	int IdentifierToken [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int IdentifierToken [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

142
Tree	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

143
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

144
Tree	byte indexOfDot = CHAR_CONS ;
Code	byte indexOfDot = CHAR_CONS ;
Distance : 6

145
Tree	boolean namespace = namespace ;
Code	boolean namespace = namespace ;
Distance : 7

146
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR ) ;
Distance : 13

147
Tree	int indexOfDot = namespace ( namespace , namespace , CHAR_CONS , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , CHAR_CONS , namespace ) ;
Distance : 7

148
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , RandomNameGenerator.FIRST_CHAR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , RandomNameGenerator.FIRST_CHAR ) ;
Distance : 13

149
Tree	abstract boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

150
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

151
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , BaseTranspiler.CompileResult ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , BaseTranspiler.CompileResult ) ;
Distance : 13

152
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

153
Tree	int ParseResult [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ParseResult [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

154
Tree	char indexOfDot = CHAR_CONS ;
Code	char indexOfDot = CHAR_CONS ;
Distance : 6

155
Tree	byte indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	byte indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

156
Tree	long namespace = false ;
Code	long namespace = false ;
Distance : 8

157
Tree	int namespace = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Code	int namespace = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Distance : 2

158
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , false ) ;
Distance : 14

159
Tree	int indexOfDot = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Code	int indexOfDot = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Distance : 5

160
Tree	byte namespace = CHAR_CONS ;
Code	byte namespace = CHAR_CONS ;
Distance : 7

161
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 14

162
Tree	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

163
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Distance : 15

164
Tree	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

165
Tree	int indexOfDot = super ;
Code	int indexOfDot = super ;
Distance : 6

166
Tree	byte namespace = namespace . indexOf ( true , namespace ) ;
Code	byte namespace = namespace . indexOf ( true , namespace ) ;
Distance : 6

167
Tree	char namespace = this . namespace ;
Code	char namespace = this . namespace ;
Distance : 7

168
Tree	byte namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Code	byte namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 7

169
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

170
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Distance : 15

171
Tree	int namespace = lastCompiler ;
Code	int namespace = lastCompiler ;
Distance : 7

172
Tree	static indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	static indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

173
Tree	byte indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

174
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

175
Tree	int indexOfDot = getShortNameForRequire ;
Code	int indexOfDot = getShortNameForRequire ;
Distance : 6

176
Tree	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

177
Tree	long namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	long namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 10

178
Tree	byte indexOfDot = namespace ( namespace , namespace , ) , namespace ) ;
Code	byte indexOfDot = namespace ( namespace , namespace , ) , namespace ) ;
Distance : 9

179
Tree	byte namespace = namespace . indexOf ( false , namespace ) ;
Code	byte namespace = namespace . indexOf ( false , namespace ) ;
Distance : 6

180
Tree	int indexOfDot = getObjs ;
Code	int indexOfDot = getObjs ;
Distance : 6

181
Tree	byte indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Code	byte indexOfDot = indexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

182
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

183
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

184
Tree	byte indexOfDot = false ;
Code	byte indexOfDot = false ;
Distance : 7

185
Tree	long namespace = this . namespace ;
Code	long namespace = this . namespace ;
Distance : 7

186
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

187
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , false ) ;
Distance : 3

188
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

189
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT ) ;
Distance : 1

190
Tree	int namespace = indexOf ( namespace , namespace , true , null , null ) ;
Code	int namespace = indexOf ( namespace , namespace , true , null , null ) ;
Distance : 11

191
Tree	int namespace = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Code	int namespace = lastIndexOf ( NUMBER_CONSTANT , true ) ;
Distance : 6

192
Tree	int TypeTransformation [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int TypeTransformation [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

193
Tree	byte namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	byte namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 12

194
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 13

195
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 13

196
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

197
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

198
Tree	byte indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	byte indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

199
Tree	long namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Code	long namespace = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 4

200
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

201
Tree	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Code	int RandomNameGenerator.FIRST_CHAR [] = indexOf () ;
Distance : 8

202
Tree	long indexOfDot = CHAR_CONS ;
Code	long indexOfDot = CHAR_CONS ;
Distance : 6

203
Tree	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( true , namespace ) ;
Distance : 4

204
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

205
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

206
Tree	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Code	int indexOfDot = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ;
Distance : 6

207
Tree	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

208
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.maxFunctionSizeAfterInlining ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.maxFunctionSizeAfterInlining ) ;
Distance : 14

209
Tree	int namespace = PeepholeFoldConstants ;
Code	int namespace = PeepholeFoldConstants ;
Distance : 7

210
Tree	char namespace = CHAR_CONS ;
Code	char namespace = CHAR_CONS ;
Distance : 7

211
Tree	abstract boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

212
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , true ) ;
Distance : 14

213
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

214
Tree	int indexOfDot = indexOf . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = indexOf . indexOf ( STRING_CONSTANT ) ;
Distance : 3

215
Tree	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

216
Tree	int indexOfDot = lastCompiler ;
Code	int indexOfDot = lastCompiler ;
Distance : 6

217
Tree	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

218
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

219
Tree	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

220
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ResolutionMode.BROWSER ) ;
Distance : 14

221
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

222
Tree	int indexOfDot = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new RandomNameGenerator.FIRST_CHAR ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

223
Tree	int indexOfDot = TemplateAstMatcher ;
Code	int indexOfDot = TemplateAstMatcher ;
Distance : 6

224
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 13

225
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , true ) ;
Distance : 14

226
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

227
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

228
Tree	int indexOfDot = true ;
Code	int indexOfDot = true ;
Distance : 6

229
Tree	int TypeTransformation [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int TypeTransformation [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

230
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Distance : 9

231
Tree	int testObjectDefineProperties4 [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int testObjectDefineProperties4 [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

232
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

233
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

234
Tree	int VisibleForTesting [] = namespace ( namespace ) ;
Code	int VisibleForTesting [] = namespace ( namespace ) ;
Distance : 5

235
Tree	NominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	NominalType indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

236
Tree	int namespace = NUMBER_CONSTANT ;
Code	int namespace = NUMBER_CONSTANT ;
Distance : 7

237
Tree	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

238
Tree	abstract byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

239
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Distance : 9

240
Tree	int indexOfDot = Mode.ES8_OR_GREATER . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = Mode.ES8_OR_GREATER . indexOf ( STRING_CONSTANT ) ;
Distance : 3

241
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

242
Tree	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

243
Tree	int exitCodeValue [] = namespace ( namespace ) ;
Code	int exitCodeValue [] = namespace ( namespace ) ;
Distance : 5

244
Tree	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Code	int ImmutableMultiset.Builder [] = namespace ( namespace ) ;
Distance : 5

245
Tree	abstract boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

246
Tree	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

247
Tree	int RawNominalType [] = namespace ( namespace ) ;
Code	int RawNominalType [] = namespace ( namespace ) ;
Distance : 5

248
Tree	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int namespace = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 15

249
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Distance : 9

250
Tree	int indexOfDot = super ;
Code	int indexOfDot = super ;
Distance : 6

251
Tree	int ModulePath [] = namespace ( namespace ) ;
Code	int ModulePath [] = namespace ( namespace ) ;
Distance : 5

252
Tree	char namespace ;
Code	char namespace ;
Distance : 8

253
Tree	int ParseResult [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ParseResult [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

254
Tree	byte namespace = NUMBER_CONSTANT ;
Code	byte namespace = NUMBER_CONSTANT ;
Distance : 8

255
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

256
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Distance : 9

257
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.collection ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , loopNode.collection ) ;
Distance : 9

258
Tree	int namespace = CHAR_CONS ;
Code	int namespace = CHAR_CONS ;
Distance : 6

259
Tree	int namespace = this . namespace ;
Code	int namespace = this . namespace ;
Distance : 6

260
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

261
Tree	abstract boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

262
Tree	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

263
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , SubtypingMode.NORMAL ) ;
Distance : 10

264
Tree	int namespace = null ;
Code	int namespace = null ;
Distance : 7

265
Tree	int IdentifierToken [] = namespace ( namespace ) ;
Code	int IdentifierToken [] = namespace ( namespace ) ;
Distance : 5

266
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , options.inlineLocalFunctions ) ;
Distance : 10

267
Tree	count indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	count indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

268
Tree	NominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	NominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

269
Tree	int namespace = true ;
Code	int namespace = true ;
Distance : 7

270
Tree	int indexOfDot = PeepholeFoldConstants ;
Code	int indexOfDot = PeepholeFoldConstants ;
Distance : 6

271
Tree	int indexOfDot = lastCompiler ;
Code	int indexOfDot = lastCompiler ;
Distance : 6

272
Tree	int namespace = lastCompiler ;
Code	int namespace = lastCompiler ;
Distance : 7

273
Tree	boolean namespace ;
Code	boolean namespace ;
Distance : 8

274
Tree	int indexOfDot = getObjs ;
Code	int indexOfDot = getObjs ;
Distance : 6

275
Tree	int testObjectDefineProperties4 [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int testObjectDefineProperties4 [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

276
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

277
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 9

278
Tree	abstract byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

279
Tree	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

280
Tree	int indexOfDot = CHAR_CONS ;
Code	int indexOfDot = CHAR_CONS ;
Distance : 5

281
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 9

282
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

283
Tree	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

284
Tree	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	abstract int namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

285
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

286
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

287
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 14

288
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

289
Tree	int namespace = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

290
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

291
Tree	int ParseResult [] = namespace ( namespace ) ;
Code	int ParseResult [] = namespace ( namespace ) ;
Distance : 5

292
Tree	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Code	int indexOfDot = RandomNameGenerator.FIRST_CHAR ;
Distance : 6

293
Tree	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	byte indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

294
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

295
Tree	int namespace = namespace ;
Code	int namespace = namespace ;
Distance : 6

296
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

297
Tree	int indexOfDot = BASE64_DECODE_MAP . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = BASE64_DECODE_MAP . indexOf ( STRING_CONSTANT ) ;
Distance : 3

298
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , loopNode.body ) ;
Distance : 10

299
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

300
Tree	int namespace = namespace . indexOf ( namespace , null ) ;
Code	int namespace = namespace . indexOf ( namespace , null ) ;
Distance : 5

301
Tree	int indexOfDot = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

302
Tree	int TypeTransformation [] = namespace ( namespace ) ;
Code	int TypeTransformation [] = namespace ( namespace ) ;
Distance : 5

303
Tree	abstract namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

304
Tree	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 4

305
Tree	int namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

306
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

307
Tree	EnvTypePair namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	EnvTypePair namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

308
Tree	int namespace = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Code	int namespace = namespace . indexOf ( this , namespace , indexOf () , RandomNameGenerator.NONFIRST_CHAR ) ;
Distance : 10

309
Tree	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int namespace = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 6

310
Tree	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Code	int indexOfDot = indexOf ( NUMBER_CONSTANT , false ) ;
Distance : 5

311
Tree	final boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final boolean namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

312
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

313
Tree	byte namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Code	byte namespace = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 10

314
Tree	final namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final namespace indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

315
Tree	boolean namespace = CHAR_CONS ;
Code	boolean namespace = CHAR_CONS ;
Distance : 7

316
Tree	int indexOfDot = TypeTransformation ;
Code	int indexOfDot = TypeTransformation ;
Distance : 6

317
Tree	final byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	final byte namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 9

318
Tree	byte indexOfDot = namespace . indexOf ( true , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( true , namespace ) ;
Distance : 5

319
Tree	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

320
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

321
Tree	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	int namespace = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 14

322
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

323
Tree	TemplateAstMatcher indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	TemplateAstMatcher indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

324
Tree	abstract byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

325
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 12

326
Tree	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 13

327
Tree	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 8

328
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Distance : 10

329
Tree	final indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

330
Tree	final namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	final namespace namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 4

331
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , relationship.type ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , relationship.type ) ;
Distance : 12

332
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Distance : 12

333
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 5

334
Tree	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , namespace . indexOf ( STRING_CONSTANT ) , NewTypeInference.NULLABLE_DEREFERENCE ) ;
Distance : 13

335
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.RECORD ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.RECORD ) ;
Distance : 12

336
Tree	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	byte namespace = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 8

337
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , true ) ;
Distance : 5

338
Tree	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Code	int namespace = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Distance : 13

339
Tree	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

340
Tree	boolean namespace = this . namespace ;
Code	boolean namespace = this . namespace ;
Distance : 7

341
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

342
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 12

343
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , indexOfDot , namespace ) ;
Distance : 11

344
Tree	protected indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	protected indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

345
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Distance : 12

346
Tree	boolean namespace = NUMBER_CONSTANT ;
Code	boolean namespace = NUMBER_CONSTANT ;
Distance : 8

347
Tree	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Code	long indexOfDot = namespace ( namespace , namespace , namespace , namespace ) ;
Distance : 9

348
Tree	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final indexOfDot indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

349
Tree	int namespace = lastIndexOf ( namespace , namespace , false , null , null ) ;
Code	int namespace = lastIndexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

350
Tree	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Code	long indexOfDot = indexOf ( namespace , namespace , false , null , null ) ;
Distance : 11

351
Tree	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 11

352
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , Ref.Type.PROTOTYPE_GET ) ;
Distance : 12

353
Tree	boolean indexOfDot = CHAR_CONS ;
Code	boolean indexOfDot = CHAR_CONS ;
Distance : 6

354
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , RandomNameGenerator.FIRST_CHAR ) ;
Distance : 12

355
Tree	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Code	int indexOfDot = indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace , ResolutionMode.BROWSER ) ;
Distance : 12

356
Tree	int indexOfDot = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 9

357
Tree	int namespace = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int namespace = namespace . lastIndexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

358
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

359
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

360
Tree	byte indexOfDot = this . namespace ;
Code	byte indexOfDot = this . namespace ;
Distance : 6

361
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

362
Tree	byte indexOfDot = namespace ;
Code	byte indexOfDot = namespace ;
Distance : 6

363
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

364
Tree	byte namespace = null ;
Code	byte namespace = null ;
Distance : 8

365
Tree	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.renamePrefixNamespaceAssumeCrossChunkNames ) ;
Code	int indexOfDot = new TypeTransformation ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.renamePrefixNamespaceAssumeCrossChunkNames ) ;
Distance : 14

366
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

367
Tree	long namespace ;
Code	long namespace ;
Distance : 8

368
Tree	byte namespace = this . namespace ;
Code	byte namespace = this . namespace ;
Distance : 7

369
Tree	byte namespace = namespace ;
Code	byte namespace = namespace ;
Distance : 7

370
Tree	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	RawNominalType namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

371
Tree	int indexOfDot = pair.env . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = pair.env . indexOf ( STRING_CONSTANT ) ;
Distance : 3

372
Tree	final boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final boolean namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

373
Tree	int indexOfDot = new ModuleLoader ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = new ModuleLoader ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

374
Tree	int indexOfDot = buildNameDeclarationStatement . indexOf ( STRING_CONSTANT ) ;
Code	int indexOfDot = buildNameDeclarationStatement . indexOf ( STRING_CONSTANT ) ;
Distance : 3

375
Tree	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Code	int namespace = GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE . indexOf ( STRING_CONSTANT ) ;
Distance : 4

376
Tree	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Code	int indexOfDot = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , options.inlineLocalFunctions ) ;
Distance : 14

377
Tree	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Code	int namespace = new TemplateAstMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , namespace , ModuleLoader.PathResolver.RELATIVE ) ;
Distance : 15

378
Tree	char indexOfDot = this . namespace ;
Code	char indexOfDot = this . namespace ;
Distance : 6

379
Tree	int indexOfDot = indexOf ( namespace , namespace , true , null , null ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , true , null , null ) ;
Distance : 10

380
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder ) ;
Distance : 12

381
Tree	boolean indexOfDot = this . namespace ;
Code	boolean indexOfDot = this . namespace ;
Distance : 6

382
Tree	byte indexOfDot = namespace . indexOf ( false , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( false , namespace ) ;
Distance : 5

383
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , true ) ;
Distance : 14

384
Tree	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , NUMBER_CONSTANT , namespace , namespace , namespace ) ;
Distance : 10

385
Tree	byte namespace = namespace . indexOf ( namespace , null ) ;
Code	byte namespace = namespace . indexOf ( namespace , null ) ;
Distance : 6

386
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT ) ;
Distance : 3

387
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity , false ) ;
Distance : 14

388
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE , false ) ;
Distance : 14

389
Tree	int indexOfDot = lastIndexOf ( namespace , namespace , false , null , null ) ;
Code	int indexOfDot = lastIndexOf ( namespace , namespace , false , null , null ) ;
Distance : 10

390
Tree	char indexOfDot = namespace ;
Code	char indexOfDot = namespace ;
Distance : 6

391
Tree	char namespace = null ;
Code	char namespace = null ;
Distance : 8

392
Tree	EnvTypePair indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	EnvTypePair indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

393
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , false ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf , false ) ;
Distance : 14

394
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , getMinArity ) ;
Distance : 13

395
Tree	byte namespace = true ;
Code	byte namespace = true ;
Distance : 8

396
Tree	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , true ) ;
Code	int indexOfDot = indexOf ( namespace , namespace , namespace , namespace , namespace , ImmutableMultiset.Builder , true ) ;
Distance : 14

397
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , Kind.INTERFACE ) ;
Distance : 13

398
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

399
Tree	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Code	int namespace = indexOf ( namespace , namespace , namespace , namespace , namespace , indexOf ) ;
Distance : 13

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 110
Wrong
========================================================================
False

0
Tree	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 7

1
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

2
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

3
Tree	OBJECT_TYPE = ( type ) typeRegistry . getNativeType ( typeRegistry )
Code	OBJECT_TYPE = ( type ) typeRegistry . getNativeType ( typeRegistry )
Distance : 10

4
Tree	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

5
Tree	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

6
Tree	! isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

7
Tree	type = ( type ) typeRegistry . getNativeType ( typeRegistry )
Code	type = ( type ) typeRegistry . getNativeType ( typeRegistry )
Distance : 9

8
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

9
Tree	! getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 7

10
Tree	! isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 6

11
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

12
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 8

13
Tree	! getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 8

14
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 4

15
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

16
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( currentScript.defaultExportLocalName )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( currentScript.defaultExportLocalName )
Distance : 6

17
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ()
Code	! type . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 9

18
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Distance : 6

19
Tree	typeRegistry = ( type ) type . getNativeType ( typeRegistry )
Code	typeRegistry = ( type ) type . getNativeType ( typeRegistry )
Distance : 11

20
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( Token.SUPER )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( Token.SUPER )
Distance : 6

21
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Distance : 6

22
Tree	type = ( type ) type . getNativeType ( typeRegistry )
Code	type = ( type ) type . getNativeType ( typeRegistry )
Distance : 10

23
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( Var.ARGUMENTS )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( Var.ARGUMENTS )
Distance : 6

24
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( FeatureSet.ES5 )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( FeatureSet.ES5 )
Distance : 6

25
Tree	! type . getNativeType ( typeRegistry )
Code	! type . getNativeType ( typeRegistry )
Distance : 9

26
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 6

27
Tree	! type . isSubtype ( getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( getNativeType ( typeRegistry ) )
Distance : 6

28
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ()
Code	! type . isSubtype ( typeRegistry ) . getNativeType ()
Distance : 8

29
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 4

30
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( currentScript.isModule )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( currentScript.isModule )
Distance : 6

31
Tree	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

32
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( BaseTranspiler.CompileResult )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( BaseTranspiler.CompileResult )
Distance : 6

33
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

34
Tree	OBJECT_TYPE = ( type ) type . getNativeType ( typeRegistry )
Code	OBJECT_TYPE = ( type ) type . getNativeType ( typeRegistry )
Distance : 11

35
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

36
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Distance : 5

37
Tree	! getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 7

38
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( UnrecognizedRequire )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( UnrecognizedRequire )
Distance : 6

39
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( Token.ROOT )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( Token.ROOT )
Distance : 6

40
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

41
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 8

42
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 6

43
Tree	! type . getNativeType ( getNativeType ( type ) )
Code	! type . getNativeType ( getNativeType ( type ) )
Distance : 7

44
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry ) )
Distance : 10

45
Tree	type = ( type ) typeRegistry . getNativeType ( OBJECT_TYPE )
Code	type = ( type ) typeRegistry . getNativeType ( OBJECT_TYPE )
Distance : 8

46
Tree	! type . getNativeType ( type )
Code	! type . getNativeType ( type )
Distance : 9

47
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Distance : 9

48
Tree	! type . isSubtype ( getNativeType ( type ) )
Code	! type . isSubtype ( getNativeType ( type ) )
Distance : 6

49
Tree	! typeRegistry . isSubtype ( typeRegistry )
Code	! typeRegistry . isSubtype ( typeRegistry )
Distance : 9

50
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( type ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( type ) ) )
Distance : 7

51
Tree	! type . getNativeType ( OBJECT_TYPE )
Code	! type . getNativeType ( OBJECT_TYPE )
Distance : 8

52
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

53
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( type ) )
Distance : 6

54
Tree	! type . isSubtype ( typeRegistry )
Code	! type . isSubtype ( typeRegistry )
Distance : 8

55
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

56
Tree	typeRegistry = ( type ) typeRegistry . getNativeType ( typeRegistry )
Code	typeRegistry = ( type ) typeRegistry . getNativeType ( typeRegistry )
Distance : 10

57
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Code	! type . isSubtype ( typeRegistry ) . getNativeType ( TernaryValue.UNKNOWN )
Distance : 6

58
Tree	! type . getNativeType ( getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( getNativeType ( typeRegistry ) )
Distance : 7

59
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Distance : 8

60
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

61
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

62
Tree	typeRegistry = ( type ) OBJECT_TYPE . getNativeType ( typeRegistry )
Code	typeRegistry = ( type ) OBJECT_TYPE . getNativeType ( typeRegistry )
Distance : 11

63
Tree	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

64
Tree	! type . isSubtype ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . isSubtype ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 9

65
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 4

66
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) , type )
Distance : 6

67
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) , type )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) , type )
Distance : 6

68
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , type )
Distance : 5

69
Tree	OBJECT_TYPE = ( type ) OBJECT_TYPE . getNativeType ( typeRegistry )
Code	OBJECT_TYPE = ( type ) OBJECT_TYPE . getNativeType ( typeRegistry )
Distance : 11

70
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Distance : 9

71
Tree	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

72
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 4

73
Tree	! type . isSubtype ( OBJECT_TYPE )
Code	! type . isSubtype ( OBJECT_TYPE )
Distance : 8

74
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) . getNativeType ()
Distance : 9

75
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 9

76
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

77
Tree	! type . isSubtype ( type )
Code	! type . isSubtype ( type )
Distance : 9

78
Tree	! typeRegistry . isSubtype ( getNativeType ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( getNativeType ( typeRegistry ) )
Distance : 7

79
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) , type )
Distance : 6

80
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

81
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

82
Tree	type = ( type ) OBJECT_TYPE . getNativeType ( typeRegistry )
Code	type = ( type ) OBJECT_TYPE . getNativeType ( typeRegistry )
Distance : 10

83
Tree	! type . getNativeType ( typeRegistry . getNativeType ( type ) , type )
Code	! type . getNativeType ( typeRegistry . getNativeType ( type ) , type )
Distance : 7

84
Tree	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( type ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( typeRegistry . getNativeType ( type ) ) )
Distance : 8

85
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

86
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) ) )
Distance : 7

87
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

88
Tree	( NUMBER_CONSTANT * type . isSubtype ( type . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( type . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

89
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 10

90
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) , type )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) , type )
Distance : 6

91
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 10

92
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Distance : 9

93
Tree	! type . getNativeType ( typeRegistry ) . isSubtype ()
Code	! type . getNativeType ( typeRegistry ) . isSubtype ()
Distance : 10

94
Tree	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

95
Tree	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 5

96
Tree	! type . restrictByNotNullOrUndefined ( type )
Code	! type . restrictByNotNullOrUndefined ( type )
Distance : 9

97
Tree	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) , type )
Code	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) , type )
Distance : 6

98
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) ) )
Distance : 8

99
Tree	! type . isSubtype ( typeRegistry ) . isSubtype ()
Code	! type . isSubtype ( typeRegistry ) . isSubtype ()
Distance : 9

100
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) , type )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) , type )
Distance : 6

101
Tree	( NUMBER_CONSTANT * type . isSubtype ( type ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( type ) )
Distance : 10

102
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

103
Tree	! type . isSubtype ( OBJECT_TYPE ) . getNativeType ()
Code	! type . isSubtype ( OBJECT_TYPE ) . getNativeType ()
Distance : 9

104
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Distance : 9

105
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( type ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( type ) )
Distance : 11

106
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

107
Tree	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 5

108
Tree	( NUMBER_CONSTANT * type . getNativeType ( type ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( type ) )
Distance : 10

109
Tree	( NUMBER_CONSTANT * typeRegistry . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * typeRegistry . isSubtype ( typeRegistry ) )
Distance : 9

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 280
Correct
========================================================================
True

0
Tree	return true ;
Code	return true ;
Distance : 1

1
Tree	return parent ;
Code	return parent ;
Distance : 1

2
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + parent ;
Distance : 7

3
Tree	return STRING_CONSTANT + expr + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + expr + STRING_CONSTANT + parent ;
Distance : 7

4
Tree	return elem ;
Code	return elem ;
Distance : 1

5
Tree	return return ;
Code	return return ;
Distance : 1

6
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + abstract ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + abstract ;
Distance : 7

7
Tree	return call ;
Code	return call ;
Distance : 1

8
Tree	return true ; setUp
Code	return true ; setUp
Distance : 2

9
Tree	return addingRoot ;
Code	return addingRoot ;
Distance : 1

10
Tree	return STRING_CONSTANT + abstract + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + abstract + STRING_CONSTANT + parent ;
Distance : 7

11
Tree	return parent . getParent () ? null : list ;
Code	return parent . getParent () ? null : list ;
Distance : 8

12
Tree	return this == parent ;
Code	return this == parent ;
Distance : 3

13
Tree	return STRING_CONSTANT + this + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + this + STRING_CONSTANT + parent ;
Distance : 7

14
Tree	return true ; >
Code	return true ; >
Distance : 2

15
Tree	return propType ;
Code	return propType ;
Distance : 1

16
Tree	return NUMBER_CONSTANT ; t
Code	return NUMBER_CONSTANT ; t
Distance : 2

17
Tree	return Iterables ;
Code	return Iterables ;
Distance : 1

18
Tree	return NUMBER_CONSTANT ; js
Code	return NUMBER_CONSTANT ; js
Distance : 2

19
Tree	return true ; node
Code	return true ; node
Distance : 2

20
Tree	return STRING_CONSTANT + expr + STRING_CONSTANT + abstract ;
Code	return STRING_CONSTANT + expr + STRING_CONSTANT + abstract ;
Distance : 7

21
Tree	return call . getParent () ? null : list ;
Code	return call . getParent () ? null : list ;
Distance : 8

22
Tree	return typeMap ;
Code	return typeMap ;
Distance : 1

23
Tree	return NUMBER_CONSTANT ; :
Code	return NUMBER_CONSTANT ; :
Distance : 2

24
Tree	return NUMBER_CONSTANT ; super
Code	return NUMBER_CONSTANT ; super
Distance : 2

25
Tree	return true ; checkNotNull
Code	return true ; checkNotNull
Distance : 2

26
Tree	return n ;
Code	return n ;
Distance : 1

27
Tree	return ! getProp ;
Code	return ! getProp ;
Distance : 2

28
Tree	return addingRoot + NUMBER_CONSTANT ;
Code	return addingRoot + NUMBER_CONSTANT ;
Distance : 3

29
Tree	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( replace ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( replace ) + STRING_CONSTANT ;
Distance : 10

30
Tree	return ! TypedScope ;
Code	return ! TypedScope ;
Distance : 2

31
Tree	return ! areIdentical ( tmp ) ;
Code	return ! areIdentical ( tmp ) ;
Distance : 5

32
Tree	return addingRoot + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return addingRoot + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

33
Tree	return call + get () ;
Code	return call + get () ;
Distance : 4

34
Tree	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( UNKNOWN ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( UNKNOWN ) + STRING_CONSTANT ;
Distance : 10

35
Tree	return STRING_CONSTANT + isLoose ( TYPE_BEFORE_CAST ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( TYPE_BEFORE_CAST ) + STRING_CONSTANT ;
Distance : 8

36
Tree	return ( typeMap ) that ( prop ) ;
Code	return ( typeMap ) that ( prop ) ;
Distance : 7

37
Tree	return STRING_CONSTANT + isFunctionDeclaration ( that ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isFunctionDeclaration ( that ) + STRING_CONSTANT ;
Distance : 8

38
Tree	return return + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return return + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

39
Tree	return ! isLoose ( ft ) ;
Code	return ! isLoose ( ft ) ;
Distance : 5

40
Tree	return call + ++ . substituteGenerics ( path ) ;
Code	return call + ++ . substituteGenerics ( path ) ;
Distance : 8

41
Tree	return n . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Code	return n . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

42
Tree	return n + NUMBER_CONSTANT ;
Code	return n + NUMBER_CONSTANT ;
Distance : 3

43
Tree	return new JSTypeExpression ( compiler ) ;
Code	return new JSTypeExpression ( compiler ) ;
Distance : 5

44
Tree	return new Token ( commonTypes ) ;
Code	return new Token ( commonTypes ) ;
Distance : 5

45
Tree	return new FlatFlowScopeCache ( commonTypes ) ;
Code	return new FlatFlowScopeCache ( commonTypes ) ;
Distance : 5

46
Tree	return call . getParent () . substituteGenerics == NUMBER_CONSTANT ;
Code	return call . getParent () . substituteGenerics == NUMBER_CONSTANT ;
Distance : 8

47
Tree	return NUMBER_CONSTANT ; TypeInferenceMode.NEITHER
Code	return NUMBER_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 2

48
Tree	return new Token ( allVarsInFn ) ;
Code	return new Token ( allVarsInFn ) ;
Distance : 5

49
Tree	return call + getInstanceType () ;
Code	return call + getInstanceType () ;
Distance : 4

50
Tree	return ! getMask ( that ) ;
Code	return ! getMask ( that ) ;
Distance : 5

51
Tree	return n + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return n + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

52
Tree	return call + replace . get ( sourceMapCache ) ;
Code	return call + replace . get ( sourceMapCache ) ;
Distance : 8

53
Tree	return new QualifiedName ( propType ) ;
Code	return new QualifiedName ( propType ) ;
Distance : 5

54
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( UNKNOWN ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( UNKNOWN ) + STRING_CONSTANT ;
Distance : 10

55
Tree	return call . get () . replace == NUMBER_CONSTANT ;
Code	return call . get () . replace == NUMBER_CONSTANT ;
Distance : 8

56
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( replace ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( replace ) + STRING_CONSTANT ;
Distance : 10

57
Tree	return call . getParent ( typeMap ) ? null : list ;
Code	return call . getParent ( typeMap ) ? null : list ;
Distance : 10

58
Tree	return parent . getParent ( path ) ? null : list ;
Code	return parent . getParent ( path ) ? null : list ;
Distance : 10

59
Tree	return getReferenceName () ? null : list ;
Code	return getReferenceName () ? null : list ;
Distance : 6

60
Tree	return getReferenceName () ? null : compilationParamsByGroup ;
Code	return getReferenceName () ? null : compilationParamsByGroup ;
Distance : 6

61
Tree	return ! String ;
Code	return ! String ;
Distance : 2

62
Tree	return STRING_CONSTANT + isLoose ( that ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( that ) + STRING_CONSTANT ;
Distance : 8

63
Tree	return call . substituteGenerics ( path ) ;
Code	return call . substituteGenerics ( path ) ;
Distance : 6

64
Tree	return ! Iterables ;
Code	return ! Iterables ;
Distance : 2

65
Tree	return bindComponents.thisValue ;
Code	return bindComponents.thisValue ;
Distance : 1

66
Tree	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

67
Tree	return this == State.DURING_RESOLUTION ;
Code	return this == State.DURING_RESOLUTION ;
Distance : 3

68
Tree	return parent ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ;
Code	return parent ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ;
Distance : 5

69
Tree	return call != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return call != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

70
Tree	return ! parent ;
Code	return ! parent ;
Distance : 2

71
Tree	return call + substituteGenerics () ;
Code	return call + substituteGenerics () ;
Distance : 4

72
Tree	return call . get ( path ) ? null : list ;
Code	return call . get ( path ) ? null : list ;
Distance : 10

73
Tree	return call . getParent ( UNKNOWN ) ;
Code	return call . getParent ( UNKNOWN ) ;
Distance : 6

74
Tree	return return . getParent () ? null : list ;
Code	return return . getParent () ? null : list ;
Distance : 8

75
Tree	return LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ;
Code	return LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ;
Distance : 1

76
Tree	return parent ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Code	return parent ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Distance : 5

77
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + STRICT_INEXISTENT_PROPERTY ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + STRICT_INEXISTENT_PROPERTY ;
Distance : 7

78
Tree	return parent ? currentScript.rootNode : FunctionFlavor.NORMAL ;
Code	return parent ? currentScript.rootNode : FunctionFlavor.NORMAL ;
Distance : 5

79
Tree	return compiler ;
Code	return compiler ;
Distance : 1

80
Tree	return parent ? State.RESOLVED : EvalMode.NORMAL ;
Code	return parent ? State.RESOLVED : EvalMode.NORMAL ;
Distance : 5

81
Tree	return ! getMask ( ft ) ;
Code	return ! getMask ( ft ) ;
Distance : 5

82
Tree	return parent . getParent ( typeMap ) ? null : list ;
Code	return parent . getParent ( typeMap ) ? null : list ;
Distance : 10

83
Tree	return ! call ;
Code	return ! call ;
Distance : 2

84
Tree	return call ? currentScript.rootNode : FunctionFlavor.NORMAL ;
Code	return call ? currentScript.rootNode : FunctionFlavor.NORMAL ;
Distance : 5

85
Tree	return call ? State.RESOLVED : FunctionFlavor.NORMAL ;
Code	return call ? State.RESOLVED : FunctionFlavor.NORMAL ;
Distance : 5

86
Tree	return CompilerOptions.LanguageMode.ECMASCRIPT_2015 ;
Code	return CompilerOptions.LanguageMode.ECMASCRIPT_2015 ;
Distance : 1

87
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + expr ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + expr ;
Distance : 7

88
Tree	return call . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Code	return call . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

89
Tree	return call ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Code	return call ? PropAccess.INCLUDE_STRAY_PROPS : FunctionFlavor.NORMAL ;
Distance : 5

90
Tree	return call + this . legacyNamespace . get ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . get ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

91
Tree	return call . get () . UNKNOWN == NUMBER_CONSTANT ;
Code	return call . get () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

92
Tree	return call + NUMBER_CONSTANT ;
Code	return call + NUMBER_CONSTANT ;
Distance : 3

93
Tree	return call + replace . get ( path ) ;
Code	return call + replace . get ( path ) ;
Distance : 8

94
Tree	return call + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return call + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

95
Tree	return call . substituteGenerics () ? null : list ;
Code	return call . substituteGenerics () ? null : list ;
Distance : 8

96
Tree	return call . getParent () ? null : isAbstract ;
Code	return call . getParent () ? null : isAbstract ;
Distance : 8

97
Tree	return call + ++ . get ( path ) ;
Code	return call + ++ . get ( path ) ;
Distance : 8

98
Tree	return call . getParent ( path ) ;
Code	return call . getParent ( path ) ;
Distance : 6

99
Tree	return parent . get () ? null : list ;
Code	return parent . get () ? null : list ;
Distance : 8

100
Tree	return n . getParent ( path ) ;
Code	return n . getParent ( path ) ;
Distance : 6

101
Tree	return STRING_CONSTANT + Iterables + STRING_CONSTANT + n ;
Code	return STRING_CONSTANT + Iterables + STRING_CONSTANT + n ;
Distance : 7

102
Tree	return parent . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Code	return parent . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

103
Tree	return n . getParent () ? null : list ;
Code	return n . getParent () ? null : list ;
Distance : 8

104
Tree	return call . getParent () . replace == NUMBER_CONSTANT ;
Code	return call . getParent () . replace == NUMBER_CONSTANT ;
Distance : 8

105
Tree	return new Token ( propType ) ;
Code	return new Token ( propType ) ;
Distance : 5

106
Tree	return elem + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return elem + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

107
Tree	return Token.ROOT ;
Code	return Token.ROOT ;
Distance : 1

108
Tree	return STRING_CONSTANT + isLoose ( ft ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( ft ) + STRING_CONSTANT ;
Distance : 8

109
Tree	return call + ++ . get ( sourceMapCache ) ;
Code	return call + ++ . get ( sourceMapCache ) ;
Distance : 8

110
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 1

111
Tree	return call ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ;
Code	return call ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ;
Distance : 5

112
Tree	return elem . getParent () ? null : list ;
Code	return elem . getParent () ? null : list ;
Distance : 8

113
Tree	return new Token ( compiler ) ;
Code	return new Token ( compiler ) ;
Distance : 5

114
Tree	return call . get ( typeMap ) ;
Code	return call . get ( typeMap ) ;
Distance : 6

115
Tree	return parent + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

116
Tree	return parent ? State.RESOLVED : FunctionFlavor.NORMAL ;
Code	return parent ? State.RESOLVED : FunctionFlavor.NORMAL ;
Distance : 5

117
Tree	return other.call ;
Code	return other.call ;
Distance : 1

118
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 1

119
Tree	return parent != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return parent != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

120
Tree	return new FlatFlowScopeCache ( compiler ) ;
Code	return new FlatFlowScopeCache ( compiler ) ;
Distance : 5

121
Tree	return this == disambiguateProperties ;
Code	return this == disambiguateProperties ;
Distance : 3

122
Tree	return typeMap + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return typeMap + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

123
Tree	return call . getParent ( path ) ? null : list ;
Code	return call . getParent ( path ) ? null : list ;
Distance : 10

124
Tree	return ! isNamedType ( ft ) ;
Code	return ! isNamedType ( ft ) ;
Distance : 5

125
Tree	return this == LocationMapping ;
Code	return this == LocationMapping ;
Distance : 3

126
Tree	return parent . getParent () . replace == NUMBER_CONSTANT ;
Code	return parent . getParent () . replace == NUMBER_CONSTANT ;
Distance : 8

127
Tree	return parent + NUMBER_CONSTANT ;
Code	return parent + NUMBER_CONSTANT ;
Distance : 3

128
Tree	return elem + substituteGenerics () ;
Code	return elem + substituteGenerics () ;
Distance : 4

129
Tree	return this == stringLiteralMatches ;
Code	return this == stringLiteralMatches ;
Distance : 3

130
Tree	return call . get ( path ) ;
Code	return call . get ( path ) ;
Distance : 6

131
Tree	return elem . getParent ( path ) ;
Code	return elem . getParent ( path ) ;
Distance : 6

132
Tree	return elem != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return elem != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

133
Tree	return parent ? PropAccess.INCLUDE_STRAY_PROPS : EvalMode.NORMAL ;
Code	return parent ? PropAccess.INCLUDE_STRAY_PROPS : EvalMode.NORMAL ;
Distance : 5

134
Tree	return STRING_CONSTANT + isLoose ( expr ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( expr ) + STRING_CONSTANT ;
Distance : 8

135
Tree	return call + this . legacyNamespace . getInstanceType ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . getInstanceType ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

136
Tree	return parent + substituteGenerics () ;
Code	return parent + substituteGenerics () ;
Distance : 4

137
Tree	return ! NominalType ;
Code	return ! NominalType ;
Distance : 2

138
Tree	return this == contents ;
Code	return this == contents ;
Distance : 3

139
Tree	return call . substituteGenerics () . UNKNOWN == NUMBER_CONSTANT ;
Code	return call . substituteGenerics () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

140
Tree	return getReferenceName () ? null : isAbstract ;
Code	return getReferenceName () ? null : isAbstract ;
Distance : 6

141
Tree	return call != FunctionFlavor.GENERATOR ;
Code	return call != FunctionFlavor.GENERATOR ;
Distance : 3

142
Tree	return ! isLoose ( that ) ;
Code	return ! isLoose ( that ) ;
Distance : 5

143
Tree	return call + this . legacyNamespace . substituteGenerics ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . substituteGenerics ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

144
Tree	return call + path . get ( path ) ;
Code	return call + path . get ( path ) ;
Distance : 8

145
Tree	return ! AncestorIterable ;
Code	return ! AncestorIterable ;
Distance : 2

146
Tree	return n + substituteGenerics () ;
Code	return n + substituteGenerics () ;
Distance : 4

147
Tree	return elem . getParent ( path ) ? null : list ;
Code	return elem . getParent ( path ) ? null : list ;
Distance : 10

148
Tree	return call . getParent ( UNKNOWN ) ? null : list ;
Code	return call . getParent ( UNKNOWN ) ? null : list ;
Distance : 10

149
Tree	return call . get () ? null : list ;
Code	return call . get () ? null : list ;
Distance : 8

150
Tree	return call . get ( typeMap ) ? null : list ;
Code	return call . get ( typeMap ) ? null : list ;
Distance : 10

151
Tree	return ! areIdentical ( inputCharset ) ;
Code	return ! areIdentical ( inputCharset ) ;
Distance : 5

152
Tree	return ! areIdentical ( ft ) ;
Code	return ! areIdentical ( ft ) ;
Distance : 5

153
Tree	return this == registerFunction ;
Code	return this == registerFunction ;
Distance : 3

154
Tree	return ! areIdentical ( that ) ;
Code	return ! areIdentical ( that ) ;
Distance : 5

155
Tree	return this == IncrementalCheckMode.GENERATE_IJS ;
Code	return this == IncrementalCheckMode.GENERATE_IJS ;
Distance : 3

156
Tree	return parent + this . legacyNamespace . substituteGenerics ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . legacyNamespace . substituteGenerics ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

157
Tree	return n . getParent ( path ) ? null : list ;
Code	return n . getParent ( path ) ? null : list ;
Distance : 10

158
Tree	return parent . getParent () ? null : isAbstract ;
Code	return parent . getParent () ? null : isAbstract ;
Distance : 8

159
Tree	return parent + ++ . get ( path ) ;
Code	return parent + ++ . get ( path ) ;
Distance : 8

160
Tree	return return + substituteGenerics () ;
Code	return return + substituteGenerics () ;
Distance : 4

161
Tree	return getReferenceName () ? null : transform ;
Code	return getReferenceName () ? null : transform ;
Distance : 6

162
Tree	return elem + NUMBER_CONSTANT ;
Code	return elem + NUMBER_CONSTANT ;
Distance : 3

163
Tree	return new FlatFlowScopeCache ( propType ) ;
Code	return new FlatFlowScopeCache ( propType ) ;
Distance : 5

164
Tree	return propType + NUMBER_CONSTANT ;
Code	return propType + NUMBER_CONSTANT ;
Distance : 3

165
Tree	return call + this . legacyNamespace . replace ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . replace ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

166
Tree	return this == State.RESOLVED ;
Code	return this == State.RESOLVED ;
Distance : 3

167
Tree	return getReferenceName () ? null : true ;
Code	return getReferenceName () ? null : true ;
Distance : 6

168
Tree	return n != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return n != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

169
Tree	return return + NUMBER_CONSTANT ;
Code	return return + NUMBER_CONSTANT ;
Distance : 3

170
Tree	return typeMap + NUMBER_CONSTANT ;
Code	return typeMap + NUMBER_CONSTANT ;
Distance : 3

171
Tree	return parent . getParent ( typeMap ) ;
Code	return parent . getParent ( typeMap ) ;
Distance : 6

172
Tree	return parent + this . legacyNamespace . get ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . legacyNamespace . get ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

173
Tree	return Iterables + NUMBER_CONSTANT ;
Code	return Iterables + NUMBER_CONSTANT ;
Distance : 3

174
Tree	return new QualifiedName ( compiler ) ;
Code	return new QualifiedName ( compiler ) ;
Distance : 5

175
Tree	return call != State.RESOLVED ;
Code	return call != State.RESOLVED ;
Distance : 3

176
Tree	return parent + this . legacyNamespace . replace ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . legacyNamespace . replace ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

177
Tree	return ( typeMap ) that ( nameNode ) ;
Code	return ( typeMap ) that ( nameNode ) ;
Distance : 7

178
Tree	return elem . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Code	return elem . getParent () . UNKNOWN == NUMBER_CONSTANT ;
Distance : 8

179
Tree	return ! propType ;
Code	return ! propType ;
Distance : 2

180
Tree	return NUMBER_CONSTANT ;
Code	return NUMBER_CONSTANT ;
Distance : 1

181
Tree	return call != EquivalenceMethod.DATA_FLOW ;
Code	return call != EquivalenceMethod.DATA_FLOW ;
Distance : 3

182
Tree	return STRING_CONSTANT + isLoose ( path ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( path ) + STRING_CONSTANT ;
Distance : 8

183
Tree	return typeMap + substituteGenerics () ;
Code	return typeMap + substituteGenerics () ;
Distance : 4

184
Tree	return call . getParent ( typeMap ) ;
Code	return call . getParent ( typeMap ) ;
Distance : 6

185
Tree	return MinimizationStyle.PREFER_UNNEGATED ;
Code	return MinimizationStyle.PREFER_UNNEGATED ;
Distance : 1

186
Tree	return parent + getInstanceType () ;
Code	return parent + getInstanceType () ;
Distance : 4

187
Tree	return ! isNamedType ( that ) ;
Code	return ! isNamedType ( that ) ;
Distance : 5

188
Tree	return addingRoot % NUMBER_CONSTANT ;
Code	return addingRoot % NUMBER_CONSTANT ;
Distance : 3

189
Tree	return call + expr . get ( path ) ;
Code	return call + expr . get ( path ) ;
Distance : 8

190
Tree	return typeMap != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return typeMap != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

191
Tree	return propType % NUMBER_CONSTANT ;
Code	return propType % NUMBER_CONSTANT ;
Distance : 3

192
Tree	return STRING_CONSTANT + isLoose ( inputCharset ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( inputCharset ) + STRING_CONSTANT ;
Distance : 8

193
Tree	return STRING_CONSTANT + isLoose ( tmp ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( tmp ) + STRING_CONSTANT ;
Distance : 8

194
Tree	return tmp % NUMBER_CONSTANT ;
Code	return tmp % NUMBER_CONSTANT ;
Distance : 3

195
Tree	return ( typeMap ) that ( expr ) ;
Code	return ( typeMap ) that ( expr ) ;
Distance : 7

196
Tree	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( sourceMapCache ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( sourceMapCache ) + STRING_CONSTANT ;
Distance : 10

197
Tree	super ( n , GOOG_LOADMODULE , state , parent , parent ) ;
Code	super ( n , GOOG_LOADMODULE , state , parent , parent ) ;
Distance : 12

198
Tree	return ( typeMap ) that ( typeMap ) ;
Code	return ( typeMap ) that ( typeMap ) ;
Distance : 7

199
Tree	return ( typeMap ) that ( n ) ;
Code	return ( typeMap ) that ( n ) ;
Distance : 7

200
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( path ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( path ) + STRING_CONSTANT ;
Distance : 10

201
Tree	return STRING_CONSTANT + isFunctionDeclaration ( ft ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isFunctionDeclaration ( ft ) + STRING_CONSTANT ;
Distance : 8

202
Tree	super ( n , GOOG_LOADMODULE , first , parent , parent ) ;
Code	super ( n , GOOG_LOADMODULE , first , parent , parent ) ;
Distance : 12

203
Tree	return getReferenceName () ? null : bodyNode ;
Code	return getReferenceName () ? null : bodyNode ;
Distance : 6

204
Tree	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( path ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + expr . getEmptyObjectLiteral ( path ) + STRING_CONSTANT ;
Distance : 10

205
Tree	return parent . getParent ( path ) ;
Code	return parent . getParent ( path ) ;
Distance : 6

206
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 1

207
Tree	super ( n , minCond , state , parent , parent ) ;
Code	super ( n , minCond , state , parent , parent ) ;
Distance : 12

208
Tree	return call . substituteGenerics ( path ) ? null : list ;
Code	return call . substituteGenerics ( path ) ? null : list ;
Distance : 10

209
Tree	return this == ALL ;
Code	return this == ALL ;
Distance : 3

210
Tree	return addingRoot + substituteGenerics () ;
Code	return addingRoot + substituteGenerics () ;
Distance : 4

211
Tree	return ( typeMap ) that ( ft ) ;
Code	return ( typeMap ) that ( ft ) ;
Distance : 7

212
Tree	return call + UNKNOWN . get ( path ) ;
Code	return call + UNKNOWN . get ( path ) ;
Distance : 8

213
Tree	return STRING_CONSTANT + Iterables . getInstanceType ( sourceMapCache ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getInstanceType ( sourceMapCache ) + STRING_CONSTANT ;
Distance : 10

214
Tree	return STRING_CONSTANT + isLoose ( prop ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + isLoose ( prop ) + STRING_CONSTANT ;
Distance : 8

215
Tree	return compiler + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return compiler + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

216
Tree	super ( n , typeMap , state , parent , parent ) ;
Code	super ( n , typeMap , state , parent , parent ) ;
Distance : 12

217
Tree	return return != PropAccess.INCLUDE_STRAY_PROPS ;
Code	return return != PropAccess.INCLUDE_STRAY_PROPS ;
Distance : 3

218
Tree	super ( n , minCond , first , parent , parent ) ;
Code	super ( n , minCond , first , parent , parent ) ;
Distance : 12

219
Tree	return propType + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return propType + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

220
Tree	return STRING_CONSTANT + Iterables . getInstanceType ( replace ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getInstanceType ( replace ) + STRING_CONSTANT ;
Distance : 10

221
Tree	return elem + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return elem + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

222
Tree	super ( n , follow , state , parent , parent ) ;
Code	super ( n , follow , state , parent , parent ) ;
Distance : 12

223
Tree	return call + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return call + this . legacyNamespace . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

224
Tree	return parent + path . get ( path ) ;
Code	return parent + path . get ( path ) ;
Distance : 8

225
Tree	super ( n , typeMap , first , parent , parent ) ;
Code	super ( n , typeMap , first , parent , parent ) ;
Distance : 12

226
Tree	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( sourceMapCache ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + Iterables . getEmptyObjectLiteral ( sourceMapCache ) + STRING_CONSTANT ;
Distance : 10

227
Tree	return JSTypes ;
Code	return JSTypes ;
Distance : 1

228
Tree	return parent != FunctionFlavor.GENERATOR ;
Code	return parent != FunctionFlavor.GENERATOR ;
Distance : 3

229
Tree	return ! elem ;
Code	return ! elem ;
Distance : 2

230
Tree	return STRING_CONSTANT + callName + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + callName + STRING_CONSTANT + parent ;
Distance : 7

231
Tree	return ( call ) that ( nameNode ) ;
Code	return ( call ) that ( nameNode ) ;
Distance : 7

232
Tree	return tmp < < NUMBER_CONSTANT ;
Code	return tmp < < NUMBER_CONSTANT ;
Distance : 4

233
Tree	return getReferenceName () ? null : refs ;
Code	return getReferenceName () ? null : refs ;
Distance : 6

234
Tree	return getReferenceName () ? null : first ;
Code	return getReferenceName () ? null : first ;
Distance : 6

235
Tree	return getReferenceName () ? null : LinkedHashMultimap ;
Code	return getReferenceName () ? null : LinkedHashMultimap ;
Distance : 6

236
Tree	return Iterables + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return Iterables + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

237
Tree	return n < < NUMBER_CONSTANT ;
Code	return n < < NUMBER_CONSTANT ;
Distance : 4

238
Tree	return false ;
Code	return false ;
Distance : 0

239
Tree	return return % NUMBER_CONSTANT ;
Code	return return % NUMBER_CONSTANT ;
Distance : 3

240
Tree	return ( typeMap ) that ( TYPE_BEFORE_CAST ) ;
Code	return ( typeMap ) that ( TYPE_BEFORE_CAST ) ;
Distance : 7

241
Tree	return ( typeMap ) that ( that ) ;
Code	return ( typeMap ) that ( that ) ;
Distance : 7

242
Tree	return parent < < NUMBER_CONSTANT ;
Code	return parent < < NUMBER_CONSTANT ;
Distance : 4

243
Tree	return ( legacyNamespace ) that ( nameNode ) ;
Code	return ( legacyNamespace ) that ( nameNode ) ;
Distance : 7

244
Tree	return call % NUMBER_CONSTANT ;
Code	return call % NUMBER_CONSTANT ;
Distance : 3

245
Tree	return elem % NUMBER_CONSTANT ;
Code	return elem % NUMBER_CONSTANT ;
Distance : 3

246
Tree	return compiler + NUMBER_CONSTANT ;
Code	return compiler + NUMBER_CONSTANT ;
Distance : 3

247
Tree	return parent % NUMBER_CONSTANT ;
Code	return parent % NUMBER_CONSTANT ;
Distance : 3

248
Tree	return getReferenceName () ? null : nominal ;
Code	return getReferenceName () ? null : nominal ;
Distance : 6

249
Tree	return elem < < NUMBER_CONSTANT ;
Code	return elem < < NUMBER_CONSTANT ;
Distance : 4

250
Tree	return return < < NUMBER_CONSTANT ;
Code	return return < < NUMBER_CONSTANT ;
Distance : 4

251
Tree	return typeMap < < NUMBER_CONSTANT ;
Code	return typeMap < < NUMBER_CONSTANT ;
Distance : 4

252
Tree	return typeMap % NUMBER_CONSTANT ;
Code	return typeMap % NUMBER_CONSTANT ;
Distance : 3

253
Tree	return addingRoot < < NUMBER_CONSTANT ;
Code	return addingRoot < < NUMBER_CONSTANT ;
Distance : 4

254
Tree	return Iterables < < NUMBER_CONSTANT ;
Code	return Iterables < < NUMBER_CONSTANT ;
Distance : 4

255
Tree	super ( n , follow , first , parent , parent ) ;
Code	super ( n , follow , first , parent , parent ) ;
Distance : 12

256
Tree	super ( n , parent , state , v , sourceMapCache ) ;
Code	super ( n , parent , state , v , sourceMapCache ) ;
Distance : 12

257
Tree	return NUMBER_CONSTANT ; setUp
Code	return NUMBER_CONSTANT ; setUp
Distance : 2

258
Tree	super ( n , charset , state , parent , parent ) ;
Code	super ( n , charset , state , parent , parent ) ;
Distance : 12

259
Tree	return call < < NUMBER_CONSTANT ;
Code	return call < < NUMBER_CONSTANT ;
Distance : 4

260
Tree	return false ;
Code	return false ;
Distance : 0

261
Tree	return n % NUMBER_CONSTANT ;
Code	return n % NUMBER_CONSTANT ;
Distance : 3

262
Tree	return true ; js
Code	return true ; js
Distance : 2

263
Tree	return propType < < NUMBER_CONSTANT ;
Code	return propType < < NUMBER_CONSTANT ;
Distance : 4

264
Tree	return true ; false
Code	return true ; false
Distance : 2

265
Tree	return true ; checkNotNull
Code	return true ; checkNotNull
Distance : 2

266
Tree	return true ; block
Code	return true ; block
Distance : 2

267
Tree	return true ; of
Code	return true ; of
Distance : 2

268
Tree	return Iterables % NUMBER_CONSTANT ;
Code	return Iterables % NUMBER_CONSTANT ;
Distance : 3

269
Tree	return true ; of
Code	return true ; of
Distance : 2

270
Tree	return true ; block
Code	return true ; block
Distance : 2

271
Tree	return true ; js
Code	return true ; js
Distance : 2

272
Tree	return true ;
Code	return true ;
Distance : 1

273
Tree	return true ; >
Code	return true ; >
Distance : 2

274
Tree	return true ; setUp
Code	return true ; setUp
Distance : 2

275
Tree	return NUMBER_CONSTANT ; NUMBER_CONSTANT
Code	return NUMBER_CONSTANT ; NUMBER_CONSTANT
Distance : 2

276
Tree	return NUMBER_CONSTANT ; checkNotNull
Code	return NUMBER_CONSTANT ; checkNotNull
Distance : 2

277
Tree	return true ; node
Code	return true ; node
Distance : 2

278
Tree	return true ; false
Code	return true ; false
Distance : 2

279
Tree	return NUMBER_CONSTANT ; getParent
Code	return NUMBER_CONSTANT ; getParent
Distance : 2

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 360
Correct
========================================================================
True

0
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

1
Tree	return n ;
Code	return n ;
Distance : 1

2
Tree	return parent ;
Code	return parent ;
Distance : 1

3
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

4
Tree	return NodeUtil . get () . UNKNOWN ;
Code	return NodeUtil . get () . UNKNOWN ;
Distance : 6

5
Tree	return n . getParent () . UNKNOWN ;
Code	return n . getParent () . UNKNOWN ;
Distance : 6

6
Tree	return null ;
Code	return null ;
Distance : 1

7
Tree	return compiler ;
Code	return compiler ;
Distance : 1

8
Tree	return areIdentical ( TernaryValue.UNKNOWN ) . that () ;
Code	return areIdentical ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

9
Tree	return getDeclaredTypeForOwnBody ( TernaryValue.UNKNOWN ) . that () ;
Code	return getDeclaredTypeForOwnBody ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

10
Tree	return NodeUtil . getEmptyObjectLiteral () >= NUMBER_CONSTANT ;
Code	return NodeUtil . getEmptyObjectLiteral () >= NUMBER_CONSTANT ;
Distance : 6

11
Tree	return getTopObject ( TernaryValue.UNKNOWN ) . size () ;
Code	return getTopObject ( TernaryValue.UNKNOWN ) . size () ;
Distance : 6

12
Tree	return NodeUtil . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return NodeUtil . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

13
Tree	return parent . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return parent . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

14
Tree	return parent . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return parent . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

15
Tree	return firstArg . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return firstArg . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

16
Tree	return CHAR_CONS ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

17
Tree	return compiler . getFirstChild ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return compiler . getFirstChild ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

18
Tree	return compiler . getEmptyObjectLiteral () >= NUMBER_CONSTANT ;
Code	return compiler . getEmptyObjectLiteral () >= NUMBER_CONSTANT ;
Distance : 6

19
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 14

20
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

21
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Distance : 16

22
Tree	return compiler . path ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return compiler . path ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

23
Tree	return firstArg . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return firstArg . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

24
Tree	return this . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return this . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

25
Tree	return getTopObject ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

26
Tree	return replacement . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return replacement . get ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

27
Tree	return new JSTypes ( STRING_CONSTANT ) ;
Code	return new JSTypes ( STRING_CONSTANT ) ;
Distance : 5

28
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

29
Tree	return TernaryValue.UNKNOWN ; js
Code	return TernaryValue.UNKNOWN ; js
Distance : 1

30
Tree	return TernaryValue.UNKNOWN ; >
Code	return TernaryValue.UNKNOWN ; >
Distance : 1

31
Tree	return TernaryValue.UNKNOWN ; setUp
Code	return TernaryValue.UNKNOWN ; setUp
Distance : 1

32
Tree	return TernaryValue.UNKNOWN ; block
Code	return TernaryValue.UNKNOWN ; block
Distance : 1

33
Tree	return TernaryValue.UNKNOWN ; checkNotNull
Code	return TernaryValue.UNKNOWN ; checkNotNull
Distance : 1

34
Tree	return TernaryValue.UNKNOWN ; node
Code	return TernaryValue.UNKNOWN ; node
Distance : 1

35
Tree	return STRING_CONSTANT + STRING_CONSTANT ; setUp
Code	return STRING_CONSTANT + STRING_CONSTANT ; setUp
Distance : 4

36
Tree	return CHAR_CONS ( TernaryValue.UNKNOWN ) . size () ;
Code	return CHAR_CONS ( TernaryValue.UNKNOWN ) . size () ;
Distance : 6

37
Tree	return this . commonTypes . getEmptyObjectLiteral () ;
Code	return this . commonTypes . getEmptyObjectLiteral () ;
Distance : 6

38
Tree	return STRING_CONSTANT + STRING_CONSTANT ; getParent
Code	return STRING_CONSTANT + STRING_CONSTANT ; getParent
Distance : 4

39
Tree	return parent . getParent ( null ) ;
Code	return parent . getParent ( null ) ;
Distance : 6

40
Tree	return n . getParent ( path ) ;
Code	return n . getParent ( path ) ;
Distance : 6

41
Tree	return STRING_CONSTANT + function + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + function + STRING_CONSTANT + parent ;
Distance : 7

42
Tree	return ( firstArg ) that . getEmptyObjectLiteral () ;
Code	return ( firstArg ) that . getEmptyObjectLiteral () ;
Distance : 7

43
Tree	return ( compiler ) prop . getEmptyObjectLiteral () ;
Code	return ( compiler ) prop . getEmptyObjectLiteral () ;
Distance : 7

44
Tree	return getLhs () ;
Code	return getLhs () ;
Distance : 2

45
Tree	return NodeUtil + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT ;
Distance : 3

46
Tree	return parent . get ( null ) ;
Code	return parent . get ( null ) ;
Distance : 6

47
Tree	return firstArg ;
Code	return firstArg ;
Distance : 1

48
Tree	return return; ;
Code	return return; ;
Distance : 1

49
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Distance : 16

50
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; t
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; t
Distance : 16

51
Tree	return compiler . path ( path ) ;
Code	return compiler . path ( path ) ;
Distance : 6

52
Tree	return areIdentical () ;
Code	return areIdentical () ;
Distance : 2

53
Tree	return getObjectType ( STRING_CONSTANT ) ;
Code	return getObjectType ( STRING_CONSTANT ) ;
Distance : 4

54
Tree	return replacement . get ( STRING_CONSTANT ) . that () ;
Code	return replacement . get ( STRING_CONSTANT ) . that () ;
Distance : 9

55
Tree	return parent . getParent ( STRING_CONSTANT ) . that () ;
Code	return parent . getParent ( STRING_CONSTANT ) . that () ;
Distance : 9

56
Tree	return replacement . get ( path , STRING_CONSTANT ) . that () ;
Code	return replacement . get ( path , STRING_CONSTANT ) . that () ;
Distance : 11

57
Tree	return getTopObject ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

58
Tree	return getDeclaredTypeForOwnBody () ;
Code	return getDeclaredTypeForOwnBody () ;
Distance : 2

59
Tree	return parent . get ( path , STRING_CONSTANT ) . that () ;
Code	return parent . get ( path , STRING_CONSTANT ) . that () ;
Distance : 11

60
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT , function ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT , function ) ;
Distance : 7

61
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; js
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; js
Distance : 16

62
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; getParent
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; getParent
Distance : 16

63
Tree	return STRING_CONSTANT + this + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + this + STRING_CONSTANT + parent ;
Distance : 7

64
Tree	return ( other ) prop . getEmptyObjectLiteral () ;
Code	return ( other ) prop . getEmptyObjectLiteral () ;
Distance : 7

65
Tree	return getReferenceName ( STRING_CONSTANT ) ;
Code	return getReferenceName ( STRING_CONSTANT ) ;
Distance : 4

66
Tree	return this . currentScope . sourceMapCache ;
Code	return this . currentScope . sourceMapCache ;
Distance : 5

67
Tree	return n . getParent ( null ) ;
Code	return n . getParent ( null ) ;
Distance : 6

68
Tree	return this . commonTypes . STRING ;
Code	return this . commonTypes . STRING ;
Distance : 5

69
Tree	return ( commonTypes ) prop . getEmptyObjectLiteral () ;
Code	return ( commonTypes ) prop . getEmptyObjectLiteral () ;
Distance : 7

70
Tree	return getTopObject ( NUMBER_CONSTANT ) ;
Code	return getTopObject ( NUMBER_CONSTANT ) ;
Distance : 4

71
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; setUp
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; setUp
Distance : 16

72
Tree	return getCommonTypes () ;
Code	return getCommonTypes () ;
Distance : 2

73
Tree	return new Token ( STRING_CONSTANT , firstArg ) ;
Code	return new Token ( STRING_CONSTANT , firstArg ) ;
Distance : 7

74
Tree	return TernaryValue.UNKNOWN . get () ;
Code	return TernaryValue.UNKNOWN . get () ;
Distance : 3

75
Tree	return parent + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT ;
Distance : 3

76
Tree	return n . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return n . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

77
Tree	return this . commonTypes . MAP_TO_UNKNOWN ;
Code	return this . commonTypes . MAP_TO_UNKNOWN ;
Distance : 5

78
Tree	return getCommonTypes ( NUMBER_CONSTANT ) ;
Code	return getCommonTypes ( NUMBER_CONSTANT ) ;
Distance : 4

79
Tree	return this . supported . TRUTHY ;
Code	return this . supported . TRUTHY ;
Distance : 5

80
Tree	return n . getParent ( path , STRING_CONSTANT ) . that () ;
Code	return n . getParent ( path , STRING_CONSTANT ) . that () ;
Distance : 11

81
Tree	return NodeUtil . get ( sourceMapCache ) ;
Code	return NodeUtil . get ( sourceMapCache ) ;
Distance : 6

82
Tree	return new StringBuilder ( STRING_CONSTANT ) ;
Code	return new StringBuilder ( STRING_CONSTANT ) ;
Distance : 5

83
Tree	return n + STRING_CONSTANT ;
Code	return n + STRING_CONSTANT ;
Distance : 3

84
Tree	return this . commonTypes . replace ;
Code	return this . commonTypes . replace ;
Distance : 5

85
Tree	return new RawNominalType ( STRING_CONSTANT ) ;
Code	return new RawNominalType ( STRING_CONSTANT ) ;
Distance : 5

86
Tree	return firstArg . get ( STRING_CONSTANT ) ;
Code	return firstArg . get ( STRING_CONSTANT ) ;
Distance : 6

87
Tree	return firstArg . get () . get () ;
Code	return firstArg . get () . get () ;
Distance : 7

88
Tree	return compiler . getFirstChild ( STRING_CONSTANT ) . that () ;
Code	return compiler . getFirstChild ( STRING_CONSTANT ) . that () ;
Distance : 9

89
Tree	return replacement . get ( STRING_CONSTANT ) ;
Code	return replacement . get ( STRING_CONSTANT ) ;
Distance : 6

90
Tree	return compiler . path ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return compiler . path ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

91
Tree	return replacement + STRING_CONSTANT ;
Code	return replacement + STRING_CONSTANT ;
Distance : 3

92
Tree	return compiler . getFirstChild ( STRING_CONSTANT ) ;
Code	return compiler . getFirstChild ( STRING_CONSTANT ) ;
Distance : 6

93
Tree	return STRING_CONSTANT + firstArg + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + firstArg + STRING_CONSTANT + parent ;
Distance : 7

94
Tree	return parent . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return parent . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

95
Tree	return CHAR_CONS ( STRING_CONSTANT ) ;
Code	return CHAR_CONS ( STRING_CONSTANT ) ;
Distance : 4

96
Tree	return compiler . path ( STRING_CONSTANT ) . that () ;
Code	return compiler . path ( STRING_CONSTANT ) . that () ;
Distance : 9

97
Tree	return replacement . get ( path ) ;
Code	return replacement . get ( path ) ;
Distance : 6

98
Tree	return compiler . path () . replace ;
Code	return compiler . path () . replace ;
Distance : 6

99
Tree	return compiler . path ( STRING_CONSTANT ) ;
Code	return compiler . path ( STRING_CONSTANT ) ;
Distance : 6

100
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

101
Tree	return parent . get ( path ) ;
Code	return parent . get ( path ) ;
Distance : 6

102
Tree	return replacement . get () . get () ;
Code	return replacement . get () . get () ;
Distance : 7

103
Tree	return parent . getParent ( STRING_CONSTANT ) ;
Code	return parent . getParent ( STRING_CONSTANT ) ;
Distance : 6

104
Tree	return compiler . getFirstChild () . UNKNOWN ;
Code	return compiler . getFirstChild () . UNKNOWN ;
Distance : 6

105
Tree	return this . commonTypes . TRUTHY ;
Code	return this . commonTypes . TRUTHY ;
Distance : 5

106
Tree	return NodeUtil . get () ? null : NodeUtil ;
Code	return NodeUtil . get () ? null : NodeUtil ;
Distance : 8

107
Tree	return n . getParent () ? null : list ;
Code	return n . getParent () ? null : list ;
Distance : 8

108
Tree	return NodeUtil . get () ;
Code	return NodeUtil . get () ;
Distance : 4

109
Tree	return firstArg . get ( path , STRING_CONSTANT ) . that () ;
Code	return firstArg . get ( path , STRING_CONSTANT ) . that () ;
Distance : 11

110
Tree	return this . commonTypes . isChanged () ;
Code	return this . commonTypes . isChanged () ;
Distance : 6

111
Tree	return this ;
Code	return this ;
Distance : 1

112
Tree	return getDeclaredTypeForOwnBody ( NUMBER_CONSTANT ) ;
Code	return getDeclaredTypeForOwnBody ( NUMBER_CONSTANT ) ;
Distance : 4

113
Tree	return getCommonTypes ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getCommonTypes ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

114
Tree	return firstArg . get () ? null : list ;
Code	return firstArg . get () ? null : list ;
Distance : 8

115
Tree	return firstArg . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return firstArg . getParent ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

116
Tree	return this + STRING_CONSTANT ;
Code	return this + STRING_CONSTANT ;
Distance : 3

117
Tree	return TernaryValue.UNKNOWN . get () . UNKNOWN ;
Code	return TernaryValue.UNKNOWN . get () . UNKNOWN ;
Distance : 5

118
Tree	return new Token ( STRING_CONSTANT , compiler ) ;
Code	return new Token ( STRING_CONSTANT , compiler ) ;
Distance : 7

119
Tree	return parent . get () ;
Code	return parent . get () ;
Distance : 4

120
Tree	return this . commonTypes . TRUTHY () ;
Code	return this . commonTypes . TRUTHY () ;
Distance : 6

121
Tree	return compiler . getEmptyObjectLiteral () . get () ;
Code	return compiler . getEmptyObjectLiteral () . get () ;
Distance : 7

122
Tree	return CHAR_CONS ( NUMBER_CONSTANT ) ;
Code	return CHAR_CONS ( NUMBER_CONSTANT ) ;
Distance : 4

123
Tree	return firstArg . getParent ( STRING_CONSTANT ) ;
Code	return firstArg . getParent ( STRING_CONSTANT ) ;
Distance : 6

124
Tree	return this . commonTypes . getDeclaredFunctionType () ;
Code	return this . commonTypes . getDeclaredFunctionType () ;
Distance : 6

125
Tree	return getCommonTypes ( STRING_CONSTANT ) ;
Code	return getCommonTypes ( STRING_CONSTANT ) ;
Distance : 4

126
Tree	return STRING_CONSTANT + function + STRING_CONSTANT + supported ;
Code	return STRING_CONSTANT + function + STRING_CONSTANT + supported ;
Distance : 7

127
Tree	return firstArg . getParent () . get () ;
Code	return firstArg . getParent () . get () ;
Distance : 7

128
Tree	return isNamedType () ;
Code	return isNamedType () ;
Distance : 2

129
Tree	return getReferenceName ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getReferenceName ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

130
Tree	return firstArg + STRING_CONSTANT ;
Code	return firstArg + STRING_CONSTANT ;
Distance : 3

131
Tree	return firstArg . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return firstArg . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

132
Tree	return new Token ( STRING_CONSTANT , n ) ;
Code	return new Token ( STRING_CONSTANT , n ) ;
Distance : 7

133
Tree	return new J2clEqualitySameRewriterPass ( STRING_CONSTANT ) ;
Code	return new J2clEqualitySameRewriterPass ( STRING_CONSTANT ) ;
Distance : 5

134
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

135
Tree	return replacement ;
Code	return replacement ;
Distance : 1

136
Tree	return compiler . getFirstChild () . get () ;
Code	return compiler . getFirstChild () . get () ;
Distance : 7

137
Tree	return NodeUtil . get ( null ) ;
Code	return NodeUtil . get ( null ) ;
Distance : 6

138
Tree	return replacement . get () ? null : list ;
Code	return replacement . get () ? null : list ;
Distance : 8

139
Tree	return firstArg . get () . UNKNOWN ;
Code	return firstArg . get () . UNKNOWN ;
Distance : 6

140
Tree	return CHAR_CONS ( new StringBuilder ( typeMap ) , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( new StringBuilder ( typeMap ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

141
Tree	return this . commonTypes . UNKNOWN ;
Code	return this . commonTypes . UNKNOWN ;
Distance : 5

142
Tree	return CHAR_CONS ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

143
Tree	return getReferenceName ( NUMBER_CONSTANT ) ;
Code	return getReferenceName ( NUMBER_CONSTANT ) ;
Distance : 4

144
Tree	return new QualifiedName ( STRING_CONSTANT ) ;
Code	return new QualifiedName ( STRING_CONSTANT ) ;
Distance : 5

145
Tree	return this . commonTypes . replace () ;
Code	return this . commonTypes . replace () ;
Distance : 6

146
Tree	return parent . getParent () . UNKNOWN ;
Code	return parent . getParent () . UNKNOWN ;
Distance : 6

147
Tree	return firstArg . get () ;
Code	return firstArg . get () ;
Distance : 4

148
Tree	return firstArg . get ( path ) ;
Code	return firstArg . get ( path ) ;
Distance : 6

149
Tree	return function ;
Code	return function ;
Distance : 1

150
Tree	return compiler + STRING_CONSTANT ;
Code	return compiler + STRING_CONSTANT ;
Distance : 3

151
Tree	return this . commonTypes . get () ;
Code	return this . commonTypes . get () ;
Distance : 6

152
Tree	return tmp ;
Code	return tmp ;
Distance : 1

153
Tree	return parent . getParent () . get () ;
Code	return parent . getParent () . get () ;
Distance : 7

154
Tree	return this . currentScope . getEmptyObjectLiteral () ;
Code	return this . currentScope . getEmptyObjectLiteral () ;
Distance : 6

155
Tree	return convertMethodToFunction ( NUMBER_CONSTANT ) ;
Code	return convertMethodToFunction ( NUMBER_CONSTANT ) ;
Distance : 4

156
Tree	return new Token ( STRING_CONSTANT ) ;
Code	return new Token ( STRING_CONSTANT ) ;
Distance : 5

157
Tree	return TernaryValue.UNKNOWN ; of
Code	return TernaryValue.UNKNOWN ; of
Distance : 1

158
Tree	return ( n ) prop . getEmptyObjectLiteral () ;
Code	return ( n ) prop . getEmptyObjectLiteral () ;
Distance : 7

159
Tree	return NodeUtil . get ( STRING_CONSTANT ) ;
Code	return NodeUtil . get ( STRING_CONSTANT ) ;
Distance : 6

160
Tree	return new String ( STRING_CONSTANT ) ;
Code	return new String ( STRING_CONSTANT ) ;
Distance : 5

161
Tree	return this . currentScope . TRUTHY ;
Code	return this . currentScope . TRUTHY ;
Distance : 5

162
Tree	return STRING_CONSTANT + this + STRING_CONSTANT + arguments ;
Code	return STRING_CONSTANT + this + STRING_CONSTANT + arguments ;
Distance : 7

163
Tree	return new UnrecognizedRequire ( STRING_CONSTANT ) ;
Code	return new UnrecognizedRequire ( STRING_CONSTANT ) ;
Distance : 5

164
Tree	return getLhs ( STRING_CONSTANT ) ;
Code	return getLhs ( STRING_CONSTANT ) ;
Distance : 4

165
Tree	return compiler . path () . get () ;
Code	return compiler . path () . get () ;
Distance : 7

166
Tree	return parent . getParent () ? null : list ;
Code	return parent . getParent () ? null : list ;
Distance : 8

167
Tree	return compiler . getFirstChild ( path ) ;
Code	return compiler . getFirstChild ( path ) ;
Distance : 6

168
Tree	return compiler . getFirstChild ( path , STRING_CONSTANT ) . that () ;
Code	return compiler . getFirstChild ( path , STRING_CONSTANT ) . that () ;
Distance : 11

169
Tree	return replacement . get ( null ) ;
Code	return replacement . get ( null ) ;
Distance : 6

170
Tree	return ( firstArg ) prop . getEmptyObjectLiteral () ;
Code	return ( firstArg ) prop . getEmptyObjectLiteral () ;
Distance : 7

171
Tree	return compiler . getFirstChild ( null ) ;
Code	return compiler . getFirstChild ( null ) ;
Distance : 6

172
Tree	return NodeUtil . get ( path ) ;
Code	return NodeUtil . get ( path ) ;
Distance : 6

173
Tree	return n . getParent ( STRING_CONSTANT ) . that () ;
Code	return n . getParent ( STRING_CONSTANT ) . that () ;
Distance : 9

174
Tree	return ( firstArg ) prop . isFunction () ;
Code	return ( firstArg ) prop . isFunction () ;
Distance : 7

175
Tree	return parent . get ( STRING_CONSTANT ) ;
Code	return parent . get ( STRING_CONSTANT ) ;
Distance : 6

176
Tree	return parent . get () . get () ;
Code	return parent . get () . get () ;
Distance : 7

177
Tree	return new Token ( STRING_CONSTANT , VIRTUAL_FILE ) ;
Code	return new Token ( STRING_CONSTANT , VIRTUAL_FILE ) ;
Distance : 7

178
Tree	return replacement . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return replacement . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

179
Tree	return firstArg . get ( STRING_CONSTANT ) . that () ;
Code	return firstArg . get ( STRING_CONSTANT ) . that () ;
Distance : 9

180
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT ) ;
Distance : 5

181
Tree	return firstArg . getParent ( null ) ;
Code	return firstArg . getParent ( null ) ;
Distance : 6

182
Tree	return firstArg . getParent () ;
Code	return firstArg . getParent () ;
Distance : 4

183
Tree	return NodeUtil . get ( STRING_CONSTANT ) . that () ;
Code	return NodeUtil . get ( STRING_CONSTANT ) . that () ;
Distance : 9

184
Tree	return parent . get () ? null : list ;
Code	return parent . get () ? null : list ;
Distance : 8

185
Tree	return compiler . getEmptyObjectLiteral () ;
Code	return compiler . getEmptyObjectLiteral () ;
Distance : 4

186
Tree	return firstArg . get ( sourceMapCache , STRING_CONSTANT ) . that () ;
Code	return firstArg . get ( sourceMapCache , STRING_CONSTANT ) . that () ;
Distance : 11

187
Tree	return replacement . get () ;
Code	return replacement . get () ;
Distance : 4

188
Tree	return CHAR_CONS () ;
Code	return CHAR_CONS () ;
Distance : 2

189
Tree	return parent . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return parent . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

190
Tree	return compiler . path ( null ) ;
Code	return compiler . path ( null ) ;
Distance : 6

191
Tree	return convertMethodToFunction ( STRING_CONSTANT ) ;
Code	return convertMethodToFunction ( STRING_CONSTANT ) ;
Distance : 4

192
Tree	return STRING_CONSTANT + supported + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + supported + STRING_CONSTANT + parent ;
Distance : 7

193
Tree	return n . getParent () ;
Code	return n . getParent () ;
Distance : 4

194
Tree	return compiler . getFirstChild () ;
Code	return compiler . getFirstChild () ;
Distance : 4

195
Tree	return firstArg . get ( null ) ;
Code	return firstArg . get ( null ) ;
Distance : 6

196
Tree	return replacement . get () . UNKNOWN ;
Code	return replacement . get () . UNKNOWN ;
Distance : 6

197
Tree	return compiler . path () ;
Code	return compiler . path () ;
Distance : 4

198
Tree	return ( NodeUtil ) prop . getEmptyObjectLiteral () ;
Code	return ( NodeUtil ) prop . getEmptyObjectLiteral () ;
Distance : 7

199
Tree	return result + STRING_CONSTANT ;
Code	return result + STRING_CONSTANT ;
Distance : 3

200
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

201
Tree	return getLhs ( NUMBER_CONSTANT ) ;
Code	return getLhs ( NUMBER_CONSTANT ) ;
Distance : 4

202
Tree	return this . supported . sourceMapCache ;
Code	return this . supported . sourceMapCache ;
Distance : 5

203
Tree	return NodeUtil . get () . get () ;
Code	return NodeUtil . get () . get () ;
Distance : 7

204
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT , firstArg ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT , firstArg ) ;
Distance : 7

205
Tree	return ( prop ) prop . getEmptyObjectLiteral () ;
Code	return ( prop ) prop . getEmptyObjectLiteral () ;
Distance : 7

206
Tree	return this . commonTypes . ++ () ;
Code	return this . commonTypes . ++ () ;
Distance : 6

207
Tree	return NodeUtil . get ( path , STRING_CONSTANT ) . that () ;
Code	return NodeUtil . get ( path , STRING_CONSTANT ) . that () ;
Distance : 11

208
Tree	return getReferenceName () ;
Code	return getReferenceName () ;
Distance : 2

209
Tree	return getObjectType ( NUMBER_CONSTANT ) ;
Code	return getObjectType ( NUMBER_CONSTANT ) ;
Distance : 4

210
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT , VIRTUAL_FILE ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT , VIRTUAL_FILE ) ;
Distance : 7

211
Tree	return getTopObject ( STRING_CONSTANT ) ;
Code	return getTopObject ( STRING_CONSTANT ) ;
Distance : 4

212
Tree	return parent . getParent ( path , STRING_CONSTANT ) . that () ;
Code	return parent . getParent ( path , STRING_CONSTANT ) . that () ;
Distance : 11

213
Tree	return compiler . getFirstChild () ? null : list ;
Code	return compiler . getFirstChild () ? null : list ;
Distance : 8

214
Tree	return areIdentical ( STRING_CONSTANT ) ;
Code	return areIdentical ( STRING_CONSTANT ) ;
Distance : 4

215
Tree	return NodeUtil . < parent > getName () . UNKNOWN ;
Code	return NodeUtil . < parent > getName () . UNKNOWN ;
Distance : 9

216
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

217
Tree	return parent . getParent () ;
Code	return parent . getParent () ;
Distance : 4

218
Tree	return parent . get () . UNKNOWN ;
Code	return parent . get () . UNKNOWN ;
Distance : 6

219
Tree	return compiler . getFirstChild ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return compiler . getFirstChild ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

220
Tree	return this . commonTypes . sourceMapCache ;
Code	return this . commonTypes . sourceMapCache ;
Distance : 5

221
Tree	return firstArg . getParent ( STRING_CONSTANT ) . that () ;
Code	return firstArg . getParent ( STRING_CONSTANT ) . that () ;
Distance : 9

222
Tree	return compiler . getEmptyObjectLiteral ( null ) ;
Code	return compiler . getEmptyObjectLiteral ( null ) ;
Distance : 6

223
Tree	return isNamedType ( STRING_CONSTANT ) ;
Code	return isNamedType ( STRING_CONSTANT ) ;
Distance : 4

224
Tree	return getReferenceName ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getReferenceName ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

225
Tree	return compiler . path () ? null : list ;
Code	return compiler . path () ? null : list ;
Distance : 8

226
Tree	return getLhs ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getLhs ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

227
Tree	return getTopObject () ;
Code	return getTopObject () ;
Distance : 2

228
Tree	return compiler . getFirstChild () . replace ;
Code	return compiler . getFirstChild () . replace ;
Distance : 6

229
Tree	return result ;
Code	return result ;
Distance : 1

230
Tree	return function + STRING_CONSTANT ;
Code	return function + STRING_CONSTANT ;
Distance : 3

231
Tree	return tmp + STRING_CONSTANT ;
Code	return tmp + STRING_CONSTANT ;
Distance : 3

232
Tree	return firstArg . get ( sourceMapCache ) ;
Code	return firstArg . get ( sourceMapCache ) ;
Distance : 6

233
Tree	return NodeUtil . get () . replace ;
Code	return NodeUtil . get () . replace ;
Distance : 6

234
Tree	return STRING_CONSTANT + other + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + other + STRING_CONSTANT + parent ;
Distance : 7

235
Tree	return firstArg . < parent > getUseSitesByName () . SubtypingMode.NORMAL ;
Code	return firstArg . < parent > getUseSitesByName () . SubtypingMode.NORMAL ;
Distance : 9

236
Tree	return TernaryValue.UNKNOWN . get () . message ;
Code	return TernaryValue.UNKNOWN . get () . message ;
Distance : 5

237
Tree	return ( typeMap ) prop . getEmptyObjectLiteral () ;
Code	return ( typeMap ) prop . getEmptyObjectLiteral () ;
Distance : 7

238
Tree	return new Token ( STRING_CONSTANT , function ) ;
Code	return new Token ( STRING_CONSTANT , function ) ;
Distance : 7

239
Tree	return isNamedType ( NUMBER_CONSTANT ) ;
Code	return isNamedType ( NUMBER_CONSTANT ) ;
Distance : 4

240
Tree	return TernaryValue.UNKNOWN . get () . jsRoot ;
Code	return TernaryValue.UNKNOWN . get () . jsRoot ;
Distance : 5

241
Tree	return isNamedType ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return isNamedType ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

242
Tree	return parent . get ( STRING_CONSTANT ) . that () ;
Code	return parent . get ( STRING_CONSTANT ) . that () ;
Distance : 9

243
Tree	return this . commonTypes . asList () ;
Code	return this . commonTypes . asList () ;
Distance : 6

244
Tree	return TernaryValue.UNKNOWN . size () . UNKNOWN ;
Code	return TernaryValue.UNKNOWN . size () . UNKNOWN ;
Distance : 5

245
Tree	return n . < parent > getName () . SubtypingMode.NORMAL ;
Code	return n . < parent > getName () . SubtypingMode.NORMAL ;
Distance : 9

246
Tree	return STRING_CONSTANT + this + STRING_CONSTANT + supported ;
Code	return STRING_CONSTANT + this + STRING_CONSTANT + supported ;
Distance : 7

247
Tree	return compiler . path ( path , STRING_CONSTANT ) . that () ;
Code	return compiler . path ( path , STRING_CONSTANT ) . that () ;
Distance : 11

248
Tree	return getLhs ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getLhs ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

249
Tree	return TernaryValue.UNKNOWN . getParent () . UNKNOWN ;
Code	return TernaryValue.UNKNOWN . getParent () . UNKNOWN ;
Distance : 5

250
Tree	return compiler . getEmptyObjectLiteral ( STRING_CONSTANT ) ;
Code	return compiler . getEmptyObjectLiteral ( STRING_CONSTANT ) ;
Distance : 6

251
Tree	return TernaryValue.UNKNOWN . get () . currentScope ;
Code	return TernaryValue.UNKNOWN . get () . currentScope ;
Distance : 5

252
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT , n ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT , n ) ;
Distance : 7

253
Tree	return n . getParent ( STRING_CONSTANT ) ;
Code	return n . getParent ( STRING_CONSTANT ) ;
Distance : 6

254
Tree	return convertMethodToFunction () ;
Code	return convertMethodToFunction () ;
Distance : 2

255
Tree	return isNamedType ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Code	return isNamedType ( new StringBuilder ( tmp ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

256
Tree	return compiler . getEmptyObjectLiteral ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return compiler . getEmptyObjectLiteral ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

257
Tree	return areIdentical ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return areIdentical ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

258
Tree	return NodeUtil . get () ? null : list ;
Code	return NodeUtil . get () ? null : list ;
Distance : 8

259
Tree	return CHAR_CONS ( new StringBuilder ( TYPE_BEFORE_CAST ) , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( new StringBuilder ( TYPE_BEFORE_CAST ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

260
Tree	return n . getParent () . get () ;
Code	return n . getParent () . get () ;
Distance : 7

261
Tree	return NodeUtil . get ( sourceMapCache , STRING_CONSTANT ) . that () ;
Code	return NodeUtil . get ( sourceMapCache , STRING_CONSTANT ) . that () ;
Distance : 11

262
Tree	return n . getParent () ? null : NodeUtil ;
Code	return n . getParent () ? null : NodeUtil ;
Distance : 8

263
Tree	return TernaryValue.UNKNOWN . size () ;
Code	return TernaryValue.UNKNOWN . size () ;
Distance : 3

264
Tree	return getDeclaredTypeForOwnBody ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getDeclaredTypeForOwnBody ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

265
Tree	return STRING_CONSTANT + function + STRING_CONSTANT + arguments ;
Code	return STRING_CONSTANT + function + STRING_CONSTANT + arguments ;
Distance : 7

266
Tree	return convertMethodToFunction ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return convertMethodToFunction ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

267
Tree	return compiler . getEmptyObjectLiteral ( STRING_CONSTANT ) . that () ;
Code	return compiler . getEmptyObjectLiteral ( STRING_CONSTANT ) . that () ;
Distance : 9

268
Tree	return TernaryValue.UNKNOWN . get () . propertyName ;
Code	return TernaryValue.UNKNOWN . get () . propertyName ;
Distance : 5

269
Tree	return NodeUtil . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	return NodeUtil . get ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

270
Tree	return getObjectType () ;
Code	return getObjectType () ;
Distance : 2

271
Tree	return NodeUtil . get () >= NUMBER_CONSTANT ;
Code	return NodeUtil . get () >= NUMBER_CONSTANT ;
Distance : 6

272
Tree	return areIdentical ( NUMBER_CONSTANT ) ;
Code	return areIdentical ( NUMBER_CONSTANT ) ;
Distance : 4

273
Tree	return parent ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return parent ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

274
Tree	return getReferenceName ( TernaryValue.UNKNOWN ) . that () ;
Code	return getReferenceName ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

275
Tree	return this . commonTypes . class () ;
Code	return this . commonTypes . class () ;
Distance : 6

276
Tree	return CHAR_CONS ( TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

277
Tree	return n ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return n ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

278
Tree	return n . < parent > getName () . jsRoot ;
Code	return n . < parent > getName () . jsRoot ;
Distance : 9

279
Tree	return TernaryValue.UNKNOWN . get () . replace ;
Code	return TernaryValue.UNKNOWN . get () . replace ;
Distance : 5

280
Tree	return TernaryValue.UNKNOWN . getFirstChild () ;
Code	return TernaryValue.UNKNOWN . getFirstChild () ;
Distance : 3

281
Tree	return parent . getParent ( path ) ;
Code	return parent . getParent ( path ) ;
Distance : 6

282
Tree	return TernaryValue.UNKNOWN . isRoot () . UNKNOWN ;
Code	return TernaryValue.UNKNOWN . isRoot () . UNKNOWN ;
Distance : 5

283
Tree	return n ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return n ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

284
Tree	return TernaryValue.UNKNOWN . get () . success ;
Code	return TernaryValue.UNKNOWN . get () . success ;
Distance : 5

285
Tree	return parent . < parent > isLValueRootedInGlobalScope () . jsRoot ;
Code	return parent . < parent > isLValueRootedInGlobalScope () . jsRoot ;
Distance : 9

286
Tree	return parent . < parent > getName () . jsRoot ;
Code	return parent . < parent > getName () . jsRoot ;
Distance : 9

287
Tree	return NodeUtil . < parent > getNormalizedReferenceName () . UNKNOWN ;
Code	return NodeUtil . < parent > getNormalizedReferenceName () . UNKNOWN ;
Distance : 9

288
Tree	return firstArg ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return firstArg ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

289
Tree	return parent . < parent > getUseSitesByName () . jsRoot ;
Code	return parent . < parent > getUseSitesByName () . jsRoot ;
Distance : 9

290
Tree	return firstArg ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return firstArg ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

291
Tree	return new Token ( STRING_CONSTANT , LINE_JOINER ) ;
Code	return new Token ( STRING_CONSTANT , LINE_JOINER ) ;
Distance : 7

292
Tree	return TernaryValue.UNKNOWN . isRoot () ;
Code	return TernaryValue.UNKNOWN . isRoot () ;
Distance : 3

293
Tree	return n . < parent > isLValueRootedInGlobalScope () . jsRoot ;
Code	return n . < parent > isLValueRootedInGlobalScope () . jsRoot ;
Distance : 9

294
Tree	return getDeclaredTypeForOwnBody ( STRING_CONSTANT ) ;
Code	return getDeclaredTypeForOwnBody ( STRING_CONSTANT ) ;
Distance : 4

295
Tree	return TernaryValue.UNKNOWN . trim () ;
Code	return TernaryValue.UNKNOWN . trim () ;
Distance : 3

296
Tree	return compiler . path () >= NUMBER_CONSTANT ;
Code	return compiler . path () >= NUMBER_CONSTANT ;
Distance : 6

297
Tree	return TernaryValue.UNKNOWN . getIterableTemplate () ;
Code	return TernaryValue.UNKNOWN . getIterableTemplate () ;
Distance : 3

298
Tree	return TernaryValue.UNKNOWN . getInstanceType () ;
Code	return TernaryValue.UNKNOWN . getInstanceType () ;
Distance : 3

299
Tree	return TernaryValue.UNKNOWN . getEmptyObjectLiteral () ;
Code	return TernaryValue.UNKNOWN . getEmptyObjectLiteral () ;
Distance : 3

300
Tree	return NodeUtil . < parent > getName () . jsRoot ;
Code	return NodeUtil . < parent > getName () . jsRoot ;
Distance : 9

301
Tree	return compiler . getFirstChild () >= NUMBER_CONSTANT ;
Code	return compiler . getFirstChild () >= NUMBER_CONSTANT ;
Distance : 6

302
Tree	return getTopObject ( TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

303
Tree	return getLhs ( TernaryValue.UNKNOWN ) . that () ;
Code	return getLhs ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

304
Tree	return STRING_CONSTANT + arguments + STRING_CONSTANT + parent ;
Code	return STRING_CONSTANT + arguments + STRING_CONSTANT + parent ;
Distance : 7

305
Tree	return replacement . get () >= NUMBER_CONSTANT ;
Code	return replacement . get () >= NUMBER_CONSTANT ;
Distance : 6

306
Tree	return firstArg . get () >= NUMBER_CONSTANT ;
Code	return firstArg . get () >= NUMBER_CONSTANT ;
Distance : 6

307
Tree	return getCommonTypes ( TernaryValue.UNKNOWN ) . that () ;
Code	return getCommonTypes ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

308
Tree	return isNamedType ( TernaryValue.UNKNOWN ) . that () ;
Code	return isNamedType ( TernaryValue.UNKNOWN ) . that () ;
Distance : 6

309
Tree	return getObjectType ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getObjectType ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

310
Tree	return n . getParent () >= NUMBER_CONSTANT ;
Code	return n . getParent () >= NUMBER_CONSTANT ;
Distance : 6

311
Tree	return parent . get () >= NUMBER_CONSTANT ;
Code	return parent . get () >= NUMBER_CONSTANT ;
Distance : 6

312
Tree	return new JSTypeExpression ( STRING_CONSTANT ) ;
Code	return new JSTypeExpression ( STRING_CONSTANT ) ;
Distance : 5

313
Tree	return TernaryValue.UNKNOWN . substituteGenerics () ;
Code	return TernaryValue.UNKNOWN . substituteGenerics () ;
Distance : 3

314
Tree	return CHAR_CONS ( new StringBuilder ( propertyName ) , TernaryValue.UNKNOWN ) . that () ;
Code	return CHAR_CONS ( new StringBuilder ( propertyName ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

315
Tree	return TernaryValue.UNKNOWN . getParent () ;
Code	return TernaryValue.UNKNOWN . getParent () ;
Distance : 3

316
Tree	return parent . getParent () >= NUMBER_CONSTANT ;
Code	return parent . getParent () >= NUMBER_CONSTANT ;
Distance : 6

317
Tree	return getTopObject ( new StringBuilder ( typeMap ) , TernaryValue.UNKNOWN ) . that () ;
Code	return getTopObject ( new StringBuilder ( typeMap ) , TernaryValue.UNKNOWN ) . that () ;
Distance : 12

318
Tree	return replacement ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return replacement ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

319
Tree	return parent ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return parent ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

320
Tree	return this ? TernaryValue.TRUE : TernaryValue.TRUE ;
Code	return this ? TernaryValue.TRUE : TernaryValue.TRUE ;
Distance : 5

321
Tree	return TernaryValue.UNKNOWN ; of
Code	return TernaryValue.UNKNOWN ; of
Distance : 1

322
Tree	return null ; options
Code	return null ; options
Distance : 2

323
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 16

324
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; NUMBER_CONSTANT
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; NUMBER_CONSTANT
Distance : 14

325
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; super
Distance : 14

326
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; checkNotNull
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; checkNotNull
Distance : 16

327
Tree	return TernaryValue.UNKNOWN ; false
Code	return TernaryValue.UNKNOWN ; false
Distance : 1

328
Tree	return default: ;
Code	return default: ;
Distance : 1

329
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; t
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; t
Distance : 14

330
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

331
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; js
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; js
Distance : 14

332
Tree	return STRING_CONSTANT + STRING_CONSTANT ; checkNotNull
Code	return STRING_CONSTANT + STRING_CONSTANT ; checkNotNull
Distance : 4

333
Tree	return firstArg ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return firstArg ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

334
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; getParent
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; getParent
Distance : 14

335
Tree	return null ; get
Code	return null ; get
Distance : 2

336
Tree	return break; ;
Code	return break; ;
Distance : 1

337
Tree	return null ; Node
Code	return null ; Node
Distance : 2

338
Tree	return n . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return n . getParent ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

339
Tree	return STRING_CONSTANT + STRING_CONSTANT ; NUMBER_CONSTANT
Code	return STRING_CONSTANT + STRING_CONSTANT ; NUMBER_CONSTANT
Distance : 4

340
Tree	return null ; for
Code	return null ; for
Distance : 2

341
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; setUp
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; setUp
Distance : 14

342
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; :
Distance : 14

343
Tree	return parent ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Code	return parent ? TernaryValue.TRUE : TernaryValue.UNKNOWN ;
Distance : 4

344
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; checkNotNull
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; checkNotNull
Distance : 14

345
Tree	return STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Code	return STRING_CONSTANT + STRING_CONSTANT ; TypeInferenceMode.NEITHER
Distance : 4

346
Tree	return STRING_CONSTANT + STRING_CONSTANT ; super
Code	return STRING_CONSTANT + STRING_CONSTANT ; super
Distance : 4

347
Tree	return STRING_CONSTANT + STRING_CONSTANT ; :
Code	return STRING_CONSTANT + STRING_CONSTANT ; :
Distance : 4

348
Tree	return TernaryValue.UNKNOWN ; checkNotNull
Code	return TernaryValue.UNKNOWN ; checkNotNull
Distance : 1

349
Tree	return getCommonTypes ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Code	return getCommonTypes ( TernaryValue.UNKNOWN , TernaryValue.UNKNOWN ) . that () ;
Distance : 8

350
Tree	return TernaryValue.UNKNOWN ; node
Code	return TernaryValue.UNKNOWN ; node
Distance : 1

351
Tree	return continue; ;
Code	return continue; ;
Distance : 1

352
Tree	return TernaryValue.UNKNOWN ; setUp
Code	return TernaryValue.UNKNOWN ; setUp
Distance : 1

353
Tree	return STRING_CONSTANT + STRING_CONSTANT ; t
Code	return STRING_CONSTANT + STRING_CONSTANT ; t
Distance : 4

354
Tree	return TernaryValue.UNKNOWN ; >
Code	return TernaryValue.UNKNOWN ; >
Distance : 1

355
Tree	return TernaryValue.UNKNOWN ; js
Code	return TernaryValue.UNKNOWN ; js
Distance : 1

356
Tree	return STRING_CONSTANT + STRING_CONSTANT ; js
Code	return STRING_CONSTANT + STRING_CONSTANT ; js
Distance : 4

357
Tree	return TernaryValue.UNKNOWN ; block
Code	return TernaryValue.UNKNOWN ; block
Distance : 1

358
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; NUMBER_CONSTANT
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; NUMBER_CONSTANT
Distance : 16

359
Tree	return TernaryValue.UNKNOWN ; false
Code	return TernaryValue.UNKNOWN ; false
Distance : 1

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 190
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Distance : 7

1
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

2
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { append ( sb , c ) ; }
Distance : 8

3
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

4
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Distance : 8

5
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == E ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == E ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

6
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Distance : 8

7
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

8
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

9
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Distance : 8

10
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . appendHexJavaScriptRepresentation ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . appendHexJavaScriptRepresentation ( c ) ; }
Distance : 8

11
Tree	if ( c && c == Mode.ES8_OR_GREATER ) { sb = - sb ; } else { c . append ( c ) ; }
Code	if ( c && c == Mode.ES8_OR_GREATER ) { sb = - sb ; } else { c . append ( c ) ; }
Distance : 13

12
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

13
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 7

14
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

15
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = addRequire ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = addRequire ; } else { append ( sb , c ) ; }
Distance : 7

16
Tree	if ( c >= NUMBER_CONSTANT && isClinitMethod == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && isClinitMethod == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

17
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

18
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { append ( sb , c ) ; }
Distance : 8

19
Tree	if ( c >= NUMBER_CONSTANT && objType.nominalType == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && objType.nominalType == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

20
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

21
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { append ( sb , c ) ; }
Distance : 10

22
Tree	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

23
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , c ) ; }
Distance : 10

24
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 9

25
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

26
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

27
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

28
Tree	if ( c && c == Token.AND ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == Token.AND ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

29
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Distance : 7

30
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = NewTypeInference.MISTYPED_ASSIGN_RHS ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = NewTypeInference.MISTYPED_ASSIGN_RHS ; } else { append ( sb , c ) ; }
Distance : 7

31
Tree	if ( c && c == Token.AND ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == Token.AND ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

32
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

33
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

34
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb , c ) ; }
Distance : 10

35
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

36
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( sb ) ; }
Distance : 9

37
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { append ( sb , c ) ; }
Distance : 8

38
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

39
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( sb ) ; }
Distance : 15

40
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Distance : 7

41
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

42
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 6

43
Tree	if ( c && c == JsDocToken.PIPE ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == JsDocToken.PIPE ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

44
Tree	if ( c && c == ModuleType.GOOG_MODULE ) { sb = - sb ; } else { c . append ( c ) ; }
Code	if ( c && c == ModuleType.GOOG_MODULE ) { sb = - sb ; } else { c . append ( c ) ; }
Distance : 13

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb , c ) ; }
Distance : 10

46
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 2

47
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

48
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 6

49
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

50
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

51
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 10

52
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( c , c ) ; }
Distance : 11

53
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 8

54
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 7

55
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 7

56
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 5

57
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { append ( sb , c ) ; }
Distance : 8

58
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

59
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 6

60
Tree	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = sb - c ; } else { c . append ( c ) ; }
Code	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = sb - c ; } else { c . append ( c ) ; }
Distance : 14

61
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( sb ) ; }
Distance : 14

62
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

63
Tree	if ( c && c == Mode.ES8_OR_GREATER ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == Mode.ES8_OR_GREATER ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

64
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = com.google.javascript.jscomp.ConformanceConfig ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = com.google.javascript.jscomp.ConformanceConfig ; } else { append ( sb , c ) ; }
Distance : 7

65
Tree	if ( c && c == Mode.ES8_OR_GREATER ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == Mode.ES8_OR_GREATER ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

66
Tree	if ( c && c == ModuleType.GOOG_MODULE ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == ModuleType.GOOG_MODULE ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

67
Tree	if ( c && c == ModuleType.GOOG_MODULE ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == ModuleType.GOOG_MODULE ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

68
Tree	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

69
Tree	if ( c == DecompositionType.UNDECOMPOSABLE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.UNDECOMPOSABLE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

70
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( sb ) ; }
Distance : 14

71
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

72
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 4

73
Tree	if ( c && c == Annotation.IMPLEMENTS ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == Annotation.IMPLEMENTS ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

74
Tree	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == DecompositionType.UNDECOMPOSABLE ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

75
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 3

76
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 5

77
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 6

78
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 3

79
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { sb . append ( c ) ; }
Distance : 8

80
Tree	if ( c == that.cache.functionScope ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == that.cache.functionScope ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

81
Tree	if ( sb >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , c ) ; }
Distance : 11

82
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . appendHexJavaScriptRepresentation ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . appendHexJavaScriptRepresentation ( sb ) ; }
Distance : 13

83
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { sb . append ( c ) ; }
Distance : 8

84
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

85
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

86
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = append ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 6

87
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 6

88
Tree	if ( c && c == JsDocToken.PIPE ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == JsDocToken.PIPE ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

89
Tree	if ( c == ModuleType.GOOG_MODULE ) { sb = sb - c ; } else { c . append ( c ) ; }
Code	if ( c == ModuleType.GOOG_MODULE ) { sb = sb - c ; } else { c . append ( c ) ; }
Distance : 14

90
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

91
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 2

92
Tree	if ( c == exception ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == exception ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

93
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { sb . append ( sb , c ) ; }
Distance : 10

94
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 4

95
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Distance : 7

96
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 7

97
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 9

98
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Distance : 7

99
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

100
Tree	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == IncrementalCheckMode.GENERATE_IJS ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

101
Tree	if ( c >= NUMBER_CONSTANT && c != default: ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != default: ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

102
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 5

103
Tree	if ( c && c == Annotation.IMPLEMENTS ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == Annotation.IMPLEMENTS ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

104
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { sb . append ( sb ) ; }
Distance : 12

105
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { sb . append ( sb ) ; }
Distance : 12

106
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { append ( sb , c ) ; }
Distance : 8

107
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = append ; } else { append ( sb , c ) ; }
Distance : 6

108
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { append ( sb , c ) ; }
Distance : 8

109
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { sb . append ( sb ) ; }
Distance : 12

110
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { append ( sb , sb ) ; }
Distance : 11

111
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = functionTree.access ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = functionTree.access ; } else { append ( sb , c ) ; }
Distance : 7

112
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

113
Tree	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = - sb ; } else { c . append ( c ) ; }
Code	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = - sb ; } else { c . append ( c ) ; }
Distance : 13

114
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 5

115
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 4

116
Tree	if ( c && c == IncrementalCheckMode.GENERATE_IJS ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == IncrementalCheckMode.GENERATE_IJS ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

117
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

118
Tree	if ( c && c == Mode.ES8_OR_GREATER ) { sb = append ; } else { c . append ( sb ) ; }
Code	if ( c && c == Mode.ES8_OR_GREATER ) { sb = append ; } else { c . append ( sb ) ; }
Distance : 13

119
Tree	if ( c && c == Token.BLOCK ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c && c == Token.BLOCK ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 13

120
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . append ( sb ) ; }
Distance : 9

121
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { c . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { c . append ( sb , c ) ; }
Distance : 10

122
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { sb . append ( sb , c ) ; }
Distance : 10

123
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { c . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { c . append ( sb , c ) ; }
Distance : 10

124
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . appendHexJavaScriptRepresentation ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . appendHexJavaScriptRepresentation ( c ) ; }
Distance : 8

125
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 3

126
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

127
Tree	if ( c == p.newName ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == p.newName ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

128
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

129
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

130
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = ModuleType.ES6 ; } else { append ( sb , c ) ; }
Distance : 8

131
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

132
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { append ( sb , c ) ; }
Distance : 8

133
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { append ( sb , c ) ; }
Distance : 7

134
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = sb ; } else { append ( sb , c ) ; }
Distance : 8

135
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

136
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 1

137
Tree	if ( c == ScopeType.EXEC_CONTEXT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == ScopeType.EXEC_CONTEXT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

138
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { c . append ( sb ) ; }
Distance : 15

139
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = addRequire ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = addRequire ; } else { append ( sb , c ) ; }
Distance : 8

140
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { sb . append ( sb , c ) ; }
Distance : 10

141
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { c . append ( sb ) ; }
Distance : 12

142
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 6

143
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { sb . append ( sb ) ; }
Distance : 12

144
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb , c ) ; }
Distance : 9

145
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 5

146
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { c . append ( c ) ; }
Distance : 8

147
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = cacheEntry.input ; } else { c . append ( sb ) ; }
Distance : 12

148
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 6

149
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { sb . append ( sb ) ; }
Distance : 12

150
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { sb . append ( sb ) ; }
Distance : 11

151
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

152
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { append ( sb , c ) ; }
Distance : 11

153
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb , c ) ; }
Distance : 9

154
Tree	if ( c == ModuleType.GOOG_MODULE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c == ModuleType.GOOG_MODULE ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 14

155
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

156
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

157
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = sb ; } else { sb . append ( sb ) ; }
Distance : 12

158
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

159
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

160
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { append ( sb , c ) ; }
Distance : 7

161
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 8

162
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . appendHexJavaScriptRepresentation ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . appendHexJavaScriptRepresentation ( sb ) ; }
Distance : 13

163
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

164
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , sb ) ; }
Distance : 8

165
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { c . append ( sb ) ; }
Distance : 11

166
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = testObjectDestructuringBasicAssign ; } else { append ( sb , c ) ; }
Distance : 8

167
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { sb . append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = recordPassStart ; } else { sb . append ( sb , c ) ; }
Distance : 10

168
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = ModuleType.LEGACY_GOOG_MODULE ; } else { append ( sb , c ) ; }
Distance : 8

169
Tree	if ( c >= NUMBER_CONSTANT && error.description == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && error.description == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

170
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { c . append ( c ) ; }
Distance : 8

171
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == Token.BLOCK ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == Token.BLOCK ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

172
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { append ( sb , c ) ; }
Distance : 8

173
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

174
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == TokenType.STRING ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == TokenType.STRING ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

175
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 5

176
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = addRequire ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = addRequire ; } else { append ( sb , c ) ; }
Distance : 8

177
Tree	if ( c >= NUMBER_CONSTANT && shouldPreserve == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && shouldPreserve == current.parent.scopes ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

178
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . appendHexJavaScriptRepresentation ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . appendHexJavaScriptRepresentation ( sb ) ; }
Distance : 8

179
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

180
Tree	if ( c >= NUMBER_CONSTANT && current.scopes == Token.BANG ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && current.scopes == Token.BANG ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 7

181
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 13

182
Tree	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 5

183
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Distance : 13

184
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( sb ) ; }
Distance : 14

185
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 10

186
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = append ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 6

187
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 2

188
Tree	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c && c == ScopeType.EXEC_CONTEXT ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 14

189
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { c . append ( sb ) ; }
Distance : 14

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 260
Wrong
========================================================================
False

0
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

1
Tree	{ astParameter . defineSlot () ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; functionNode = astParameter . getNext () ; }
Distance : 12

2
Tree	{ functionNode . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

3
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

4
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

5
Tree	{ astParameter . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

6
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

7
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

8
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 6

9
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

10
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 8

11
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 7

12
Tree	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

13
Tree	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

14
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 9

15
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

16
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

17
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

18
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 11

19
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

20
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

21
Tree	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 11

22
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 8

23
Tree	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 11

24
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

25
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 9

26
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

27
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 13

28
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , jsDocParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

29
Tree	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( functionNode , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 9

30
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

31
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 5

32
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

33
Tree	{ astParameter . defineSlot () ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; functionNode = jsDocParameter . getNext () ; }
Distance : 11

34
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

35
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 4

36
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

37
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

38
Tree	{ astParameter . defineSlot () ; astParameter = functionNode . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = functionNode . getNext () ; }
Distance : 12

39
Tree	{ functionNode . defineSlot () ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; functionNode = astParameter . getNext () ; }
Distance : 12

40
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 6

41
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 6

42
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 5

43
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

44
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

45
Tree	{ astParameter . defineSlot () . defineSlot ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . defineSlot ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

46
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

47
Tree	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

48
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

49
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 8

50
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 8

51
Tree	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

52
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 10

53
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

54
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

55
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

56
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

57
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

58
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

59
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 11

60
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 10

61
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

62
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

63
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

64
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

65
Tree	{ astParameter . defineSlot () . defineSlot ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . defineSlot ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

66
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 10

67
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

68
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 10

69
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 10

70
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

71
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

72
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

73
Tree	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

74
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 7

75
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 9

76
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

77
Tree	{ astParameter . defineSlot () . getJSType ( commaToken.location.start , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( commaToken.location.start , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

78
Tree	{ astParameter . defineSlot () . getJSType ( commaToken.location.start , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( commaToken.location.start , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

79
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

80
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

81
Tree	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

82
Tree	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( JSTypeNative.VOID_TYPE , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

83
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

84
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ; functionNode = astParameter . getNext () ; }
Distance : 11

85
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

86
Tree	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( Feature.ARROW_FUNCTIONS , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

87
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 9

88
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 10

89
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , functionNode ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , functionNode ) ; functionNode = astParameter . getNext () ; }
Distance : 10

90
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 8

91
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

92
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

93
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 9

94
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 8

95
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 9

96
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 8

97
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

98
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 7

99
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

100
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

101
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

102
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

103
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = functionNode . getNext () ; }
Distance : 9

104
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

105
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getJSType () ; }
Distance : 8

106
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

107
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

108
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 8

109
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

110
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

111
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

112
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

113
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 11

114
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

115
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

116
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

117
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 9

118
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

119
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

120
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

121
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

122
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

123
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 8

124
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

125
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

126
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

127
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = functionNode . getNext () ; }
Distance : 7

128
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

129
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 7

130
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

131
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 8

132
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

133
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

134
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

135
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

136
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

137
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

138
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

139
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , functionNode . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

140
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

141
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

142
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 8

143
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

144
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

145
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 7

146
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

147
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

148
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

149
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

150
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

151
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; functionNode = astParameter . getNext () ; }
Distance : 11

152
Tree	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

153
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 6

154
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

155
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 8

156
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

157
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; astParameter = astParameter . getNext () ; }
Distance : 11

158
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

159
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 8

160
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 10

161
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , pair.env ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , pair.env ) ; functionNode = astParameter . getNext () ; }
Distance : 11

162
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 7

163
Tree	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

164
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 9

165
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

166
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

167
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , prevChild.next ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , prevChild.next ) ; functionNode = astParameter . getNext () ; }
Distance : 11

168
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

169
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 9

170
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

171
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

172
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

173
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 8

174
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

175
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

176
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Distance : 6

177
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , var.name ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , var.name ) ; functionNode = astParameter . getNext () ; }
Distance : 11

178
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

179
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , pair.env , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

180
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

181
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

182
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 8

183
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

184
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

185
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

186
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 15

187
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , pair.env ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , pair.env ) ; astParameter = astParameter . getNext () ; }
Distance : 11

188
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , astParameter . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

189
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 7

190
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

191
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , var.name ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , var.name ) ; astParameter = astParameter . getNext () ; }
Distance : 11

192
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , importedName.value ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , importedName.value ) ; functionNode = astParameter . getNext () ; }
Distance : 11

193
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , Feature.ASYNC_FUNCTIONS , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , Feature.ASYNC_FUNCTIONS , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

194
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 15

195
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 7

196
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 14

197
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 14

198
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

199
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

200
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 4

201
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 4

202
Tree	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

203
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 8

204
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 9

205
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

206
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

207
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

208
Tree	{ functionNode . defineSlot () ; functionNode = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; functionNode = jsDocParameter . getNext () ; }
Distance : 11

209
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

210
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 14

211
Tree	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( astParameter , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

212
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

213
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 14

214
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 15

215
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

216
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Distance : 11

217
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 5

218
Tree	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( jsDocParameter , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 9

219
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

220
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 8

221
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , jsDocParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , jsDocParameter . getNext () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 14

222
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

223
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

224
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , jsDocParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , jsDocParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 14

225
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 13

226
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 6

227
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = functionNode . getNext () ; }
Distance : 9

228
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

229
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

230
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 12

231
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Distance : 11

232
Tree	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 10

233
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

234
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 12

235
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 12

236
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; functionNode = functionNode . getNext () ; }
Distance : 10

237
Tree	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , astParameter , astParameter ) ; astParameter = functionNode . getNext () ; }
Distance : 10

238
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

239
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Distance : 11

240
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 11

241
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 11

242
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 9

243
Tree	{ functionNode . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 13

244
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Distance : 11

245
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 10

246
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , astParameter . getNext () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

247
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 11

248
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

249
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 12

250
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , jsDocParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , jsDocParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 11

251
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , astParameter . getNext () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

252
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , astParameter . getNext () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 11

253
Tree	{ defineSlot ( astParameter , astParameter , astParameter , jsDocParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , jsDocParameter , astParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 11

254
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () , jsDocParameter , astParameter , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

255
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; functionNode = astParameter . getNext () ; }
Distance : 11

256
Tree	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , NUMBER_CONSTANT , astParameter , NUMBER_CONSTANT , jsDocParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 11

257
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () , astParameter , astParameter , true ) ; astParameter = astParameter . getNext () ; }
Distance : 11

258
Tree	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , jsDocParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode , astParameter , jsDocParameter . getNext () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 10

259
Tree	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , jsDocParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter , astParameter , jsDocParameter . getNext () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 11

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 480
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

1
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

2
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

3
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

4
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

5
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , null ) ; }
Distance : 9

6
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

7
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

8
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

9
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

10
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

11
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

12
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; }
Distance : 8

13
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

14
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

15
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

16
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 9

17
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

18
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Distance : 11

19
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

20
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

21
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

22
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

23
Tree	if ( token == ( ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token == ( ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 10

24
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

25
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

26
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

27
Tree	if ( token != ( ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

28
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

29
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

30
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

31
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

32
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

33
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

34
Tree	if ( token == break; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == break; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

35
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

36
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

37
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

38
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Distance : 9

39
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } options
Distance : 11

40
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } Node
Distance : 11

41
Tree	if ( token != null ) { return token . token ( token ) ; } get
Code	if ( token != null ) { return token . token ( token ) ; } get
Distance : 9

42
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Distance : 7

43
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Distance : 7

44
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 7

45
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } get
Distance : 11

46
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } options
Distance : 10

47
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; } get
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; } get
Distance : 10

48
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } for
Distance : 10

49
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } Node
Distance : 10

50
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 8

51
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Distance : 8

52
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } get
Distance : 9

53
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } for
Distance : 9

54
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } options
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } options
Distance : 12

55
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; } get
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; } get
Distance : 10

56
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } for
Distance : 10

57
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

58
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } Node
Distance : 12

59
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } options
Distance : 12

60
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } Node
Distance : 12

61
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } options
Distance : 12

62
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( CHAR_CONS ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( CHAR_CONS ) ; }
Distance : 8

63
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

64
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( null , null ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( null , null ) ; }
Distance : 9

65
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

66
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

67
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , continue; , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , continue; , token , token ) ; }
Distance : 9

68
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

69
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

70
Tree	if ( reportTypeSyntaxWarning () == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

71
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

72
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , break; , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , break; , token , token ) ; }
Distance : 9

73
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

74
Tree	if ( reportTypeSyntaxWarning () == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

75
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

76
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

77
Tree	if ( token != continue; ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != continue; ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

78
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Distance : 11

79
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

80
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

81
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

82
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

83
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

84
Tree	if ( token != return; ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != return; ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

85
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , default: ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , default: ) ; }
Distance : 9

86
Tree	if ( token == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

87
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

88
Tree	if ( token != default: ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != default: ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

89
Tree	if ( token != continue; ) { return token . STRING_CONSTANT ( ( token ) null ) ; }
Code	if ( token != continue; ) { return token . STRING_CONSTANT ( ( token ) null ) ; }
Distance : 10

90
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

91
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( ( token ) return; ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( ( token ) return; ) ; }
Distance : 10

92
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

93
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

94
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , break; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , break; ) ; }
Distance : 9

95
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , break; ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , break; ) ; }
Distance : 9

96
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

97
Tree	if ( token == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

98
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

99
Tree	if ( token != continue; ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Code	if ( token != continue; ) { return token . STRING_CONSTANT ( token , token , this ) ; }
Distance : 11

100
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

101
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

102
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

103
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

104
Tree	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 10

105
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

106
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( break; , null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( break; , null ) ; }
Distance : 9

107
Tree	if ( token != null ) { return token . STRING_CONSTANT ( break; , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( break; , token ) ; }
Distance : 9

108
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , return; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , return; ) ; }
Distance : 9

109
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Distance : 9

110
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

111
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

112
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Distance : 8

113
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

114
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

115
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

116
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

117
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Distance : 8

118
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

119
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Distance : 11

120
Tree	if ( token . JsDocToken.LP ( token ) == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

121
Tree	if ( token != continue; ) { return token . token ( token ) ; }
Code	if ( token != continue; ) { return token . token ( token ) ; }
Distance : 8

122
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

123
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

124
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

125
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , continue; ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , continue; ) ; }
Distance : 9

126
Tree	if ( token != default: ) { return token . token ( token ) ; }
Code	if ( token != default: ) { return token . token ( token ) ; }
Distance : 8

127
Tree	if ( token != null ) { return token . STRING_CONSTANT ( default: , null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( default: , null ) ; }
Distance : 9

128
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } options
Distance : 12

129
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } Node
Distance : 10

130
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } :
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } :
Distance : 8

131
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } get
Distance : 8

132
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } for
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } for
Distance : 9

133
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Distance : 9

134
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } get
Distance : 10

135
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } for
Distance : 9

136
Tree	if ( token != null ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; } Node
Code	if ( token != null ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; } Node
Distance : 9

137
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

138
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

139
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } getParent
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } getParent
Distance : 9

140
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Distance : 8

141
Tree	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Code	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Distance : 10

142
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } setUp
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } setUp
Distance : 9

143
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } checkNotNull
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } checkNotNull
Distance : 9

144
Tree	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

145
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } for
Distance : 9

146
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } Node
Distance : 9

147
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } options
Distance : 9

148
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 8

149
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

150
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } for
Distance : 8

151
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } Node
Distance : 9

152
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } get
Distance : 8

153
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } NUMBER_CONSTANT
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } NUMBER_CONSTANT
Distance : 9

154
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } Node
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } Node
Distance : 12

155
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , ( inheritedPropDef.methodType [] ) null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , ( inheritedPropDef.methodType [] ) null ) ; }
Distance : 12

156
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; } options
Distance : 12

157
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 6

158
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Distance : 6

159
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 6

160
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 7

161
Tree	if ( token == null ) { return token . STRING_CONSTANT ( token , token ) ; } for
Code	if ( token == null ) { return token . STRING_CONSTANT ( token , token ) ; } for
Distance : 11

162
Tree	if ( token != null ) { return token . token ( token ) ; } get
Code	if ( token != null ) { return token . token ( token ) ; } get
Distance : 9

163
Tree	if ( token != null ) { return token . token ( token ) ; } for
Code	if ( token != null ) { return token . token ( token ) ; } for
Distance : 9

164
Tree	if ( token != null ) { return token . token ( token ) ; } Node
Code	if ( token != null ) { return token . token ( token ) ; } Node
Distance : 9

165
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

166
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

167
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

168
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } options
Distance : 10

169
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } get
Distance : 10

170
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } for
Distance : 10

171
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } Node
Distance : 10

172
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

173
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 7

174
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Distance : 7

175
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } get
Distance : 9

176
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } for
Distance : 9

177
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token , token , token ) ; } get
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token , token , token ) ; } get
Distance : 12

178
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; } for
Distance : 12

179
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; } Node
Distance : 12

180
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , token ( STRING_CONSTANT ) ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , token ( STRING_CONSTANT ) ) ; } options
Distance : 10

181
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 8

182
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

183
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 6

184
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; } Node
Distance : 10

185
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

186
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

187
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } js
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } js
Distance : 8

188
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } getParent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } getParent
Distance : 8

189
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

190
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } setUp
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } setUp
Distance : 8

191
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 6

192
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Distance : 6

193
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Distance : 6

194
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Distance : 8

195
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } options
Distance : 9

196
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

197
Tree	if ( token != continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

198
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( CHAR_CONS ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( CHAR_CONS ) ; }
Distance : 8

199
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 6

200
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

201
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TypeInferenceMode.NEITHER
Distance : 6

202
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } Node
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } Node
Distance : 12

203
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } Node
Distance : 9

204
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } for
Distance : 12

205
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

206
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } Node
Distance : 9

207
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

208
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } get
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } get
Distance : 9

209
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( continue; , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( continue; , token ) ; }
Distance : 9

210
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } for
Distance : 9

211
Tree	if ( token != null ) { return token . token ( token ) ; } Node
Code	if ( token != null ) { return token . token ( token ) ; } Node
Distance : 9

212
Tree	if ( token == default: ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == default: ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

213
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } Node
Distance : 8

214
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } get
Distance : 9

215
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( null , null ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( null , null ) ; }
Distance : 9

216
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Distance : 9

217
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } for
Distance : 8

218
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

219
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

220
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } checkNotNull
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } checkNotNull
Distance : 8

221
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 5

222
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( null , token ) ; }
Distance : 9

223
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

224
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

225
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 5

226
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Distance : 7

227
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

228
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , default: , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , default: , token , token ) ; }
Distance : 9

229
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

230
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

231
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

232
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } for
Distance : 8

233
Tree	if ( token != continue; ) { return token . token ( token ) ; }
Code	if ( token != continue; ) { return token . token ( token ) ; }
Distance : 8

234
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 7

235
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; } get
Distance : 9

236
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

237
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

238
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Distance : 10

239
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } t
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } t
Distance : 8

240
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } for
Distance : 12

241
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

242
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , ( currentScript.defaultExportLocalName [] ) null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , ( currentScript.defaultExportLocalName [] ) null ) ; }
Distance : 12

243
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } options
Distance : 9

244
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Distance : 6

245
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

246
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

247
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } Node
Distance : 9

248
Tree	if ( token != break; ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != break; ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

249
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } Node
Distance : 10

250
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } for
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } for
Distance : 12

251
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

252
Tree	if ( token != ( ) { return token . token ( token ) ; }
Code	if ( token != ( ) { return token . token ( token ) ; }
Distance : 8

253
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } for
Distance : 9

254
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

255
Tree	if ( token != ( ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != ( ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

256
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Distance : 6

257
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Distance : 6

258
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } get
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; } get
Distance : 12

259
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } for
Distance : 9

260
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( IncrementalCheckMode.GENERATE_IJS [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( IncrementalCheckMode.GENERATE_IJS [] ) null ) ; }
Distance : 12

261
Tree	if ( token . JsDocToken.LP ( token ) == ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

262
Tree	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Code	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Distance : 10

263
Tree	if ( reportTypeSyntaxWarning () == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 9

264
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 6

265
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Distance : 8

266
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , token ) ; }
Distance : 9

267
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } options
Distance : 9

268
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } get
Distance : 8

269
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

270
Tree	if ( token != break; ) { return token . token ( token ) ; }
Code	if ( token != break; ) { return token . token ( token ) ; }
Distance : 8

271
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } get
Distance : 9

272
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } options
Distance : 8

273
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } get
Distance : 10

274
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } Node
Distance : 8

275
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } js
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } js
Distance : 9

276
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } Node
Distance : 9

277
Tree	if ( token != ( ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != ( ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

278
Tree	if ( token . JsDocToken.LP ( token ) == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

279
Tree	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Code	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Distance : 10

280
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

281
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

282
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; } get
Distance : 12

283
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

284
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

285
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } get
Distance : 8

286
Tree	if ( token != continue; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

287
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

288
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; } for
Distance : 10

289
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( ( () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( ( () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

290
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Distance : 9

291
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

292
Tree	if ( token == continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

293
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

294
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

295
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

296
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } get
Distance : 8

297
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

298
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Distance : 11

299
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } options
Distance : 10

300
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

301
Tree	if ( token != ( ) { return token . token ( token ) ; }
Code	if ( token != ( ) { return token . token ( token ) ; }
Distance : 8

302
Tree	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

303
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

304
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( token , token , token , token ) ; }
Distance : 11

305
Tree	if ( token . JsDocToken.LP ( token ) == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

306
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

307
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

308
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; } for
Distance : 11

309
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

310
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

311
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } options
Distance : 8

312
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Distance : 10

313
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( ( token ) null ) ; }
Distance : 10

314
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( this , token , token ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( this , token , token ) ; }
Distance : 11

315
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 7

316
Tree	if ( token == ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

317
Tree	if ( token == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

318
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } Node
Distance : 10

319
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

320
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( this , token ) ; } for
Distance : 10

321
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 8

322
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; }
Distance : 7

323
Tree	if ( token != null ) { return token . token ( token ) ; } options
Code	if ( token != null ) { return token . token ( token ) ; } options
Distance : 9

324
Tree	if ( token != null ) { return token . token ( token ) ; } options
Code	if ( token != null ) { return token . token ( token ) ; } options
Distance : 9

325
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Distance : 11

326
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; } get
Distance : 12

327
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

328
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Distance : 7

329
Tree	if ( token () == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token () == return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

330
Tree	if ( token != null ) { return token . token ( token ) ; } for
Code	if ( token != null ) { return token . token ( token ) ; } for
Distance : 9

331
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Distance : 7

332
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

333
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } for
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } for
Distance : 9

334
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } Node
Distance : 9

335
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Distance : 8

336
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( nextLine [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( nextLine [] ) null ) ; }
Distance : 12

337
Tree	if ( token != null ) { return token . STRING_CONSTANT ( null , ( Token [] ) null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( null , ( Token [] ) null ) ; }
Distance : 12

338
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Distance : 7

339
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

340
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( ExportInfo [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( ExportInfo [] ) null ) ; }
Distance : 12

341
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) continue; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) continue; ) ; }
Distance : 10

342
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } for
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } for
Distance : 9

343
Tree	if ( token == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

344
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( Callback [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( Callback [] ) null ) ; }
Distance : 12

345
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Distance : 8

346
Tree	if ( token != break; ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Distance : 8

347
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

348
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Distance : 8

349
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } get
Distance : 9

350
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( token , token , token ) ; }
Distance : 9

351
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

352
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) default: ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) default: ) ; }
Distance : 10

353
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } get
Distance : 12

354
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; } get
Distance : 9

355
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

356
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( NameContext [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( NameContext [] ) null ) ; }
Distance : 12

357
Tree	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; }
Code	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; }
Distance : 9

358
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

359
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

360
Tree	if ( token != continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != continue; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 9

361
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

362
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } options
Distance : 9

363
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , return; , token , token ) ; }
Distance : 9

364
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

365
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

366
Tree	if ( token == return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token == return; ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 10

367
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

368
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , token ( STRING_CONSTANT ) ) ; }
Distance : 9

369
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

370
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } Node
Distance : 9

371
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } for
Distance : 10

372
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

373
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } Node
Distance : 9

374
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

375
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

376
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } for
Distance : 9

377
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

378
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) return; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) return; ) ; }
Distance : 10

379
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Distance : 6

380
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ( STRING_CONSTANT ) , token ( STRING_CONSTANT ) ) ; }
Distance : 10

381
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token , token , token ) ; }
Distance : 11

382
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

383
Tree	if ( token != default: ) { return token . token ( token ) ; }
Code	if ( token != default: ) { return token . token ( token ) ; }
Distance : 8

384
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

385
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } for
Distance : 8

386
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } Node
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( CHAR_CONS ) ; } Node
Distance : 8

387
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , default: ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , default: ) ; }
Distance : 9

388
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

389
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

390
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

391
Tree	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( reportTypeSyntaxWarning () == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 10

392
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

393
Tree	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } get
Code	if ( token == null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } get
Distance : 11

394
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( this , token , token ) ; }
Distance : 11

395
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } Node
Distance : 10

396
Tree	if ( token != ( ) { return token . STRING_CONSTANT ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != ( ) { return token . STRING_CONSTANT ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 9

397
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

398
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

399
Tree	if ( token != ( ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != ( ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

400
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

401
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token , token ) ; } get
Distance : 10

402
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } options
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } options
Distance : 10

403
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Distance : 8

404
Tree	if ( token != ( ) { return token . STRING_CONSTANT ( STRING_CONSTANT , token ) ; }
Code	if ( token != ( ) { return token . STRING_CONSTANT ( STRING_CONSTANT , token ) ; }
Distance : 9

405
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

406
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

407
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 9

408
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , null , token , token ) ; }
Distance : 9

409
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } for
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , token ) ; } for
Distance : 10

410
Tree	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } options
Code	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } options
Distance : 10

411
Tree	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

412
Tree	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } Node
Code	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } Node
Distance : 10

413
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( this , token ) ; }
Distance : 9

414
Tree	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } for
Code	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } for
Distance : 10

415
Tree	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } t
Code	if ( token != JsDocToken.LP ) { return token . reportTypeSyntaxWarning ( token , token ) ; } t
Distance : 9

416
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

417
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

418
Tree	if ( token != JsDocToken.LP ) { return token . JsDocToken.LP ( token , token ) ; } :
Code	if ( token != JsDocToken.LP ) { return token . JsDocToken.LP ( token , token ) ; } :
Distance : 9

419
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT () , JsDocToken.LP ( STRING_CONSTANT ) ) ; } get
Distance : 10

420
Tree	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Code	if ( token != default: ) { return token . reportTypeSyntaxWarning ( token , token ) ; }
Distance : 9

421
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } super
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } super
Distance : 9

422
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) break; ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( ( token ) break; ) ; }
Distance : 10

423
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; }
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; }
Distance : 8

424
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

425
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Distance : 9

426
Tree	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } TypeInferenceMode.NEITHER
Code	if ( token != JsDocToken.LP ) { return token . STRING_CONSTANT ( token , token ) ; } TypeInferenceMode.NEITHER
Distance : 9

427
Tree	if ( token != ( ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != ( ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

428
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Distance : 7

429
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Distance : 7

430
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

431
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( default: , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( default: , token ) ; }
Distance : 9

432
Tree	if ( token != default: ) { return token . STRING_CONSTANT ( break; , token ) ; }
Code	if ( token != default: ) { return token . STRING_CONSTANT ( break; , token ) ; }
Distance : 9

433
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 6

434
Tree	if ( token . JsDocToken.LP ( token ) == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token . JsDocToken.LP ( token ) == continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 7

435
Tree	if ( token != ( ) { return token . STRING_CONSTANT ( token ) ; }
Code	if ( token != ( ) { return token . STRING_CONSTANT ( token ) ; }
Distance : 8

436
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Distance : 6

437
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( return; , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( return; , token ) ; }
Distance : 9

438
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } Node
Code	if ( token != null ) { return reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } Node
Distance : 8

439
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } options
Distance : 9

440
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } get
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } get
Distance : 9

441
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Distance : 7

442
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Distance : 7

443
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } options
Distance : 10

444
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

445
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

446
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; }
Distance : 8

447
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

448
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } options
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } options
Distance : 9

449
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

450
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; } super
Distance : 8

451
Tree	if ( token != break; ) { return token . token ( token ) ; }
Code	if ( token != break; ) { return token . token ( token ) ; }
Distance : 8

452
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Distance : 7

453
Tree	if ( token != null ) { return token . STRING_CONSTANT ( ( token ) null ) ; }
Code	if ( token != null ) { return token . STRING_CONSTANT ( ( token ) null ) ; }
Distance : 10

454
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

455
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( minPrecedence [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( minPrecedence [] ) null ) ; }
Distance : 12

456
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , null ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , null ) ; }
Distance : 9

457
Tree	if ( token != return; ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . STRING_CONSTANT ( NUMBER_CONSTANT ) ; }
Distance : 8

458
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 7

459
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token ) ; } options
Distance : 10

460
Tree	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != token ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 7

461
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( token [] ) null ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( null , ( token [] ) null ) ; }
Distance : 12

462
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , token , this ) ; }
Distance : 11

463
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

464
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } get
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , token ) ; } get
Distance : 9

465
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

466
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

467
Tree	if ( token == null ) { return token . STRING_CONSTANT ( token , token ) ; } options
Code	if ( token == null ) { return token . STRING_CONSTANT ( token , token ) ; } options
Distance : 11

468
Tree	if ( token != continue; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . STRING_CONSTANT ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

469
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

470
Tree	if ( token != ( ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Code	if ( token != ( ) { return reportTypeSyntaxWarning ( token , JsDocToken.LP ( STRING_CONSTANT ) ) ; }
Distance : 8

471
Tree	if ( reportTypeSyntaxWarning () == ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( reportTypeSyntaxWarning () == ( ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 8

472
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token , token , this ) ; } for
Code	if ( token != null ) { return token . STRING_CONSTANT ( token , token , this ) ; } for
Distance : 12

473
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( null , null ) ; }
Distance : 9

474
Tree	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } get
Code	if ( token != null ) { return this . token . JsDocToken.LP ( token ) ; } get
Distance : 10

475
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; } options
Distance : 8

476
Tree	if ( token != default: ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Code	if ( token != default: ) { return reportTypeSyntaxWarning ( token , return; ) ; }
Distance : 9

477
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Distance : 6

478
Tree	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } Node
Code	if ( token != null ) { return token . STRING_CONSTANT ( token ) ; } Node
Distance : 9

479
Tree	if ( token == null ) { return token . STRING_CONSTANT ( token , token ) ; } Node
Code	if ( token == null ) { return token . STRING_CONSTANT ( token , token ) ; } Node
Distance : 11

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 410
Wrong
========================================================================
False

0
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 7

1
Tree	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 10

2
Tree	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

3
Tree	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE ) ; }
Code	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE ) ; }
Distance : 7

4
Tree	{ toSource () ; return toSource ( n , n != null , n ) ; }
Code	{ toSource () ; return toSource ( n , n != null , n ) ; }
Distance : 4

5
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Distance : 8

6
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

7
Tree	{ n . () ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . () ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 10

8
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . null ( n ) ) ; }
Distance : 9

9
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 9

10
Tree	{ n . () ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . () ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

11
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Distance : 9

12
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 9

13
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 3

14
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 13

15
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

16
Tree	{ n . initCompilerOptionsIfTesting ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 12

17
Tree	{ n . () ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . () ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

18
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

19
Tree	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , return; ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , return; ) ; }
Distance : 11

20
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

21
Tree	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; }
Distance : 10

22
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 6

23
Tree	{ toSource () ; return toSource ( n , default: , n ) ; }
Code	{ toSource () ; return toSource ( n , default: , n ) ; }
Distance : 3

24
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

25
Tree	{ toSource ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Distance : 10

26
Tree	{ toSource () ; return toSource ( n != return; , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != return; , STRING_CONSTANT ) ; }
Distance : 4

27
Tree	{ toSource () ; return toSource ( n , break; , n ) ; }
Code	{ toSource () ; return toSource ( n , break; , n ) ; }
Distance : 3

28
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

29
Tree	{ toSource () ; return RemovalType.REMOVE_RHS . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return RemovalType.REMOVE_RHS . toSource () . toSource ( n , n , n ) ; }
Distance : 8

30
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

31
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 10

32
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

33
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

34
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

35
Tree	{ pair.env . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ pair.env . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

36
Tree	{ pair.env . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ pair.env . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

37
Tree	{ toSource () ; return n . toSource ( Feature.KEYWORDS_AS_PROPERTIES , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Feature.KEYWORDS_AS_PROPERTIES , n , n , n ) ; }
Distance : 7

38
Tree	{ toSource () ; return this . toSource ( n , n ) ; }
Code	{ toSource () ; return this . toSource ( n , n ) ; }
Distance : 6

39
Tree	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

40
Tree	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 12

41
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 7

42
Tree	{ toSource () ; return toSource ( Token.DECLARE , n ) ; }
Code	{ toSource () ; return toSource ( Token.DECLARE , n ) ; }
Distance : 5

43
Tree	{ toSource () ; return n . toSource ( this , n ) ; } for
Code	{ toSource () ; return n . toSource ( this , n ) ; } for
Distance : 8

44
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; } pname
Code	{ toSource () ; return toSource ( n , n , n , n ) ; } pname
Distance : 6

45
Tree	{ toSource () ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ toSource () ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 5

46
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

47
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

48
Tree	{ toSource () ; return toSource ( Es6RewriteClass.INHERITS , n ) ; }
Code	{ toSource () ; return toSource ( Es6RewriteClass.INHERITS , n ) ; }
Distance : 5

49
Tree	{ toSource () ; return toSource ( PassNames.REMOVE_UNUSED_VARS , n ) ; }
Code	{ toSource () ; return toSource ( PassNames.REMOVE_UNUSED_VARS , n ) ; }
Distance : 5

50
Tree	{ toSource () ; return this . toSource ( n , n ) ; }
Code	{ toSource () ; return this . toSource ( n , n ) ; }
Distance : 6

51
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

52
Tree	{ toSource () ; return toSource ( n , null , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , null , n ) ; }
Distance : 4

53
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

54
Tree	{ toSource () ; return toSource ( n , n , return; , n ) ; }
Code	{ toSource () ; return toSource ( n , n , return; , n ) ; }
Distance : 5

55
Tree	{ toSource () ; return toSource ( n , ( n ) default: ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) default: ) ; }
Distance : 5

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 5

57
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

58
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Distance : 4

59
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

60
Tree	{ toSource () ; return toSource ( n != default: , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != default: , STRING_CONSTANT ) ; }
Distance : 4

61
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

62
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

63
Tree	{ toSource () ; return toSource ( n , return; , n ) ; }
Code	{ toSource () ; return toSource ( n , return; , n ) ; }
Distance : 3

64
Tree	{ toSource () ; return toSource ( n , default: , n ) ; }
Code	{ toSource () ; return toSource ( n , default: , n ) ; }
Distance : 3

65
Tree	{ toSource () ; return toSource ( n != return; , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != return; , STRING_CONSTANT ) ; }
Distance : 4

66
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 6

67
Tree	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 3

68
Tree	{ toSource () . toSource ( new PropertyWrite () , n ) ; return; }
Code	{ toSource () . toSource ( new PropertyWrite () , n ) ; return; }
Distance : 8

69
Tree	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) null ) ; }
Distance : 5

70
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

71
Tree	{ toSource () ; return toSource ( n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , n ) ; }
Distance : 2

72
Tree	{ toSource () ; return toSource ( n , n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , n , null , n ) ; }
Distance : 4

73
Tree	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Distance : 6

74
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , true ) ; }
Distance : 6

75
Tree	{ toSource () ; return substituteParametricGenerics . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ toSource () ; return substituteParametricGenerics . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 8

76
Tree	{ toSource () ; return toSource ( n , n != default: , n ) ; }
Code	{ toSource () ; return toSource ( n , n != default: , n ) ; }
Distance : 5

77
Tree	{ toSource () ; return toSource ( n . , ( n ) , false ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , false ) ; }
Distance : 6

78
Tree	{ toSource () ; return BooleanLiteralSet.EMPTY . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ toSource () ; return BooleanLiteralSet.EMPTY . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 8

79
Tree	{ toSource () ; return toSource ( n , n != return; , n ) ; }
Code	{ toSource () ; return toSource ( n , n != return; , n ) ; }
Distance : 5

80
Tree	{ toSource () ; return compilerState.functionNames . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 8

81
Tree	{ toSource () ; return toSource ( n , n , default: , n ) ; }
Code	{ toSource () ; return toSource ( n , n , default: , n ) ; }
Distance : 5

82
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Distance : 9

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) break; ) ; }
Distance : 4

84
Tree	{ toSource () ; return n . toSource ( Token.CALL ) ; }
Code	{ toSource () ; return n . toSource ( Token.CALL ) ; }
Distance : 7

85
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , inheritedPropDef.methodType ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , inheritedPropDef.methodType ) ; }
Distance : 3

86
Tree	{ toSource () ; return toSource ( n , n ? currentCase.mayFallThrough : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? currentCase.mayFallThrough : EvalMode.NORMAL ) ; }
Distance : 6

87
Tree	{ toSource () . toSource ( new BasicBlock () , n ) ; return; }
Code	{ toSource () . toSource ( new BasicBlock () , n ) ; return; }
Distance : 8

88
Tree	{ toSource () ; return n . toSource ( DecompositionType.UNDECOMPOSABLE ) ; }
Code	{ toSource () ; return n . toSource ( DecompositionType.UNDECOMPOSABLE ) ; }
Distance : 7

89
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , obj2.props ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , obj2.props ) ; }
Distance : 3

90
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 6

91
Tree	{ toSource () ; return toSource ( n , break; ) ; }
Code	{ toSource () ; return toSource ( n , break; ) ; }
Distance : 4

92
Tree	{ toSource () ; return n . toSource ( Feature.KEYWORDS_AS_PROPERTIES ) ; }
Code	{ toSource () ; return n . toSource ( Feature.KEYWORDS_AS_PROPERTIES ) ; }
Distance : 7

93
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

94
Tree	{ toSource () ; return toSource ( n , n != default: , n ) ; }
Code	{ toSource () ; return toSource ( n , n != default: , n ) ; }
Distance : 5

95
Tree	{ toSource () ; return RemovalType.REMOVE_RHS . toSource () . return ( n , n , n ) ; }
Code	{ toSource () ; return RemovalType.REMOVE_RHS . toSource () . return ( n , n , n ) ; }
Distance : 8

96
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , commonTypes.BOTTOM_PROPERTY_MAP ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , commonTypes.BOTTOM_PROPERTY_MAP ) ; }
Distance : 3

97
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , return; , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , return; , n ) ; }
Distance : 4

99
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

100
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , false ) ; }
Distance : 4

101
Tree	{ toSource () ; return toSource ( n , return; , n ) ; }
Code	{ toSource () ; return toSource ( n , return; , n ) ; }
Distance : 3

102
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 7

103
Tree	{ toSource () ; return toSource ( default: , n . , ( n ) ) ; }
Code	{ toSource () ; return toSource ( default: , n . , ( n ) ) ; }
Distance : 7

104
Tree	{ toSource () ; return toSource ( n , n , n , default: ) ; }
Code	{ toSource () ; return toSource ( n , n , n , default: ) ; }
Distance : 5

105
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

106
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , return; ) ; }
Distance : 4

107
Tree	{ toSource () ; return toSource ( n , return; , null , n ) ; }
Code	{ toSource () ; return toSource ( n , return; , null , n ) ; }
Distance : 4

108
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . ) ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . ) ( n ) , n ) ; }
Distance : 7

109
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , return; ) ; }
Distance : 4

110
Tree	{ toSource () ; return toSource ( n , n != return; , n ) ; }
Code	{ toSource () ; return toSource ( n , n != return; , n ) ; }
Distance : 5

111
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

112
Tree	{ toSource ( n ) ; return toSource ( n . , ( n ) , return; ) ; }
Code	{ toSource ( n ) ; return toSource ( n . , ( n ) , return; ) ; }
Distance : 9

113
Tree	{ toSource () ; return toSource ( n != break; , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != break; , STRING_CONSTANT ) ; }
Distance : 4

114
Tree	{ toSource () ; return toSource ( null , n . , ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . , ( n ) ) ; }
Distance : 7

115
Tree	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( ( () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

116
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

117
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , return; ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , return; ) ; }
Distance : 10

118
Tree	{ toSource () ; return toSource ( n , default: , null , n ) ; }
Code	{ toSource () ; return toSource ( n , default: , null , n ) ; }
Distance : 4

119
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , default: , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , default: , n ) ; }
Distance : 3

120
Tree	{ toSource () ; return toSource ( n , return; ) ; }
Code	{ toSource () ; return toSource ( n , return; ) ; }
Distance : 4

121
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , default: , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , default: , n ) ; }
Distance : 4

122
Tree	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 6

123
Tree	{ toSource () ; return toSource ( n , null , default: , n ) ; }
Code	{ toSource () ; return toSource ( n , null , default: , n ) ; }
Distance : 4

124
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != default: , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != default: , n ) ; }
Distance : 4

125
Tree	{ toSource () ; return toSource ( n , n , n , null ) ; }
Code	{ toSource () ; return toSource ( n , n , n , null ) ; }
Distance : 5

126
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != return; , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != return; , n ) ; }
Distance : 4

127
Tree	{ toSource () ; return toSource ( n , return; ) ; }
Code	{ toSource () ; return toSource ( n , return; ) ; }
Distance : 4

128
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Distance : 1

129
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Distance : 3

130
Tree	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

131
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

132
Tree	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . null ( n ) , n ) ; }
Code	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . null ( n ) , n ) ; }
Distance : 11

133
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; }
Code	{ toSource () ; return toSource ( n , n , n , false ) ; }
Distance : 5

134
Tree	{ toSource () ; return toSource ( Token.CATCH , n ) ; }
Code	{ toSource () ; return toSource ( Token.CATCH , n ) ; }
Distance : 5

135
Tree	{ toSource () ; return n . toSource ( Node.FREE_CALL , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Node.FREE_CALL , n , n , n ) ; }
Distance : 7

136
Tree	{ toSource () ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ toSource () ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 5

137
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME ) ; }
Distance : 7

138
Tree	{ toSource () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Distance : 12

139
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } get
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } get
Distance : 6

140
Tree	{ toSource () ; return n . toSource ( Token.SCRIPT , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Token.SCRIPT , n , n , n ) ; }
Distance : 7

141
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } Override
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } Override
Distance : 6

142
Tree	{ toSource () ; return toSource ( n , n , n , return; ) ; }
Code	{ toSource () ; return toSource ( n , n , n , return; ) ; }
Distance : 5

143
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Distance : 11

144
Tree	{ toSource () ; return toSource ( Node.IS_NAMESPACE , n ) ; }
Code	{ toSource () ; return toSource ( Node.IS_NAMESPACE , n ) ; }
Distance : 5

145
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; return; }
Distance : 8

146
Tree	{ toSource () ; return toSource ( n , break; , n ) ; }
Code	{ toSource () ; return toSource ( n , break; , n ) ; }
Distance : 3

147
Tree	{ toSource () ; return toSource ( n != break; , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != break; , STRING_CONSTANT ) ; }
Distance : 4

148
Tree	{ toSource () ; return toSource ( n , n , n , default: ) ; }
Code	{ toSource () ; return toSource ( n , n , n , default: ) ; }
Distance : 5

149
Tree	{ toSource () ; return toSource ( null , n . , ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . , ( n ) ) ; }
Distance : 7

150
Tree	{ toSource () ; return toSource ( n , n , n , true ) ; }
Code	{ toSource () ; return toSource ( n , n , n , true ) ; }
Distance : 4

151
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 5

152
Tree	{ toSource () ; return toSource ( default: , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( default: , n . toSource ( n ) ) ; }
Distance : 8

153
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 5

154
Tree	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 11

155
Tree	{ toSource () ; return toSource ( ; , n ) ; }
Code	{ toSource () ; return toSource ( ; , n ) ; }
Distance : 5

156
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , null ) ; }
Distance : 4

157
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 7

158
Tree	{ toSource () ; return toSource ( n . , ( n ) , return; ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , return; ) ; }
Distance : 6

159
Tree	{ toSource () ; return toSource ( n != default: , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != default: , STRING_CONSTANT ) ; }
Distance : 4

160
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 6

161
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

162
Tree	{ appendFieldStart . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ appendFieldStart . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

163
Tree	{ appendFieldStart . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ appendFieldStart . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

164
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; throw }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; throw }
Distance : 8

165
Tree	{ toSource () . toSource ( new PropertyWrite () , n ) ; return; }
Code	{ toSource () . toSource ( new PropertyWrite () , n ) ; return; }
Distance : 8

166
Tree	{ toSource () ; return toSource ( n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , null , n ) ; }
Distance : 2

167
Tree	{ toSource () ; return n . toSource ( Node.FREE_CALL ) ; }
Code	{ toSource () ; return n . toSource ( Node.FREE_CALL ) ; }
Distance : 7

168
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

169
Tree	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Distance : 5

170
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

171
Tree	{ toSource () ; return toSource ( n , n , null , n ) ; }
Code	{ toSource () ; return toSource ( n , n , null , n ) ; }
Distance : 4

172
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

173
Tree	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 9

174
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 3

175
Tree	{ toSource () ; return toSource ( n , n ? export.scope : Reach.NONE ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : Reach.NONE ) ; }
Distance : 6

176
Tree	{ toSource () ; return toSource ( n , default: ) ; }
Code	{ toSource () ; return toSource ( n , default: ) ; }
Distance : 4

177
Tree	{ currentCase.embedInto . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ currentCase.embedInto . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

178
Tree	{ toSource () ; return n . toSource ( n . null ( n ) , n , n , n ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return n . toSource ( n . null ( n ) , n , n , n ) ; } TypeInferenceMode.CHECKED
Distance : 13

179
Tree	{ currentCase.embedInto . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ currentCase.embedInto . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

180
Tree	{ toSource () ; return toSource ( n , break; ) ; }
Code	{ toSource () ; return toSource ( n , break; ) ; }
Distance : 4

181
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

182
Tree	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 12

183
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; while }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; while }
Distance : 8

184
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 7

185
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , options.crossChunkCodeMotionNoStubMethods ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , options.crossChunkCodeMotionNoStubMethods ) ; }
Distance : 3

186
Tree	{ toSource () ; return toSource ( n , null , default: , n ) ; }
Code	{ toSource () ; return toSource ( n , null , default: , n ) ; }
Distance : 4

187
Tree	{ toSource () ; return toSource ( n , n ? export.scope : inlineEmptyMethod ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : inlineEmptyMethod ) ; }
Distance : 6

188
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , true ) ; }
Distance : 6

189
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , ToStringContext.TO_STRING ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , ToStringContext.TO_STRING ) ; }
Distance : 3

190
Tree	{ n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

191
Tree	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; } disableTypeCheck
Code	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; } disableTypeCheck
Distance : 13

192
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 2

193
Tree	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , null ) ; }
Distance : 6

194
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

195
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

196
Tree	{ toSource () ; return toSource ( n . , ( n ) , false ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , false ) ; }
Distance : 6

197
Tree	{ toSource () ; return toSource ( n , n != null , n ) ; }
Code	{ toSource () ; return toSource ( n , n != null , n ) ; }
Distance : 4

198
Tree	{ n . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . , ( n ) , n ) ; }
Code	{ n . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . , ( n ) , n ) ; }
Distance : 11

199
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Distance : 3

200
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , export.scope ) ; }
Distance : 3

201
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , StatementFusion ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , StatementFusion ) ; }
Distance : 3

202
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Distance : 9

203
Tree	{ toSource () ; return toSource ( n , return; , null , n ) ; }
Code	{ toSource () ; return toSource ( n , return; , null , n ) ; }
Distance : 4

204
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Distance : 7

205
Tree	{ toSource () ; return toSource ( n , n , n , null ) ; }
Code	{ toSource () ; return toSource ( n , n , n , null ) ; }
Distance : 5

206
Tree	{ initCompilerOptionsIfTesting () . toSource ( new StringBuilder () , n ) ; return; }
Code	{ initCompilerOptionsIfTesting () . toSource ( new StringBuilder () , n ) ; return; }
Distance : 7

207
Tree	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 12

208
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 7

209
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

210
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 8

211
Tree	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 18

212
Tree	{ toSource () ; return toSource ( n , ( n ) break; ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) break; ) ; }
Distance : 5

213
Tree	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 17

214
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

215
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

216
Tree	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

217
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

218
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

219
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , p.scope ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , p.scope ) ; }
Distance : 3

220
Tree	{ toSource () ; return toSource ( n , ( n ) return; ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) return; ) ; }
Distance : 5

221
Tree	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 18

222
Tree	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 17

223
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

224
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

225
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

226
Tree	{ toSource () ; return toSource ( n , default: ) ; }
Code	{ toSource () ; return toSource ( n , default: ) ; }
Distance : 4

227
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , true ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , true ) ; }
Distance : 5

228
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 11

229
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

230
Tree	{ n . () ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ n . () ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 10

231
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

232
Tree	{ toSource () ; return toSource ( n , n , n , n . null ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . null ( n ) ) ; }
Distance : 10

233
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

234
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Distance : 11

235
Tree	{ toSource () ; return toSource ( n , n , return; , n ) ; }
Code	{ toSource () ; return toSource ( n , n , return; , n ) ; }
Distance : 5

236
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; } for
Code	{ toSource () ; return toSource ( n , n , n , n ) ; } for
Distance : 6

237
Tree	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

238
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 13

239
Tree	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 11

240
Tree	{ toSource () ; return toSource ( n , ( n ) return; ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) return; ) ; }
Distance : 5

241
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; } get
Code	{ toSource () ; return toSource ( n , n , n , n ) ; } get
Distance : 6

242
Tree	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

243
Tree	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n . toSource ( n ) ) ; }
Distance : 10

244
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 2

245
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

246
Tree	{ toSource () ; return toSource ( n , ( n ) break; ) ; }
Code	{ toSource () ; return toSource ( n , ( n ) break; ) ; }
Distance : 5

247
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

248
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , ( n ) null ) ; }
Distance : 4

249
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; } Override
Code	{ toSource () ; return toSource ( n , n , n , n ) ; } Override
Distance : 6

250
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } lines
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } lines
Distance : 6

251
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . , ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . , ( n ) ) ; }
Distance : 6

252
Tree	{ toSource () ; return toSource ( Var.ARGUMENTS , n ) ; }
Code	{ toSource () ; return toSource ( Var.ARGUMENTS , n ) ; }
Distance : 5

253
Tree	{ toSource () ; return toSource ( n , n , default: , n ) ; }
Code	{ toSource () ; return toSource ( n , n , default: , n ) ; }
Distance : 5

254
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; } lines
Code	{ toSource () ; return toSource ( n , n , n , n ) ; } lines
Distance : 6

255
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } Override
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } Override
Distance : 4

256
Tree	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ pair.env . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

257
Tree	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 13

258
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Distance : 3

259
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , n ) ; }
Distance : 1

260
Tree	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Distance : 5

261
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

262
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , null , n ) ; }
Distance : 3

263
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

264
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } get
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } get
Distance : 4

265
Tree	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 9

266
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

267
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

268
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } lines
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } lines
Distance : 4

269
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } for
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } for
Distance : 4

270
Tree	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Distance : 7

271
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; }
Distance : 8

272
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( n () , null ) ; }
Distance : 13

273
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 9

274
Tree	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . null ( n ) , n ) ; }
Distance : 7

275
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } []
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } []
Distance : 6

276
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 2

277
Tree	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

278
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( toSource () , null ) ; }
Distance : 14

279
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

280
Tree	{ toSource () ; return toSource ( n , return; ) ; }
Code	{ toSource () ; return toSource ( n , return; ) ; }
Distance : 4

281
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } pname
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } pname
Distance : 6

282
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } pname
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } pname
Distance : 4

283
Tree	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Distance : 6

284
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Token.LABEL_NAME , n , n , n ) ; }
Distance : 6

285
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } for
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; } for
Distance : 6

286
Tree	{ toSource () ; return n . toSource ( this , n ) ; } []
Code	{ toSource () ; return n . toSource ( this , n ) ; } []
Distance : 8

287
Tree	{ toSource () ; return toSource ( n , n , n , return; ) ; }
Code	{ toSource () ; return toSource ( n , n , n , return; ) ; }
Distance : 5

288
Tree	{ toSource () ; return toSource ( n , return; ) ; }
Code	{ toSource () ; return toSource ( n , return; ) ; }
Distance : 4

289
Tree	{ toSource () ; return toSource ( n , default: ) ; }
Code	{ toSource () ; return toSource ( n , default: ) ; }
Distance : 4

290
Tree	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ pair.env . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

291
Tree	{ toSource () ; return n . toSource ( this , n ) ; } pname
Code	{ toSource () ; return n . toSource ( this , n ) ; } pname
Distance : 8

292
Tree	{ toSource () ; return toSource ( n , break; ) ; }
Code	{ toSource () ; return toSource ( n , break; ) ; }
Distance : 4

293
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

294
Tree	{ toSource () ; return toSource ( Node.FREE_CALL , n ) ; }
Code	{ toSource () ; return toSource ( Node.FREE_CALL , n ) ; }
Distance : 5

295
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . , ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . , ( n ) ) ; }
Distance : 6

296
Tree	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Node.IS_NAMESPACE , n , n , n ) ; }
Distance : 7

297
Tree	{ toSource () ; return toSource ( n , break; ) ; }
Code	{ toSource () ; return toSource ( n , break; ) ; }
Distance : 4

298
Tree	{ toSource () . toSource ( new StringBuilder () , n ) ; case }
Code	{ toSource () . toSource ( new StringBuilder () , n ) ; case }
Distance : 8

299
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; } disableTypeCheck
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; } disableTypeCheck
Distance : 7

300
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . ) ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . ) ( n ) ) ; }
Distance : 9

301
Tree	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Distance : 8

302
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n ? export.scope : EvalMode.NORMAL ) ; }
Distance : 5

303
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 6

304
Tree	{ toSource ( n ) ; return toSource ( default: , n . toSource ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( default: , n . toSource ( n ) ) ; }
Distance : 11

305
Tree	{ toSource () . toSource ( new PropertyWrite () , n ) ; throw }
Code	{ toSource () . toSource ( new PropertyWrite () , n ) ; throw }
Distance : 8

306
Tree	{ toSource ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . , ( n ) ) ; }
Distance : 10

307
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

308
Tree	{ toSource ( n ) ; return toSource ( default: , n . ) ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( default: , n . ) ( n ) ) ; }
Distance : 11

309
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , PredefinedName.AS ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , PredefinedName.AS ) ; }
Distance : 3

310
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

311
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

312
Tree	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

313
Tree	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , inheritedPropDef.methodType ) ; }
Code	{ toSource () ; return toSource ( n , NUMBER_CONSTANT , inheritedPropDef.methodType ) ; }
Distance : 3

314
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Distance : 14

315
Tree	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Code	{ n . toSource ( n () , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Distance : 14

316
Tree	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Distance : 8

317
Tree	{ toSource () ; return n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN ) ; }
Code	{ toSource () ; return n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN ) ; }
Distance : 7

318
Tree	{ toSource () ; return toSource ( n , n ? export.scope : Format.PRETTY ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : Format.PRETTY ) ; }
Distance : 6

319
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null , null , n ) ; }
Distance : 3

320
Tree	{ toSource () ; return substituteParametricGenerics . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return substituteParametricGenerics . toSource () . toSource ( n , n , n ) ; }
Distance : 8

321
Tree	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

322
Tree	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

323
Tree	{ toSource () ; return n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN , n , n , n ) ; }
Distance : 7

324
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

325
Tree	{ toSource () ; return toSource ( n , n ? currentCase.mayFallThrough : EvalMode.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? currentCase.mayFallThrough : EvalMode.NORMAL ) ; }
Distance : 6

326
Tree	{ n . toSource ( n . null ( n ) , STRING_CONSTANT , this ) ; return toSource ( obj1.props , n ) ; }
Code	{ n . toSource ( n . null ( n ) , STRING_CONSTANT , this ) ; return toSource ( obj1.props , n ) ; }
Distance : 18

327
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n != null , n ) ; }
Distance : 3

328
Tree	{ n . () ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . () ( toSource () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

329
Tree	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return compilerState.functionNames . toSource () . toSource ( n , n , n ) ; }
Distance : 8

330
Tree	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

331
Tree	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

332
Tree	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Code	{ n . toSource ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Distance : 18

333
Tree	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( ModuleType.COMMON_JS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

334
Tree	{ toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

335
Tree	{ toSource () ; return toSource ( n , n . ) ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n , n . ) ( n ) , n ) ; }
Distance : 8

336
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . , ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . , ( n ) ) ; }
Distance : 8

337
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

338
Tree	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Code	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( commonTypes.BOTTOM_PROPERTY_MAP , n ) ; }
Distance : 17

339
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , true ) ; }
Distance : 3

340
Tree	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 12

341
Tree	{ toSource ( pair.env ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( pair.env ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

342
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 8

343
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , false ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , false ) ; }
Distance : 7

344
Tree	{ toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

345
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 10

346
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

347
Tree	{ n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( NodeUtil.JSC_PROPERTY_NAME_FN ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

348
Tree	{ toSource ( pair.env ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( pair.env ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

349
Tree	{ toSource ( pair.env ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( pair.env ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

350
Tree	{ n . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ n . toSource ( Node.ANALYZED_DURING_GTI ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 11

351
Tree	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ toSource () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 3

352
Tree	{ n . () ( n () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . () ( n () , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 14

353
Tree	{ toSource () ; return toSource ( n , n ? export.scope : FunctionFlavor.NORMAL ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : FunctionFlavor.NORMAL ) ; }
Distance : 6

354
Tree	{ toSource () ; return toSource ( n , n , n , true ) ; }
Code	{ toSource () ; return toSource ( n , n , n , true ) ; }
Distance : 4

355
Tree	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . toSource ( Feature.TYPE_ALIAS ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 12

356
Tree	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; } TypeInferenceMode.CHECKED
Distance : 11

357
Tree	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return this . toSource ( n , n ) ; }
Distance : 5

358
Tree	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , true ) ; }
Distance : 5

359
Tree	{ toSource () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 8

360
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; } TypeInferenceMode.CHECKED
Distance : 7

361
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

362
Tree	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; } disableTypeCheck
Code	{ toSource () ; return toSource ( n , n , n , n . ) ( n ) ) ; } disableTypeCheck
Distance : 11

363
Tree	{ toSource () ; return this . toSource ( n , n ) ; } []
Code	{ toSource () ; return this . toSource ( n , n ) ; } []
Distance : 7

364
Tree	{ toSource () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . initCompilerOptionsIfTesting ( n , n , n ) ; }
Distance : 8

365
Tree	{ toSource () ; return this . toSource ( n , n ) ; } pname
Code	{ toSource () ; return this . toSource ( n , n ) ; } pname
Distance : 7

366
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , false ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , false ) ; }
Distance : 7

367
Tree	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ n . toSource ( Node.FREE_CALL ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 12

368
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , true ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , true ) ; }
Distance : 4

369
Tree	{ toSource () ; return this . toSource ( n , n ) ; } for
Code	{ toSource () ; return this . toSource ( n , n ) ; } for
Distance : 7

370
Tree	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( obj1.props , n ) ; }
Code	{ n . toSource ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( obj1.props , n ) ; }
Distance : 17

371
Tree	{ toSource () ; return BooleanLiteralSet.EMPTY . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return BooleanLiteralSet.EMPTY . toSource () . toSource ( n , n , n ) ; }
Distance : 8

372
Tree	{ toSource () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . toSource ( n ) , n , n , n ) ; }
Distance : 12

373
Tree	{ toSource () ; return this . toSource ( n , n ) ; } get
Code	{ toSource () ; return this . toSource ( n , n ) ; } get
Distance : 7

374
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 5

375
Tree	{ toSource () ; return this . toSource ( n , n ) ; } Override
Code	{ toSource () ; return this . toSource ( n , n ) ; } Override
Distance : 7

376
Tree	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

377
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 10

378
Tree	{ toSource () ; return n . toSource ( Token.CALL , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( Token.CALL , n , n , n ) ; }
Distance : 7

379
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

380
Tree	{ n . () ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . () ( n . , ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 17

381
Tree	{ toSource () ; return toSource ( n , n ? export.scope : MatchResult.NO_MATCH ) ; }
Code	{ toSource () ; return toSource ( n , n ? export.scope : MatchResult.NO_MATCH ) ; }
Distance : 6

382
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n != null , STRING_CONSTANT ) ; }
Distance : 2

383
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

384
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( inheritedPropDef.methodType , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( inheritedPropDef.methodType , n ) ; }
Distance : 14

385
Tree	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . , ( n ) , null ) ; }
Code	{ toSource ( PredefinedName.FROM ) ; return toSource ( n . , ( n ) , null ) ; }
Distance : 9

386
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 10

387
Tree	{ toSource () ; return this . toSource ( n , n ) ; } lines
Code	{ toSource () ; return this . toSource ( n , n ) ; } lines
Distance : 7

388
Tree	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ n . toSource ( Token.CALL ) ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 12

389
Tree	{ toSource () ; return n . toSource ( DecompositionType.UNDECOMPOSABLE , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( DecompositionType.UNDECOMPOSABLE , n , n , n ) ; }
Distance : 7

390
Tree	{ toSource () ; return n . toSource ( this , n ) ; } Override
Code	{ toSource () ; return n . toSource ( this , n ) ; } Override
Distance : 8

391
Tree	{ n . () ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Code	{ n . () ( n . toSource ( n ) , STRING_CONSTANT , this ) ; return toSource ( Token.LABEL_NAME , n ) ; }
Distance : 16

392
Tree	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Code	{ toSource () ; return n . toSource ( n . , ( n ) , n , n , n ) ; }
Distance : 12

393
Tree	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } []
Code	{ toSource () ; return toSource ( n , STRING_CONSTANT , STRING_CONSTANT ) ; } []
Distance : 4

394
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; } disableTypeCheck
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; } disableTypeCheck
Distance : 9

395
Tree	{ toSource ( pair.env ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource ( pair.env ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 10

396
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; } TypeInferenceMode.CHECKED
Distance : 9

397
Tree	{ toSource () ; return n . toSource ( this , n ) ; } lines
Code	{ toSource () ; return n . toSource ( this , n ) ; } lines
Distance : 8

398
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; } disableTypeCheck
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; } disableTypeCheck
Distance : 9

399
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return toSource ( n , n , n , false ) ; } TypeInferenceMode.CHECKED
Distance : 6

400
Tree	{ toSource () ; return toSource ( n , n , n , false ) ; } disableTypeCheck
Code	{ toSource () ; return toSource ( n , n , n , false ) ; } disableTypeCheck
Distance : 6

401
Tree	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( flags.j2clPassMode , n ) ; }
Code	{ n . toSource ( toSource () , STRING_CONSTANT , this ) ; return toSource ( flags.j2clPassMode , n ) ; }
Distance : 14

402
Tree	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource ( n ) ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 11

403
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; } TypeInferenceMode.CHECKED
Distance : 11

404
Tree	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; } disableTypeCheck
Code	{ toSource () ; return n . toSource ( this , n . toSource ( n ) ) ; } disableTypeCheck
Distance : 11

405
Tree	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; } TypeInferenceMode.CHECKED
Code	{ toSource () ; return toSource ( n , n . toSource ( n ) , n ) ; } TypeInferenceMode.CHECKED
Distance : 9

406
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . null ( n ) , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( n . null ( n ) , n , n , n ) ; }
Distance : 11

407
Tree	{ toSource () ; return toSource ( n , default: ) ; }
Code	{ toSource () ; return toSource ( n , default: ) ; }
Distance : 4

408
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; } []
Code	{ toSource () ; return toSource ( n , n , n , n ) ; } []
Distance : 6

409
Tree	{ toSource () ; return n . toSource ( this , n ) ; } get
Code	{ toSource () ; return n . toSource ( this , n ) ; } get
Distance : 8

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 470
Wrong
========================================================================
False

0
Tree	String code = root ( root , sourceMap ) ;
Code	String code = root ( root , sourceMap ) ;
Distance : 5

1
Tree	String code = root . toSource ( this , sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap , sourceMap ) ;
Distance : 6

2
Tree	String code = toSource ( STRING_CONSTANT , root ) ;
Code	String code = toSource ( STRING_CONSTANT , root ) ;
Distance : 6

3
Tree	String code = toSource ( root , sourceMap , code , false ) ;
Code	String code = toSource ( root , sourceMap , code , false ) ;
Distance : 3

4
Tree	String code = root . toSource ( root , sourceMap , code ) ;
Code	String code = root . toSource ( root , sourceMap , code ) ;
Distance : 5

5
Tree	String code = root . toSource ( this , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap ) ;
Distance : 7

6
Tree	String code = root . toSource ( this , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap ) ;
Distance : 6

7
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

8
Tree	String code = root ( sourceMap , sourceMap ) ;
Code	String code = root ( sourceMap , sourceMap ) ;
Distance : 6

9
Tree	String code = root ( code , sourceMap ) ;
Code	String code = root ( code , sourceMap ) ;
Distance : 6

10
Tree	String code = root . toSource ( STRING_CONSTANT , root ) ;
Code	String code = root . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

11
Tree	String code = root ( root , code ) ;
Code	String code = root ( root , code ) ;
Distance : 6

12
Tree	String code = root . root ( root ) ;
Code	String code = root . root ( root ) ;
Distance : 8

13
Tree	String code = root ;
Code	String code = root ;
Distance : 9

14
Tree	String code = root ( root , sourceMap , sourceMap ) ;
Code	String code = root ( root , sourceMap , sourceMap ) ;
Distance : 4

15
Tree	String code = root ( root , sourceMap , code ) ;
Code	String code = root ( root , sourceMap , code ) ;
Distance : 4

16
Tree	String code = root ( root , code , sourceMap ) ;
Code	String code = root ( root , code , sourceMap ) ;
Distance : 5

17
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

18
Tree	String code = toSource ( code , sourceMap , false ) ;
Code	String code = toSource ( code , sourceMap , false ) ;
Distance : 4

19
Tree	String code = root . toSource ( this , code , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this , code , sourceMap , sourceMap ) ;
Distance : 7

20
Tree	String code = root . toSource ( this , sourceMap , sourceMap , code ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap , code ) ;
Distance : 6

21
Tree	String code = root . toSource ( code , sourceMap ) ;
Code	String code = root . toSource ( code , sourceMap ) ;
Distance : 7

22
Tree	String code = root . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

23
Tree	String code = toSource ( root , NUMBER_CONSTANT ) ;
Code	String code = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 4

24
Tree	String code = ( ( code ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = ( ( code ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 10

25
Tree	String code = root ;
Code	String code = root ;
Distance : 9

26
Tree	String code = root . toSource ( STRING_CONSTANT , code ) ;
Code	String code = root . toSource ( STRING_CONSTANT , code ) ;
Distance : 8

27
Tree	String code = root . toSource ( root , false ) ;
Code	String code = root . toSource ( root , false ) ;
Distance : 7

28
Tree	String code = code . root ( root ) ;
Code	String code = code . root ( root ) ;
Distance : 8

29
Tree	String code = root . toSource () ;
Code	String code = root . toSource () ;
Distance : 9

30
Tree	String code = typeString . toSource ( root , sourceMap ) ;
Code	String code = typeString . toSource ( root , sourceMap ) ;
Distance : 6

31
Tree	String code = root . toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String code = root . toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 7

32
Tree	String code = toSource ( true ) ;
Code	String code = toSource ( true ) ;
Distance : 7

33
Tree	String code = sourceMap . root ( root ) ;
Code	String code = sourceMap . root ( root ) ;
Distance : 8

34
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

35
Tree	String code = root . toSource ( code , new String ( root , sourceMap ) ) ;
Code	String code = root . toSource ( code , new String ( root , sourceMap ) ) ;
Distance : 10

36
Tree	String sourceMap = root . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String sourceMap = root . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 10

37
Tree	String sourceMap = toSource ( sourceMap , NUMBER_CONSTANT ) ;
Code	String sourceMap = toSource ( sourceMap , NUMBER_CONSTANT ) ;
Distance : 5

38
Tree	String sourceMap = code . toSource () ;
Code	String sourceMap = code . toSource () ;
Distance : 11

39
Tree	String sourceMap = toSource ( root , sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap , sourceMap ) ;
Distance : 4

40
Tree	String code = toSource ( root , code , code , code ) ;
Code	String code = toSource ( root , code , code , code ) ;
Distance : 4

41
Tree	String sourceMap = root . toSource ( this , sourceMap ) ;
Code	String sourceMap = root . toSource ( this , sourceMap ) ;
Distance : 8

42
Tree	String code = toSource ( root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap ) ;
Distance : 3

43
Tree	String code = toSource ( code , sourceMap , sourceMap , false ) ;
Code	String code = toSource ( code , sourceMap , sourceMap , false ) ;
Distance : 4

44
Tree	String code = ( ( sourceMap ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( sourceMap ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

45
Tree	String code = toSource ( code ) ;
Code	String code = toSource ( code ) ;
Distance : 7

46
Tree	String code = toSource ( sourceMap ) ;
Code	String code = toSource ( sourceMap ) ;
Distance : 6

47
Tree	String code = root . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 7

48
Tree	String code = toSource ( sourceMap , sourceMap , false ) ;
Code	String code = toSource ( sourceMap , sourceMap , false ) ;
Distance : 4

49
Tree	String code = root . toSource ( this , sourceMap , sourceMap , ) ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap , ) ) ;
Distance : 6

50
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

51
Tree	String sourceMap = code ;
Code	String sourceMap = code ;
Distance : 11

52
Tree	String sourceMap = root . toSource ( root , sourceMap ) ;
Code	String sourceMap = root . toSource ( root , sourceMap ) ;
Distance : 7

53
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Distance : 6

54
Tree	String code = root . toSource ( this . root , code , sourceMap , root ) ;
Code	String code = root . toSource ( this . root , code , sourceMap , root ) ;
Distance : 8

55
Tree	String code = root . toSource ( code ) ;
Code	String code = root . toSource ( code ) ;
Distance : 8

56
Tree	String sourceMap = sourceMap . toSource () ;
Code	String sourceMap = sourceMap . toSource () ;
Distance : 10

57
Tree	String code = code . toSource () ;
Code	String code = code . toSource () ;
Distance : 10

58
Tree	String code = root . toSource ( sourceMap ) ;
Code	String code = root . toSource ( sourceMap ) ;
Distance : 8

59
Tree	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 3

60
Tree	String code = toSource ( code , this . sourceMap ) ;
Code	String code = toSource ( code , this . sourceMap ) ;
Distance : 6

61
Tree	String code = sourceMap . toSource ( root , false ) ;
Code	String code = sourceMap . toSource ( root , false ) ;
Distance : 7

62
Tree	String sourceMap = toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 6

63
Tree	String sourceMap = root . toSource ( STRING_CONSTANT , root ) ;
Code	String sourceMap = root . toSource ( STRING_CONSTANT , root ) ;
Distance : 9

64
Tree	String sourceMap = root . toSource ( root . toSource () , sourceMap ) ;
Code	String sourceMap = root . toSource ( root . toSource () , sourceMap ) ;
Distance : 9

65
Tree	String sourceMap = toSource ( toSource ( root , sourceMap ) ) ;
Code	String sourceMap = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 7

66
Tree	String code = addGuard . toSource ( root , sourceMap ) ;
Code	String code = addGuard . toSource ( root , sourceMap ) ;
Distance : 6

67
Tree	String code = compiler.functionNames . toSource ( root , sourceMap ) ;
Code	String code = compiler.functionNames . toSource ( root , sourceMap ) ;
Distance : 6

68
Tree	String code = ( ( root ) this ) . toSource ( sourceMap , code ) ;
Code	String code = ( ( root ) this ) . toSource ( sourceMap , code ) ;
Distance : 10

69
Tree	String code = code . toSource () . toSource ( root ) ;
Code	String code = code . toSource () . toSource ( root ) ;
Distance : 9

70
Tree	String code = toSource ( root , sourceMap , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , false ) ;
Distance : 3

71
Tree	String sourceMap = root . toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String sourceMap = root . toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 8

72
Tree	String code = root . toSource ( this . root , sourceMap , sourceMap , code ) ;
Code	String code = root . toSource ( this . root , sourceMap , sourceMap , code ) ;
Distance : 7

73
Tree	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 7

74
Tree	String code = toSource ( root , code , sourceMap , code ) ;
Code	String code = toSource ( root , code , sourceMap , code ) ;
Distance : 4

75
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , code ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , code ) ;
Distance : 9

76
Tree	String code = root . toSource ( root , code , sourceMap . toSource () ) ;
Code	String code = root . toSource ( root , code , sourceMap . toSource () ) ;
Distance : 7

77
Tree	String code = toSource ( root , sourceMap , code , code ) ;
Code	String code = toSource ( root , sourceMap , code , code ) ;
Distance : 3

78
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

79
Tree	String code = toSource ( code , code , sourceMap ) ;
Code	String code = toSource ( code , code , sourceMap ) ;
Distance : 5

80
Tree	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Distance : 7

81
Tree	String code = toSource ( root , sourceMap , code , true ) ;
Code	String code = toSource ( root , sourceMap , code , true ) ;
Distance : 3

82
Tree	String code = toSource ( root , code , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap ) ;
Distance : 4

83
Tree	String code = root ( sourceMap , sourceMap , sourceMap ) ;
Code	String code = root ( sourceMap , sourceMap , sourceMap ) ;
Distance : 5

84
Tree	String sourceMap = root . toSource ( STRING_CONSTANT , code ) ;
Code	String sourceMap = root . toSource ( STRING_CONSTANT , code ) ;
Distance : 9

85
Tree	String code = root . toSource ( root , true ) ;
Code	String code = root . toSource ( root , true ) ;
Distance : 7

86
Tree	String sourceMap = toSource ( root , sourceMap , false ) ;
Code	String sourceMap = toSource ( root , sourceMap , false ) ;
Distance : 4

87
Tree	String sourceMap = sourceMap ;
Code	String sourceMap = sourceMap ;
Distance : 10

88
Tree	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap ) ;
Distance : 10

89
Tree	String code = root . root ( root ) ;
Code	String code = root . root ( root ) ;
Distance : 8

90
Tree	String code = toSource ( root , code , sourceMap , true ) ;
Code	String code = toSource ( root , code , sourceMap , true ) ;
Distance : 4

91
Tree	String code = ( ( root ) this ) . toSource ( code , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( code , sourceMap ) ;
Distance : 10

92
Tree	String code = toSource ( root , sourceMap , true ) ;
Code	String code = toSource ( root , sourceMap , true ) ;
Distance : 3

93
Tree	String code = toSource ( code , code , false ) ;
Code	String code = toSource ( code , code , false ) ;
Distance : 5

94
Tree	String code = root . toSource ( this . root , sourceMap , code , root ) ;
Code	String code = root . toSource ( this . root , sourceMap , code , root ) ;
Distance : 7

95
Tree	String code = code ( root ) ;
Code	String code = code ( root ) ;
Distance : 7

96
Tree	String code = toSource ( root , typeVars ) ;
Code	String code = toSource ( root , typeVars ) ;
Distance : 5

97
Tree	String code = new String ( root , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( root , sourceMap ) . toSource ( root ) ;
Distance : 7

98
Tree	String code = root . toSource ( this , code , code ) ;
Code	String code = root . toSource ( this , code , code ) ;
Distance : 7

99
Tree	String code = root . toSource ( this . sourceMap , sourceMap , sourceMap , root ) ;
Code	String code = root . toSource ( this . sourceMap , sourceMap , sourceMap , root ) ;
Distance : 8

100
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

101
Tree	String code = ( ( code ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( code ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

102
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

103
Tree	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , code , sourceMap ) ;
Distance : 3

104
Tree	String sourceMap = root . root ( root ) ;
Code	String sourceMap = root . root ( root ) ;
Distance : 9

105
Tree	String code = ( ( root ) this ) . toSource ( code , code ) ;
Code	String code = ( ( root ) this ) . toSource ( code , code ) ;
Distance : 10

106
Tree	String code = root . toSource ( this , code ) ;
Code	String code = root . toSource ( this , code ) ;
Distance : 8

107
Tree	String code = sourceMap . toSource () ;
Code	String code = sourceMap . toSource () ;
Distance : 9

108
Tree	String code = new String ( code , code ) . toSource ( root ) ;
Code	String code = new String ( code , code ) . toSource ( root ) ;
Distance : 9

109
Tree	String code = sourceMap . toSource ( root , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap ) ;
Distance : 6

110
Tree	String code = root . toSource ( sourceMap , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( sourceMap , sourceMap , sourceMap ) ;
Distance : 6

111
Tree	String code = toSource ( sourceMap , sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap , sourceMap ) ;
Distance : 4

112
Tree	String code = root . toSource ( sourceMap , false ) ;
Code	String code = root . toSource ( sourceMap , false ) ;
Distance : 7

113
Tree	String code = sourceMap . toSource () . toSource ( root ) ;
Code	String code = sourceMap . toSource () . toSource ( root ) ;
Distance : 9

114
Tree	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( sourceMap , sourceMap , sourceMap ) ;
Distance : 10

115
Tree	String code = code . toSource ( root . toSource () , sourceMap ) ;
Code	String code = code . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

116
Tree	String sourceMap = root . toSource ( this , sourceMap , sourceMap ) ;
Code	String sourceMap = root . toSource ( this , sourceMap , sourceMap ) ;
Distance : 7

117
Tree	String code = code . toSource ( root , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap ) ;
Distance : 6

118
Tree	String code = code . toSource ( root ) ;
Code	String code = code . toSource ( root ) ;
Distance : 8

119
Tree	String code = toSource ( false ) ;
Code	String code = toSource ( false ) ;
Distance : 7

120
Tree	String code = root . toSource ( code , false ) ;
Code	String code = root . toSource ( code , false ) ;
Distance : 8

121
Tree	String code = toSource ( code , NUMBER_CONSTANT ) ;
Code	String code = toSource ( code , NUMBER_CONSTANT ) ;
Distance : 5

122
Tree	String code = evaluateComparison . toSource ( root , sourceMap ) ;
Code	String code = evaluateComparison . toSource ( root , sourceMap ) ;
Distance : 6

123
Tree	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 11

124
Tree	String code = root . toSource ( code , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( code , sourceMap , sourceMap ) ;
Distance : 6

125
Tree	String code = toSource ( root , FunctionFlavor.NORMAL ) ;
Code	String code = toSource ( root , FunctionFlavor.NORMAL ) ;
Distance : 5

126
Tree	String code = toSource ( root , code , code ) ;
Code	String code = toSource ( root , code , code ) ;
Distance : 4

127
Tree	String code = root . toSource () . toSource ( root ) ;
Code	String code = root . toSource () . toSource ( root ) ;
Distance : 9

128
Tree	String sourceMap = toSource ( code , NUMBER_CONSTANT ) ;
Code	String sourceMap = toSource ( code , NUMBER_CONSTANT ) ;
Distance : 6

129
Tree	String code = root . toSource ( root , es6ModuleTranspiler ) ;
Code	String code = root . toSource ( root , es6ModuleTranspiler ) ;
Distance : 7

130
Tree	String code = toSource ( root , sourceMap , sourceMap , true ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , true ) ;
Distance : 3

131
Tree	String code = code . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = code . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

132
Tree	String code = sourceMap ( root ) ;
Code	String code = sourceMap ( root ) ;
Distance : 7

133
Tree	String code = root . toSource ( root , new String ( sourceMap , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( sourceMap , sourceMap ) ) ;
Distance : 8

134
Tree	String code = toSource () . toSource ( sourceMap ) ;
Code	String code = toSource () . toSource ( sourceMap ) ;
Distance : 8

135
Tree	String code = code . toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String code = code . toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 7

136
Tree	String code = root . toSource ( this , code , sourceMap ) ;
Code	String code = root . toSource ( this , code , sourceMap ) ;
Distance : 7

137
Tree	String code = root . toSource () . toSource ( root ) ;
Code	String code = root . toSource () . toSource ( root ) ;
Distance : 9

138
Tree	String code = toSource ( false ) ;
Code	String code = toSource ( false ) ;
Distance : 7

139
Tree	String code = toSource ( STRING_CONSTANT , sourceMap ) ;
Code	String code = toSource ( STRING_CONSTANT , sourceMap ) ;
Distance : 5

140
Tree	String code = toSource () . toSource ( root , code ) ;
Code	String code = toSource () . toSource ( root , code ) ;
Distance : 8

141
Tree	String sourceMap = toSource ( root ) ;
Code	String sourceMap = toSource ( root ) ;
Distance : 7

142
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

143
Tree	String code = toSource ( toSource ( root , code ) ) ;
Code	String code = toSource ( toSource ( root , code ) ) ;
Distance : 6

144
Tree	String code = sourceMap . toSource ( root ) ;
Code	String code = sourceMap . toSource ( root ) ;
Distance : 8

145
Tree	String sourceMap = root ( root , sourceMap , sourceMap ) ;
Code	String sourceMap = root ( root , sourceMap , sourceMap ) ;
Distance : 5

146
Tree	String code = code . toSource ( this , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( this , sourceMap , sourceMap ) ;
Distance : 6

147
Tree	String sourceMap = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String sourceMap = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 8

148
Tree	String code = code . toSource ( this , sourceMap ) ;
Code	String code = code . toSource ( this , sourceMap ) ;
Distance : 7

149
Tree	String code = toSource ( root , TokenType.TYPE ) ;
Code	String code = toSource ( root , TokenType.TYPE ) ;
Distance : 5

150
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

151
Tree	String code = toSource ( root , LanguageMode.ECMASCRIPT5 ) ;
Code	String code = toSource ( root , LanguageMode.ECMASCRIPT5 ) ;
Distance : 5

152
Tree	String code = getPrototypeNameOfMethod . toSource ( root , sourceMap ) ;
Code	String code = getPrototypeNameOfMethod . toSource ( root , sourceMap ) ;
Distance : 6

153
Tree	String code = toSource ( root , code , code , false ) ;
Code	String code = toSource ( root , code , code , false ) ;
Distance : 4

154
Tree	String code = toSource ( root ( root ) , toSource ( sourceMap ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( sourceMap ) ) ;
Distance : 7

155
Tree	String code = ( ( root ) this ) . toSource ( code , sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( code , sourceMap , sourceMap ) ;
Distance : 11

156
Tree	String code = root . root ( code ) ;
Code	String code = root . root ( code ) ;
Distance : 8

157
Tree	String code = toSource ( root , NameChangingCallback ) ;
Code	String code = toSource ( root , NameChangingCallback ) ;
Distance : 5

158
Tree	String code = root . root ( root ) ;
Code	String code = root . root ( root ) ;
Distance : 8

159
Tree	String code = root . code ( root ) ;
Code	String code = root . code ( root ) ;
Distance : 8

160
Tree	String sourceMap = toSource ( root , this . sourceMap ) ;
Code	String sourceMap = toSource ( root , this . sourceMap ) ;
Distance : 6

161
Tree	String code = root . toSource ( root . toSource () , sourceMap ) ;
Code	String code = root . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

162
Tree	String sourceMap = toSource ( sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap ) ;
Distance : 7

163
Tree	String code = root . toSource ( this . root , code , sourceMap , sourceMap ) ;
Code	String code = root . toSource ( this . root , code , sourceMap , sourceMap ) ;
Distance : 8

164
Tree	String code = root . toSource ( this . root , sourceMap , sourceMap , root ) ;
Code	String code = root . toSource ( this . root , sourceMap , sourceMap , root ) ;
Distance : 7

165
Tree	String code = toSource ( root , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , code ) ;
Distance : 3

166
Tree	String sourceMap = toSource () . toSource ( code ) ;
Code	String sourceMap = toSource () . toSource ( code ) ;
Distance : 9

167
Tree	String code = toSource ( root , this . root ) ;
Code	String code = toSource ( root , this . root ) ;
Distance : 5

168
Tree	String code = toSource ( STRING_CONSTANT , code ) ;
Code	String code = toSource ( STRING_CONSTANT , code ) ;
Distance : 6

169
Tree	String sourceMap = toSource ( root , sourceMap , sourceMap , false ) ;
Code	String sourceMap = toSource ( root , sourceMap , sourceMap , false ) ;
Distance : 4

170
Tree	String code = root ( code , code ) ;
Code	String code = root ( code , code ) ;
Distance : 7

171
Tree	String sourceMap = root . toSource ( root ) ;
Code	String sourceMap = root . toSource ( root ) ;
Distance : 9

172
Tree	String code = generateSourceMap . toSource ( root , sourceMap ) ;
Code	String code = generateSourceMap . toSource ( root , sourceMap ) ;
Distance : 6

173
Tree	String code = root . toSource ( this . root , sourceMap , code , code ) ;
Code	String code = root . toSource ( this . root , sourceMap , code , code ) ;
Distance : 7

174
Tree	String code = root . toSource ( sourceMap , code ) ;
Code	String code = root . toSource ( sourceMap , code ) ;
Distance : 7

175
Tree	String sourceMap = toSource ( toSource () , code ) ;
Code	String sourceMap = toSource ( toSource () , code ) ;
Distance : 7

176
Tree	String code = toSource ( root , sourceMap , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , code ) ;
Distance : 3

177
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 10

178
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

179
Tree	String code = toSource ( root , recvLvalue.env ) ;
Code	String code = toSource ( root , recvLvalue.env ) ;
Distance : 5

180
Tree	String code = root . toSource ( toSource () , sourceMap ) ;
Code	String code = root . toSource ( toSource () , sourceMap ) ;
Distance : 8

181
Tree	String sourceMap = toSource ( false ) ;
Code	String sourceMap = toSource ( false ) ;
Distance : 8

182
Tree	String code = sourceMap . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = sourceMap . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

183
Tree	String sourceMap = toSource ( toSource ( root , code ) ) ;
Code	String sourceMap = toSource ( toSource ( root , code ) ) ;
Distance : 7

184
Tree	String code = testNoRewriteArrLit . toSource ( root , sourceMap ) ;
Code	String code = testNoRewriteArrLit . toSource ( root , sourceMap ) ;
Distance : 6

185
Tree	String code = ( ( code ) this ) . toSource ( root , sourceMap , code ) ;
Code	String code = ( ( code ) this ) . toSource ( root , sourceMap , code ) ;
Distance : 10

186
Tree	String code = toSource ( code , sourceMap , code ) ;
Code	String code = toSource ( code , sourceMap , code ) ;
Distance : 4

187
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

188
Tree	String code = sourceMap . toSource ( root . toSource () , sourceMap ) ;
Code	String code = sourceMap . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

189
Tree	String code = sourceMap . toSource ( this , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , sourceMap , sourceMap ) ;
Distance : 6

190
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

191
Tree	String code = root . toSource ( root , FunctionFlavor.NORMAL ) ;
Code	String code = root . toSource ( root , FunctionFlavor.NORMAL ) ;
Distance : 7

192
Tree	String code = transpile . toSource ( root , sourceMap ) ;
Code	String code = transpile . toSource ( root , sourceMap ) ;
Distance : 6

193
Tree	String sourceMap = root . toSource () . toSource ( sourceMap ) ;
Code	String sourceMap = root . toSource () . toSource ( sourceMap ) ;
Distance : 10

194
Tree	String code = root . toSource ( root , new String ( code , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( code , sourceMap ) ) ;
Distance : 9

195
Tree	String code = root . toSource ( root . toSource () , code ) ;
Code	String code = root . toSource ( root . toSource () , code ) ;
Distance : 8

196
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

197
Tree	String code = toSource ( root , sourceMap , sourceMap , root ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , root ) ;
Distance : 3

198
Tree	String code = code . toSource ( STRING_CONSTANT , root ) ;
Code	String code = code . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

199
Tree	String code = toSource ( root , code , false ) ;
Code	String code = toSource ( root , code , false ) ;
Distance : 4

200
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 7

201
Tree	String code = root . toSource ( toSource () , sourceMap ) ;
Code	String code = root . toSource ( toSource () , sourceMap ) ;
Distance : 8

202
Tree	String code = root . toSource ( root , Feature.ASYNC_FUNCTIONS ) ;
Code	String code = root . toSource ( root , Feature.ASYNC_FUNCTIONS ) ;
Distance : 7

203
Tree	String code = root . toSource () ;
Code	String code = root . toSource () ;
Distance : 9

204
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

205
Tree	String code = new String ( root , code ) . toSource ( root ) ;
Code	String code = new String ( root , code ) . toSource ( root ) ;
Distance : 8

206
Tree	String sourceMap = toSource () ;
Code	String sourceMap = toSource () ;
Distance : 10

207
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 9

208
Tree	String code = root . toSource ( root , CHAR_CONS ) ;
Code	String code = root . toSource ( root , CHAR_CONS ) ;
Distance : 7

209
Tree	String code = root . toSource ( root , code ) ;
Code	String code = root . toSource ( root , code ) ;
Distance : 7

210
Tree	String code = toSource ( code . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( code . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Distance : 10

211
Tree	String code = toSource () . toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource () . toSource ( sourceMap , sourceMap ) ;
Distance : 7

212
Tree	String code = root . toSource ( this , sourceMap , code , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap , code , sourceMap ) ;
Distance : 6

213
Tree	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , root ) ;
Distance : 7

214
Tree	String sourceMap = root ( root , sourceMap ) ;
Code	String sourceMap = root ( root , sourceMap ) ;
Distance : 6

215
Tree	String sourceMap = toSource () . toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource () . toSource ( root , sourceMap ) ;
Distance : 8

216
Tree	String code = toSource ( root ( code ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( code ) , toSource ( root ) ) ;
Distance : 7

217
Tree	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Code	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 5

218
Tree	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 7

219
Tree	String code = toSource ( sourceMap ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( sourceMap ( root ) , toSource ( root ) ) ;
Distance : 8

220
Tree	String code = ( ( root ) this ) . toSource ( root , code , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code , code ) ;
Distance : 11

221
Tree	String code = toSource ( root , NUMBER_CONSTANT ) ;
Code	String code = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 4

222
Tree	String sourceMap = toSource ( root ) ;
Code	String sourceMap = toSource ( root ) ;
Distance : 7

223
Tree	String code = toSource () . toSource ( code ) ;
Code	String code = toSource () . toSource ( code ) ;
Distance : 8

224
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Distance : 7

225
Tree	String code = code ( root , sourceMap ) ;
Code	String code = code ( root , sourceMap ) ;
Distance : 5

226
Tree	String root = toSource () . toSource ( root ) ;
Code	String root = toSource () . toSource ( root ) ;
Distance : 9

227
Tree	String root = toSource ( root ) ;
Code	String root = toSource ( root ) ;
Distance : 7

228
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , code ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , code ) ;
Distance : 9

229
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Distance : 9

230
Tree	String code = root . toSource ( code , sourceMap , sourceMap . toSource () ) ;
Code	String code = root . toSource ( code , sourceMap , sourceMap . toSource () ) ;
Distance : 7

231
Tree	String code = indexOf . toSource ( root , sourceMap ) ;
Code	String code = indexOf . toSource ( root , sourceMap ) ;
Distance : 6

232
Tree	String code = toSource () . toSource ( code , sourceMap ) ;
Code	String code = toSource () . toSource ( code , sourceMap ) ;
Distance : 8

233
Tree	String code = toSource ( toSource ( code , sourceMap ) ) ;
Code	String code = toSource ( toSource ( code , sourceMap ) ) ;
Distance : 6

234
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

235
Tree	String code = root ;
Code	String code = root ;
Distance : 9

236
Tree	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 4

237
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

238
Tree	String code = toSource ( root , es6ModuleTranspiler ) ;
Code	String code = toSource ( root , es6ModuleTranspiler ) ;
Distance : 5

239
Tree	String code = root . toSource ( this , root ) ;
Code	String code = root . toSource ( this , root ) ;
Distance : 8

240
Tree	String code = code . toSource ( this , code , sourceMap ) ;
Code	String code = code . toSource ( this , code , sourceMap ) ;
Distance : 7

241
Tree	String sourceMap = toSource ( root , this . code ) ;
Code	String sourceMap = toSource ( root , this . code ) ;
Distance : 6

242
Tree	String code = toSource ( root , EquivalenceMethod.DATA_FLOW ) ;
Code	String code = toSource ( root , EquivalenceMethod.DATA_FLOW ) ;
Distance : 5

243
Tree	String code = compilerState.functionNames . toSource ( root , sourceMap ) ;
Code	String code = compilerState.functionNames . toSource ( root , sourceMap ) ;
Distance : 6

244
Tree	String root = toSource () ;
Code	String root = toSource () ;
Distance : 10

245
Tree	String code = root . toSource ( root , NameChangingCallback ) ;
Code	String code = root . toSource ( root , NameChangingCallback ) ;
Distance : 7

246
Tree	String code = root . toSource ( this , sourceMap , code ) ;
Code	String code = root . toSource ( this , sourceMap , code ) ;
Distance : 6

247
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

248
Tree	String code = root . toSource ( this , sourceMap ) ;
Code	String code = root . toSource ( this , sourceMap ) ;
Distance : 7

249
Tree	String code = code . toSource ( this , code ) ;
Code	String code = code . toSource ( this , code ) ;
Distance : 8

250
Tree	String sourceMap = toSource () . toSource ( root ) ;
Code	String sourceMap = toSource () . toSource ( root ) ;
Distance : 9

251
Tree	String code = toSource ( root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap ) ;
Distance : 3

252
Tree	String sourceMap = root ( code ) ;
Code	String sourceMap = root ( code ) ;
Distance : 9

253
Tree	String code = sourceMap . toSource ( this , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , sourceMap ) ;
Distance : 7

254
Tree	String code = root . toSource ( code , code ) ;
Code	String code = root . toSource ( code , code ) ;
Distance : 8

255
Tree	String code = toSource ( root ( root ) , toSource ( code ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( code ) ) ;
Distance : 7

256
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

257
Tree	String root = toSource ( root , NUMBER_CONSTANT ) ;
Code	String root = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 5

258
Tree	String code = toSource ( sourceMap , sourceMap , sourceMap , false ) ;
Code	String code = toSource ( sourceMap , sourceMap , sourceMap , false ) ;
Distance : 4

259
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

260
Tree	String code = root . toSource ( root , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	String code = root . toSource ( root , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 7

261
Tree	String code = toSource ( toSource () , root ) ;
Code	String code = toSource ( toSource () , root ) ;
Distance : 6

262
Tree	String code = root . toSource ( sourceMap , new String ( root , sourceMap ) ) ;
Code	String code = root . toSource ( sourceMap , new String ( root , sourceMap ) ) ;
Distance : 10

263
Tree	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

264
Tree	String sourceMap = new String ( root , sourceMap ) . toSource ( root ) ;
Code	String sourceMap = new String ( root , sourceMap ) . toSource ( root ) ;
Distance : 8

265
Tree	String code = toSource () ; Override
Code	String code = toSource () ; Override
Distance : 10

266
Tree	String code = sourceMap . toSource ( STRING_CONSTANT , root ) ;
Code	String code = sourceMap . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

267
Tree	String code = root . toSource ( root , new String ( root , code ) ) ;
Code	String code = root . toSource ( root , new String ( root , code ) ) ;
Distance : 9

268
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

269
Tree	String code = root . toSource ( toSource () , code ) ;
Code	String code = root . toSource ( toSource () , code ) ;
Distance : 8

270
Tree	String root = root ;
Code	String root = root ;
Distance : 10

271
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

272
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

273
Tree	String code = root . toSource () . toSource ( root ) ;
Code	String code = root . toSource () . toSource ( root ) ;
Distance : 9

274
Tree	String code = code . toSource ( sourceMap ) ;
Code	String code = code . toSource ( sourceMap ) ;
Distance : 8

275
Tree	String code = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

276
Tree	String code = toSource ( root , this . code ) ;
Code	String code = toSource ( root , this . code ) ;
Distance : 5

277
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

278
Tree	String sourceMap = root . toSource ( root , sourceMap , sourceMap ) ;
Code	String sourceMap = root . toSource ( root , sourceMap , sourceMap ) ;
Distance : 6

279
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap , code ) ;
Distance : 10

280
Tree	String code = root . toSource ( root , code , code ) ;
Code	String code = root . toSource ( root , code , code ) ;
Distance : 6

281
Tree	String code = root . toSource ( root , new String ( root , sourceMap ) ) ;
Code	String code = root . toSource ( root , new String ( root , sourceMap ) ) ;
Distance : 9

282
Tree	String code = toSource ( true ) ; disableTypeCheck
Code	String code = toSource ( true ) ; disableTypeCheck
Distance : 8

283
Tree	String sourceMap = toSource () . toSource ( root ) ;
Code	String sourceMap = toSource () . toSource ( root ) ;
Distance : 9

284
Tree	String code = toSource ( code ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( code ( root ) , toSource ( root ) ) ;
Distance : 8

285
Tree	String code = toSource ( code , sourceMap , sourceMap ) ;
Code	String code = toSource ( code , sourceMap , sourceMap ) ;
Distance : 4

286
Tree	String code = root . toSource ( sourceMap , sourceMap , sourceMap . toSource () ) ;
Code	String code = root . toSource ( sourceMap , sourceMap , sourceMap . toSource () ) ;
Distance : 7

287
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Distance : 6

288
Tree	String sourceMap = root . toSource ( this , code , sourceMap ) ;
Code	String sourceMap = root . toSource ( this , code , sourceMap ) ;
Distance : 8

289
Tree	String code = toSource ( root , code , sourceMap , false ) ;
Code	String code = toSource ( root , code , sourceMap , false ) ;
Distance : 4

290
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

291
Tree	String code = root . toSource ( root . toSource () , sourceMap ) ;
Code	String code = root . toSource ( root . toSource () , sourceMap ) ;
Distance : 8

292
Tree	String sourceMap = root ;
Code	String sourceMap = root ;
Distance : 10

293
Tree	String code = toSource ( sourceMap . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( sourceMap . toSource ( root ) , toSource ( root ) ) ;
Distance : 10

294
Tree	String code = root . toSource ( sourceMap . toSource () , sourceMap ) ;
Code	String code = root . toSource ( sourceMap . toSource () , sourceMap ) ;
Distance : 9

295
Tree	String code = root . toSource ( sourceMap , sourceMap , code . toSource () ) ;
Code	String code = root . toSource ( sourceMap , sourceMap , code . toSource () ) ;
Distance : 7

296
Tree	String code = root . toSource ( STRING_CONSTANT , root ) ;
Code	String code = root . toSource ( STRING_CONSTANT , root ) ;
Distance : 8

297
Tree	String sourceMap = root ( root , code ) ;
Code	String sourceMap = root ( root , code ) ;
Distance : 7

298
Tree	String code = toSource ( root . toSource ( root ) , toSource ( code ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( code ) ) ;
Distance : 9

299
Tree	String code = toSource ( STRING_CONSTANT , root ) ;
Code	String code = toSource ( STRING_CONSTANT , root ) ;
Distance : 6

300
Tree	String code = root ( sourceMap , code ) ;
Code	String code = root ( sourceMap , code ) ;
Distance : 6

301
Tree	String sourceMap = root . toSource () ;
Code	String sourceMap = root . toSource () ;
Distance : 10

302
Tree	String root = toSource ( true ) ;
Code	String root = toSource ( true ) ;
Distance : 8

303
Tree	String sourceMap = toSource () . toSource ( root , code ) ;
Code	String sourceMap = toSource () . toSource ( root , code ) ;
Distance : 9

304
Tree	String code = new String ( root , sourceMap ) . toSource ( code ) ;
Code	String code = new String ( root , sourceMap ) . toSource ( code ) ;
Distance : 7

305
Tree	String sourceMap = toSource ( code ) ;
Code	String sourceMap = toSource ( code ) ;
Distance : 8

306
Tree	String code = sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap ) ;
Distance : 5

307
Tree	String root = toSource ( STRING_CONSTANT , root ) ;
Code	String root = toSource ( STRING_CONSTANT , root ) ;
Distance : 7

308
Tree	String code = root ( code ) ;
Code	String code = root ( code ) ;
Distance : 8

309
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

310
Tree	String code = toSource ( root . toSource ( code ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( code ) , toSource ( root ) ) ;
Distance : 9

311
Tree	String code = code ;
Code	String code = code ;
Distance : 10

312
Tree	String code = code . toSource () . toSource ( sourceMap ) ;
Code	String code = code . toSource () . toSource ( sourceMap ) ;
Distance : 9

313
Tree	String code = root . toSource ( root , pair.type ) ;
Code	String code = root . toSource ( root , pair.type ) ;
Distance : 7

314
Tree	String sourceMap = root . toSource ( toSource () , code ) ;
Code	String sourceMap = root . toSource ( toSource () , code ) ;
Distance : 9

315
Tree	String sourceMap = root . toSource ( this , code ) ;
Code	String sourceMap = root . toSource ( this , code ) ;
Distance : 9

316
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Distance : 7

317
Tree	String code = root . toSource ( root , false ) ;
Code	String code = root . toSource ( root , false ) ;
Distance : 7

318
Tree	String code = toSource ( toSource () , sourceMap ) ;
Code	String code = toSource ( toSource () , sourceMap ) ;
Distance : 6

319
Tree	String code = new String ( code , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( code , sourceMap ) . toSource ( root ) ;
Distance : 8

320
Tree	String code = root . toSource ( toSource () , root ) ;
Code	String code = root . toSource ( toSource () , root ) ;
Distance : 8

321
Tree	String code = toSource ( toSource ( root , sourceMap ) ) ;
Code	String code = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 6

322
Tree	String code = toSource ( root , FunctionFlavor.ASYNCHRONOUS ) ;
Code	String code = toSource ( root , FunctionFlavor.ASYNCHRONOUS ) ;
Distance : 5

323
Tree	String sourceMap = toSource ( toSource () , root ) ;
Code	String sourceMap = toSource ( toSource () , root ) ;
Distance : 7

324
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 7

325
Tree	String code = toSource ( true ) ; TypeInferenceMode.CHECKED
Code	String code = toSource ( true ) ; TypeInferenceMode.CHECKED
Distance : 8

326
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

327
Tree	String code = new String ( root , sourceMap ) . toSource ( sourceMap ) ;
Code	String code = new String ( root , sourceMap ) . toSource ( sourceMap ) ;
Distance : 7

328
Tree	String code = code . toSource ( toSource () , code ) ;
Code	String code = code . toSource ( toSource () , code ) ;
Distance : 8

329
Tree	String code = toSource ( code . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( code . toSource ( root ) , toSource ( root ) ) ;
Distance : 10

330
Tree	String code = sourceMap . toSource ( this , code ) ;
Code	String code = sourceMap . toSource ( this , code ) ;
Distance : 8

331
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Distance : 8

332
Tree	String code = new String ( sourceMap , sourceMap ) . toSource ( root ) ;
Code	String code = new String ( sourceMap , sourceMap ) . toSource ( root ) ;
Distance : 8

333
Tree	String code = ( ( code ) this ) . toSource ( root , code ) ;
Code	String code = ( ( code ) this ) . toSource ( root , code ) ;
Distance : 11

334
Tree	String code = root ( root , code , code ) ;
Code	String code = root ( root , code , code ) ;
Distance : 5

335
Tree	String code = root . toSource ( root , code , sourceMap ) ;
Code	String code = root . toSource ( root , code , sourceMap ) ;
Distance : 6

336
Tree	String code = toSource ( root . toSource ( root ) , toSource ( sourceMap ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( sourceMap ) ) ;
Distance : 9

337
Tree	String sourceMap = root . toSource ( root , false ) ;
Code	String sourceMap = root . toSource ( root , false ) ;
Distance : 8

338
Tree	String code = ( ( sourceMap ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = ( ( sourceMap ) this ) . toSource ( root , sourceMap , sourceMap ) ;
Distance : 10

339
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , sourceMap , code ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , sourceMap , code ) ;
Distance : 9

340
Tree	String code = toSource ( toSource ( sourceMap , sourceMap ) ) ;
Code	String code = toSource ( toSource ( sourceMap , sourceMap ) ) ;
Distance : 5

341
Tree	String code = root . root ( sourceMap ) ;
Code	String code = root . root ( sourceMap ) ;
Distance : 7

342
Tree	String code = toSource () ; []
Code	String code = toSource () ; []
Distance : 10

343
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

344
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

345
Tree	String code = toSource ( root , sourceMap , sourceMap , = ) ;
Code	String code = toSource ( root , sourceMap , sourceMap , = ) ;
Distance : 3

346
Tree	String root = root . toSource () ;
Code	String root = root . toSource () ;
Distance : 10

347
Tree	String code = sourceMap . toSource ( toSource () , code ) ;
Code	String code = sourceMap . toSource ( toSource () , code ) ;
Distance : 8

348
Tree	String code = root . toSource ( sourceMap , sourceMap , code ) ;
Code	String code = root . toSource ( sourceMap , sourceMap , code ) ;
Distance : 6

349
Tree	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( root ) , toSource ( root ) ) ;
Distance : 7

350
Tree	String code = root . toSource ( sourceMap , sourceMap ) ;
Code	String code = root . toSource ( sourceMap , sourceMap ) ;
Distance : 7

351
Tree	String code = toSource () ; pname
Code	String code = toSource () ; pname
Distance : 10

352
Tree	String code = toSource ( root . toSource ( sourceMap ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( sourceMap ) , toSource ( root ) ) ;
Distance : 8

353
Tree	String code = new String ( sourceMap , code ) . toSource ( root ) ;
Code	String code = new String ( sourceMap , code ) . toSource ( root ) ;
Distance : 9

354
Tree	String code = toSource ( root , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , false ) ;
Distance : 3

355
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Distance : 7

356
Tree	String code = root . toSource ( root , new String ( sourceMap , code ) ) ;
Code	String code = root . toSource ( root , new String ( sourceMap , code ) ) ;
Distance : 8

357
Tree	String code = code . toSource ( toSource () , sourceMap ) ;
Code	String code = code . toSource ( toSource () , sourceMap ) ;
Distance : 8

358
Tree	String code = toSource ( toSource ( sourceMap , code ) ) ;
Code	String code = toSource ( toSource ( sourceMap , code ) ) ;
Distance : 5

359
Tree	String sourceMap = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String sourceMap = root . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 7

360
Tree	String code = root . toSource ( sourceMap , true ) ;
Code	String code = root . toSource ( sourceMap , true ) ;
Distance : 7

361
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

362
Tree	String sourceMap = toSource ( STRING_CONSTANT , code ) ;
Code	String sourceMap = toSource ( STRING_CONSTANT , code ) ;
Distance : 7

363
Tree	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 9

364
Tree	String code = toSource ( toSource ( root , sourceMap ) ) ;
Code	String code = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 6

365
Tree	String code = sourceMap ;
Code	String code = sourceMap ;
Distance : 9

366
Tree	String code = code ( root , sourceMap , sourceMap ) ;
Code	String code = code ( root , sourceMap , sourceMap ) ;
Distance : 4

367
Tree	String code = root . toSource ( this . root , sourceMap , code , sourceMap ) ;
Code	String code = root . toSource ( this . root , sourceMap , code , sourceMap ) ;
Distance : 7

368
Tree	String code = toSource () ; for
Code	String code = toSource () ; for
Distance : 10

369
Tree	String code = root . toSource ( this . root , code , code , root ) ;
Code	String code = root . toSource ( this . root , code , code , root ) ;
Distance : 8

370
Tree	String code = toSource ( root , code , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap , sourceMap ) ;
Distance : 4

371
Tree	String sourceMap = toSource ( true ) ;
Code	String sourceMap = toSource ( true ) ;
Distance : 8

372
Tree	String code = root . toSource ( root , Locale.US ) ;
Code	String code = root . toSource ( root , Locale.US ) ;
Distance : 7

373
Tree	String sourceMap = root . toSource () ;
Code	String sourceMap = root . toSource () ;
Distance : 10

374
Tree	String code = root ( sourceMap ) ;
Code	String code = root ( sourceMap ) ;
Distance : 7

375
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 8

376
Tree	String code = toSource ( sourceMap , this . sourceMap ) ;
Code	String code = toSource ( sourceMap , this . sourceMap ) ;
Distance : 5

377
Tree	String code = toSource ( sourceMap , code ) ;
Code	String code = toSource ( sourceMap , code ) ;
Distance : 5

378
Tree	String sourceMap = root . toSource ( toSource () , sourceMap ) ;
Code	String sourceMap = root . toSource ( toSource () , sourceMap ) ;
Distance : 9

379
Tree	String code = code . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

380
Tree	String code = root . toSource ( this , sourceMap , sourceMap , root ) ;
Code	String code = root . toSource ( this , sourceMap , sourceMap , root ) ;
Distance : 6

381
Tree	String sourceMap = toSource ( root , code , false ) ;
Code	String sourceMap = toSource ( root , code , false ) ;
Distance : 5

382
Tree	String code = sourceMap . toSource ( toSource () , sourceMap ) ;
Code	String code = sourceMap . toSource ( toSource () , sourceMap ) ;
Distance : 8

383
Tree	String code = code . toSource ( root , false ) ;
Code	String code = code . toSource ( root , false ) ;
Distance : 7

384
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

385
Tree	String code = root . toSource ( this , code , code , sourceMap ) ;
Code	String code = root . toSource ( this , code , code , sourceMap ) ;
Distance : 7

386
Tree	String code = root . toSource ( this , sourceMap , code , code ) ;
Code	String code = root . toSource ( this , sourceMap , code , code ) ;
Distance : 6

387
Tree	String code = toSource ( root , code , true ) ;
Code	String code = toSource ( root , code , true ) ;
Distance : 4

388
Tree	String code = toSource ( root , code , code , sourceMap ) ;
Code	String code = toSource ( root , code , code , sourceMap ) ;
Distance : 4

389
Tree	String code = toSource ( toSource () , code ) ;
Code	String code = toSource ( toSource () , code ) ;
Distance : 6

390
Tree	String sourceMap = root ;
Code	String sourceMap = root ;
Distance : 10

391
Tree	String code = root . toSource ( root , code , code . toSource () ) ;
Code	String code = root . toSource ( root , code , code . toSource () ) ;
Distance : 7

392
Tree	String code = sourceMap . toSource ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap , sourceMap ) ;
Distance : 5

393
Tree	String code = toSource () ;
Code	String code = toSource () ;
Distance : 9

394
Tree	String code = toSource ( code , this . code ) ;
Code	String code = toSource ( code , this . code ) ;
Distance : 6

395
Tree	String code = toSource () ;
Code	String code = toSource () ;
Distance : 9

396
Tree	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 9

397
Tree	String code = root ( root , sourceMap , sourceMap ) ;
Code	String code = root ( root , sourceMap , sourceMap ) ;
Distance : 4

398
Tree	String code = sourceMap . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = sourceMap . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

399
Tree	String code = toSource () . toSource ( sourceMap , code ) ;
Code	String code = toSource () . toSource ( sourceMap , code ) ;
Distance : 7

400
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

401
Tree	String code = root . toSource ( code . toSource () , sourceMap ) ;
Code	String code = root . toSource ( code . toSource () , sourceMap ) ;
Distance : 9

402
Tree	String code = root . toSource ( this , code , sourceMap , root ) ;
Code	String code = root . toSource ( this , code , sourceMap , root ) ;
Distance : 7

403
Tree	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Code	String sourceMap = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 5

404
Tree	String sourceMap = toSource ( toSource () , root ) ;
Code	String sourceMap = toSource ( toSource () , root ) ;
Distance : 7

405
Tree	String root = toSource ( false ) ;
Code	String root = toSource ( false ) ;
Distance : 8

406
Tree	String code = ( ( root ) this ) . toSource ( root , code , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code , sourceMap ) ;
Distance : 11

407
Tree	String code = toSource ( root ( sourceMap ) , toSource ( root ) ) ;
Code	String code = toSource ( root ( sourceMap ) , toSource ( root ) ) ;
Distance : 6

408
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 7

409
Tree	String code = root . toSource () . toSource ( code ) ;
Code	String code = root . toSource () . toSource ( code ) ;
Distance : 9

410
Tree	String code = toSource ( sourceMap , NUMBER_CONSTANT ) ;
Code	String code = toSource ( sourceMap , NUMBER_CONSTANT ) ;
Distance : 4

411
Tree	String code = toSource () . toSource ( root ) ;
Code	String code = toSource () . toSource ( root ) ;
Distance : 8

412
Tree	String code = toSource ( root , NUMBER_CONSTANT ) ;
Code	String code = toSource ( root , NUMBER_CONSTANT ) ;
Distance : 4

413
Tree	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 10

414
Tree	String sourceMap = root . toSource () . toSource ( root ) ;
Code	String sourceMap = root . toSource () . toSource ( root ) ;
Distance : 10

415
Tree	String code = root . toSource ( this , code , sourceMap , code ) ;
Code	String code = root . toSource ( this , code , sourceMap , code ) ;
Distance : 7

416
Tree	String code = toSource ( true ) ;
Code	String code = toSource ( true ) ;
Distance : 7

417
Tree	String code = root . toSource ( this , root , sourceMap ) ;
Code	String code = root . toSource ( this , root , sourceMap ) ;
Distance : 7

418
Tree	String code = root . toSource ( root , typeVars ) ;
Code	String code = root . toSource ( root , typeVars ) ;
Distance : 7

419
Tree	String code = toSource ( STRING_CONSTANT , root ) ;
Code	String code = toSource ( STRING_CONSTANT , root ) ;
Distance : 6

420
Tree	String sourceMap = root . toSource ( sourceMap ) ;
Code	String sourceMap = root . toSource ( sourceMap ) ;
Distance : 9

421
Tree	String code = ( ( root ) this ) . toSource ( root , code ) ;
Code	String code = ( ( root ) this ) . toSource ( root , code ) ;
Distance : 10

422
Tree	String code = toSource () ; get
Code	String code = toSource () ; get
Distance : 10

423
Tree	String code = toSource ( sourceMap , code , false ) ;
Code	String code = toSource ( sourceMap , code , false ) ;
Distance : 5

424
Tree	String code = root . toSource () ;
Code	String code = root . toSource () ;
Distance : 9

425
Tree	String code = root . toSource ( root , false ) ;
Code	String code = root . toSource ( root , false ) ;
Distance : 7

426
Tree	String code = toSource () . toSource ( code , code ) ;
Code	String code = toSource () . toSource ( code , code ) ;
Distance : 8

427
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 6

428
Tree	String code = root . toSource () . toSource ( sourceMap ) ;
Code	String code = root . toSource () . toSource ( sourceMap ) ;
Distance : 9

429
Tree	String code = code . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Code	String code = code . toSource ( root , sourceMap , sourceMap . toSource () ) ;
Distance : 6

430
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 7

431
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

432
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

433
Tree	String code = root . toSource ( root , sourceMap , code . toSource () ) ;
Code	String code = root . toSource ( root , sourceMap , code . toSource () ) ;
Distance : 6

434
Tree	String sourceMap = root ( root ) ;
Code	String sourceMap = root ( root ) ;
Distance : 8

435
Tree	String root = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Code	String root = toSource ( toSource () , STRING_CONSTANT , code . toSource () ) ;
Distance : 8

436
Tree	String code = root . sourceMap ( root ) ;
Code	String code = root . sourceMap ( root ) ;
Distance : 7

437
Tree	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String code = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 9

438
Tree	String code = toSource ( toSource () , root ) ;
Code	String code = toSource ( toSource () , root ) ;
Distance : 6

439
Tree	String code = toSource ( toSource () , root ) ;
Code	String code = toSource ( toSource () , root ) ;
Distance : 6

440
Tree	String code = toSource ( code . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( code . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , code , sourceMap ) ;
Distance : 10

441
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , root . toSource () ) ;
Distance : 8

442
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap . toSource () ) ;
Distance : 7

443
Tree	String sourceMap = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Code	String sourceMap = toSource ( root . toSource ( root ) , toSource ( root ) ) ;
Distance : 10

444
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

445
Tree	String code = new String ( sourceMap , sourceMap ) . toSource ( sourceMap ) ;
Code	String code = new String ( sourceMap , sourceMap ) . toSource ( sourceMap ) ;
Distance : 8

446
Tree	String code = toSource ( sourceMap . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( sourceMap . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Distance : 10

447
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , root ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , root ) ;
Distance : 6

448
Tree	String code = root . toSource ( sourceMap . toSource () , code ) ;
Code	String code = root . toSource ( sourceMap . toSource () , code ) ;
Distance : 9

449
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

450
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

451
Tree	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Distance : 9

452
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

453
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

454
Tree	String code = toSource ( toSource ( code , code ) ) ;
Code	String code = toSource ( toSource ( code , code ) ) ;
Distance : 6

455
Tree	String sourceMap = toSource ( toSource () , sourceMap ) ;
Code	String sourceMap = toSource ( toSource () , sourceMap ) ;
Distance : 7

456
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

457
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

458
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

459
Tree	String code = toSource ( sourceMap , code ) ;
Code	String code = toSource ( sourceMap , code ) ;
Distance : 5

460
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

461
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

462
Tree	String sourceMap = toSource () . toSource ( sourceMap ) ;
Code	String sourceMap = toSource () . toSource ( sourceMap ) ;
Distance : 9

463
Tree	String code = root . toSource ( code . toSource () , code ) ;
Code	String code = root . toSource ( code . toSource () , code ) ;
Distance : 9

464
Tree	String code = toSource ( toSource () , sourceMap ) ;
Code	String code = toSource ( toSource () , sourceMap ) ;
Distance : 6

465
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

466
Tree	String code = root ( code , sourceMap , sourceMap ) ;
Code	String code = root ( code , sourceMap , sourceMap ) ;
Distance : 5

467
Tree	String code = toSource ( toSource ( root , sourceMap ) ) ;
Code	String code = toSource ( toSource ( root , sourceMap ) ) ;
Distance : 6

468
Tree	String sourceMap = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Code	String sourceMap = toSource ( root . toSource ( STRING_CONSTANT ) , STRING_CONSTANT , root , sourceMap ) ;
Distance : 10

469
Tree	String code = toSource () ; lines
Code	String code = toSource () ; lines
Distance : 10

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 160
Wrong
========================================================================
False

0
Tree	RemoveUnusedCode.Builder = current.scopes . getParent () ;
Code	RemoveUnusedCode.Builder = current.scopes . getParent () ;
Distance : 8

1
Tree	RemoveUnusedCode.Builder = FeatureSet.BARE_MINIMUM . getParent () ;
Code	RemoveUnusedCode.Builder = FeatureSet.BARE_MINIMUM . getParent () ;
Distance : 8

2
Tree	RemoveUnusedCode.Builder = DiagnosticGroups.LINT_CHECKS . getParent () ;
Code	RemoveUnusedCode.Builder = DiagnosticGroups.LINT_CHECKS . getParent () ;
Distance : 8

3
Tree	RemoveUnusedCode.Builder = options.skipNonTranspilationPasses . getParent () ;
Code	RemoveUnusedCode.Builder = options.skipNonTranspilationPasses . getParent () ;
Distance : 8

4
Tree	RemoveUnusedCode.Builder = compilerState.typeCheckingHasRun . getParent () ;
Code	RemoveUnusedCode.Builder = compilerState.typeCheckingHasRun . getParent () ;
Distance : 8

5
Tree	RemoveUnusedCode.Builder = CompilerOptions.J2clPassMode . getParent () ;
Code	RemoveUnusedCode.Builder = CompilerOptions.J2clPassMode . getParent () ;
Distance : 8

6
Tree	currentScript.declareLegacyNamespace = current.scopes . getParent () ;
Code	currentScript.declareLegacyNamespace = current.scopes . getParent () ;
Distance : 8

7
Tree	RemoveUnusedCode.Builder = objType.nominalType . getParent () ;
Code	RemoveUnusedCode.Builder = objType.nominalType . getParent () ;
Distance : 8

8
Tree	RemoveUnusedCode.Builder = Mode.ES8_OR_GREATER . getParent () ;
Code	RemoveUnusedCode.Builder = Mode.ES8_OR_GREATER . getParent () ;
Distance : 8

9
Tree	RemoveUnusedCode.Builder = BASE64_DECODE_MAP . getParent () ;
Code	RemoveUnusedCode.Builder = BASE64_DECODE_MAP . getParent () ;
Distance : 8

10
Tree	isConstDeclaration = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	isConstDeclaration = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

11
Tree	isConstDeclaration = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	isConstDeclaration = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

12
Tree	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

13
Tree	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

14
Tree	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

15
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

16
Tree	this . NodeUtil = ( assignNode ) isExprResult . getParent () ;
Code	this . NodeUtil = ( assignNode ) isExprResult . getParent () ;
Distance : 8

17
Tree	this . NodeUtil = ( assignNode ) NodeUtil . getParent () ;
Code	this . NodeUtil = ( assignNode ) NodeUtil . getParent () ;
Distance : 8

18
Tree	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () ;
Distance : 6

19
Tree	IntPropListItem = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	IntPropListItem = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

20
Tree	global.root = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	global.root = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

21
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

22
Tree	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

23
Tree	currentScript.declareLegacyNamespace = ( assignNode ) other.liveSet . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) other.liveSet . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

24
Tree	this . maybeAliased = ( NodeUtil ) isExprResult . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) isExprResult . getParent () ;
Distance : 6

25
Tree	RemoveUnusedCode.Builder = ( NodeUtil ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( NodeUtil ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

26
Tree	; = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	; = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

27
Tree	global.root = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	global.root = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

28
Tree	other.number = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	other.number = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

29
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

30
Tree	isConstDeclaration = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	isConstDeclaration = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

31
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

32
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . getParent () ;
Distance : 9

33
Tree	this . NodeUtil = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 9

34
Tree	this . NodeUtil = ( assignNode ) isExprResult . getParent () . isExprResult () ;
Code	this . NodeUtil = ( assignNode ) isExprResult . getParent () . isExprResult () ;
Distance : 10

35
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , recvLvalue.env ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , recvLvalue.env ) ;
Distance : 8

36
Tree	this . NodeUtil = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 9

37
Tree	IntPropListItem = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	IntPropListItem = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

38
Tree	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 11

39
Tree	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

40
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

41
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , stringKey ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , stringKey ) ;
Distance : 8

42
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

43
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , instance.declarations ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , instance.declarations ) ;
Distance : 8

44
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , TypeInferenceMode.CHECKED ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , TypeInferenceMode.CHECKED ) ;
Distance : 8

45
Tree	currentScript.declareLegacyNamespace = isExprResult ( assignNode , recvLvalue.env ) ;
Code	currentScript.declareLegacyNamespace = isExprResult ( assignNode , recvLvalue.env ) ;
Distance : 8

46
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

47
Tree	currentScript.declareLegacyNamespace = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	currentScript.declareLegacyNamespace = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

48
Tree	bindComponents.thisValue = NodeUtil . assignNode ( assignNode ) ;
Code	bindComponents.thisValue = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

49
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

50
Tree	options.skipNonTranspilationPasses = NodeUtil . assignNode ( assignNode ) ;
Code	options.skipNonTranspilationPasses = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

51
Tree	InvalidatingTypes.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	InvalidatingTypes.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

52
Tree	other.number = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	other.number = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

53
Tree	FunctionFlavor.NORMAL = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	FunctionFlavor.NORMAL = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

54
Tree	other.number = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	other.number = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

55
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , GOOG_LOADMODULE ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , GOOG_LOADMODULE ) ;
Distance : 8

56
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , TokenType.OPEN_PAREN ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , TokenType.OPEN_PAREN ) ;
Distance : 8

57
Tree	currentScript.declareLegacyNamespace = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	currentScript.declareLegacyNamespace = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

58
Tree	isConstDeclaration = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	isConstDeclaration = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

59
Tree	other.number = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	other.number = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

60
Tree	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

61
Tree	global.root = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	global.root = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

62
Tree	InvalidatingTypes.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	InvalidatingTypes.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

63
Tree	IntPropListItem = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	IntPropListItem = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

64
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , parent.rootNode ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , parent.rootNode ) ;
Distance : 8

65
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode ) ;
Distance : 15

66
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , getGrandparent ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , getGrandparent ) ;
Distance : 8

67
Tree	RemoveUnusedCode.Builder = isExprResult ( assignNode , objNode ) ;
Code	RemoveUnusedCode.Builder = isExprResult ( assignNode , objNode ) ;
Distance : 8

68
Tree	FunctionFlavor.NORMAL = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	FunctionFlavor.NORMAL = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

69
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent ( assignNode . getParent () , assignNode ) ;
Distance : 12

70
Tree	other.number = ( assignNode ) assignNode . getParent () ;
Code	other.number = ( assignNode ) assignNode . getParent () ;
Distance : 10

71
Tree	RemoveUnusedCode.Builder = new GlobalTypeInfoCollector ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new GlobalTypeInfoCollector ( assignNode ) . getParent () ;
Distance : 9

72
Tree	other.number = new objType.nominalType ( assignNode ) . getParent () ;
Code	other.number = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

73
Tree	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () ;
Code	FunctionFlavor.NORMAL = ( assignNode ) assignNode . getParent () ;
Distance : 10

74
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

75
Tree	InvalidatingTypes.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Code	InvalidatingTypes.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

76
Tree	other.number = NodeUtil . getParent ( this . assignNode ) ;
Code	other.number = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

77
Tree	InvalidatingTypes.Builder = NodeUtil . getParent ( this . assignNode ) ;
Code	InvalidatingTypes.Builder = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

78
Tree	FunctionFlavor.NORMAL = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	FunctionFlavor.NORMAL = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

79
Tree	RemoveUnusedCode.Builder = new Scanner ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new Scanner ( assignNode ) . getParent () ;
Distance : 9

80
Tree	currentScript.declareLegacyNamespace = assignNode . getParent ( this . assignNode ) ;
Code	currentScript.declareLegacyNamespace = assignNode . getParent ( this . assignNode ) ;
Distance : 7

81
Tree	FunctionFlavor.NORMAL = new objType.nominalType ( assignNode ) . getParent () ;
Code	FunctionFlavor.NORMAL = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

82
Tree	isConstDeclaration = ( assignNode ) assignNode . getParent () ;
Code	isConstDeclaration = ( assignNode ) assignNode . getParent () ;
Distance : 10

83
Tree	RemoveUnusedCode.Builder = new ComposeWarningsGuard ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new ComposeWarningsGuard ( assignNode ) . getParent () ;
Distance : 9

84
Tree	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( NodeUtil ) assignNode . getParent () ;
Distance : 9

85
Tree	other.number = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	other.number = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

86
Tree	InvalidatingTypes.Builder = assignNode . getParent ( this . assignNode ) ;
Code	InvalidatingTypes.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

87
Tree	currentScript.declareLegacyNamespace = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

88
Tree	FunctionFlavor.NORMAL = assignNode . getParent ( this . assignNode ) ;
Code	FunctionFlavor.NORMAL = assignNode . getParent ( this . assignNode ) ;
Distance : 7

89
Tree	RemoveUnusedCode.Builder = ( assignNode ) other.liveSet . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) other.liveSet . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

90
Tree	RemoveUnusedCode.Builder = new EnumMap ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new EnumMap ( assignNode ) . getParent () ;
Distance : 9

91
Tree	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent () ;
Code	options.skipNonTranspilationPasses = ( assignNode ) assignNode . getParent () ;
Distance : 10

92
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

93
Tree	FunctionFlavor.NORMAL = NodeUtil . getParent ( this . assignNode ) ;
Code	FunctionFlavor.NORMAL = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

94
Tree	global.root = ( assignNode ) assignNode . getParent () ;
Code	global.root = ( assignNode ) assignNode . getParent () ;
Distance : 10

95
Tree	RemoveUnusedCode.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

96
Tree	RemoveUnusedCode.Builder = assignNode . assignNode ( assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . assignNode ( assignNode ) ;
Distance : 5

97
Tree	InvalidatingTypes.Builder = NodeUtil . assignNode ( assignNode ) ;
Code	InvalidatingTypes.Builder = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

98
Tree	IntPropListItem = ( assignNode ) assignNode . getParent () ;
Code	IntPropListItem = ( assignNode ) assignNode . getParent () ;
Distance : 10

99
Tree	isConstDeclaration = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	isConstDeclaration = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

100
Tree	InvalidatingTypes.Builder = new NodeUtil ( assignNode ) . getParent () ;
Code	InvalidatingTypes.Builder = new NodeUtil ( assignNode ) . getParent () ;
Distance : 9

101
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

102
Tree	isConstDeclaration = NodeUtil . getParent ( this . assignNode ) ;
Code	isConstDeclaration = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

103
Tree	options.skipNonTranspilationPasses = new assignNode ( assignNode ) . getParent () ;
Code	options.skipNonTranspilationPasses = new assignNode ( assignNode ) . getParent () ;
Distance : 9

104
Tree	InvalidatingTypes.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	InvalidatingTypes.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

105
Tree	FunctionFlavor.NORMAL = NodeUtil . assignNode ( assignNode ) ;
Code	FunctionFlavor.NORMAL = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

106
Tree	RemoveUnusedCode.Builder = new assignNode ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new assignNode ( assignNode ) . getParent () ;
Distance : 9

107
Tree	RemoveUnusedCode.Builder = NodeUtil . assignNode ( assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

108
Tree	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . getParent () ;
Distance : 9

109
Tree	other.number = NodeUtil . assignNode ( assignNode ) ;
Code	other.number = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

110
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

111
Tree	currentScript.declareLegacyNamespace = new assignNode ( assignNode ) . getParent () ;
Code	currentScript.declareLegacyNamespace = new assignNode ( assignNode ) . getParent () ;
Distance : 9

112
Tree	this . maybeAliased = ( config.parseTypeSyntax ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( config.parseTypeSyntax ) NodeUtil . getParent () ;
Distance : 7

113
Tree	this . maybeAliased = ( global.root ) assignNode . getParent () ;
Code	this . maybeAliased = ( global.root ) assignNode . getParent () ;
Distance : 7

114
Tree	isConstDeclaration = NodeUtil . assignNode ( assignNode ) ;
Code	isConstDeclaration = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

115
Tree	this . NodeUtil = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

116
Tree	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Code	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Distance : 8

117
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

118
Tree	InvalidatingTypes.Builder = new assignNode ( assignNode ) . getParent () ;
Code	InvalidatingTypes.Builder = new assignNode ( assignNode ) . getParent () ;
Distance : 9

119
Tree	this . maybeAliased = ( callSite.parent ) assignNode . getParent () ;
Code	this . maybeAliased = ( callSite.parent ) assignNode . getParent () ;
Distance : 7

120
Tree	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Distance : 6

121
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

122
Tree	RemoveUnusedCode.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

123
Tree	this . maybeAliased = ( objType.nominalType ) assignNode . getParent () ;
Code	this . maybeAliased = ( objType.nominalType ) assignNode . getParent () ;
Distance : 7

124
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

125
Tree	FunctionFlavor.NORMAL = new assignNode ( assignNode ) . getParent () ;
Code	FunctionFlavor.NORMAL = new assignNode ( assignNode ) . getParent () ;
Distance : 9

126
Tree	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

127
Tree	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

128
Tree	RemoveUnusedCode.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) ; . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

129
Tree	this . NodeUtil = ( NodeUtil ) assignNode . getParent () ;
Code	this . NodeUtil = ( NodeUtil ) assignNode . getParent () ;
Distance : 7

130
Tree	other.number = new assignNode ( assignNode ) . getParent () ;
Code	other.number = new assignNode ( assignNode ) . getParent () ;
Distance : 9

131
Tree	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Distance : 7

132
Tree	currentScript.declareLegacyNamespace = NodeUtil . assignNode ( assignNode ) ;
Code	currentScript.declareLegacyNamespace = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

133
Tree	isConstDeclaration = new assignNode ( assignNode ) . getParent () ;
Code	isConstDeclaration = new assignNode ( assignNode ) . getParent () ;
Distance : 9

134
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

135
Tree	RemoveUnusedCode.Builder = new other.nominalType ( assignNode ) . getParent () ;
Code	RemoveUnusedCode.Builder = new other.nominalType ( assignNode ) . getParent () ;
Distance : 9

136
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

137
Tree	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () ;
Code	currentScript.declareLegacyNamespace = ( assignNode ) assignNode . getParent () ;
Distance : 10

138
Tree	global.root = NodeUtil . assignNode ( assignNode ) ;
Code	global.root = NodeUtil . assignNode ( assignNode ) ;
Distance : 4

139
Tree	this . maybeAliased = ( System.out ) assignNode . getParent () ;
Code	this . maybeAliased = ( System.out ) assignNode . getParent () ;
Distance : 7

140
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 8

141
Tree	this . maybeAliased = ! NodeUtil . getParent () . getParent () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . getParent () ;
Distance : 6

142
Tree	currentScript.declareLegacyNamespace = new objType.nominalType ( assignNode ) . getParent () ;
Code	currentScript.declareLegacyNamespace = new objType.nominalType ( assignNode ) . getParent () ;
Distance : 9

143
Tree	this . maybeAliased = ( NewTypeInference.INEXISTENT_PROPERTY ) assignNode . getParent () ;
Code	this . maybeAliased = ( NewTypeInference.INEXISTENT_PROPERTY ) assignNode . getParent () ;
Distance : 7

144
Tree	currentScript.declareLegacyNamespace = NodeUtil . getParent ( this . assignNode ) ;
Code	currentScript.declareLegacyNamespace = NodeUtil . getParent ( this . assignNode ) ;
Distance : 6

145
Tree	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

146
Tree	currentScript.declareLegacyNamespace = new NodeUtil ( assignNode ) . getParent () ;
Code	currentScript.declareLegacyNamespace = new NodeUtil ( assignNode ) . getParent () ;
Distance : 9

147
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

148
Tree	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () ;
Code	InvalidatingTypes.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

149
Tree	this . maybeAliased = ( assignNode ) isExprResult . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) isExprResult . getParent () . isExprResult () ;
Distance : 9

150
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

151
Tree	this . maybeAliased = ( config.parseTypeSyntax ) assignNode . getParent () ;
Code	this . maybeAliased = ( config.parseTypeSyntax ) assignNode . getParent () ;
Distance : 7

152
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 9

153
Tree	this . NodeUtil = ( assignNode ) assignNode . getParent () ;
Code	this . NodeUtil = ( assignNode ) assignNode . getParent () ;
Distance : 8

154
Tree	this . NodeUtil = ( config.parseTypeSyntax ) assignNode . getParent () ;
Code	this . NodeUtil = ( config.parseTypeSyntax ) assignNode . getParent () ;
Distance : 8

155
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Distance : 6

156
Tree	this . maybeAliased = ( assignNode ) isExprResult . getParent () ;
Code	this . maybeAliased = ( assignNode ) isExprResult . getParent () ;
Distance : 7

157
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Distance : 7

158
Tree	this . maybeAliased = ( JSTypeNative.NO_OBJECT_TYPE ) assignNode . getParent () ;
Code	this . maybeAliased = ( JSTypeNative.NO_OBJECT_TYPE ) assignNode . getParent () ;
Distance : 7

159
Tree	this . maybeAliased = ( config.parseTypeSyntax ) isExprResult . getParent () ;
Code	this . maybeAliased = ( config.parseTypeSyntax ) isExprResult . getParent () ;
Distance : 7

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 300
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 5

1
Tree	if ( x < NUMBER_CONSTANT && current.scopes == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

2
Tree	if ( x < NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Distance : 5

3
Tree	if ( x < NUMBER_CONSTANT && current.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

4
Tree	if ( x < NUMBER_CONSTANT && current.scopes != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

5
Tree	if ( x < NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Distance : 5

6
Tree	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

7
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 9

8
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

9
Tree	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 8

10
Tree	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 8

11
Tree	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

12
Tree	if ( x < NUMBER_CONSTANT && x > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

13
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

14
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

16
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

18
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; default: }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; default: }
Distance : 6

19
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

20
Tree	if ( x == NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

21
Tree	if ( x < NUMBER_CONSTANT && x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

22
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

23
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

24
Tree	if ( x < NUMBER_CONSTANT && x - prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

25
Tree	if ( x < NUMBER_CONSTANT && x == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Distance : 6

27
Tree	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 8

28
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

29
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Distance : 5

30
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 7

31
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 8

32
Tree	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

33
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

34
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

35
Tree	if ( x < NUMBER_CONSTANT && x > Normalize.NormalizeStatements ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > Normalize.NormalizeStatements ) { add ( STRING_CONSTANT ) ; }
Distance : 6

36
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 8

37
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 7

38
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Distance : 7

39
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

40
Tree	if ( x < NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

41
Tree	if ( x < NUMBER_CONSTANT && current.scopes == DevMode.START_AND_END ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == DevMode.START_AND_END ) { add ( STRING_CONSTANT ) ; }
Distance : 5

42
Tree	if ( x < NUMBER_CONSTANT && current.scopes == ScopeType.EXEC_CONTEXT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == ScopeType.EXEC_CONTEXT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

43
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Distance : 7

44
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 7

45
Tree	if ( x == NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Distance : 6

46
Tree	if ( x < NUMBER_CONSTANT && pass2Index [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && pass2Index [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

47
Tree	if ( x < NUMBER_CONSTANT && SourceMapInput [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SourceMapInput [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

48
Tree	if ( x == NUMBER_CONSTANT && current.scopes == state.out ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == state.out ) { add ( STRING_CONSTANT ) ; }
Distance : 6

49
Tree	if ( x == NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == Mode.ES_NEXT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

50
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

51
Tree	if ( x < NUMBER_CONSTANT && Traverser == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Traverser == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

52
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Distance : 7

53
Tree	if ( x < NUMBER_CONSTANT && Traverser == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Traverser == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

54
Tree	if ( x < NUMBER_CONSTANT && options.removeUnusedPrototypePropertiesInExterns == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.removeUnusedPrototypePropertiesInExterns == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

55
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

56
Tree	if ( x < NUMBER_CONSTANT && x != FunctionFlavor.GENERATOR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != FunctionFlavor.GENERATOR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

57
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Distance : 7

58
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Distance : 5

59
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Distance : 8

60
Tree	if ( x < NUMBER_CONSTANT && x > options.chunksToPrintAfterEachPassRegexList ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > options.chunksToPrintAfterEachPassRegexList ) { add ( STRING_CONSTANT ) ; }
Distance : 6

61
Tree	if ( x < NUMBER_CONSTANT && x != ImmutableSet.Builder ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != ImmutableSet.Builder ) { add ( STRING_CONSTANT ) ; }
Distance : 6

62
Tree	if ( x < NUMBER_CONSTANT && x != Kind.INTERFACE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != Kind.INTERFACE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

63
Tree	if ( x < NUMBER_CONSTANT && x > tree.access ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > tree.access ) { add ( STRING_CONSTANT ) ; }
Distance : 6

64
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Distance : 7

65
Tree	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

66
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Distance : 8

67
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

68
Tree	if ( x < NUMBER_CONSTANT && x > other.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > other.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

69
Tree	if ( x < NUMBER_CONSTANT && options.removeUnusedPrototypePropertiesInExterns == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.removeUnusedPrototypePropertiesInExterns == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

70
Tree	if ( x < NUMBER_CONSTANT && Traverser [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Traverser [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

71
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

72
Tree	if ( x == NUMBER_CONSTANT && current.parent.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.parent.scopes == currentScript.rootNode ) { add ( STRING_CONSTANT ) ; }
Distance : 6

73
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

74
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

75
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

76
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; null }
Distance : 8

77
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

78
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; default: }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; default: }
Distance : 8

79
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 8

80
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

81
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

82
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

83
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

84
Tree	if ( x < NUMBER_CONSTANT && x != tree.access ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != tree.access ) { add ( STRING_CONSTANT ) ; }
Distance : 6

85
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

86
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

87
Tree	if ( x == NUMBER_CONSTANT && current.scopes == LifeCycleStage.NORMALIZED ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == LifeCycleStage.NORMALIZED ) { add ( STRING_CONSTANT ) ; }
Distance : 6

88
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

89
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

90
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Distance : 7

91
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Distance : 8

92
Tree	if ( x < NUMBER_CONSTANT && x != RefType.REGULAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != RefType.REGULAR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

93
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

94
Tree	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

95
Tree	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

96
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Distance : 8

97
Tree	if ( x < NUMBER_CONSTANT && prev > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

98
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

99
Tree	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 11

100
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

101
Tree	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

102
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

103
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

104
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

105
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

106
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 6

107
Tree	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 11

108
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Distance : 7

109
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

110
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

111
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

112
Tree	if ( x < NUMBER_CONSTANT && shouldPreserve [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && shouldPreserve [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

113
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

114
Tree	if ( x < NUMBER_CONSTANT && prev > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

115
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Distance : 8

116
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Distance : 5

117
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 9

118
Tree	if ( x < NUMBER_CONSTANT && x != other.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != other.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

119
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; break; }
Distance : 8

120
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

121
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

122
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Distance : 5

123
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

124
Tree	if ( x == NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

125
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Distance : 6

126
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; break; }
Distance : 8

127
Tree	if ( x == NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

128
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 7

129
Tree	if ( x < NUMBER_CONSTANT && Context.OTHER == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Context.OTHER == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

130
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

131
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Distance : 8

132
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 8

133
Tree	if ( x < NUMBER_CONSTANT && Context.OTHER == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Context.OTHER == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

134
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

135
Tree	if ( x < NUMBER_CONSTANT && x - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

136
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

137
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 7

138
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

139
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

140
Tree	if ( x < NUMBER_CONSTANT && options.j2clPassMode [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.j2clPassMode [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

141
Tree	if ( x < NUMBER_CONSTANT && options.moduleRoots == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.moduleRoots == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

142
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } pname
Distance : 5

143
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev . x ) { add ( STRING_CONSTANT ) ; }
Distance : 8

144
Tree	if ( x < NUMBER_CONSTANT && umdPattern.activeBranch == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && umdPattern.activeBranch == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

145
Tree	if ( x < NUMBER_CONSTANT && x != LanguageMode.TYPESCRIPT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != LanguageMode.TYPESCRIPT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

146
Tree	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

147
Tree	if ( x < NUMBER_CONSTANT && x > ResolutionMode.BROWSER ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > ResolutionMode.BROWSER ) { add ( STRING_CONSTANT ) ; }
Distance : 6

148
Tree	if ( x < NUMBER_CONSTANT && options.moduleRoots == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.moduleRoots == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

149
Tree	if ( x < NUMBER_CONSTANT && SourceMapInput != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SourceMapInput != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

150
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

151
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

152
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

153
Tree	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

154
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Distance : 5

155
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

156
Tree	if ( x < NUMBER_CONSTANT && noSideEffectExterns [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && noSideEffectExterns [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

157
Tree	if ( x < NUMBER_CONSTANT && Traverser != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Traverser != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

158
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

159
Tree	if ( x < NUMBER_CONSTANT && prev == x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

160
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

161
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 7

162
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Distance : 5

163
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Distance : 8

164
Tree	if ( x < NUMBER_CONSTANT && options.removeUnusedPrototypePropertiesInExterns != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.removeUnusedPrototypePropertiesInExterns != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

165
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

166
Tree	if ( x < NUMBER_CONSTANT && SourceMapInput == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SourceMapInput == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

167
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 7

168
Tree	if ( x < NUMBER_CONSTANT && x > FunctionFlavor.GENERATOR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > FunctionFlavor.GENERATOR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

169
Tree	if ( x < NUMBER_CONSTANT && ScopeType.EXEC_CONTEXT [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && ScopeType.EXEC_CONTEXT [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

170
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

171
Tree	if ( x < NUMBER_CONSTANT && SourceMapInput == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SourceMapInput == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

172
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

173
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Distance : 8

174
Tree	if ( x < NUMBER_CONSTANT && umdPattern.activeBranch != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && umdPattern.activeBranch != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

175
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

176
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

177
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Distance : 5

178
Tree	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

179
Tree	if ( x < NUMBER_CONSTANT && x != ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ) { add ( STRING_CONSTANT ) ; }
Distance : 6

180
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

181
Tree	if ( x < NUMBER_CONSTANT && Context.OTHER != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Context.OTHER != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

182
Tree	if ( x < NUMBER_CONSTANT && x > options.removeUnusedPrototypeProperties ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > options.removeUnusedPrototypeProperties ) { add ( STRING_CONSTANT ) ; }
Distance : 6

183
Tree	if ( x < NUMBER_CONSTANT && objType.nominalType == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && objType.nominalType == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 5

184
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

185
Tree	if ( x == NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 6

186
Tree	if ( x < NUMBER_CONSTANT && prev == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

187
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

188
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Distance : 5

189
Tree	if ( x < NUMBER_CONSTANT && options.moduleRoots != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.moduleRoots != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

190
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 9

191
Tree	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

192
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

193
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Distance : 5

194
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Distance : 8

195
Tree	if ( x < NUMBER_CONSTANT && current.scopes == LifeCycleStage.NORMALIZED ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == LifeCycleStage.NORMALIZED ) { add ( STRING_CONSTANT ) ; }
Distance : 5

196
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Distance : 8

197
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

198
Tree	if ( x < NUMBER_CONSTANT && options.inlineFunctions == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.inlineFunctions == current.parent.scopes ) { add ( STRING_CONSTANT ) ; }
Distance : 5

199
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

200
Tree	if ( x < NUMBER_CONSTANT && current.scopes [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

201
Tree	if ( x < NUMBER_CONSTANT && umdPattern.activeBranch == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && umdPattern.activeBranch == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

202
Tree	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

203
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 7

204
Tree	if ( x < NUMBER_CONSTANT && current.scopes == System.out ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.scopes == System.out ) { add ( STRING_CONSTANT ) ; }
Distance : 5

205
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

206
Tree	if ( x == NUMBER_CONSTANT && current.scopes == DevMode.START_AND_END ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == DevMode.START_AND_END ) { add ( STRING_CONSTANT ) ; }
Distance : 6

207
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

208
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Distance : 5

209
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Distance : 7

210
Tree	if ( x == NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == DecompositionType.UNDECOMPOSABLE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

211
Tree	if ( x == NUMBER_CONSTANT && current.scopes == PropertyRenamingPolicy.ALL_UNQUOTED ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == PropertyRenamingPolicy.ALL_UNQUOTED ) { add ( STRING_CONSTANT ) ; }
Distance : 6

212
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

213
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

214
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

215
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; default: }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; default: }
Distance : 7

216
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 8

217
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

218
Tree	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

219
Tree	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

220
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

221
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

222
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 9

223
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

224
Tree	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

225
Tree	if ( x < NUMBER_CONSTANT && constructorNameNode [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && constructorNameNode [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

226
Tree	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

227
Tree	if ( x < NUMBER_CONSTANT && x == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

228
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

229
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

230
Tree	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

231
Tree	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

232
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; break; }
Distance : 7

233
Tree	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 10

234
Tree	if ( x == NUMBER_CONSTANT && current.scopes == Token.BANG ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && current.scopes == Token.BANG ) { add ( STRING_CONSTANT ) ; }
Distance : 6

235
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; null }
Distance : 7

236
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

237
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS . add ( NUMBER_CONSTANT ) ) { add ( STRING_CONSTANT ) ; }
Distance : 9

238
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } pname
Distance : 5

239
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Distance : 7

240
Tree	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

241
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

242
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } []
Distance : 7

243
Tree	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; return; }
Distance : 5

244
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; default: }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; default: }
Distance : 6

245
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Distance : 7

246
Tree	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x && prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

247
Tree	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

248
Tree	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

249
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Distance : 7

250
Tree	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x == NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 8

251
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

252
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

253
Tree	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

254
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

255
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

256
Tree	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

257
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

258
Tree	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; break; }
Code	if ( x < NUMBER_CONSTANT && x >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; break; }
Distance : 6

259
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Distance : 6

260
Tree	if ( x < NUMBER_CONSTANT && x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

261
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 6

262
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; continue; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; continue; }
Distance : 8

263
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; default: }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; default: }
Distance : 7

264
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

265
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

266
Tree	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev && x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

267
Tree	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

268
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

269
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

270
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } pname
Distance : 6

271
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

272
Tree	if ( x < NUMBER_CONSTANT && x != that.cache.functionScope ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != that.cache.functionScope ) { add ( STRING_CONSTANT ) ; }
Distance : 6

273
Tree	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x . x ) { add ( STRING_CONSTANT ) ; }
Distance : 9

274
Tree	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

275
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

276
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

277
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Distance : 6

278
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Distance : 7

279
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Distance : 6

280
Tree	if ( x < NUMBER_CONSTANT && x > Kind.INTERFACE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > Kind.INTERFACE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

281
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

282
Tree	if ( x < NUMBER_CONSTANT && x != objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x != objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

283
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

284
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Distance : 8

285
Tree	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x <= CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Distance : 6

286
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } pname
Distance : 7

287
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; } disableTypeCheck
Distance : 7

288
Tree	if ( x < NUMBER_CONSTANT && x > objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > objType.nominalType ) { add ( STRING_CONSTANT ) ; }
Distance : 6

289
Tree	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x && x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 7

290
Tree	if ( x < NUMBER_CONSTANT && x > ImmutableSet.Builder ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > ImmutableSet.Builder ) { add ( STRING_CONSTANT ) ; }
Distance : 6

291
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } lines
Distance : 7

292
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Distance : 7

293
Tree	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Distance : 8

294
Tree	if ( x < NUMBER_CONSTANT && x > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

295
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

296
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } for
Distance : 7

297
Tree	if ( x == NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && prev >= CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

298
Tree	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && x < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } get
Distance : 7

299
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; } TypeInferenceMode.CHECKED
Distance : 7

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 500
Wrong
========================================================================
False

0
Tree	currentArgumentsAccess ;
Code	currentArgumentsAccess ;
Distance : 8

1
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

2
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

3
Tree	cc . listSeparator ( Feature.REST_PARAMETERS , cc ) ;
Code	cc . listSeparator ( Feature.REST_PARAMETERS , cc ) ;
Distance : 3

4
Tree	cc . listSeparator ( instance.declarations , cc ) ;
Code	cc . listSeparator ( instance.declarations , cc ) ;
Distance : 3

5
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

6
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

7
Tree	cc . listSeparator ( Feature.EXPONENT_OP , cc ) ;
Code	cc . listSeparator ( Feature.EXPONENT_OP , cc ) ;
Distance : 3

8
Tree	cc = break; ;
Code	cc = break; ;
Distance : 7

9
Tree	cc . listSeparator ( flags.chromePass , cc ) ;
Code	cc . listSeparator ( flags.chromePass , cc ) ;
Distance : 3

10
Tree	cc . listSeparator ( call.returnType , cc ) ;
Code	cc . listSeparator ( call.returnType , cc ) ;
Distance : 3

11
Tree	cc ( cc , cc ) ;
Code	cc ( cc , cc ) ;
Distance : 4

12
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

13
Tree	cc . listSeparator ( ; . listSeparator () ) ;
Code	cc . listSeparator ( ; . listSeparator () ) ;
Distance : 5

14
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

15
Tree	cc ( listSeparator () , cc . listSeparator () ) ;
Code	cc ( listSeparator () , cc . listSeparator () ) ;
Distance : 8

16
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

17
Tree	cc . listSeparator ( listSeparator , cc . listSeparator () ) ;
Code	cc . listSeparator ( listSeparator , cc . listSeparator () ) ;
Distance : 6

18
Tree	cc . listSeparator ( () , cc . listSeparator () ) ;
Code	cc . listSeparator ( () , cc . listSeparator () ) ;
Distance : 6

19
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

20
Tree	Context.OTHER . listSeparator () ;
Code	Context.OTHER . listSeparator () ;
Distance : 7

21
Tree	addExpr . listSeparator () ;
Code	addExpr . listSeparator () ;
Distance : 7

22
Tree	testFindExpressionRoot5 . listSeparator () ;
Code	testFindExpressionRoot5 . listSeparator () ;
Distance : 7

23
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

24
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ; TypeInferenceMode.CHECKED
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ; TypeInferenceMode.CHECKED
Distance : 4

25
Tree	listSeparator ( NUMBER_CONSTANT ) ; block
Code	listSeparator ( NUMBER_CONSTANT ) ; block
Distance : 7

26
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ; disableTypeCheck
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ; disableTypeCheck
Distance : 4

27
Tree	cc . listSeparator ( ; . listSeparator () ) ;
Code	cc . listSeparator ( ; . listSeparator () ) ;
Distance : 5

28
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; disableTypeCheck
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; disableTypeCheck
Distance : 7

29
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; block
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; block
Distance : 6

30
Tree	cc = new currentArgumentsAccess ( cc ) ;
Code	cc = new currentArgumentsAccess ( cc ) ;
Distance : 6

31
Tree	cc = new HierarchicalSet ( cc ) ;
Code	cc = new HierarchicalSet ( cc ) ;
Distance : 6

32
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

33
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

34
Tree	cc = default: ;
Code	cc = default: ;
Distance : 7

35
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

36
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; js
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; js
Distance : 6

37
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; checkNotNull
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; checkNotNull
Distance : 6

38
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

39
Tree	cc ( cc . listSeparator () ) ;
Code	cc ( cc . listSeparator () ) ;
Distance : 6

40
Tree	cc . listSeparator ( cc , new SourceMapInput ( cc ) ) ;
Code	cc . listSeparator ( cc , new SourceMapInput ( cc ) ) ;
Distance : 7

41
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

42
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

43
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

44
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

45
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

46
Tree	cc . listSeparator ( cc , new addExpr ( cc ) ) ;
Code	cc . listSeparator ( cc , new addExpr ( cc ) ) ;
Distance : 7

47
Tree	cc . listSeparator ( cc , new MinimizeExitPoints ( cc ) ) ;
Code	cc . listSeparator ( cc , new MinimizeExitPoints ( cc ) ) ;
Distance : 7

48
Tree	cc . listSeparator ( cc , new BasicBlock ( cc ) ) ;
Code	cc . listSeparator ( cc , new BasicBlock ( cc ) ) ;
Distance : 7

49
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

50
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

51
Tree	cc . listSeparator ( cc , new callName ( cc ) ) ;
Code	cc . listSeparator ( cc , new callName ( cc ) ) ;
Distance : 7

52
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

53
Tree	cc . listSeparator ( ; , true ) ;
Code	cc . listSeparator ( ; , true ) ;
Distance : 2

54
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

55
Tree	cc ( cc , listSeparator () ) ;
Code	cc ( cc , listSeparator () ) ;
Distance : 5

56
Tree	cc ( cc , listSeparator () ) ;
Code	cc ( cc , listSeparator () ) ;
Distance : 5

57
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

58
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

59
Tree	cc ( . . listSeparator () ) ;
Code	cc ( . . listSeparator () ) ;
Distance : 6

60
Tree	cc () . () ( ; ) ;
Code	cc () . () ( ; ) ;
Distance : 5

61
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

62
Tree	this . cc . listSeparator ( ; ) ;
Code	this . cc . listSeparator ( ; ) ;
Distance : 6

63
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

64
Tree	cc () . listSeparator ( ; ) ;
Code	cc () . listSeparator ( ; ) ;
Distance : 5

65
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

66
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

67
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

68
Tree	cc . listSeparator ( break; ) ;
Code	cc . listSeparator ( break; ) ;
Distance : 4

69
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

70
Tree	new cc () . listSeparator ( ; ) ;
Code	new cc () . listSeparator ( ; ) ;
Distance : 6

71
Tree	listSeparator ( cc , cc () ) ;
Code	listSeparator ( cc , cc () ) ;
Distance : 6

72
Tree	listSeparator ( . () , cc . listSeparator () ) ;
Code	listSeparator ( . () , cc . listSeparator () ) ;
Distance : 8

73
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

74
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

75
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

76
Tree	listSeparator ( cc ) ; for
Code	listSeparator ( cc ) ; for
Distance : 7

77
Tree	addExpr ;
Code	addExpr ;
Distance : 8

78
Tree	listSeparator ( cc ) ; Override
Code	listSeparator ( cc ) ; Override
Distance : 7

79
Tree	listSeparator ( false ) ;
Code	listSeparator ( false ) ;
Distance : 6

80
Tree	this . cc = flags.rewritePolyfills ;
Code	this . cc = flags.rewritePolyfills ;
Distance : 7

81
Tree	cc . listSeparator ( STRING_CONSTANT ) ; []
Code	cc . listSeparator ( STRING_CONSTANT ) ; []
Distance : 5

82
Tree	cc () ; false
Code	cc () ; false
Distance : 8

83
Tree	listSeparator ( true ) ; lines
Code	listSeparator ( true ) ; lines
Distance : 6

84
Tree	listSeparator ( true ) ; Override
Code	listSeparator ( true ) ; Override
Distance : 6

85
Tree	listSeparator ( true ) ; get
Code	listSeparator ( true ) ; get
Distance : 6

86
Tree	new cc () . listSeparator () ; pname
Code	new cc () . listSeparator () ; pname
Distance : 9

87
Tree	cc = new ArrayList <> () ;
Code	cc = new ArrayList <> () ;
Distance : 7

88
Tree	this . cc = cc ; pname
Code	this . cc = cc ; pname
Distance : 8

89
Tree	this . cc = cc ; for
Code	this . cc = cc ; for
Distance : 8

90
Tree	ref.scope ;
Code	ref.scope ;
Distance : 8

91
Tree	this . cc = MatchResult.LOOSE_MATCH ;
Code	this . cc = MatchResult.LOOSE_MATCH ;
Distance : 7

92
Tree	listSeparator ( STRING_CONSTANT ) ; of
Code	listSeparator ( STRING_CONSTANT ) ; of
Distance : 7

93
Tree	testDuplicate_shorthand = true ;
Code	testDuplicate_shorthand = true ;
Distance : 7

94
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

95
Tree	emptiedClinitMethods ;
Code	emptiedClinitMethods ;
Distance : 8

96
Tree	cc = builder.removeUnusedStaticProperties ;
Code	cc = builder.removeUnusedStaticProperties ;
Distance : 7

97
Tree	listSeparator ( cc . listSeparator () ) ; TypeInferenceMode.CHECKED
Code	listSeparator ( cc . listSeparator () ) ; TypeInferenceMode.CHECKED
Distance : 8

98
Tree	cc = new currentArgumentsAccess <> () ;
Code	cc = new currentArgumentsAccess <> () ;
Distance : 7

99
Tree	this . cc = s.parent ;
Code	this . cc = s.parent ;
Distance : 7

100
Tree	cc = new HierarchicalSet <> () ;
Code	cc = new HierarchicalSet <> () ;
Distance : 7

101
Tree	this . cc = addFirst ;
Code	this . cc = addFirst ;
Distance : 7

102
Tree	this . cc = globalExternsScope ;
Code	this . cc = globalExternsScope ;
Distance : 7

103
Tree	cc = new LocalQName <> () ;
Code	cc = new LocalQName <> () ;
Distance : 7

104
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; lines
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; lines
Distance : 5

105
Tree	listSeparator ( call.returnType ) ;
Code	listSeparator ( call.returnType ) ;
Distance : 6

106
Tree	listSeparator ( assignment.oldName ) ;
Code	listSeparator ( assignment.oldName ) ;
Distance : 6

107
Tree	listSeparator ( NUMBER_CONSTANT ) ; checkNotNull
Code	listSeparator ( NUMBER_CONSTANT ) ; checkNotNull
Distance : 7

108
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; get
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; get
Distance : 5

109
Tree	this . cc . listSeparator () ; lines
Code	this . cc . listSeparator () ; lines
Distance : 8

110
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; for
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; for
Distance : 5

111
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; pname
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; pname
Distance : 5

112
Tree	cc . listSeparator ( STRING_CONSTANT ) ; Override
Code	cc . listSeparator ( STRING_CONSTANT ) ; Override
Distance : 5

113
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; []
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; []
Distance : 5

114
Tree	addExpr = true ;
Code	addExpr = true ;
Distance : 7

115
Tree	cc = J2clPassMode.AUTO ;
Code	cc = J2clPassMode.AUTO ;
Distance : 7

116
Tree	Context.OTHER = true ;
Code	Context.OTHER = true ;
Distance : 7

117
Tree	listSeparator ( STRING_CONSTANT ) ; >
Code	listSeparator ( STRING_CONSTANT ) ; >
Distance : 7

118
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

119
Tree	listSeparator ( true ) ; for
Code	listSeparator ( true ) ; for
Distance : 6

120
Tree	new cc () . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Code	new cc () . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Distance : 7

121
Tree	cc = cc ; lines
Code	cc = cc ; lines
Distance : 8

122
Tree	cc = cc ; Override
Code	cc = cc ; Override
Distance : 8

123
Tree	listSeparator ( STRING_CONSTANT ) ; node
Code	listSeparator ( STRING_CONSTANT ) ; node
Distance : 7

124
Tree	listSeparator ( STRING_CONSTANT ) ; setUp
Code	listSeparator ( STRING_CONSTANT ) ; setUp
Distance : 7

125
Tree	listSeparator ( STRING_CONSTANT ) ; js
Code	listSeparator ( STRING_CONSTANT ) ; js
Distance : 7

126
Tree	cc . listSeparator ( new cc () ) ; TypeInferenceMode.CHECKED
Code	cc . listSeparator ( new cc () ) ; TypeInferenceMode.CHECKED
Distance : 5

127
Tree	flags.rewritePolyfills = true ;
Code	flags.rewritePolyfills = true ;
Distance : 7

128
Tree	cc = cc ; get
Code	cc = cc ; get
Distance : 8

129
Tree	cc = cc ; for
Code	cc = cc ; for
Distance : 8

130
Tree	listSeparator ( STRING_CONSTANT ) ; block
Code	listSeparator ( STRING_CONSTANT ) ; block
Distance : 7

131
Tree	cc () . listSeparator ( cc ) ; disableTypeCheck
Code	cc () . listSeparator ( cc ) ; disableTypeCheck
Distance : 6

132
Tree	cc = cc ; []
Code	cc = cc ; []
Distance : 8

133
Tree	cc = cc ; pname
Code	cc = cc ; pname
Distance : 8

134
Tree	cc = true ;
Code	cc = true ;
Distance : 6

135
Tree	cc ( true ) ;
Code	cc ( true ) ;
Distance : 4

136
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

137
Tree	listSeparator ( new callName ( cc ) ) ;
Code	listSeparator ( new callName ( cc ) ) ;
Distance : 7

138
Tree	listSeparator ( new GlobalTypeInfoCollector ( cc ) ) ;
Code	listSeparator ( new GlobalTypeInfoCollector ( cc ) ) ;
Distance : 7

139
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

140
Tree	FunctionFlavor.NORMAL . listSeparator () ;
Code	FunctionFlavor.NORMAL . listSeparator () ;
Distance : 7

141
Tree	listSeparator ( new BlackHoleErrorManager ( cc ) ) ;
Code	listSeparator ( new BlackHoleErrorManager ( cc ) ) ;
Distance : 7

142
Tree	cc . listSeparator ( ; ) ;
Code	cc . listSeparator ( ; ) ;
Distance : 4

143
Tree	cc . listSeparator () ; get
Code	cc . listSeparator () ; get
Distance : 7

144
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

145
Tree	cc . listSeparator () ; Override
Code	cc . listSeparator () ; Override
Distance : 7

146
Tree	listSeparator ( cc ) ; get
Code	listSeparator ( cc ) ; get
Distance : 7

147
Tree	listSeparator ( new LocalQName ( cc ) ) ;
Code	listSeparator ( new LocalQName ( cc ) ) ;
Distance : 7

148
Tree	listSeparator ( cc ) ; []
Code	listSeparator ( cc ) ; []
Distance : 7

149
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ; TypeInferenceMode.CHECKED
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ; TypeInferenceMode.CHECKED
Distance : 9

150
Tree	new cc () . listSeparator ( ; ) ;
Code	new cc () . listSeparator ( ; ) ;
Distance : 6

151
Tree	cc = return; ;
Code	cc = return; ;
Distance : 7

152
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

153
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

154
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

155
Tree	cc . listSeparator ( v.index ) ;
Code	cc . listSeparator ( v.index ) ;
Distance : 4

156
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ; disableTypeCheck
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ; disableTypeCheck
Distance : 9

157
Tree	cc = false ;
Code	cc = false ;
Distance : 7

158
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

159
Tree	cc . listSeparator () ; lines
Code	cc . listSeparator () ; lines
Distance : 7

160
Tree	cc = current.parent ;
Code	cc = current.parent ;
Distance : 7

161
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

162
Tree	listSeparator ( NUMBER_CONSTANT ) ; node
Code	listSeparator ( NUMBER_CONSTANT ) ; node
Distance : 7

163
Tree	cc ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	cc ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 4

164
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

165
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

166
Tree	flags.rewritePolyfills . listSeparator () ;
Code	flags.rewritePolyfills . listSeparator () ;
Distance : 7

167
Tree	this . cc = ModuleLoader.ResolutionMode.BROWSER ;
Code	this . cc = ModuleLoader.ResolutionMode.BROWSER ;
Distance : 7

168
Tree	new currentArgumentsAccess ( cc ) . listSeparator () ;
Code	new currentArgumentsAccess ( cc ) . listSeparator () ;
Distance : 8

169
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

170
Tree	listSeparator ( instance.declarations ) ;
Code	listSeparator ( instance.declarations ) ;
Distance : 6

171
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

172
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

173
Tree	listSeparator ( cc ) ; pname
Code	listSeparator ( cc ) ; pname
Distance : 7

174
Tree	cc . listSeparator ( STRING_CONSTANT ) ; lines
Code	cc . listSeparator ( STRING_CONSTANT ) ; lines
Distance : 5

175
Tree	cc ( NUMBER_CONSTANT ) ;
Code	cc ( NUMBER_CONSTANT ) ;
Distance : 5

176
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

177
Tree	listSeparator ( new BasicBlock ( cc ) ) ;
Code	listSeparator ( new BasicBlock ( cc ) ) ;
Distance : 7

178
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

179
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

180
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

181
Tree	cc ( cc , cc ) ;
Code	cc ( cc , cc ) ;
Distance : 4

182
Tree	cc = PropAccess.DICT ;
Code	cc = PropAccess.DICT ;
Distance : 7

183
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

184
Tree	cc . listSeparator ( cc , new Context.OTHER ( cc ) ) ;
Code	cc . listSeparator ( cc , new Context.OTHER ( cc ) ) ;
Distance : 7

185
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; node
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; node
Distance : 6

186
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

187
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ; TypeInferenceMode.CHECKED
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ; TypeInferenceMode.CHECKED
Distance : 4

188
Tree	cc = null ;
Code	cc = null ;
Distance : 7

189
Tree	currentArgumentsAccess . listSeparator () ;
Code	currentArgumentsAccess . listSeparator () ;
Distance : 7

190
Tree	listSeparator ( NUMBER_CONSTANT ) ; setUp
Code	listSeparator ( NUMBER_CONSTANT ) ; setUp
Distance : 7

191
Tree	cc () ; of
Code	cc () ; of
Distance : 8

192
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; setUp
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; setUp
Distance : 6

193
Tree	LanguageMode.TYPESCRIPT . listSeparator () ;
Code	LanguageMode.TYPESCRIPT . listSeparator () ;
Distance : 7

194
Tree	cc ( cc , cc ) ;
Code	cc ( cc , cc ) ;
Distance : 4

195
Tree	cc . listSeparator ( ; , true ) ;
Code	cc . listSeparator ( ; , true ) ;
Distance : 2

196
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

197
Tree	cc . listSeparator ( cc , new RewriteRequiresForEs6Modules ( cc ) ) ;
Code	cc . listSeparator ( cc , new RewriteRequiresForEs6Modules ( cc ) ) ;
Distance : 7

198
Tree	this . cc = cc ; get
Code	this . cc = cc ; get
Distance : 8

199
Tree	listSeparator ( NUMBER_CONSTANT ) ; js
Code	listSeparator ( NUMBER_CONSTANT ) ; js
Distance : 7

200
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ; disableTypeCheck
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ; disableTypeCheck
Distance : 4

201
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

202
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; of
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; of
Distance : 6

203
Tree	cc . listSeparator ( assignment.oldName ) ;
Code	cc . listSeparator ( assignment.oldName ) ;
Distance : 4

204
Tree	cc . listSeparator () ; []
Code	cc . listSeparator () ; []
Distance : 7

205
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

206
Tree	this . cc = current.parent ;
Code	this . cc = current.parent ;
Distance : 7

207
Tree	cc . listSeparator ( . , cc ) ;
Code	cc . listSeparator ( . , cc ) ;
Distance : 3

208
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

209
Tree	cc . listSeparator ( ; ) ;
Code	cc . listSeparator ( ; ) ;
Distance : 4

210
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

211
Tree	listSeparator () . () ( cc ) ;
Code	listSeparator () . () ( cc ) ;
Distance : 6

212
Tree	cc ( cc , cc ) ;
Code	cc ( cc , cc ) ;
Distance : 4

213
Tree	this . cc = cc ; Override
Code	this . cc = cc ; Override
Distance : 8

214
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

215
Tree	cc ( false ) ;
Code	cc ( false ) ;
Distance : 5

216
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

217
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; TypeInferenceMode.CHECKED
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; TypeInferenceMode.CHECKED
Distance : 7

218
Tree	listSeparator ( new NominalTypeBuilderNti ( cc ) ) ;
Code	listSeparator ( new NominalTypeBuilderNti ( cc ) ) ;
Distance : 7

219
Tree	cc . listSeparator ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ;
Code	cc . listSeparator ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ;
Distance : 4

220
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

221
Tree	listSeparator ( result.success ) ;
Code	listSeparator ( result.success ) ;
Distance : 6

222
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

223
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

224
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

225
Tree	cc . listSeparator ( default: ) ;
Code	cc . listSeparator ( default: ) ;
Distance : 4

226
Tree	listSeparator ( Feature.REST_PARAMETERS ) ;
Code	listSeparator ( Feature.REST_PARAMETERS ) ;
Distance : 6

227
Tree	listSeparator ( cc , listSeparator () ) ;
Code	listSeparator ( cc , listSeparator () ) ;
Distance : 6

228
Tree	cc = true ;
Code	cc = true ;
Distance : 6

229
Tree	cc ( . ) ;
Code	cc ( . ) ;
Distance : 5

230
Tree	cc . listSeparator ( ; ) ;
Code	cc . listSeparator ( ; ) ;
Distance : 4

231
Tree	cc = continue; ;
Code	cc = continue; ;
Distance : 7

232
Tree	listSeparator ( . . listSeparator () ) ;
Code	listSeparator ( . . listSeparator () ) ;
Distance : 7

233
Tree	cc = flags.rewritePolyfills ;
Code	cc = flags.rewritePolyfills ;
Distance : 7

234
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

235
Tree	cc . listSeparator ( return; ) ;
Code	cc . listSeparator ( return; ) ;
Distance : 4

236
Tree	cc = compilerState.typeCheckingHasRun ;
Code	cc = compilerState.typeCheckingHasRun ;
Distance : 7

237
Tree	cc () ; block
Code	cc () ; block
Distance : 8

238
Tree	listSeparator ( DeferredSetType ) ;
Code	listSeparator ( DeferredSetType ) ;
Distance : 6

239
Tree	cc . listSeparator ( . ) ;
Code	cc . listSeparator ( . ) ;
Distance : 4

240
Tree	listSeparator ( new NoResolvedType ( cc ) ) ;
Code	listSeparator ( new NoResolvedType ( cc ) ) ;
Distance : 7

241
Tree	cc . listSeparator ( cc , new HashSet ( cc ) ) ;
Code	cc . listSeparator ( cc , new HashSet ( cc ) ) ;
Distance : 7

242
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

243
Tree	cc () ;
Code	cc () ;
Distance : 7

244
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

245
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

246
Tree	listSeparator ( new StringBuilder ( cc ) ) ;
Code	listSeparator ( new StringBuilder ( cc ) ) ;
Distance : 7

247
Tree	cc . listSeparator ( getReferenceName ) ;
Code	cc . listSeparator ( getReferenceName ) ;
Distance : 4

248
Tree	new Context.OTHER ( cc ) . listSeparator () ;
Code	new Context.OTHER ( cc ) . listSeparator () ;
Distance : 8

249
Tree	this . cc . listSeparator ( ; ) ;
Code	this . cc . listSeparator ( ; ) ;
Distance : 6

250
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

251
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

252
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

253
Tree	entry . listSeparator () ;
Code	entry . listSeparator () ;
Distance : 7

254
Tree	listSeparator ( result.transformed ) ;
Code	listSeparator ( result.transformed ) ;
Distance : 6

255
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

256
Tree	this . cc . listSeparator () ; Override
Code	this . cc . listSeparator () ; Override
Distance : 8

257
Tree	cc = new CallSiteOptimizer ( cc ) ;
Code	cc = new CallSiteOptimizer ( cc ) ;
Distance : 6

258
Tree	cc = new addExpr ( cc ) ;
Code	cc = new addExpr ( cc ) ;
Distance : 6

259
Tree	cc = new ChangeVerifier ( cc ) ;
Code	cc = new ChangeVerifier ( cc ) ;
Distance : 6

260
Tree	cc = new Context.OTHER ( cc ) ;
Code	cc = new Context.OTHER ( cc ) ;
Distance : 6

261
Tree	this . cc = instance.declarations ;
Code	this . cc = instance.declarations ;
Distance : 7

262
Tree	new addExpr ( cc ) . listSeparator () ;
Code	new addExpr ( cc ) . listSeparator () ;
Distance : 8

263
Tree	cc . listSeparator () ; pname
Code	cc . listSeparator () ; pname
Distance : 7

264
Tree	cc () ;
Code	cc () ;
Distance : 7

265
Tree	cc () ; js
Code	cc () ; js
Distance : 8

266
Tree	cc () ; >
Code	cc () ; >
Distance : 8

267
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

268
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

269
Tree	hoistNode . listSeparator () ;
Code	hoistNode . listSeparator () ;
Distance : 7

270
Tree	cc ( cc , cc () ) ;
Code	cc ( cc , cc () ) ;
Distance : 5

271
Tree	cc . listSeparator ( Feature.REST_PARAMETERS ) ;
Code	cc . listSeparator ( Feature.REST_PARAMETERS ) ;
Distance : 4

272
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

273
Tree	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE , cc ) ;
Code	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE , cc ) ;
Distance : 3

274
Tree	listSeparator () ; node
Code	listSeparator () ; node
Distance : 9

275
Tree	cc () . () ( cc ) ;
Code	cc () . () ( cc ) ;
Distance : 5

276
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

277
Tree	this . cc = Reach.LOCAL_ONLY ;
Code	this . cc = Reach.LOCAL_ONLY ;
Distance : 7

278
Tree	this . cc . listSeparator () ; get
Code	this . cc . listSeparator () ; get
Distance : 8

279
Tree	listSeparator ( cc , cc () ) ;
Code	listSeparator ( cc , cc () ) ;
Distance : 6

280
Tree	cc = new ArrayList ( cc ) ;
Code	cc = new ArrayList ( cc ) ;
Distance : 6

281
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

282
Tree	this . cc . listSeparator () ; for
Code	this . cc . listSeparator () ; for
Distance : 8

283
Tree	listSeparator ( true ) ; pname
Code	listSeparator ( true ) ; pname
Distance : 6

284
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

285
Tree	cc () ; setUp
Code	cc () ; setUp
Distance : 8

286
Tree	cc . listSeparator () ; for
Code	cc . listSeparator () ; for
Distance : 7

287
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

288
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

289
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

290
Tree	listSeparator ( NUMBER_CONSTANT ) ; of
Code	listSeparator ( NUMBER_CONSTANT ) ; of
Distance : 7

291
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

292
Tree	cc = false ;
Code	cc = false ;
Distance : 7

293
Tree	this . cc . listSeparator () ; pname
Code	this . cc . listSeparator () ; pname
Distance : 8

294
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

295
Tree	new cc () . listSeparator () ; lines
Code	new cc () . listSeparator () ; lines
Distance : 9

296
Tree	cc ( cc ) ;
Code	cc ( cc ) ;
Distance : 5

297
Tree	cc = continue; ;
Code	cc = continue; ;
Distance : 7

298
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

299
Tree	this . cc . listSeparator () ;
Code	this . cc . listSeparator () ;
Distance : 7

300
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

301
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

302
Tree	listSeparator ( new MinimizeExitPoints ( cc ) ) ;
Code	listSeparator ( new MinimizeExitPoints ( cc ) ) ;
Distance : 7

303
Tree	cc . listSeparator ( ; , false ) ;
Code	cc . listSeparator ( ; , false ) ;
Distance : 3

304
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

305
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

306
Tree	new cc () . listSeparator ( cc ) ;
Code	new cc () . listSeparator ( cc ) ;
Distance : 6

307
Tree	cc . listSeparator ( () , cc ) ;
Code	cc . listSeparator ( () , cc ) ;
Distance : 3

308
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

309
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

310
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

311
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

312
Tree	listSeparator ( JSTypeNative.ITERABLE_TYPE ) ;
Code	listSeparator ( JSTypeNative.ITERABLE_TYPE ) ;
Distance : 6

313
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

314
Tree	new cc () . listSeparator ( ; ) ;
Code	new cc () . listSeparator ( ; ) ;
Distance : 6

315
Tree	cc = return; ;
Code	cc = return; ;
Distance : 7

316
Tree	listSeparator ( STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT ) ;
Distance : 6

317
Tree	cc () . listSeparator () ; []
Code	cc () . listSeparator () ; []
Distance : 8

318
Tree	listSeparator () . listSeparator ( cc ) ;
Code	listSeparator () . listSeparator ( cc ) ;
Distance : 6

319
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

320
Tree	cc = aliasRefs.references ;
Code	cc = aliasRefs.references ;
Distance : 7

321
Tree	new cc () . listSeparator () ; Override
Code	new cc () . listSeparator () ; Override
Distance : 9

322
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

323
Tree	listSeparator ( cc , listSeparator () ) ; TypeInferenceMode.CHECKED
Code	listSeparator ( cc , listSeparator () ) ; TypeInferenceMode.CHECKED
Distance : 7

324
Tree	listSeparator ( new DeferredSetType ( cc ) ) ;
Code	listSeparator ( new DeferredSetType ( cc ) ) ;
Distance : 7

325
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

326
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

327
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

328
Tree	cc = flags.chromePass ;
Code	cc = flags.chromePass ;
Distance : 7

329
Tree	listSeparator ( cc , listSeparator () ) ;
Code	listSeparator ( cc , listSeparator () ) ;
Distance : 6

330
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

331
Tree	cc ( STRING_CONSTANT ) ;
Code	cc ( STRING_CONSTANT ) ;
Distance : 5

332
Tree	listSeparator () . listSeparator ( ; ) ;
Code	listSeparator () . listSeparator ( ; ) ;
Distance : 6

333
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

334
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

335
Tree	this . cc . listSeparator () ; []
Code	this . cc . listSeparator () ; []
Distance : 8

336
Tree	listSeparator ( true ) ;
Code	listSeparator ( true ) ;
Distance : 5

337
Tree	listSeparator ( flags.chromePass ) ;
Code	listSeparator ( flags.chromePass ) ;
Distance : 6

338
Tree	cc () ; node
Code	cc () ; node
Distance : 8

339
Tree	listSeparator ( cc , listSeparator () ) ; disableTypeCheck
Code	listSeparator ( cc , listSeparator () ) ; disableTypeCheck
Distance : 7

340
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

341
Tree	testDuplicate_shorthand . listSeparator () ;
Code	testDuplicate_shorthand . listSeparator () ;
Distance : 7

342
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

343
Tree	listSeparator ( true ) ; []
Code	listSeparator ( true ) ; []
Distance : 6

344
Tree	cc = null ;
Code	cc = null ;
Distance : 7

345
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

346
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

347
Tree	cc () . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Code	cc () . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Distance : 6

348
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

349
Tree	cc () ; checkNotNull
Code	cc () ; checkNotNull
Distance : 8

350
Tree	listSeparator () ; setUp
Code	listSeparator () ; setUp
Distance : 9

351
Tree	listSeparator () ; >
Code	listSeparator () ; >
Distance : 9

352
Tree	listSeparator ( NUMBER_CONSTANT ) ; >
Code	listSeparator ( NUMBER_CONSTANT ) ; >
Distance : 7

353
Tree	listSeparator () ; checkNotNull
Code	listSeparator () ; checkNotNull
Distance : 9

354
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

355
Tree	cc . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Code	cc . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Distance : 5

356
Tree	cc . listSeparator ( cc ) ; disableTypeCheck
Code	cc . listSeparator ( cc ) ; disableTypeCheck
Distance : 5

357
Tree	cc () . listSeparator () ; for
Code	cc () . listSeparator () ; for
Distance : 8

358
Tree	cc () . listSeparator () ; get
Code	cc () . listSeparator () ; get
Distance : 8

359
Tree	cc () . listSeparator () ; Override
Code	cc () . listSeparator () ; Override
Distance : 8

360
Tree	listSeparator () ; false
Code	listSeparator () ; false
Distance : 9

361
Tree	listSeparator ( STRING_CONSTANT ) ; false
Code	listSeparator ( STRING_CONSTANT ) ; false
Distance : 7

362
Tree	cc . listSeparator ( true ) ; TypeInferenceMode.CHECKED
Code	cc . listSeparator ( true ) ; TypeInferenceMode.CHECKED
Distance : 4

363
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; >
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; >
Distance : 6

364
Tree	cc = true ; lines
Code	cc = true ; lines
Distance : 7

365
Tree	cc = true ; Override
Code	cc = true ; Override
Distance : 7

366
Tree	cc () . listSeparator () ; lines
Code	cc () . listSeparator () ; lines
Distance : 8

367
Tree	cc = true ; get
Code	cc = true ; get
Distance : 7

368
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

369
Tree	cc . listSeparator ( new cc () ) ;
Code	cc . listSeparator ( new cc () ) ;
Distance : 4

370
Tree	cc () ;
Code	cc () ;
Distance : 7

371
Tree	listSeparator () ; js
Code	listSeparator () ; js
Distance : 9

372
Tree	cc . listSeparator ( cc , false ) ;
Code	cc . listSeparator ( cc , false ) ;
Distance : 3

373
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

374
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

375
Tree	cc = true ; for
Code	cc = true ; for
Distance : 7

376
Tree	new cc () . listSeparator () ; get
Code	new cc () . listSeparator () ; get
Distance : 9

377
Tree	cc = true ; pname
Code	cc = true ; pname
Distance : 7

378
Tree	cc = true ; []
Code	cc = true ; []
Distance : 7

379
Tree	cc . listSeparator ( cc , new RemoveEmptyClassMembers ( cc ) ) ;
Code	cc . listSeparator ( cc , new RemoveEmptyClassMembers ( cc ) ) ;
Distance : 7

380
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

381
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; false
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ; false
Distance : 6

382
Tree	cc ( listSeparator () , cc . . () ) ;
Code	cc ( listSeparator () , cc . . () ) ;
Distance : 8

383
Tree	listSeparator () ; block
Code	listSeparator () ; block
Distance : 9

384
Tree	cc . listSeparator ( cc , cc ) ;
Code	cc . listSeparator ( cc , cc ) ;
Distance : 3

385
Tree	this . cc . listSeparator ( cc ) ;
Code	this . cc . listSeparator ( cc ) ;
Distance : 6

386
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

387
Tree	listSeparator ( cc , cc ) ;
Code	listSeparator ( cc , cc ) ;
Distance : 5

388
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

389
Tree	listSeparator () ; of
Code	listSeparator () ; of
Distance : 9

390
Tree	new cc () . listSeparator ( ; ) ;
Code	new cc () . listSeparator ( ; ) ;
Distance : 6

391
Tree	cc = new CallSiteOptimizer <> () ;
Code	cc = new CallSiteOptimizer <> () ;
Distance : 7

392
Tree	cc = new addExpr <> () ;
Code	cc = new addExpr <> () ;
Distance : 7

393
Tree	cc . listSeparator ( true ) ; disableTypeCheck
Code	cc . listSeparator ( true ) ; disableTypeCheck
Distance : 4

394
Tree	cc = new ChangeVerifier <> () ;
Code	cc = new ChangeVerifier <> () ;
Distance : 7

395
Tree	cc = new Context.OTHER <> () ;
Code	cc = new Context.OTHER <> () ;
Distance : 7

396
Tree	new cc () . listSeparator () ; for
Code	new cc () . listSeparator () ; for
Distance : 9

397
Tree	cc = ModuleLoader.ResolutionMode.BROWSER ;
Code	cc = ModuleLoader.ResolutionMode.BROWSER ;
Distance : 7

398
Tree	listSeparator () . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Code	listSeparator () . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Distance : 7

399
Tree	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	listSeparator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 5

400
Tree	listSeparator ( NUMBER_CONSTANT ) ;
Code	listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

401
Tree	cc . listSeparator ( v.index , cc ) ;
Code	cc . listSeparator ( v.index , cc ) ;
Distance : 3

402
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

403
Tree	cc . listSeparator ( assignment.oldName , cc ) ;
Code	cc . listSeparator ( assignment.oldName , cc ) ;
Distance : 3

404
Tree	cc . listSeparator ( false ) ;
Code	cc . listSeparator ( false ) ;
Distance : 4

405
Tree	cc . listSeparator ( continue; ) ;
Code	cc . listSeparator ( continue; ) ;
Distance : 4

406
Tree	cc = default: ;
Code	cc = default: ;
Distance : 7

407
Tree	cc = new SourceMapInput <> () ;
Code	cc = new SourceMapInput <> () ;
Distance : 7

408
Tree	cc = instance.declarations ;
Code	cc = instance.declarations ;
Distance : 7

409
Tree	cc = new ProcessCommonJSModules <> () ;
Code	cc = new ProcessCommonJSModules <> () ;
Distance : 7

410
Tree	testFindExpressionRoot5 = true ;
Code	testFindExpressionRoot5 = true ;
Distance : 7

411
Tree	this . cc = getVarIterable ;
Code	this . cc = getVarIterable ;
Distance : 7

412
Tree	cc . listSeparator ( STRING_CONSTANT ) ; pname
Code	cc . listSeparator ( STRING_CONSTANT ) ; pname
Distance : 5

413
Tree	new cc () . listSeparator () ;
Code	new cc () . listSeparator () ;
Distance : 8

414
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

415
Tree	cc . listSeparator ( JSTypeNative.FUNCTION_INSTANCE_TYPE , cc ) ;
Code	cc . listSeparator ( JSTypeNative.FUNCTION_INSTANCE_TYPE , cc ) ;
Distance : 3

416
Tree	listSeparator ( cc . listSeparator () ) ;
Code	listSeparator ( cc . listSeparator () ) ;
Distance : 7

417
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

418
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

419
Tree	cc . listSeparator ( STRING_CONSTANT ) ; for
Code	cc . listSeparator ( STRING_CONSTANT ) ; for
Distance : 5

420
Tree	listSeparator ( listSeparator () , cc . . () ) ;
Code	listSeparator ( listSeparator () , cc . . () ) ;
Distance : 9

421
Tree	cc . listSeparator ( null ) ;
Code	cc . listSeparator ( null ) ;
Distance : 4

422
Tree	listSeparator () . listSeparator ( cc ) ; disableTypeCheck
Code	listSeparator () . listSeparator ( cc ) ; disableTypeCheck
Distance : 7

423
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

424
Tree	cc . listSeparator ( getReferenceName , cc ) ;
Code	cc . listSeparator ( getReferenceName , cc ) ;
Distance : 3

425
Tree	listSeparator ( STRING_CONSTANT ) ; checkNotNull
Code	listSeparator ( STRING_CONSTANT ) ; checkNotNull
Distance : 7

426
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

427
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

428
Tree	cc () . listSeparator ( cc ) ;
Code	cc () . listSeparator ( cc ) ;
Distance : 5

429
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

430
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

431
Tree	FunctionFlavor.NORMAL = true ;
Code	FunctionFlavor.NORMAL = true ;
Distance : 7

432
Tree	currentArgumentsAccess = true ;
Code	currentArgumentsAccess = true ;
Distance : 7

433
Tree	LanguageMode.TYPESCRIPT = true ;
Code	LanguageMode.TYPESCRIPT = true ;
Distance : 7

434
Tree	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	listSeparator ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 8

435
Tree	entry = true ;
Code	entry = true ;
Distance : 7

436
Tree	cc . listSeparator ( cc , true ) ;
Code	cc . listSeparator ( cc , true ) ;
Distance : 2

437
Tree	unresolvedNamedTypes ;
Code	unresolvedNamedTypes ;
Distance : 8

438
Tree	endPass ;
Code	endPass ;
Distance : 8

439
Tree	resultPair ;
Code	resultPair ;
Distance : 8

440
Tree	hoistNode = true ;
Code	hoistNode = true ;
Distance : 7

441
Tree	cc () . listSeparator ( ; ) ;
Code	cc () . listSeparator ( ; ) ;
Distance : 5

442
Tree	this . cc = cc ; lines
Code	this . cc = cc ; lines
Distance : 8

443
Tree	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Code	cc . listSeparator ( STRING_CONSTANT , cc ) ;
Distance : 3

444
Tree	add ;
Code	add ;
Distance : 8

445
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

446
Tree	cc . listSeparator ( ; , cc ) ;
Code	cc . listSeparator ( ; , cc ) ;
Distance : 3

447
Tree	cc () . listSeparator () ; pname
Code	cc () . listSeparator () ; pname
Distance : 8

448
Tree	cc . listSeparator ( cc , cc . listSeparator () ) ;
Code	cc . listSeparator ( cc , cc . listSeparator () ) ;
Distance : 6

449
Tree	cc . listSeparator ( cc . listSeparator () ) ;
Code	cc . listSeparator ( cc . listSeparator () ) ;
Distance : 5

450
Tree	tightenNameTypeAndDontWarn ;
Code	tightenNameTypeAndDontWarn ;
Distance : 8

451
Tree	cc . listSeparator ( . . listSeparator () ) ;
Code	cc . listSeparator ( . . listSeparator () ) ;
Distance : 5

452
Tree	new cc () . listSeparator () ; []
Code	new cc () . listSeparator () ; []
Distance : 9

453
Tree	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Code	listSeparator ( listSeparator () , cc . listSeparator () ) ;
Distance : 9

454
Tree	cc . listSeparator ( new cc () ) ; disableTypeCheck
Code	cc . listSeparator ( new cc () ) ; disableTypeCheck
Distance : 5

455
Tree	cc . listSeparator ( ; . listSeparator () ) ;
Code	cc . listSeparator ( ; . listSeparator () ) ;
Distance : 5

456
Tree	cc ( cc . listSeparator () ) ;
Code	cc ( cc . listSeparator () ) ;
Distance : 6

457
Tree	listSeparator ( cc ) ; lines
Code	listSeparator ( cc ) ; lines
Distance : 7

458
Tree	cc . listSeparator ( default: ) ;
Code	cc . listSeparator ( default: ) ;
Distance : 4

459
Tree	cc ( listSeparator () , cc . listSeparator () ) ;
Code	cc ( listSeparator () , cc . listSeparator () ) ;
Distance : 8

460
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; Override
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; Override
Distance : 5

461
Tree	cc = break; ;
Code	cc = break; ;
Distance : 7

462
Tree	this . cc = cc ; []
Code	this . cc = cc ; []
Distance : 8

463
Tree	hoistNode ;
Code	hoistNode ;
Distance : 8

464
Tree	listSeparator ( PassNames.AFTER_STANDARD_CHECKS ) ;
Code	listSeparator ( PassNames.AFTER_STANDARD_CHECKS ) ;
Distance : 6

465
Tree	cc ( cc . listSeparator () ) ;
Code	cc ( cc . listSeparator () ) ;
Distance : 6

466
Tree	new cc () . listSeparator ( cc ) ; disableTypeCheck
Code	new cc () . listSeparator ( cc ) ; disableTypeCheck
Distance : 7

467
Tree	listSeparator ( cc , cc ) ; TypeInferenceMode.CHECKED
Code	listSeparator ( cc , cc ) ; TypeInferenceMode.CHECKED
Distance : 6

468
Tree	listSeparator ( cc , cc ) ; disableTypeCheck
Code	listSeparator ( cc , cc ) ; disableTypeCheck
Distance : 6

469
Tree	this . cc . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Code	this . cc . listSeparator ( cc ) ; TypeInferenceMode.CHECKED
Distance : 7

470
Tree	cc . listSeparator ( cc , new LocalQName ( cc ) ) ;
Code	cc . listSeparator ( cc , new LocalQName ( cc ) ) ;
Distance : 7

471
Tree	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT , cc ) ;
Distance : 3

472
Tree	cc . listSeparator ( return; ) ;
Code	cc . listSeparator ( return; ) ;
Distance : 4

473
Tree	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Code	cc ( NUMBER_CONSTANT , cc . listSeparator () ) ;
Distance : 7

474
Tree	cc . listSeparator ( STRING_CONSTANT ) ; get
Code	cc . listSeparator ( STRING_CONSTANT ) ; get
Distance : 5

475
Tree	cc . listSeparator ( ; , cc . listSeparator () ) ;
Code	cc . listSeparator ( ; , cc . listSeparator () ) ;
Distance : 6

476
Tree	cc ( cc , cc () ) ;
Code	cc ( cc , cc () ) ;
Distance : 5

477
Tree	listSeparator ( cc . listSeparator () ) ; disableTypeCheck
Code	listSeparator ( cc . listSeparator () ) ; disableTypeCheck
Distance : 8

478
Tree	this . cc . listSeparator ( cc ) ; disableTypeCheck
Code	this . cc . listSeparator ( cc ) ; disableTypeCheck
Distance : 7

479
Tree	new enclosing ( cc ) . listSeparator () ;
Code	new enclosing ( cc ) . listSeparator () ;
Distance : 8

480
Tree	new RewriteRequiresForEs6Modules ( cc ) . listSeparator () ;
Code	new RewriteRequiresForEs6Modules ( cc ) . listSeparator () ;
Distance : 8

481
Tree	new RemoveEmptyClassMembers ( cc ) . listSeparator () ;
Code	new RemoveEmptyClassMembers ( cc ) . listSeparator () ;
Distance : 8

482
Tree	cc . listSeparator ( STRING_CONSTANT ) ;
Code	cc . listSeparator ( STRING_CONSTANT ) ;
Distance : 4

483
Tree	cc . listSeparator ( flags.chromePass ) ;
Code	cc . listSeparator ( flags.chromePass ) ;
Distance : 4

484
Tree	cc . listSeparator ( call.returnType ) ;
Code	cc . listSeparator ( call.returnType ) ;
Distance : 4

485
Tree	cc = cc ;
Code	cc = cc ;
Distance : 7

486
Tree	cc . listSeparator ( instance.declarations ) ;
Code	cc . listSeparator ( instance.declarations ) ;
Distance : 4

487
Tree	cc . listSeparator ( Feature.EXPONENT_OP ) ;
Code	cc . listSeparator ( Feature.EXPONENT_OP ) ;
Distance : 4

488
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

489
Tree	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE ) ;
Code	cc . listSeparator ( JSTypeNative.ITERABLE_TYPE ) ;
Distance : 4

490
Tree	this . cc = cc ;
Code	this . cc = cc ;
Distance : 7

491
Tree	cc = new SourceMapInput ( cc ) ;
Code	cc = new SourceMapInput ( cc ) ;
Distance : 6

492
Tree	cc = new ProcessCommonJSModules ( cc ) ;
Code	cc = new ProcessCommonJSModules ( cc ) ;
Distance : 6

493
Tree	new tightenNameTypeAndDontWarn ( cc ) . listSeparator () ;
Code	new tightenNameTypeAndDontWarn ( cc ) . listSeparator () ;
Distance : 8

494
Tree	cc = new LocalQName ( cc ) ;
Code	cc = new LocalQName ( cc ) ;
Distance : 6

495
Tree	new SourceMapInput ( cc ) . listSeparator () ;
Code	new SourceMapInput ( cc ) . listSeparator () ;
Distance : 8

496
Tree	cc . listSeparator ( true ) ;
Code	cc . listSeparator ( true ) ;
Distance : 3

497
Tree	listSeparator ( NUMBER_CONSTANT ) ; false
Code	listSeparator ( NUMBER_CONSTANT ) ; false
Distance : 7

498
Tree	new FunctionTypeI ( cc ) . listSeparator () ;
Code	new FunctionTypeI ( cc ) . listSeparator () ;
Distance : 8

499
Tree	new CallSiteOptimizer ( cc ) . listSeparator () ;
Code	new CallSiteOptimizer ( cc ) . listSeparator () ;
Distance : 8

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 320
Wrong
========================================================================
False

0
Tree	retType + STRING_CONSTANT == NUMBER_CONSTANT
Code	retType + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

1
Tree	dft + STRING_CONSTANT == NUMBER_CONSTANT
Code	dft + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

2
Tree	namedA + STRING_CONSTANT == NUMBER_CONSTANT
Code	namedA + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

3
Tree	curScope + STRING_CONSTANT == NUMBER_CONSTANT
Code	curScope + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

4
Tree	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Code	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

5
Tree	noSideEffectExterns + STRING_CONSTANT == NUMBER_CONSTANT
Code	noSideEffectExterns + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

6
Tree	varsInFunctionBody + STRING_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

7
Tree	statements + STRING_CONSTANT == NUMBER_CONSTANT
Code	statements + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

8
Tree	parametersList + STRING_CONSTANT == NUMBER_CONSTANT
Code	parametersList + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

9
Tree	bundler . needsManagement ( ( assignment.oldName [] ) null ) == else
Code	bundler . needsManagement ( ( assignment.oldName [] ) null ) == else
Distance : 10

10
Tree	bundler . needsManagement ( ( logStats.pass [] ) null ) == else
Code	bundler . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

11
Tree	retType . needsManagement ( ( logStats.pass [] ) null ) == else
Code	retType . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

12
Tree	options.dependencyOptions != return; == NUMBER_CONSTANT
Code	options.dependencyOptions != return; == NUMBER_CONSTANT
Distance : 5

13
Tree	options.dependencyOptions != default: == NUMBER_CONSTANT
Code	options.dependencyOptions != default: == NUMBER_CONSTANT
Distance : 5

14
Tree	parametersList . needsManagement ( polyfillName . class ) < else
Code	parametersList . needsManagement ( polyfillName . class ) < else
Distance : 8

15
Tree	retType . needsManagement ( refName . class ) < else
Code	retType . needsManagement ( refName . class ) < else
Distance : 8

16
Tree	null != contextType . needsManagement ( null )
Code	null != contextType . needsManagement ( null )
Distance : 6

17
Tree	curScope . needsManagement ( null ) > NUMBER_CONSTANT
Code	curScope . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

18
Tree	null != previousMap . needsManagement ( naf . class )
Code	null != previousMap . needsManagement ( naf . class )
Distance : 8

19
Tree	this . cache != options.dependencyOptions
Code	this . cache != options.dependencyOptions
Distance : 5

20
Tree	retType && previousMap . needsManagement ( null ) && !
Code	retType && previousMap . needsManagement ( null ) && !
Distance : 7

21
Tree	options.dependencyOptions < mockCompiler == NUMBER_CONSTANT
Code	options.dependencyOptions < mockCompiler == NUMBER_CONSTANT
Distance : 5

22
Tree	options.dependencyOptions < MemberDefinition == NUMBER_CONSTANT
Code	options.dependencyOptions < MemberDefinition == NUMBER_CONSTANT
Distance : 5

23
Tree	this . checkTypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . checkTypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

24
Tree	namedA . needsManagement ( null ) > NUMBER_CONSTANT
Code	namedA . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

25
Tree	namedA . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	namedA . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

26
Tree	bundler && previousMap . needsManagement ( null ) && !
Code	bundler && previousMap . needsManagement ( null ) && !
Distance : 7

27
Tree	options.dependencyOptions < constructorNameNode
Code	options.dependencyOptions < constructorNameNode
Distance : 5

28
Tree	options.dependencyOptions != null == NUMBER_CONSTANT
Code	options.dependencyOptions != null == NUMBER_CONSTANT
Distance : 5

29
Tree	curScope . needsManagement ( polyfillName . class ) < else
Code	curScope . needsManagement ( polyfillName . class ) < else
Distance : 8

30
Tree	options.dependencyOptions != break; == NUMBER_CONSTANT
Code	options.dependencyOptions != break; == NUMBER_CONSTANT
Distance : 5

31
Tree	refCollector + STRING_CONSTANT == NUMBER_CONSTANT
Code	refCollector + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

32
Tree	null != REACHABLE . needsManagement ( null )
Code	null != REACHABLE . needsManagement ( null )
Distance : 6

33
Tree	retType < retType + STRING_CONSTANT
Code	retType < retType + STRING_CONSTANT
Distance : 6

34
Tree	bundler < retType + STRING_CONSTANT
Code	bundler < retType + STRING_CONSTANT
Distance : 6

35
Tree	curScope < retType + STRING_CONSTANT
Code	curScope < retType + STRING_CONSTANT
Distance : 6

36
Tree	noSideEffectExterns < retType + STRING_CONSTANT
Code	noSideEffectExterns < retType + STRING_CONSTANT
Distance : 6

37
Tree	statements < retType + STRING_CONSTANT
Code	statements < retType + STRING_CONSTANT
Distance : 6

38
Tree	parametersList < retType + STRING_CONSTANT
Code	parametersList < retType + STRING_CONSTANT
Distance : 6

39
Tree	varsInFunctionBody < retType + STRING_CONSTANT
Code	varsInFunctionBody < retType + STRING_CONSTANT
Distance : 6

40
Tree	namedA < retType + STRING_CONSTANT
Code	namedA < retType + STRING_CONSTANT
Distance : 6

41
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Distance : 6

42
Tree	dft < retType + STRING_CONSTANT
Code	dft < retType + STRING_CONSTANT
Distance : 6

43
Tree	varsInFunctionBody . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

44
Tree	noSideEffectExterns . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	noSideEffectExterns . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

45
Tree	varsInFunctionBody . needsManagement ( null ) > NUMBER_CONSTANT
Code	varsInFunctionBody . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

46
Tree	noSideEffectExterns . needsManagement ( null ) > NUMBER_CONSTANT
Code	noSideEffectExterns . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

47
Tree	parametersList . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	parametersList . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

48
Tree	this . instanceProps != options.dependencyOptions
Code	this . instanceProps != options.dependencyOptions
Distance : 5

49
Tree	parametersList . needsManagement ( null ) > NUMBER_CONSTANT
Code	parametersList . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

50
Tree	curScope . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	curScope . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

51
Tree	this . functionContextStack != options.dependencyOptions
Code	this . functionContextStack != options.dependencyOptions
Distance : 5

52
Tree	this . lastCodeChangeQuery != options.dependencyOptions
Code	this . lastCodeChangeQuery != options.dependencyOptions
Distance : 5

53
Tree	this . optimizePropertyIndex != options.dependencyOptions
Code	this . optimizePropertyIndex != options.dependencyOptions
Distance : 5

54
Tree	options.dependencyOptions < Objects == NUMBER_CONSTANT
Code	options.dependencyOptions < Objects == NUMBER_CONSTANT
Distance : 5

55
Tree	null != ownerName . needsManagement ( null )
Code	null != ownerName . needsManagement ( null )
Distance : 6

56
Tree	null != namedExport . needsManagement ( refName . class )
Code	null != namedExport . needsManagement ( refName . class )
Distance : 8

57
Tree	null != previousMap . needsManagement ( polyfillName . class )
Code	null != previousMap . needsManagement ( polyfillName . class )
Distance : 8

58
Tree	options.dependencyOptions < noSideEffectExterns == NUMBER_CONSTANT
Code	options.dependencyOptions < noSideEffectExterns == NUMBER_CONSTANT
Distance : 5

59
Tree	null != previousMap . needsManagement ( PolymerPassStaticUtils . class )
Code	null != previousMap . needsManagement ( PolymerPassStaticUtils . class )
Distance : 8

60
Tree	null != this . checkTypes . needsManagement () == NUMBER_CONSTANT
Code	null != this . checkTypes . needsManagement () == NUMBER_CONSTANT
Distance : 7

61
Tree	null != previousMap . needsManagement ( behaviorValue . class )
Code	null != previousMap . needsManagement ( behaviorValue . class )
Distance : 8

62
Tree	null != previousMap . needsManagement ( templateTypes . class )
Code	null != previousMap . needsManagement ( templateTypes . class )
Distance : 8

63
Tree	options.dependencyOptions < isSpecializedOnlyWithUnknown
Code	options.dependencyOptions < isSpecializedOnlyWithUnknown
Distance : 5

64
Tree	null != previousMap . needsManagement ( refName . class )
Code	null != previousMap . needsManagement ( refName . class )
Distance : 8

65
Tree	null != noSideEffectExterns . needsManagement ( null )
Code	null != noSideEffectExterns . needsManagement ( null )
Distance : 6

66
Tree	null != namedExport . needsManagement ( naf . class )
Code	null != namedExport . needsManagement ( naf . class )
Distance : 8

67
Tree	refCollector < retType + STRING_CONSTANT
Code	refCollector < retType + STRING_CONSTANT
Distance : 6

68
Tree	retType + STRING_CONSTANT
Code	retType + STRING_CONSTANT
Distance : 6

69
Tree	varsInFunctionBody + STRING_CONSTANT
Code	varsInFunctionBody + STRING_CONSTANT
Distance : 6

70
Tree	noSideEffectExterns + STRING_CONSTANT
Code	noSideEffectExterns + STRING_CONSTANT
Distance : 6

71
Tree	curScope + STRING_CONSTANT
Code	curScope + STRING_CONSTANT
Distance : 6

72
Tree	statements + STRING_CONSTANT
Code	statements + STRING_CONSTANT
Distance : 6

73
Tree	this . optimizePropertyIndex == null == NUMBER_CONSTANT
Code	this . optimizePropertyIndex == null == NUMBER_CONSTANT
Distance : 6

74
Tree	namedA + STRING_CONSTANT
Code	namedA + STRING_CONSTANT
Distance : 6

75
Tree	this . functionContextStack == null == NUMBER_CONSTANT
Code	this . functionContextStack == null == NUMBER_CONSTANT
Distance : 6

76
Tree	parametersList + STRING_CONSTANT
Code	parametersList + STRING_CONSTANT
Distance : 6

77
Tree	this . definitionNodeByDefinitionSite == null == NUMBER_CONSTANT
Code	this . definitionNodeByDefinitionSite == null == NUMBER_CONSTANT
Distance : 6

78
Tree	retType < contextType == NUMBER_CONSTANT
Code	retType < contextType == NUMBER_CONSTANT
Distance : 6

79
Tree	this . checkTypes == null == NUMBER_CONSTANT
Code	this . checkTypes == null == NUMBER_CONSTANT
Distance : 6

80
Tree	noSideEffectExterns < contextType == NUMBER_CONSTANT
Code	noSideEffectExterns < contextType == NUMBER_CONSTANT
Distance : 6

81
Tree	this . lastCodeChangeQuery == null == NUMBER_CONSTANT
Code	this . lastCodeChangeQuery == null == NUMBER_CONSTANT
Distance : 6

82
Tree	retType ? contextType == NUMBER_CONSTANT
Code	retType ? contextType == NUMBER_CONSTANT
Distance : 6

83
Tree	retType < noSideEffectExterns == NUMBER_CONSTANT
Code	retType < noSideEffectExterns == NUMBER_CONSTANT
Distance : 6

84
Tree	bundler + STRING_CONSTANT
Code	bundler + STRING_CONSTANT
Distance : 6

85
Tree	retType < nodes == NUMBER_CONSTANT
Code	retType < nodes == NUMBER_CONSTANT
Distance : 6

86
Tree	bundler < contextType == NUMBER_CONSTANT
Code	bundler < contextType == NUMBER_CONSTANT
Distance : 6

87
Tree	this . cache == null == NUMBER_CONSTANT
Code	this . cache == null == NUMBER_CONSTANT
Distance : 6

88
Tree	this . instanceProps == null == NUMBER_CONSTANT
Code	this . instanceProps == null == NUMBER_CONSTANT
Distance : 6

89
Tree	bundler < noSideEffectExterns == NUMBER_CONSTANT
Code	bundler < noSideEffectExterns == NUMBER_CONSTANT
Distance : 6

90
Tree	curScope < noSideEffectExterns == NUMBER_CONSTANT
Code	curScope < noSideEffectExterns == NUMBER_CONSTANT
Distance : 6

91
Tree	this . quoteKeywordProperties == null == NUMBER_CONSTANT
Code	this . quoteKeywordProperties == null == NUMBER_CONSTANT
Distance : 6

92
Tree	dft + STRING_CONSTANT
Code	dft + STRING_CONSTANT
Distance : 6

93
Tree	varsInFunctionBody < contextType == NUMBER_CONSTANT
Code	varsInFunctionBody < contextType == NUMBER_CONSTANT
Distance : 6

94
Tree	this . retType == null == NUMBER_CONSTANT
Code	this . retType == null == NUMBER_CONSTANT
Distance : 6

95
Tree	bundler . needsManagement ( null ) < else
Code	bundler . needsManagement ( null ) < else
Distance : 6

96
Tree	this . quoteKeywordProperties != options.dependencyOptions
Code	this . quoteKeywordProperties != options.dependencyOptions
Distance : 5

97
Tree	statements && previousMap . needsManagement ( null ) && !
Code	statements && previousMap . needsManagement ( null ) && !
Distance : 7

98
Tree	curScope < contextType == NUMBER_CONSTANT
Code	curScope < contextType == NUMBER_CONSTANT
Distance : 6

99
Tree	this . statements == null == NUMBER_CONSTANT
Code	this . statements == null == NUMBER_CONSTANT
Distance : 6

100
Tree	this . functionContextStack . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . functionContextStack . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

101
Tree	null != this . disambiguateProperties . needsManagement () == NUMBER_CONSTANT
Code	null != this . disambiguateProperties . needsManagement () == NUMBER_CONSTANT
Distance : 7

102
Tree	this . instanceProps . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . instanceProps . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

103
Tree	noSideEffectExterns && previousMap . needsManagement ( null ) && !
Code	noSideEffectExterns && previousMap . needsManagement ( null ) && !
Distance : 7

104
Tree	varsInFunctionBody && previousMap . needsManagement ( null ) && !
Code	varsInFunctionBody && previousMap . needsManagement ( null ) && !
Distance : 7

105
Tree	this . statements != options.dependencyOptions
Code	this . statements != options.dependencyOptions
Distance : 5

106
Tree	this . cache . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . cache . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

107
Tree	retType . needsManagement ( refName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( refName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

108
Tree	parametersList . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	parametersList . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

109
Tree	curScope . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	curScope . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

110
Tree	retType && previousMap . needsManagement ( sub1 . class ) && !
Code	retType && previousMap . needsManagement ( sub1 . class ) && !
Distance : 9

111
Tree	retType && previousMap . needsManagement ( naf . class ) && !
Code	retType && previousMap . needsManagement ( naf . class ) && !
Distance : 9

112
Tree	retType && previousMap . needsManagement ( windowCtor . class ) && !
Code	retType && previousMap . needsManagement ( windowCtor . class ) && !
Distance : 9

113
Tree	bundler && previousMap . needsManagement ( sub1 . class ) && !
Code	bundler && previousMap . needsManagement ( sub1 . class ) && !
Distance : 9

114
Tree	bundler && previousMap . needsManagement ( naf . class ) && !
Code	bundler && previousMap . needsManagement ( naf . class ) && !
Distance : 9

115
Tree	bundler && previousMap . needsManagement ( windowCtor . class ) && !
Code	bundler && previousMap . needsManagement ( windowCtor . class ) && !
Distance : 9

116
Tree	retType && previousMap . needsManagement ( polyfillName . class ) && !
Code	retType && previousMap . needsManagement ( polyfillName . class ) && !
Distance : 9

117
Tree	statements . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Code	statements . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Distance : 9

118
Tree	bundler . needsManagement ( assignment.oldName ) == options.dependencyOptions . needsManagement ()
Code	bundler . needsManagement ( assignment.oldName ) == options.dependencyOptions . needsManagement ()
Distance : 9

119
Tree	retType . needsManagement ( refName ) == options.dependencyOptions . needsManagement ()
Code	retType . needsManagement ( refName ) == options.dependencyOptions . needsManagement ()
Distance : 9

120
Tree	varsInFunctionBody . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Code	varsInFunctionBody . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Distance : 9

121
Tree	noSideEffectExterns . needsManagement ( polyfillName ) == options.dependencyOptions . options.closurePass ()
Code	noSideEffectExterns . needsManagement ( polyfillName ) == options.dependencyOptions . options.closurePass ()
Distance : 8

122
Tree	parametersList . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Code	parametersList . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Distance : 9

123
Tree	retType . needsManagement ( windowCtor ) == options.dependencyOptions . needsManagement ()
Code	retType . needsManagement ( windowCtor ) == options.dependencyOptions . needsManagement ()
Distance : 9

124
Tree	options.dependencyOptions != . == NUMBER_CONSTANT
Code	options.dependencyOptions != . == NUMBER_CONSTANT
Distance : 5

125
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
Distance : 3

126
Tree	null != this . instrumentationPb . needsManagement () == NUMBER_CONSTANT
Code	null != this . instrumentationPb . needsManagement () == NUMBER_CONSTANT
Distance : 7

127
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT js
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT js
Distance : 5

128
Tree	null != this . STRING . needsManagement () == NUMBER_CONSTANT
Code	null != this . STRING . needsManagement () == NUMBER_CONSTANT
Distance : 7

129
Tree	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

130
Tree	null != this . lastCodeChangeQuery . needsManagement () == NUMBER_CONSTANT
Code	null != this . lastCodeChangeQuery . needsManagement () == NUMBER_CONSTANT
Distance : 7

131
Tree	parametersList && previousMap . needsManagement ( null ) && !
Code	parametersList && previousMap . needsManagement ( null ) && !
Distance : 7

132
Tree	retType && namedExport . needsManagement ( null ) && !
Code	retType && namedExport . needsManagement ( null ) && !
Distance : 7

133
Tree	curScope && previousMap . needsManagement ( null ) && !
Code	curScope && previousMap . needsManagement ( null ) && !
Distance : 7

134
Tree	statements . needsManagement ( null ) < else
Code	statements . needsManagement ( null ) < else
Distance : 6

135
Tree	varsInFunctionBody . needsManagement ( null ) < else
Code	varsInFunctionBody . needsManagement ( null ) < else
Distance : 6

136
Tree	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

137
Tree	noSideEffectExterns . needsManagement ( null ) < else
Code	noSideEffectExterns . needsManagement ( null ) < else
Distance : 6

138
Tree	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT
Code	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT
Distance : 8

139
Tree	bundler && namedExport . needsManagement ( null ) && !
Code	bundler && namedExport . needsManagement ( null ) && !
Distance : 7

140
Tree	retType . needsManagement ( refName . class ) > NUMBER_CONSTANT
Code	retType . needsManagement ( refName . class ) > NUMBER_CONSTANT
Distance : 8

141
Tree	parametersList . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	parametersList . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

142
Tree	curScope . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	curScope . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

143
Tree	noSideEffectExterns . mockCompiler . needsManagement ( null )
Code	noSideEffectExterns . mockCompiler . needsManagement ( null )
Distance : 6

144
Tree	varsInFunctionBody . mockCompiler . needsManagement ( null )
Code	varsInFunctionBody . mockCompiler . needsManagement ( null )
Distance : 6

145
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . templateLineno )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . templateLineno )
Distance : 12

146
Tree	parametersList . mockCompiler . needsManagement ( null )
Code	parametersList . mockCompiler . needsManagement ( null )
Distance : 6

147
Tree	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

148
Tree	null != this . checkTypes . () ( useSitesByName , this . checkTypes )
Code	null != this . checkTypes . () ( useSitesByName , this . checkTypes )
Distance : 12

149
Tree	parametersList . needsManagement ( null ) < else
Code	parametersList . needsManagement ( null ) < else
Distance : 6

150
Tree	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

151
Tree	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

152
Tree	null != this . cache . needsManagement () == NUMBER_CONSTANT
Code	null != this . cache . needsManagement () == NUMBER_CONSTANT
Distance : 7

153
Tree	namedA && previousMap . needsManagement ( null ) && !
Code	namedA && previousMap . needsManagement ( null ) && !
Distance : 7

154
Tree	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

155
Tree	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	statements . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

156
Tree	bundler . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

157
Tree	curScope . needsManagement ( null ) < else
Code	curScope . needsManagement ( null ) < else
Distance : 6

158
Tree	this . quoteKeywordProperties . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . quoteKeywordProperties . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

159
Tree	null != this . checkTypes . options.closurePass ( useSitesByName , this . currentScope )
Code	null != this . checkTypes . options.closurePass ( useSitesByName , this . currentScope )
Distance : 13

160
Tree	definitionNodeByDefinitionSite . mockCompiler . needsManagement ( null )
Code	definitionNodeByDefinitionSite . mockCompiler . needsManagement ( null )
Distance : 6

161
Tree	retType > noSideEffectExterns + STRING_CONSTANT
Code	retType > noSideEffectExterns + STRING_CONSTANT
Distance : 6

162
Tree	this . statements . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . statements . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

163
Tree	this . retType . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . retType . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

164
Tree	refCollector . mockCompiler . needsManagement ( null )
Code	refCollector . mockCompiler . needsManagement ( null )
Distance : 6

165
Tree	bundler . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( assignment.oldName . class ) > NUMBER_CONSTANT
Distance : 8

166
Tree	convention options.dependencyOptions mockCompiler . needsManagement ( null )
Code	convention options.dependencyOptions mockCompiler . needsManagement ( null )
Distance : 5

167
Tree	namedA . needsManagement ( null ) < else
Code	namedA . needsManagement ( null ) < else
Distance : 6

168
Tree	bundler > noSideEffectExterns + STRING_CONSTANT
Code	bundler > noSideEffectExterns + STRING_CONSTANT
Distance : 6

169
Tree	varsInFunctionBody . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

170
Tree	varsInFunctionBody > noSideEffectExterns + STRING_CONSTANT
Code	varsInFunctionBody > noSideEffectExterns + STRING_CONSTANT
Distance : 6

171
Tree	statements . mockCompiler . needsManagement ( null )
Code	statements . mockCompiler . needsManagement ( null )
Distance : 6

172
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . runSmartNameRemoval )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . runSmartNameRemoval )
Distance : 12

173
Tree	bundler . needsManagement ( ( other.rawType [] ) null ) == else
Code	bundler . needsManagement ( ( other.rawType [] ) null ) == else
Distance : 10

174
Tree	varsInFunctionBody . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	varsInFunctionBody . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

175
Tree	null != this . namedExport . needsManagement () == NUMBER_CONSTANT
Code	null != this . namedExport . needsManagement () == NUMBER_CONSTANT
Distance : 7

176
Tree	retType . needsManagement ( ( other.rawType [] ) null ) == else
Code	retType . needsManagement ( ( other.rawType [] ) null ) == else
Distance : 10

177
Tree	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

178
Tree	noSideEffectExterns . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	noSideEffectExterns . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 10

179
Tree	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( symbols , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

180
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . instrumentationPb )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . instrumentationPb )
Distance : 12

181
Tree	dft . needsManagement ( null ) < else
Code	dft . needsManagement ( null ) < else
Distance : 6

182
Tree	statements && previousMap . needsManagement ( sub1 . class ) && !
Code	statements && previousMap . needsManagement ( sub1 . class ) && !
Distance : 9

183
Tree	curScope . needsManagement ( ( logStats.pass [] ) null ) == else
Code	curScope . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

184
Tree	retType . needsManagement ( polyfillName ) == options.dependencyOptions . options.closurePass ()
Code	retType . needsManagement ( polyfillName ) == options.dependencyOptions . options.closurePass ()
Distance : 8

185
Tree	null != this . quoteKeywordProperties . needsManagement () == NUMBER_CONSTANT
Code	null != this . quoteKeywordProperties . needsManagement () == NUMBER_CONSTANT
Distance : 7

186
Tree	null != this . checkTypes . needsManagement ( symbols , this . templateLineno )
Code	null != this . checkTypes . needsManagement ( symbols , this . templateLineno )
Distance : 12

187
Tree	refCollector . needsManagement ( null ) < else
Code	refCollector . needsManagement ( null ) < else
Distance : 6

188
Tree	retType > varsInFunctionBody + STRING_CONSTANT
Code	retType > varsInFunctionBody + STRING_CONSTANT
Distance : 6

189
Tree	noSideEffectExterns . needsManagement ( ( logStats.pass [] ) null ) == else
Code	noSideEffectExterns . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

190
Tree	retType > curScope + STRING_CONSTANT
Code	retType > curScope + STRING_CONSTANT
Distance : 6

191
Tree	varsInFunctionBody > varsInFunctionBody + STRING_CONSTANT
Code	varsInFunctionBody > varsInFunctionBody + STRING_CONSTANT
Distance : 6

192
Tree	noSideEffectExterns && previousMap . needsManagement ( sub1 . class ) && !
Code	noSideEffectExterns && previousMap . needsManagement ( sub1 . class ) && !
Distance : 9

193
Tree	curScope . needsManagement ( ( assignment.oldName [] ) null ) == else
Code	curScope . needsManagement ( ( assignment.oldName [] ) null ) == else
Distance : 10

194
Tree	curScope > noSideEffectExterns + STRING_CONSTANT
Code	curScope > noSideEffectExterns + STRING_CONSTANT
Distance : 6

195
Tree	retType && previousMap . needsManagement ( refName . class ) && !
Code	retType && previousMap . needsManagement ( refName . class ) && !
Distance : 9

196
Tree	parametersList . needsManagement ( ( logStats.pass [] ) null ) == else
Code	parametersList . needsManagement ( ( logStats.pass [] ) null ) == else
Distance : 10

197
Tree	options.dependencyOptions != continue; == NUMBER_CONSTANT
Code	options.dependencyOptions != continue; == NUMBER_CONSTANT
Distance : 5

198
Tree	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

199
Tree	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( refName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

200
Tree	bundler . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Code	bundler . needsManagement ( polyfillName ) == options.dependencyOptions . needsManagement ()
Distance : 9

201
Tree	null != this . checkTypes . needsManagement ( symbols , this . checkTypes )
Code	null != this . checkTypes . needsManagement ( symbols , this . checkTypes )
Distance : 12

202
Tree	retType . mockCompiler . needsManagement ( null )
Code	retType . mockCompiler . needsManagement ( null )
Distance : 6

203
Tree	retType . needsManagement ( polyfillName . class ) < else
Code	retType . needsManagement ( polyfillName . class ) < else
Distance : 8

204
Tree	bundler . mockCompiler . needsManagement ( null )
Code	bundler . mockCompiler . needsManagement ( null )
Distance : 6

205
Tree	bundler > varsInFunctionBody + STRING_CONSTANT
Code	bundler > varsInFunctionBody + STRING_CONSTANT
Distance : 6

206
Tree	this . optimizePropertyIndex . needsManagement ( naf , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( naf , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

207
Tree	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

208
Tree	this . optimizePropertyIndex . needsManagement ( visibility , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( visibility , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

209
Tree	this . optimizePropertyIndex . needsManagement ( symbols , this . currentScope ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( symbols , this . currentScope ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

210
Tree	curScope . mockCompiler . needsManagement ( null )
Code	curScope . mockCompiler . needsManagement ( null )
Distance : 6

211
Tree	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

212
Tree	null != this . checkTypes . needsManagement ( symbols , this . currentScope )
Code	null != this . checkTypes . needsManagement ( symbols , this . currentScope )
Distance : 12

213
Tree	retType . needsManagement ( assignment.oldName . class ) < else
Code	retType . needsManagement ( assignment.oldName . class ) < else
Distance : 8

214
Tree	noSideEffectExterns > noSideEffectExterns + STRING_CONSTANT
Code	noSideEffectExterns > noSideEffectExterns + STRING_CONSTANT
Distance : 6

215
Tree	this . optimizePropertyIndex . needsManagement ( REPORT_PATH_IO_ERROR , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( REPORT_PATH_IO_ERROR , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

216
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT setUp
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT setUp
Distance : 5

217
Tree	retType . needsManagement ( assignment.oldName ) == options.dependencyOptions . needsManagement ()
Code	retType . needsManagement ( assignment.oldName ) == options.dependencyOptions . needsManagement ()
Distance : 9

218
Tree	options.dependencyOptions != null == NUMBER_CONSTANT options
Code	options.dependencyOptions != null == NUMBER_CONSTANT options
Distance : 5

219
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT NUMBER_CONSTANT
Distance : 6

220
Tree	statements . needsManagement ( polyfillName . class ) < else
Code	statements . needsManagement ( polyfillName . class ) < else
Distance : 8

221
Tree	options.dependencyOptions != null == NUMBER_CONSTANT get
Code	options.dependencyOptions != null == NUMBER_CONSTANT get
Distance : 5

222
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT TypeInferenceMode.NEITHER
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT TypeInferenceMode.NEITHER
Distance : 6

223
Tree	noSideEffectExterns . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Code	noSideEffectExterns . needsManagement ( polyfillName . class ) > NUMBER_CONSTANT
Distance : 8

224
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT super
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT super
Distance : 6

225
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . optimizePropertyIndex )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . optimizePropertyIndex )
Distance : 12

226
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT :
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT :
Distance : 6

227
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT t
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT t
Distance : 6

228
Tree	options.dependencyOptions != null == NUMBER_CONSTANT Node
Code	options.dependencyOptions != null == NUMBER_CONSTANT Node
Distance : 5

229
Tree	null != this . checkTypes . needsManagement ( useSitesByName , this . contextStack )
Code	null != this . checkTypes . needsManagement ( useSitesByName , this . contextStack )
Distance : 12

230
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT checkNotNull
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT checkNotNull
Distance : 6

231
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT js
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT js
Distance : 6

232
Tree	options.dependencyOptions != null == NUMBER_CONSTANT for
Code	options.dependencyOptions != null == NUMBER_CONSTANT for
Distance : 5

233
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT getParent
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT getParent
Distance : 6

234
Tree	toRemove > noSideEffectExterns + STRING_CONSTANT
Code	toRemove > noSideEffectExterns + STRING_CONSTANT
Distance : 6

235
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT checkNotNull
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT checkNotNull
Distance : 5

236
Tree	this . optimizePropertyIndex . needsManagement ( REPORT_PATH_IO_ERROR , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( REPORT_PATH_IO_ERROR , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

237
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT NUMBER_CONSTANT
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT NUMBER_CONSTANT
Distance : 5

238
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT setUp
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT setUp
Distance : 6

239
Tree	null != isFwd . needsManagement ( null )
Code	null != isFwd . needsManagement ( null )
Distance : 6

240
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT getParent
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT getParent
Distance : 5

241
Tree	bundler . needsManagement ( assignment.oldName . class ) < else
Code	bundler . needsManagement ( assignment.oldName . class ) < else
Distance : 8

242
Tree	null != this . ancestors . needsManagement () == NUMBER_CONSTANT
Code	null != this . ancestors . needsManagement () == NUMBER_CONSTANT
Distance : 7

243
Tree	varsInFunctionBody . needsManagement ( polyfillName . class ) < else
Code	varsInFunctionBody . needsManagement ( polyfillName . class ) < else
Distance : 8

244
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT t
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT t
Distance : 5

245
Tree	noSideEffectExterns . needsManagement ( polyfillName . class ) < else
Code	noSideEffectExterns . needsManagement ( polyfillName . class ) < else
Distance : 8

246
Tree	retType . needsManagement ( ( assignment.oldName [] ) null ) == else
Code	retType . needsManagement ( ( assignment.oldName [] ) null ) == else
Distance : 10

247
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT :
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT :
Distance : 5

248
Tree	options.dependencyOptions < assignment.oldName
Code	options.dependencyOptions < assignment.oldName
Distance : 5

249
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT super
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT super
Distance : 5

250
Tree	options.dependencyOptions < Matchers
Code	options.dependencyOptions < Matchers
Distance : 5

251
Tree	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

252
Tree	options.dependencyOptions < referencedPropertyNames
Code	options.dependencyOptions < referencedPropertyNames
Distance : 5

253
Tree	this . checkTypes != options.dependencyOptions
Code	this . checkTypes != options.dependencyOptions
Distance : 5

254
Tree	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

255
Tree	statements . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	statements . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

256
Tree	statements . needsManagement ( null ) > NUMBER_CONSTANT
Code	statements . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

257
Tree	options.dependencyOptions < isSpecializedOnlyWithUnknown == NUMBER_CONSTANT
Code	options.dependencyOptions < isSpecializedOnlyWithUnknown == NUMBER_CONSTANT
Distance : 5

258
Tree	this . definitionNodeByDefinitionSite . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . definitionNodeByDefinitionSite . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

259
Tree	null != retType . needsManagement ( null )
Code	null != retType . needsManagement ( null )
Distance : 6

260
Tree	null != previousMap . needsManagement ( sub1 . class )
Code	null != previousMap . needsManagement ( sub1 . class )
Distance : 8

261
Tree	options.dependencyOptions < assignment.oldName == NUMBER_CONSTANT
Code	options.dependencyOptions < assignment.oldName == NUMBER_CONSTANT
Distance : 5

262
Tree	this . optimizePropertyIndex . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

263
Tree	null != namedExport . needsManagement ( polyfillName . class )
Code	null != namedExport . needsManagement ( polyfillName . class )
Distance : 8

264
Tree	options.dependencyOptions < mockCompiler
Code	options.dependencyOptions < mockCompiler
Distance : 5

265
Tree	this . definitionNodeByDefinitionSite != options.dependencyOptions
Code	this . definitionNodeByDefinitionSite != options.dependencyOptions
Distance : 5

266
Tree	options.dependencyOptions < MemberDefinition
Code	options.dependencyOptions < MemberDefinition
Distance : 5

267
Tree	options.dependencyOptions < constructorNameNode == NUMBER_CONSTANT
Code	options.dependencyOptions < constructorNameNode == NUMBER_CONSTANT
Distance : 5

268
Tree	retType . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

269
Tree	retType . needsManagement ( null ) > NUMBER_CONSTANT
Code	retType . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

270
Tree	dft . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	dft . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

271
Tree	retType . needsManagement ( null ) < else
Code	retType . needsManagement ( null ) < else
Distance : 6

272
Tree	refCollector . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	refCollector . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

273
Tree	dft . needsManagement ( null ) > NUMBER_CONSTANT
Code	dft . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

274
Tree	options.dependencyOptions < Matchers == NUMBER_CONSTANT
Code	options.dependencyOptions < Matchers == NUMBER_CONSTANT
Distance : 5

275
Tree	null != this . optimizePropertyIndex . options.closurePass () == NUMBER_CONSTANT
Code	null != this . optimizePropertyIndex . options.closurePass () == NUMBER_CONSTANT
Distance : 8

276
Tree	refCollector . needsManagement ( null ) > NUMBER_CONSTANT
Code	refCollector . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

277
Tree	options.dependencyOptions < referencedPropertyNames == NUMBER_CONSTANT
Code	options.dependencyOptions < referencedPropertyNames == NUMBER_CONSTANT
Distance : 5

278
Tree	this . lastCodeChangeQuery . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . lastCodeChangeQuery . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

279
Tree	this . retType != options.dependencyOptions
Code	this . retType != options.dependencyOptions
Distance : 5

280
Tree	retType < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

281
Tree	retType < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

282
Tree	bundler < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

283
Tree	bundler < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

284
Tree	varsInFunctionBody < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	varsInFunctionBody < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

285
Tree	curScope < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	curScope < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

286
Tree	noSideEffectExterns < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	noSideEffectExterns < contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

287
Tree	retType ? contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType ? contextType == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

288
Tree	retType < nodes == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	retType < nodes == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

289
Tree	curScope < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Code	curScope < noSideEffectExterns == NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

290
Tree	null != previousMap . needsManagement ( null )
Code	null != previousMap . needsManagement ( null )
Distance : 6

291
Tree	refCollector + STRING_CONSTANT
Code	refCollector + STRING_CONSTANT
Distance : 6

292
Tree	null != namedExport . needsManagement ( null )
Code	null != namedExport . needsManagement ( null )
Distance : 6

293
Tree	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( templateTypes , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

294
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 5

295
Tree	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( useSitesByName , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

296
Tree	this . optimizePropertyIndex . needsManagement ( behaviorValue , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( behaviorValue , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

297
Tree	options.dependencyOptions < retType
Code	options.dependencyOptions < retType
Distance : 5

298
Tree	this . optimizePropertyIndex . needsManagement ( behaviorValue , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( behaviorValue , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

299
Tree	null != constructorNameNode . needsManagement ( null )
Code	null != constructorNameNode . needsManagement ( null )
Distance : 6

300
Tree	this . optimizePropertyIndex . needsManagement ( constructorJ , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( constructorJ , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

301
Tree	bundler . needsManagement ( polyfillName . class ) < else
Code	bundler . needsManagement ( polyfillName . class ) < else
Distance : 8

302
Tree	this . optimizePropertyIndex . needsManagement ( constructorJ , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( constructorJ , this . templateLineno ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 14

303
Tree	options.dependencyOptions < Objects
Code	options.dependencyOptions < Objects
Distance : 5

304
Tree	this . optimizePropertyIndex . needsManagement ( naf , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( naf , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

305
Tree	this . optimizePropertyIndex . needsManagement ( visibility , this . templateLineno ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( visibility , this . templateLineno ) > NUMBER_CONSTANT
Distance : 12

306
Tree	options.dependencyOptions < retType == NUMBER_CONSTANT
Code	options.dependencyOptions < retType == NUMBER_CONSTANT
Distance : 5

307
Tree	this . optimizePropertyIndex . needsManagement ( symbols , this . currentScope ) > NUMBER_CONSTANT
Code	this . optimizePropertyIndex . needsManagement ( symbols , this . currentScope ) > NUMBER_CONSTANT
Distance : 12

308
Tree	options.dependencyOptions < noSideEffectExterns
Code	options.dependencyOptions < noSideEffectExterns
Distance : 5

309
Tree	null != LinkedHashMultimap . needsManagement ( null )
Code	null != LinkedHashMultimap . needsManagement ( null )
Distance : 6

310
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT TypeInferenceMode.NEITHER
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT TypeInferenceMode.NEITHER
Distance : 5

311
Tree	options.dependencyOptions . needsManagement () && ! options.dependencyOptions && options.closurePass t
Code	options.dependencyOptions . needsManagement () && ! options.dependencyOptions && options.closurePass t
Distance : 4

312
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses setUp
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses setUp
Distance : 5

313
Tree	options.dependencyOptions . needsManagement () && ! options.dependencyOptions && options.closurePass getParent
Code	options.dependencyOptions . needsManagement () && ! options.dependencyOptions && options.closurePass getParent
Distance : 4

314
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass js
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass js
Distance : 4

315
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass NUMBER_CONSTANT
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass NUMBER_CONSTANT
Distance : 4

316
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses :
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses :
Distance : 5

317
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass super
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass super
Distance : 4

318
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses TypeInferenceMode.NEITHER
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.skipAllPasses TypeInferenceMode.NEITHER
Distance : 5

319
Tree	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass checkNotNull
Code	options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass checkNotNull
Distance : 4

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 340
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Distance : 4

1
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Distance : 7

2
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Distance : 7

3
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , shouldPreserve ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , shouldPreserve ) ; }
Distance : 6

4
Tree	{ ( new NodeTraversal ( compiler , compiler , externs , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , externs , false ) ) . traverseRoots ( root ) ; }
Distance : 7

5
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverse ( root ) ; }
Distance : 8

6
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

7
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 11

8
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Distance : 7

9
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

10
Tree	{ compiler . traverseRoots ( compiler . traverseRoots ( null , true ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverseRoots ( null , true ) , null ) ; }
Distance : 12

11
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( root ) ; }
Distance : 5

12
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; }
Distance : 5

13
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Distance : 5

14
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( externs ) ; }
Distance : 4

15
Tree	{ compiler . traverseRoots ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

16
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( root ) ; }
Distance : 4

17
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( root ) ; }
Distance : 4

18
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 10

19
Tree	{ compiler . traverseRoots ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

20
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 6

21
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Distance : 5

22
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

23
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

24
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

25
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Distance : 8

26
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , [] ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , [] ) ; }
Distance : 4

27
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

28
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

29
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Distance : 7

30
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 11

31
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , StringBuilder ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , StringBuilder ) ) . traverseRoots ( root ) ; }
Distance : 4

32
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

33
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 9

34
Tree	{ compiler . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Distance : 12

35
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Distance : 7

36
Tree	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

37
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Distance : 9

38
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

39
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( externs ) ; }
Distance : 4

40
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( true ) , null ) ; }
Distance : 8

41
Tree	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

42
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Distance : 6

43
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Distance : 11

44
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , FunctionVisitor ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , FunctionVisitor ) ) . traverseRoots ( root ) ; }
Distance : 4

45
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Distance : 10

46
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( externs ) ; }
Distance : 4

47
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

48
Tree	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

49
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 11

50
Tree	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 10

51
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 8

52
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverse ( root ) ; }
Distance : 6

53
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( compiler ) ; }
Distance : 6

54
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Distance : 9

55
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

56
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 9

57
Tree	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

58
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , options.removeUnusedPrototypePropertiesInExterns ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , options.removeUnusedPrototypePropertiesInExterns ) ) . traverseRoots ( root ) ; }
Distance : 4

59
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverse ( root ) , null ) ; }
Distance : 10

60
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 6

61
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

62
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( externs ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( externs ) , null ) ; }
Distance : 8

63
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs , root ) ) ; }
Distance : 7

64
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Distance : 15

65
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs ) ) ; }
Distance : 10

66
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

67
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Distance : 8

68
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , source ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , source ) ; }
Distance : 4

69
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 9

70
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( NUMBER_CONSTANT , - ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( NUMBER_CONSTANT , - ) ; }
Distance : 4

71
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , true ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , true ) ; }
Distance : 4

72
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

73
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

74
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 9

75
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 9

76
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( LINE_JOINER ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( LINE_JOINER ) ; }
Distance : 13

77
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , invalidDeref ) ; }
Distance : 7

78
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

79
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) . traverseRoots ( root ) ; }
Distance : 4

80
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Distance : 13

81
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 13

82
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 6

83
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

84
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Distance : 5

85
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , parts.length ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , parts.length ) ; }
Distance : 4

86
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverse ( externs ) ; }
Distance : 6

87
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

88
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , js ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , js ) ; }
Distance : 4

89
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 8

90
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) , null ) ; }
Distance : 8

91
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 6

92
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , System.out ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , System.out ) ) . traverseRoots ( root ) ; }
Distance : 4

93
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , null , false ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , null , false ) . traverseRoots ( root ) , null ) ; }
Distance : 10

94
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , null ) ; }
Distance : 8

95
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( externs ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( externs ) , null ) ; }
Distance : 8

96
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

97
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 9

98
Tree	{ compiler . traverseRoots ( compiler . traverse ( null , false ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

99
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( root ) ; }
Distance : 5

100
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverse ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverse ( root , root ) . traverseRoots ( externs ) ; }
Distance : 14

101
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , ToStringContext.TO_STRING ) ) . traverseRoots ( externs ) ; }
Distance : 4

102
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 4

103
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , externs ) ; }
Distance : 4

104
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( root ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( root ) ; }
Distance : 13

105
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 6

106
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) , null ) ; }
Distance : 7

107
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) , null ) ; }
Distance : 8

108
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverse ( externs ) ; }
Distance : 5

109
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

110
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 12

111
Tree	{ ( new NodeTraversal ( compiler , root , root , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , root , false ) ) . traverseRoots ( root ) ; }
Distance : 7

112
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( false ) ) ; }
Distance : 10

113
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , CHAR_CONS ) ; }
Distance : 6

114
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( true ) ) ; }
Distance : 9

115
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Distance : 12

116
Tree	{ traverseRoots ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverseRoots ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

117
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( root , root ) ) ; }
Distance : 8

118
Tree	{ compiler . traverseRoots ( compiler . traverse ( AbstractCompiler.READ_ERROR ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( AbstractCompiler.READ_ERROR ) , null ) ; }
Distance : 11

119
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

120
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( externs ) ; }
Distance : 4

121
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , commonTypes.BOTTOM_PROPERTY_MAP ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , commonTypes.BOTTOM_PROPERTY_MAP ) ) . traverseRoots ( root ) ; }
Distance : 4

122
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

123
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LifeCycleStage.NORMALIZED ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LifeCycleStage.NORMALIZED ) ) . traverseRoots ( root ) ; }
Distance : 4

124
Tree	{ traverse ( root , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( root , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

125
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( root ) ; }
Distance : 5

126
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , MISPLACED_ANNOTATION ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , MISPLACED_ANNOTATION ) ; }
Distance : 6

127
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 10

128
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

129
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , shouldPreserve ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , shouldPreserve ) ; }
Distance : 4

130
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , null , true ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , null , true ) . traverseRoots ( root ) , null ) ; }
Distance : 10

131
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) . traverseRoots ( externs ) ; }
Distance : 8

132
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Distance : 5

133
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root ) , null ) ; }
Distance : 8

134
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Distance : 6

135
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 6

136
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

137
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverse ( root , root ) . traverseRoots ( ! ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverse ( root , root ) . traverseRoots ( ! ) ; }
Distance : 14

138
Tree	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

139
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Distance : 8

140
Tree	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , true ) ) ; }
Code	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , true ) ) ; }
Distance : 10

141
Tree	{ traverseRoots ( compiler , traverse ( NUMBER_CONSTANT , true ) ) ; }
Code	{ traverseRoots ( compiler , traverse ( NUMBER_CONSTANT , true ) ) ; }
Distance : 11

142
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

143
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

144
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( null ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( null ) ; }
Distance : 9

145
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Distance : 9

146
Tree	{ root . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Code	{ root . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Distance : 11

147
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , NUMBER_CONSTANT ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , NUMBER_CONSTANT ) ; }
Distance : 11

148
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( root ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( root ) ; }
Distance : 8

149
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( externs ) ; }
Distance : 5

150
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( externs ) ; }
Distance : 5

151
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , warningOtiNti ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , warningOtiNti ) ; }
Distance : 6

152
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 8

153
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( true ) , null ) ; }
Distance : 8

154
Tree	{ traverse ( externs , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( externs , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

155
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) , null ) ; }
Distance : 8

156
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 9

157
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , inheritedPropDef.methodType ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , inheritedPropDef.methodType ) ) . traverseRoots ( root ) ; }
Distance : 4

158
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) , null ) ; }
Distance : 10

159
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( root ) ; }
Distance : 4

160
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , null ) ; }
Distance : 9

161
Tree	{ root . traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ root . traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

162
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs ) ) ; }
Distance : 11

163
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , > ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , > ) ; }
Distance : 7

164
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( js ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( js ) ; }
Distance : 11

165
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , > ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , > ) ; }
Distance : 7

166
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverse ( root ) ; }
Distance : 5

167
Tree	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( externs , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( externs , this , root ) , root , root , root ) , null ) ; }
Distance : 15

168
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( false ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( false ) ; }
Distance : 9

169
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( compiler ) ; }
Distance : 6

170
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } options
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } options
Distance : 6

171
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs ) ; }
Distance : 2

172
Tree	{ compiler . traverseRoots ( compiler . traverse ( Nullability.IMPLICIT ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( Nullability.IMPLICIT ) , null ) ; }
Distance : 11

173
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) , null ) ; }
Distance : 9

174
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 13

175
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 8

176
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , false ) . traverseRoots ( root ) , null ) ; }
Distance : 9

177
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( compiler ) ; }
Distance : 3

178
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverse ( root ) , null ) ; }
Distance : 10

179
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , null ) ; }
Distance : 8

180
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Distance : 9

181
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Distance : 9

182
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverse ( externs ) ; }
Distance : 5

183
Tree	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( root , this , root ) . traverse ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 15

184
Tree	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Locale.US ) , null ) ; }
Distance : 11

185
Tree	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , true ) ) ; }
Code	{ traverse ( compiler , traverseRoots ( NUMBER_CONSTANT , true ) ) ; }
Distance : 10

186
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 9

187
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

188
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , - ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( NUMBER_CONSTANT , - ) ; }
Distance : 4

189
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Distance : 3

190
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs ) ) ; }
Distance : 11

191
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , false ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , false ) ; }
Distance : 11

192
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( root ) ; }
Distance : 6

193
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( true ) ) ; }
Distance : 10

194
Tree	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

195
Tree	{ compiler . traverseRoots ( compiler . traverse ( TernaryValue.UNKNOWN ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( TernaryValue.UNKNOWN ) , null ) ; }
Distance : 11

196
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverseRoots ( null ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverseRoots ( null ) ; }
Distance : 12

197
Tree	{ root . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ root . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

198
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 8

199
Tree	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverse ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

200
Tree	{ ( new NodeTraversal ( compiler , externs , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , externs , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

201
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , else ) ; }
Distance : 7

202
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 11

203
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( root ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( root ) ) ; }
Distance : 11

204
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } get
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } get
Distance : 6

205
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , moduleRootPaths ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , moduleRootPaths ) ; }
Distance : 7

206
Tree	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( externs , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( externs , this , root ) , root , root , root ) , null ) ; }
Distance : 15

207
Tree	{ root . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ root . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

208
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Distance : 9

209
Tree	{ ( new NodeTraversal ( compiler , compiler , root , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , true ) ) . traverseRoots ( root ) ; }
Distance : 7

210
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverseRoots ( externs ) ; }
Distance : 11

211
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , > ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , > ) ; }
Distance : 11

212
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , CHAR_CONS ) ; }
Distance : 6

213
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } options
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } options
Distance : 7

214
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Distance : 8

215
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( ! ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( ! ) ; }
Distance : 9

216
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root , root ) ) ; }
Distance : 9

217
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

218
Tree	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

219
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

220
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

221
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( externs ) ; }
Distance : 3

222
Tree	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , this , root ) , root , root , root ) , null ) ; }
Distance : 15

223
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . traverseRoots ( compiler ) ; }
Distance : 5

224
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 6

225
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , MISPLACED_ANNOTATION ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , MISPLACED_ANNOTATION ) ; }
Distance : 6

226
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 11

227
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Distance : 6

228
Tree	{ root . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ root . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

229
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Distance : 9

230
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) . traverseRoots ( externs ) ; }
Distance : 8

231
Tree	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Code	{ compiler . traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( root ) ) ; }
Distance : 12

232
Tree	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Code	{ traverseRoots ( compiler , traverseRoots ( NUMBER_CONSTANT , false ) ) ; }
Distance : 10

233
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 9

234
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , moduleRootPaths ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , moduleRootPaths ) ; }
Distance : 7

235
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , warningOtiNti ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , warningOtiNti ) ; }
Distance : 6

236
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , MISPLACED_ANNOTATION ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , MISPLACED_ANNOTATION ) ; }
Distance : 11

237
Tree	{ compiler . traverse ( compiler . traverse ( AbstractCompiler.READ_ERROR ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( AbstractCompiler.READ_ERROR ) , null ) ; }
Distance : 11

238
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Distance : 7

239
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( root ) ; }
Distance : 4

240
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , error ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , error ) ; }
Distance : 7

241
Tree	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , true ) ) ; }
Code	{ traverse ( compiler , traverse ( NUMBER_CONSTANT , true ) ) ; }
Distance : 11

242
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , false ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , false ) ; }
Distance : 11

243
Tree	{ traverse ( root , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( root , new NodeTraversal ( root , this , root ) . traverseRoots ( true ) ) ; }
Distance : 9

244
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , > ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , > ) ; }
Distance : 11

245
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , externs ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , externs ) ; }
Distance : 6

246
Tree	{ traverse ( compiler , new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) ) ; }
Distance : 8

247
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , NUMBER_CONSTANT ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , NUMBER_CONSTANT ) ; }
Distance : 11

248
Tree	{ compiler . traverseRoots ( compiler . traverse ( JSTypes.OBJLIT_CLASS_NAME ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( JSTypes.OBJLIT_CLASS_NAME ) , null ) ; }
Distance : 11

249
Tree	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , compiler ) ) . traverseRoots ( root ) ; }
Distance : 4

250
Tree	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , root , false ) ) . traverseRoots ( root ) ; }
Distance : 7

251
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , MISPLACED_ANNOTATION ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , MISPLACED_ANNOTATION ) ; }
Distance : 6

252
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( root ) ; }
Distance : 2

253
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , - ) ; }
Distance : 7

254
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs , root ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs , root ) ) ; }
Distance : 7

255
Tree	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , getLastCompiler ) ; }
Code	{ traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , getLastCompiler ) ; }
Distance : 11

256
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , error ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , error ) ; }
Distance : 7

257
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Distance : 7

258
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , else ) ; }
Distance : 6

259
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( compiler ) ; }
Distance : 11

260
Tree	{ compiler . traverseRoots ( compiler . traverse ( logStats.pass ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( logStats.pass ) , null ) ; }
Distance : 11

261
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( - ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( - ) ; }
Distance : 11

262
Tree	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

263
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , false ) ; }
Distance : 6

264
Tree	{ compiler . traverse ( compiler . traverse ( null , false ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

265
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , true ) ) . traverseRoots ( compiler ) ; }
Distance : 5

266
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , warningOtiNti ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , warningOtiNti ) ; }
Distance : 6

267
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( false ) ) ; }
Distance : 9

268
Tree	{ traverse ( root , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Code	{ traverse ( root , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Distance : 8

269
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , > ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , > ) ; }
Distance : 6

270
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , externs ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , externs ) ; }
Distance : 6

271
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Distance : 9

272
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; }
Distance : 7

273
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Distance : 5

274
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( externs , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( externs , root ) . traverseRoots ( externs ) ; }
Distance : 12

275
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Distance : 9

276
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } options
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } options
Distance : 11

277
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( externs ) ) ; }
Distance : 10

278
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , pname ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , pname ) ; }
Distance : 6

279
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( ! ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( ! ) ; }
Distance : 13

280
Tree	{ compiler . traverseRoots ( compiler . traverse ( global.root ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( global.root ) , null ) ; }
Distance : 11

281
Tree	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( root ) ; }
Distance : 3

282
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( compiler ) ; }
Distance : 7

283
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , null ) ; }
Distance : 7

284
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Distance : 8

285
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

286
Tree	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Code	{ traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root , root ) ) ; }
Distance : 8

287
Tree	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Distance : 15

288
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverse ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 12

289
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( true ) ; }
Distance : 9

290
Tree	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Distance : 15

291
Tree	{ traverse ( compiler , new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) ) ; }
Distance : 7

292
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } Node
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } Node
Distance : 11

293
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , else ) ; }
Distance : 8

294
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( false ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) . traverseRoots ( false ) ; }
Distance : 9

295
Tree	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

296
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , FindExportableNodes.EXPORT_ANNOTATION_NOT_ALLOWED ) ; }
Distance : 7

297
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverse ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverse ( externs ) ; }
Distance : 13

298
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

299
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Distance : 6

300
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } for
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } for
Distance : 11

301
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } get
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } get
Distance : 11

302
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs , root ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , root ) . traverse ( externs , root ) ) ; }
Distance : 8

303
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , null , true ) . traverseRoots ( root ) , null ) ; }
Distance : 9

304
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( externs ) ; }
Distance : 9

305
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( root ) ; }
Distance : 3

306
Tree	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 11

307
Tree	{ compiler . traverseRoots ( compiler . traverseRoots ( null , false ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverseRoots ( null , false ) , null ) ; }
Distance : 12

308
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverseRoots ( externs ) ; }
Distance : 4

309
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( compiler ) ; }
Distance : 4

310
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( compiler ) ; }
Distance : 6

311
Tree	{ compiler . traverse ( compiler . traverse ( Nullability.IMPLICIT ) , null ) ; }
Code	{ compiler . traverse ( compiler . traverse ( Nullability.IMPLICIT ) , null ) ; }
Distance : 11

312
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( root ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( root ) ; }
Distance : 10

313
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , shouldPreserve ) ; }
Distance : 6

314
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 11

315
Tree	{ root . traverseRoots ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ root . traverseRoots ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

316
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } get
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } get
Distance : 7

317
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , null ) ; }
Distance : 6

318
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } for
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } for
Distance : 7

319
Tree	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

320
Tree	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( null ) ; }
Code	{ new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) . traverseRoots ( root ) . traverseRoots ( null ) ; }
Distance : 11

321
Tree	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Code	{ new NodeTraversal ( this , STRING_CONSTANT , compiler , root ) . traverseRoots ( root , root ) . traverseRoots ( externs ) ; }
Distance : 13

322
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , pname ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , pname ) ; }
Distance : 6

323
Tree	{ compiler . traverse ( root . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverse ( root . traverse ( null , true ) , null ) ; }
Distance : 13

324
Tree	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Code	{ compiler . traverseRoots ( compiler , new NodeTraversal ( root , this , root ) . traverseRoots ( root ) ) ; }
Distance : 11

325
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , externs ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , externs ) ; }
Distance : 6

326
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } Node
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } Node
Distance : 6

327
Tree	{ ( new NodeTraversal ( compiler , externs , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , externs , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

328
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root , root ) , CHAR_CONS ) ; }
Distance : 7

329
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

330
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverseRoots ( typeInfoValidationEnabled ) ; }
Distance : 9

331
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverse ( externs ) ; }
Distance : 6

332
Tree	{ compiler . traverseRoots ( root . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverseRoots ( root . traverse ( null , true ) , null ) ; }
Distance : 13

333
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , js ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( true ) , js ) ; }
Distance : 6

334
Tree	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( new NodeTraversal ( root , this , root ) , externs , root , root ) , null ) ; }
Distance : 15

335
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

336
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } Node
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; } Node
Distance : 7

337
Tree	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( externs ) ; }
Distance : 3

338
Tree	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } for
Code	{ ( new NodeTraversal ( CHAR_CONS ) ) . traverseRoots ( root ) ; } for
Distance : 6

339
Tree	{ ( new NodeTraversal ( root , this ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverse ( root ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 500
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

1
Tree	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 6

2
Tree	Node catchBody = block . catchBody ( catchNode ) ;
Code	Node catchBody = block . catchBody ( catchNode ) ;
Distance : 5

3
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

4
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

5
Tree	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Distance : 6

6
Tree	Node catchBody = block ( Token.SHEQ ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ ) . copyInformationFrom ( catchBody ) ;
Distance : 3

7
Tree	Node catchBody = catchBody . copyInformationFrom () ;
Code	Node catchBody = catchBody . copyInformationFrom () ;
Distance : 7

8
Tree	Node catchBody = catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 8

9
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

10
Tree	Node catchBody = copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , catchBody ) ;
Distance : 7

11
Tree	Node catchBody = copyInformationFrom ( catchBody , true ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , true ) ;
Distance : 7

12
Tree	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom () ;
Distance : 7

13
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

14
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

15
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

16
Tree	Node catchBody = catchBody . block ( catchBody , TokenType.OPEN_PAREN ) ;
Code	Node catchBody = catchBody . block ( catchBody , TokenType.OPEN_PAREN ) ;
Distance : 8

17
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

18
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

19
Tree	Node catchBody = this . block . block ( catchNode ) ;
Code	Node catchBody = this . block . block ( catchNode ) ;
Distance : 5

20
Tree	Node catchBody = new Node ( catchBody , catchBody ) . block ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . block ( catchBody ) ;
Distance : 7

21
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 7

22
Tree	Node catchBody = block ( catchNode ) . block () ;
Code	Node catchBody = block ( catchNode ) . block () ;
Distance : 5

23
Tree	Node catchBody = block ( catchBody , catchBody , true ) ;
Code	Node catchBody = block ( catchBody , catchBody , true ) ;
Distance : 7

24
Tree	Node catchBody = block ( catchBody ) . block ( currentScript.defaultExportLocalName ) ;
Code	Node catchBody = block ( catchBody ) . block ( currentScript.defaultExportLocalName ) ;
Distance : 4

25
Tree	Node catchBody = block ( catchBody ) . block ( Nullability.IMPLICIT ) ;
Code	Node catchBody = block ( catchBody ) . block ( Nullability.IMPLICIT ) ;
Distance : 4

26
Tree	Node catchBody = block ( catchBody ) . block ( FeatureSet.ES6 ) ;
Code	Node catchBody = block ( catchBody ) . block ( FeatureSet.ES6 ) ;
Distance : 4

27
Tree	Node catchBody = this . catchBody . block ( catchBody , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 8

28
Tree	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Distance : 2

29
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

30
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

31
Tree	Node catchBody = block . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = block . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 8

32
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

33
Tree	Node catchBody = block ( superclassName ) . block ( catchBody ) ;
Code	Node catchBody = block ( superclassName ) . block ( catchBody ) ;
Distance : 4

34
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

35
Tree	Node catchBody = catchBody ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchBody ) ;
Distance : 6

36
Tree	Node catchBody = this . catchBody . block () . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . block ( catchBody ) ;
Distance : 8

37
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

38
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Distance : 5

39
Tree	Node catchBody = block ( functionContext.function ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function ) . copyInformationFrom ( catchBody ) ;
Distance : 3

40
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

41
Tree	Node catchBody = catchBody . block ( catchBody , Feature.ASYNC_FUNCTIONS ) ;
Code	Node catchBody = catchBody . block ( catchBody , Feature.ASYNC_FUNCTIONS ) ;
Distance : 8

42
Tree	Node catchBody = this . block . block () ;
Code	Node catchBody = this . block . block () ;
Distance : 8

43
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 10

44
Tree	Node catchBody = block ( catchBody , TypeInferenceMode.NEITHER ) ;
Code	Node catchBody = block ( catchBody , TypeInferenceMode.NEITHER ) ;
Distance : 7

45
Tree	Node catchBody = block ( catchNode , copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode , copyInformationFrom ( catchBody ) ) ;
Distance : 5

46
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

47
Tree	Node catchBody = this . catchBody . copyInformationFrom () ;
Code	Node catchBody = this . catchBody . copyInformationFrom () ;
Distance : 7

48
Tree	Node catchBody = block ( catchNode , ) ) ;
Code	Node catchBody = block ( catchNode , ) ) ;
Distance : 6

49
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

50
Tree	Node catchBody = block ( functionContext.function , TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function , TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Distance : 6

51
Tree	Node catchBody = copyInformationFrom () ;
Code	Node catchBody = copyInformationFrom () ;
Distance : 8

52
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

53
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

54
Tree	Node catchBody = block ( catchBody , TokenType.OPEN_PAREN ) ;
Code	Node catchBody = block ( catchBody , TokenType.OPEN_PAREN ) ;
Distance : 7

55
Tree	Node catchBody = block ( functionContext.function , Feature.STRING_CONTINUATION ) . block ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function , Feature.STRING_CONTINUATION ) . block ( catchBody ) ;
Distance : 6

56
Tree	Node catchBody = copyInformationFrom ( catchBody , this . catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , this . catchBody ) ;
Distance : 7

57
Tree	Node catchBody = new Node () . Node ( catchBody ) ;
Code	Node catchBody = new Node () . Node ( catchBody ) ;
Distance : 6

58
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

59
Tree	Node catchBody = new Node () . block ( catchNode ) ;
Code	Node catchBody = new Node () . block ( catchNode ) ;
Distance : 5

60
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

61
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Distance : 8

62
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

63
Tree	Node catchBody = block ( catchNode , Node ) ;
Code	Node catchBody = block ( catchNode , Node ) ;
Distance : 6

64
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

65
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

66
Tree	Node catchBody = block ( functionContext.function , Node ) . block ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function , Node ) . block ( catchBody ) ;
Distance : 6

67
Tree	Node catchBody = catchBody . block () . block ( catchBody ) ;
Code	Node catchBody = catchBody . block () . block ( catchBody ) ;
Distance : 6

68
Tree	Node catchBody = catchBody . block ( catchBody , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	Node catchBody = catchBody . block ( catchBody , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 8

69
Tree	Node catchBody = this . block . block () ;
Code	Node catchBody = this . block . block () ;
Distance : 8

70
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

71
Tree	Node catchBody = block ( catchNode , catchBody , true ) ;
Code	Node catchBody = block ( catchNode , catchBody , true ) ;
Distance : 6

72
Tree	Node catchBody = this . catchBody . block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 8

73
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

74
Tree	Node catchBody = catchBody . block ( catchBody , false ) ;
Code	Node catchBody = catchBody . block ( catchBody , false ) ;
Distance : 8

75
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

76
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

77
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

78
Tree	Node catchBody = block . block ( this , catchNode ) ;
Code	Node catchBody = block . block ( this , catchNode ) ;
Distance : 7

79
Tree	Node catchBody = catchBody . block ( block ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) ) ;
Distance : 8

80
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) ) ;
Distance : 8

81
Tree	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom () ;
Distance : 7

82
Tree	Node catchBody = block ( STRING_CONSTANT ) . block ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . block ( catchBody ) ;
Distance : 4

83
Tree	Node catchBody = this . catchBody . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block ( catchBody ) ;
Distance : 6

84
Tree	Node catchBody = catchBody ( catchBody , ) ) ;
Code	Node catchBody = catchBody ( catchBody , ) ) ;
Distance : 7

85
Tree	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

86
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

87
Tree	Node catchBody = block . block ( catchNode , catchBody ) ;
Code	Node catchBody = block . block ( catchNode , catchBody ) ;
Distance : 7

88
Tree	Node catchBody = block ( catchNode ) . block () ;
Code	Node catchBody = block ( catchNode ) . block () ;
Distance : 5

89
Tree	Node catchBody = copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) ;
Distance : 5

90
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

91
Tree	Node catchBody = this . block . block () ;
Code	Node catchBody = this . block . block () ;
Distance : 8

92
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

93
Tree	Node catchBody = block ( catchBody , catchNode , false ) ;
Code	Node catchBody = block ( catchBody , catchNode , false ) ;
Distance : 7

94
Tree	Node catchBody = catchBody . block ( this , catchNode ) ;
Code	Node catchBody = catchBody . block ( this , catchNode ) ;
Distance : 7

95
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

96
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

97
Tree	Node catchBody = block . block ( this , catchBody ) ;
Code	Node catchBody = block . block ( this , catchBody ) ;
Distance : 8

98
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

99
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

100
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

101
Tree	Node catchBody = new Node () . block ( catchBody ) ;
Code	Node catchBody = new Node () . block ( catchBody ) ;
Distance : 6

102
Tree	Node catchBody = block ( catchBody ) . block ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . block ( STRING_CONSTANT ) ;
Distance : 4

103
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

104
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 7

105
Tree	Node catchBody = catchBody . block ( catchBody , ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , ) , catchBody ) ;
Distance : 9

106
Tree	Node catchBody = block . block ( this , catchNode ) ;
Code	Node catchBody = block . block ( this , catchNode ) ;
Distance : 7

107
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

108
Tree	Node catchBody = new Node ( catchBody , ) ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , ) ) . copyInformationFrom ( catchBody ) ;
Distance : 6

109
Tree	Node catchBody = this . catchBody . copyInformationFrom () ;
Code	Node catchBody = this . catchBody . copyInformationFrom () ;
Distance : 7

110
Tree	Node catchBody = this . catchBody . block () ;
Code	Node catchBody = this . catchBody . block () ;
Distance : 8

111
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

112
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

113
Tree	Node catchBody = block ( functionContext.function , NodeUtil.isNameDeclaration ) . block ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function , NodeUtil.isNameDeclaration ) . block ( catchBody ) ;
Distance : 6

114
Tree	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Distance : 7

115
Tree	Node catchBody = block ( Token.SHEQ , LanguageMode.ECMASCRIPT5 ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , LanguageMode.ECMASCRIPT5 ) . block ( catchBody ) ;
Distance : 6

116
Tree	Node catchBody = block . copyInformationFrom () ;
Code	Node catchBody = block . copyInformationFrom () ;
Distance : 7

117
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

118
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

119
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

120
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

122
Tree	Node catchBody = this . block . block ( catchNode ) ;
Code	Node catchBody = this . block . block ( catchNode ) ;
Distance : 5

123
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchBody ) ;
Distance : 3

124
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

125
Tree	Node catchBody = copyInformationFrom ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = copyInformationFrom ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

126
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

127
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

128
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

129
Tree	Node catchBody = this . catchBody . block ( catchNode , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = this . catchBody . block ( catchNode , NodeUtil.isNameDeclaration ) ;
Distance : 7

130
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

131
Tree	Node catchBody = block ( functionContext.function ) . block ( catchBody ) ;
Code	Node catchBody = block ( functionContext.function ) . block ( catchBody ) ;
Distance : 4

132
Tree	Node catchBody = this . catchBody . block ( catchBody , Node ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , Node ) ;
Distance : 8

133
Tree	Node catchBody = block ( STRING_CONSTANT ) . block ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . block ( catchNode ) ;
Distance : 3

134
Tree	Node catchBody = block ( Token.SHEQ , Node ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , Node ) . copyInformationFrom ( catchBody ) ;
Distance : 5

135
Tree	Node catchBody = block () . block ( catchBody ) ;
Code	Node catchBody = block () . block ( catchBody ) ;
Distance : 6

136
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

137
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

138
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

139
Tree	Node catchBody = this . catchBody . block () ;
Code	Node catchBody = this . catchBody . block () ;
Distance : 8

140
Tree	Node catchBody = block ( catchBody ) . block ( TokenType.OPEN_ANGLE ) ;
Code	Node catchBody = block ( catchBody ) . block ( TokenType.OPEN_ANGLE ) ;
Distance : 4

141
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

142
Tree	Node catchBody = block ( catchBody ) . block ( Token.ROOT ) ;
Code	Node catchBody = block ( catchBody ) . block ( Token.ROOT ) ;
Distance : 4

143
Tree	Node catchBody = catchBody . block ( catchBody , Node ) ;
Code	Node catchBody = catchBody . block ( catchBody , Node ) ;
Distance : 8

144
Tree	Node catchBody = new Node ( catchNode , ) ) . block () ;
Code	Node catchBody = new Node ( catchNode , ) ) . block () ;
Distance : 8

145
Tree	Node catchBody = block ( catchNode , ) ) ;
Code	Node catchBody = block ( catchNode , ) ) ;
Distance : 6

146
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

147
Tree	Node catchBody = block ( block ( catchNode ) ) ;
Code	Node catchBody = block ( block ( catchNode ) ) ;
Distance : 6

148
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

149
Tree	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

150
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) ) ;
Distance : 7

151
Tree	Node catchBody = this . catchBody . block ( catchBody , Feature.ASYNC_FUNCTIONS ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , Feature.ASYNC_FUNCTIONS ) ;
Distance : 8

152
Tree	Node catchBody = block ( block ( catchBody ) ) ;
Code	Node catchBody = block ( block ( catchBody ) ) ;
Distance : 7

153
Tree	Node catchBody = this . catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 8

154
Tree	Node catchBody = new Node ( catchNode , ) ) . block ( catchBody ) ;
Code	Node catchBody = new Node ( catchNode , ) ) . block ( catchBody ) ;
Distance : 6

155
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) ) ;
Distance : 7

156
Tree	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

157
Tree	Node catchBody = new Node ( catchBody , ) ) . block () ;
Code	Node catchBody = new Node ( catchBody , ) ) . block () ;
Distance : 9

158
Tree	Node catchBody = catchBody . block ( catchBody , TypeInferenceMode.NEITHER ) ;
Code	Node catchBody = catchBody . block ( catchBody , TypeInferenceMode.NEITHER ) ;
Distance : 8

159
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

160
Tree	Node catchBody = this . block . block ( catchBody ) ;
Code	Node catchBody = this . block . block ( catchBody ) ;
Distance : 6

161
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

162
Tree	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

163
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) ) ;
Distance : 6

164
Tree	Node catchBody = catchBody ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . block ( catchBody ) ;
Distance : 4

165
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom () ;
Distance : 8

166
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

167
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 5

168
Tree	Node catchBody = catchBody . block ( catchNode , true ) ;
Code	Node catchBody = catchBody . block ( catchNode , true ) ;
Distance : 7

169
Tree	Node catchBody = block . block ( catchNode , true ) ;
Code	Node catchBody = block . block ( catchNode , true ) ;
Distance : 7

170
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

171
Tree	Node catchBody = block . catchBody ( catchBody ) ;
Code	Node catchBody = block . catchBody ( catchBody ) ;
Distance : 6

172
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Distance : 2

173
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

174
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 6

175
Tree	Node catchBody = block ( metadata.superClassNameNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( metadata.superClassNameNode ) . block ( catchBody ) ;
Distance : 4

176
Tree	Node catchBody = block ( catchBody ) . block ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . block ( STRING_CONSTANT ) ;
Distance : 4

177
Tree	Node catchBody = this . catchBody . block ( catchNode ) ;
Code	Node catchBody = this . catchBody . block ( catchNode ) ;
Distance : 5

178
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

179
Tree	Node catchBody = catchBody ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode , catchBody ) ;
Distance : 7

180
Tree	Node catchBody = block ( catchBody , catchNode , true ) ;
Code	Node catchBody = block ( catchBody , catchNode , true ) ;
Distance : 7

181
Tree	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Distance : 7

182
Tree	Node catchBody = catchBody . block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . block ( catchBody ) ;
Distance : 6

183
Tree	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom () ;
Distance : 7

184
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

185
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

186
Tree	Node catchBody = block . block ( block ( catchNode ) ) ;
Code	Node catchBody = block . block ( block ( catchNode ) ) ;
Distance : 7

187
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

188
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchNode ) ) ;
Distance : 5

189
Tree	Node catchBody = block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) ) ;
Distance : 6

190
Tree	Node catchBody = catchBody . catchBody ( catchNode ) ;
Code	Node catchBody = catchBody . catchBody ( catchNode ) ;
Distance : 5

191
Tree	Node catchBody = block ( catchNode ( catchNode ) ) ;
Code	Node catchBody = block ( catchNode ( catchNode ) ) ;
Distance : 5

192
Tree	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Distance : 6

193
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 2

194
Tree	Node catchBody = block . block ( block ( catchBody ) ) ;
Code	Node catchBody = block . block ( block ( catchBody ) ) ;
Distance : 8

195
Tree	Node catchBody = block . block ( catchNode ( catchBody ) ) ;
Code	Node catchBody = block . block ( catchNode ( catchBody ) ) ;
Distance : 8

196
Tree	Node catchBody = block ( catchNode , catchNode ) ;
Code	Node catchBody = block ( catchNode , catchNode ) ;
Distance : 5

197
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 6

198
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Distance : 3

199
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

200
Tree	Node catchBody = block ( catchNode , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody , catchBody ) ;
Distance : 7

201
Tree	Node catchBody = block . block ( copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchBody ) ) ;
Distance : 7

202
Tree	Node catchBody = catchBody . block ( catchNode , catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchNode , catchBody ) ;
Distance : 8

203
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 6

204
Tree	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

205
Tree	Node catchBody = block ( Token.SHEQ , TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Distance : 6

206
Tree	Node catchBody = newName . block ( catchBody ) ;
Code	Node catchBody = newName . block ( catchBody ) ;
Distance : 6

207
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

208
Tree	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Distance : 6

209
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

210
Tree	Node catchBody = block ( catchBody ) . block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody , catchBody ) ;
Distance : 6

211
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

212
Tree	Node catchBody = block ( catchBody ) . block () ;
Code	Node catchBody = block ( catchBody ) . block () ;
Distance : 6

213
Tree	Node catchBody = catchBody . block ( catchBody , false ) ;
Code	Node catchBody = catchBody . block ( catchBody , false ) ;
Distance : 8

214
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

215
Tree	Node catchBody = block ( catchBody , ) ) ;
Code	Node catchBody = block ( catchBody , ) ) ;
Distance : 7

216
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

217
Tree	Node catchBody = block . block ( this , catchBody ) ;
Code	Node catchBody = block . block ( this , catchBody ) ;
Distance : 8

218
Tree	Node catchBody = this . block . copyInformationFrom () ;
Code	Node catchBody = this . block . copyInformationFrom () ;
Distance : 7

219
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

220
Tree	Node catchBody = catchBody . block ( Feature.DEFAULT_PARAMETERS ) ;
Code	Node catchBody = catchBody . block ( Feature.DEFAULT_PARAMETERS ) ;
Distance : 6

221
Tree	Node catchBody = catchBody . block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . block ( catchNode ) ;
Distance : 5

222
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 7

223
Tree	Node catchBody = block . block ( catchNode , false ) ;
Code	Node catchBody = block . block ( catchNode , false ) ;
Distance : 7

224
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

225
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

226
Tree	Node catchBody = block . block ( catchBody , ) ) ;
Code	Node catchBody = block . block ( catchBody , ) ) ;
Distance : 8

227
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

228
Tree	Node catchBody = block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	Node catchBody = block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 7

229
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

230
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

231
Tree	Node catchBody = block ( block ( catchBody ) ) ;
Code	Node catchBody = block ( block ( catchBody ) ) ;
Distance : 7

232
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

233
Tree	Node catchBody = block ( catchBody , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	Node catchBody = block ( catchBody , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 7

234
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

235
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

236
Tree	Node catchBody = catchBody . block ( this , catchBody ) ;
Code	Node catchBody = catchBody . block ( this , catchBody ) ;
Distance : 8

237
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

238
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

239
Tree	Node catchBody = block ( catchNode , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = block ( catchNode , NodeUtil.isNameDeclaration ) ;
Distance : 6

240
Tree	Node catchBody = catchBody . block ( block ( catchNode ) ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) ) ;
Distance : 7

241
Tree	Node catchBody = catchBody . block ( catchBody , ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , ) , catchBody ) ;
Distance : 9

242
Tree	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Distance : 7

243
Tree	Node catchBody = catchBody . block ( this , catchBody ) ;
Code	Node catchBody = catchBody . block ( this , catchBody ) ;
Distance : 8

244
Tree	Node catchBody = block ( catchNode , catchBody , catchBody , block ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody , block ) ;
Distance : 7

245
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

246
Tree	Node catchBody = catchBody . block ( Token.SHEQ ) ;
Code	Node catchBody = catchBody . block ( Token.SHEQ ) ;
Distance : 6

247
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

248
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

249
Tree	Node catchBody = block ( catchNode , true ) ;
Code	Node catchBody = block ( catchNode , true ) ;
Distance : 6

250
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

251
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) ) ;
Distance : 6

252
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

253
Tree	Node catchBody = block . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

254
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

255
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 2

256
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 6

257
Tree	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Distance : 6

258
Tree	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Distance : 7

259
Tree	Node catchBody = block ( catchBody ) . block () ;
Code	Node catchBody = block ( catchBody ) . block () ;
Distance : 6

260
Tree	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Distance : 7

261
Tree	Node catchBody = this . block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . block . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

262
Tree	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Distance : 7

263
Tree	Node catchBody = copyInformationFrom ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

264
Tree	Node catchBody = catchBody . block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ) . block ( catchBody ) ;
Distance : 5

265
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . block ( catchBody ) ;
Distance : 6

266
Tree	Node catchBody = catchBody ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = catchBody ( catchBody ) . block ( catchNode ) ;
Distance : 3

267
Tree	Node catchBody = block ( Token.SHEQ , Node ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , Node ) . block ( catchBody ) ;
Distance : 6

268
Tree	Node catchBody = block ( catchBody , catchNode , catchBody , block ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody , block ) ;
Distance : 8

269
Tree	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchNode ) ;
Distance : 4

270
Tree	Node catchBody = new Node ( catchBody , catchNode ) . block ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . block ( catchBody ) ;
Distance : 6

271
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 5

272
Tree	Node catchBody = copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) ;
Distance : 6

273
Tree	Node catchBody = block ( Token.SHEQ ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ ) . block ( catchBody ) ;
Distance : 4

274
Tree	Node catchBody = catchBody . block ( block ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) , catchBody ) ;
Distance : 9

275
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () . block ( catchBody ) ;
Distance : 6

276
Tree	Node catchBody = copyInformationFrom ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

277
Tree	Node catchBody = block ( catchBody ) . block ( JSTypeNative.VOID_TYPE ) ;
Code	Node catchBody = block ( catchBody ) . block ( JSTypeNative.VOID_TYPE ) ;
Distance : 4

278
Tree	Node catchBody = new Node ( catchNode , catchBody ) . block () ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . block () ;
Distance : 8

279
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 4

280
Tree	Node catchBody = catchBody . catchBody ( catchNode ) ;
Code	Node catchBody = catchBody . catchBody ( catchNode ) ;
Distance : 5

281
Tree	Node catchBody = block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( block ( catchBody ) , catchBody ) ;
Distance : 7

282
Tree	Node catchBody = block ( block ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( block ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 10

283
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchBody ) ;
Distance : 8

284
Tree	Node catchBody = block ( catchBody ) . block ( Node ) ;
Code	Node catchBody = block ( catchBody ) . block ( Node ) ;
Distance : 4

285
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

286
Tree	Node catchBody = catchBody . block ( Compiler.PARSING_PASS_NAME ) ;
Code	Node catchBody = catchBody . block ( Compiler.PARSING_PASS_NAME ) ;
Distance : 6

287
Tree	Node catchBody = block ( block ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( block ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 11

288
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

289
Tree	Node catchBody = catchBody . block ( Token.LABEL_NAME ) ;
Code	Node catchBody = catchBody . block ( Token.LABEL_NAME ) ;
Distance : 6

290
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

291
Tree	Node catchBody = block ( Token.SHEQ , Feature.STRING_CONTINUATION ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , Feature.STRING_CONTINUATION ) . block ( catchBody ) ;
Distance : 6

292
Tree	Node catchBody = block ( block ( catchNode ) , catchBody ) ;
Code	Node catchBody = block ( block ( catchNode ) , catchBody ) ;
Distance : 7

293
Tree	Node catchBody = block ( catchBody , catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , catchNode ( catchBody ) ) ;
Distance : 7

294
Tree	Node catchBody = block ( Token.SHEQ ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ ) . copyInformationFrom ( catchBody ) ;
Distance : 3

295
Tree	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Distance : 7

296
Tree	Node catchBody = block ( catchNode , false ) ;
Code	Node catchBody = block ( catchNode , false ) ;
Distance : 6

297
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

298
Tree	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

299
Tree	Node catchBody = block ( TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Code	Node catchBody = block ( TokenType.OPEN_PAREN ) . block ( catchBody ) ;
Distance : 4

300
Tree	Node catchBody = block ( catchBody ) . block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode , catchBody ) ;
Distance : 5

301
Tree	Node catchBody = child.parent . block ( catchBody ) ;
Code	Node catchBody = child.parent . block ( catchBody ) ;
Distance : 6

302
Tree	Node catchBody = block . block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( block ( catchBody ) , catchBody ) ;
Distance : 9

303
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

304
Tree	Node catchBody = block ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = block ( catchNode ( catchNode ) , catchBody ) ;
Distance : 6

305
Tree	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody , catchBody ) ;
Distance : 6

306
Tree	Node catchBody = block ( catchBody , Node ) ;
Code	Node catchBody = block ( catchBody , Node ) ;
Distance : 7

307
Tree	Node catchBody = block ( catchBody , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	Node catchBody = block ( catchBody , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 7

308
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

309
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Distance : 8

310
Tree	Node catchBody = catchBody . block ( JSTypeNative.NULL_VOID ) ;
Code	Node catchBody = catchBody . block ( JSTypeNative.NULL_VOID ) ;
Distance : 6

311
Tree	Node catchBody = catchBody . block ( NodeUtil.JSC_PROPERTY_NAME_FN ) ;
Code	Node catchBody = catchBody . block ( NodeUtil.JSC_PROPERTY_NAME_FN ) ;
Distance : 6

312
Tree	Node catchBody = block ( currentScript.exportsToInline ) . block ( catchBody ) ;
Code	Node catchBody = block ( currentScript.exportsToInline ) . block ( catchBody ) ;
Distance : 4

313
Tree	Node catchBody = catchBody . block ( currentScript.defaultExportLocalName ) ;
Code	Node catchBody = catchBody . block ( currentScript.defaultExportLocalName ) ;
Distance : 6

314
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 4

315
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

316
Tree	Node catchBody = this . catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Distance : 8

317
Tree	Node catchBody = catchBody . copyInformationFrom ( this , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( this , catchBody ) ;
Distance : 7

318
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchNode . block () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchNode . block () ) ;
Distance : 10

319
Tree	Node catchBody = this . catchBody . block ( catchBody , TokenType.OPEN_PAREN ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , TokenType.OPEN_PAREN ) ;
Distance : 8

320
Tree	Node catchBody = block ( catchBody ) . block () . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block () . block ( catchBody ) ;
Distance : 7

321
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) ) ;
Distance : 5

322
Tree	Node catchBody = block . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

323
Tree	Node catchBody = block . block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) . block ( catchBody ) ;
Distance : 6

324
Tree	Node catchBody = block ( STRING_CONSTANT ) . block ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . block ( catchNode ) ;
Distance : 3

325
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

326
Tree	Node catchBody = block ( Token.NULL ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.NULL ) . block ( catchBody ) ;
Distance : 4

327
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

328
Tree	Node catchBody = metadata.superClassNameNode . block ( catchBody ) ;
Code	Node catchBody = metadata.superClassNameNode . block ( catchBody ) ;
Distance : 6

329
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

330
Tree	Node catchBody = catchBody . catchBody ( catchBody ) ;
Code	Node catchBody = catchBody . catchBody ( catchBody ) ;
Distance : 6

331
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

332
Tree	Node catchBody = catchBody . block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 4

333
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

334
Tree	Node catchBody = block ( catchBody , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = block ( catchBody , NodeUtil.isNameDeclaration ) ;
Distance : 7

335
Tree	Node catchBody = currentScript . block ( catchBody ) ;
Code	Node catchBody = currentScript . block ( catchBody ) ;
Distance : 6

336
Tree	Node catchBody = this . catchBody . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block ( catchBody ) ;
Distance : 6

337
Tree	Node catchBody = block ( catchNode , copyInformationFrom ( catchNode ) ) ;
Code	Node catchBody = block ( catchNode , copyInformationFrom ( catchNode ) ) ;
Distance : 4

338
Tree	Node catchBody = block . block () . block ( catchBody ) ;
Code	Node catchBody = block . block () . block ( catchBody ) ;
Distance : 6

339
Tree	Node catchBody = this . block . block () . block ( catchBody ) ;
Code	Node catchBody = this . block . block () . block ( catchBody ) ;
Distance : 8

340
Tree	Node catchBody = this . catchBody . block () ;
Code	Node catchBody = this . catchBody . block () ;
Distance : 8

341
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

342
Tree	Node catchBody = stmts . block ( catchBody ) ;
Code	Node catchBody = stmts . block ( catchBody ) ;
Distance : 6

343
Tree	Node catchBody = currentScript.isModule . block ( catchBody ) ;
Code	Node catchBody = currentScript.isModule . block ( catchBody ) ;
Distance : 6

344
Tree	Node catchBody = block ( catchBody , true ) ;
Code	Node catchBody = block ( catchBody , true ) ;
Distance : 7

345
Tree	Node catchBody = block ( catchBody ) . block ( TernaryValue.UNKNOWN ) ;
Code	Node catchBody = block ( catchBody ) . block ( TernaryValue.UNKNOWN ) ;
Distance : 4

346
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

347
Tree	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchBody , NUMBER_CONSTANT ) ;
Distance : 7

348
Tree	Node catchBody = newName . block ( catchNode ) ;
Code	Node catchBody = newName . block ( catchNode ) ;
Distance : 5

349
Tree	Node catchBody = block ( Token.SHEQ , NodeUtil.isNameDeclaration ) . block ( catchBody ) ;
Code	Node catchBody = block ( Token.SHEQ , NodeUtil.isNameDeclaration ) . block ( catchBody ) ;
Distance : 6

350
Tree	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 10

351
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , copyInformationFrom ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , copyInformationFrom ) ;
Distance : 7

352
Tree	Node catchBody = block () ;
Code	Node catchBody = block () ;
Distance : 9

353
Tree	Node catchBody = catchBody . block ( catchBody , true ) ;
Code	Node catchBody = catchBody . block ( catchBody , true ) ;
Distance : 8

354
Tree	Node catchBody = this . catchBody . block ( catchBody , TypeInferenceMode.NEITHER ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , TypeInferenceMode.NEITHER ) ;
Distance : 8

355
Tree	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 6

356
Tree	Node catchBody = this . catchBody . block ( catchBody ) ;
Code	Node catchBody = this . catchBody . block ( catchBody ) ;
Distance : 6

357
Tree	Node catchBody = block . block ( catchBody , false ) ;
Code	Node catchBody = block . block ( catchBody , false ) ;
Distance : 8

358
Tree	Node catchBody = catchBody . block ( JSTypes.OBJLIT_CLASS_NAME ) ;
Code	Node catchBody = catchBody . block ( JSTypes.OBJLIT_CLASS_NAME ) ;
Distance : 6

359
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

360
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

361
Tree	Node catchBody = block ( catchBody , false ) ;
Code	Node catchBody = block ( catchBody , false ) ;
Distance : 7

362
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

363
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Distance : 8

364
Tree	Node catchBody = block ( catchNode ) . block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody , catchBody ) ;
Distance : 5

365
Tree	Node catchBody = block ( catchNode , catchNode ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode , catchNode ( catchBody ) ) ;
Distance : 6

366
Tree	Node catchBody = block ( catchBody , Feature.STRING_CONTINUATION ) ;
Code	Node catchBody = block ( catchBody , Feature.STRING_CONTINUATION ) ;
Distance : 7

367
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Distance : 8

368
Tree	Node catchBody = block ( STRING_CONSTANT ) . block ( catchBody ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . block ( catchBody ) ;
Distance : 4

369
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 4

370
Tree	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block () . copyInformationFrom ( catchBody ) ;
Distance : 5

371
Tree	Node catchBody = TypeInferenceMode.DISABLED . block ( catchBody ) ;
Code	Node catchBody = TypeInferenceMode.DISABLED . block ( catchBody ) ;
Distance : 6

372
Tree	Node catchBody = catchBody . block ( block ( catchBody ) , copyInformationFrom ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) , copyInformationFrom ) ;
Distance : 9

373
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

374
Tree	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 6

375
Tree	Node catchBody = copyInformationFrom () ;
Code	Node catchBody = copyInformationFrom () ;
Distance : 8

376
Tree	Node catchBody = catchBody . block ( catchBody , true ) ;
Code	Node catchBody = catchBody . block ( catchBody , true ) ;
Distance : 8

377
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

378
Tree	Node catchBody = block ( catchNode , catchBody , false ) ;
Code	Node catchBody = block ( catchNode , catchBody , false ) ;
Distance : 6

379
Tree	Node catchBody = this . catchBody . block ( catchBody , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	Node catchBody = this . catchBody . block ( catchBody , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

380
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

381
Tree	Node catchBody = catchBody . block ( this , catchNode ) ;
Code	Node catchBody = catchBody . block ( this , catchNode ) ;
Distance : 7

382
Tree	Node catchBody = catchBody . block ( JSTypeNative.NO_OBJECT_TYPE ) ;
Code	Node catchBody = catchBody . block ( JSTypeNative.NO_OBJECT_TYPE ) ;
Distance : 6

383
Tree	Node catchBody = block . block ( catchBody , true ) ;
Code	Node catchBody = block . block ( catchBody , true ) ;
Distance : 8

384
Tree	Node catchBody = block . block () ;
Code	Node catchBody = block . block () ;
Distance : 8

385
Tree	Node catchBody = catchBody ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

386
Tree	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = catchBody . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

387
Tree	Node catchBody = catchBody . block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 4

388
Tree	Node catchBody = block ( catchNode ( catchBody ) , copyInformationFrom ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , copyInformationFrom ) ;
Distance : 6

389
Tree	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody ) ;
Distance : 7

390
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

391
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( STRING_CONSTANT ) ;
Distance : 3

392
Tree	Node catchBody = block ( catchBody , ) , copyInformationFrom , catchBody ) ;
Code	Node catchBody = block ( catchBody , ) , copyInformationFrom , catchBody ) ;
Distance : 6

393
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

394
Tree	Node catchBody = block ( catchBody , catchBody , false ) ;
Code	Node catchBody = block ( catchBody , catchBody , false ) ;
Distance : 7

395
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

396
Tree	Node catchBody = catchBody ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody ) ;
Distance : 7

397
Tree	Node catchBody = catchBody . block ( commonTypes.NULL_OR_UNDEFINED ) ;
Code	Node catchBody = catchBody . block ( commonTypes.NULL_OR_UNDEFINED ) ;
Distance : 6

398
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 8

399
Tree	Node catchBody = block ( catchNode ) . block ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . block ( STRING_CONSTANT ) ;
Distance : 3

400
Tree	Node catchBody = catchBody . block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody , catchBody ) ;
Distance : 8

401
Tree	Node catchBody = catchBody . block ( this , catchBody ) ;
Code	Node catchBody = catchBody . block ( this , catchBody ) ;
Distance : 8

402
Tree	Node catchBody = block ( catchBody , ) , false ) ;
Code	Node catchBody = block ( catchBody , ) , false ) ;
Distance : 7

403
Tree	Node catchBody = catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

404
Tree	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchBody ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 11

405
Tree	Node catchBody = catchBody . copyInformationFrom () ;
Code	Node catchBody = catchBody . copyInformationFrom () ;
Distance : 7

406
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

407
Tree	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Distance : 7

408
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

409
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

410
Tree	Node catchBody = block . block ( catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody ) ;
Distance : 8

411
Tree	Node catchBody = this . catchBody . block ( catchNode ) ;
Code	Node catchBody = this . catchBody . block ( catchNode ) ;
Distance : 5

412
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

413
Tree	Node catchBody = new Node ( catchBody , catchBody ) . block () ;
Code	Node catchBody = new Node ( catchBody , catchBody ) . block () ;
Distance : 9

414
Tree	Node catchBody = this . block . block ( catchBody ) ;
Code	Node catchBody = this . block . block ( catchBody ) ;
Distance : 6

415
Tree	Node catchBody = block ( catchBody ) . block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody , catchNode ) ;
Distance : 5

416
Tree	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Distance : 3

417
Tree	Node catchBody = this . block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . block . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

418
Tree	Node catchBody = block ( catchNode , catchNode , false ) ;
Code	Node catchBody = block ( catchNode , catchNode , false ) ;
Distance : 6

419
Tree	Node catchBody = block . block ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchNode , catchBody , catchBody ) ;
Distance : 8

420
Tree	Node catchBody = block ( catchNode ) . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

421
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchNode ) ;
Distance : 4

422
Tree	Node catchBody = catchBody ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = catchBody ( catchNode ) . block ( catchBody ) ;
Distance : 3

423
Tree	Node catchBody = block . block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchNode , catchBody ) ;
Distance : 9

424
Tree	Node catchBody = block ( catchNode , catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchNode , catchBody ) ;
Distance : 6

425
Tree	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody , catchBody ) ;
Distance : 9

426
Tree	Node catchBody = block () . block ( catchNode ) ;
Code	Node catchBody = block () . block ( catchNode ) ;
Distance : 5

427
Tree	Node catchBody = catchBody ( catchBody ) ; TypeInferenceMode.CHECKED
Code	Node catchBody = catchBody ( catchBody ) ; TypeInferenceMode.CHECKED
Distance : 8

428
Tree	Node catchBody = block () ; get
Code	Node catchBody = block () ; get
Distance : 10

429
Tree	Node catchBody = catchBody ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode ) ;
Distance : 6

430
Tree	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody , catchBody ) ;
Distance : 7

431
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( TokenType.OPEN_ANGLE ) ;
Distance : 3

432
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

433
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

434
Tree	Node catchBody = block ( catchNode , true ) ;
Code	Node catchBody = block ( catchNode , true ) ;
Distance : 6

435
Tree	Node catchBody = catchBody ( catchNode , catchNode ) ;
Code	Node catchBody = catchBody ( catchNode , catchNode ) ;
Distance : 5

436
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

437
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , ) ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , ) ) ;
Distance : 5

438
Tree	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block () . copyInformationFrom ( catchBody ) ;
Distance : 6

439
Tree	Node catchBody = block ( catchNode ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Code	Node catchBody = block ( catchNode ( catchNode ) , STRING_CONSTANT , catchBody . block () ) ;
Distance : 10

440
Tree	Node catchBody = catchBody . block ( catchNode , ) ) ;
Code	Node catchBody = catchBody . block ( catchNode , ) ) ;
Distance : 7

441
Tree	Node catchBody = copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) ;
Distance : 6

442
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , catchBody ) ;
Distance : 8

443
Tree	Node catchBody = catchBody . block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	Node catchBody = catchBody . block ( catchBody , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 8

444
Tree	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Code	Node catchBody = block ( catchNode , NUMBER_CONSTANT ) ;
Distance : 6

445
Tree	Node catchBody = catchBody . block () . block ( catchNode ) ;
Code	Node catchBody = catchBody . block () . block ( catchNode ) ;
Distance : 5

446
Tree	Node catchBody = catchBody ( catchBody , catchNode , copyInformationFrom ) ;
Code	Node catchBody = catchBody ( catchBody , catchNode , copyInformationFrom ) ;
Distance : 7

447
Tree	Node catchBody = catchBody ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

448
Tree	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , copyInformationFrom ( catchBody ) ) ;
Distance : 6

449
Tree	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 4

450
Tree	Node catchBody = this . catchBody . block () . block ( catchNode ) ;
Code	Node catchBody = this . catchBody . block () . block ( catchNode ) ;
Distance : 7

451
Tree	Node catchBody = catchBody ( catchNode , catchNode , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchNode , catchBody ) ;
Distance : 6

452
Tree	Node catchBody = block () ; for
Code	Node catchBody = block () ; for
Distance : 10

453
Tree	Node catchBody = new Node ( catchNode , catchBody ) . block ( catchBody ) ;
Code	Node catchBody = new Node ( catchNode , catchBody ) . block ( catchBody ) ;
Distance : 6

454
Tree	Node catchBody = catchBody . copyInformationFrom ( STRING_CONSTANT , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( STRING_CONSTANT , catchBody ) ;
Distance : 7

455
Tree	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node ( catchBody , catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 5

456
Tree	Node catchBody = block () . block ( catchBody ) ;
Code	Node catchBody = block () . block ( catchBody ) ;
Distance : 6

457
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

458
Tree	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 7

459
Tree	Node catchBody = catchBody . block ( catchNode , false ) ;
Code	Node catchBody = catchBody . block ( catchNode , false ) ;
Distance : 7

460
Tree	Node catchBody = catchBody ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchBody , catchBody ) ;
Distance : 7

461
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

462
Tree	Node catchBody = block ( catchNode ) . block ( STRING_CONSTANT ) ;
Code	Node catchBody = block ( catchNode ) . block ( STRING_CONSTANT ) ;
Distance : 3

463
Tree	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchNode . block () ) ;
Code	Node catchBody = block ( catchNode ( catchBody ) , STRING_CONSTANT , catchNode . block () ) ;
Distance : 9

464
Tree	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody ) ;
Distance : 7

465
Tree	Node catchBody = catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Code	Node catchBody = catchBody . block ( catchBody , Es6ToEs3Converter.CANNOT_CONVERT_YET ) ;
Distance : 8

466
Tree	Node catchBody = block ( catchBody , catchBody ( catchNode ) ) ;
Code	Node catchBody = block ( catchBody , catchBody ( catchNode ) ) ;
Distance : 6

467
Tree	Node catchBody = catchBody ( catchNode , catchBody , catchBody ) ;
Code	Node catchBody = catchBody ( catchNode , catchBody , catchBody ) ;
Distance : 6

468
Tree	Node catchBody = block ( catchBody , catchNode , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchNode , catchBody , catchBody ) ;
Distance : 8

469
Tree	Node catchBody = new Node () . block ( catchBody ) ;
Code	Node catchBody = new Node () . block ( catchBody ) ;
Distance : 6

470
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

471
Tree	Node catchBody = catchBody . block ( catchNode , NodeUtil.isNameDeclaration ) ;
Code	Node catchBody = catchBody . block ( catchNode , NodeUtil.isNameDeclaration ) ;
Distance : 7

472
Tree	Node catchBody = catchBody ( catchBody ) ; disableTypeCheck
Code	Node catchBody = catchBody ( catchBody ) ; disableTypeCheck
Distance : 8

473
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

474
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

475
Tree	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchBody ) ;
Distance : 5

476
Tree	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

477
Tree	Node catchBody = this . catchBody . block () ;
Code	Node catchBody = this . catchBody . block () ;
Distance : 8

478
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

479
Tree	Node catchBody = block ( catchBody , block ( catchBody ) ) ;
Code	Node catchBody = block ( catchBody , block ( catchBody ) ) ;
Distance : 7

480
Tree	Node catchBody = catchBody . catchBody ( catchBody ) ;
Code	Node catchBody = catchBody . catchBody ( catchBody ) ;
Distance : 6

481
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

482
Tree	Node catchBody = block . block ( STRING_CONSTANT , catchNode ) ;
Code	Node catchBody = block . block ( STRING_CONSTANT , catchNode ) ;
Distance : 7

483
Tree	Node catchBody = catchBody . block () ;
Code	Node catchBody = catchBody . block () ;
Distance : 8

484
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

485
Tree	Node catchBody = block ( copyInformationFrom ( catchNode ) , STRING_CONSTANT , catchNode . block () ) ;
Code	Node catchBody = block ( copyInformationFrom ( catchNode ) , STRING_CONSTANT , catchNode . block () ) ;
Distance : 9

486
Tree	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( STRING_CONSTANT ) . copyInformationFrom ( catchNode ) ;
Distance : 2

487
Tree	Node catchBody = block . block ( catchNode , catchNode ) ;
Code	Node catchBody = block . block ( catchNode , catchNode ) ;
Distance : 7

488
Tree	Node catchBody = block ( catchNode , ) , catchBody , catchBody ) ;
Code	Node catchBody = block ( catchNode , ) , catchBody , catchBody ) ;
Distance : 6

489
Tree	Node catchBody = block ( block ( catchBody ) , STRING_CONSTANT , catchNode . block () ) ;
Code	Node catchBody = block ( block ( catchBody ) , STRING_CONSTANT , catchNode . block () ) ;
Distance : 10

490
Tree	Node catchBody = catchBody . block ( catchBody , ) ) ;
Code	Node catchBody = catchBody . block ( catchBody , ) ) ;
Distance : 8

491
Tree	Node catchBody = block ( catchNode , catchNode , true ) ;
Code	Node catchBody = block ( catchNode , catchNode , true ) ;
Distance : 6

492
Tree	Node catchBody = block ( catchNode , catchNode ( catchNode ) ) ;
Code	Node catchBody = block ( catchNode , catchNode ( catchNode ) ) ;
Distance : 5

493
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 5

494
Tree	Node catchBody = block () ; options
Code	Node catchBody = block () ; options
Distance : 10

495
Tree	Node catchBody = block ( catchBody , catchBody , catchBody , block ) ;
Code	Node catchBody = block ( catchBody , catchBody , catchBody , block ) ;
Distance : 8

496
Tree	Node catchBody = block ( catchNode , block ( catchBody ) ) ;
Code	Node catchBody = block ( catchNode , block ( catchBody ) ) ;
Distance : 6

497
Tree	Node catchBody = block () ; Node
Code	Node catchBody = block () ; Node
Distance : 10

498
Tree	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Distance : 9

499
Tree	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = new Node () . copyInformationFrom ( catchNode ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 500
Wrong
========================================================================
False

0
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

1
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Node ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Node ) ; } }
Distance : 8

2
Tree	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 9

3
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

4
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , Node ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , Node ) ; } }
Distance : 7

5
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , for ) ; } }
Distance : 8

6
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 3

7
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 4

8
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

9
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

10
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

11
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

12
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

13
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

14
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

15
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 9

16
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Distance : 5

17
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Distance : 6

18
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

19
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 11

20
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

21
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

22
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

23
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 9

24
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

25
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

26
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 7

27
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 6

28
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

29
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

30
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 7

31
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

32
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

33
Tree	{ for ( Node fromNode : cfa.finallyMap . createEdge () ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . createEdge () ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 12

34
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

35
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 8

36
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

37
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

38
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

39
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

40
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

41
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

42
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

43
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Distance : 9

44
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , TokenType.NAMESPACE , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , TokenType.NAMESPACE , fromNode ) ; } }
Distance : 10

45
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

46
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , TokenType.NAMESPACE , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , TokenType.NAMESPACE , fromNode ) ; } }
Distance : 11

47
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 5

48
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Distance : 9

49
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Distance : 9

50
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

51
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

52
Tree	{ for ( final Node parent : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 8

53
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 11

54
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 5

55
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

56
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

57
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

58
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

59
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Distance : 12

60
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 6

61
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode ) ; } }
Distance : 12

62
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Distance : 9

63
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Distance : 7

64
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Distance : 8

65
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 8

66
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , false ) ; } }
Distance : 4

67
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , false ) ; } }
Distance : 5

68
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 2

69
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 3

70
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

71
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 6

72
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Distance : 9

73
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Distance : 8

74
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 6

75
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 7

76
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

77
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Node ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Node ) ; } }
Distance : 7

78
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 6

79
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 7

80
Tree	{ for ( Node parent : fromNode . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node parent : fromNode . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 9

81
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

82
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

83
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

84
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

85
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

86
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 8

87
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

88
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 7

89
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

90
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 5

91
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 6

92
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 3

93
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

94
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode ) ; } }
Distance : 10

95
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

96
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

97
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

98
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

99
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

100
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

101
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 5

102
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

103
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Distance : 9

104
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

105
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

106
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 4

107
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 10

108
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Distance : 6

109
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode ) ; } }
Distance : 9

110
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 4

111
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

112
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Node ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , Node ) ; } }
Distance : 7

113
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

114
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 9

115
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 5

116
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

117
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

118
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

119
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

120
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , null , null ) ; } }
Distance : 6

121
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

122
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Distance : 9

123
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , Branch.UNCOND ) ; } }
Distance : 7

124
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

125
Tree	{ for ( Node finallyNode : cfa.finallyMap . createEdge () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . createEdge () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 10

126
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

127
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

128
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , null , null ) ; } }
Distance : 7

129
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode ) ; } }
Distance : 8

130
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode ) ; } }
Distance : 9

131
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , STRING_CONSTANT ) ; } }
Distance : 10

132
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , Branch.UNCOND ) ; } }
Distance : 8

133
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 9

134
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , fromNode ) ; } }
Distance : 8

135
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 6

136
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

137
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 3

138
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

139
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 6

140
Tree	{ for ( Node fromNode : cfa.finallyMap . createEdge () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . createEdge () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 11

141
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

142
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

143
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

144
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

145
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

146
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Distance : 8

147
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

148
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

149
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 7

150
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

151
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 7

152
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

153
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 7

154
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

155
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 9

156
Tree	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

157
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

158
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 6

159
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

160
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

161
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 6

162
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

163
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

164
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

165
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

166
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

167
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

168
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 8

169
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 7

170
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

171
Tree	{ for ( Node parent : cfa.finallyMap . createEdge () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . createEdge () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 11

172
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

173
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

174
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

175
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

176
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

177
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

178
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

179
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

180
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 8

181
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

182
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

183
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

184
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Distance : 10

185
Tree	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

186
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 7

187
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Distance : 8

188
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , false , fromNode ) ; } }
Distance : 11

189
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Distance : 10

190
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 9

191
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

192
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

193
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , Feature.LET_DECLARATIONS , fromNode ) ; } }
Distance : 11

194
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , false ) ; } }
Distance : 6

195
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , true ) ; } }
Distance : 7

196
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

197
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

198
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

199
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , default: ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , default: ) ; } }
Distance : 6

200
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , default: ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , default: ) ; } }
Distance : 7

201
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

202
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

203
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

204
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Branch.UNCOND ) ; } }
Distance : 6

205
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 9

206
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Distance : 5

207
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , parent ) ; } }
Distance : 6

208
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 8

209
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 11

210
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 4

211
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 5

212
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 4

213
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 5

214
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

215
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 8

216
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

217
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

218
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

219
Tree	{ for ( Node parent : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node parent : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 8

220
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

221
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

222
Tree	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

223
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 3

224
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

225
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

226
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

227
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

228
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , for ) ; } }
Distance : 9

229
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

230
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

231
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , for ) ; } }
Distance : 8

232
Tree	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

233
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

234
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 8

235
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 4

236
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

237
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

238
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 8

239
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

240
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

241
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 9

242
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 8

243
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

244
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

245
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

246
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

247
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

248
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 10

249
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

250
Tree	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

251
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 9

252
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

253
Tree	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

254
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 4

255
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

256
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 5

257
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( break; , Node ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( break; , Node ) ; } }
Distance : 6

258
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 8

259
Tree	{ for ( Node parent : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

260
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 7

261
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 8

262
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 9

263
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

264
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

265
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

266
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

267
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 6

268
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

269
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

270
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

271
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 8

272
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

273
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

274
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 6

275
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

276
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

277
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , Node ) ; } }
Distance : 9

278
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 4

279
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 11

280
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 8

281
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

282
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 6

283
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

284
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

285
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 6

286
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

287
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

288
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

289
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

290
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

291
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

292
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 5

293
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 7

294
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 11

295
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 10

296
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( break; , Node ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( break; , Node ) ; } }
Distance : 7

297
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 6

298
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

299
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

300
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

301
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

302
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 6

303
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 8

304
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

305
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

306
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

307
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 7

308
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 7

309
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 8

310
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 6

311
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

312
Tree	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

313
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 7

314
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 11

315
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

316
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 7

317
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

318
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

319
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 6

320
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null ) ; } }
Distance : 7

321
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

322
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 7

323
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

324
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

325
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

326
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

327
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

328
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 5

329
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

330
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , fromNode ) ; } }
Distance : 8

331
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( null , fromNode ) ; } }
Distance : 7

332
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

333
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 3

334
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 4

335
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

336
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 7

337
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 7

338
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

339
Tree	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( abstract Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

340
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

341
Tree	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( abstract Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

342
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

343
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

344
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

345
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 8

346
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 7

347
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 7

348
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode ) ; } }
Distance : 9

349
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

350
Tree	{ for ( final Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

351
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

352
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

353
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

354
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

355
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

356
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { for . get ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { for . get ( STRING_CONSTANT ) ; } }
Distance : 8

357
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 8

358
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 7

359
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

360
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 9

361
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

362
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

363
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

364
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

365
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

366
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

367
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

368
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 6

369
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 7

370
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 4

371
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

372
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 6

373
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 4

374
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

375
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( null , finallyNode ) ; } }
Distance : 6

376
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

377
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , SETTER_ERROR_MESSAGE , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , SETTER_ERROR_MESSAGE , fromNode ) ; } }
Distance : 10

378
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , SETTER_ERROR_MESSAGE , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , SETTER_ERROR_MESSAGE , fromNode ) ; } }
Distance : 11

379
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

380
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 12

381
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , deadPropertyAssignmentElimination , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , deadPropertyAssignmentElimination , fromNode ) ; } }
Distance : 10

382
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

383
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

384
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

385
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 7

386
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , deadPropertyAssignmentElimination , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , deadPropertyAssignmentElimination , fromNode ) ; } }
Distance : 11

387
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

388
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

389
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 11

390
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

391
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

392
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , true ) ; } }
Distance : 7

393
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

394
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 8

395
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 4

396
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( null , Node ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( null , Node ) ; } }
Distance : 7

397
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 5

398
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , null , null ) ; } }
Distance : 6

399
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

400
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , for ) ; } }
Distance : 8

401
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode ) ; } }
Distance : 8

402
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , finallyNode ) ; } }
Distance : 8

403
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , false ) ; } }
Distance : 7

404
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 11

405
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

406
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

407
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 8

408
Tree	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 8

409
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , false ) ; } }
Distance : 8

410
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

411
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 6

412
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null , null ) ; } }
Distance : 4

413
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

414
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 5

415
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( null , Branch.UNCOND ) ; } }
Distance : 8

416
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 9

417
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

418
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 7

419
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 8

420
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

421
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 6

422
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

423
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

424
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , finallyNode ) ; } }
Distance : 7

425
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

426
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

427
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , null ) ; } }
Distance : 9

428
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

429
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

430
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 8

431
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 9

432
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 9

433
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , for ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , for ) ; } }
Distance : 9

434
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { for . createEdge ( STRING_CONSTANT ) ; } }
Distance : 10

435
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 13

436
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

437
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

438
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 7

439
Tree	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 7

440
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

441
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 8

442
Tree	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 7

443
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , true ) ; } }
Distance : 7

444
Tree	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

445
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 6

446
Tree	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

447
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { parent . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

448
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

449
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

450
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

451
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

452
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

453
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

454
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

455
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

456
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

457
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

458
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

459
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 8

460
Tree	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { cfa . createEdge ( fromNode , for ) ; } }
Distance : 8

461
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 9

462
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

463
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

464
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 8

465
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

466
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

467
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 9

468
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , Node ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( fromNode , Node ) ; } }
Distance : 10

469
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 7

470
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 10

471
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( null , fromNode ) ; } }
Distance : 8

472
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

473
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

474
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

475
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

476
Tree	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

477
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( false ) ; } }
Distance : 9

478
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 9

479
Tree	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

480
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

481
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

482
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

483
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

484
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

485
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

486
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , NUMBER_CONSTANT , fromNode ) ; } }
Distance : 8

487
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

488
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

489
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

490
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

491
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 11

492
Tree	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( final Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

493
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 14

494
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

495
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

496
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

497
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

498
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

499
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , Branch.UNCOND , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 16

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 480
Wrong
========================================================================
False

0
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

1
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

2
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

3
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

4
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

5
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , other.features ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , other.features ) ; } }
Distance : 8

6
Tree	{ if ( Level.FINE ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( Level.FINE ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

7
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 12

8
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 8

9
Tree	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 15

10
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , tryMinimizeCondition ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , tryMinimizeCondition ) ; } }
Distance : 8

11
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else - }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else - }
Distance : 14

12
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , pair.env ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , pair.env ) ; } }
Distance : 8

13
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

14
Tree	{ if ( alreadyRemoved ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( alreadyRemoved ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

15
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

16
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else else }
Distance : 14

17
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

18
Tree	{ if ( leftOfArrow.type ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( leftOfArrow.type ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

19
Tree	{ if ( inheritedPropDef.methodType ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( inheritedPropDef.methodType ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

20
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

21
Tree	{ if ( options.skipNonTranspilationPasses ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( options.skipNonTranspilationPasses ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

22
Tree	{ if ( inheritedPropDef.methodType ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( inheritedPropDef.methodType ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

23
Tree	{ if ( options.skipNonTranspilationPasses ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( options.skipNonTranspilationPasses ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

24
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

25
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

26
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

27
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else while }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else while }
Distance : 14

28
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else break; }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else break; }
Distance : 14

29
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 17

30
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

31
Tree	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

32
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

33
Tree	{ if ( com.google.protobuf.InvalidProtocolBufferException ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( com.google.protobuf.InvalidProtocolBufferException ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

34
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

35
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

36
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ] }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ] }
Distance : 14

37
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

38
Tree	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

39
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

40
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

41
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Distance : 10

42
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 8

43
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

44
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

45
Tree	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else & }
Code	{ if ( recurse ( n ) ) { return n . allResultsMatch ( n ) ; } else & }
Distance : 14

46
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else else }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else else }
Distance : 14

47
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

48
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

49
Tree	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

50
Tree	{ if ( n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

51
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

52
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 8

53
Tree	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

54
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

55
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

56
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } Override
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } Override
Distance : 8

57
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

58
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 8

59
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

60
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

61
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 7

62
Tree	{ if ( recurse . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

63
Tree	{ if ( n ) { return n . allResultsMatch ( n , Branch.ON_FALSE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , Branch.ON_FALSE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

64
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 13

65
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

66
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 7

67
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Distance : 15

68
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

69
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 8

70
Tree	{ if ( n . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else catch }
Code	{ if ( n . allResultsMatch ( n ) ) { return mayBeStringHelper ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else catch }
Distance : 17

71
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

72
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 9

73
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Distance : 10

74
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else if }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else if }
Distance : 15

75
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

76
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

77
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } get
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } get
Distance : 8

78
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ; } }
Distance : 8

79
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

80
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

81
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 8

82
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

83
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

84
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

85
Tree	{ if ( n ) { return n . allResultsMatch ( n , currentCase.mayFallThrough ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , currentCase.mayFallThrough ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

86
Tree	{ if ( n ) { return n . allResultsMatch ( n , options.renamePrefixNamespace ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , options.renamePrefixNamespace ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

87
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

88
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 6

89
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

90
Tree	{ if ( n . recurse ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . recurse ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

91
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

92
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

93
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

94
Tree	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Distance : 8

95
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 9

96
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

97
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Distance : 8

98
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

99
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else else }
Distance : 15

100
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

101
Tree	{ if ( n ) { return n . allResultsMatch ( n , pair.env ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , pair.env ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

102
Tree	{ if ( leftOfArrow.type ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( leftOfArrow.type ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

103
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

104
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 9

105
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 7

106
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

107
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

108
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 12

109
Tree	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

110
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Distance : 9

111
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

112
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 12

113
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 13

114
Tree	{ if ( n ) { return n . allResultsMatch ( n , tryMinimizeCondition ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , tryMinimizeCondition ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

115
Tree	{ if ( recurse . allResultsMatch ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n , n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 11

116
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

117
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

118
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 8

119
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 13

120
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 8

121
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

122
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

123
Tree	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

124
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 7

125
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

126
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 13

127
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Distance : 16

128
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 10

129
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 13

130
Tree	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Distance : 8

131
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Distance : 17

132
Tree	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

133
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

134
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

135
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

136
Tree	{ if ( n . { ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Code	{ if ( n . { ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Distance : 14

137
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

138
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

139
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

140
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

141
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

142
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 16

143
Tree	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

144
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

145
Tree	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Distance : 8

146
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 8

147
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 8

148
Tree	{ if ( hasConditionalAncestor ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( hasConditionalAncestor ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

149
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

150
Tree	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 14

151
Tree	{ if ( recurse . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

152
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

153
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , false ) ; } }
Distance : 8

154
Tree	{ if ( n . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Code	{ if ( n . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Distance : 15

155
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 12

156
Tree	{ if ( recurse . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

157
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

158
Tree	{ if ( n . { ( n ) ) { return allResultsMatch ( n , n ) ; } else CHAR_CONS }
Code	{ if ( n . { ( n ) ) { return allResultsMatch ( n , n ) ; } else CHAR_CONS }
Distance : 14

159
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 8

160
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

161
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

162
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 15

163
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

164
Tree	{ if ( n ) { return n . allResultsMatch ( n , EquivalenceMethod.DATA_FLOW ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , EquivalenceMethod.DATA_FLOW ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

165
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

166
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

167
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 9

168
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 15

169
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else break; }
Distance : 15

170
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else - }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else - }
Distance : 12

171
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Distance : 7

172
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

173
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

174
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Distance : 15

175
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . n ( n ) ; } }
Distance : 6

176
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

177
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

178
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

179
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

180
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

181
Tree	{ if ( recurse . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

182
Tree	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

183
Tree	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Distance : 8

184
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

185
Tree	{ if ( n ) { return n . allResultsMatch ( n , other.features ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , other.features ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

186
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

187
Tree	{ if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

188
Tree	{ if ( n ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

189
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 9

190
Tree	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Code	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Distance : 15

191
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 7

192
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

193
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 15

194
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 9

195
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

196
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 13

197
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 10

198
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , true ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , true ) ; } }
Distance : 8

199
Tree	{ if ( n ) { return allResultsMatch ( n , n , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

200
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 10

201
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

202
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( this , n ) ; } }
Distance : 8

203
Tree	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 14

204
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

205
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } for
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } for
Distance : 8

206
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else catch }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else catch }
Distance : 15

207
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

208
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 13

209
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else ] }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else ] }
Distance : 12

210
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 9

211
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

212
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

213
Tree	{ if ( recurse ) { return allResultsMatch ( n , n , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

214
Tree	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 13

215
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 7

216
Tree	{ if ( hasConditionalAncestor ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( hasConditionalAncestor ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

217
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

218
Tree	{ if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

219
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

220
Tree	{ if ( recurse . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 14

221
Tree	{ if ( recurse . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . recurse ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

222
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

223
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 13

224
Tree	{ if ( com.google.protobuf.InvalidProtocolBufferException ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( com.google.protobuf.InvalidProtocolBufferException ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

225
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 9

226
Tree	{ if ( options.deadAssignmentElimination ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( options.deadAssignmentElimination ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

227
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

228
Tree	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Distance : 9

229
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 13

230
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , pair.env ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , pair.env ) ; } }
Distance : 10

231
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , tryMinimizeCondition ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , tryMinimizeCondition ) ; } }
Distance : 10

232
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Distance : 8

233
Tree	{ if ( options.deadAssignmentElimination ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( options.deadAssignmentElimination ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

234
Tree	{ if ( recurse . { ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . { ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 11

235
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

236
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

237
Tree	{ if ( mode.featureSet ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( mode.featureSet ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

238
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else break; }
Distance : 15

239
Tree	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else break; }
Code	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else break; }
Distance : 15

240
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 10

241
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

242
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

243
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 16

244
Tree	{ if ( Level.FINE ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( Level.FINE ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

245
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Distance : 15

246
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

247
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

248
Tree	{ if ( n ) { return recurse . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

249
Tree	{ if ( n ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

250
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 7

251
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 9

252
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } pname
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } pname
Distance : 8

253
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

254
Tree	{ if ( n . allResultsMatch ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . allResultsMatch ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 15

255
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 13

256
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; } }
Distance : 10

257
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

258
Tree	{ if ( recurse . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( recurse . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 14

259
Tree	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else catch }
Code	{ if ( recurse ( n ) ) { return allResultsMatch ( n ) ; } else catch }
Distance : 12

260
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 9

261
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

262
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

263
Tree	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 13

264
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

265
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else else }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else else }
Distance : 15

266
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

267
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , other.features ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , other.features ) ; } }
Distance : 10

268
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 8

269
Tree	{ if ( n . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Code	{ if ( n . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else while }
Distance : 15

270
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } []
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } []
Distance : 8

271
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

272
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 13

273
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

274
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Distance : 8

275
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 7

276
Tree	{ if ( n ) { return n . allResultsMatch ( n , DisposalCheckingPolicy.OFF ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , DisposalCheckingPolicy.OFF ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

277
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 10

278
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , true ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

279
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } } disableTypeCheck
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } } disableTypeCheck
Distance : 9

280
Tree	{ if ( mode.featureSet ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( mode.featureSet ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

281
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

282
Tree	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return this . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

283
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

284
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 17

285
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 8

286
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } } disableTypeCheck
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } } disableTypeCheck
Distance : 10

287
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 16

288
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Distance : 9

289
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE , false ) ; } else { return n . n ( n ) ; } }
Distance : 7

290
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

291
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 9

292
Tree	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 15

293
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n , n ) ; } else break; }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n , n ) ; } else break; }
Distance : 15

294
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ; } }
Distance : 10

295
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 9

296
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

297
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 9

298
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 14

299
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

300
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

301
Tree	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else else }
Code	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return mayBeStringHelper ( n ) ; } else else }
Distance : 12

302
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

303
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

304
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

305
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 13

306
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

307
Tree	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n , false ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

308
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

309
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

310
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } } TypeInferenceMode.CHECKED
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } } TypeInferenceMode.CHECKED
Distance : 9

311
Tree	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 13

312
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 9

313
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 8

314
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

315
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 5

316
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } TypeInferenceMode.CHECKED
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } TypeInferenceMode.CHECKED
Distance : 5

317
Tree	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Distance : 8

318
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

319
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , true ) ; } }
Distance : 8

320
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 7

321
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 6

322
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

323
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

324
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

325
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } } TypeInferenceMode.CHECKED
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } } TypeInferenceMode.CHECKED
Distance : 10

326
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

327
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

328
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 7

329
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 7

330
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

331
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } disableTypeCheck
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } disableTypeCheck
Distance : 5

332
Tree	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Code	{ if ( n . allResultsMatch ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Distance : 15

333
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 9

334
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 9

335
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 8

336
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 10

337
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 14

338
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

339
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

340
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

341
Tree	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

342
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper () ; } }
Distance : 7

343
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

344
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 7

345
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 10

346
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

347
Tree	{ if ( recurse . recurse ( n , MAY_BE_STRING_PREDICATE ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . recurse ( n , MAY_BE_STRING_PREDICATE ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 10

348
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

349
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Token.LABEL_NAME ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Token.LABEL_NAME ) ; } }
Distance : 10

350
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

351
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

352
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 13

353
Tree	{ if ( n ) { return n . allResultsMatch ( n , MODULE_USES_GOOG_MODULE_GET ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , MODULE_USES_GOOG_MODULE_GET ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

354
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

355
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

356
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper () ; } }
Distance : 8

357
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

358
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

359
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , true ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , true ) ; } }
Distance : 7

360
Tree	{ if ( recurse . recurse ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Code	{ if ( recurse . recurse ( n ) ) { return allResultsMatch ( n , n ) ; } else else }
Distance : 14

361
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

362
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

363
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return false ; } }
Distance : 9

364
Tree	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

365
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Distance : 8

366
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Distance : 14

367
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 9

368
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 10

369
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 10

370
Tree	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

371
Tree	{ if ( n ) { return n . allResultsMatch ( n , inheritedPropDef.methodType ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n , inheritedPropDef.methodType ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

372
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

373
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 13

374
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 10

375
Tree	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 12

376
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 8

377
Tree	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

378
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 8

379
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } disableTypeCheck
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } disableTypeCheck
Distance : 10

380
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

381
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

382
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

383
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , currentCase.mayFallThrough ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , currentCase.mayFallThrough ) ; } }
Distance : 8

384
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 7

385
Tree	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else if }
Code	{ if ( recurse . ) ( n ) ) { return allResultsMatch ( n , n ) ; } else if }
Distance : 14

386
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 8

387
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 9

388
Tree	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( this ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

389
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 7

390
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } TypeInferenceMode.CHECKED
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } TypeInferenceMode.CHECKED
Distance : 10

391
Tree	{ if ( recurse . allResultsMatch ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Code	{ if ( recurse . allResultsMatch ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else else }
Distance : 14

392
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 4

393
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 10

394
Tree	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 14

395
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

396
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

397
Tree	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( this ) ; } else { return n . n ( n ) ; } }
Distance : 9

398
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

399
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

400
Tree	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

401
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 7

402
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

403
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 3

404
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Token.LABEL_NAME ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Token.LABEL_NAME ) ; } }
Distance : 8

405
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } lines
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } } lines
Distance : 8

406
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 9

407
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , true ) ; } }
Distance : 9

408
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . MAY_BE_STRING_PREDICATE ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return n . MAY_BE_STRING_PREDICATE ( n ) ; } }
Distance : 6

409
Tree	{ if ( alreadyRemoved ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( alreadyRemoved ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

410
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 17

411
Tree	{ if ( recurse . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse . ) ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else if }
Distance : 14

412
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 7

413
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , true ) ; } }
Distance : 9

414
Tree	{ if ( recurse . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . recurse ( recurse ( n ) ) ) { return n . allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 14

415
Tree	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return this . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

416
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

417
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Distance : 8

418
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , Branch.ON_FALSE ) ; } }
Distance : 10

419
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

420
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

421
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 8

422
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

423
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 7

424
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 9

425
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 8

426
Tree	{ if ( n . recurse ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . recurse ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

427
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 9

428
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 10

429
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

430
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n ( n ) ; } }
Distance : 6

431
Tree	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 13

432
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

433
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

434
Tree	{ if ( recurse . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Code	{ if ( recurse . ) ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else if }
Distance : 14

435
Tree	{ if ( recurse . ) ( n ) ) { return n . allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( n ) ) { return n . allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 14

436
Tree	{ if ( n . recurse ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( n . recurse ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 13

437
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , inheritedPropDef.methodType ) ; } }
Distance : 10

438
Tree	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Code	{ if ( n ) { return allResultsMatch ( n ( n ) ) ; } else { return true ; } }
Distance : 9

439
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 8

440
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 9

441
Tree	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 13

442
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 7

443
Tree	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else break; }
Code	{ if ( n . recurse ( n ) ) { return allResultsMatch ( n ) . MAY_BE_STRING_PREDICATE ( n ) ; } else break; }
Distance : 16

444
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( STRING_CONSTANT , n ) ; } }
Distance : 7

445
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 8

446
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 10

447
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

448
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 8

449
Tree	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else break; }
Code	{ if ( n . ) ( n ) ) { return allResultsMatch ( n ) ; } else break; }
Distance : 13

450
Tree	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( n . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 13

451
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 8

452
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , options.renamePrefixNamespace ) ; } }
Distance : 10

453
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

454
Tree	{ if ( recurse . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else if }
Code	{ if ( recurse . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else if }
Distance : 12

455
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

456
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper () ; } }
Distance : 7

457
Tree	{ if ( n . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( n . allResultsMatch ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 13

458
Tree	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return recurse . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 10

459
Tree	{ if ( recurse . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( n . MAY_BE_STRING_PREDICATE () ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 12

460
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , EquivalenceMethod.DATA_FLOW ) ; } }
Distance : 10

461
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . n ( n ) ; } }
Distance : 6

462
Tree	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Code	{ if ( n . ) ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else case }
Distance : 15

463
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

464
Tree	{ if ( recurse . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Code	{ if ( recurse . ) ( n , n ) ) { return allResultsMatch ( n ) ; } else CHAR_CONS }
Distance : 11

465
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE , false ) ; } }
Distance : 7

466
Tree	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . recurse ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 15

467
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n ) ; } else { return mayBeStringHelper () ; } }
Distance : 8

468
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

469
Tree	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n , n ) ; } else while }
Code	{ if ( n . allResultsMatch ( n ) ) { return allResultsMatch ( n , n ) ; } else while }
Distance : 15

470
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

471
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n , false ) ; } }
Distance : 10

472
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( this , n ) ; } }
Distance : 7

473
Tree	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Code	{ if ( n . recurse ( n ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else ThreadSafeDelegatingErrorManager }
Distance : 15

474
Tree	{ if ( recurse ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return recurse . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

475
Tree	{ if ( n . allResultsMatch ( n , n ) ) { return allResultsMatch ( n ) ; } else while }
Code	{ if ( n . allResultsMatch ( n , n ) ) { return allResultsMatch ( n ) ; } else while }
Distance : 12

476
Tree	{ if ( recurse . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Code	{ if ( recurse . ) ( recurse ( n ) ) ) { return allResultsMatch ( n ) ; } else else }
Distance : 12

477
Tree	{ if ( n . { ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Code	{ if ( n . { ( recurse ( n ) ) ) { return n . MAY_BE_STRING_PREDICATE ( n ) ; } else CHAR_CONS }
Distance : 14

478
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , false ) ; } }
Distance : 7

479
Tree	{ if ( n . { ( n , n ) ) { return allResultsMatch ( n ) ; } else case }
Code	{ if ( n . { ( n , n ) ) { return allResultsMatch ( n ) ; } else case }
Distance : 11

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 440
Wrong
========================================================================
False

0
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 5

1
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

2
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

3
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

4
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 9

5
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , - ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , - ) ;
Distance : 5

6
Tree	String script = moduleName ( moduleName ) ;
Code	String script = moduleName ( moduleName ) ;
Distance : 6

7
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

8
Tree	String moduleName = getSourceFileName ( moduleName , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

9
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , ++ ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , ++ ) ;
Distance : 5

10
Tree	String moduleName = moduleName ( script , script ) ;
Code	String moduleName = moduleName ( script , script ) ;
Distance : 4

11
Tree	String moduleName = getSourceFileName ( script , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , moduleName , moduleName ) ;
Distance : 5

12
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 7

13
Tree	String moduleName = getSourceFileName ( moduleName , script ) ;
Code	String moduleName = getSourceFileName ( moduleName , script ) ;
Distance : 5

14
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 12

15
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

16
Tree	String script = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

17
Tree	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

18
Tree	String moduleName = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 4

19
Tree	String moduleName = getSourceFileName ( script ) ;
Code	String moduleName = getSourceFileName ( script ) ;
Distance : 4

20
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 7

21
Tree	String moduleName = guessCJSModuleName ( script , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( script , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 3

22
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

23
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

24
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST ) ;
Distance : 4

25
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 3

26
Tree	String moduleName = guessCJSModuleName ( script ) ;
Code	String moduleName = guessCJSModuleName ( script ) ;
Distance : 3

27
Tree	String moduleName = guessCJSModuleName ( script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script ) ;
Distance : 3

28
Tree	String moduleName = moduleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName ( script , script , moduleName ) ;
Distance : 5

29
Tree	String moduleName = guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script , script ) ;
Distance : 4

30
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 12

31
Tree	String moduleName = moduleName ( script ) ;
Code	String moduleName = moduleName ( script ) ;
Distance : 4

32
Tree	String moduleName = guessCJSModuleName ( Feature.TRAILING_COMMA , script ) ;
Code	String moduleName = guessCJSModuleName ( Feature.TRAILING_COMMA , script ) ;
Distance : 4

33
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , ++ , - ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , ++ , - ) ;
Distance : 5

34
Tree	String script = guessCJSModuleName ( script , script ) ;
Code	String script = guessCJSModuleName ( script , script ) ;
Distance : 4

35
Tree	String moduleName = script ( script ) ;
Code	String moduleName = script ( script ) ;
Distance : 4

36
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

37
Tree	String moduleName = guessCJSModuleName ( script , script , true ) ;
Code	String moduleName = guessCJSModuleName ( script , script , true ) ;
Distance : 4

38
Tree	String moduleName = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

39
Tree	String moduleName = guessCJSModuleName ( QualifiedName , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( QualifiedName , CHAR_CONS , - ) ;
Distance : 5

40
Tree	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

41
Tree	String moduleName = moduleName . getSourceFileName ( moduleName , script , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( moduleName , script , moduleName ) ;
Distance : 8

42
Tree	String moduleName = script ( moduleName ) ;
Code	String moduleName = script ( moduleName ) ;
Distance : 5

43
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

44
Tree	String script = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

45
Tree	String moduleName = getSourceFileName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 12

46
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , CompilerTestCase.LINE_JOINER ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , CompilerTestCase.LINE_JOINER ) ;
Distance : 4

47
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Distance : 4

48
Tree	String moduleName = getSourceFileName ( CHAR_CONS , CHAR_CONS , - ) ;
Code	String moduleName = getSourceFileName ( CHAR_CONS , CHAR_CONS , - ) ;
Distance : 6

49
Tree	String script = getSourceFileName ( script ) ;
Code	String script = getSourceFileName ( script ) ;
Distance : 5

50
Tree	String moduleName = guessCJSModuleName ( bindComponents.thisValue , script ) ;
Code	String moduleName = guessCJSModuleName ( bindComponents.thisValue , script ) ;
Distance : 4

51
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , loopNode.body ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , loopNode.body ) ;
Distance : 8

52
Tree	String script = guessCJSModuleName ( moduleName , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( moduleName , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

53
Tree	String moduleName = getSourceFileName ( script , script , moduleName , script ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName , script ) ;
Distance : 7

54
Tree	String moduleName = guessCJSModuleName ( moduleName , script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , script , moduleName , moduleName ) ;
Distance : 6

55
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

56
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

57
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

58
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Distance : 6

59
Tree	String moduleName = script ( script , script , moduleName ) ;
Code	String moduleName = script ( script , script , moduleName ) ;
Distance : 5

60
Tree	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 13

61
Tree	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , moduleName ) ;
Distance : 7

62
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , - , - ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , - , - ) ;
Distance : 5

63
Tree	String script = moduleName ( script ) ;
Code	String script = moduleName ( script ) ;
Distance : 5

64
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Distance : 3

65
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

66
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

67
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

68
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Distance : 6

69
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 10

70
Tree	String moduleName = guessCJSModuleName ( script , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	String moduleName = guessCJSModuleName ( script , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 3

71
Tree	String script = getSourceFileName ( script , this . moduleName ) ;
Code	String script = getSourceFileName ( script , this . moduleName ) ;
Distance : 6

72
Tree	String moduleName = guessCJSModuleName ( script ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( moduleName . getSourceFileName () ) ) ;
Distance : 3

73
Tree	String moduleName = getSourceFileName ( script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , moduleName ) ;
Distance : 4

74
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

75
Tree	String script = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Distance : 5

76
Tree	String moduleName = script ( script , moduleName ) ;
Code	String moduleName = script ( script , moduleName ) ;
Distance : 4

77
Tree	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

78
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , script ) ;
Distance : 6

79
Tree	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

80
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

81
Tree	String script = moduleName ( script , script , moduleName ) ;
Code	String script = moduleName ( script , script , moduleName ) ;
Distance : 6

82
Tree	String moduleName = moduleName . guessCJSModuleName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , moduleName , moduleName ) ;
Distance : 6

83
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , StrictModeCheck.DUPLICATE_CLASS_METHODS ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , StrictModeCheck.DUPLICATE_CLASS_METHODS ) ;
Distance : 4

84
Tree	String moduleName = getSourceFileName ( moduleName , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( moduleName , script , moduleName ) ;
Distance : 6

85
Tree	String moduleName = getSourceFileName ( script ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( script ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 12

86
Tree	String script = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

87
Tree	String script = getSourceFileName ( script , script , moduleName ) ;
Code	String script = getSourceFileName ( script , script , moduleName ) ;
Distance : 6

88
Tree	String moduleName = getSourceFileName ( moduleName ) ;
Code	String moduleName = getSourceFileName ( moduleName ) ;
Distance : 5

89
Tree	String script = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

90
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

91
Tree	String moduleName = getSourceFileName ( script , this . script ) ;
Code	String moduleName = getSourceFileName ( script , this . script ) ;
Distance : 5

92
Tree	String moduleName = moduleName ( script , script , script ) ;
Code	String moduleName = moduleName ( script , script , script ) ;
Distance : 5

93
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 4

94
Tree	String script = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

95
Tree	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

96
Tree	String moduleName = guessCJSModuleName ( script ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( moduleName . getSourceFileName () ) ) ;
Distance : 3

97
Tree	String script = guessCJSModuleName ( script ) ;
Code	String script = guessCJSModuleName ( script ) ;
Distance : 4

98
Tree	String moduleName = guessCJSModuleName ( DiagnosticGroups.LINT_CHECKS ) ;
Code	String moduleName = guessCJSModuleName ( DiagnosticGroups.LINT_CHECKS ) ;
Distance : 4

99
Tree	String moduleName = guessCJSModuleName ( googProvide , script ) ;
Code	String moduleName = guessCJSModuleName ( googProvide , script ) ;
Distance : 4

100
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

101
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

102
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

103
Tree	String script = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

104
Tree	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 4

105
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 9

106
Tree	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Distance : 4

107
Tree	String script = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

108
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( moduleName ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( moduleName ) ) ) ;
Distance : 5

109
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

110
Tree	String moduleName = guessCJSModuleName ( script ( script ( moduleName ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( moduleName ) ) ) ;
Distance : 6

111
Tree	String moduleName = getSourceFileName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

112
Tree	String moduleName = guessCJSModuleName ( moduleName , script , false ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , script , false ) ;
Distance : 5

113
Tree	String moduleName = moduleName ( moduleName , script ) ;
Code	String moduleName = moduleName ( moduleName , script ) ;
Distance : 5

114
Tree	String script = guessCJSModuleName ( moduleName ) ;
Code	String script = guessCJSModuleName ( moduleName ) ;
Distance : 5

115
Tree	String moduleName = guessCJSModuleName ( script , this . moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , this . moduleName ) ;
Distance : 4

116
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

117
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

118
Tree	String script = moduleName ( script , script , script ) ;
Code	String script = moduleName ( script , script , script ) ;
Distance : 6

119
Tree	String script = moduleName ( moduleName , script ) ;
Code	String script = moduleName ( moduleName , script ) ;
Distance : 6

120
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 12

121
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName . getSourceFileName () ) ;
Distance : 11

122
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

123
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Distance : 7

124
Tree	String moduleName = guessCJSModuleName ( - , recvLvalue.env ) ;
Code	String moduleName = guessCJSModuleName ( - , recvLvalue.env ) ;
Distance : 4

125
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 6

126
Tree	String script = guessCJSModuleName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

127
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , DuplicateDeclarationHandler ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , DuplicateDeclarationHandler ) ;
Distance : 7

128
Tree	String moduleName = moduleName . getSourceFileName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , moduleName , moduleName ) ;
Distance : 7

129
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

130
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 8

131
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

132
Tree	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

133
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 6

134
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

135
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 12

136
Tree	String moduleName = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 5

137
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

138
Tree	String moduleName = script . getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = script . getSourceFileName ( script , script , moduleName ) ;
Distance : 7

139
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; get
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; get
Distance : 8

140
Tree	String moduleName = guessCJSModuleName ( script , script , false ) ;
Code	String moduleName = guessCJSModuleName ( script , script , false ) ;
Distance : 4

141
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; for
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; for
Distance : 8

142
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 11

143
Tree	String moduleName = guessCJSModuleName ( script , other.features ) ;
Code	String moduleName = guessCJSModuleName ( script , other.features ) ;
Distance : 3

144
Tree	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

145
Tree	String moduleName = guessCJSModuleName ( moduleName , this . script ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , this . script ) ;
Distance : 5

146
Tree	String script = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 7

147
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , PeepholeSimplifyRegExp ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , PeepholeSimplifyRegExp ) ;
Distance : 7

148
Tree	String moduleName = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 13

149
Tree	String moduleName = guessCJSModuleName ( script ( script ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( moduleName . getSourceFileName () ) ) ) ;
Distance : 6

150
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; pname
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; pname
Distance : 8

151
Tree	String script = moduleName ( script , moduleName , moduleName ) ;
Code	String script = moduleName ( script , moduleName , moduleName ) ;
Distance : 6

152
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; []
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; []
Distance : 8

153
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Distance : 4

154
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , var.name ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , var.name ) ;
Distance : 5

155
Tree	String moduleName = guessCJSModuleName ( script , PropAccess.EXCLUDE_STRAY_PROPS ) ;
Code	String moduleName = guessCJSModuleName ( script , PropAccess.EXCLUDE_STRAY_PROPS ) ;
Distance : 3

156
Tree	String moduleName = getSourceFileName ( script , script , script ) ;
Code	String moduleName = getSourceFileName ( script , script , script ) ;
Distance : 5

157
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

158
Tree	String script = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Code	String script = guessCJSModuleName ( script , script , moduleName , moduleName ) ;
Distance : 7

159
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

160
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , script ) ;
Distance : 5

161
Tree	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

162
Tree	String script = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 7

163
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

164
Tree	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = script . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

165
Tree	String moduleName = guessCJSModuleName ( - , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( - , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

166
Tree	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

167
Tree	String script = getSourceFileName ( script , script , moduleName , moduleName ) ;
Code	String script = getSourceFileName ( script , script , moduleName , moduleName ) ;
Distance : 8

168
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , types ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , types ) ;
Distance : 7

169
Tree	String moduleName = guessCJSModuleName ( Feature.TRAILING_COMMA , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( Feature.TRAILING_COMMA , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

170
Tree	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , script ) ;
Code	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES , script ) ;
Distance : 4

171
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , getNominalTypeIfSingletonObj ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , getNominalTypeIfSingletonObj ) ;
Distance : 7

172
Tree	String moduleName = guessCJSModuleName ( googProvide , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( googProvide , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

173
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

174
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

175
Tree	String moduleName = moduleName ( script ) ; disableTypeCheck
Code	String moduleName = moduleName ( script ) ; disableTypeCheck
Distance : 5

176
Tree	String moduleName = moduleName . guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , script , script ) ;
Distance : 6

177
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

178
Tree	String moduleName = guessCJSModuleName ( symbol , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( symbol , CHAR_CONS , - ) ;
Distance : 5

179
Tree	String moduleName = guessCJSModuleName ( script , moduleName , true ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , true ) ;
Distance : 4

180
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

181
Tree	String script = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 5

182
Tree	String script = getSourceFileName ( moduleName ) ;
Code	String script = getSourceFileName ( moduleName ) ;
Distance : 6

183
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , obj2.props ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , obj2.props ) ;
Distance : 4

184
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; TypeInferenceMode.CHECKED
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; TypeInferenceMode.CHECKED
Distance : 11

185
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

186
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Distance : 3

187
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 8

188
Tree	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST , script ) ;
Code	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST , script ) ;
Distance : 5

189
Tree	String moduleName = guessCJSModuleName ( - , TokenType.OPEN_PAREN ) ;
Code	String moduleName = guessCJSModuleName ( - , TokenType.OPEN_PAREN ) ;
Distance : 4

190
Tree	String moduleName = guessCJSModuleName ( script , script , moduleName , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script , moduleName , script ) ;
Distance : 6

191
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 5

192
Tree	String moduleName = moduleName ( script , moduleName ) ;
Code	String moduleName = moduleName ( script , moduleName ) ;
Distance : 4

193
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

194
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

195
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

196
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

197
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , types ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , types ) ;
Distance : 5

198
Tree	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES ) ;
Code	String moduleName = guessCJSModuleName ( Feature.KEYWORDS_AS_PROPERTIES ) ;
Distance : 4

199
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

200
Tree	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

201
Tree	String script = guessCJSModuleName ( script , script , false ) ;
Code	String script = guessCJSModuleName ( script , script , false ) ;
Distance : 5

202
Tree	String script = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Code	String script = moduleName . guessCJSModuleName ( script , script , moduleName ) ;
Distance : 7

203
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 6

204
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 5

205
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , PeepholeSimplifyRegExp ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , PeepholeSimplifyRegExp ) ;
Distance : 7

206
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 4

207
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , ExpandJqueryAliases.JQUERY_UNABLE_TO_EXPAND_INVALID_NAME ) ;
Distance : 7

208
Tree	String moduleName = getSourceFileName ( script , moduleName , false ) ;
Code	String moduleName = getSourceFileName ( script , moduleName , false ) ;
Distance : 5

209
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , moduleName ) ;
Distance : 6

210
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 6

211
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

212
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; disableTypeCheck
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; disableTypeCheck
Distance : 15

213
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; disableTypeCheck
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; disableTypeCheck
Distance : 11

214
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

215
Tree	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

216
Tree	String script = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Distance : 5

217
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , Es6CheckModule.ES6_MODULE_REFERENCES_THIS ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , Es6CheckModule.ES6_MODULE_REFERENCES_THIS ) ;
Distance : 7

218
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script ( script ) ) ) ;
Distance : 7

219
Tree	String moduleName = getSourceFileName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = getSourceFileName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 9

220
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , Token.SHEQ ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , Token.SHEQ ) ;
Distance : 4

221
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 8

222
Tree	String moduleName = guessCJSModuleName ( functionContext.function ) ;
Code	String moduleName = guessCJSModuleName ( functionContext.function ) ;
Distance : 4

223
Tree	String moduleName = guessCJSModuleName ( script , script , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , script , script , moduleName ) ;
Distance : 6

224
Tree	String script = script ( moduleName ) ;
Code	String script = script ( moduleName ) ;
Distance : 6

225
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

226
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 9

227
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

228
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

229
Tree	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) ) ;
Distance : 6

230
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 4

231
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

232
Tree	String moduleName = guessCJSModuleName ( script ( moduleName . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script ( moduleName . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

233
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

234
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

235
Tree	String moduleName = guessCJSModuleName ( realType ) ;
Code	String moduleName = guessCJSModuleName ( realType ) ;
Distance : 4

236
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , Token.ROOT ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , Token.ROOT ) ;
Distance : 7

237
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( script ( script . getSourceFileName () ) ) ) ;
Distance : 8

238
Tree	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

239
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

240
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

241
Tree	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 5

242
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

243
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , moduleName ) ;
Distance : 5

244
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 8

245
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

246
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

247
Tree	String script = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 7

248
Tree	String script = getSourceFileName ( script , script , false ) ;
Code	String script = getSourceFileName ( script , script , false ) ;
Distance : 6

249
Tree	String moduleName = guessCJSModuleName ( functionContext.function , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( functionContext.function , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

250
Tree	String moduleName = getSourceFileName ( script , this . moduleName ) ;
Code	String moduleName = getSourceFileName ( script , this . moduleName ) ;
Distance : 5

251
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 9

252
Tree	String moduleName = getSourceFileName ( script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 7

253
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 6

254
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

255
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 8

256
Tree	String moduleName = guessCJSModuleName ( googProvide , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( googProvide , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

257
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

258
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

259
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 8

260
Tree	String moduleName = guessCJSModuleName ( - , flags.outputWrapper ) ;
Code	String moduleName = guessCJSModuleName ( - , flags.outputWrapper ) ;
Distance : 4

261
Tree	String moduleName = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = script . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

262
Tree	String moduleName = moduleName ( script ) ; TypeInferenceMode.CHECKED
Code	String moduleName = moduleName ( script ) ; TypeInferenceMode.CHECKED
Distance : 5

263
Tree	String moduleName = guessCJSModuleName ( moduleName . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( moduleName . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

264
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script ) ) ) ;
Distance : 5

265
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 6

266
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; TypeInferenceMode.CHECKED
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; TypeInferenceMode.CHECKED
Distance : 15

267
Tree	String moduleName = guessCJSModuleName ( moduleName , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 8

268
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script ) ) ) ;
Distance : 6

269
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

270
Tree	String script = guessCJSModuleName ( script , this . moduleName ) ;
Code	String script = guessCJSModuleName ( script , this . moduleName ) ;
Distance : 5

271
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

272
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

273
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

274
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

275
Tree	String moduleName = guessCJSModuleName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

276
Tree	String moduleName = moduleName ( moduleName , script , moduleName ) ;
Code	String moduleName = moduleName ( moduleName , script , moduleName ) ;
Distance : 6

277
Tree	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) , script ) ;
Code	String script = guessCJSModuleName ( script ( script . getSourceFileName () ) , script ) ;
Distance : 6

278
Tree	String script = getSourceFileName ( script , script ) ;
Code	String script = getSourceFileName ( script , script ) ;
Distance : 5

279
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 8

280
Tree	String moduleName = getSourceFileName ( script , script , true ) ;
Code	String moduleName = getSourceFileName ( script , script , true ) ;
Distance : 5

281
Tree	String moduleName = guessCJSModuleName ( script , moduleName , false ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , false ) ;
Distance : 4

282
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , script ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , script ( script ( script . getSourceFileName () ) ) ) ;
Distance : 9

283
Tree	String moduleName = guessCJSModuleName ( assignment.oldName , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( assignment.oldName , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

284
Tree	String moduleName = script ( script , script ) ;
Code	String moduleName = script ( script , script ) ;
Distance : 4

285
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

286
Tree	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 5

287
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

288
Tree	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

289
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

290
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ; disableTypeCheck
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ; disableTypeCheck
Distance : 4

291
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , true , - ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , true , - ) ;
Distance : 5

292
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

293
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , GlobalTypeInfoCollector.INVALID_PROP_OVERRIDE ) ;
Distance : 7

294
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , moduleName . getSourceFileName () ) ;
Distance : 11

295
Tree	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

296
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; lines
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; lines
Distance : 10

297
Tree	String moduleName = guessCJSModuleName ( moduleName , script ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , script ) ;
Distance : 4

298
Tree	String moduleName = guessCJSModuleName ( moduleName , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , script , moduleName ) ;
Distance : 5

299
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ; TypeInferenceMode.CHECKED
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ; TypeInferenceMode.CHECKED
Distance : 4

300
Tree	String moduleName = getSourceFileName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

301
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; get
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; get
Distance : 10

302
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

303
Tree	String script = script ( script , script ) ;
Code	String script = script ( script , script ) ;
Distance : 5

304
Tree	String script = guessCJSModuleName ( script , moduleName ) ;
Code	String script = guessCJSModuleName ( script , moduleName ) ;
Distance : 4

305
Tree	String moduleName = guessCJSModuleName ( moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , moduleName ) ;
Distance : 4

306
Tree	String moduleName = guessCJSModuleName ( moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName ) ;
Distance : 4

307
Tree	String script = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 9

308
Tree	String moduleName = guessCJSModuleName ( realType , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( realType , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

309
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , moduleName ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , moduleName ) ;
Distance : 6

310
Tree	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , script . getSourceFileName () ) ;
Distance : 11

311
Tree	String moduleName = guessCJSModuleName ( script , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , moduleName ) ;
Distance : 4

312
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , moduleName . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , moduleName . getSourceFileName () ) ;
Distance : 11

313
Tree	String moduleName = moduleName ( moduleName , moduleName ) ;
Code	String moduleName = moduleName ( moduleName , moduleName ) ;
Distance : 5

314
Tree	String moduleName = guessCJSModuleName ( script ) ; disableTypeCheck
Code	String moduleName = guessCJSModuleName ( script ) ; disableTypeCheck
Distance : 4

315
Tree	String script = getSourceFileName ( script , this . script ) ;
Code	String script = getSourceFileName ( script , this . script ) ;
Distance : 6

316
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; lines
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; lines
Distance : 8

317
Tree	String moduleName = guessCJSModuleName ( ++ , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( ++ , CHAR_CONS , - ) ;
Distance : 5

318
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , moduleName ) ;
Distance : 5

319
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; for
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; for
Distance : 10

320
Tree	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

321
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

322
Tree	String script = guessCJSModuleName ( script , script , moduleName ) ;
Code	String script = guessCJSModuleName ( script , script , moduleName ) ;
Distance : 5

323
Tree	String moduleName = guessCJSModuleName ( moduleName , this . moduleName ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , this . moduleName ) ;
Distance : 5

324
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

325
Tree	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST ) ;
Code	String moduleName = getSourceFileName ( Feature.OBJECT_PATTERN_REST ) ;
Distance : 5

326
Tree	String moduleName = getSourceFileName ( script , moduleName , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , moduleName , moduleName , moduleName ) ;
Distance : 7

327
Tree	String moduleName = guessCJSModuleName ( bindComponents.thisValue , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( bindComponents.thisValue , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

328
Tree	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + moduleName + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 8

329
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 7

330
Tree	String moduleName = moduleName ( script , moduleName , script ) ;
Code	String moduleName = moduleName ( script , moduleName , script ) ;
Distance : 5

331
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; pname
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; pname
Distance : 10

332
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 6

333
Tree	String script = script ( script ) ;
Code	String script = script ( script ) ;
Distance : 5

334
Tree	String moduleName = guessCJSModuleName ( assignment.oldName , script ) ;
Code	String moduleName = guessCJSModuleName ( assignment.oldName , script ) ;
Distance : 4

335
Tree	String script = guessCJSModuleName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

336
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , ResolutionMode.BROWSER ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , ResolutionMode.BROWSER ) ;
Distance : 7

337
Tree	String moduleName = guessCJSModuleName ( DiagnosticGroups.LINT_CHECKS , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( DiagnosticGroups.LINT_CHECKS , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

338
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

339
Tree	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

340
Tree	String moduleName = getSourceFileName ( script , script , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName , moduleName ) ;
Distance : 7

341
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script ) ) ) ;
Distance : 7

342
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

343
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , var.name ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , var.name ) ;
Distance : 4

344
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , CHAR_CONS ) ;
Distance : 5

345
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , TokenType.OPEN_ANGLE ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , TokenType.OPEN_ANGLE ) ;
Distance : 7

346
Tree	String moduleName = getSourceFileName ( script , script ) ;
Code	String moduleName = getSourceFileName ( script , script ) ;
Distance : 4

347
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , script ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , script ) ;
Distance : 4

348
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , CHAR_CONS , - ) ;
Distance : 5

349
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Feature.ARRAY_PATTERN_REST ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Feature.ARRAY_PATTERN_REST ) ;
Distance : 4

350
Tree	String script = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Code	String script = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 6

351
Tree	String moduleName = guessCJSModuleName ( script , parent.rootNode ) ;
Code	String moduleName = guessCJSModuleName ( script , parent.rootNode ) ;
Distance : 3

352
Tree	String moduleName = guessCJSModuleName ( googProvide ) ;
Code	String moduleName = guessCJSModuleName ( googProvide ) ;
Distance : 4

353
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 9

354
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , flags.outputWrapper ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , flags.outputWrapper ) ;
Distance : 4

355
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , null , TypeValidator.TYPE_MISMATCH_WARNING ) ;
Distance : 8

356
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ;
Distance : 4

357
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , functionName ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , functionName ) ;
Distance : 7

358
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , pair.env ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , pair.env ) ;
Distance : 4

359
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

360
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL ) ;
Distance : 4

361
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , recvLvalue.env ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , recvLvalue.env ) ;
Distance : 4

362
Tree	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 8

363
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

364
Tree	String moduleName = guessCJSModuleName ( script , Token.SHEQ ) ;
Code	String moduleName = guessCJSModuleName ( script , Token.SHEQ ) ;
Distance : 3

365
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , TokenType.OPEN_PAREN ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , TokenType.OPEN_PAREN ) ;
Distance : 4

366
Tree	String script = getSourceFileName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( script ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

367
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , Map.Entry ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) , Map.Entry ) ;
Distance : 5

368
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , StrictMode.SLOPPY ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , StrictMode.SLOPPY ) ;
Distance : 7

369
Tree	String moduleName = moduleName ( moduleName , moduleName , moduleName ) ;
Code	String moduleName = moduleName ( moduleName , moduleName , moduleName ) ;
Distance : 6

370
Tree	String script = guessCJSModuleName ( script , this . script ) ;
Code	String script = guessCJSModuleName ( script , this . script ) ;
Distance : 5

371
Tree	String moduleName = guessCJSModuleName ( Feature.TRAILING_COMMA ) ;
Code	String moduleName = guessCJSModuleName ( Feature.TRAILING_COMMA ) ;
Distance : 4

372
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

373
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , TokenType.OPEN_PAREN ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , TokenType.OPEN_PAREN ) ;
Distance : 4

374
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 4

375
Tree	String moduleName = guessCJSModuleName ( script , recvLvalue.env ) ;
Code	String moduleName = guessCJSModuleName ( script , recvLvalue.env ) ;
Distance : 3

376
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , CheckConformance.CONFORMANCE_VIOLATION ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , CheckConformance.CONFORMANCE_VIOLATION ) ;
Distance : 4

377
Tree	String moduleName = guessCJSModuleName ( script , pair.env ) ;
Code	String moduleName = guessCJSModuleName ( script , pair.env ) ;
Distance : 3

378
Tree	String moduleName = guessCJSModuleName ( script , moduleName , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName , moduleName , moduleName ) ;
Distance : 6

379
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , recvLvalue.env ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , recvLvalue.env ) ;
Distance : 4

380
Tree	String moduleName = moduleName ( script , moduleName , moduleName ) ;
Code	String moduleName = moduleName ( script , moduleName , moduleName ) ;
Distance : 5

381
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

382
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

383
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , loopNode.body ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , loopNode.body ) ;
Distance : 7

384
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 7

385
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , inheritedPropDef.methodType ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , inheritedPropDef.methodType ) ;
Distance : 4

386
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , replaceFirst ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , replaceFirst ) ;
Distance : 5

387
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script ( script . getSourceFileName () ) ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 8

388
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

389
Tree	String moduleName = guessCJSModuleName ( realType , script ) ;
Code	String moduleName = guessCJSModuleName ( realType , script ) ;
Distance : 4

390
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

391
Tree	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String moduleName = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

392
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , null , ModuleLoader.JSC_BROWSER_BLACKLISTED_MARKER ) ;
Distance : 7

393
Tree	String moduleName = guessCJSModuleName ( bindComponents.thisValue ) ;
Code	String moduleName = guessCJSModuleName ( bindComponents.thisValue ) ;
Distance : 4

394
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ;
Distance : 5

395
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName . getSourceFileName () ) ;
Distance : 10

396
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , Token.ROOT ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , Token.ROOT ) ;
Distance : 8

397
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

398
Tree	String moduleName = guessCJSModuleName ( DiagnosticGroups.LINT_CHECKS , script ) ;
Code	String moduleName = guessCJSModuleName ( DiagnosticGroups.LINT_CHECKS , script ) ;
Distance : 4

399
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , script ) ;
Distance : 5

400
Tree	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

401
Tree	String moduleName = guessCJSModuleName ( script , flags.outputWrapper ) ;
Code	String moduleName = guessCJSModuleName ( script , flags.outputWrapper ) ;
Distance : 3

402
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

403
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , replaceFirst ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , replaceFirst ) ;
Distance : 8

404
Tree	String script = moduleName ( script , script ) ;
Code	String script = moduleName ( script , script ) ;
Distance : 5

405
Tree	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Code	String moduleName = moduleName . getSourceFileName ( script , script , script ) ;
Distance : 7

406
Tree	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

407
Tree	String moduleName = moduleName ( moduleName ) ;
Code	String moduleName = moduleName ( moduleName ) ;
Distance : 5

408
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 10

409
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Token.SHEQ ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , Token.SHEQ ) ;
Distance : 4

410
Tree	String moduleName = guessCJSModuleName ( assignment.oldName ) ;
Code	String moduleName = guessCJSModuleName ( assignment.oldName ) ;
Distance : 4

411
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName . getSourceFileName () ) ;
Distance : 10

412
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 7

413
Tree	String moduleName = getSourceFileName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( STRING_CONSTANT , script ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

414
Tree	String moduleName = guessCJSModuleName ( script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script , moduleName ) ;
Distance : 3

415
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) ) ;
Distance : 4

416
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , flags.outputWrapper ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , flags.outputWrapper ) ;
Distance : 4

417
Tree	String moduleName = guessCJSModuleName ( functionContext.function , script ) ;
Code	String moduleName = guessCJSModuleName ( functionContext.function , script ) ;
Distance : 4

418
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

419
Tree	String moduleName = guessCJSModuleName ( - , CHAR_CONS , - ) ;
Code	String moduleName = guessCJSModuleName ( - , CHAR_CONS , - ) ;
Distance : 5

420
Tree	String moduleName = guessCJSModuleName ( script , this . script ) ;
Code	String moduleName = guessCJSModuleName ( script , this . script ) ;
Distance : 4

421
Tree	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , operator.type ) ;
Code	String moduleName = guessCJSModuleName ( Feature.OBJECT_PATTERN_REST , operator.type ) ;
Distance : 4

422
Tree	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

423
Tree	String moduleName = guessCJSModuleName ( CHAR_CONS , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = guessCJSModuleName ( CHAR_CONS , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

424
Tree	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String script = moduleName . getSourceFileName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

425
Tree	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( script ( script ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

426
Tree	String moduleName = getSourceFileName ( script , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	String moduleName = getSourceFileName ( script , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

427
Tree	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( script ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 10

428
Tree	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; []
Code	String moduleName = guessCJSModuleName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; []
Distance : 10

429
Tree	String moduleName = getSourceFileName ( script , script , false ) ;
Code	String moduleName = getSourceFileName ( script , script , false ) ;
Distance : 5

430
Tree	String script = moduleName . getSourceFileName ( script , script , moduleName ) ;
Code	String script = moduleName . getSourceFileName ( script , script , moduleName ) ;
Distance : 8

431
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 5

432
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , types ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , types ) ;
Distance : 5

433
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) , STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) , STRING_CONSTANT ) ;
Distance : 6

434
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script ( script . getSourceFileName () ) ) ) ;
Distance : 7

435
Tree	String moduleName = guessCJSModuleName ( script ) ; TypeInferenceMode.CHECKED
Code	String moduleName = guessCJSModuleName ( script ) ; TypeInferenceMode.CHECKED
Distance : 4

436
Tree	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( script ( script . getSourceFileName () ) ) ;
Distance : 3

437
Tree	String script = moduleName ( script , moduleName ) ;
Code	String script = moduleName ( script , moduleName ) ;
Distance : 5

438
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script . getSourceFileName () ) ;
Distance : 10

439
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script ( script ) ) ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 440
Correct
========================================================================
True

0
Tree	c ( c )
Code	c ( c )
Distance : 6

1
Tree	this
Code	this
Distance : 9

2
Tree	NodeUtil
Code	NodeUtil
Distance : 9

3
Tree	key
Code	key
Distance : 9

4
Tree	c
Code	c
Distance : 8

5
Tree	throw
Code	throw
Distance : 9

6
Tree	c . canInline () pname
Code	c . canInline () pname
Distance : 5

7
Tree	c . canInline ( c , t )
Code	c . canInline ( c , t )
Distance : 4

8
Tree	new IllegalStateException ( c ) . canInline ( c . getScope () )
Code	new IllegalStateException ( c ) . canInline ( c . getScope () )
Distance : 5

9
Tree	getScope ( c ) . canInline ()
Code	getScope ( c ) . canInline ()
Distance : 7

10
Tree	c . getScope ( c . canInline () )
Code	c . getScope ( c . canInline () )
Distance : 3

11
Tree	c . canInline () . () ( FeatureSet.ES6 )
Code	c . canInline () . () ( FeatureSet.ES6 )
Distance : 5

12
Tree	c . canInline () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c . canInline () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 5

13
Tree	new IllegalStateException ( c ) . canInline ( c . canInline () )
Code	new IllegalStateException ( c ) . canInline ( c . canInline () )
Distance : 6

14
Tree	c . canInline ( c . canInline () )
Code	c . canInline ( c . canInline () )
Distance : 2

15
Tree	t . canInline ( NUMBER_CONSTANT )
Code	t . canInline ( NUMBER_CONSTANT )
Distance : 5

16
Tree	c . canInline () []
Code	c . canInline () []
Distance : 5

17
Tree	t . canInline ( STRING_CONSTANT )
Code	t . canInline ( STRING_CONSTANT )
Distance : 5

18
Tree	c . canInline () . () ()
Code	c . canInline () . () ()
Distance : 4

19
Tree	t . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	t . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 6

20
Tree	t . getScope ( NUMBER_CONSTANT )
Code	t . getScope ( NUMBER_CONSTANT )
Distance : 6

21
Tree	( ( t ) c ) . canInline ()
Code	( ( t ) c ) . canInline ()
Distance : 8

22
Tree	c . canInline ( t , true )
Code	c . canInline ( t , true )
Distance : 3

23
Tree	new c () . canInline ( t )
Code	new c () . canInline ( t )
Distance : 5

24
Tree	t . canInline ( c , c )
Code	t . canInline ( c , c )
Distance : 5

25
Tree	c . canInline ( c , c . canInline () )
Code	c . canInline ( c , c . canInline () )
Distance : 4

26
Tree	t . canInline ( c , true )
Code	t . canInline ( c , true )
Distance : 5

27
Tree	new throw () . () ( c . canInline () )
Code	new throw () . () ( c . canInline () )
Distance : 6

28
Tree	canInline () . () ( c . canInline () )
Code	canInline () . () ( c . canInline () )
Distance : 5

29
Tree	t . getScope () . getScope ( c )
Code	t . getScope () . getScope ( c )
Distance : 6

30
Tree	c ( t . getScope () )
Code	c ( t . getScope () )
Distance : 2

31
Tree	getScope () . getScope ( t )
Code	getScope () . getScope ( t )
Distance : 6

32
Tree	new t () . () ( t )
Code	new t () . () ( t )
Distance : 7

33
Tree	STRING_CONSTANT . canInline ( t . getScope () )
Code	STRING_CONSTANT . canInline ( t . getScope () )
Distance : 1

34
Tree	c . canInline ( t ) . getScope ()
Code	c . canInline ( t ) . getScope ()
Distance : 2

35
Tree	getScope () . () ( t )
Code	getScope () . () ( t )
Distance : 6

36
Tree	this . c . getScope () for
Code	this . c . getScope () for
Distance : 5

37
Tree	this . c . getScope () pname
Code	this . c . getScope () pname
Distance : 5

38
Tree	this . c . getScope () []
Code	this . c . getScope () []
Distance : 5

39
Tree	getScope ( c ) . canInline () disableTypeCheck
Code	getScope ( c ) . canInline () disableTypeCheck
Distance : 7

40
Tree	getScope ( c ) . canInline () TypeInferenceMode.CHECKED
Code	getScope ( c ) . canInline () TypeInferenceMode.CHECKED
Distance : 7

41
Tree	STRING_CONSTANT . canInline ( c . canInline () ) disableTypeCheck
Code	STRING_CONSTANT . canInline ( c . canInline () ) disableTypeCheck
Distance : 4

42
Tree	getScope ( t . getScope () )
Code	getScope ( t . getScope () )
Distance : 3

43
Tree	c . canInline ( t , c , c . canInline () )
Code	c . canInline ( t , c , c . canInline () )
Distance : 5

44
Tree	STRING_CONSTANT . getScope ( c . canInline () )
Code	STRING_CONSTANT . getScope ( c . canInline () )
Distance : 4

45
Tree	c . getScope ( c , c , c . canInline () )
Code	c . getScope ( c , c , c . canInline () )
Distance : 7

46
Tree	getScope ( t , c )
Code	getScope ( t , c )
Distance : 6

47
Tree	c . getScope () . getScope ()
Code	c . getScope () . getScope ()
Distance : 4

48
Tree	c () . getScope ( c . getScope () )
Code	c () . getScope ( c . getScope () )
Distance : 3

49
Tree	this . c . getScope () lines
Code	this . c . getScope () lines
Distance : 5

50
Tree	c . canInline ( NUMBER_CONSTANT ) for
Code	c . canInline ( NUMBER_CONSTANT ) for
Distance : 5

51
Tree	c . canInline ( Feature.KEYWORDS_AS_PROPERTIES )
Code	c . canInline ( Feature.KEYWORDS_AS_PROPERTIES )
Distance : 4

52
Tree	c . canInline ( currentScript.defaultExportLocalName )
Code	c . canInline ( currentScript.defaultExportLocalName )
Distance : 4

53
Tree	new throw ( c ) . canInline ()
Code	new throw ( c ) . canInline ()
Distance : 7

54
Tree	c . canInline ( PassNames.PARSE_INPUTS )
Code	c . canInline ( PassNames.PARSE_INPUTS )
Distance : 4

55
Tree	c ( c ) Override
Code	c ( c ) Override
Distance : 7

56
Tree	c ( c ) get
Code	c ( c ) get
Distance : 7

57
Tree	c . canInline ( Token.LABEL_NAME )
Code	c . canInline ( Token.LABEL_NAME )
Distance : 4

58
Tree	new c () . canInline ( c )
Code	new c () . canInline ( c )
Distance : 6

59
Tree	this . c . canInline ()
Code	this . c . canInline ()
Distance : 6

60
Tree	last
Code	last
Distance : 9

61
Tree	next
Code	next
Distance : 9

62
Tree	statement
Code	statement
Distance : 9

63
Tree	incrementalCheckMode
Code	incrementalCheckMode
Distance : 9

64
Tree	getScope () . () () []
Code	getScope () . () () []
Distance : 7

65
Tree	c . canInline ( NUMBER_CONSTANT ) lines
Code	c . canInline ( NUMBER_CONSTANT ) lines
Distance : 5

66
Tree	c . canInline ( NUMBER_CONSTANT ) Override
Code	c . canInline ( NUMBER_CONSTANT ) Override
Distance : 5

67
Tree	( ( c ) c ) . canInline () TypeInferenceMode.CHECKED
Code	( ( c ) c ) . canInline () TypeInferenceMode.CHECKED
Distance : 8

68
Tree	c . canInline () []
Code	c . canInline () []
Distance : 5

69
Tree	c . canInline () Override
Code	c . canInline () Override
Distance : 5

70
Tree	c . canInline () . () () TypeInferenceMode.CHECKED
Code	c . canInline () . () () TypeInferenceMode.CHECKED
Distance : 4

71
Tree	c . canInline ( null )
Code	c . canInline ( null )
Distance : 4

72
Tree	canInline ( c () , c . getScope () )
Code	canInline ( c () , c . getScope () )
Distance : 6

73
Tree	c . canInline ( STRING_CONSTANT ) get
Code	c . canInline ( STRING_CONSTANT ) get
Distance : 5

74
Tree	getScope ( c ) for
Code	getScope ( c ) for
Distance : 8

75
Tree	getScope ( c ) get
Code	getScope ( c ) get
Distance : 8

76
Tree	getScope ( c ) Override
Code	getScope ( c ) Override
Distance : 8

77
Tree	getScope ( c ) lines
Code	getScope ( c ) lines
Distance : 8

78
Tree	c . canInline ( STRING_CONSTANT ) for
Code	c . canInline ( STRING_CONSTANT ) for
Distance : 5

79
Tree	c . canInline ( STRING_CONSTANT ) pname
Code	c . canInline ( STRING_CONSTANT ) pname
Distance : 5

80
Tree	c . canInline ( STRING_CONSTANT ) []
Code	c . canInline ( STRING_CONSTANT ) []
Distance : 5

81
Tree	new LiveVariablesAnalysis ( c ) . canInline ( c )
Code	new LiveVariablesAnalysis ( c ) . canInline ( c )
Distance : 8

82
Tree	InvalidatingTypes.Builder . canInline ()
Code	InvalidatingTypes.Builder . canInline ()
Distance : 6

83
Tree	this . t . getScope ()
Code	this . t . getScope ()
Distance : 4

84
Tree	c . canInline ( Var.ARGUMENTS )
Code	c . canInline ( Var.ARGUMENTS )
Distance : 4

85
Tree	new c ( c ) . canInline ()
Code	new c ( c ) . canInline ()
Distance : 7

86
Tree	c . getScope ( c )
Code	c . getScope ( c )
Distance : 5

87
Tree	getScope ( c , c ) TypeInferenceMode.CHECKED
Code	getScope ( c , c ) TypeInferenceMode.CHECKED
Distance : 8

88
Tree	getScope ( c , c ) disableTypeCheck
Code	getScope ( c , c ) disableTypeCheck
Distance : 8

89
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) get
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) get
Distance : 5

90
Tree	c . canInline ( t , c )
Code	c . canInline ( t , c )
Distance : 3

91
Tree	c . getScope ( c , c )
Code	c . getScope ( c , c )
Distance : 5

92
Tree	c . canInline ( Compiler.PARSING_PASS_NAME )
Code	c . canInline ( Compiler.PARSING_PASS_NAME )
Distance : 4

93
Tree	new CodePrinter.Builder ( c ) . c ()
Code	new CodePrinter.Builder ( c ) . c ()
Distance : 7

94
Tree	c . getScope ( c . getScope () )
Code	c . getScope ( c . getScope () )
Distance : 2

95
Tree	c . canInline ( default: )
Code	c . canInline ( default: )
Distance : 4

96
Tree	c . canInline ( c , c . getScope () )
Code	c . canInline ( c , c . getScope () )
Distance : 3

97
Tree	getScope ( c , t )
Code	getScope ( c , t )
Distance : 7

98
Tree	new functionBody () . () ( c . canInline () )
Code	new functionBody () . () ( c . canInline () )
Distance : 6

99
Tree	new RemovableBuilder ( c ) . canInline ()
Code	new RemovableBuilder ( c ) . canInline ()
Distance : 7

100
Tree	getScope () . () ( PassNames.PARSE_INPUTS )
Code	getScope () . () ( PassNames.PARSE_INPUTS )
Distance : 7

101
Tree	c . getScope ( c , c . canInline () )
Code	c . getScope ( c , c . canInline () )
Distance : 5

102
Tree	c . getScope ( c , t )
Code	c . getScope ( c , t )
Distance : 5

103
Tree	c . canInline () . getScope ( FeatureSet.ES6 )
Code	c . canInline () . getScope ( FeatureSet.ES6 )
Distance : 4

104
Tree	c . canInline () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c . canInline () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 4

105
Tree	t . canInline ( t )
Code	t . canInline ( t )
Distance : 4

106
Tree	getScope () . getScope ( c )
Code	getScope () . getScope ( c )
Distance : 7

107
Tree	c ()
Code	c ()
Distance : 7

108
Tree	getScope () . () ( RandomNameGenerator.NONFIRST_CHAR )
Code	getScope () . () ( RandomNameGenerator.NONFIRST_CHAR )
Distance : 7

109
Tree	currentScript.declareLegacyNamespace . canInline ()
Code	currentScript.declareLegacyNamespace . canInline ()
Distance : 6

110
Tree	new PeepholeFoldConstants ( c ) . canInline ()
Code	new PeepholeFoldConstants ( c ) . canInline ()
Distance : 7

111
Tree	getScope ( c ) . getScope ()
Code	getScope ( c ) . getScope ()
Distance : 6

112
Tree	c . canInline ( return; )
Code	c . canInline ( return; )
Distance : 4

113
Tree	c . canInline ( t . getScope () )
Code	c . canInline ( t . getScope () )
Distance : 0

114
Tree	c ( c ) . canInline ()
Code	c ( c ) . canInline ()
Distance : 6

115
Tree	c . getScope ( c , c , c . getScope () )
Code	c . getScope ( c , c , c . getScope () )
Distance : 6

116
Tree	c . getScope () . getScope ( c )
Code	c . getScope () . getScope ( c )
Distance : 5

117
Tree	c . canInline () . () ( JSTypes.OBJLIT_CLASS_NAME )
Code	c . canInline () . () ( JSTypes.OBJLIT_CLASS_NAME )
Distance : 5

118
Tree	new throw ( c ) . canInline ( c . canInline () )
Code	new throw ( c ) . canInline ( c . canInline () )
Distance : 6

119
Tree	c . canInline ( continue; )
Code	c . canInline ( continue; )
Distance : 4

120
Tree	c . getScope ( c ) . c ()
Code	c . getScope ( c ) . c ()
Distance : 5

121
Tree	c () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 6

122
Tree	new c () . getScope ( c )
Code	new c () . getScope ( c )
Distance : 7

123
Tree	c . canInline ( STRING_CONSTANT )
Code	c . canInline ( STRING_CONSTANT )
Distance : 4

124
Tree	new RuntimeException ( c ) . canInline ()
Code	new RuntimeException ( c ) . canInline ()
Distance : 7

125
Tree	c . getScope ( break; )
Code	c . getScope ( break; )
Distance : 5

126
Tree	c ( getScope () , c . getScope () )
Code	c ( getScope () , c . getScope () )
Distance : 5

127
Tree	c ( c . getScope () )
Code	c ( c . getScope () )
Distance : 3

128
Tree	STRING_CONSTANT . getScope ( c . getScope () )
Code	STRING_CONSTANT . getScope ( c . getScope () )
Distance : 3

129
Tree	new LiveVariablesAnalysis ( c ) . canInline ()
Code	new LiveVariablesAnalysis ( c ) . canInline ()
Distance : 7

130
Tree	t . getScope ( t , c )
Code	t . getScope ( t , c )
Distance : 5

131
Tree	canInline ( c ) . getScope ()
Code	canInline ( c ) . getScope ()
Distance : 5

132
Tree	t . canInline () . c ()
Code	t . canInline () . c ()
Distance : 5

133
Tree	new RemovableBuilder () . c ( c . canInline () )
Code	new RemovableBuilder () . c ( c . canInline () )
Distance : 6

134
Tree	c . getScope ( t . canInline () )
Code	c . getScope ( t . canInline () )
Distance : 2

135
Tree	c . getScope ( c , c . getScope () )
Code	c . getScope ( c , c . getScope () )
Distance : 4

136
Tree	c . canInline ( c . getScope () , c . getScope () )
Code	c . canInline ( c . getScope () , c . getScope () )
Distance : 6

137
Tree	c . canInline () for
Code	c . canInline () for
Distance : 5

138
Tree	c . canInline ( c , c , c . getScope () )
Code	c . canInline ( c , c , c . getScope () )
Distance : 5

139
Tree	canInline ( c , c )
Code	canInline ( c , c )
Distance : 6

140
Tree	c . canInline ( c , c , c . canInline () )
Code	c . canInline ( c , c , c . canInline () )
Distance : 6

141
Tree	c . canInline () . getScope ( c )
Code	c . canInline () . getScope ( c )
Distance : 4

142
Tree	new t () . getScope ( c )
Code	new t () . getScope ( c )
Distance : 7

143
Tree	c . canInline ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c . canInline ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 4

144
Tree	new CodePrinter.Builder () . canInline ( c . canInline () )
Code	new CodePrinter.Builder () . canInline ( c . canInline () )
Distance : 5

145
Tree	c . getScope ( default: )
Code	c . getScope ( default: )
Distance : 5

146
Tree	new throw ( c ) . canInline ( c )
Code	new throw ( c ) . canInline ( c )
Distance : 8

147
Tree	c . canInline ( NUMBER_CONSTANT )
Code	c . canInline ( NUMBER_CONSTANT )
Distance : 4

148
Tree	getScope () . () ( t . canInline () )
Code	getScope () . () ( t . canInline () )
Distance : 4

149
Tree	getScope ( STRING_CONSTANT )
Code	getScope ( STRING_CONSTANT )
Distance : 7

150
Tree	c . canInline ( t , t )
Code	c . canInline ( t , t )
Distance : 3

151
Tree	new functionBody ( c ) . canInline ( c )
Code	new functionBody ( c ) . canInline ( c )
Distance : 8

152
Tree	c ( c )
Code	c ( c )
Distance : 6

153
Tree	getScope ( c , c )
Code	getScope ( c , c )
Distance : 7

154
Tree	getScope () block
Code	getScope () block
Distance : 7

155
Tree	new t () . getScope ( t )
Code	new t () . getScope ( t )
Distance : 7

156
Tree	getScope () . () ( c . getScope () )
Code	getScope () . () ( c . getScope () )
Distance : 4

157
Tree	t . getScope ( getScope () , c . canInline () )
Code	t . getScope ( getScope () , c . canInline () )
Distance : 7

158
Tree	c . canInline ( new RemovableBuilder ( c ) )
Code	c . canInline ( new RemovableBuilder ( c ) )
Distance : 5

159
Tree	c () . () ( t )
Code	c () . () ( t )
Distance : 5

160
Tree	t . canInline ( getScope () , c . . () )
Code	t . canInline ( getScope () , c . . () )
Distance : 6

161
Tree	STRING_CONSTANT . canInline ( c . getScope () )
Code	STRING_CONSTANT . canInline ( c . getScope () )
Distance : 2

162
Tree	getScope () js
Code	getScope () js
Distance : 7

163
Tree	getScope ( c () , c . getScope () )
Code	getScope ( c () , c . getScope () )
Distance : 6

164
Tree	c . canInline ( t , c . canInline () )
Code	c . canInline ( t , c . canInline () )
Distance : 3

165
Tree	getScope () . () ( t . getScope () )
Code	getScope () . () ( t . getScope () )
Distance : 3

166
Tree	c . canInline ( t . canInline () )
Code	c . canInline ( t . canInline () )
Distance : 1

167
Tree	new c ( c ) . canInline ( c )
Code	new c ( c ) . canInline ( c )
Distance : 8

168
Tree	c . canInline ( c , true )
Code	c . canInline ( c , true )
Distance : 4

169
Tree	c ( STRING_CONSTANT )
Code	c ( STRING_CONSTANT )
Distance : 6

170
Tree	c () . getScope ( c . canInline () )
Code	c () . getScope ( c . canInline () )
Distance : 4

171
Tree	c . canInline () get
Code	c . canInline () get
Distance : 5

172
Tree	c . canInline ( idToken.value )
Code	c . canInline ( idToken.value )
Distance : 4

173
Tree	c () . () ()
Code	c () . () ()
Distance : 6

174
Tree	c . getScope ( c () , c . c () )
Code	c . getScope ( c () , c . c () )
Distance : 6

175
Tree	; . canInline ()
Code	; . canInline ()
Distance : 6

176
Tree	c . getScope ( c . canInline () , c . getScope () )
Code	c . getScope ( c . canInline () , c . getScope () )
Distance : 7

177
Tree	t . canInline ( c . canInline () )
Code	t . canInline ( c . canInline () )
Distance : 3

178
Tree	c . canInline ( t )
Code	c . canInline ( t )
Distance : 3

179
Tree	new CodePrinter.Builder ( c ) . canInline ( c )
Code	new CodePrinter.Builder ( c ) . canInline ( c )
Distance : 8

180
Tree	hasTypeCheckingRun . canInline ()
Code	hasTypeCheckingRun . canInline ()
Distance : 6

181
Tree	getScope () . getScope ( c . getScope () )
Code	getScope () . getScope ( c . getScope () )
Distance : 4

182
Tree	c . canInline ( c , new PeepholeFoldConstants ( c ) )
Code	c . canInline ( c , new PeepholeFoldConstants ( c ) )
Distance : 7

183
Tree	getScope () setUp
Code	getScope () setUp
Distance : 7

184
Tree	getScope () . () ( JSTypes.OBJLIT_CLASS_NAME )
Code	getScope () . () ( JSTypes.OBJLIT_CLASS_NAME )
Distance : 7

185
Tree	canInline ( getScope () , c . canInline () )
Code	canInline ( getScope () , c . canInline () )
Distance : 7

186
Tree	c . canInline ( c , c , t . getScope () )
Code	c . canInline ( c , c , t . getScope () )
Distance : 4

187
Tree	c ( c . canInline () )
Code	c ( c . canInline () )
Distance : 4

188
Tree	c . canInline ( c . canInline () , c . canInline () )
Code	c . canInline ( c . canInline () , c . canInline () )
Distance : 7

189
Tree	( ( t ) t ) . getScope ()
Code	( ( t ) t ) . getScope ()
Distance : 6

190
Tree	getScope () node
Code	getScope () node
Distance : 7

191
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 4

192
Tree	c . canInline ( getScope () , c . getScope () )
Code	c . canInline ( getScope () , c . getScope () )
Distance : 4

193
Tree	c . getScope ( null )
Code	c . getScope ( null )
Distance : 5

194
Tree	c . getScope ( t . getScope () )
Code	c . getScope ( t . getScope () )
Distance : 1

195
Tree	c . canInline ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Code	c . canInline ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Distance : 4

196
Tree	getScope () checkNotNull
Code	getScope () checkNotNull
Distance : 7

197
Tree	t . getScope ( c ) . c ()
Code	t . getScope ( c ) . c ()
Distance : 6

198
Tree	new functionBody ( c ) . canInline ( c . canInline () )
Code	new functionBody ( c ) . canInline ( c . canInline () )
Distance : 6

199
Tree	c . getScope () . getScope ( t )
Code	c . getScope () . getScope ( t )
Distance : 5

200
Tree	getScope ( getScope () , c . canInline () )
Code	getScope ( getScope () , c . canInline () )
Distance : 7

201
Tree	c () . getScope ()
Code	c () . getScope ()
Distance : 5

202
Tree	c . canInline ( canInline () , c . canInline () )
Code	c . canInline ( canInline () , c . canInline () )
Distance : 5

203
Tree	getScope ( t . canInline () )
Code	getScope ( t . canInline () )
Distance : 4

204
Tree	c () . () ( c . getScope () )
Code	c () . () ( c . getScope () )
Distance : 3

205
Tree	t . getScope ( c , true )
Code	t . getScope ( c , true )
Distance : 6

206
Tree	getScope () false
Code	getScope () false
Distance : 7

207
Tree	c . canInline ( t ) . c ()
Code	c . canInline ( t ) . c ()
Distance : 3

208
Tree	new IllegalStateException ( c ) . canInline ( c )
Code	new IllegalStateException ( c ) . canInline ( c )
Distance : 8

209
Tree	new RemovableBuilder ( c ) . canInline ( c )
Code	new RemovableBuilder ( c ) . canInline ( c )
Distance : 8

210
Tree	new PeepholeFoldConstants ( c ) . canInline ( c )
Code	new PeepholeFoldConstants ( c ) . canInline ( c )
Distance : 8

211
Tree	new useSourceInfoForNewQName ( c ) . canInline ( c )
Code	new useSourceInfoForNewQName ( c ) . canInline ( c )
Distance : 8

212
Tree	c . canInline ( t . canInline () , c . canInline () )
Code	c . canInline ( t . canInline () , c . canInline () )
Distance : 6

213
Tree	new useSourceInfoForNewQName ( c ) . canInline ()
Code	new useSourceInfoForNewQName ( c ) . canInline ()
Distance : 7

214
Tree	t ( c )
Code	t ( c )
Distance : 7

215
Tree	new RuntimeException () . () ( c . canInline () )
Code	new RuntimeException () . () ( c . canInline () )
Distance : 6

216
Tree	c ( c ) for
Code	c ( c ) for
Distance : 7

217
Tree	c . canInline ( c . getScope () , c . canInline () )
Code	c . canInline ( c . getScope () , c . canInline () )
Distance : 6

218
Tree	new PeepholeFoldConstants () . () ( c . canInline () )
Code	new PeepholeFoldConstants () . () ( c . canInline () )
Distance : 6

219
Tree	c () . () ( c )
Code	c () . () ( c )
Distance : 6

220
Tree	new CodePrinter.Builder ( c ) . canInline ( c . canInline () )
Code	new CodePrinter.Builder ( c ) . canInline ( c . canInline () )
Distance : 6

221
Tree	t . getScope ( t )
Code	t . getScope ( t )
Distance : 5

222
Tree	new LiveVariablesAnalysis ( c ) . canInline ( c . canInline () )
Code	new LiveVariablesAnalysis ( c ) . canInline ( c . canInline () )
Distance : 6

223
Tree	c . getScope () . () ( FeatureSet.ES6 )
Code	c . getScope () . () ( FeatureSet.ES6 )
Distance : 6

224
Tree	t . canInline ( c )
Code	t . canInline ( c )
Distance : 5

225
Tree	new RuntimeException ( c ) . canInline ( c . canInline () )
Code	new RuntimeException ( c ) . canInline ( c . canInline () )
Distance : 6

226
Tree	c . getScope ( c . getScope () , c . getScope () )
Code	c . getScope ( c . getScope () , c . getScope () )
Distance : 7

227
Tree	STRING_CONSTANT . canInline ( t . canInline () )
Code	STRING_CONSTANT . canInline ( t . canInline () )
Distance : 2

228
Tree	c . getScope ( t , true )
Code	c . getScope ( t , true )
Distance : 4

229
Tree	( ( c ) t ) . c ()
Code	( ( c ) t ) . c ()
Distance : 7

230
Tree	t . getScope ( c , c )
Code	t . getScope ( c , c )
Distance : 6

231
Tree	c . canInline () . () ( c )
Code	c . canInline () . () ( c )
Distance : 5

232
Tree	t . getScope ( null )
Code	t . getScope ( null )
Distance : 6

233
Tree	c . canInline ( c ) . getScope ()
Code	c . canInline ( c ) . getScope ()
Distance : 3

234
Tree	c ( t , c )
Code	c ( t , c )
Distance : 5

235
Tree	c . canInline () . () ( other.rawType )
Code	c . canInline () . () ( other.rawType )
Distance : 5

236
Tree	( ( c ) c ) . canInline () disableTypeCheck
Code	( ( c ) c ) . canInline () disableTypeCheck
Distance : 8

237
Tree	t . getScope ( STRING_CONSTANT )
Code	t . getScope ( STRING_CONSTANT )
Distance : 6

238
Tree	STRING_CONSTANT . getScope ( t . canInline () )
Code	STRING_CONSTANT . getScope ( t . canInline () )
Distance : 3

239
Tree	getScope () . () ( c )
Code	getScope () . () ( c )
Distance : 7

240
Tree	c . getScope ( t , false )
Code	c . getScope ( t , false )
Distance : 4

241
Tree	c . canInline () . getScope ()
Code	c . canInline () . getScope ()
Distance : 3

242
Tree	this . t . canInline ()
Code	this . t . canInline ()
Distance : 5

243
Tree	c . getScope ( new StringBuilder ( c ) )
Code	c . getScope ( new StringBuilder ( c ) )
Distance : 6

244
Tree	new RemovableBuilder ( c ) . canInline ( c . canInline () )
Code	new RemovableBuilder ( c ) . canInline ( c . canInline () )
Distance : 6

245
Tree	getScope ( c . getScope () )
Code	getScope ( c . getScope () )
Distance : 4

246
Tree	c . getScope ( STRING_CONSTANT )
Code	c . getScope ( STRING_CONSTANT )
Distance : 5

247
Tree	c . getScope ( getScope () , c . c () )
Code	c . getScope ( getScope () , c . c () )
Distance : 6

248
Tree	new RuntimeException ( c ) . canInline ( c )
Code	new RuntimeException ( c ) . canInline ( c )
Distance : 8

249
Tree	new t () . () ( c )
Code	new t () . () ( c )
Distance : 8

250
Tree	( ( t ) c ) . getScope ()
Code	( ( t ) c ) . getScope ()
Distance : 7

251
Tree	c . getScope () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	c . getScope () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 6

252
Tree	t ( t )
Code	t ( t )
Distance : 6

253
Tree	new throw ( c ) . canInline ( c . getScope () )
Code	new throw ( c ) . canInline ( c . getScope () )
Distance : 5

254
Tree	c . getScope ( t , c , c . getScope () )
Code	c . getScope ( t , c , c . getScope () )
Distance : 5

255
Tree	getScope () . () ( Token.ROOT )
Code	getScope () . () ( Token.ROOT )
Distance : 7

256
Tree	c . canInline () . () ( WINDOW_NAME )
Code	c . canInline () . () ( WINDOW_NAME )
Distance : 5

257
Tree	c . canInline ( c . getScope () )
Code	c . canInline ( c . getScope () )
Distance : 1

258
Tree	c . getScope ( c ) . getScope ()
Code	c . getScope ( c ) . getScope ()
Distance : 4

259
Tree	getScope () >
Code	getScope () >
Distance : 7

260
Tree	c . canInline ( t . getScope () , c . canInline () )
Code	c . canInline ( t . getScope () , c . canInline () )
Distance : 5

261
Tree	new IllegalStateException () . getScope ( c . canInline () )
Code	new IllegalStateException () . getScope ( c . canInline () )
Distance : 6

262
Tree	new PeepholeFoldConstants ( c ) . canInline ( c . canInline () )
Code	new PeepholeFoldConstants ( c ) . canInline ( c . canInline () )
Distance : 6

263
Tree	c . canInline () . c ( AbstractCompiler.READ_ERROR )
Code	c . canInline () . c ( AbstractCompiler.READ_ERROR )
Distance : 5

264
Tree	c . canInline ( c , new useSourceInfoForNewQName ( c ) )
Code	c . canInline ( c , new useSourceInfoForNewQName ( c ) )
Distance : 7

265
Tree	STRING_CONSTANT . canInline ( c . canInline () )
Code	STRING_CONSTANT . canInline ( c . canInline () )
Distance : 3

266
Tree	getScope ( getScope () , t . canInline () )
Code	getScope ( getScope () , t . canInline () )
Distance : 6

267
Tree	new LiveVariablesAnalysis () . () ( c . canInline () )
Code	new LiveVariablesAnalysis () . () ( c . canInline () )
Distance : 6

268
Tree	t . getScope ( c ) . getScope ()
Code	t . getScope ( c ) . getScope ()
Distance : 5

269
Tree	c . canInline ( t , false )
Code	c . canInline ( t , false )
Distance : 3

270
Tree	c . canInline () Override
Code	c . canInline () Override
Distance : 5

271
Tree	c . getScope () . c ()
Code	c . getScope () . c ()
Distance : 5

272
Tree	c . canInline ( c , inheritedPropDef.methodType )
Code	c . canInline ( c , inheritedPropDef.methodType )
Distance : 4

273
Tree	c . getScope ( c , true )
Code	c . getScope ( c , true )
Distance : 5

274
Tree	c . getScope ( Token.LABEL_NAME )
Code	c . getScope ( Token.LABEL_NAME )
Distance : 5

275
Tree	c . canInline () . () () disableTypeCheck
Code	c . canInline () . () () disableTypeCheck
Distance : 4

276
Tree	getScope () . () ( AbstractCompiler.READ_ERROR )
Code	getScope () . () ( AbstractCompiler.READ_ERROR )
Distance : 7

277
Tree	getScope () . () ( Compiler.PARSING_PASS_NAME )
Code	getScope () . () ( Compiler.PARSING_PASS_NAME )
Distance : 7

278
Tree	t . canInline ( null )
Code	t . canInline ( null )
Distance : 5

279
Tree	t . getScope () . () ( c )
Code	t . getScope () . () ( c )
Distance : 7

280
Tree	new IllegalStateException () . () ( c . canInline () )
Code	new IllegalStateException () . () ( c . canInline () )
Distance : 6

281
Tree	getScope ( getScope () , t . getScope () )
Code	getScope ( getScope () , t . getScope () )
Distance : 5

282
Tree	( ( c ) c ) . getScope ()
Code	( ( c ) c ) . getScope ()
Distance : 7

283
Tree	getScope ( STRING_CONSTANT ) of
Code	getScope ( STRING_CONSTANT ) of
Distance : 8

284
Tree	c . canInline () lines
Code	c . canInline () lines
Distance : 5

285
Tree	c . canInline ( c . canInline () , c . getScope () )
Code	c . canInline ( c . canInline () , c . getScope () )
Distance : 6

286
Tree	getScope ( c . canInline () ) TypeInferenceMode.CHECKED
Code	getScope ( c . canInline () ) TypeInferenceMode.CHECKED
Distance : 6

287
Tree	c . canInline ( c , new IllegalStateException ( c ) )
Code	c . canInline ( c , new IllegalStateException ( c ) )
Distance : 7

288
Tree	c . canInline () . getScope ( t )
Code	c . canInline () . getScope ( t )
Distance : 4

289
Tree	getScope ( c () , c . canInline () )
Code	getScope ( c () , c . canInline () )
Distance : 7

290
Tree	c . canInline ( c , new Compiler ( c ) )
Code	c . canInline ( c , new Compiler ( c ) )
Distance : 7

291
Tree	( ( c ) t ) . getScope ()
Code	( ( c ) t ) . getScope ()
Distance : 6

292
Tree	new c () . () ( c . canInline () )
Code	new c () . () ( c . canInline () )
Distance : 5

293
Tree	c . getScope ( t , c )
Code	c . getScope ( t , c )
Distance : 4

294
Tree	getScope () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	getScope () . getScope ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 7

295
Tree	this . c . getScope () Override
Code	this . c . getScope () Override
Distance : 5

296
Tree	c . getScope ( t , c . canInline () )
Code	c . getScope ( t , c . canInline () )
Distance : 4

297
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) lines
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) lines
Distance : 5

298
Tree	c ( t )
Code	c ( t )
Distance : 5

299
Tree	getScope () . () ( FeatureSet.ES6 )
Code	getScope () . () ( FeatureSet.ES6 )
Distance : 7

300
Tree	t . canInline ( c , c . canInline () )
Code	t . canInline ( c , c . canInline () )
Distance : 5

301
Tree	c . canInline ( c , new PreprocessorSymbolTable.CachedInstanceFactory ( c ) )
Code	c . canInline ( c , new PreprocessorSymbolTable.CachedInstanceFactory ( c ) )
Distance : 7

302
Tree	t . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	t . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 5

303
Tree	c . canInline ( STRING_CONSTANT ) lines
Code	c . canInline ( STRING_CONSTANT ) lines
Distance : 5

304
Tree	getScope ( t ) . c ()
Code	getScope ( t ) . c ()
Distance : 6

305
Tree	c . getScope () . () ( c )
Code	c . getScope () . () ( c )
Distance : 6

306
Tree	c () . getScope ( t )
Code	c () . getScope ( t )
Distance : 5

307
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

308
Tree	c . getScope ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Code	c . getScope ( c , Es6ToEs3Util.CANNOT_CONVERT_YET )
Distance : 5

309
Tree	c ( c ) []
Code	c ( c ) []
Distance : 7

310
Tree	c . getScope ( canInline () , c . getScope () )
Code	c . getScope ( canInline () , c . getScope () )
Distance : 5

311
Tree	c ( c ) pname
Code	c ( c ) pname
Distance : 7

312
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) Override
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) Override
Distance : 5

313
Tree	getScope ( getScope () , c . getScope () )
Code	getScope ( getScope () , c . getScope () )
Distance : 6

314
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

315
Tree	c . canInline ( new PropertyWrite ( c ) )
Code	c . canInline ( new PropertyWrite ( c ) )
Distance : 5

316
Tree	c . getScope ( getScope () , c . getScope () )
Code	c . getScope ( getScope () , c . getScope () )
Distance : 5

317
Tree	c . canInline ( break; )
Code	c . canInline ( break; )
Distance : 4

318
Tree	c . canInline ( STRING_CONSTANT ) Override
Code	c . canInline ( STRING_CONSTANT ) Override
Distance : 5

319
Tree	c ( t ) . getScope ()
Code	c ( t ) . getScope ()
Distance : 4

320
Tree	c . canInline ( new NominalTypeBuilderNti ( c ) )
Code	c . canInline ( new NominalTypeBuilderNti ( c ) )
Distance : 5

321
Tree	c . canInline () pname
Code	c . canInline () pname
Distance : 5

322
Tree	STRING_CONSTANT . canInline ( c . canInline () ) TypeInferenceMode.CHECKED
Code	STRING_CONSTANT . canInline ( c . canInline () ) TypeInferenceMode.CHECKED
Distance : 4

323
Tree	c . getScope ( c , inheritedPropDef.methodType )
Code	c . getScope ( c , inheritedPropDef.methodType )
Distance : 5

324
Tree	c . canInline ( c , new throw ( c ) )
Code	c . canInline ( c , new throw ( c ) )
Distance : 7

325
Tree	c . canInline ( new PeepholeFoldConstants ( c ) )
Code	c . canInline ( new PeepholeFoldConstants ( c ) )
Distance : 5

326
Tree	c . getScope ( t )
Code	c . getScope ( t )
Distance : 4

327
Tree	c . canInline ( c , new NodeMetadata ( c ) )
Code	c . canInline ( c , new NodeMetadata ( c ) )
Distance : 7

328
Tree	c . canInline () for
Code	c . canInline () for
Distance : 5

329
Tree	c . canInline ( c , renamer )
Code	c . canInline ( c , renamer )
Distance : 4

330
Tree	c . canInline ( c , c )
Code	c . canInline ( c , c )
Distance : 4

331
Tree	ResolutionMode.BROWSER . canInline ()
Code	ResolutionMode.BROWSER . canInline ()
Distance : 6

332
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

333
Tree	c . getScope ( c , new PeepholeFoldConstants ( c ) )
Code	c . getScope ( c , new PeepholeFoldConstants ( c ) )
Distance : 8

334
Tree	getName . canInline ()
Code	getName . canInline ()
Distance : 6

335
Tree	c . canInline ( c , recvLvalue.env )
Code	c . canInline ( c , recvLvalue.env )
Distance : 4

336
Tree	c . getScope ( NUMBER_CONSTANT )
Code	c . getScope ( NUMBER_CONSTANT )
Distance : 5

337
Tree	getScope () . () () Override
Code	getScope () . () () Override
Distance : 7

338
Tree	c . canInline ( c , Token.SUPER )
Code	c . canInline ( c , Token.SUPER )
Distance : 4

339
Tree	c . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Code	c . getScope ( NUMBER_CONSTANT , NUMBER_CONSTANT )
Distance : 5

340
Tree	c . canInline ( new SourceMap.PrefixLocationMapping ( c ) )
Code	c . canInline ( new SourceMap.PrefixLocationMapping ( c ) )
Distance : 5

341
Tree	c . canInline ( c , TernaryValue.TRUE )
Code	c . canInline ( c , TernaryValue.TRUE )
Distance : 4

342
Tree	c . canInline ( c , NodeUtil.isNameDeclaration )
Code	c . canInline ( c , NodeUtil.isNameDeclaration )
Distance : 4

343
Tree	c . canInline ( c , PolymerClassDefinition.DefinitionType.ObjectLiteral )
Code	c . canInline ( c , PolymerClassDefinition.DefinitionType.ObjectLiteral )
Distance : 4

344
Tree	c . canInline ( new BaseTranspiler.CompileResult ( c ) )
Code	c . canInline ( new BaseTranspiler.CompileResult ( c ) )
Distance : 5

345
Tree	c . canInline ( new UnrecognizedRequire ( c ) )
Code	c . canInline ( new UnrecognizedRequire ( c ) )
Distance : 5

346
Tree	c . canInline ( new StringBuilder ( c ) )
Code	c . canInline ( new StringBuilder ( c ) )
Distance : 5

347
Tree	CodePrinter.Builder . canInline ()
Code	CodePrinter.Builder . canInline ()
Distance : 6

348
Tree	c . getScope ( new RemovableBuilder ( c ) )
Code	c . getScope ( new RemovableBuilder ( c ) )
Distance : 6

349
Tree	CheckMissingAndExtraRequires.Mode.SINGLE_FILE . canInline ()
Code	CheckMissingAndExtraRequires.Mode.SINGLE_FILE . canInline ()
Distance : 6

350
Tree	other.nominalType . canInline ()
Code	other.nominalType . canInline ()
Distance : 6

351
Tree	c . canInline ( c , new RemovableBuilder ( c ) )
Code	c . canInline ( c , new RemovableBuilder ( c ) )
Distance : 7

352
Tree	getScope ( t )
Code	getScope ( t )
Distance : 6

353
Tree	c . canInline ( t , c , c . getScope () )
Code	c . canInline ( t , c , c . getScope () )
Distance : 4

354
Tree	PassNames.PARSE_INPUTS . canInline ()
Code	PassNames.PARSE_INPUTS . canInline ()
Distance : 6

355
Tree	getScope () . () () get
Code	getScope () . () () get
Distance : 7

356
Tree	c . getScope ( t , c , c . canInline () )
Code	c . getScope ( t , c , c . canInline () )
Distance : 6

357
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

358
Tree	getScope () . getScope ( c . canInline () )
Code	getScope () . getScope ( c . canInline () )
Distance : 5

359
Tree	c ( t . canInline () )
Code	c ( t . canInline () )
Distance : 3

360
Tree	getScope ( t , t )
Code	getScope ( t , t )
Distance : 6

361
Tree	t . getScope () . c ()
Code	t . getScope () . c ()
Distance : 6

362
Tree	c . canInline () . () ( t )
Code	c . canInline () . () ( t )
Distance : 5

363
Tree	c . canInline ( c , new LiveVariablesAnalysis ( c ) )
Code	c . canInline ( c , new LiveVariablesAnalysis ( c ) )
Distance : 7

364
Tree	c . getScope ( t ) . getScope ()
Code	c . getScope ( t ) . getScope ()
Distance : 3

365
Tree	c . canInline ( JSTypes.OBJLIT_CLASS_NAME )
Code	c . canInline ( JSTypes.OBJLIT_CLASS_NAME )
Distance : 4

366
Tree	c . canInline ( c , false )
Code	c . canInline ( c , false )
Distance : 4

367
Tree	t . getScope ( c . canInline () )
Code	t . getScope ( c . canInline () )
Distance : 4

368
Tree	c . canInline ( t , c . getScope () )
Code	c . canInline ( t , c . getScope () )
Distance : 2

369
Tree	c ( c , t )
Code	c ( c , t )
Distance : 6

370
Tree	c ( t ) . canInline ()
Code	c ( t ) . canInline ()
Distance : 5

371
Tree	t . canInline () . getScope ()
Code	t . canInline () . getScope ()
Distance : 4

372
Tree	getScope ( t ) . getScope ()
Code	getScope ( t ) . getScope ()
Distance : 5

373
Tree	c . canInline ( c , c , t . canInline () )
Code	c . canInline ( c , c , t . canInline () )
Distance : 5

374
Tree	c . getScope ( c , false )
Code	c . getScope ( c , false )
Distance : 5

375
Tree	t . getScope ( c )
Code	t . getScope ( c )
Distance : 6

376
Tree	getScope () . getScope ()
Code	getScope () . getScope ()
Distance : 6

377
Tree	c . getScope () . () ( t )
Code	c . getScope () . () ( t )
Distance : 6

378
Tree	getScope () . () ( c . canInline () )
Code	getScope () . () ( c . canInline () )
Distance : 5

379
Tree	c . getScope ( c . canInline () , c . canInline () )
Code	c . getScope ( c . canInline () , c . canInline () )
Distance : 8

380
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

381
Tree	( ( t ) t ) . canInline ()
Code	( ( t ) t ) . canInline ()
Distance : 7

382
Tree	t . getScope () . getScope ()
Code	t . getScope () . getScope ()
Distance : 5

383
Tree	c . canInline ( getScope () , c . canInline () )
Code	c . canInline ( getScope () , c . canInline () )
Distance : 5

384
Tree	STRING_CONSTANT . getScope ( t . getScope () )
Code	STRING_CONSTANT . getScope ( t . getScope () )
Distance : 2

385
Tree	c . getScope ( t , c . getScope () )
Code	c . getScope ( t , c . getScope () )
Distance : 3

386
Tree	getScope ( c . canInline () ) disableTypeCheck
Code	getScope ( c . canInline () ) disableTypeCheck
Distance : 6

387
Tree	getScope ( STRING_CONSTANT ) false
Code	getScope ( STRING_CONSTANT ) false
Distance : 8

388
Tree	canInline ( t , t )
Code	canInline ( t , t )
Distance : 5

389
Tree	getScope ( STRING_CONSTANT ) checkNotNull
Code	getScope ( STRING_CONSTANT ) checkNotNull
Distance : 8

390
Tree	getScope ( STRING_CONSTANT ) node
Code	getScope ( STRING_CONSTANT ) node
Distance : 8

391
Tree	getScope () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Code	getScope () . () ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG )
Distance : 7

392
Tree	new c () . canInline ( c ) disableTypeCheck
Code	new c () . canInline ( c ) disableTypeCheck
Distance : 7

393
Tree	new c () . getScope ( t )
Code	new c () . getScope ( t )
Distance : 6

394
Tree	c . canInline ( c ) TypeInferenceMode.CHECKED
Code	c . canInline ( c ) TypeInferenceMode.CHECKED
Distance : 5

395
Tree	new functionBody ( c ) . canInline ()
Code	new functionBody ( c ) . canInline ()
Distance : 7

396
Tree	c . canInline ( c ) . c ()
Code	c . canInline ( c ) . c ()
Distance : 4

397
Tree	c . getScope ( c . getScope () , c . canInline () )
Code	c . getScope ( c . getScope () , c . canInline () )
Distance : 7

398
Tree	new c () . () ( c ) TypeInferenceMode.CHECKED
Code	new c () . () ( c ) TypeInferenceMode.CHECKED
Distance : 8

399
Tree	getScope () . () () for
Code	getScope () . () () for
Distance : 7

400
Tree	c () . getScope ( c )
Code	c () . getScope ( c )
Distance : 6

401
Tree	c . canInline ( NUMBER_CONSTANT ) pname
Code	c . canInline ( NUMBER_CONSTANT ) pname
Distance : 5

402
Tree	c . canInline ( NUMBER_CONSTANT ) []
Code	c . canInline ( NUMBER_CONSTANT ) []
Distance : 5

403
Tree	c . getScope ( t ) . c ()
Code	c . getScope ( t ) . c ()
Distance : 4

404
Tree	c . canInline ( NUMBER_CONSTANT ) get
Code	c . canInline ( NUMBER_CONSTANT ) get
Distance : 5

405
Tree	t . getScope ( c , c . canInline () )
Code	t . getScope ( c , c . canInline () )
Distance : 6

406
Tree	getScope () . () ( c ) disableTypeCheck
Code	getScope () . () ( c ) disableTypeCheck
Distance : 8

407
Tree	getScope () . () () lines
Code	getScope () . () () lines
Distance : 7

408
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) for
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) for
Distance : 5

409
Tree	c . canInline ( c ) disableTypeCheck
Code	c . canInline ( c ) disableTypeCheck
Distance : 5

410
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) pname
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) pname
Distance : 5

411
Tree	getScope ( STRING_CONSTANT ) setUp
Code	getScope ( STRING_CONSTANT ) setUp
Distance : 8

412
Tree	c . canInline ( c () , c . getScope () )
Code	c . canInline ( c () , c . getScope () )
Distance : 4

413
Tree	getScope ( STRING_CONSTANT ) >
Code	getScope ( STRING_CONSTANT ) >
Distance : 8

414
Tree	getScope ( STRING_CONSTANT ) js
Code	getScope ( STRING_CONSTANT ) js
Distance : 8

415
Tree	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) []
Code	c . canInline ( NUMBER_CONSTANT , NUMBER_CONSTANT ) []
Distance : 5

416
Tree	getScope ( STRING_CONSTANT ) block
Code	getScope ( STRING_CONSTANT ) block
Distance : 8

417
Tree	this . c . getScope () get
Code	this . c . getScope () get
Distance : 5

418
Tree	c ( c () , c . canInline () )
Code	c ( c () , c . canInline () )
Distance : 6

419
Tree	getScope ( c ) []
Code	getScope ( c ) []
Distance : 8

420
Tree	getScope () of
Code	getScope () of
Distance : 7

421
Tree	getScope () . () () pname
Code	getScope () . () () pname
Distance : 7

422
Tree	c ( c ) lines
Code	c ( c ) lines
Distance : 7

423
Tree	getScope () . () ()
Code	getScope () . () ()
Distance : 7

424
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

425
Tree	getScope () . () ( c ) TypeInferenceMode.CHECKED
Code	getScope () . () ( c ) TypeInferenceMode.CHECKED
Distance : 8

426
Tree	c . canInline () get
Code	c . canInline () get
Distance : 5

427
Tree	getScope ( c ) pname
Code	getScope ( c ) pname
Distance : 8

428
Tree	c . canInline () lines
Code	c . canInline () lines
Distance : 5

429
Tree	removeUnusedThisProperties
Code	removeUnusedThisProperties
Distance : 9

430
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

431
Tree	this . c . getScope ()
Code	this . c . getScope ()
Distance : 5

432
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

433
Tree	getScope ()
Code	getScope ()
Distance : 7

434
Tree	( ( c ) c ) . canInline ()
Code	( ( c ) c ) . canInline ()
Distance : 8

435
Tree	c ( t )
Code	c ( t )
Distance : 5

436
Tree	new IllegalStateException ( c ) . canInline ()
Code	new IllegalStateException ( c ) . canInline ()
Distance : 7

437
Tree	c . canInline ( c )
Code	c . canInline ( c )
Distance : 4

438
Tree	getScope ( c )
Code	getScope ( c )
Distance : 7

439
Tree	getScope ( c . canInline () )
Code	getScope ( c . canInline () )
Distance : 5

========================================================================


