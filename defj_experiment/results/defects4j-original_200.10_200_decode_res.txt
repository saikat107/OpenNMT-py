========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

1
Tree	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

2
Tree	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

3
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

4
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

5
Tree	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

6
Tree	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

7
Tree	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 1

8
Tree	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 0

9
Tree	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

10
Tree	( int ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

11
Tree	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

12
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 2

13
Tree	( int ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

14
Tree	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

15
Tree	( int ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

16
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

17
Tree	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

18
Tree	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

19
Tree	( int ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

20
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

21
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 2

22
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

23
Tree	( char ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

24
Tree	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

25
Tree	( int ) ( ( v - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

26
Tree	( int ) ( ( value - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

27
Tree	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

28
Tree	( long ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

29
Tree	( int ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

30
Tree	( int ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

31
Tree	( long ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

32
Tree	( int ) ( ( value - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

33
Tree	( int ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

34
Tree	( long ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

35
Tree	( int ) ( ( upperBound - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

36
Tree	( int ) ( ( value - this . upperBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

37
Tree	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

38
Tree	( long ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

39
Tree	( char ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

40
Tree	( float ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

41
Tree	( int ) ( ( upperBound - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

42
Tree	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

43
Tree	( char ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

44
Tree	( int ) ( ( value - this . lowerBound ) / ( this . v - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . v - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

45
Tree	( float ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

46
Tree	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

47
Tree	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

48
Tree	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

49
Tree	( float ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

50
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

51
Tree	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

52
Tree	( int ) ( ( v - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

53
Tree	( char ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

54
Tree	( float ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

55
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

56
Tree	( boolean ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

57
Tree	( int ) ( ( value - this . upperBound ) / ( this . v - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . v - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

58
Tree	( int ) ( ( value - this . v ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

59
Tree	( short ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

60
Tree	( int ) ( ( upperBound - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

61
Tree	( int ) ( ( lowerBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

62
Tree	( int ) ( ( value - this . value ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

63
Tree	( short ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

64
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

65
Tree	( boolean ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

66
Tree	( int ) ( ( value - this . upperBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

67
Tree	( int ) ( ( lowerBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

68
Tree	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . v ) * NUMBER_CONSTANT )
Distance : 4

69
Tree	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

70
Tree	( boolean ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

71
Tree	( int ) ( ( value - this . value ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

72
Tree	( short ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

73
Tree	( int ) ( ( value - this . v ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

74
Tree	( short ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

75
Tree	( int ) ( ( lowerBound - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

76
Tree	( int ) ( ( v - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

77
Tree	( byte ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

78
Tree	( boolean ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

79
Tree	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 1

80
Tree	( int ) ( ( lowerBound - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

81
Tree	( double ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

82
Tree	( int ) ( ( v - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

83
Tree	( byte ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

84
Tree	( double ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

85
Tree	( byte ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

86
Tree	( void ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( void ) ( ( value - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

87
Tree	( int ) ( ( v - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

88
Tree	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Distance : 4

89
Tree	( long ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

90
Tree	( int ) ( ( upperBound - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

91
Tree	( double ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

92
Tree	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 2

93
Tree	( byte ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

94
Tree	( void ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( void ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

95
Tree	( int ) ( ( v - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

96
Tree	( double ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

97
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

98
Tree	( int ) ( ( value - this . v ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

99
Tree	( long ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

100
Tree	( void ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( void ) ( ( value - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

101
Tree	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 1

102
Tree	( int ) ( ( upperBound - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

103
Tree	( byte ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

104
Tree	( double ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

105
Tree	( long ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

106
Tree	( int ) ( ( upperBound - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

107
Tree	( byte ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

108
Tree	( void ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( void ) ( ( value - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

109
Tree	( double ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

110
Tree	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

111
Tree	( int ) ( ( value - this . value ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

112
Tree	( byte ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

113
Tree	( double ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

114
Tree	( long ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

115
Tree	( int ) ( ( v - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

116
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

117
Tree	( char ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

118
Tree	( float ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

119
Tree	( long ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

120
Tree	( double ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

121
Tree	( int ) ( ( upperBound - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

122
Tree	( byte ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

123
Tree	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 2

124
Tree	( byte ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

125
Tree	( int ) ( ( value - this . v ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

126
Tree	( int ) ( ( v - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

127
Tree	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 4

128
Tree	( char ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

129
Tree	( float ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

130
Tree	( long ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

131
Tree	( double ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

132
Tree	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 4

133
Tree	( char ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

134
Tree	( float ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

135
Tree	( byte ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

136
Tree	( int ) ( ( v - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

137
Tree	( short ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

138
Tree	( long ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

139
Tree	( int ) ( ( value - this . v ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

140
Tree	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

141
Tree	( int ) ( ( value - this . value ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

142
Tree	( long ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

143
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

144
Tree	( char ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

145
Tree	( float ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

146
Tree	( boolean ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

147
Tree	( int ) ( ( upperBound - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

148
Tree	( double ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

149
Tree	( int ) ( ( v - this . upperBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . upperBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

150
Tree	( int ) ( ( lowerBound - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

151
Tree	( short ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

152
Tree	( long ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( v - this . upperBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

153
Tree	( float ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

154
Tree	( int ) ( ( value - this . v ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . v ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

155
Tree	( long ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

156
Tree	( short ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

157
Tree	( long ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

158
Tree	( double ) ( ( value - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

159
Tree	( int ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 2

160
Tree	( int ) ( ( value - this . value ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

161
Tree	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 4

162
Tree	( boolean ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

163
Tree	( int ) ( ( upperBound - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . v ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

164
Tree	( long ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

165
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

166
Tree	( int ) ( ( lowerBound - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

167
Tree	( char ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

168
Tree	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 4

169
Tree	( float ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

170
Tree	( double ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

171
Tree	( byte ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

172
Tree	( char ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

173
Tree	( int ) ( ( v - this . lowerBound ) / ( this . v - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . v - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

174
Tree	( int ) ( ( upperBound - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . value ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

175
Tree	( int ) ( ( value - this . lowerBound ) / ( this . value - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . value - this . v ) * NUMBER_CONSTANT )
Distance : 3

176
Tree	( short ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

177
Tree	( int ) ( ( value - this . upperBound ) / ( this . value - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . value - this . v ) * NUMBER_CONSTANT )
Distance : 4

178
Tree	( double ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

179
Tree	( short ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( short ) ( ( v - this . lowerBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 2

180
Tree	( int ) ( ( value - this . value ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

181
Tree	( long ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 4

182
Tree	( int ) ( ( lowerBound - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( lowerBound - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

183
Tree	( char ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

184
Tree	( long ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( long ) ( ( value - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

185
Tree	( float ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( v - this . upperBound ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

186
Tree	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

187
Tree	( double ) ( ( value - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

188
Tree	( int ) ( ( v - this . v ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . v ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

189
Tree	( int ) ( ( upperBound - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Code	( int ) ( ( upperBound - this . upperBound ) / ( this . upperBound - this . v ) * NUMBER_CONSTANT )
Distance : 3

190
Tree	( char ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( char ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

191
Tree	( double ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

192
Tree	( int ) ( ( v - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( v - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

193
Tree	( float ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( float ) ( ( value - this . v ) / ( this . upperBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 4

194
Tree	( int ) ( ( value - this . lowerBound ) / ( this . value - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . value - this . value ) * NUMBER_CONSTANT )
Distance : 3

195
Tree	( byte ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( upperBound - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

196
Tree	( boolean ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . upperBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 4

197
Tree	( boolean ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( boolean ) ( ( value - this . upperBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

198
Tree	( byte ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

199
Tree	( byte ) ( ( value - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Code	( byte ) ( ( value - this . upperBound ) / ( this . value - this . upperBound ) * NUMBER_CONSTANT )
Distance : 5

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{
Code	{
Distance : 20

1
Tree	double
Code	double
Distance : 21

2
Tree	timeZone
Code	timeZone
Distance : 21

3
Tree	byteBuddy
Code	byteBuddy
Distance : 21

4
Tree	SparseFieldVector
Code	SparseFieldVector
Distance : 21

5
Tree	count
Code	count
Distance : 21

6
Tree	YearWeekType
Code	YearWeekType
Distance : 21

7
Tree	protected
Code	protected
Distance : 21

8
Tree	NoWeekyearZeroField
Code	NoWeekyearZeroField
Distance : 21

9
Tree	GlobalScopeBuilder
Code	GlobalScopeBuilder
Distance : 21

10
Tree	Math
Code	Math
Distance : 21

11
Tree	testWarning
Code	testWarning
Distance : 21

12
Tree	Comparable
Code	Comparable
Distance : 21

13
Tree	clazz
Code	clazz
Distance : 21

14
Tree	Vector2D
Code	Vector2D
Distance : 21

15
Tree	replaceWith
Code	replaceWith
Distance : 21

16
Tree	distribution
Code	distribution
Distance : 21

17
Tree	last
Code	last
Distance : 21

18
Tree	continue;
Code	continue;
Distance : 21

19
Tree	toUpperCase
Code	toUpperCase
Distance : 21

20
Tree	DateUtils
Code	DateUtils
Distance : 21

21
Tree	n
Code	n
Distance : 21

22
Tree	setEntry
Code	setEntry
Distance : 21

23
Tree	int
Code	int
Distance : 21

24
Tree	capturingMatcher
Code	capturingMatcher
Distance : 21

25
Tree	intValue
Code	intValue
Distance : 21

26
Tree	)
Code	)
Distance : 20

27
Tree	cal
Code	cal
Distance : 21

28
Tree	isName
Code	isName
Distance : 21

29
Tree	arrayType
Code	arrayType
Distance : 21

30
Tree	super();
Code	super();
Distance : 21

31
Tree	DateParser
Code	DateParser
Distance : 21

32
Tree	UnivariateRealSolver
Code	UnivariateRealSolver
Distance : 21

33
Tree	expected
Code	expected
Distance : 21

34
Tree	ReadableDuration
Code	ReadableDuration
Distance : 21

35
Tree	put
Code	put
Distance : 21

36
Tree	while
Code	while
Distance : 21

37
Tree	RegionFactory
Code	RegionFactory
Distance : 21

38
Tree	Collection
Code	Collection
Distance : 21

39
Tree	checkState
Code	checkState
Distance : 21

40
Tree	Object
Code	Object
Distance : 21

41
Tree	IR
Code	IR
Distance : 21

42
Tree	RenameLabels
Code	RenameLabels
Distance : 21

43
Tree	parent
Code	parent
Distance : 21

44
Tree	InstanceOf
Code	InstanceOf
Distance : 21

45
Tree	Interval
Code	Interval
Distance : 21

46
Tree	addMessage
Code	addMessage
Distance : 21

47
Tree	solve
Code	solve
Distance : 21

48
Tree	assertNoPureCalls
Code	assertNoPureCalls
Distance : 21

49
Tree	{
Code	{
Distance : 20

50
Tree	Assert
Code	Assert
Distance : 21

51
Tree	srcDeclaration
Code	srcDeclaration
Distance : 21

52
Tree	assertChanges
Code	assertChanges
Distance : 21

53
Tree	Integer
Code	Integer
Distance : 21

54
Tree	RegionFactory
Code	RegionFactory
Distance : 21

55
Tree	checkState
Code	checkState
Distance : 21

56
Tree	Object
Code	Object
Distance : 21

57
Tree	reportOr
Code	reportOr
Distance : 21

58
Tree	returnMap
Code	returnMap
Distance : 21

59
Tree	result
Code	result
Distance : 21

60
Tree	fireAnnotationChanged
Code	fireAnnotationChanged
Distance : 21

61
Tree	IR
Code	IR
Distance : 21

62
Tree	isMultiline
Code	isMultiline
Distance : 21

63
Tree	RenameLabels
Code	RenameLabels
Distance : 21

64
Tree	parent
Code	parent
Distance : 21

65
Tree	InstanceOf
Code	InstanceOf
Distance : 21

66
Tree	default:
Code	default:
Distance : 21

67
Tree	CharSequence
Code	CharSequence
Distance : 21

68
Tree	Interval
Code	Interval
Distance : 21

69
Tree	addMessage
Code	addMessage
Distance : 21

70
Tree	newVar
Code	newVar
Distance : 21

71
Tree	compiler
Code	compiler
Distance : 21

72
Tree	while
Code	while
Distance : 21

73
Tree	callNode
Code	callNode
Distance : 21

74
Tree	YearMonthType
Code	YearMonthType
Distance : 21

75
Tree	isNew
Code	isNew
Distance : 21

76
Tree	RunnerFactory
Code	RunnerFactory
Distance : 21

77
Tree	byte
Code	byte
Distance : 21

78
Tree	Point2D
Code	Point2D
Distance : 21

79
Tree	seq
Code	seq
Distance : 21

80
Tree	void
Code	void
Distance : 21

81
Tree	assertNotEquals
Code	assertNotEquals
Distance : 21

82
Tree	HashUtils
Code	HashUtils
Distance : 21

83
Tree	return;
Code	return;
Distance : 21

84
Tree	assertNoPureCalls
Code	assertNoPureCalls
Distance : 21

85
Tree	)
Code	)
Distance : 20

86
Tree	Arguments
Code	Arguments
Distance : 21

87
Tree	arrayType
Code	arrayType
Distance : 21

88
Tree	isEquals
Code	isEquals
Distance : 21

89
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 21

90
Tree	DateParser
Code	DateParser
Distance : 21

91
Tree	replaceChild
Code	replaceChild
Distance : 21

92
Tree	expected
Code	expected
Distance : 21

93
Tree	subtree
Code	subtree
Distance : 21

94
Tree	NodeTraversal
Code	NodeTraversal
Distance : 21

95
Tree	ReadableDuration
Code	ReadableDuration
Distance : 21

96
Tree	true
Code	true
Distance : 21

97
Tree	varArgs
Code	varArgs
Distance : 21

98
Tree	void
Code	void
Distance : 21

99
Tree	crossP
Code	crossP
Distance : 21

100
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 21

101
Tree	final
Code	final
Distance : 21

102
Tree	AbstractScope
Code	AbstractScope
Distance : 21

103
Tree	assertArrayEquals
Code	assertArrayEquals
Distance : 21

104
Tree	>
Code	>
Distance : 21

105
Tree	;
Code	;
Distance : 20

106
Tree	.
Code	.
Distance : 20

107
Tree	+
Code	+
Distance : 21

108
Tree	Preconditions
Code	Preconditions
Distance : 21

109
Tree	checkArgument
Code	checkArgument
Distance : 21

110
Tree	]
Code	]
Distance : 21

111
Tree	static
Code	static
Distance : 21

112
Tree	:
Code	:
Distance : 21

113
Tree	char
Code	char
Distance : 21

114
Tree	assertArrayEquals
Code	assertArrayEquals
Distance : 21

115
Tree	class
Code	class
Distance : 21

116
Tree	.
Code	.
Distance : 20

117
Tree	}
Code	}
Distance : 20

118
Tree	Iterable
Code	Iterable
Distance : 21

119
Tree	Map
Code	Map
Distance : 21

120
Tree	checkArgument
Code	checkArgument
Distance : 21

121
Tree	null
Code	null
Distance : 21

122
Tree	=
Code	=
Distance : 20

123
Tree	{}
Code	{}
Distance : 21

124
Tree	Preconditions
Code	Preconditions
Distance : 21

125
Tree	+
Code	+
Distance : 21

126
Tree	private
Code	private
Distance : 21

127
Tree	return
Code	return
Distance : 21

128
Tree	catch
Code	catch
Distance : 21

129
Tree	private
Code	private
Distance : 21

130
Tree	return
Code	return
Distance : 21

131
Tree	public
Code	public
Distance : 21

132
Tree	catch
Code	catch
Distance : 21

133
Tree	&&
Code	&&
Distance : 21

134
Tree	if
Code	if
Distance : 21

135
Tree	public
Code	public
Distance : 21

136
Tree	]
Code	]
Distance : 21

137
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 21

138
Tree	&&
Code	&&
Distance : 21

139
Tree	if
Code	if
Distance : 21

140
Tree	{}
Code	{}
Distance : 21

141
Tree	=
Code	=
Distance : 20

142
Tree	final
Code	final
Distance : 21

143
Tree	AbstractScope
Code	AbstractScope
Distance : 21

144
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 21

145
Tree	>
Code	>
Distance : 21

146
Tree	try
Code	try
Distance : 21

147
Tree	;
Code	;
Distance : 20

148
Tree	try
Code	try
Distance : 21

149
Tree	String
Code	String
Distance : 21

150
Tree	intValue
Code	intValue
Distance : 21

151
Tree	:
Code	:
Distance : 21

152
Tree	char
Code	char
Distance : 21

153
Tree	class
Code	class
Distance : 21

154
Tree	boolean
Code	boolean
Distance : 21

155
Tree	/
Code	/
Distance : 21

156
Tree	assertEquals
Code	assertEquals
Distance : 21

157
Tree	==
Code	==
Distance : 21

158
Tree	for
Code	for
Distance : 21

159
Tree	}
Code	}
Distance : 20

160
Tree	Iterable
Code	Iterable
Distance : 21

161
Tree	Map
Code	Map
Distance : 21

162
Tree	for
Code	for
Distance : 21

163
Tree	arguments
Code	arguments
Distance : 21

164
Tree	()
Code	()
Distance : 21

165
Tree	null
Code	null
Distance : 21

166
Tree	Class
Code	Class
Distance : 21

167
Tree	getParent
Code	getParent
Distance : 21

168
Tree	source
Code	source
Distance : 21

169
Tree	long
Code	long
Distance : 21

170
Tree	boolean
Code	boolean
Distance : 21

171
Tree	ParamChecks
Code	ParamChecks
Distance : 21

172
Tree	/
Code	/
Distance : 21

173
Tree	assertEquals
Code	assertEquals
Distance : 21

174
Tree	@
Code	@
Distance : 21

175
Tree	==
Code	==
Distance : 21

176
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 21

177
Tree	String
Code	String
Distance : 21

178
Tree	()
Code	()
Distance : 21

179
Tree	put
Code	put
Distance : 21

180
Tree	@
Code	@
Distance : 21

181
Tree	UnivariateRealSolver
Code	UnivariateRealSolver
Distance : 21

182
Tree	super();
Code	super();
Distance : 21

183
Tree	arguments
Code	arguments
Distance : 21

184
Tree	isName
Code	isName
Distance : 21

185
Tree	cal
Code	cal
Distance : 21

186
Tree	getParent
Code	getParent
Distance : 21

187
Tree	static
Code	static
Distance : 21

188
Tree	Collection
Code	Collection
Distance : 21

189
Tree	Class
Code	Class
Distance : 21

190
Tree	source
Code	source
Distance : 21

191
Tree	clazz
Code	clazz
Distance : 21

192
Tree	ParamChecks
Code	ParamChecks
Distance : 21

193
Tree	testWarning
Code	testWarning
Distance : 21

194
Tree	crossP
Code	crossP
Distance : 21

195
Tree	NoWeekyearZeroField
Code	NoWeekyearZeroField
Distance : 21

196
Tree	capturingMatcher
Code	capturingMatcher
Distance : 21

197
Tree	double
Code	double
Distance : 21

198
Tree	long
Code	long
Distance : 21

199
Tree	protected
Code	protected
Distance : 21

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( index < NUMBER_CONSTANT ) { return; } d
Code	if ( index < NUMBER_CONSTANT ) { return; } d
Distance : 12

1
Tree	if ( index < NUMBER_CONSTANT ) { return; } compiler
Code	if ( index < NUMBER_CONSTANT ) { return; } compiler
Distance : 12

2
Tree	if ( index < NUMBER_CONSTANT ) { return; } String
Code	if ( index < NUMBER_CONSTANT ) { return; } String
Distance : 12

3
Tree	if ( index < NUMBER_CONSTANT ) { return; } e
Code	if ( index < NUMBER_CONSTANT ) { return; } e
Distance : 12

4
Tree	if ( index < NUMBER_CONSTANT ) { return; } n
Code	if ( index < NUMBER_CONSTANT ) { return; } n
Distance : 12

5
Tree	if ( index < NUMBER_CONSTANT ) { return; } name
Code	if ( index < NUMBER_CONSTANT ) { return; } name
Distance : 12

6
Tree	if ( index < NUMBER_CONSTANT ) { return; } t
Code	if ( index < NUMBER_CONSTANT ) { return; } t
Distance : 12

7
Tree	if ( index < NUMBER_CONSTANT ) { return; } field
Code	if ( index < NUMBER_CONSTANT ) { return; } field
Distance : 12

8
Tree	if ( index < NUMBER_CONSTANT ) { return; } checkArgument
Code	if ( index < NUMBER_CONSTANT ) { return; } checkArgument
Distance : 12

9
Tree	if ( index < NUMBER_CONSTANT ) { return; } invocation
Code	if ( index < NUMBER_CONSTANT ) { return; } invocation
Distance : 12

10
Tree	if ( index < NUMBER_CONSTANT ) { return; } assertThat
Code	if ( index < NUMBER_CONSTANT ) { return; } assertThat
Distance : 12

11
Tree	if ( index < NUMBER_CONSTANT ) { return; } LINE_JOINER
Code	if ( index < NUMBER_CONSTANT ) { return; } LINE_JOINER
Distance : 12

12
Tree	if ( index < NUMBER_CONSTANT ) { return; } str
Code	if ( index < NUMBER_CONSTANT ) { return; } str
Distance : 12

13
Tree	if ( index < NUMBER_CONSTANT ) { return; } ]
Code	if ( index < NUMBER_CONSTANT ) { return; } ]
Distance : 12

14
Tree	if ( index < NUMBER_CONSTANT ) { return; } [
Code	if ( index < NUMBER_CONSTANT ) { return; } [
Distance : 12

15
Tree	if ( index < NUMBER_CONSTANT ) { return; } Preconditions
Code	if ( index < NUMBER_CONSTANT ) { return; } Preconditions
Distance : 12

16
Tree	if ( index < NUMBER_CONSTANT ) { return; } super
Code	if ( index < NUMBER_CONSTANT ) { return; } super
Distance : 12

17
Tree	if ( index < NUMBER_CONSTANT ) { return; } T
Code	if ( index < NUMBER_CONSTANT ) { return; } T
Distance : 12

18
Tree	if ( index < NUMBER_CONSTANT ) { return; } this
Code	if ( index < NUMBER_CONSTANT ) { return; } this
Distance : 12

19
Tree	if ( index < NUMBER_CONSTANT ) { return; } double
Code	if ( index < NUMBER_CONSTANT ) { return; } double
Distance : 12

20
Tree	if ( index < NUMBER_CONSTANT ) { return; } Assert
Code	if ( index < NUMBER_CONSTANT ) { return; } Assert
Distance : 12

21
Tree	if ( index < NUMBER_CONSTANT ) { return; } ?
Code	if ( index < NUMBER_CONSTANT ) { return; } ?
Distance : 12

22
Tree	if ( index < NUMBER_CONSTANT ) { return; } data
Code	if ( index < NUMBER_CONSTANT ) { return; } data
Distance : 12

23
Tree	if ( index < NUMBER_CONSTANT ) { return; } checkNotNull
Code	if ( index < NUMBER_CONSTANT ) { return; } checkNotNull
Distance : 12

24
Tree	if ( index < NUMBER_CONSTANT ) { return; } add
Code	if ( index < NUMBER_CONSTANT ) { return; } add
Distance : 12

25
Tree	if ( index < NUMBER_CONSTANT ) { return; } ex
Code	if ( index < NUMBER_CONSTANT ) { return; } ex
Distance : 12

26
Tree	if ( index < NUMBER_CONSTANT ) { return; } ;
Code	if ( index < NUMBER_CONSTANT ) { return; } ;
Distance : 11

27
Tree	if ( index < NUMBER_CONSTANT ) { return; } )
Code	if ( index < NUMBER_CONSTANT ) { return; } )
Distance : 11

28
Tree	if ( index < NUMBER_CONSTANT ) { return; } .
Code	if ( index < NUMBER_CONSTANT ) { return; } .
Distance : 12

29
Tree	if ( index < NUMBER_CONSTANT ) { return; } ,
Code	if ( index < NUMBER_CONSTANT ) { return; } ,
Distance : 12

30
Tree	if ( index < NUMBER_CONSTANT ) { return; } return
Code	if ( index < NUMBER_CONSTANT ) { return; } return
Distance : 12

31
Tree	if ( index < NUMBER_CONSTANT ) { return; } NUMBER_CONSTANT
Code	if ( index < NUMBER_CONSTANT ) { return; } NUMBER_CONSTANT
Distance : 12

32
Tree	if ( index < NUMBER_CONSTANT ) { return; } STRING_CONSTANT
Code	if ( index < NUMBER_CONSTANT ) { return; } STRING_CONSTANT
Distance : 11

33
Tree	if ( index < NUMBER_CONSTANT ) { return; } ()
Code	if ( index < NUMBER_CONSTANT ) { return; } ()
Distance : 12

34
Tree	if ( index < NUMBER_CONSTANT ) { return; } new
Code	if ( index < NUMBER_CONSTANT ) { return; } new
Distance : 12

35
Tree	if ( index < NUMBER_CONSTANT ) { return; } <s>
Code	if ( index < NUMBER_CONSTANT ) { return; } <s>
Distance : 12

36
Tree	if ( index < NUMBER_CONSTANT ) { return; } (
Code	if ( index < NUMBER_CONSTANT ) { return; } (
Distance : 11

37
Tree	if ( index < NUMBER_CONSTANT ) { return; } <blank>
Code	if ( index < NUMBER_CONSTANT ) { return; } <blank>
Distance : 12

38
Tree	if ( index < NUMBER_CONSTANT ) { return; } final
Code	if ( index < NUMBER_CONSTANT ) { return; } final
Distance : 12

39
Tree	if ( index < NUMBER_CONSTANT ) { return; } equals
Code	if ( index < NUMBER_CONSTANT ) { return; } equals
Distance : 12

40
Tree	if ( index < NUMBER_CONSTANT ) { return; } <
Code	if ( index < NUMBER_CONSTANT ) { return; } <
Distance : 12

41
Tree	if ( index < NUMBER_CONSTANT ) { return; } if
Code	if ( index < NUMBER_CONSTANT ) { return; } if
Distance : 12

42
Tree	if ( index < NUMBER_CONSTANT ) { return; } value
Code	if ( index < NUMBER_CONSTANT ) { return; } value
Distance : 12

43
Tree	if ( index < NUMBER_CONSTANT ) { return; } (
Code	if ( index < NUMBER_CONSTANT ) { return; } (
Distance : 11

44
Tree	if ( index < NUMBER_CONSTANT ) { return; } }
Code	if ( index < NUMBER_CONSTANT ) { return; } }
Distance : 11

45
Tree	if ( index < NUMBER_CONSTANT ) { return; } =
Code	if ( index < NUMBER_CONSTANT ) { return; } =
Distance : 12

46
Tree	if ( index < NUMBER_CONSTANT ) { return; } -
Code	if ( index < NUMBER_CONSTANT ) { return; } -
Distance : 12

47
Tree	if ( index < NUMBER_CONSTANT ) { return; } NodeTraversal
Code	if ( index < NUMBER_CONSTANT ) { return; } NodeTraversal
Distance : 12

48
Tree	if ( index < NUMBER_CONSTANT ) { return; } {
Code	if ( index < NUMBER_CONSTANT ) { return; } {
Distance : 12

49
Tree	if ( index < NUMBER_CONSTANT ) { return; } &&
Code	if ( index < NUMBER_CONSTANT ) { return; } &&
Distance : 12

50
Tree	if ( index < NUMBER_CONSTANT ) { return; } getArgumentMatcherStorage
Code	if ( index < NUMBER_CONSTANT ) { return; } getArgumentMatcherStorage
Distance : 12

51
Tree	if ( index < NUMBER_CONSTANT ) { return; } checkState
Code	if ( index < NUMBER_CONSTANT ) { return; } checkState
Distance : 12

52
Tree	if ( index < NUMBER_CONSTANT ) { return; } getMessage
Code	if ( index < NUMBER_CONSTANT ) { return; } getMessage
Distance : 12

53
Tree	if ( index < NUMBER_CONSTANT ) { return; } invocations
Code	if ( index < NUMBER_CONSTANT ) { return; } invocations
Distance : 12

54
Tree	if ( index < NUMBER_CONSTANT ) { return; } out
Code	if ( index < NUMBER_CONSTANT ) { return; } out
Distance : 12

55
Tree	if ( index < NUMBER_CONSTANT ) { return; } protected
Code	if ( index < NUMBER_CONSTANT ) { return; } protected
Distance : 12

56
Tree	if ( index < NUMBER_CONSTANT ) { return; } values
Code	if ( index < NUMBER_CONSTANT ) { return; } values
Distance : 12

57
Tree	if ( index < NUMBER_CONSTANT ) { return; } paint
Code	if ( index < NUMBER_CONSTANT ) { return; } paint
Distance : 12

58
Tree	if ( index < NUMBER_CONSTANT ) { return; } m
Code	if ( index < NUMBER_CONSTANT ) { return; } m
Distance : 12

59
Tree	if ( index < NUMBER_CONSTANT ) { return; } result
Code	if ( index < NUMBER_CONSTANT ) { return; } result
Distance : 12

60
Tree	if ( index < NUMBER_CONSTANT ) { return; } try
Code	if ( index < NUMBER_CONSTANT ) { return; } try
Distance : 12

61
Tree	if ( index < NUMBER_CONSTANT ) { return; } stream
Code	if ( index < NUMBER_CONSTANT ) { return; } stream
Distance : 12

62
Tree	if ( index < NUMBER_CONSTANT ) { break; }
Code	if ( index < NUMBER_CONSTANT ) { break; }
Distance : 11

63
Tree	if ( index < NUMBER_CONSTANT ) { continue; }
Code	if ( index < NUMBER_CONSTANT ) { continue; }
Distance : 11

64
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

65
Tree	if ( index < NUMBER_CONSTANT ) { default: }
Code	if ( index < NUMBER_CONSTANT ) { default: }
Distance : 11

66
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

67
Tree	if ( key < NUMBER_CONSTANT ) { default: }
Code	if ( key < NUMBER_CONSTANT ) { default: }
Distance : 12

68
Tree	if ( key < NUMBER_CONSTANT ) { break; }
Code	if ( key < NUMBER_CONSTANT ) { break; }
Distance : 12

69
Tree	if ( key < NUMBER_CONSTANT ) { continue; }
Code	if ( key < NUMBER_CONSTANT ) { continue; }
Distance : 12

70
Tree	if ( key < NUMBER_CONSTANT ) { super(); }
Code	if ( key < NUMBER_CONSTANT ) { super(); }
Distance : 12

71
Tree	if ( key < NUMBER_CONSTANT ) { null }
Code	if ( key < NUMBER_CONSTANT ) { null }
Distance : 12

72
Tree	if ( index < NUMBER_CONSTANT ) { return; } else
Code	if ( index < NUMBER_CONSTANT ) { return; } else
Distance : 12

73
Tree	if ( index < NUMBER_CONSTANT ) { return; } simpleMethod
Code	if ( index < NUMBER_CONSTANT ) { return; } simpleMethod
Distance : 12

74
Tree	if ( index < NUMBER_CONSTANT ) { return; } instant
Code	if ( index < NUMBER_CONSTANT ) { return; } instant
Distance : 12

75
Tree	if ( index < NUMBER_CONSTANT ) { return; } i
Code	if ( index < NUMBER_CONSTANT ) { return; } i
Distance : 12

76
Tree	if ( index < NUMBER_CONSTANT ) { return; } y
Code	if ( index < NUMBER_CONSTANT ) { return; } y
Distance : 12

77
Tree	if ( index < NUMBER_CONSTANT ) { return; } optimizer
Code	if ( index < NUMBER_CONSTANT ) { return; } optimizer
Distance : 12

78
Tree	if ( index < NUMBER_CONSTANT ) { return; } UnivariateFunction
Code	if ( index < NUMBER_CONSTANT ) { return; } UnivariateFunction
Distance : 12

79
Tree	if ( index < NUMBER_CONSTANT ) { return; } reportMatcher
Code	if ( index < NUMBER_CONSTANT ) { return; } reportMatcher
Distance : 12

80
Tree	if ( index < NUMBER_CONSTANT ) { return; } TestUtilities
Code	if ( index < NUMBER_CONSTANT ) { return; } TestUtilities
Distance : 12

81
Tree	if ( index < NUMBER_CONSTANT ) { return; } js
Code	if ( index < NUMBER_CONSTANT ) { return; } js
Distance : 12

82
Tree	if ( index < NUMBER_CONSTANT ) { return; } getParent
Code	if ( index < NUMBER_CONSTANT ) { return; } getParent
Distance : 12

83
Tree	if ( index < NUMBER_CONSTANT ) { return; } setUp
Code	if ( index < NUMBER_CONSTANT ) { return; } setUp
Distance : 12

84
Tree	if ( index < NUMBER_CONSTANT ) { return; } node
Code	if ( index < NUMBER_CONSTANT ) { return; } node
Distance : 12

85
Tree	if ( index < NUMBER_CONSTANT ) { return; } index
Code	if ( index < NUMBER_CONSTANT ) { return; } index
Distance : 12

86
Tree	if ( index < NUMBER_CONSTANT ) { return; } b
Code	if ( index < NUMBER_CONSTANT ) { return; } b
Distance : 12

87
Tree	if ( index < NUMBER_CONSTANT ) { return; } MutableTimePeriod
Code	if ( index < NUMBER_CONSTANT ) { return; } MutableTimePeriod
Distance : 12

88
Tree	if ( index < NUMBER_CONSTANT ) { return; } StrBuilder
Code	if ( index < NUMBER_CONSTANT ) { return; } StrBuilder
Distance : 12

89
Tree	if ( index < NUMBER_CONSTANT ) { return; } sb
Code	if ( index < NUMBER_CONSTANT ) { return; } sb
Distance : 12

90
Tree	if ( index < NUMBER_CONSTANT ) { return; } Fraction
Code	if ( index < NUMBER_CONSTANT ) { return; } Fraction
Distance : 12

91
Tree	if ( index < NUMBER_CONSTANT ) { return; } isBlock
Code	if ( index < NUMBER_CONSTANT ) { return; } isBlock
Distance : 12

92
Tree	if ( index < NUMBER_CONSTANT ) { return; } false
Code	if ( index < NUMBER_CONSTANT ) { return; } false
Distance : 12

93
Tree	if ( index < NUMBER_CONSTANT ) { return; } @
Code	if ( index < NUMBER_CONSTANT ) { return; } @
Distance : 12

94
Tree	if ( index < NUMBER_CONSTANT ) { return; } test
Code	if ( index < NUMBER_CONSTANT ) { return; } test
Distance : 12

95
Tree	if ( index < NUMBER_CONSTANT ) { return; } append
Code	if ( index < NUMBER_CONSTANT ) { return; } append
Distance : 12

96
Tree	if ( index < NUMBER_CONSTANT ) { return; } int
Code	if ( index < NUMBER_CONSTANT ) { return; } int
Distance : 12

97
Tree	if ( index < NUMBER_CONSTANT ) { return; } !=
Code	if ( index < NUMBER_CONSTANT ) { return; } !=
Distance : 12

98
Tree	if ( index < NUMBER_CONSTANT ) { return; } LanguageMode.ECMASCRIPT_2015
Code	if ( index < NUMBER_CONSTANT ) { return; } LanguageMode.ECMASCRIPT_2015
Distance : 12

99
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

100
Tree	if ( index < NUMBER_CONSTANT ) { return; } mockingProgress
Code	if ( index < NUMBER_CONSTANT ) { return; } mockingProgress
Distance : 12

101
Tree	if ( index < NUMBER_CONSTANT ) { return; } char
Code	if ( index < NUMBER_CONSTANT ) { return; } char
Distance : 12

102
Tree	if ( index < NUMBER_CONSTANT ) { return; } s
Code	if ( index < NUMBER_CONSTANT ) { return; } s
Distance : 12

103
Tree	if ( index < NUMBER_CONSTANT ) { return; } isNormalBlock
Code	if ( index < NUMBER_CONSTANT ) { return; } isNormalBlock
Distance : 12

104
Tree	if ( index < NUMBER_CONSTANT ) { return; } obj
Code	if ( index < NUMBER_CONSTANT ) { return; } obj
Distance : 12

105
Tree	if ( index < NUMBER_CONSTANT ) { return; } <=
Code	if ( index < NUMBER_CONSTANT ) { return; } <=
Distance : 12

106
Tree	if ( index < NUMBER_CONSTANT ) { return; } public
Code	if ( index < NUMBER_CONSTANT ) { return; } public
Distance : 12

107
Tree	if ( index < NUMBER_CONSTANT ) { return; } >
Code	if ( index < NUMBER_CONSTANT ) { return; } >
Distance : 12

108
Tree	if ( index < NUMBER_CONSTANT ) { return; } null
Code	if ( index < NUMBER_CONSTANT ) { return; } null
Distance : 12

109
Tree	if ( index < NUMBER_CONSTANT ) { return; } isEmpty
Code	if ( index < NUMBER_CONSTANT ) { return; } isEmpty
Distance : 12

110
Tree	if ( index < NUMBER_CONSTANT ) { return; } +
Code	if ( index < NUMBER_CONSTANT ) { return; } +
Distance : 11

111
Tree	if ( index < NUMBER_CONSTANT ) { return; } x
Code	if ( index < NUMBER_CONSTANT ) { return; } x
Distance : 12

112
Tree	if ( index < NUMBER_CONSTANT ) { return; } parent
Code	if ( index < NUMBER_CONSTANT ) { return; } parent
Distance : 12

113
Tree	if ( index < NUMBER_CONSTANT ) { return; } serialised
Code	if ( index < NUMBER_CONSTANT ) { return; } serialised
Distance : 12

114
Tree	if ( index < NUMBER_CONSTANT ) { return; } return;
Code	if ( index < NUMBER_CONSTANT ) { return; } return;
Distance : 12

115
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

116
Tree	if ( index < NUMBER_CONSTANT ) { return; } {}
Code	if ( index < NUMBER_CONSTANT ) { return; } {}
Distance : 12

117
Tree	if ( index < NUMBER_CONSTANT ) { return; } returnZero
Code	if ( index < NUMBER_CONSTANT ) { return; } returnZero
Distance : 12

118
Tree	if ( index < NUMBER_CONSTANT ) { return; } throws
Code	if ( index < NUMBER_CONSTANT ) { return; } throws
Distance : 12

119
Tree	if ( index < NUMBER_CONSTANT ) { return; } testSame
Code	if ( index < NUMBER_CONSTANT ) { return; } testSame
Distance : 12

120
Tree	if ( index < NUMBER_CONSTANT ) { return; } JSType
Code	if ( index < NUMBER_CONSTANT ) { return; } JSType
Distance : 12

121
Tree	if ( index < NUMBER_CONSTANT ) { return; } get
Code	if ( index < NUMBER_CONSTANT ) { return; } get
Distance : 12

122
Tree	if ( index < NUMBER_CONSTANT ) { return; } abs
Code	if ( index < NUMBER_CONSTANT ) { return; } abs
Distance : 12

123
Tree	if ( index < NUMBER_CONSTANT ) { return; } Class
Code	if ( index < NUMBER_CONSTANT ) { return; } Class
Distance : 12

124
Tree	if ( index < NUMBER_CONSTANT ) { return; } Test
Code	if ( index < NUMBER_CONSTANT ) { return; } Test
Distance : 12

125
Tree	if ( index < NUMBER_CONSTANT ) { return; } join
Code	if ( index < NUMBER_CONSTANT ) { return; } join
Distance : 12

126
Tree	if ( index < NUMBER_CONSTANT ) { return; } boolean
Code	if ( index < NUMBER_CONSTANT ) { return; } boolean
Distance : 12

127
Tree	if ( index < NUMBER_CONSTANT ) { return; } *
Code	if ( index < NUMBER_CONSTANT ) { return; } *
Distance : 12

128
Tree	if ( index < NUMBER_CONSTANT ) { return; } type
Code	if ( index < NUMBER_CONSTANT ) { return; } type
Distance : 12

129
Tree	if ( index < NUMBER_CONSTANT ) { return; } class
Code	if ( index < NUMBER_CONSTANT ) { return; } class
Distance : 12

130
Tree	if ( index < NUMBER_CONSTANT ) { return; } Object
Code	if ( index < NUMBER_CONSTANT ) { return; } Object
Distance : 12

131
Tree	if ( index < NUMBER_CONSTANT ) { return; } MathRuntimeException
Code	if ( index < NUMBER_CONSTANT ) { return; } MathRuntimeException
Distance : 12

132
Tree	if ( index < NUMBER_CONSTANT ) { return; } Override
Code	if ( index < NUMBER_CONSTANT ) { return; } Override
Distance : 12

133
Tree	if ( index < NUMBER_CONSTANT ) { return; } fireChangeEvent
Code	if ( index < NUMBER_CONSTANT ) { return; } fireChangeEvent
Distance : 12

134
Tree	if ( index < NUMBER_CONSTANT ) { return; } mode
Code	if ( index < NUMBER_CONSTANT ) { return; } mode
Distance : 12

135
Tree	if ( index < NUMBER_CONSTANT ) { return; } getInstance
Code	if ( index < NUMBER_CONSTANT ) { return; } getInstance
Distance : 12

136
Tree	if ( index < NUMBER_CONSTANT ) { return; } createIllegalArgumentException
Code	if ( index < NUMBER_CONSTANT ) { return; } createIllegalArgumentException
Distance : 12

137
Tree	if ( index < NUMBER_CONSTANT ) { return; } size
Code	if ( index < NUMBER_CONSTANT ) { return; } size
Distance : 12

138
Tree	if ( index < NUMBER_CONSTANT ) { return; } StringBuilder
Code	if ( index < NUMBER_CONSTANT ) { return; } StringBuilder
Distance : 12

139
Tree	if ( index < NUMBER_CONSTANT ) { return; } static
Code	if ( index < NUMBER_CONSTANT ) { return; } static
Distance : 12

140
Tree	if ( index < NUMBER_CONSTANT ) { return; } setAcceptedLanguage
Code	if ( index < NUMBER_CONSTANT ) { return; } setAcceptedLanguage
Distance : 12

141
Tree	if ( index < NUMBER_CONSTANT ) { return; } matcher
Code	if ( index < NUMBER_CONSTANT ) { return; } matcher
Distance : 12

142
Tree	if ( index < NUMBER_CONSTANT ) { return; } scope
Code	if ( index < NUMBER_CONSTANT ) { return; } scope
Distance : 12

143
Tree	if ( index < NUMBER_CONSTANT ) { return; } Integer
Code	if ( index < NUMBER_CONSTANT ) { return; } Integer
Distance : 12

144
Tree	if ( index < NUMBER_CONSTANT ) { return; } true
Code	if ( index < NUMBER_CONSTANT ) { return; } true
Distance : 12

145
Tree	if ( index < NUMBER_CONSTANT ) { return; } length
Code	if ( index < NUMBER_CONSTANT ) { return; } length
Distance : 12

146
Tree	if ( index < NUMBER_CONSTANT ) { return; } Args
Code	if ( index < NUMBER_CONSTANT ) { return; } Args
Distance : 12

147
Tree	if ( index < NUMBER_CONSTANT ) { return; } List
Code	if ( index < NUMBER_CONSTANT ) { return; } List
Distance : 12

148
Tree	if ( index < NUMBER_CONSTANT ) { return; } fail
Code	if ( index < NUMBER_CONSTANT ) { return; } fail
Distance : 12

149
Tree	if ( index < NUMBER_CONSTANT ) { return; } v
Code	if ( index < NUMBER_CONSTANT ) { return; } v
Distance : 12

150
Tree	if ( index < NUMBER_CONSTANT ) { return; } verify
Code	if ( index < NUMBER_CONSTANT ) { return; } verify
Distance : 12

151
Tree	if ( index < NUMBER_CONSTANT ) { return; } lines
Code	if ( index < NUMBER_CONSTANT ) { return; } lines
Distance : 12

152
Tree	if ( index < NUMBER_CONSTANT ) { return; } Exception
Code	if ( index < NUMBER_CONSTANT ) { return; } Exception
Distance : 12

153
Tree	if ( index < NUMBER_CONSTANT ) { return; } Node
Code	if ( index < NUMBER_CONSTANT ) { return; } Node
Distance : 12

154
Tree	if ( index < NUMBER_CONSTANT ) { return; } f
Code	if ( index < NUMBER_CONSTANT ) { return; } f
Distance : 12

155
Tree	if ( index < NUMBER_CONSTANT ) { return; } traverseEs6
Code	if ( index < NUMBER_CONSTANT ) { return; } traverseEs6
Distance : 12

156
Tree	if ( index < NUMBER_CONSTANT ) { return; } chrono
Code	if ( index < NUMBER_CONSTANT ) { return; } chrono
Distance : 12

157
Tree	if ( index < NUMBER_CONSTANT ) { return; } contains
Code	if ( index < NUMBER_CONSTANT ) { return; } contains
Distance : 12

158
Tree	if ( index < NUMBER_CONSTANT ) { return; } sqrt
Code	if ( index < NUMBER_CONSTANT ) { return; } sqrt
Distance : 12

159
Tree	if ( index < NUMBER_CONSTANT ) { return; } clone
Code	if ( index < NUMBER_CONSTANT ) { return; } clone
Distance : 12

160
Tree	if ( index < NUMBER_CONSTANT ) { return; } PeriodType
Code	if ( index < NUMBER_CONSTANT ) { return; } PeriodType
Distance : 12

161
Tree	if ( index < NUMBER_CONSTANT ) { return; } Double
Code	if ( index < NUMBER_CONSTANT ) { return; } Double
Distance : 12

162
Tree	if ( index < NUMBER_CONSTANT ) { return; } expected
Code	if ( index < NUMBER_CONSTANT ) { return; } expected
Distance : 12

163
Tree	if ( index < NUMBER_CONSTANT ) { return; } reportCodeChange
Code	if ( index < NUMBER_CONSTANT ) { return; } reportCodeChange
Distance : 12

164
Tree	if ( index < NUMBER_CONSTANT ) { return; } stroke
Code	if ( index < NUMBER_CONSTANT ) { return; } stroke
Distance : 12

165
Tree	if ( index < NUMBER_CONSTANT ) { return; } ParamChecks
Code	if ( index < NUMBER_CONSTANT ) { return; } ParamChecks
Distance : 12

166
Tree	if ( index < NUMBER_CONSTANT ) { return; } :
Code	if ( index < NUMBER_CONSTANT ) { return; } :
Distance : 12

167
Tree	if ( index < NUMBER_CONSTANT ) { return; } <>
Code	if ( index < NUMBER_CONSTANT ) { return; } <>
Distance : 12

168
Tree	if ( index < NUMBER_CONSTANT ) { return; } TestUtils
Code	if ( index < NUMBER_CONSTANT ) { return; } TestUtils
Distance : 12

169
Tree	if ( index < NUMBER_CONSTANT ) { return; } ==
Code	if ( index < NUMBER_CONSTANT ) { return; } ==
Distance : 12

170
Tree	if ( index < NUMBER_CONSTANT ) { return; } void
Code	if ( index < NUMBER_CONSTANT ) { return; } void
Distance : 12

171
Tree	if ( index < NUMBER_CONSTANT ) { return; } array
Code	if ( index < NUMBER_CONSTANT ) { return; } array
Distance : 12

172
Tree	if ( index < NUMBER_CONSTANT ) { return; } throw
Code	if ( index < NUMBER_CONSTANT ) { return; } throw
Distance : 12

173
Tree	if ( index < NUMBER_CONSTANT ) { return; } nullNotPermitted
Code	if ( index < NUMBER_CONSTANT ) { return; } nullNotPermitted
Distance : 12

174
Tree	if ( index < NUMBER_CONSTANT ) { return; } []
Code	if ( index < NUMBER_CONSTANT ) { return; } []
Distance : 12

175
Tree	if ( index < NUMBER_CONSTANT ) { return; } !
Code	if ( index < NUMBER_CONSTANT ) { return; } !
Distance : 12

176
Tree	if ( index < NUMBER_CONSTANT ) { return; } assertEquals
Code	if ( index < NUMBER_CONSTANT ) { return; } assertEquals
Distance : 12

177
Tree	if ( index < NUMBER_CONSTANT ) { return; } catch
Code	if ( index < NUMBER_CONSTANT ) { return; } catch
Distance : 12

178
Tree	if ( index < NUMBER_CONSTANT ) { return; } assertTrue
Code	if ( index < NUMBER_CONSTANT ) { return; } assertTrue
Distance : 12

179
Tree	if ( index < NUMBER_CONSTANT ) { return; } long
Code	if ( index < NUMBER_CONSTANT ) { return; } long
Distance : 12

180
Tree	if ( index < NUMBER_CONSTANT ) { return; } /
Code	if ( index < NUMBER_CONSTANT ) { return; } /
Distance : 12

181
Tree	if ( index < NUMBER_CONSTANT ) { return; } Invocation
Code	if ( index < NUMBER_CONSTANT ) { return; } Invocation
Distance : 12

182
Tree	if ( index < NUMBER_CONSTANT ) { return; } for
Code	if ( index < NUMBER_CONSTANT ) { return; } for
Distance : 12

183
Tree	if ( index < NUMBER_CONSTANT ) { return; } getFirstChild
Code	if ( index < NUMBER_CONSTANT ) { return; } getFirstChild
Distance : 12

184
Tree	if ( index < NUMBER_CONSTANT ) { return; } mock
Code	if ( index < NUMBER_CONSTANT ) { return; } mock
Distance : 12

185
Tree	if ( index < NUMBER_CONSTANT ) { return; } IllegalArgumentException
Code	if ( index < NUMBER_CONSTANT ) { return; } IllegalArgumentException
Distance : 12

186
Tree	if ( index < NUMBER_CONSTANT ) { return; } FastMath
Code	if ( index < NUMBER_CONSTANT ) { return; } FastMath
Distance : 12

187
Tree	if ( index < NUMBER_CONSTANT ) { return; } externs
Code	if ( index < NUMBER_CONSTANT ) { return; } externs
Distance : 12

188
Tree	if ( index < NUMBER_CONSTANT ) { return; } ArrayList
Code	if ( index < NUMBER_CONSTANT ) { return; } ArrayList
Distance : 12

189
Tree	if ( index < NUMBER_CONSTANT ) { return; } toString
Code	if ( index < NUMBER_CONSTANT ) { return; } toString
Distance : 12

190
Tree	if ( index < NUMBER_CONSTANT ) { return; } source
Code	if ( index < NUMBER_CONSTANT ) { return; } source
Distance : 12

191
Tree	if ( index < NUMBER_CONSTANT ) { return; } options
Code	if ( index < NUMBER_CONSTANT ) { return; } options
Distance : 12

192
Tree	if ( index < NUMBER_CONSTANT ) { return; } p
Code	if ( index < NUMBER_CONSTANT ) { return; } p
Distance : 12

193
Tree	if ( index < NUMBER_CONSTANT ) { return; } c
Code	if ( index < NUMBER_CONSTANT ) { return; } c
Distance : 12

194
Tree	if ( index < NUMBER_CONSTANT ) { return; } NodeUtil
Code	if ( index < NUMBER_CONSTANT ) { return; } NodeUtil
Distance : 12

195
Tree	if ( index < NUMBER_CONSTANT ) { return; } root
Code	if ( index < NUMBER_CONSTANT ) { return; } root
Distance : 12

196
Tree	if ( index < NUMBER_CONSTANT ) { return; } Math
Code	if ( index < NUMBER_CONSTANT ) { return; } Math
Distance : 12

197
Tree	if ( index < NUMBER_CONSTANT ) { return; } notifyListeners
Code	if ( index < NUMBER_CONSTANT ) { return; } notifyListeners
Distance : 12

198
Tree	if ( index < NUMBER_CONSTANT ) { return; } wanted
Code	if ( index < NUMBER_CONSTANT ) { return; } wanted
Distance : 12

199
Tree	if ( index < NUMBER_CONSTANT ) { return; } a
Code	if ( index < NUMBER_CONSTANT ) { return; } a
Distance : 12

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } index
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } index
Distance : 9

1
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } options
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } options
Distance : 9

2
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } p
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } p
Distance : 9

3
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } &&
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } &&
Distance : 9

4
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } T
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } T
Distance : 9

5
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } super
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } super
Distance : 9

6
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } value
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } value
Distance : 9

7
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } class
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } class
Distance : 9

8
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Object
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Object
Distance : 9

9
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } MathRuntimeException
Distance : 9

10
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Override
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Override
Distance : 9

11
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } assertEquals
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } assertEquals
Distance : 9

12
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } !
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } !
Distance : 9

13
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } []
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } []
Distance : 9

14
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } nullNotPermitted
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } nullNotPermitted
Distance : 9

15
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } throw
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } throw
Distance : 9

16
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } catch
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } catch
Distance : 9

17
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } void
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } void
Distance : 9

18
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ==
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ==
Distance : 9

19
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } double
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } double
Distance : 9

20
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } node
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } node
Distance : 9

21
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } >
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } >
Distance : 9

22
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } source
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } source
Distance : 9

23
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } null
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } null
Distance : 9

24
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } toString
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } toString
Distance : 9

25
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } @
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } @
Distance : 9

26
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } mock
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } mock
Distance : 9

27
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } {}
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } {}
Distance : 9

28
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } if
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } if
Distance : 9

29
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <
Distance : 9

30
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } this
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } this
Distance : 9

31
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } final
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } final
Distance : 9

32
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } =
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } =
Distance : 9

33
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } }
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } }
Distance : 9

34
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } mode
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } mode
Distance : 9

35
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ()
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ()
Distance : 9

36
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <blank>
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <blank>
Distance : 9

37
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } {
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } {
Distance : 9

38
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <s>
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <s>
Distance : 9

39
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } (
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } (
Distance : 9

40
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ;
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ;
Distance : 9

41
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } )
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } )
Distance : 9

42
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } .
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } .
Distance : 9

43
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ,
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ,
Distance : 9

44
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } +
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } +
Distance : 9

45
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } {
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } {
Distance : 9

46
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } test
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } test
Distance : 9

47
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } false
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } false
Distance : 9

48
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } true
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } true
Distance : 9

49
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } new
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } new
Distance : 9

50
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } dataset
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } dataset
Distance : 9

51
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 9

52
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } reportCodeChange
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } reportCodeChange
Distance : 9

53
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } FastMath
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } FastMath
Distance : 9

54
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } expected
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } expected
Distance : 9

55
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } -
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } -
Distance : 9

56
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } invocations
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } invocations
Distance : 9

57
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } [
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } [
Distance : 9

58
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Preconditions
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Preconditions
Distance : 9

59
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } char
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } char
Distance : 9

60
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } isEmpty
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } isEmpty
Distance : 9

61
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } JSType
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } JSType
Distance : 9

62
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } get
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } get
Distance : 9

63
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } abs
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } abs
Distance : 9

64
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } matcher
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } matcher
Distance : 9

65
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } setAcceptedLanguage
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } setAcceptedLanguage
Distance : 9

66
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } static
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } static
Distance : 9

67
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } values
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } values
Distance : 9

68
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } protected
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } protected
Distance : 9

69
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ]
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ]
Distance : 9

70
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

71
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

72
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } return
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } return
Distance : 9

73
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } PlotChangeEvent
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } PlotChangeEvent
Distance : 9

74
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 9

75
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } out
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } out
Distance : 9

76
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } d
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } d
Distance : 9

77
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } equals
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } equals
Distance : 9

78
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } for
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } for
Distance : 9

79
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Invocation
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Invocation
Distance : 9

80
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } /
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } /
Distance : 9

81
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } long
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } long
Distance : 9

82
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } assertTrue
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } assertTrue
Distance : 9

83
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } public
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } public
Distance : 9

84
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } externs
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } externs
Distance : 9

85
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } StrBuilder
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } StrBuilder
Distance : 9

86
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } TestUtilities
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } TestUtilities
Distance : 9

87
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } js
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } js
Distance : 9

88
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getMessage
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getMessage
Distance : 9

89
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } stream
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } stream
Distance : 9

90
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } else
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } else
Distance : 9

91
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } instant
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } instant
Distance : 9

92
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } s
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } s
Distance : 9

93
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } isNormalBlock
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } isNormalBlock
Distance : 9

94
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } reportMatcher
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } reportMatcher
Distance : 9

95
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Collection
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Collection
Distance : 9

96
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getField
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getField
Distance : 9

97
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } STRING_CONSTANT
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } STRING_CONSTANT
Distance : 9

98
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } obj
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } obj
Distance : 9

99
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

100
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } traverseEs6
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } traverseEs6
Distance : 9

101
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } size
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } size
Distance : 9

102
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } return;
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } return;
Distance : 9

103
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } mockingProgress
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } mockingProgress
Distance : 9

104
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } a
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } a
Distance : 9

105
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT_2015
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 9

106
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } MutableTimePeriod
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } MutableTimePeriod
Distance : 9

107
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } b
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } b
Distance : 9

108
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } scope
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } scope
Distance : 9

109
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } throws
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } throws
Distance : 9

110
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } StringBuilder
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } StringBuilder
Distance : 9

111
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } returnZero
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } returnZero
Distance : 9

112
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Double
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Double
Distance : 9

113
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } PeriodType
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } PeriodType
Distance : 9

114
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } clone
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } clone
Distance : 9

115
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } sqrt
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } sqrt
Distance : 9

116
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } isBlock
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } isBlock
Distance : 9

117
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } append
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } append
Distance : 9

118
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } sb
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } sb
Distance : 9

119
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT6
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT6
Distance : 9

120
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } stroke
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } stroke
Distance : 9

121
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getFirstChild
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getFirstChild
Distance : 9

122
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } contains
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } contains
Distance : 9

123
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } chrono
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } chrono
Distance : 9

124
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } UnivariateFunction
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } UnivariateFunction
Distance : 9

125
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } lines
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } lines
Distance : 9

126
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } verify
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } verify
Distance : 9

127
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } str
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } str
Distance : 9

128
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } LINE_JOINER
Distance : 9

129
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } assertThat
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } assertThat
Distance : 9

130
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } invocation
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } invocation
Distance : 9

131
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ArrayList
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ArrayList
Distance : 9

132
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } fireChangeEvent
Distance : 9

133
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getInstance
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getInstance
Distance : 9

134
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } serialised
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } serialised
Distance : 9

135
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 9

136
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } parent
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } parent
Distance : 9

137
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } x
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } x
Distance : 9

138
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } testSame
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } testSame
Distance : 9

139
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } :
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } :
Distance : 9

140
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } fail
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } fail
Distance : 9

141
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } List
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } List
Distance : 9

142
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Args
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Args
Distance : 9

143
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } alpha
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } alpha
Distance : 9

144
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } f
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } f
Distance : 9

145
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } valueOf
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } valueOf
Distance : 9

146
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 8

147
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <>
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <>
Distance : 9

148
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ParamChecks
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ParamChecks
Distance : 9

149
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ?
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ?
Distance : 9

150
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } result
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } result
Distance : 9

151
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } try
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } try
Distance : 9

152
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } join
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } join
Distance : 9

153
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } boolean
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } boolean
Distance : 9

154
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } *
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } *
Distance : 9

155
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } type
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } type
Distance : 9

156
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } TestUtils
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } TestUtils
Distance : 9

157
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } length
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } length
Distance : 9

158
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } v
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } v
Distance : 9

159
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } checkNotNull
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } checkNotNull
Distance : 9

160
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Integer
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Integer
Distance : 9

161
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } NodeUtil
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } NodeUtil
Distance : 9

162
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } root
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } root
Distance : 9

163
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Math
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Math
Distance : 9

164
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } checkArgument
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } checkArgument
Distance : 9

165
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } field
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } field
Distance : 9

166
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } t
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } t
Distance : 9

167
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } name
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } name
Distance : 9

168
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } data
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } data
Distance : 9

169
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } NodeTraversal
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } NodeTraversal
Distance : 9

170
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } wanted
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } wanted
Distance : 9

171
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } paint
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } paint
Distance : 9

172
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } m
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } m
Distance : 9

173
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ex
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } ex
Distance : 9

174
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Assert
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Assert
Distance : 9

175
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Test
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Test
Distance : 9

176
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Class
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Class
Distance : 9

177
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } notifyListeners
Distance : 9

178
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } c
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } c
Distance : 9

179
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } n
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } n
Distance : 9

180
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } e
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } e
Distance : 9

181
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } String
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } String
Distance : 9

182
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } add
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } add
Distance : 9

183
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } checkState
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } checkState
Distance : 9

184
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } compiler
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } compiler
Distance : 9

185
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } i
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } i
Distance : 9

186
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } !=
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } !=
Distance : 9

187
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } simpleMethod
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } simpleMethod
Distance : 9

188
Tree	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getArgumentMatcherStorage
Code	if ( categoryKeys.length != this . length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getArgumentMatcherStorage
Distance : 9

189
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } y
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } y
Distance : 9

190
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } optimizer
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } optimizer
Distance : 9

191
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getParent
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } getParent
Distance : 9

192
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } setUp
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } setUp
Distance : 9

193
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Fraction
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Fraction
Distance : 9

194
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } array
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } array
Distance : 9

195
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } int
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } int
Distance : 9

196
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Exception
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Exception
Distance : 9

197
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Node
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Node
Distance : 9

198
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } instance
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } instance
Distance : 9

199
Tree	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <=
Code	if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } <=
Distance : 9

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	setDataset
Code	setDataset
Distance : 4

1
Tree	maxIterations
Code	maxIterations
Distance : 5

2
Tree	randomData
Code	randomData
Distance : 5

3
Tree	DatasetUtils
Code	DatasetUtils
Distance : 5

4
Tree	checkDerivativesConsistency
Code	checkDerivativesConsistency
Distance : 5

5
Tree	includeInterval
Code	includeInterval
Distance : 5

6
Tree	N
Code	N
Distance : 5

7
Tree	domainAxis
Code	domainAxis
Distance : 5

8
Tree	qname
Code	qname
Distance : 5

9
Tree	total
Code	total
Distance : 5

10
Tree	randomData
Code	randomData
Distance : 5

11
Tree	stopFitness
Code	stopFitness
Distance : 5

12
Tree	retraverseOnChange
Code	retraverseOnChange
Distance : 5

13
Tree	maybeMarkFeaturesAsTranspiledAway
Code	maybeMarkFeaturesAsTranspiledAway
Distance : 5

14
Tree	DatasetUtils
Code	DatasetUtils
Distance : 5

15
Tree	+=
Code	+=
Distance : 5

16
Tree	checkArgument
Code	checkArgument
Distance : 5

17
Tree	advanceLinePaint
Code	advanceLinePaint
Distance : 5

18
Tree	addTypes
Code	addTypes
Distance : 5

19
Tree	getLastCompiler
Code	getLastCompiler
Distance : 5

20
Tree	[
Code	[
Distance : 5

21
Tree	axisLinePaint
Code	axisLinePaint
Distance : 5

22
Tree	transX
Code	transX
Distance : 5

23
Tree	domainAxis
Code	domainAxis
Distance : 5

24
Tree	r
Code	r
Distance : 5

25
Tree	entries
Code	entries
Distance : 5

26
Tree	xL
Code	xL
Distance : 5

27
Tree	rangeAxis
Code	rangeAxis
Distance : 5

28
Tree	setLayout
Code	setLayout
Distance : 5

29
Tree	replacement
Code	replacement
Distance : 5

30
Tree	reportChangeToEnclosingScope
Code	reportChangeToEnclosingScope
Distance : 5

31
Tree	languageIn
Code	languageIn
Distance : 5

32
Tree	inputs
Code	inputs
Distance : 5

33
Tree	paletteName
Code	paletteName
Distance : 5

34
Tree	c
Code	c
Distance : 5

35
Tree	testTypes
Code	testTypes
Distance : 5

36
Tree	traverseEs6
Code	traverseEs6
Distance : 5

37
Tree	legendTextFontMap
Code	legendTextFontMap
Distance : 5

38
Tree	item
Code	item
Distance : 5

39
Tree	inputs
Code	inputs
Distance : 5

40
Tree	reportAnd
Code	reportAnd
Distance : 5

41
Tree	constraints
Code	constraints
Distance : 5

42
Tree	validateEmptyToStringStyleRegistry
Code	validateEmptyToStringStyleRegistry
Distance : 5

43
Tree	location
Code	location
Distance : 5

44
Tree	solver
Code	solver
Distance : 5

45
Tree	traverseEs6
Code	traverseEs6
Distance : 5

46
Tree	current
Code	current
Distance : 5

47
Tree	paint
Code	paint
Distance : 5

48
Tree	stroke
Code	stroke
Distance : 5

49
Tree	FastFourierTransformer
Code	FastFourierTransformer
Distance : 5

50
Tree	res
Code	res
Distance : 5

51
Tree	solver
Code	solver
Distance : 5

52
Tree	toPrimitive
Code	toPrimitive
Distance : 5

53
Tree	item
Code	item
Distance : 5

54
Tree	(
Code	(
Distance : 4

55
Tree	constraints
Code	constraints
Distance : 5

56
Tree	validateEmptyToStringStyleRegistry
Code	validateEmptyToStringStyleRegistry
Distance : 5

57
Tree	state
Code	state
Distance : 5

58
Tree	getRawDataItem
Code	getRawDataItem
Distance : 5

59
Tree	bytecodeGenerator
Code	bytecodeGenerator
Distance : 5

60
Tree	solver
Code	solver
Distance : 5

61
Tree	N
Code	N
Distance : 5

62
Tree	integ
Code	integ
Distance : 5

63
Tree	closureRequire
Code	closureRequire
Distance : 5

64
Tree	isScript
Code	isScript
Distance : 5

65
Tree	wi
Code	wi
Distance : 5

66
Tree	y
Code	y
Distance : 5

67
Tree	isLastStep
Code	isLastStep
Distance : 5

68
Tree	maybeMarkFeaturesAsTranspiledAway
Code	maybeMarkFeaturesAsTranspiledAway
Distance : 5

69
Tree	+=
Code	+=
Distance : 5

70
Tree	N
Code	N
Distance : 5

71
Tree	axisLinePaint
Code	axisLinePaint
Distance : 5

72
Tree	setChart
Code	setChart
Distance : 5

73
Tree	objType
Code	objType
Distance : 5

74
Tree	declaration
Code	declaration
Distance : 5

75
Tree	generator
Code	generator
Distance : 5

76
Tree	layout
Code	layout
Distance : 5

77
Tree	problem
Code	problem
Distance : 5

78
Tree	rhs
Code	rhs
Distance : 5

79
Tree	block
Code	block
Distance : 5

80
Tree	secRand
Code	secRand
Distance : 5

81
Tree	downPaint
Code	downPaint
Distance : 5

82
Tree	angleGridlinesVisible
Code	angleGridlinesVisible
Distance : 5

83
Tree	real
Code	real
Distance : 5

84
Tree	y0
Code	y0
Distance : 5

85
Tree	RandomSource
Code	RandomSource
Distance : 5

86
Tree	ShapeUtils
Code	ShapeUtils
Distance : 5

87
Tree	templateJs
Code	templateJs
Distance : 5

88
Tree	registry
Code	registry
Distance : 5

89
Tree	transY
Code	transY
Distance : 5

90
Tree	item
Code	item
Distance : 5

91
Tree	height
Code	height
Distance : 5

92
Tree	traverseScopeRoots
Code	traverseScopeRoots
Distance : 5

93
Tree	Color.BLACK
Code	Color.BLACK
Distance : 5

94
Tree	constraints
Code	constraints
Distance : 5

95
Tree	validateEmptyToStringStyleRegistry
Code	validateEmptyToStringStyleRegistry
Distance : 5

96
Tree	bounds
Code	bounds
Distance : 5

97
Tree	chartPanel
Code	chartPanel
Distance : 5

98
Tree	reportChangeToEnclosingScope
Code	reportChangeToEnclosingScope
Distance : 5

99
Tree	setDataset
Code	setDataset
Distance : 4

100
Tree	xL
Code	xL
Distance : 5

101
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 5

102
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 5

103
Tree	inputs
Code	inputs
Distance : 5

104
Tree	oneOverN
Code	oneOverN
Distance : 5

105
Tree	traverseEs6
Code	traverseEs6
Distance : 5

106
Tree	interpolator
Code	interpolator
Distance : 5

107
Tree	oneOverN
Code	oneOverN
Distance : 5

108
Tree	interpolator
Code	interpolator
Distance : 5

109
Tree	factor
Code	factor
Distance : 5

110
Tree	randomData
Code	randomData
Distance : 5

111
Tree	DatasetUtils
Code	DatasetUtils
Distance : 5

112
Tree	factor
Code	factor
Distance : 5

113
Tree	domainAxis
Code	domainAxis
Distance : 5

114
Tree	assertFalse
Code	assertFalse
Distance : 5

115
Tree	item
Code	item
Distance : 5

116
Tree	constraints
Code	constraints
Distance : 5

117
Tree	validateEmptyToStringStyleRegistry
Code	validateEmptyToStringStyleRegistry
Distance : 5

118
Tree	solver
Code	solver
Distance : 5

119
Tree	N
Code	N
Distance : 5

120
Tree	compiler
Code	compiler
Distance : 5

121
Tree	key
Code	key
Distance : 5

122
Tree	reportChangeToEnclosingScope
Code	reportChangeToEnclosingScope
Distance : 5

123
Tree	maybeMarkFeaturesAsTranspiledAway
Code	maybeMarkFeaturesAsTranspiledAway
Distance : 5

124
Tree	xL
Code	xL
Distance : 5

125
Tree	dataset
Code	dataset
Distance : 4

126
Tree	setDataset
Code	setDataset
Distance : 4

127
Tree	setDataset
Code	setDataset
Distance : 4

128
Tree	NodeTraversal
Code	NodeTraversal
Distance : 5

129
Tree	series
Code	series
Distance : 5

130
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 5

131
Tree	NodeTraversal
Code	NodeTraversal
Distance : 5

132
Tree	oneOverN
Code	oneOverN
Distance : 5

133
Tree	series
Code	series
Distance : 5

134
Tree	interpolator
Code	interpolator
Distance : 5

135
Tree	NodeTraversal
Code	NodeTraversal
Distance : 5

136
Tree	NodeTraversal
Code	NodeTraversal
Distance : 5

137
Tree	series
Code	series
Distance : 5

138
Tree	series
Code	series
Distance : 5

139
Tree	assertFalse
Code	assertFalse
Distance : 5

140
Tree	compiler
Code	compiler
Distance : 5

141
Tree	key
Code	key
Distance : 5

142
Tree	reportCodeChange
Code	reportCodeChange
Distance : 5

143
Tree	passName
Code	passName
Distance : 5

144
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 5

145
Tree	oneOverN
Code	oneOverN
Distance : 5

146
Tree	interpolator
Code	interpolator
Distance : 5

147
Tree	factor
Code	factor
Distance : 5

148
Tree	+=
Code	+=
Distance : 5

149
Tree	factor
Code	factor
Distance : 5

150
Tree	FastFourierTransformer
Code	FastFourierTransformer
Distance : 5

151
Tree	traverse
Code	traverse
Distance : 5

152
Tree	delegate
Code	delegate
Distance : 5

153
Tree	!=
Code	!=
Distance : 5

154
Tree	passName
Code	passName
Distance : 5

155
Tree	PotentialDeclaration
Code	PotentialDeclaration
Distance : 5

156
Tree	axis
Code	axis
Distance : 5

157
Tree	inputs
Code	inputs
Distance : 5

158
Tree	datasetIndex
Code	datasetIndex
Distance : 5

159
Tree	traverseEs6
Code	traverseEs6
Distance : 5

160
Tree	script
Code	script
Distance : 5

161
Tree	dataset
Code	dataset
Distance : 4

162
Tree	datasets
Code	datasets
Distance : 5

163
Tree	resizeRange2
Code	resizeRange2
Distance : 5

164
Tree	randomData
Code	randomData
Distance : 5

165
Tree	scriptNode
Code	scriptNode
Distance : 5

166
Tree	DatasetUtils
Code	DatasetUtils
Distance : 5

167
Tree	dataset
Code	dataset
Distance : 4

168
Tree	features
Code	features
Distance : 5

169
Tree	notify
Code	notify
Distance : 5

170
Tree	domainAxis
Code	domainAxis
Distance : 5

171
Tree	axisLinePaint
Code	axisLinePaint
Distance : 5

172
Tree	reportChangeToEnclosingScope
Code	reportChangeToEnclosingScope
Distance : 5

173
Tree	reportCodeChange
Code	reportCodeChange
Distance : 5

174
Tree	expandable
Code	expandable
Distance : 5

175
Tree	xL
Code	xL
Distance : 5

176
Tree	reportCodeChange
Code	reportCodeChange
Distance : 5

177
Tree	problem
Code	problem
Distance : 5

178
Tree	assertFalse
Code	assertFalse
Distance : 5

179
Tree	y0
Code	y0
Distance : 5

180
Tree	assertFalse
Code	assertFalse
Distance : 5

181
Tree	registry
Code	registry
Distance : 5

182
Tree	Color.BLACK
Code	Color.BLACK
Distance : 5

183
Tree	generator
Code	generator
Distance : 5

184
Tree	passName
Code	passName
Distance : 5

185
Tree	(
Code	(
Distance : 4

186
Tree	passName
Code	passName
Distance : 5

187
Tree	compiler
Code	compiler
Distance : 5

188
Tree	state
Code	state
Distance : 5

189
Tree	hotspot
Code	hotspot
Distance : 5

190
Tree	pass
Code	pass
Distance : 5

191
Tree	reportCodeChange
Code	reportCodeChange
Distance : 5

192
Tree	key
Code	key
Distance : 5

193
Tree	objType
Code	objType
Distance : 5

194
Tree	renderer
Code	renderer
Distance : 5

195
Tree	dataset
Code	dataset
Distance : 4

196
Tree	y
Code	y
Distance : 5

197
Tree	key
Code	key
Distance : 5

198
Tree	compiler
Code	compiler
Distance : 5

199
Tree	renderer
Code	renderer
Distance : 5

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; getMessage
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; getMessage
Distance : 2

1
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Fraction
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Fraction
Distance : 2

2
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; expected
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; expected
Distance : 2

3
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; FastMath
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; FastMath
Distance : 2

4
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertThat
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertThat
Distance : 2

5
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; testSame
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; testSame
Distance : 2

6
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; x
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; x
Distance : 2

7
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; LINE_JOINER
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; LINE_JOINER
Distance : 2

8
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; str
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; str
Distance : 2

9
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; invocation
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; invocation
Distance : 2

10
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; serialised
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; serialised
Distance : 2

11
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; getInstance
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; getInstance
Distance : 2

12
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; *
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; *
Distance : 2

13
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; type
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; type
Distance : 2

14
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ArrayList
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ArrayList
Distance : 2

15
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; fireChangeEvent
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; fireChangeEvent
Distance : 2

16
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; parent
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; parent
Distance : 2

17
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; createIllegalArgumentException
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; createIllegalArgumentException
Distance : 2

18
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; data
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; data
Distance : 2

19
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; add
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; add
Distance : 2

20
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

21
Tree	PathIterator iterator2 = p2 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( return; ) ;
Distance : 1

22
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkArgument
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkArgument
Distance : 2

23
Tree	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Distance : 3

24
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkNotNull
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkNotNull
Distance : 2

25
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; f
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; f
Distance : 2

26
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; throw
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; throw
Distance : 2

27
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; wanted
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; wanted
Distance : 2

28
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NodeUtil
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NodeUtil
Distance : 2

29
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NodeTraversal
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NodeTraversal
Distance : 2

30
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ex
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ex
Distance : 2

31
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Math
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Math
Distance : 2

32
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; root
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; root
Distance : 2

33
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; options
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; options
Distance : 2

34
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; reportCodeChange
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; reportCodeChange
Distance : 2

35
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; p
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; p
Distance : 2

36
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; m
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; m
Distance : 2

37
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; paint
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; paint
Distance : 2

38
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; :
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; :
Distance : 2

39
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; fail
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; fail
Distance : 2

40
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; join
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; join
Distance : 2

41
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; boolean
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; boolean
Distance : 2

42
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; result
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; result
Distance : 2

43
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; try
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; try
Distance : 2

44
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; stream
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; stream
Distance : 2

45
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ParamChecks
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ParamChecks
Distance : 2

46
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; IllegalArgumentException
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; IllegalArgumentException
Distance : 2

47
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; field
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; field
Distance : 2

48
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; catch
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; catch
Distance : 2

49
Tree	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Distance : 3

50
Tree	PathIterator iterator2 = p2 . getPathIterator ( default: ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( default: ) ;
Distance : 1

51
Tree	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Distance : 3

52
Tree	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Distance : 3

53
Tree	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Distance : 3

54
Tree	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p1 = p1 . getPathIterator ( super(); ) ;
Distance : 3

55
Tree	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Distance : 3

56
Tree	PathIterator p1 = p2 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( continue; ) ;
Distance : 2

57
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Distance : 2

58
Tree	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Distance : 3

59
Tree	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Distance : 3

60
Tree	PathIterator p1 = p2 . getPathIterator ( default: ) ;
Code	PathIterator p1 = p2 . getPathIterator ( default: ) ;
Distance : 2

61
Tree	PathIterator p1 = p2 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( break; ) ;
Distance : 2

62
Tree	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Distance : 2

63
Tree	PathIterator p2 = p2 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( continue; ) ;
Distance : 2

64
Tree	PathIterator p2 = p2 . getPathIterator ( default: ) ;
Code	PathIterator p2 = p2 . getPathIterator ( default: ) ;
Distance : 2

65
Tree	PathIterator p2 = p2 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( break; ) ;
Distance : 2

66
Tree	PathIterator p1 = p2 . getPathIterator ( return; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( return; ) ;
Distance : 2

67
Tree	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Distance : 2

68
Tree	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Distance : 3

69
Tree	PathIterator p1 = p2 . getPathIterator ( super(); ) ;
Code	PathIterator p1 = p2 . getPathIterator ( super(); ) ;
Distance : 2

70
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Distance : 2

71
Tree	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Distance : 3

72
Tree	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Distance : 3

73
Tree	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( return; ) ;
Distance : 3

74
Tree	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p1 = p1 . getPathIterator ( default: ) ;
Distance : 3

75
Tree	PathIterator p2 = p2 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( return; ) ;
Distance : 2

76
Tree	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Distance : 3

77
Tree	PathIterator p2 = p2 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p2 . getPathIterator ( super(); ) ;
Distance : 2

78
Tree	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Distance : 3

79
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; ) ;
Distance : 2

80
Tree	PathIterator iterator2 = p2 . getPathIterator ( break; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( break; ) ;
Distance : 1

81
Tree	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator p2 = p1 . getPathIterator ( super(); ) ;
Distance : 3

82
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

83
Tree	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Distance : 2

84
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

85
Tree	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( break; ) ;
Distance : 2

86
Tree	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Distance : 2

87
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); ) ;
Distance : 2

88
Tree	PathIterator p1 = p2 . getPathIterator ( null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null ) ;
Distance : 1

89
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

90
Tree	PathIterator p2 = p2 . getPathIterator ( null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null ) ;
Distance : 1

91
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

92
Tree	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Distance : 0

93
Tree	PathIterator iterator2 = p2 . getPathIterator ( continue; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( continue; ) ;
Distance : 1

94
Tree	PathIterator iterator2 = p2 . getPathIterator ( super(); ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( super(); ) ;
Distance : 1

95
Tree	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Distance : 3

96
Tree	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator p2 = p1 . getPathIterator ( default: ) ;
Distance : 3

97
Tree	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Distance : 3

98
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; length
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; length
Distance : 2

99
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

100
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Node
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Node
Distance : 2

101
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; STRING_CONSTANT
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; STRING_CONSTANT
Distance : 2

102
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Args
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Args
Distance : 2

103
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; protected
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; protected
Distance : 2

104
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; values
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; values
Distance : 2

105
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; index
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; index
Distance : 2

106
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; node
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; node
Distance : 2

107
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; t
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; t
Distance : 2

108
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; name
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; name
Distance : 2

109
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Distance : 2

110
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; -
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; -
Distance : 2

111
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; )
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; )
Distance : 2

112
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ,
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ,
Distance : 2

113
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; .
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; .
Distance : 2

114
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <blank>
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <blank>
Distance : 2

115
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ;
Distance : 2

116
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; out
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; out
Distance : 2

117
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; invocations
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; invocations
Distance : 2

118
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Object
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Object
Distance : 2

119
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; class
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; class
Distance : 2

120
Tree	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( default: ) ;
Distance : 2

121
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; (
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; (
Distance : 2

122
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; T
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; T
Distance : 2

123
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <s>
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <s>
Distance : 2

124
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; >
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; >
Distance : 2

125
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Preconditions
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Preconditions
Distance : 2

126
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; public
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; public
Distance : 2

127
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; &&
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; &&
Distance : 2

128
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !=
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !=
Distance : 2

129
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; i
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; i
Distance : 2

130
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; super
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; super
Distance : 2

131
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; mode
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; mode
Distance : 2

132
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; true
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; true
Distance : 2

133
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; [
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; [
Distance : 2

134
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ]
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ]
Distance : 2

135
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; value
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; value
Distance : 2

136
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; {}
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; {}
Distance : 2

137
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; mock
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; mock
Distance : 2

138
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; MathRuntimeException
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; MathRuntimeException
Distance : 2

139
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Override
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Override
Distance : 2

140
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; n
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; n
Distance : 2

141
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; e
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; e
Distance : 2

142
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; null
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; null
Distance : 2

143
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; +
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; +
Distance : 2

144
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; if
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; if
Distance : 2

145
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <
Distance : 2

146
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; void
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; void
Distance : 2

147
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; []
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; []
Distance : 2

148
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; nullNotPermitted
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; nullNotPermitted
Distance : 2

149
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; final
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; final
Distance : 2

150
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; this
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; this
Distance : 2

151
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; @
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; @
Distance : 2

152
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; return
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; return
Distance : 2

153
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; !
Distance : 2

154
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; =
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; =
Distance : 2

155
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ==
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ==
Distance : 2

156
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NUMBER_CONSTANT
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; NUMBER_CONSTANT
Distance : 2

157
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; compiler
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; compiler
Distance : 2

158
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; TestUtilities
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; TestUtilities
Distance : 2

159
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; getParent
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; getParent
Distance : 2

160
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; setUp
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; setUp
Distance : 2

161
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; /
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; /
Distance : 2

162
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; long
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; long
Distance : 2

163
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; StrBuilder
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; StrBuilder
Distance : 2

164
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; reportMatcher
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; reportMatcher
Distance : 2

165
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; d
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; d
Distance : 2

166
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; equals
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; equals
Distance : 2

167
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; js
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; js
Distance : 2

168
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; test
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; test
Distance : 2

169
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; double
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; double
Distance : 2

170
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; String
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; String
Distance : 2

171
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; v
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; v
Distance : 2

172
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; }
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; }
Distance : 2

173
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Test
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Test
Distance : 2

174
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <>
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; <>
Distance : 2

175
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; array
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; array
Distance : 2

176
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; List
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; List
Distance : 2

177
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; new
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; new
Distance : 2

178
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Exception
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Exception
Distance : 2

179
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertEquals
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertEquals
Distance : 2

180
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; false
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; false
Distance : 2

181
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; int
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; int
Distance : 2

182
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkState
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; checkState
Distance : 2

183
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ()
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ()
Distance : 2

184
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; {
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; {
Distance : 2

185
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Integer
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Integer
Distance : 2

186
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ?
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; ?
Distance : 2

187
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; externs
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; externs
Distance : 2

188
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertTrue
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; assertTrue
Distance : 2

189
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; for
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; for
Distance : 2

190
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Invocation
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Invocation
Distance : 2

191
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; verify
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; verify
Distance : 2

192
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; lines
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; lines
Distance : 2

193
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; notifyListeners
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; notifyListeners
Distance : 2

194
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; c
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; c
Distance : 2

195
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; toString
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; toString
Distance : 2

196
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; source
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; source
Distance : 2

197
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Class
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Class
Distance : 2

198
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Assert
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; Assert
Distance : 2

199
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ; TestUtils
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ; TestUtils
Distance : 2

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } invocations
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } invocations
Distance : 6

1
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Class
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Class
Distance : 6

2
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } {}
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } {}
Distance : 6

3
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } mock
Distance : 6

4
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } f
Distance : 6

5
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ParamChecks
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ParamChecks
Distance : 6

6
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } -
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } -
Distance : 6

7
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Preconditions
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Preconditions
Distance : 6

8
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } T
Distance : 6

9
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } &&
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } &&
Distance : 6

10
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ]
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ]
Distance : 6

11
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } [
Distance : 6

12
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Object
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Object
Distance : 6

13
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } class
Distance : 6

14
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } test
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } test
Distance : 6

15
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } @
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } @
Distance : 6

16
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } !
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } !
Distance : 6

17
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } assertEquals
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } assertEquals
Distance : 6

18
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ==
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ==
Distance : 6

19
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } void
Distance : 6

20
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } []
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } []
Distance : 6

21
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } checkState
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } checkState
Distance : 6

22
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Test
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Test
Distance : 6

23
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } out
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } out
Distance : 6

24
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } nullNotPermitted
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } nullNotPermitted
Distance : 6

25
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } n
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } n
Distance : 6

26
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } !=
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } !=
Distance : 6

27
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } i
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } i
Distance : 6

28
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } MathRuntimeException
Distance : 6

29
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Override
Distance : 6

30
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } public
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } public
Distance : 6

31
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } >
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } >
Distance : 6

32
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } new
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } new
Distance : 6

33
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } STRING_CONSTANT
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } STRING_CONSTANT
Distance : 6

34
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ,
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ,
Distance : 6

35
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } .
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } .
Distance : 6

36
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } }
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } }
Distance : 6

37
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } =
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } =
Distance : 6

38
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } (
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } (
Distance : 6

39
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <s>
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <s>
Distance : 6

40
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <blank>
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <blank>
Distance : 6

41
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } }
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } }
Distance : 6

42
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } )
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } )
Distance : 6

43
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ;
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ;
Distance : 6

44
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ()
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ()
Distance : 6

45
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } {
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } {
Distance : 6

46
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } false
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } false
Distance : 6

47
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } int
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } int
Distance : 6

48
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } double
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } double
Distance : 6

49
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } e
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } e
Distance : 6

50
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } else
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } else
Distance : 6

51
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } NUMBER_CONSTANT
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } NUMBER_CONSTANT
Distance : 6

52
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } this
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } this
Distance : 6

53
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } final
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } final
Distance : 6

54
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } name
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } name
Distance : 6

55
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } t
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } t
Distance : 6

56
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Collection
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Collection
Distance : 6

57
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getField
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getField
Distance : 6

58
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } dataset
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } dataset
Distance : 6

59
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } protected
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } protected
Distance : 6

60
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } PlotChangeEvent
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } PlotChangeEvent
Distance : 6

61
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } mode
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } mode
Distance : 6

62
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } mockingProgress
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } mockingProgress
Distance : 6

63
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } return;
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } return;
Distance : 6

64
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } isEmpty
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } isEmpty
Distance : 6

65
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } char
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } char
Distance : 6

66
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } static
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } static
Distance : 6

67
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } setAcceptedLanguage
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } setAcceptedLanguage
Distance : 6

68
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } JSType
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } JSType
Distance : 6

69
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } get
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } get
Distance : 6

70
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getMessage
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getMessage
Distance : 6

71
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } true
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } true
Distance : 6

72
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } return
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } return
Distance : 6

73
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } if
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } if
Distance : 6

74
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } stream
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } stream
Distance : 6

75
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <
Distance : 6

76
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } solver
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } solver
Distance : 6

77
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } pattern
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } pattern
Distance : 6

78
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } js
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } js
Distance : 6

79
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } TestUtilities
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } TestUtilities
Distance : 6

80
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } equals
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } equals
Distance : 6

81
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } d
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } d
Distance : 6

82
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } externs
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } externs
Distance : 6

83
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } assertTrue
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } assertTrue
Distance : 6

84
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } for
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } for
Distance : 6

85
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Invocation
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Invocation
Distance : 6

86
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getParent
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getParent
Distance : 6

87
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } setUp
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } setUp
Distance : 6

88
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } StrBuilder
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } StrBuilder
Distance : 6

89
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } reportMatcher
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } reportMatcher
Distance : 6

90
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } index
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } index
Distance : 6

91
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } node
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } node
Distance : 6

92
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } matcher
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } matcher
Distance : 6

93
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } abs
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } abs
Distance : 6

94
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Double
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Double
Distance : 6

95
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } PeriodType
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } PeriodType
Distance : 6

96
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } instant
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } instant
Distance : 6

97
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } values
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } values
Distance : 6

98
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } isNormalBlock
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } isNormalBlock
Distance : 6

99
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
Distance : 5

100
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } contains
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } contains
Distance : 6

101
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <=
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <=
Distance : 6

102
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } a
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } a
Distance : 6

103
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } LanguageMode.ECMASCRIPT_2015
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } LanguageMode.ECMASCRIPT_2015
Distance : 6

104
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } size
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } size
Distance : 6

105
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } StringBuilder
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } StringBuilder
Distance : 6

106
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } b
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } b
Distance : 6

107
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } MutableTimePeriod
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } MutableTimePeriod
Distance : 6

108
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } stroke
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } stroke
Distance : 6

109
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } traverseEs6
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } traverseEs6
Distance : 6

110
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } UnivariateFunction
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } UnivariateFunction
Distance : 6

111
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } sb
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } sb
Distance : 6

112
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } throws
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } throws
Distance : 6

113
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } scope
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } scope
Distance : 6

114
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } sqrt
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } sqrt
Distance : 6

115
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } clone
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } clone
Distance : 6

116
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } returnZero
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } returnZero
Distance : 6

117
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getFirstChild
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getFirstChild
Distance : 6

118
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } simpleMethod
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } simpleMethod
Distance : 6

119
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getArgumentMatcherStorage
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getArgumentMatcherStorage
Distance : 6

120
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } append
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } append
Distance : 6

121
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } optimizer
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } optimizer
Distance : 6

122
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } obj
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } obj
Distance : 6

123
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } chrono
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } chrono
Distance : 6

124
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } isBlock
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } isBlock
Distance : 6

125
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <>
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } <>
Distance : 6

126
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Integer
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Integer
Distance : 6

127
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } v
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } v
Distance : 6

128
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } reportCodeChange
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } reportCodeChange
Distance : 6

129
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } IllegalArgumentException
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } IllegalArgumentException
Distance : 6

130
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } invocation
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } invocation
Distance : 6

131
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } assertThat
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } assertThat
Distance : 6

132
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } FastMath
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } FastMath
Distance : 6

133
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } expected
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } expected
Distance : 6

134
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } createIllegalArgumentException
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } createIllegalArgumentException
Distance : 6

135
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } parent
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } parent
Distance : 6

136
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } fireChangeEvent
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } fireChangeEvent
Distance : 6

137
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ArrayList
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ArrayList
Distance : 6

138
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } testSame
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } testSame
Distance : 6

139
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } x
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } x
Distance : 6

140
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } LINE_JOINER
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } LINE_JOINER
Distance : 6

141
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } str
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } str
Distance : 6

142
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } try
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } try
Distance : 6

143
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } result
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } result
Distance : 6

144
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } fail
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } fail
Distance : 6

145
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } :
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } :
Distance : 6

146
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } valueOf
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } valueOf
Distance : 6

147
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } y
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } y
Distance : 6

148
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; }
Distance : 5

149
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } array
Distance : 6

150
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ?
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ?
Distance : 6

151
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } boolean
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } boolean
Distance : 6

152
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } m
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } m
Distance : 6

153
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } paint
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } paint
Distance : 6

154
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } type
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } type
Distance : 6

155
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } *
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } *
Distance : 6

156
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getInstance
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } getInstance
Distance : 6

157
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } serialised
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } serialised
Distance : 6

158
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Fraction
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Fraction
Distance : 6

159
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } checkNotNull
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } checkNotNull
Distance : 6

160
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } source
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } source
Distance : 6

161
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } toString
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } toString
Distance : 6

162
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Math
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Math
Distance : 6

163
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } root
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } root
Distance : 6

164
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } options
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } options
Distance : 6

165
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } p
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } p
Distance : 6

166
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } data
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } data
Distance : 6

167
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } add
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } add
Distance : 6

168
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } field
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } field
Distance : 6

169
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } checkArgument
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } checkArgument
Distance : 6

170
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ex
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } ex
Distance : 6

171
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } NodeUtil
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } NodeUtil
Distance : 6

172
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } join
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } join
Distance : 6

173
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Args
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Args
Distance : 6

174
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } NodeTraversal
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } NodeTraversal
Distance : 6

175
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } List
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } List
Distance : 6

176
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Exception
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Exception
Distance : 6

177
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Node
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Node
Distance : 6

178
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } c
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } c
Distance : 6

179
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } notifyListeners
Distance : 6

180
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } lines
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } lines
Distance : 6

181
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } verify
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } verify
Distance : 6

182
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } compiler
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } compiler
Distance : 6

183
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } String
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } String
Distance : 6

184
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } null
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } null
Distance : 6

185
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } wanted
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } wanted
Distance : 6

186
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } +
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } +
Distance : 6

187
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } throw
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } throw
Distance : 6

188
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } super
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } super
Distance : 6

189
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } value
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } value
Distance : 6

190
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } long
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } long
Distance : 6

191
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } /
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } /
Distance : 6

192
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } length
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } length
Distance : 6

193
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } TestUtils
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } TestUtils
Distance : 6

194
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } alpha
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } alpha
Distance : 6

195
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } instance
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } instance
Distance : 6

196
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Assert
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } Assert
Distance : 6

197
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } catch
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } catch
Distance : 6

198
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } LanguageMode.ECMASCRIPT6
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } LanguageMode.ECMASCRIPT6
Distance : 6

199
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } s
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; } s
Distance : 6

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } StrBuilder
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } StrBuilder
Distance : 2

1
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } add
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } add
Distance : 2

2
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } checkArgument
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } checkArgument
Distance : 2

3
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } data
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } data
Distance : 2

4
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } NodeUtil
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } NodeUtil
Distance : 2

5
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } void
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } void
Distance : 2

6
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } throw
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } throw
Distance : 2

7
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } compiler
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } compiler
Distance : 2

8
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } catch
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } catch
Distance : 2

9
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } e
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } e
Distance : 2

10
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } +
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } +
Distance : 2

11
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } n
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } n
Distance : 2

12
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } NodeTraversal
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } NodeTraversal
Distance : 2

13
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } reportCodeChange
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } reportCodeChange
Distance : 2

14
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } mock
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } mock
Distance : 2

15
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ]
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ]
Distance : 2

16
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } mode
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } mode
Distance : 2

17
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } &&
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } &&
Distance : 2

18
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } public
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } public
Distance : 2

19
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } final
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } final
Distance : 2

20
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } null
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } null
Distance : 2

21
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getArgumentMatcherStorage
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getArgumentMatcherStorage
Distance : 2

22
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } wanted
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } wanted
Distance : 2

23
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } if
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } if
Distance : 2

24
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ex
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ex
Distance : 2

25
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Preconditions
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Preconditions
Distance : 2

26
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } new
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } new
Distance : 2

27
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } =
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } =
Distance : 2

28
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } STRING_CONSTANT
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } STRING_CONSTANT
Distance : 2

29
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ()
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ()
Distance : 2

30
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ,
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ,
Distance : 2

31
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } {
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } {
Distance : 2

32
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } }
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } }
Distance : 2

33
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <
Distance : 2

34
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } .
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } .
Distance : 2

35
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } (
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } (
Distance : 2

36
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ;
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ;
Distance : 2

37
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <blank>
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <blank>
Distance : 2

38
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } {
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } {
Distance : 2

39
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <s>
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <s>
Distance : 2

40
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } )
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } )
Distance : 2

41
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } >
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } >
Distance : 2

42
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } js
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } js
Distance : 2

43
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } return
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } return
Distance : 2

44
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } true
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } true
Distance : 2

45
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } this
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } this
Distance : 2

46
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } -
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } -
Distance : 2

47
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } root
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } root
Distance : 2

48
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } NUMBER_CONSTANT
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } NUMBER_CONSTANT
Distance : 2

49
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } /
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } /
Distance : 2

50
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } long
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } long
Distance : 2

51
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } value
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } value
Distance : 2

52
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } T
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } T
Distance : 2

53
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } setAcceptedLanguage
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } setAcceptedLanguage
Distance : 2

54
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } super
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } super
Distance : 2

55
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } instant
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } instant
Distance : 2

56
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } matcher
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } matcher
Distance : 2

57
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } stream
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } stream
Distance : 2

58
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } values
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } values
Distance : 2

59
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getMessage
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getMessage
Distance : 2

60
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } else
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } else
Distance : 2

61
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } *
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } *
Distance : 2

62
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } y
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } y
Distance : 2

63
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } isBlock
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } isBlock
Distance : 2

64
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } abs
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } abs
Distance : 2

65
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , zone . getDefault () ) ; }
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , zone . getDefault () ) ; }
Distance : 2

66
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , time . getDefault () ) ; }
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , time . getDefault () ) ; }
Distance : 2

67
Tree	{ this ( zone , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
Code	{ this ( zone , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
Distance : 2

68
Tree	{ this ( Locale , RegularTimePeriod.DEFAULT_TIME_ZONE , time . getDefault () ) ; }
Code	{ this ( Locale , RegularTimePeriod.DEFAULT_TIME_ZONE , time . getDefault () ) ; }
Distance : 3

69
Tree	{ this ( zone , RegularTimePeriod.DEFAULT_TIME_ZONE , zone . getDefault () ) ; }
Code	{ this ( zone , RegularTimePeriod.DEFAULT_TIME_ZONE , zone . getDefault () ) ; }
Distance : 3

70
Tree	{ this ( zone , RegularTimePeriod.DEFAULT_TIME_ZONE , time . getDefault () ) ; }
Code	{ this ( zone , RegularTimePeriod.DEFAULT_TIME_ZONE , time . getDefault () ) ; }
Distance : 3

71
Tree	{ this ( Locale , RegularTimePeriod.DEFAULT_TIME_ZONE , zone . getDefault () ) ; }
Code	{ this ( Locale , RegularTimePeriod.DEFAULT_TIME_ZONE , zone . getDefault () ) ; }
Distance : 3

72
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } !=
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } !=
Distance : 2

73
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Assert
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Assert
Distance : 2

74
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } alpha
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } alpha
Distance : 2

75
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } double
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } double
Distance : 2

76
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } checkNotNull
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } checkNotNull
Distance : 2

77
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } TestUtils
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } TestUtils
Distance : 2

78
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Fraction
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Fraction
Distance : 2

79
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } valueOf
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } valueOf
Distance : 2

80
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } node
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } node
Distance : 2

81
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getParent
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getParent
Distance : 2

82
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } reportMatcher
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } reportMatcher
Distance : 2

83
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } setUp
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } setUp
Distance : 2

84
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } out
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } out
Distance : 2

85
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } index
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } index
Distance : 2

86
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } invocations
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } invocations
Distance : 2

87
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } protected
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } protected
Distance : 2

88
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } chrono
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } chrono
Distance : 2

89
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } traverseEs6
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } traverseEs6
Distance : 2

90
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } instance
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } instance
Distance : 2

91
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } optimizer
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } optimizer
Distance : 2

92
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } assertTrue
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } assertTrue
Distance : 2

93
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } simpleMethod
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } simpleMethod
Distance : 2

94
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } [
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } [
Distance : 2

95
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } i
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } i
Distance : 2

96
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } checkState
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } checkState
Distance : 2

97
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } int
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } int
Distance : 2

98
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } b
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } b
Distance : 2

99
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
Distance : 1

100
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 2

101
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } return;
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } return;
Distance : 2

102
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } char
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } char
Distance : 2

103
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } mockingProgress
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } mockingProgress
Distance : 2

104
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } size
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } size
Distance : 2

105
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } clone
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } clone
Distance : 2

106
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Double
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Double
Distance : 2

107
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } s
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } s
Distance : 2

108
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } PeriodType
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } PeriodType
Distance : 2

109
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } obj
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } obj
Distance : 2

110
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } contains
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } contains
Distance : 2

111
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <=
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <=
Distance : 2

112
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } String
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } String
Distance : 2

113
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } assertThat
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } assertThat
Distance : 2

114
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } str
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } str
Distance : 2

115
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } testSame
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } testSame
Distance : 2

116
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } parent
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } parent
Distance : 2

117
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } StringBuilder
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } StringBuilder
Distance : 2

118
Tree	{ this ( Locale , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
Code	{ this ( Locale , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
Distance : 2

119
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Object
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Object
Distance : 2

120
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } JSType
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } JSType
Distance : 2

121
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getFirstChild
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getFirstChild
Distance : 2

122
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } static
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } static
Distance : 2

123
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } isEmpty
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } isEmpty
Distance : 2

124
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } source
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } source
Distance : 2

125
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Exception
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Exception
Distance : 2

126
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } join
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } join
Distance : 2

127
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } paint
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } paint
Distance : 2

128
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } boolean
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } boolean
Distance : 2

129
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getInstance
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } getInstance
Distance : 2

130
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } type
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } type
Distance : 2

131
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } serialised
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } serialised
Distance : 2

132
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } fireChangeEvent
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } fireChangeEvent
Distance : 2

133
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } array
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } array
Distance : 2

134
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } f
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } f
Distance : 2

135
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } class
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } class
Distance : 2

136
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ParamChecks
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ParamChecks
Distance : 2

137
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } createIllegalArgumentException
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } createIllegalArgumentException
Distance : 2

138
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } MathRuntimeException
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } MathRuntimeException
Distance : 2

139
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ArrayList
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ArrayList
Distance : 2

140
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } LINE_JOINER
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } LINE_JOINER
Distance : 2

141
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } a
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } a
Distance : 2

142
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } MutableTimePeriod
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } MutableTimePeriod
Distance : 2

143
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } get
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } get
Distance : 2

144
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } sqrt
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } sqrt
Distance : 2

145
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } {}
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } {}
Distance : 2

146
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } UnivariateFunction
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } UnivariateFunction
Distance : 2

147
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } List
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } List
Distance : 2

148
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } returnZero
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } returnZero
Distance : 2

149
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } :
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } :
Distance : 2

150
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } try
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } try
Distance : 2

151
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } m
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } m
Distance : 2

152
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } v
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } v
Distance : 2

153
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } verify
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } verify
Distance : 2

154
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } c
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } c
Distance : 2

155
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } lines
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } lines
Distance : 2

156
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Integer
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Integer
Distance : 2

157
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Node
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Node
Distance : 2

158
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } length
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } length
Distance : 2

159
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } isNormalBlock
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } isNormalBlock
Distance : 2

160
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } throws
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } throws
Distance : 2

161
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } expected
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } expected
Distance : 2

162
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } invocation
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } invocation
Distance : 2

163
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } FastMath
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } FastMath
Distance : 2

164
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } t
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } t
Distance : 2

165
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } name
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } name
Distance : 2

166
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <>
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } <>
Distance : 2

167
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Args
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Args
Distance : 2

168
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } result
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } result
Distance : 2

169
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } IllegalArgumentException
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } IllegalArgumentException
Distance : 2

170
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } scope
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } scope
Distance : 2

171
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } append
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } append
Distance : 2

172
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ?
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ?
Distance : 2

173
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } !
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } !
Distance : 2

174
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } nullNotPermitted
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } nullNotPermitted
Distance : 2

175
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } fail
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } fail
Distance : 2

176
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } []
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } []
Distance : 2

177
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } @
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } @
Distance : 2

178
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } assertEquals
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } assertEquals
Distance : 2

179
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } test
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } test
Distance : 2

180
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ==
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } ==
Distance : 2

181
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } equals
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } equals
Distance : 2

182
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Invocation
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Invocation
Distance : 2

183
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } externs
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } externs
Distance : 2

184
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } for
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } for
Distance : 2

185
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } TestUtilities
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } TestUtilities
Distance : 2

186
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } d
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } d
Distance : 2

187
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } sb
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } sb
Distance : 2

188
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Override
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Override
Distance : 2

189
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } field
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } field
Distance : 2

190
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } false
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } false
Distance : 2

191
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } x
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } x
Distance : 2

192
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } notifyListeners
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } notifyListeners
Distance : 2

193
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Test
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Test
Distance : 2

194
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } p
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } p
Distance : 2

195
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Class
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Class
Distance : 2

196
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } options
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } options
Distance : 2

197
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Math
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } Math
Distance : 2

198
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } toString
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } toString
Distance : 2

199
Tree	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } stroke
Code	{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; } stroke
Distance : 2

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( dataset != null ) { return result ; } TestUtils
Code	if ( dataset != null ) { return result ; } TestUtils
Distance : 2

1
Tree	if ( dataset != null ) { return result ; } test
Code	if ( dataset != null ) { return result ; } test
Distance : 2

2
Tree	if ( dataset != null ) { return result ; } testSame
Code	if ( dataset != null ) { return result ; } testSame
Distance : 2

3
Tree	if ( dataset != null ) { return result ; } <s>
Code	if ( dataset != null ) { return result ; } <s>
Distance : 2

4
Tree	if ( dataset != null ) { return result ; } (
Code	if ( dataset != null ) { return result ; } (
Distance : 2

5
Tree	if ( dataset != null ) { return result ; } <blank>
Code	if ( dataset != null ) { return result ; } <blank>
Distance : 2

6
Tree	if ( dataset != null ) { return result ; } ;
Code	if ( dataset != null ) { return result ; } ;
Distance : 2

7
Tree	if ( dataset != null ) { return result ; } )
Code	if ( dataset != null ) { return result ; } )
Distance : 2

8
Tree	if ( dataset != null ) { return result ; } .
Code	if ( dataset != null ) { return result ; } .
Distance : 2

9
Tree	if ( dataset != null ) { return result ; } ,
Code	if ( dataset != null ) { return result ; } ,
Distance : 2

10
Tree	if ( dataset != null ) { return result ; } (
Code	if ( dataset != null ) { return result ; } (
Distance : 2

11
Tree	if ( dataset != null ) { return result ; } nullNotPermitted
Code	if ( dataset != null ) { return result ; } nullNotPermitted
Distance : 2

12
Tree	if ( dataset != null ) { return result ; } field
Code	if ( dataset != null ) { return result ; } field
Distance : 2

13
Tree	if ( dataset != null ) { return result ; } !
Code	if ( dataset != null ) { return result ; } !
Distance : 2

14
Tree	if ( dataset != null ) { return result ; } value
Code	if ( dataset != null ) { return result ; } value
Distance : 2

15
Tree	if ( dataset != null ) { return result ; } checkState
Code	if ( dataset != null ) { return result ; } checkState
Distance : 2

16
Tree	if ( dataset != null ) { return result ; } int
Code	if ( dataset != null ) { return result ; } int
Distance : 2

17
Tree	if ( dataset != null ) { return result ; } i
Code	if ( dataset != null ) { return result ; } i
Distance : 2

18
Tree	if ( dataset != null ) { return result ; } !=
Code	if ( dataset != null ) { return result ; } !=
Distance : 2

19
Tree	if ( dataset != null ) { return result ; } s
Code	if ( dataset != null ) { return result ; } s
Distance : 2

20
Tree	if ( dataset != null ) { return result ; } isNormalBlock
Code	if ( dataset != null ) { return result ; } isNormalBlock
Distance : 2

21
Tree	if ( dataset != null ) { return result ; } obj
Code	if ( dataset != null ) { return result ; } obj
Distance : 2

22
Tree	if ( dataset != null ) { return result ; } x
Code	if ( dataset != null ) { return result ; } x
Distance : 2

23
Tree	if ( dataset != null ) { return result ; } <=
Code	if ( dataset != null ) { return result ; } <=
Distance : 2

24
Tree	if ( dataset != null ) { return result ; } parent
Code	if ( dataset != null ) { return result ; } parent
Distance : 2

25
Tree	if ( dataset != null ) { return result ; } str
Code	if ( dataset != null ) { return result ; } str
Distance : 2

26
Tree	if ( dataset != null ) { return result ; } getInstance
Code	if ( dataset != null ) { return result ; } getInstance
Distance : 2

27
Tree	if ( dataset != null ) { return result ; } fireChangeEvent
Code	if ( dataset != null ) { return result ; } fireChangeEvent
Distance : 2

28
Tree	if ( dataset != null ) { return result ; } ArrayList
Code	if ( dataset != null ) { return result ; } ArrayList
Distance : 2

29
Tree	if ( dataset != null ) { return result ; } checkArgument
Code	if ( dataset != null ) { return result ; } checkArgument
Distance : 2

30
Tree	if ( dataset != null ) { return result ; } length
Code	if ( dataset != null ) { return result ; } length
Distance : 2

31
Tree	if ( dataset != null ) { return result ; } t
Code	if ( dataset != null ) { return result ; } t
Distance : 2

32
Tree	if ( dataset != null ) { return result ; } name
Code	if ( dataset != null ) { return result ; } name
Distance : 2

33
Tree	if ( dataset != null ) { return result ; } expected
Code	if ( dataset != null ) { return result ; } expected
Distance : 2

34
Tree	if ( dataset != null ) { return result ; } FastMath
Code	if ( dataset != null ) { return result ; } FastMath
Distance : 2

35
Tree	if ( dataset != null ) { return result ; } reportCodeChange
Code	if ( dataset != null ) { return result ; } reportCodeChange
Distance : 2

36
Tree	if ( dataset != null ) { return result ; } IllegalArgumentException
Code	if ( dataset != null ) { return result ; } IllegalArgumentException
Distance : 2

37
Tree	if ( dataset != null ) { return result ; } double
Code	if ( dataset != null ) { return result ; } double
Distance : 2

38
Tree	if ( dataset != null ) { return result ; } false
Code	if ( dataset != null ) { return result ; } false
Distance : 2

39
Tree	if ( dataset != null ) { return result ; } @
Code	if ( dataset != null ) { return result ; } @
Distance : 2

40
Tree	if ( dataset != null ) { return result ; } join
Code	if ( dataset != null ) { return result ; } join
Distance : 2

41
Tree	if ( dataset != null ) { return result ; } boolean
Code	if ( dataset != null ) { return result ; } boolean
Distance : 2

42
Tree	if ( dataset != null ) { return result ; } *
Code	if ( dataset != null ) { return result ; } *
Distance : 2

43
Tree	if ( dataset != null ) { return result ; } type
Code	if ( dataset != null ) { return result ; } type
Distance : 2

44
Tree	if ( dataset != null ) { return result ; } invocation
Code	if ( dataset != null ) { return result ; } invocation
Distance : 2

45
Tree	if ( dataset != null ) { return result ; } assertThat
Code	if ( dataset != null ) { return result ; } assertThat
Distance : 2

46
Tree	if ( dataset != null ) { return result ; } LINE_JOINER
Code	if ( dataset != null ) { return result ; } LINE_JOINER
Distance : 2

47
Tree	if ( dataset != null ) { return result ; } createIllegalArgumentException
Code	if ( dataset != null ) { return result ; } createIllegalArgumentException
Distance : 2

48
Tree	if ( dataset != null ) { return result ; } serialised
Code	if ( dataset != null ) { return result ; } serialised
Distance : 2

49
Tree	if ( dataset != null ) { return result ; } []
Code	if ( dataset != null ) { return result ; } []
Distance : 2

50
Tree	if ( dataset != null ) { return result ; } clone
Code	if ( dataset != null ) { return result ; } clone
Distance : 2

51
Tree	if ( result != null ) { return dataset ; }
Code	if ( result != null ) { return dataset ; }
Distance : 3

52
Tree	if ( dataset != default: ) { return result ; }
Code	if ( dataset != default: ) { return result ; }
Distance : 2

53
Tree	if ( dataset != continue; ) { return result ; }
Code	if ( dataset != continue; ) { return result ; }
Distance : 2

54
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

55
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

56
Tree	if ( dataset != null ) { return dataset ; }
Code	if ( dataset != null ) { return dataset ; }
Distance : 2

57
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

58
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

59
Tree	if ( dataset != break; ) { return result ; }
Code	if ( dataset != break; ) { return result ; }
Distance : 2

60
Tree	if ( dataset != super(); ) { return dataset ; }
Code	if ( dataset != super(); ) { return dataset ; }
Distance : 3

61
Tree	if ( result != return; ) { return dataset ; }
Code	if ( result != return; ) { return dataset ; }
Distance : 4

62
Tree	if ( result != break; ) { return result ; }
Code	if ( result != break; ) { return result ; }
Distance : 3

63
Tree	if ( result != continue; ) { return result ; }
Code	if ( result != continue; ) { return result ; }
Distance : 3

64
Tree	if ( dataset != break; ) { return dataset ; }
Code	if ( dataset != break; ) { return dataset ; }
Distance : 3

65
Tree	if ( result != default: ) { return result ; }
Code	if ( result != default: ) { return result ; }
Distance : 3

66
Tree	if ( dataset != continue; ) { return dataset ; }
Code	if ( dataset != continue; ) { return dataset ; }
Distance : 3

67
Tree	if ( dataset != default: ) { return dataset ; }
Code	if ( dataset != default: ) { return dataset ; }
Distance : 3

68
Tree	if ( result != super(); ) { return dataset ; }
Code	if ( result != super(); ) { return dataset ; }
Distance : 4

69
Tree	if ( result != break; ) { return dataset ; }
Code	if ( result != break; ) { return dataset ; }
Distance : 4

70
Tree	if ( result != continue; ) { return dataset ; }
Code	if ( result != continue; ) { return dataset ; }
Distance : 4

71
Tree	if ( result != default: ) { return dataset ; }
Code	if ( result != default: ) { return dataset ; }
Distance : 4

72
Tree	if ( result != super(); ) { return result ; }
Code	if ( result != super(); ) { return result ; }
Distance : 3

73
Tree	if ( dataset != null ) { return result ; } PeriodType
Code	if ( dataset != null ) { return result ; } PeriodType
Distance : 2

74
Tree	if ( dataset != null ) { return result ; } array
Code	if ( dataset != null ) { return result ; } array
Distance : 2

75
Tree	if ( dataset != null ) { return result ; } ParamChecks
Code	if ( dataset != null ) { return result ; } ParamChecks
Distance : 2

76
Tree	if ( dataset != null ) { return result ; } sqrt
Code	if ( dataset != null ) { return result ; } sqrt
Distance : 2

77
Tree	if ( dataset != null ) { return result ; } static
Code	if ( dataset != null ) { return result ; } static
Distance : 2

78
Tree	if ( dataset != null ) { return result ; } setAcceptedLanguage
Code	if ( dataset != null ) { return result ; } setAcceptedLanguage
Distance : 2

79
Tree	if ( dataset != null ) { return result ; } super
Code	if ( dataset != null ) { return result ; } super
Distance : 2

80
Tree	if ( dataset != null ) { return result ; } T
Code	if ( dataset != null ) { return result ; } T
Distance : 2

81
Tree	if ( dataset != null ) { return result ; } Double
Code	if ( dataset != null ) { return result ; } Double
Distance : 2

82
Tree	if ( dataset != null ) { return result ; } <>
Code	if ( dataset != null ) { return result ; } <>
Distance : 2

83
Tree	if ( dataset != null ) { return result ; } &&
Code	if ( dataset != null ) { return result ; } &&
Distance : 2

84
Tree	if ( dataset != null ) { return result ; } assertEquals
Code	if ( dataset != null ) { return result ; } assertEquals
Distance : 2

85
Tree	if ( dataset != null ) { return result ; } reportMatcher
Code	if ( dataset != null ) { return result ; } reportMatcher
Distance : 2

86
Tree	if ( dataset != null ) { return result ; } TestUtilities
Code	if ( dataset != null ) { return result ; } TestUtilities
Distance : 2

87
Tree	if ( dataset != null ) { return result ; } js
Code	if ( dataset != null ) { return result ; } js
Distance : 2

88
Tree	if ( dataset != null ) { return result ; } Invocation
Code	if ( dataset != null ) { return result ; } Invocation
Distance : 2

89
Tree	if ( dataset != null ) { return result ; } for
Code	if ( dataset != null ) { return result ; } for
Distance : 2

90
Tree	if ( dataset != null ) { return result ; } equals
Code	if ( dataset != null ) { return result ; } equals
Distance : 2

91
Tree	if ( dataset != null ) { return result ; } StrBuilder
Code	if ( dataset != null ) { return result ; } StrBuilder
Distance : 2

92
Tree	if ( dataset != null ) { return result ; } class
Code	if ( dataset != null ) { return result ; } class
Distance : 2

93
Tree	if ( dataset != null ) { return result ; } Object
Code	if ( dataset != null ) { return result ; } Object
Distance : 2

94
Tree	if ( dataset != null ) { return result ; } MathRuntimeException
Code	if ( dataset != null ) { return result ; } MathRuntimeException
Distance : 2

95
Tree	if ( dataset != null ) { return result ; } Override
Code	if ( dataset != null ) { return result ; } Override
Distance : 2

96
Tree	if ( dataset != null ) { return result ; } f
Code	if ( dataset != null ) { return result ; } f
Distance : 2

97
Tree	if ( dataset != null ) { return result ; } d
Code	if ( dataset != null ) { return result ; } d
Distance : 2

98
Tree	if ( dataset != null ) { return result ; } matcher
Code	if ( dataset != null ) { return result ; } matcher
Distance : 2

99
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

100
Tree	if ( dataset != null ) { return result ; } getMessage
Code	if ( dataset != null ) { return result ; } getMessage
Distance : 2

101
Tree	if ( dataset != null ) { return result ; } paint
Code	if ( dataset != null ) { return result ; } paint
Distance : 2

102
Tree	if ( dataset != null ) { return result ; } m
Code	if ( dataset != null ) { return result ; } m
Distance : 2

103
Tree	if ( dataset != null ) { return result ; } result
Code	if ( dataset != null ) { return result ; } result
Distance : 2

104
Tree	if ( dataset != null ) { return result ; } Args
Code	if ( dataset != null ) { return result ; } Args
Distance : 2

105
Tree	if ( dataset != null ) { return result ; } stream
Code	if ( dataset != null ) { return result ; } stream
Distance : 2

106
Tree	if ( dataset != return; ) { return dataset ; }
Code	if ( dataset != return; ) { return dataset ; }
Distance : 3

107
Tree	if ( dataset != null ) { return result ; } char
Code	if ( dataset != null ) { return result ; } char
Distance : 2

108
Tree	if ( dataset != null ) { return result ; } notifyListeners
Code	if ( dataset != null ) { return result ; } notifyListeners
Distance : 2

109
Tree	if ( dataset != null ) { return result ; } Class
Code	if ( dataset != null ) { return result ; } Class
Distance : 2

110
Tree	if ( dataset != null ) { return result ; } Test
Code	if ( dataset != null ) { return result ; } Test
Distance : 2

111
Tree	if ( dataset != null ) { return result ; } p
Code	if ( dataset != null ) { return result ; } p
Distance : 2

112
Tree	if ( dataset != null ) { return result ; } options
Code	if ( dataset != null ) { return result ; } options
Distance : 2

113
Tree	if ( dataset != null ) { return result ; } source
Code	if ( dataset != null ) { return result ; } source
Distance : 2

114
Tree	if ( dataset != null ) { return result ; } toString
Code	if ( dataset != null ) { return result ; } toString
Distance : 2

115
Tree	if ( dataset != null ) { return result ; } if
Code	if ( dataset != null ) { return result ; } if
Distance : 2

116
Tree	if ( dataset != null ) { return result ; } =
Code	if ( dataset != null ) { return result ; } =
Distance : 2

117
Tree	if ( dataset != null ) { return result ; } }
Code	if ( dataset != null ) { return result ; } }
Distance : 2

118
Tree	if ( dataset != null ) { return result ; } ()
Code	if ( dataset != null ) { return result ; } ()
Distance : 2

119
Tree	if ( dataset != null ) { return result ; } {
Code	if ( dataset != null ) { return result ; } {
Distance : 2

120
Tree	if ( dataset != null ) { return result ; } List
Code	if ( dataset != null ) { return result ; } List
Distance : 2

121
Tree	if ( dataset != null ) { return result ; } try
Code	if ( dataset != null ) { return result ; } try
Distance : 2

122
Tree	if ( dataset != null ) { return result ; } else
Code	if ( dataset != null ) { return result ; } else
Distance : 2

123
Tree	if ( dataset != null ) { return result ; } instant
Code	if ( dataset != null ) { return result ; } instant
Distance : 2

124
Tree	if ( dataset != null ) { return result ; } compiler
Code	if ( dataset != null ) { return result ; } compiler
Distance : 2

125
Tree	if ( dataset != null ) { return result ; } String
Code	if ( dataset != null ) { return result ; } String
Distance : 2

126
Tree	if ( dataset != null ) { return result ; } e
Code	if ( dataset != null ) { return result ; } e
Distance : 2

127
Tree	if ( dataset != null ) { return result ; } <
Code	if ( dataset != null ) { return result ; } <
Distance : 2

128
Tree	if ( dataset != null ) { return result ; } n
Code	if ( dataset != null ) { return result ; } n
Distance : 2

129
Tree	if ( dataset != null ) { return result ; } catch
Code	if ( dataset != null ) { return result ; } catch
Distance : 2

130
Tree	if ( dataset != null ) { return result ; } void
Code	if ( dataset != null ) { return result ; } void
Distance : 2

131
Tree	if ( dataset != null ) { return result ; } ==
Code	if ( dataset != null ) { return result ; } ==
Distance : 2

132
Tree	if ( dataset != null ) { return result ; } return
Code	if ( dataset != null ) { return result ; } return
Distance : 2

133
Tree	if ( dataset != null ) { return result ; } NUMBER_CONSTANT
Code	if ( dataset != null ) { return result ; } NUMBER_CONSTANT
Distance : 2

134
Tree	if ( dataset != null ) { return result ; } STRING_CONSTANT
Code	if ( dataset != null ) { return result ; } STRING_CONSTANT
Distance : 2

135
Tree	if ( dataset != null ) { return result ; } new
Code	if ( dataset != null ) { return result ; } new
Distance : 2

136
Tree	if ( dataset != null ) { return result ; } throw
Code	if ( dataset != null ) { return result ; } throw
Distance : 2

137
Tree	if ( dataset != null ) { return result ; } this
Code	if ( dataset != null ) { return result ; } this
Distance : 2

138
Tree	if ( dataset != null ) { return result ; } JSType
Code	if ( dataset != null ) { return result ; } JSType
Distance : 2

139
Tree	if ( dataset != null ) { return result ; } public
Code	if ( dataset != null ) { return result ; } public
Distance : 2

140
Tree	if ( dataset != null ) { return result ; } {}
Code	if ( dataset != null ) { return result ; } {}
Distance : 2

141
Tree	if ( dataset != null ) { return result ; } b
Code	if ( dataset != null ) { return result ; } b
Distance : 2

142
Tree	if ( dataset != null ) { return result ; } MutableTimePeriod
Code	if ( dataset != null ) { return result ; } MutableTimePeriod
Distance : 2

143
Tree	if ( dataset != null ) { return result ; } LanguageMode.ECMASCRIPT_2015
Code	if ( dataset != null ) { return result ; } LanguageMode.ECMASCRIPT_2015
Distance : 2

144
Tree	if ( dataset != null ) { return result ; } a
Code	if ( dataset != null ) { return result ; } a
Distance : 2

145
Tree	if ( dataset != null ) { return result ; } traverseEs6
Code	if ( dataset != null ) { return result ; } traverseEs6
Distance : 2

146
Tree	if ( dataset != null ) { return result ; } stroke
Code	if ( dataset != null ) { return result ; } stroke
Distance : 2

147
Tree	if ( dataset != null ) { return result ; } chrono
Code	if ( dataset != null ) { return result ; } chrono
Distance : 2

148
Tree	if ( dataset != null ) { return result ; } contains
Code	if ( dataset != null ) { return result ; } contains
Distance : 2

149
Tree	if ( dataset != null ) { return result ; } final
Code	if ( dataset != null ) { return result ; } final
Distance : 2

150
Tree	if ( dataset != null ) { return result ; } ?
Code	if ( dataset != null ) { return result ; } ?
Distance : 2

151
Tree	if ( dataset != null ) { return result ; } checkNotNull
Code	if ( dataset != null ) { return result ; } checkNotNull
Distance : 2

152
Tree	if ( dataset != null ) { return result ; } Fraction
Code	if ( dataset != null ) { return result ; } Fraction
Distance : 2

153
Tree	if ( dataset != null ) { return result ; } /
Code	if ( dataset != null ) { return result ; } /
Distance : 2

154
Tree	if ( dataset != null ) { return result ; } assertTrue
Code	if ( dataset != null ) { return result ; } assertTrue
Distance : 2

155
Tree	if ( dataset != null ) { return result ; } mock
Code	if ( dataset != null ) { return result ; } mock
Distance : 2

156
Tree	if ( dataset != null ) { return result ; } true
Code	if ( dataset != null ) { return result ; } true
Distance : 2

157
Tree	if ( dataset != null ) { return result ; } Assert
Code	if ( dataset != null ) { return result ; } Assert
Distance : 2

158
Tree	if ( dataset != null ) { return result ; } -
Code	if ( dataset != null ) { return result ; } -
Distance : 2

159
Tree	if ( dataset != null ) { return result ; } mode
Code	if ( dataset != null ) { return result ; } mode
Distance : 2

160
Tree	if ( dataset != null ) { return result ; } >
Code	if ( dataset != null ) { return result ; } >
Distance : 2

161
Tree	if ( dataset != null ) { return result ; } null
Code	if ( dataset != null ) { return result ; } null
Distance : 2

162
Tree	if ( dataset != null ) { return result ; } Node
Code	if ( dataset != null ) { return result ; } Node
Distance : 2

163
Tree	if ( dataset != null ) { return result ; } Exception
Code	if ( dataset != null ) { return result ; } Exception
Distance : 2

164
Tree	if ( dataset != null ) { return result ; } lines
Code	if ( dataset != null ) { return result ; } lines
Distance : 2

165
Tree	if ( dataset != null ) { return result ; } verify
Code	if ( dataset != null ) { return result ; } verify
Distance : 2

166
Tree	if ( dataset != null ) { return result ; } Integer
Code	if ( dataset != null ) { return result ; } Integer
Distance : 2

167
Tree	if ( dataset != null ) { return result ; } +
Code	if ( dataset != null ) { return result ; } +
Distance : 2

168
Tree	if ( dataset != null ) { return result ; } c
Code	if ( dataset != null ) { return result ; } c
Distance : 2

169
Tree	if ( dataset != null ) { return result ; } isEmpty
Code	if ( dataset != null ) { return result ; } isEmpty
Distance : 2

170
Tree	if ( dataset != null ) { return result ; } externs
Code	if ( dataset != null ) { return result ; } externs
Distance : 2

171
Tree	if ( dataset != null ) { return result ; } long
Code	if ( dataset != null ) { return result ; } long
Distance : 2

172
Tree	if ( dataset != null ) { return result ; } ]
Code	if ( dataset != null ) { return result ; } ]
Distance : 2

173
Tree	if ( dataset != null ) { return result ; } [
Code	if ( dataset != null ) { return result ; } [
Distance : 2

174
Tree	if ( dataset != null ) { return result ; } v
Code	if ( dataset != null ) { return result ; } v
Distance : 2

175
Tree	if ( dataset != null ) { return result ; } Preconditions
Code	if ( dataset != null ) { return result ; } Preconditions
Distance : 2

176
Tree	if ( dataset != null ) { return result ; } Math
Code	if ( dataset != null ) { return result ; } Math
Distance : 2

177
Tree	if ( dataset != null ) { return result ; } root
Code	if ( dataset != null ) { return result ; } root
Distance : 2

178
Tree	if ( dataset != null ) { return result ; } NodeUtil
Code	if ( dataset != null ) { return result ; } NodeUtil
Distance : 2

179
Tree	if ( dataset != null ) { return result ; } wanted
Code	if ( dataset != null ) { return result ; } wanted
Distance : 2

180
Tree	if ( dataset != null ) { return result ; } NodeTraversal
Code	if ( dataset != null ) { return result ; } NodeTraversal
Distance : 2

181
Tree	if ( dataset != null ) { return result ; } add
Code	if ( dataset != null ) { return result ; } add
Distance : 2

182
Tree	if ( dataset != null ) { return result ; } ex
Code	if ( dataset != null ) { return result ; } ex
Distance : 2

183
Tree	if ( dataset != null ) { return result ; } :
Code	if ( dataset != null ) { return result ; } :
Distance : 2

184
Tree	if ( dataset != null ) { return result ; } index
Code	if ( dataset != null ) { return result ; } index
Distance : 2

185
Tree	if ( dataset != null ) { return result ; } data
Code	if ( dataset != null ) { return result ; } data
Distance : 2

186
Tree	if ( dataset != null ) { return result ; } node
Code	if ( dataset != null ) { return result ; } node
Distance : 2

187
Tree	if ( dataset != null ) { return result ; } return;
Code	if ( dataset != null ) { return result ; } return;
Distance : 2

188
Tree	if ( dataset != null ) { return result ; } getParent
Code	if ( dataset != null ) { return result ; } getParent
Distance : 2

189
Tree	if ( dataset != null ) { return result ; } invocations
Code	if ( dataset != null ) { return result ; } invocations
Distance : 2

190
Tree	if ( dataset != null ) { return result ; } out
Code	if ( dataset != null ) { return result ; } out
Distance : 2

191
Tree	if ( dataset != null ) { return result ; } protected
Code	if ( dataset != null ) { return result ; } protected
Distance : 2

192
Tree	if ( dataset != null ) { return result ; } values
Code	if ( dataset != null ) { return result ; } values
Distance : 2

193
Tree	if ( dataset != null ) { return result ; } StringBuilder
Code	if ( dataset != null ) { return result ; } StringBuilder
Distance : 2

194
Tree	if ( dataset != null ) { return result ; } size
Code	if ( dataset != null ) { return result ; } size
Distance : 2

195
Tree	if ( dataset != null ) { return result ; } mockingProgress
Code	if ( dataset != null ) { return result ; } mockingProgress
Distance : 2

196
Tree	if ( dataset != null ) { return result ; } fail
Code	if ( dataset != null ) { return result ; } fail
Distance : 2

197
Tree	if ( dataset != null ) { return result ; } get
Code	if ( dataset != null ) { return result ; } get
Distance : 2

198
Tree	if ( dataset != null ) { return result ; } setUp
Code	if ( dataset != null ) { return result ; } setUp
Distance : 2

199
Tree	if ( dataset != null ) { return result ; } abs
Code	if ( dataset != null ) { return result ; } abs
Distance : 2

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT protected
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT protected
Distance : 4

1
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT class
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT class
Distance : 4

2
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT array
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT array
Distance : 4

3
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT MathRuntimeException
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT MathRuntimeException
Distance : 5

4
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT {}
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT {}
Distance : 4

5
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Override
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Override
Distance : 4

6
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT f
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT f
Distance : 4

7
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT [
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT [
Distance : 4

8
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT -
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT -
Distance : 4

9
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT &&
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT &&
Distance : 4

10
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Preconditions
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Preconditions
Distance : 4

11
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT true
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT true
Distance : 4

12
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ]
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ]
Distance : 4

13
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT mode
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT mode
Distance : 4

14
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ParamChecks
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ParamChecks
Distance : 5

15
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT false
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT false
Distance : 4

16
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT test
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT test
Distance : 4

17
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT assertEquals
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT assertEquals
Distance : 4

18
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT @
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT @
Distance : 4

19
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT []
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT []
Distance : 4

20
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ==
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ==
Distance : 5

21
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT !
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT !
Distance : 5

22
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT notifyListeners
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT notifyListeners
Distance : 4

23
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT String
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT String
Distance : 5

24
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT nullNotPermitted
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT nullNotPermitted
Distance : 5

25
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT }
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT }
Distance : 5

26
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT int
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT int
Distance : 4

27
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT super
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT super
Distance : 4

28
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT !=
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT !=
Distance : 4

29
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT value
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT value
Distance : 4

30
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Object
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Object
Distance : 4

31
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT null
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT null
Distance : 4

32
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT NUMBER_CONSTANT
Distance : 5

33
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT =
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT =
Distance : 5

34
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT new
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT new
Distance : 5

35
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ()
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ()
Distance : 4

36
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ,
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ,
Distance : 4

37
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT {
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT {
Distance : 5

38
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT STRING_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT STRING_CONSTANT
Distance : 5

39
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT )
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT )
Distance : 4

40
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <s>
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <s>
Distance : 4

41
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT >
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT >
Distance : 5

42
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <blank>
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <blank>
Distance : 4

43
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ;
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ;
Distance : 5

44
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT (
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT (
Distance : 4

45
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT .
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT .
Distance : 4

46
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT checkState
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT checkState
Distance : 4

47
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT i
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT i
Distance : 4

48
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT double
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT double
Distance : 4

49
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT public
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT public
Distance : 4

50
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT instant
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT instant
Distance : 4

51
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT this
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT this
Distance : 5

52
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT return
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT return
Distance : 4

53
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT final
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT final
Distance : 4

54
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <
Distance : 4

55
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT field
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT field
Distance : 4

56
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT PlotChangeEvent
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT PlotChangeEvent
Distance : 4

57
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT LanguageMode.ECMASCRIPT6
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT LanguageMode.ECMASCRIPT6
Distance : 5

58
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Collection
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Collection
Distance : 5

59
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT solver
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT solver
Distance : 4

60
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT valueOf
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT valueOf
Distance : 4

61
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT dataset
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT dataset
Distance : 4

62
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT mock
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT mock
Distance : 5

63
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT size
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT size
Distance : 4

64
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT mockingProgress
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT mockingProgress
Distance : 5

65
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT char
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT char
Distance : 5

66
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT return;
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT return;
Distance : 5

67
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT JSType
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT JSType
Distance : 4

68
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT static
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT static
Distance : 4

69
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT get
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT get
Distance : 4

70
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT isEmpty
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT isEmpty
Distance : 4

71
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT else
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT else
Distance : 4

72
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT >
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT >
Distance : 4

73
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT if
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT if
Distance : 4

74
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getMessage
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getMessage
Distance : 4

75
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT stream
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT stream
Distance : 4

76
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT abs
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT abs
Distance : 5

77
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getChronology
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getChronology
Distance : 4

78
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT StrBuilder
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT StrBuilder
Distance : 4

79
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT js
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT js
Distance : 4

80
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT d
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT d
Distance : 5

81
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT TestUtilities
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT TestUtilities
Distance : 4

82
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT for
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT for
Distance : 4

83
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT externs
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT externs
Distance : 5

84
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Invocation
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Invocation
Distance : 4

85
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT equals
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT equals
Distance : 4

86
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT node
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT node
Distance : 4

87
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT getParent
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT getParent
Distance : 5

88
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT reportMatcher
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT reportMatcher
Distance : 4

89
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT setUp
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT setUp
Distance : 4

90
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT out
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT out
Distance : 4

91
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT index
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT index
Distance : 4

92
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT invocations
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT invocations
Distance : 4

93
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT setAcceptedLanguage
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT setAcceptedLanguage
Distance : 4

94
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT clone
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT clone
Distance : 4

95
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Double
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Double
Distance : 4

96
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT matcher
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT matcher
Distance : 4

97
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT values
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT values
Distance : 4

98
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT s
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT s
Distance : 4

99
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
Distance : 3

100
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT obj
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT obj
Distance : 4

101
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <=
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <=
Distance : 4

102
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT isNormalBlock
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT isNormalBlock
Distance : 4

103
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT MutableTimePeriod
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT MutableTimePeriod
Distance : 4

104
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT a
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT a
Distance : 4

105
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT StringBuilder
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT StringBuilder
Distance : 4

106
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT LanguageMode.ECMASCRIPT_2015
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT LanguageMode.ECMASCRIPT_2015
Distance : 4

107
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT stroke
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT stroke
Distance : 4

108
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT b
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT b
Distance : 4

109
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT traverseEs6
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT traverseEs6
Distance : 4

110
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT chrono
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT chrono
Distance : 4

111
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT append
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT append
Distance : 5

112
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT UnivariateFunction
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT UnivariateFunction
Distance : 5

113
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT scope
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT scope
Distance : 4

114
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT sb
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT sb
Distance : 5

115
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT returnZero
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT returnZero
Distance : 4

116
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT sqrt
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT sqrt
Distance : 4

117
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getFirstChild
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getFirstChild
Distance : 4

118
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT throws
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT throws
Distance : 4

119
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT y
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT y
Distance : 4

120
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT simpleMethod
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT simpleMethod
Distance : 4

121
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT isBlock
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT isBlock
Distance : 5

122
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT getArgumentMatcherStorage
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT getArgumentMatcherStorage
Distance : 5

123
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT alpha
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT alpha
Distance : 5

124
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT optimizer
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT optimizer
Distance : 4

125
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT instance
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT instance
Distance : 4

126
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getField
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT getField
Distance : 4

127
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT length
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT length
Distance : 4

128
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT name
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT name
Distance : 4

129
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT IllegalArgumentException
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT IllegalArgumentException
Distance : 4

130
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT t
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT t
Distance : 5

131
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT FastMath
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT FastMath
Distance : 5

132
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT invocation
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT invocation
Distance : 4

133
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT expected
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT expected
Distance : 5

134
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT reportCodeChange
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT reportCodeChange
Distance : 4

135
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT x
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT x
Distance : 4

136
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT createIllegalArgumentException
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT createIllegalArgumentException
Distance : 5

137
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ArrayList
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT ArrayList
Distance : 4

138
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT parent
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT parent
Distance : 4

139
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT LINE_JOINER
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT LINE_JOINER
Distance : 5

140
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT testSame
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT testSame
Distance : 4

141
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT str
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT str
Distance : 5

142
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT assertThat
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT assertThat
Distance : 5

143
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT m
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT m
Distance : 4

144
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT try
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT try
Distance : 4

145
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT :
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT :
Distance : 4

146
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT result
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT result
Distance : 4

147
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT List
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT List
Distance : 4

148
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT contains
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT contains
Distance : 4

149
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <>
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT <>
Distance : 4

150
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT fail
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT fail
Distance : 4

151
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT join
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT join
Distance : 4

152
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT paint
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT paint
Distance : 5

153
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT boolean
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT boolean
Distance : 4

154
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT getInstance
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT getInstance
Distance : 5

155
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT type
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT type
Distance : 4

156
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT serialised
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT serialised
Distance : 4

157
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT fireChangeEvent
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT fireChangeEvent
Distance : 5

158
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ?
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ?
Distance : 5

159
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Test
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Test
Distance : 4

160
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT toString
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT toString
Distance : 4

161
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Class
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Class
Distance : 4

162
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT options
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT options
Distance : 5

163
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Math
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Math
Distance : 5

164
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT p
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT p
Distance : 4

165
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT source
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT source
Distance : 4

166
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT NodeTraversal
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT NodeTraversal
Distance : 4

167
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT data
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT data
Distance : 4

168
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT checkArgument
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT checkArgument
Distance : 5

169
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT add
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT add
Distance : 4

170
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT NodeUtil
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT NodeUtil
Distance : 4

171
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT wanted
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT wanted
Distance : 4

172
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT *
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT *
Distance : 4

173
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ex
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT ex
Distance : 5

174
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT root
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT root
Distance : 4

175
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Args
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Args
Distance : 5

176
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Integer
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Integer
Distance : 5

177
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Node
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Node
Distance : 5

178
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT v
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT v
Distance : 5

179
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT lines
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT lines
Distance : 4

180
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT c
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT c
Distance : 5

181
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT verify
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT verify
Distance : 4

182
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Exception
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT Exception
Distance : 4

183
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT catch
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT catch
Distance : 4

184
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT n
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT n
Distance : 4

185
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT +
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT +
Distance : 4

186
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT pattern
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT pattern
Distance : 4

187
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT e
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT e
Distance : 4

188
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT compiler
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT compiler
Distance : 4

189
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT void
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT void
Distance : 4

190
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT T
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT T
Distance : 4

191
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT /
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT /
Distance : 4

192
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Fraction
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Fraction
Distance : 5

193
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT TestUtils
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT TestUtils
Distance : 4

194
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT checkNotNull
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT checkNotNull
Distance : 4

195
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT assertTrue
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT assertTrue
Distance : 4

196
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Assert
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT Assert
Distance : 5

197
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT long
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT long
Distance : 4

198
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT throw
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.localSets > NUMBER_CONSTANT throw
Distance : 5

199
Tree	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT PeriodType
Code	name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT PeriodType
Distance : 4

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Context rhsContext = Context.OTHER ; invocations
Code	Context rhsContext = Context.OTHER ; invocations
Distance : 5

1
Tree	Context rhsContext = Context.OTHER ; Class
Code	Context rhsContext = Context.OTHER ; Class
Distance : 5

2
Tree	Context rhsContext = Context.OTHER ; {}
Code	Context rhsContext = Context.OTHER ; {}
Distance : 5

3
Tree	Context rhsContext = Context.OTHER ; mock
Code	Context rhsContext = Context.OTHER ; mock
Distance : 5

4
Tree	Context rhsContext = Context.OTHER ; f
Code	Context rhsContext = Context.OTHER ; f
Distance : 5

5
Tree	Context rhsContext = Context.OTHER ; ParamChecks
Code	Context rhsContext = Context.OTHER ; ParamChecks
Distance : 5

6
Tree	Context rhsContext = Context.OTHER ; -
Code	Context rhsContext = Context.OTHER ; -
Distance : 5

7
Tree	Context rhsContext = Context.OTHER ; Preconditions
Code	Context rhsContext = Context.OTHER ; Preconditions
Distance : 5

8
Tree	Context rhsContext = Context.OTHER ; T
Code	Context rhsContext = Context.OTHER ; T
Distance : 5

9
Tree	Context rhsContext = Context.OTHER ; &&
Code	Context rhsContext = Context.OTHER ; &&
Distance : 5

10
Tree	Context rhsContext = Context.OTHER ; ]
Code	Context rhsContext = Context.OTHER ; ]
Distance : 5

11
Tree	Context rhsContext = Context.OTHER ; [
Code	Context rhsContext = Context.OTHER ; [
Distance : 5

12
Tree	Context rhsContext = Context.OTHER ; Object
Code	Context rhsContext = Context.OTHER ; Object
Distance : 5

13
Tree	Context rhsContext = Context.OTHER ; class
Code	Context rhsContext = Context.OTHER ; class
Distance : 5

14
Tree	Context rhsContext = Context.OTHER ; test
Code	Context rhsContext = Context.OTHER ; test
Distance : 5

15
Tree	Context rhsContext = Context.OTHER ; @
Code	Context rhsContext = Context.OTHER ; @
Distance : 5

16
Tree	Context rhsContext = Context.OTHER ; !
Code	Context rhsContext = Context.OTHER ; !
Distance : 5

17
Tree	Context rhsContext = Context.OTHER ; assertEquals
Code	Context rhsContext = Context.OTHER ; assertEquals
Distance : 5

18
Tree	Context rhsContext = Context.OTHER ; ==
Code	Context rhsContext = Context.OTHER ; ==
Distance : 5

19
Tree	Context rhsContext = Context.OTHER ; void
Code	Context rhsContext = Context.OTHER ; void
Distance : 5

20
Tree	Context rhsContext = Context.OTHER ; []
Code	Context rhsContext = Context.OTHER ; []
Distance : 5

21
Tree	Context rhsContext = Context.OTHER ; checkState
Code	Context rhsContext = Context.OTHER ; checkState
Distance : 5

22
Tree	Context rhsContext = Context.OTHER ; Test
Code	Context rhsContext = Context.OTHER ; Test
Distance : 5

23
Tree	Context rhsContext = Context.OTHER ; out
Code	Context rhsContext = Context.OTHER ; out
Distance : 5

24
Tree	Context rhsContext = Context.OTHER ; nullNotPermitted
Code	Context rhsContext = Context.OTHER ; nullNotPermitted
Distance : 5

25
Tree	Context rhsContext = Context.OTHER ; n
Code	Context rhsContext = Context.OTHER ; n
Distance : 5

26
Tree	Context rhsContext = Context.OTHER ; !=
Code	Context rhsContext = Context.OTHER ; !=
Distance : 5

27
Tree	Context rhsContext = Context.OTHER ; i
Code	Context rhsContext = Context.OTHER ; i
Distance : 5

28
Tree	Context rhsContext = Context.OTHER ; MathRuntimeException
Code	Context rhsContext = Context.OTHER ; MathRuntimeException
Distance : 5

29
Tree	Context rhsContext = Context.OTHER ; Override
Code	Context rhsContext = Context.OTHER ; Override
Distance : 5

30
Tree	Context rhsContext = Context.OTHER ; public
Code	Context rhsContext = Context.OTHER ; public
Distance : 5

31
Tree	Context rhsContext = Context.OTHER ; >
Code	Context rhsContext = Context.OTHER ; >
Distance : 5

32
Tree	Context rhsContext = Context.OTHER ; new
Code	Context rhsContext = Context.OTHER ; new
Distance : 5

33
Tree	Context rhsContext = Context.OTHER ; STRING_CONSTANT
Code	Context rhsContext = Context.OTHER ; STRING_CONSTANT
Distance : 5

34
Tree	Context rhsContext = Context.OTHER ; ,
Code	Context rhsContext = Context.OTHER ; ,
Distance : 5

35
Tree	Context rhsContext = Context.OTHER ; .
Code	Context rhsContext = Context.OTHER ; .
Distance : 5

36
Tree	Context rhsContext = Context.OTHER ; }
Code	Context rhsContext = Context.OTHER ; }
Distance : 5

37
Tree	Context rhsContext = Context.OTHER ; =
Code	Context rhsContext = Context.OTHER ; =
Distance : 5

38
Tree	Context rhsContext = Context.OTHER ; (
Code	Context rhsContext = Context.OTHER ; (
Distance : 5

39
Tree	Context rhsContext = Context.OTHER ; <s>
Code	Context rhsContext = Context.OTHER ; <s>
Distance : 5

40
Tree	Context rhsContext = Context.OTHER ; <blank>
Code	Context rhsContext = Context.OTHER ; <blank>
Distance : 5

41
Tree	Context rhsContext = Context.OTHER ; =
Code	Context rhsContext = Context.OTHER ; =
Distance : 5

42
Tree	Context rhsContext = Context.OTHER ; )
Code	Context rhsContext = Context.OTHER ; )
Distance : 4

43
Tree	Context rhsContext = Context.OTHER ; ;
Code	Context rhsContext = Context.OTHER ; ;
Distance : 4

44
Tree	Context rhsContext = Context.OTHER ; ()
Code	Context rhsContext = Context.OTHER ; ()
Distance : 5

45
Tree	Context rhsContext = Context.OTHER ; {
Code	Context rhsContext = Context.OTHER ; {
Distance : 5

46
Tree	Context rhsContext = Context.OTHER ; false
Code	Context rhsContext = Context.OTHER ; false
Distance : 5

47
Tree	Context rhsContext = Context.OTHER ; int
Code	Context rhsContext = Context.OTHER ; int
Distance : 5

48
Tree	Context rhsContext = Context.OTHER ; double
Code	Context rhsContext = Context.OTHER ; double
Distance : 5

49
Tree	Context rhsContext = Context.OTHER ; e
Code	Context rhsContext = Context.OTHER ; e
Distance : 5

50
Tree	Context rhsContext = Context.OTHER ; else
Code	Context rhsContext = Context.OTHER ; else
Distance : 5

51
Tree	Context rhsContext = Context.OTHER ; NUMBER_CONSTANT
Code	Context rhsContext = Context.OTHER ; NUMBER_CONSTANT
Distance : 5

52
Tree	Context rhsContext = Context.OTHER ; this
Code	Context rhsContext = Context.OTHER ; this
Distance : 5

53
Tree	Context rhsContext = Context.OTHER ; final
Code	Context rhsContext = Context.OTHER ; final
Distance : 5

54
Tree	Context rhsContext = Context.OTHER ; name
Code	Context rhsContext = Context.OTHER ; name
Distance : 5

55
Tree	Context rhsContext = Context.OTHER ; t
Code	Context rhsContext = Context.OTHER ; t
Distance : 5

56
Tree	Context rhsContext = Context.OTHER ; Collection
Code	Context rhsContext = Context.OTHER ; Collection
Distance : 5

57
Tree	Context rhsContext = Context.OTHER ; getField
Code	Context rhsContext = Context.OTHER ; getField
Distance : 5

58
Tree	Context rhsContext = Context.OTHER ; dataset
Code	Context rhsContext = Context.OTHER ; dataset
Distance : 5

59
Tree	Context rhsContext = Context.OTHER ; protected
Code	Context rhsContext = Context.OTHER ; protected
Distance : 5

60
Tree	Context rhsContext = Context.OTHER ; PlotChangeEvent
Code	Context rhsContext = Context.OTHER ; PlotChangeEvent
Distance : 5

61
Tree	Context rhsContext = Context.OTHER ; mode
Code	Context rhsContext = Context.OTHER ; mode
Distance : 5

62
Tree	Context rhsContext = Context.OTHER ; mockingProgress
Code	Context rhsContext = Context.OTHER ; mockingProgress
Distance : 5

63
Tree	Context rhsContext = Context.OTHER ; return;
Code	Context rhsContext = Context.OTHER ; return;
Distance : 5

64
Tree	Context rhsContext = Context.OTHER ; isEmpty
Code	Context rhsContext = Context.OTHER ; isEmpty
Distance : 5

65
Tree	Context rhsContext = Context.OTHER ; char
Code	Context rhsContext = Context.OTHER ; char
Distance : 5

66
Tree	Context rhsContext = Context.OTHER ; static
Code	Context rhsContext = Context.OTHER ; static
Distance : 5

67
Tree	Context rhsContext = Context.OTHER ; setAcceptedLanguage
Code	Context rhsContext = Context.OTHER ; setAcceptedLanguage
Distance : 5

68
Tree	Context rhsContext = Context.OTHER ; JSType
Code	Context rhsContext = Context.OTHER ; JSType
Distance : 5

69
Tree	Context rhsContext = Context.OTHER ; get
Code	Context rhsContext = Context.OTHER ; get
Distance : 5

70
Tree	Context rhsContext = Context.OTHER ; getMessage
Code	Context rhsContext = Context.OTHER ; getMessage
Distance : 5

71
Tree	Context rhsContext = Context.OTHER ; true
Code	Context rhsContext = Context.OTHER ; true
Distance : 5

72
Tree	Context rhsContext = Context.OTHER ; return
Code	Context rhsContext = Context.OTHER ; return
Distance : 5

73
Tree	Context rhsContext = Context.OTHER ; if
Code	Context rhsContext = Context.OTHER ; if
Distance : 5

74
Tree	Context rhsContext = Context.OTHER ; stream
Code	Context rhsContext = Context.OTHER ; stream
Distance : 5

75
Tree	Context rhsContext = Context.OTHER ; <
Code	Context rhsContext = Context.OTHER ; <
Distance : 5

76
Tree	Context rhsContext = Context.OTHER ; solver
Code	Context rhsContext = Context.OTHER ; solver
Distance : 5

77
Tree	Context rhsContext = Context.OTHER ; pattern
Code	Context rhsContext = Context.OTHER ; pattern
Distance : 5

78
Tree	Context rhsContext = Context.OTHER ; js
Code	Context rhsContext = Context.OTHER ; js
Distance : 5

79
Tree	Context rhsContext = Context.OTHER ; TestUtilities
Code	Context rhsContext = Context.OTHER ; TestUtilities
Distance : 5

80
Tree	Context rhsContext = Context.OTHER ; equals
Code	Context rhsContext = Context.OTHER ; equals
Distance : 5

81
Tree	Context rhsContext = Context.OTHER ; d
Code	Context rhsContext = Context.OTHER ; d
Distance : 5

82
Tree	Context rhsContext = Context.OTHER ; externs
Code	Context rhsContext = Context.OTHER ; externs
Distance : 5

83
Tree	Context rhsContext = Context.OTHER ; assertTrue
Code	Context rhsContext = Context.OTHER ; assertTrue
Distance : 5

84
Tree	Context rhsContext = Context.OTHER ; for
Code	Context rhsContext = Context.OTHER ; for
Distance : 5

85
Tree	Context rhsContext = Context.OTHER ; Invocation
Code	Context rhsContext = Context.OTHER ; Invocation
Distance : 5

86
Tree	Context rhsContext = Context.OTHER ; getParent
Code	Context rhsContext = Context.OTHER ; getParent
Distance : 5

87
Tree	Context rhsContext = Context.OTHER ; setUp
Code	Context rhsContext = Context.OTHER ; setUp
Distance : 5

88
Tree	Context rhsContext = Context.OTHER ; StrBuilder
Code	Context rhsContext = Context.OTHER ; StrBuilder
Distance : 5

89
Tree	Context rhsContext = Context.OTHER ; reportMatcher
Code	Context rhsContext = Context.OTHER ; reportMatcher
Distance : 5

90
Tree	Context rhsContext = Context.OTHER ; index
Code	Context rhsContext = Context.OTHER ; index
Distance : 5

91
Tree	Context rhsContext = Context.OTHER ; node
Code	Context rhsContext = Context.OTHER ; node
Distance : 5

92
Tree	Context rhsContext = Context.OTHER ; matcher
Code	Context rhsContext = Context.OTHER ; matcher
Distance : 5

93
Tree	Context rhsContext = Context.OTHER ; abs
Code	Context rhsContext = Context.OTHER ; abs
Distance : 5

94
Tree	Context rhsContext = Context.OTHER ; Double
Code	Context rhsContext = Context.OTHER ; Double
Distance : 5

95
Tree	Context rhsContext = Context.OTHER ; PeriodType
Code	Context rhsContext = Context.OTHER ; PeriodType
Distance : 5

96
Tree	Context rhsContext = Context.OTHER ; instant
Code	Context rhsContext = Context.OTHER ; instant
Distance : 5

97
Tree	Context rhsContext = Context.OTHER ; values
Code	Context rhsContext = Context.OTHER ; values
Distance : 5

98
Tree	Context rhsContext = Context.OTHER ; isNormalBlock
Code	Context rhsContext = Context.OTHER ; isNormalBlock
Distance : 5

99
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

100
Tree	Context rhsContext = Context.OTHER ; contains
Code	Context rhsContext = Context.OTHER ; contains
Distance : 5

101
Tree	Context rhsContext = Context.OTHER ; <=
Code	Context rhsContext = Context.OTHER ; <=
Distance : 5

102
Tree	Context rhsContext = Context.OTHER ; a
Code	Context rhsContext = Context.OTHER ; a
Distance : 5

103
Tree	Context rhsContext = Context.OTHER ; LanguageMode.ECMASCRIPT_2015
Code	Context rhsContext = Context.OTHER ; LanguageMode.ECMASCRIPT_2015
Distance : 5

104
Tree	Context rhsContext = Context.OTHER ; size
Code	Context rhsContext = Context.OTHER ; size
Distance : 5

105
Tree	Context rhsContext = Context.OTHER ; StringBuilder
Code	Context rhsContext = Context.OTHER ; StringBuilder
Distance : 5

106
Tree	Context rhsContext = Context.OTHER ; b
Code	Context rhsContext = Context.OTHER ; b
Distance : 5

107
Tree	Context rhsContext = Context.OTHER ; MutableTimePeriod
Code	Context rhsContext = Context.OTHER ; MutableTimePeriod
Distance : 5

108
Tree	Context rhsContext = Context.OTHER ; stroke
Code	Context rhsContext = Context.OTHER ; stroke
Distance : 5

109
Tree	Context rhsContext = Context.OTHER ; traverseEs6
Code	Context rhsContext = Context.OTHER ; traverseEs6
Distance : 5

110
Tree	Context rhsContext = Context.OTHER ; UnivariateFunction
Code	Context rhsContext = Context.OTHER ; UnivariateFunction
Distance : 5

111
Tree	Context rhsContext = Context.OTHER ; sb
Code	Context rhsContext = Context.OTHER ; sb
Distance : 5

112
Tree	Context rhsContext = Context.OTHER ; throws
Code	Context rhsContext = Context.OTHER ; throws
Distance : 5

113
Tree	Context rhsContext = Context.OTHER ; scope
Code	Context rhsContext = Context.OTHER ; scope
Distance : 5

114
Tree	Context rhsContext = Context.OTHER ; sqrt
Code	Context rhsContext = Context.OTHER ; sqrt
Distance : 5

115
Tree	Context rhsContext = Context.OTHER ; clone
Code	Context rhsContext = Context.OTHER ; clone
Distance : 5

116
Tree	Context rhsContext = Context.OTHER ; returnZero
Code	Context rhsContext = Context.OTHER ; returnZero
Distance : 5

117
Tree	Context rhsContext = Context.OTHER ; getFirstChild
Code	Context rhsContext = Context.OTHER ; getFirstChild
Distance : 5

118
Tree	Context rhsContext = Context.OTHER ; simpleMethod
Code	Context rhsContext = Context.OTHER ; simpleMethod
Distance : 5

119
Tree	Context rhsContext = Context.OTHER ; getArgumentMatcherStorage
Code	Context rhsContext = Context.OTHER ; getArgumentMatcherStorage
Distance : 5

120
Tree	Context rhsContext = Context.OTHER ; append
Code	Context rhsContext = Context.OTHER ; append
Distance : 5

121
Tree	Context rhsContext = Context.OTHER ; optimizer
Code	Context rhsContext = Context.OTHER ; optimizer
Distance : 5

122
Tree	Context rhsContext = Context.OTHER ; obj
Code	Context rhsContext = Context.OTHER ; obj
Distance : 5

123
Tree	Context rhsContext = Context.OTHER ; chrono
Code	Context rhsContext = Context.OTHER ; chrono
Distance : 5

124
Tree	Context rhsContext = Context.OTHER ; isBlock
Code	Context rhsContext = Context.OTHER ; isBlock
Distance : 5

125
Tree	Context rhsContext = Context.OTHER ; <>
Code	Context rhsContext = Context.OTHER ; <>
Distance : 5

126
Tree	Context rhsContext = Context.OTHER ; Integer
Code	Context rhsContext = Context.OTHER ; Integer
Distance : 5

127
Tree	Context rhsContext = Context.OTHER ; v
Code	Context rhsContext = Context.OTHER ; v
Distance : 5

128
Tree	Context rhsContext = Context.OTHER ; reportCodeChange
Code	Context rhsContext = Context.OTHER ; reportCodeChange
Distance : 5

129
Tree	Context rhsContext = Context.OTHER ; IllegalArgumentException
Code	Context rhsContext = Context.OTHER ; IllegalArgumentException
Distance : 5

130
Tree	Context rhsContext = Context.OTHER ; invocation
Code	Context rhsContext = Context.OTHER ; invocation
Distance : 5

131
Tree	Context rhsContext = Context.OTHER ; assertThat
Code	Context rhsContext = Context.OTHER ; assertThat
Distance : 5

132
Tree	Context rhsContext = Context.OTHER ; FastMath
Code	Context rhsContext = Context.OTHER ; FastMath
Distance : 5

133
Tree	Context rhsContext = Context.OTHER ; expected
Code	Context rhsContext = Context.OTHER ; expected
Distance : 5

134
Tree	Context rhsContext = Context.OTHER ; createIllegalArgumentException
Code	Context rhsContext = Context.OTHER ; createIllegalArgumentException
Distance : 5

135
Tree	Context rhsContext = Context.OTHER ; parent
Code	Context rhsContext = Context.OTHER ; parent
Distance : 5

136
Tree	Context rhsContext = Context.OTHER ; fireChangeEvent
Code	Context rhsContext = Context.OTHER ; fireChangeEvent
Distance : 5

137
Tree	Context rhsContext = Context.OTHER ; ArrayList
Code	Context rhsContext = Context.OTHER ; ArrayList
Distance : 5

138
Tree	Context rhsContext = Context.OTHER ; testSame
Code	Context rhsContext = Context.OTHER ; testSame
Distance : 5

139
Tree	Context rhsContext = Context.OTHER ; x
Code	Context rhsContext = Context.OTHER ; x
Distance : 5

140
Tree	Context rhsContext = Context.OTHER ; LINE_JOINER
Code	Context rhsContext = Context.OTHER ; LINE_JOINER
Distance : 5

141
Tree	Context rhsContext = Context.OTHER ; str
Code	Context rhsContext = Context.OTHER ; str
Distance : 5

142
Tree	Context rhsContext = Context.OTHER ; try
Code	Context rhsContext = Context.OTHER ; try
Distance : 5

143
Tree	Context rhsContext = Context.OTHER ; result
Code	Context rhsContext = Context.OTHER ; result
Distance : 5

144
Tree	Context rhsContext = Context.OTHER ; fail
Code	Context rhsContext = Context.OTHER ; fail
Distance : 5

145
Tree	Context rhsContext = Context.OTHER ; :
Code	Context rhsContext = Context.OTHER ; :
Distance : 5

146
Tree	Context rhsContext = Context.OTHER ; valueOf
Code	Context rhsContext = Context.OTHER ; valueOf
Distance : 5

147
Tree	Context rhsContext = Context.OTHER ; y
Code	Context rhsContext = Context.OTHER ; y
Distance : 5

148
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

149
Tree	Context rhsContext = Context.OTHER ; array
Code	Context rhsContext = Context.OTHER ; array
Distance : 5

150
Tree	Context rhsContext = Context.OTHER ; ?
Code	Context rhsContext = Context.OTHER ; ?
Distance : 5

151
Tree	Context rhsContext = Context.OTHER ; boolean
Code	Context rhsContext = Context.OTHER ; boolean
Distance : 5

152
Tree	Context rhsContext = Context.OTHER ; m
Code	Context rhsContext = Context.OTHER ; m
Distance : 5

153
Tree	Context rhsContext = Context.OTHER ; paint
Code	Context rhsContext = Context.OTHER ; paint
Distance : 5

154
Tree	Context rhsContext = Context.OTHER ; type
Code	Context rhsContext = Context.OTHER ; type
Distance : 5

155
Tree	Context rhsContext = Context.OTHER ; *
Code	Context rhsContext = Context.OTHER ; *
Distance : 5

156
Tree	Context rhsContext = Context.OTHER ; getInstance
Code	Context rhsContext = Context.OTHER ; getInstance
Distance : 5

157
Tree	Context rhsContext = Context.OTHER ; serialised
Code	Context rhsContext = Context.OTHER ; serialised
Distance : 5

158
Tree	Context rhsContext = Context.OTHER ; Fraction
Code	Context rhsContext = Context.OTHER ; Fraction
Distance : 5

159
Tree	Context rhsContext = Context.OTHER ; checkNotNull
Code	Context rhsContext = Context.OTHER ; checkNotNull
Distance : 5

160
Tree	Context rhsContext = Context.OTHER ; source
Code	Context rhsContext = Context.OTHER ; source
Distance : 5

161
Tree	Context rhsContext = Context.OTHER ; toString
Code	Context rhsContext = Context.OTHER ; toString
Distance : 5

162
Tree	Context rhsContext = Context.OTHER ; Math
Code	Context rhsContext = Context.OTHER ; Math
Distance : 5

163
Tree	Context rhsContext = Context.OTHER ; root
Code	Context rhsContext = Context.OTHER ; root
Distance : 5

164
Tree	Context rhsContext = Context.OTHER ; options
Code	Context rhsContext = Context.OTHER ; options
Distance : 5

165
Tree	Context rhsContext = Context.OTHER ; p
Code	Context rhsContext = Context.OTHER ; p
Distance : 5

166
Tree	Context rhsContext = Context.OTHER ; data
Code	Context rhsContext = Context.OTHER ; data
Distance : 5

167
Tree	Context rhsContext = Context.OTHER ; add
Code	Context rhsContext = Context.OTHER ; add
Distance : 5

168
Tree	Context rhsContext = Context.OTHER ; field
Code	Context rhsContext = Context.OTHER ; field
Distance : 5

169
Tree	Context rhsContext = Context.OTHER ; checkArgument
Code	Context rhsContext = Context.OTHER ; checkArgument
Distance : 5

170
Tree	Context rhsContext = Context.OTHER ; ex
Code	Context rhsContext = Context.OTHER ; ex
Distance : 5

171
Tree	Context rhsContext = Context.OTHER ; NodeUtil
Code	Context rhsContext = Context.OTHER ; NodeUtil
Distance : 5

172
Tree	Context rhsContext = Context.OTHER ; join
Code	Context rhsContext = Context.OTHER ; join
Distance : 5

173
Tree	Context rhsContext = Context.OTHER ; Args
Code	Context rhsContext = Context.OTHER ; Args
Distance : 5

174
Tree	Context rhsContext = Context.OTHER ; NodeTraversal
Code	Context rhsContext = Context.OTHER ; NodeTraversal
Distance : 5

175
Tree	Context rhsContext = Context.OTHER ; List
Code	Context rhsContext = Context.OTHER ; List
Distance : 5

176
Tree	Context rhsContext = Context.OTHER ; Exception
Code	Context rhsContext = Context.OTHER ; Exception
Distance : 5

177
Tree	Context rhsContext = Context.OTHER ; Node
Code	Context rhsContext = Context.OTHER ; Node
Distance : 5

178
Tree	Context rhsContext = Context.OTHER ; c
Code	Context rhsContext = Context.OTHER ; c
Distance : 5

179
Tree	Context rhsContext = Context.OTHER ; notifyListeners
Code	Context rhsContext = Context.OTHER ; notifyListeners
Distance : 5

180
Tree	Context rhsContext = Context.OTHER ; lines
Code	Context rhsContext = Context.OTHER ; lines
Distance : 5

181
Tree	Context rhsContext = Context.OTHER ; verify
Code	Context rhsContext = Context.OTHER ; verify
Distance : 5

182
Tree	Context rhsContext = Context.OTHER ; compiler
Code	Context rhsContext = Context.OTHER ; compiler
Distance : 5

183
Tree	Context rhsContext = Context.OTHER ; String
Code	Context rhsContext = Context.OTHER ; String
Distance : 5

184
Tree	Context rhsContext = Context.OTHER ; null
Code	Context rhsContext = Context.OTHER ; null
Distance : 5

185
Tree	Context rhsContext = Context.OTHER ; wanted
Code	Context rhsContext = Context.OTHER ; wanted
Distance : 5

186
Tree	Context rhsContext = Context.OTHER ; +
Code	Context rhsContext = Context.OTHER ; +
Distance : 5

187
Tree	Context rhsContext = Context.OTHER ; throw
Code	Context rhsContext = Context.OTHER ; throw
Distance : 5

188
Tree	Context rhsContext = Context.OTHER ; super
Code	Context rhsContext = Context.OTHER ; super
Distance : 5

189
Tree	Context rhsContext = Context.OTHER ; value
Code	Context rhsContext = Context.OTHER ; value
Distance : 5

190
Tree	Context rhsContext = Context.OTHER ; long
Code	Context rhsContext = Context.OTHER ; long
Distance : 5

191
Tree	Context rhsContext = Context.OTHER ; /
Code	Context rhsContext = Context.OTHER ; /
Distance : 5

192
Tree	Context rhsContext = Context.OTHER ; length
Code	Context rhsContext = Context.OTHER ; length
Distance : 5

193
Tree	Context rhsContext = Context.OTHER ; TestUtils
Code	Context rhsContext = Context.OTHER ; TestUtils
Distance : 5

194
Tree	Context rhsContext = Context.OTHER ; alpha
Code	Context rhsContext = Context.OTHER ; alpha
Distance : 5

195
Tree	Context rhsContext = Context.OTHER ; instance
Code	Context rhsContext = Context.OTHER ; instance
Distance : 5

196
Tree	Context rhsContext = Context.OTHER ; Assert
Code	Context rhsContext = Context.OTHER ; Assert
Distance : 5

197
Tree	Context rhsContext = Context.OTHER ; catch
Code	Context rhsContext = Context.OTHER ; catch
Distance : 5

198
Tree	Context rhsContext = Context.OTHER ; LanguageMode.ECMASCRIPT6
Code	Context rhsContext = Context.OTHER ; LanguageMode.ECMASCRIPT6
Distance : 5

199
Tree	Context rhsContext = Context.OTHER ; s
Code	Context rhsContext = Context.OTHER ; s
Distance : 5

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ARRAY_TYPE ; } invocations
Code	{ return ARRAY_TYPE ; } invocations
Distance : 11

1
Tree	{ return ARRAY_TYPE ; } Class
Code	{ return ARRAY_TYPE ; } Class
Distance : 11

2
Tree	{ return ARRAY_TYPE ; } {}
Code	{ return ARRAY_TYPE ; } {}
Distance : 11

3
Tree	{ return ARRAY_TYPE ; } mock
Code	{ return ARRAY_TYPE ; } mock
Distance : 11

4
Tree	{ return ARRAY_TYPE ; } f
Code	{ return ARRAY_TYPE ; } f
Distance : 11

5
Tree	{ return ARRAY_TYPE ; } ParamChecks
Code	{ return ARRAY_TYPE ; } ParamChecks
Distance : 11

6
Tree	{ return ARRAY_TYPE ; } -
Code	{ return ARRAY_TYPE ; } -
Distance : 11

7
Tree	{ return ARRAY_TYPE ; } Preconditions
Code	{ return ARRAY_TYPE ; } Preconditions
Distance : 11

8
Tree	{ return ARRAY_TYPE ; } T
Code	{ return ARRAY_TYPE ; } T
Distance : 11

9
Tree	{ return ARRAY_TYPE ; } &&
Code	{ return ARRAY_TYPE ; } &&
Distance : 11

10
Tree	{ return ARRAY_TYPE ; } ]
Code	{ return ARRAY_TYPE ; } ]
Distance : 11

11
Tree	{ return ARRAY_TYPE ; } [
Code	{ return ARRAY_TYPE ; } [
Distance : 11

12
Tree	{ return ARRAY_TYPE ; } Object
Code	{ return ARRAY_TYPE ; } Object
Distance : 11

13
Tree	{ return ARRAY_TYPE ; } class
Code	{ return ARRAY_TYPE ; } class
Distance : 11

14
Tree	{ return ARRAY_TYPE ; } test
Code	{ return ARRAY_TYPE ; } test
Distance : 11

15
Tree	{ return ARRAY_TYPE ; } @
Code	{ return ARRAY_TYPE ; } @
Distance : 11

16
Tree	{ return ARRAY_TYPE ; } !
Code	{ return ARRAY_TYPE ; } !
Distance : 11

17
Tree	{ return ARRAY_TYPE ; } assertEquals
Code	{ return ARRAY_TYPE ; } assertEquals
Distance : 11

18
Tree	{ return ARRAY_TYPE ; } ==
Code	{ return ARRAY_TYPE ; } ==
Distance : 11

19
Tree	{ return ARRAY_TYPE ; } void
Code	{ return ARRAY_TYPE ; } void
Distance : 11

20
Tree	{ return ARRAY_TYPE ; } []
Code	{ return ARRAY_TYPE ; } []
Distance : 11

21
Tree	{ return ARRAY_TYPE ; } checkState
Code	{ return ARRAY_TYPE ; } checkState
Distance : 11

22
Tree	{ return ARRAY_TYPE ; } Test
Code	{ return ARRAY_TYPE ; } Test
Distance : 11

23
Tree	{ return ARRAY_TYPE ; } out
Code	{ return ARRAY_TYPE ; } out
Distance : 11

24
Tree	{ return ARRAY_TYPE ; } nullNotPermitted
Code	{ return ARRAY_TYPE ; } nullNotPermitted
Distance : 11

25
Tree	{ return ARRAY_TYPE ; } n
Code	{ return ARRAY_TYPE ; } n
Distance : 11

26
Tree	{ return ARRAY_TYPE ; } !=
Code	{ return ARRAY_TYPE ; } !=
Distance : 11

27
Tree	{ return ARRAY_TYPE ; } i
Code	{ return ARRAY_TYPE ; } i
Distance : 11

28
Tree	{ return ARRAY_TYPE ; } MathRuntimeException
Code	{ return ARRAY_TYPE ; } MathRuntimeException
Distance : 11

29
Tree	{ return ARRAY_TYPE ; } Override
Code	{ return ARRAY_TYPE ; } Override
Distance : 11

30
Tree	{ return ARRAY_TYPE ; } public
Code	{ return ARRAY_TYPE ; } public
Distance : 11

31
Tree	{ return ARRAY_TYPE ; } >
Code	{ return ARRAY_TYPE ; } >
Distance : 11

32
Tree	{ return ARRAY_TYPE ; } new
Code	{ return ARRAY_TYPE ; } new
Distance : 11

33
Tree	{ return ARRAY_TYPE ; } STRING_CONSTANT
Code	{ return ARRAY_TYPE ; } STRING_CONSTANT
Distance : 11

34
Tree	{ return ARRAY_TYPE ; } ,
Code	{ return ARRAY_TYPE ; } ,
Distance : 11

35
Tree	{ return ARRAY_TYPE ; } .
Code	{ return ARRAY_TYPE ; } .
Distance : 11

36
Tree	{ return ARRAY_TYPE ; } }
Code	{ return ARRAY_TYPE ; } }
Distance : 11

37
Tree	{ return ARRAY_TYPE ; } =
Code	{ return ARRAY_TYPE ; } =
Distance : 11

38
Tree	{ return ARRAY_TYPE ; } (
Code	{ return ARRAY_TYPE ; } (
Distance : 11

39
Tree	{ return ARRAY_TYPE ; } <s>
Code	{ return ARRAY_TYPE ; } <s>
Distance : 11

40
Tree	{ return ARRAY_TYPE ; } <blank>
Code	{ return ARRAY_TYPE ; } <blank>
Distance : 11

41
Tree	{ return ARRAY_TYPE ; } {
Code	{ return ARRAY_TYPE ; } {
Distance : 11

42
Tree	{ return ARRAY_TYPE ; } )
Code	{ return ARRAY_TYPE ; } )
Distance : 11

43
Tree	{ return ARRAY_TYPE ; } ;
Code	{ return ARRAY_TYPE ; } ;
Distance : 11

44
Tree	{ return ARRAY_TYPE ; } ()
Code	{ return ARRAY_TYPE ; } ()
Distance : 11

45
Tree	{ return ARRAY_TYPE ; } {
Code	{ return ARRAY_TYPE ; } {
Distance : 11

46
Tree	{ return ARRAY_TYPE ; } false
Code	{ return ARRAY_TYPE ; } false
Distance : 11

47
Tree	{ return ARRAY_TYPE ; } int
Code	{ return ARRAY_TYPE ; } int
Distance : 11

48
Tree	{ return ARRAY_TYPE ; } double
Code	{ return ARRAY_TYPE ; } double
Distance : 11

49
Tree	{ return ARRAY_TYPE ; } e
Code	{ return ARRAY_TYPE ; } e
Distance : 11

50
Tree	{ return ARRAY_TYPE ; } else
Code	{ return ARRAY_TYPE ; } else
Distance : 11

51
Tree	{ return ARRAY_TYPE ; } NUMBER_CONSTANT
Code	{ return ARRAY_TYPE ; } NUMBER_CONSTANT
Distance : 11

52
Tree	{ return ARRAY_TYPE ; } this
Code	{ return ARRAY_TYPE ; } this
Distance : 11

53
Tree	{ return ARRAY_TYPE ; } final
Code	{ return ARRAY_TYPE ; } final
Distance : 11

54
Tree	{ return ARRAY_TYPE ; } name
Code	{ return ARRAY_TYPE ; } name
Distance : 11

55
Tree	{ return ARRAY_TYPE ; } t
Code	{ return ARRAY_TYPE ; } t
Distance : 11

56
Tree	{ return ARRAY_TYPE ; } Collection
Code	{ return ARRAY_TYPE ; } Collection
Distance : 11

57
Tree	{ return ARRAY_TYPE ; } getField
Code	{ return ARRAY_TYPE ; } getField
Distance : 11

58
Tree	{ return ARRAY_TYPE ; } dataset
Code	{ return ARRAY_TYPE ; } dataset
Distance : 11

59
Tree	{ return ARRAY_TYPE ; } protected
Code	{ return ARRAY_TYPE ; } protected
Distance : 11

60
Tree	{ return ARRAY_TYPE ; } PlotChangeEvent
Code	{ return ARRAY_TYPE ; } PlotChangeEvent
Distance : 11

61
Tree	{ return ARRAY_TYPE ; } mode
Code	{ return ARRAY_TYPE ; } mode
Distance : 11

62
Tree	{ return ARRAY_TYPE ; } mockingProgress
Code	{ return ARRAY_TYPE ; } mockingProgress
Distance : 11

63
Tree	{ return ARRAY_TYPE ; } return;
Code	{ return ARRAY_TYPE ; } return;
Distance : 11

64
Tree	{ return ARRAY_TYPE ; } isEmpty
Code	{ return ARRAY_TYPE ; } isEmpty
Distance : 11

65
Tree	{ return ARRAY_TYPE ; } char
Code	{ return ARRAY_TYPE ; } char
Distance : 11

66
Tree	{ return ARRAY_TYPE ; } static
Code	{ return ARRAY_TYPE ; } static
Distance : 11

67
Tree	{ return ARRAY_TYPE ; } setAcceptedLanguage
Code	{ return ARRAY_TYPE ; } setAcceptedLanguage
Distance : 11

68
Tree	{ return ARRAY_TYPE ; } JSType
Code	{ return ARRAY_TYPE ; } JSType
Distance : 11

69
Tree	{ return ARRAY_TYPE ; } get
Code	{ return ARRAY_TYPE ; } get
Distance : 11

70
Tree	{ return ARRAY_TYPE ; } getMessage
Code	{ return ARRAY_TYPE ; } getMessage
Distance : 11

71
Tree	{ return ARRAY_TYPE ; } true
Code	{ return ARRAY_TYPE ; } true
Distance : 11

72
Tree	{ return ARRAY_TYPE ; } return
Code	{ return ARRAY_TYPE ; } return
Distance : 11

73
Tree	{ return ARRAY_TYPE ; } if
Code	{ return ARRAY_TYPE ; } if
Distance : 11

74
Tree	{ return ARRAY_TYPE ; } stream
Code	{ return ARRAY_TYPE ; } stream
Distance : 11

75
Tree	{ return ARRAY_TYPE ; } <
Code	{ return ARRAY_TYPE ; } <
Distance : 11

76
Tree	{ return ARRAY_TYPE ; } solver
Code	{ return ARRAY_TYPE ; } solver
Distance : 11

77
Tree	{ return ARRAY_TYPE ; } pattern
Code	{ return ARRAY_TYPE ; } pattern
Distance : 11

78
Tree	{ return ARRAY_TYPE ; } js
Code	{ return ARRAY_TYPE ; } js
Distance : 11

79
Tree	{ return ARRAY_TYPE ; } TestUtilities
Code	{ return ARRAY_TYPE ; } TestUtilities
Distance : 11

80
Tree	{ return ARRAY_TYPE ; } equals
Code	{ return ARRAY_TYPE ; } equals
Distance : 11

81
Tree	{ return ARRAY_TYPE ; } d
Code	{ return ARRAY_TYPE ; } d
Distance : 11

82
Tree	{ return ARRAY_TYPE ; } externs
Code	{ return ARRAY_TYPE ; } externs
Distance : 11

83
Tree	{ return ARRAY_TYPE ; } assertTrue
Code	{ return ARRAY_TYPE ; } assertTrue
Distance : 11

84
Tree	{ return ARRAY_TYPE ; } for
Code	{ return ARRAY_TYPE ; } for
Distance : 11

85
Tree	{ return ARRAY_TYPE ; } Invocation
Code	{ return ARRAY_TYPE ; } Invocation
Distance : 11

86
Tree	{ return ARRAY_TYPE ; } getParent
Code	{ return ARRAY_TYPE ; } getParent
Distance : 11

87
Tree	{ return ARRAY_TYPE ; } setUp
Code	{ return ARRAY_TYPE ; } setUp
Distance : 11

88
Tree	{ return ARRAY_TYPE ; } StrBuilder
Code	{ return ARRAY_TYPE ; } StrBuilder
Distance : 11

89
Tree	{ return ARRAY_TYPE ; } reportMatcher
Code	{ return ARRAY_TYPE ; } reportMatcher
Distance : 11

90
Tree	{ return ARRAY_TYPE ; } index
Code	{ return ARRAY_TYPE ; } index
Distance : 11

91
Tree	{ return ARRAY_TYPE ; } node
Code	{ return ARRAY_TYPE ; } node
Distance : 11

92
Tree	{ return ARRAY_TYPE ; } matcher
Code	{ return ARRAY_TYPE ; } matcher
Distance : 11

93
Tree	{ return ARRAY_TYPE ; } abs
Code	{ return ARRAY_TYPE ; } abs
Distance : 11

94
Tree	{ return ARRAY_TYPE ; } Double
Code	{ return ARRAY_TYPE ; } Double
Distance : 11

95
Tree	{ return ARRAY_TYPE ; } PeriodType
Code	{ return ARRAY_TYPE ; } PeriodType
Distance : 11

96
Tree	{ return ARRAY_TYPE ; } instant
Code	{ return ARRAY_TYPE ; } instant
Distance : 11

97
Tree	{ return ARRAY_TYPE ; } values
Code	{ return ARRAY_TYPE ; } values
Distance : 11

98
Tree	{ return ARRAY_TYPE ; } isNormalBlock
Code	{ return ARRAY_TYPE ; } isNormalBlock
Distance : 11

99
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

100
Tree	{ return ARRAY_TYPE ; } contains
Code	{ return ARRAY_TYPE ; } contains
Distance : 11

101
Tree	{ return ARRAY_TYPE ; } <=
Code	{ return ARRAY_TYPE ; } <=
Distance : 11

102
Tree	{ return ARRAY_TYPE ; } a
Code	{ return ARRAY_TYPE ; } a
Distance : 11

103
Tree	{ return ARRAY_TYPE ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ARRAY_TYPE ; } LanguageMode.ECMASCRIPT_2015
Distance : 11

104
Tree	{ return ARRAY_TYPE ; } size
Code	{ return ARRAY_TYPE ; } size
Distance : 11

105
Tree	{ return ARRAY_TYPE ; } StringBuilder
Code	{ return ARRAY_TYPE ; } StringBuilder
Distance : 11

106
Tree	{ return ARRAY_TYPE ; } b
Code	{ return ARRAY_TYPE ; } b
Distance : 11

107
Tree	{ return ARRAY_TYPE ; } MutableTimePeriod
Code	{ return ARRAY_TYPE ; } MutableTimePeriod
Distance : 11

108
Tree	{ return ARRAY_TYPE ; } stroke
Code	{ return ARRAY_TYPE ; } stroke
Distance : 11

109
Tree	{ return ARRAY_TYPE ; } traverseEs6
Code	{ return ARRAY_TYPE ; } traverseEs6
Distance : 11

110
Tree	{ return ARRAY_TYPE ; } UnivariateFunction
Code	{ return ARRAY_TYPE ; } UnivariateFunction
Distance : 11

111
Tree	{ return ARRAY_TYPE ; } sb
Code	{ return ARRAY_TYPE ; } sb
Distance : 11

112
Tree	{ return ARRAY_TYPE ; } throws
Code	{ return ARRAY_TYPE ; } throws
Distance : 11

113
Tree	{ return ARRAY_TYPE ; } scope
Code	{ return ARRAY_TYPE ; } scope
Distance : 11

114
Tree	{ return ARRAY_TYPE ; } sqrt
Code	{ return ARRAY_TYPE ; } sqrt
Distance : 11

115
Tree	{ return ARRAY_TYPE ; } clone
Code	{ return ARRAY_TYPE ; } clone
Distance : 11

116
Tree	{ return ARRAY_TYPE ; } returnZero
Code	{ return ARRAY_TYPE ; } returnZero
Distance : 11

117
Tree	{ return ARRAY_TYPE ; } getFirstChild
Code	{ return ARRAY_TYPE ; } getFirstChild
Distance : 11

118
Tree	{ return ARRAY_TYPE ; } simpleMethod
Code	{ return ARRAY_TYPE ; } simpleMethod
Distance : 11

119
Tree	{ return ARRAY_TYPE ; } getArgumentMatcherStorage
Code	{ return ARRAY_TYPE ; } getArgumentMatcherStorage
Distance : 11

120
Tree	{ return ARRAY_TYPE ; } append
Code	{ return ARRAY_TYPE ; } append
Distance : 11

121
Tree	{ return ARRAY_TYPE ; } optimizer
Code	{ return ARRAY_TYPE ; } optimizer
Distance : 11

122
Tree	{ return ARRAY_TYPE ; } obj
Code	{ return ARRAY_TYPE ; } obj
Distance : 11

123
Tree	{ return ARRAY_TYPE ; } chrono
Code	{ return ARRAY_TYPE ; } chrono
Distance : 11

124
Tree	{ return ARRAY_TYPE ; } isBlock
Code	{ return ARRAY_TYPE ; } isBlock
Distance : 11

125
Tree	{ return ARRAY_TYPE ; } <>
Code	{ return ARRAY_TYPE ; } <>
Distance : 11

126
Tree	{ return ARRAY_TYPE ; } Integer
Code	{ return ARRAY_TYPE ; } Integer
Distance : 11

127
Tree	{ return ARRAY_TYPE ; } v
Code	{ return ARRAY_TYPE ; } v
Distance : 11

128
Tree	{ return ARRAY_TYPE ; } reportCodeChange
Code	{ return ARRAY_TYPE ; } reportCodeChange
Distance : 11

129
Tree	{ return ARRAY_TYPE ; } IllegalArgumentException
Code	{ return ARRAY_TYPE ; } IllegalArgumentException
Distance : 11

130
Tree	{ return ARRAY_TYPE ; } invocation
Code	{ return ARRAY_TYPE ; } invocation
Distance : 11

131
Tree	{ return ARRAY_TYPE ; } assertThat
Code	{ return ARRAY_TYPE ; } assertThat
Distance : 11

132
Tree	{ return ARRAY_TYPE ; } FastMath
Code	{ return ARRAY_TYPE ; } FastMath
Distance : 11

133
Tree	{ return ARRAY_TYPE ; } expected
Code	{ return ARRAY_TYPE ; } expected
Distance : 11

134
Tree	{ return ARRAY_TYPE ; } createIllegalArgumentException
Code	{ return ARRAY_TYPE ; } createIllegalArgumentException
Distance : 11

135
Tree	{ return ARRAY_TYPE ; } parent
Code	{ return ARRAY_TYPE ; } parent
Distance : 11

136
Tree	{ return ARRAY_TYPE ; } fireChangeEvent
Code	{ return ARRAY_TYPE ; } fireChangeEvent
Distance : 11

137
Tree	{ return ARRAY_TYPE ; } ArrayList
Code	{ return ARRAY_TYPE ; } ArrayList
Distance : 11

138
Tree	{ return ARRAY_TYPE ; } testSame
Code	{ return ARRAY_TYPE ; } testSame
Distance : 11

139
Tree	{ return ARRAY_TYPE ; } x
Code	{ return ARRAY_TYPE ; } x
Distance : 11

140
Tree	{ return ARRAY_TYPE ; } LINE_JOINER
Code	{ return ARRAY_TYPE ; } LINE_JOINER
Distance : 11

141
Tree	{ return ARRAY_TYPE ; } str
Code	{ return ARRAY_TYPE ; } str
Distance : 11

142
Tree	{ return ARRAY_TYPE ; } try
Code	{ return ARRAY_TYPE ; } try
Distance : 11

143
Tree	{ return ARRAY_TYPE ; } result
Code	{ return ARRAY_TYPE ; } result
Distance : 11

144
Tree	{ return ARRAY_TYPE ; } fail
Code	{ return ARRAY_TYPE ; } fail
Distance : 11

145
Tree	{ return ARRAY_TYPE ; } :
Code	{ return ARRAY_TYPE ; } :
Distance : 11

146
Tree	{ return ARRAY_TYPE ; } valueOf
Code	{ return ARRAY_TYPE ; } valueOf
Distance : 11

147
Tree	{ return ARRAY_TYPE ; } y
Code	{ return ARRAY_TYPE ; } y
Distance : 11

148
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

149
Tree	{ return ARRAY_TYPE ; } array
Code	{ return ARRAY_TYPE ; } array
Distance : 11

150
Tree	{ return ARRAY_TYPE ; } ?
Code	{ return ARRAY_TYPE ; } ?
Distance : 11

151
Tree	{ return ARRAY_TYPE ; } boolean
Code	{ return ARRAY_TYPE ; } boolean
Distance : 11

152
Tree	{ return ARRAY_TYPE ; } m
Code	{ return ARRAY_TYPE ; } m
Distance : 11

153
Tree	{ return ARRAY_TYPE ; } paint
Code	{ return ARRAY_TYPE ; } paint
Distance : 11

154
Tree	{ return ARRAY_TYPE ; } type
Code	{ return ARRAY_TYPE ; } type
Distance : 11

155
Tree	{ return ARRAY_TYPE ; } *
Code	{ return ARRAY_TYPE ; } *
Distance : 11

156
Tree	{ return ARRAY_TYPE ; } getInstance
Code	{ return ARRAY_TYPE ; } getInstance
Distance : 11

157
Tree	{ return ARRAY_TYPE ; } serialised
Code	{ return ARRAY_TYPE ; } serialised
Distance : 11

158
Tree	{ return ARRAY_TYPE ; } Fraction
Code	{ return ARRAY_TYPE ; } Fraction
Distance : 11

159
Tree	{ return ARRAY_TYPE ; } checkNotNull
Code	{ return ARRAY_TYPE ; } checkNotNull
Distance : 11

160
Tree	{ return ARRAY_TYPE ; } source
Code	{ return ARRAY_TYPE ; } source
Distance : 11

161
Tree	{ return ARRAY_TYPE ; } toString
Code	{ return ARRAY_TYPE ; } toString
Distance : 11

162
Tree	{ return ARRAY_TYPE ; } Math
Code	{ return ARRAY_TYPE ; } Math
Distance : 11

163
Tree	{ return ARRAY_TYPE ; } root
Code	{ return ARRAY_TYPE ; } root
Distance : 11

164
Tree	{ return ARRAY_TYPE ; } options
Code	{ return ARRAY_TYPE ; } options
Distance : 11

165
Tree	{ return ARRAY_TYPE ; } p
Code	{ return ARRAY_TYPE ; } p
Distance : 11

166
Tree	{ return ARRAY_TYPE ; } data
Code	{ return ARRAY_TYPE ; } data
Distance : 11

167
Tree	{ return ARRAY_TYPE ; } add
Code	{ return ARRAY_TYPE ; } add
Distance : 11

168
Tree	{ return ARRAY_TYPE ; } field
Code	{ return ARRAY_TYPE ; } field
Distance : 11

169
Tree	{ return ARRAY_TYPE ; } checkArgument
Code	{ return ARRAY_TYPE ; } checkArgument
Distance : 11

170
Tree	{ return ARRAY_TYPE ; } ex
Code	{ return ARRAY_TYPE ; } ex
Distance : 11

171
Tree	{ return ARRAY_TYPE ; } NodeUtil
Code	{ return ARRAY_TYPE ; } NodeUtil
Distance : 11

172
Tree	{ return ARRAY_TYPE ; } join
Code	{ return ARRAY_TYPE ; } join
Distance : 11

173
Tree	{ return ARRAY_TYPE ; } Args
Code	{ return ARRAY_TYPE ; } Args
Distance : 11

174
Tree	{ return ARRAY_TYPE ; } NodeTraversal
Code	{ return ARRAY_TYPE ; } NodeTraversal
Distance : 11

175
Tree	{ return ARRAY_TYPE ; } List
Code	{ return ARRAY_TYPE ; } List
Distance : 11

176
Tree	{ return ARRAY_TYPE ; } Exception
Code	{ return ARRAY_TYPE ; } Exception
Distance : 11

177
Tree	{ return ARRAY_TYPE ; } Node
Code	{ return ARRAY_TYPE ; } Node
Distance : 11

178
Tree	{ return ARRAY_TYPE ; } c
Code	{ return ARRAY_TYPE ; } c
Distance : 11

179
Tree	{ return ARRAY_TYPE ; } notifyListeners
Code	{ return ARRAY_TYPE ; } notifyListeners
Distance : 11

180
Tree	{ return ARRAY_TYPE ; } lines
Code	{ return ARRAY_TYPE ; } lines
Distance : 11

181
Tree	{ return ARRAY_TYPE ; } verify
Code	{ return ARRAY_TYPE ; } verify
Distance : 11

182
Tree	{ return ARRAY_TYPE ; } compiler
Code	{ return ARRAY_TYPE ; } compiler
Distance : 11

183
Tree	{ return ARRAY_TYPE ; } String
Code	{ return ARRAY_TYPE ; } String
Distance : 11

184
Tree	{ return ARRAY_TYPE ; } null
Code	{ return ARRAY_TYPE ; } null
Distance : 11

185
Tree	{ return ARRAY_TYPE ; } wanted
Code	{ return ARRAY_TYPE ; } wanted
Distance : 11

186
Tree	{ return ARRAY_TYPE ; } +
Code	{ return ARRAY_TYPE ; } +
Distance : 11

187
Tree	{ return ARRAY_TYPE ; } throw
Code	{ return ARRAY_TYPE ; } throw
Distance : 11

188
Tree	{ return ARRAY_TYPE ; } super
Code	{ return ARRAY_TYPE ; } super
Distance : 11

189
Tree	{ return ARRAY_TYPE ; } value
Code	{ return ARRAY_TYPE ; } value
Distance : 11

190
Tree	{ return ARRAY_TYPE ; } long
Code	{ return ARRAY_TYPE ; } long
Distance : 11

191
Tree	{ return ARRAY_TYPE ; } /
Code	{ return ARRAY_TYPE ; } /
Distance : 11

192
Tree	{ return ARRAY_TYPE ; } length
Code	{ return ARRAY_TYPE ; } length
Distance : 11

193
Tree	{ return ARRAY_TYPE ; } TestUtils
Code	{ return ARRAY_TYPE ; } TestUtils
Distance : 11

194
Tree	{ return ARRAY_TYPE ; } alpha
Code	{ return ARRAY_TYPE ; } alpha
Distance : 11

195
Tree	{ return ARRAY_TYPE ; } instance
Code	{ return ARRAY_TYPE ; } instance
Distance : 11

196
Tree	{ return ARRAY_TYPE ; } Assert
Code	{ return ARRAY_TYPE ; } Assert
Distance : 11

197
Tree	{ return ARRAY_TYPE ; } catch
Code	{ return ARRAY_TYPE ; } catch
Distance : 11

198
Tree	{ return ARRAY_TYPE ; } LanguageMode.ECMASCRIPT6
Code	{ return ARRAY_TYPE ; } LanguageMode.ECMASCRIPT6
Distance : 11

199
Tree	{ return ARRAY_TYPE ; } s
Code	{ return ARRAY_TYPE ; } s
Distance : 11

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } TestUtils
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } TestUtils
Distance : 11

1
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } class
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } class
Distance : 11

2
Tree	{ if ( NodeUtil != return; ) { return true ; } return false ; }
Code	{ if ( NodeUtil != return; ) { return true ; } return false ; }
Distance : 12

3
Tree	{ if ( parent != default: ) { return true ; } return false ; }
Code	{ if ( parent != default: ) { return true ; } return false ; }
Distance : 12

4
Tree	{ if ( assignLhsChild != super(); ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != super(); ) { return true ; } return true ; }
Distance : 11

5
Tree	{ if ( parent != continue; ) { return true ; } return false ; }
Code	{ if ( parent != continue; ) { return true ; } return false ; }
Distance : 12

6
Tree	{ if ( NodeUtil != super(); ) { return true ; } return false ; }
Code	{ if ( NodeUtil != super(); ) { return true ; } return false ; }
Distance : 12

7
Tree	{ if ( assignLhsChild != return; ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != return; ) { return false ; } return false ; }
Distance : 12

8
Tree	{ if ( NodeUtil != default: ) { return true ; } return false ; }
Code	{ if ( NodeUtil != default: ) { return true ; } return false ; }
Distance : 12

9
Tree	{ if ( assignLhsChild != return; ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != return; ) { return true ; } return true ; }
Distance : 11

10
Tree	{ if ( assignLhsChild != break; ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != break; ) { return false ; } return false ; }
Distance : 12

11
Tree	{ if ( NodeUtil != break; ) { return true ; } return false ; }
Code	{ if ( NodeUtil != break; ) { return true ; } return false ; }
Distance : 12

12
Tree	{ if ( assignLhsChild != default: ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != default: ) { return false ; } return false ; }
Distance : 12

13
Tree	{ if ( NodeUtil != continue; ) { return true ; } return false ; }
Code	{ if ( NodeUtil != continue; ) { return true ; } return false ; }
Distance : 12

14
Tree	{ if ( assignLhsChild != break; ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != break; ) { return true ; } return true ; }
Distance : 11

15
Tree	{ if ( assignLhsChild != super(); ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != super(); ) { return false ; } return false ; }
Distance : 12

16
Tree	{ if ( NodeUtil != null ) { return false ; } return true ; }
Code	{ if ( NodeUtil != null ) { return false ; } return true ; }
Distance : 12

17
Tree	{ if ( parent != break; ) { return true ; } return false ; }
Code	{ if ( parent != break; ) { return true ; } return false ; }
Distance : 12

18
Tree	{ if ( parent != null ) { return false ; } return false ; }
Code	{ if ( parent != null ) { return false ; } return false ; }
Distance : 12

19
Tree	{ if ( parent != return; ) { return true ; } return false ; }
Code	{ if ( parent != return; ) { return true ; } return false ; }
Distance : 12

20
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

21
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

22
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Assert
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Assert
Distance : 11

23
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

24
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ?
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ?
Distance : 11

25
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Fraction
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Fraction
Distance : 11

26
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Math
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Math
Distance : 11

27
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } root
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } root
Distance : 11

28
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } NodeUtil
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } NodeUtil
Distance : 11

29
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } wanted
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } wanted
Distance : 11

30
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } data
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } data
Distance : 11

31
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } NodeTraversal
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } NodeTraversal
Distance : 11

32
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ex
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ex
Distance : 11

33
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } <>
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } <>
Distance : 11

34
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } array
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } array
Distance : 11

35
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ParamChecks
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ParamChecks
Distance : 11

36
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } f
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } f
Distance : 11

37
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Override
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Override
Distance : 11

38
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } add
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } add
Distance : 11

39
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Object
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Object
Distance : 11

40
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } notifyListeners
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } notifyListeners
Distance : 11

41
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } MathRuntimeException
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } MathRuntimeException
Distance : 11

42
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } c
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } c
Distance : 11

43
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } externs
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } externs
Distance : 11

44
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } long
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } long
Distance : 11

45
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } /
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } /
Distance : 11

46
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } assertTrue
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } assertTrue
Distance : 11

47
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } checkNotNull
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } checkNotNull
Distance : 11

48
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } length
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } length
Distance : 11

49
Tree	{ if ( assignLhsChild != null ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return true ; }
Distance : 10

50
Tree	{ if ( parent != null ) { return true ; } return true ; }
Code	{ if ( parent != null ) { return true ; } return true ; }
Distance : 11

51
Tree	{ if ( NodeUtil != default: ) { return false ; } return true ; }
Code	{ if ( NodeUtil != default: ) { return false ; } return true ; }
Distance : 13

52
Tree	{ if ( NodeUtil != continue; ) { return false ; } return true ; }
Code	{ if ( NodeUtil != continue; ) { return false ; } return true ; }
Distance : 13

53
Tree	{ if ( NodeUtil != super(); ) { return false ; } return true ; }
Code	{ if ( NodeUtil != super(); ) { return false ; } return true ; }
Distance : 13

54
Tree	{ if ( assignLhsChild != break; ) { return false ; } return true ; }
Code	{ if ( assignLhsChild != break; ) { return false ; } return true ; }
Distance : 12

55
Tree	{ if ( NodeUtil != continue; ) { return false ; } return false ; }
Code	{ if ( NodeUtil != continue; ) { return false ; } return false ; }
Distance : 13

56
Tree	{ if ( NodeUtil != default: ) { return false ; } return false ; }
Code	{ if ( NodeUtil != default: ) { return false ; } return false ; }
Distance : 13

57
Tree	{ if ( parent != super(); ) { return true ; } return true ; }
Code	{ if ( parent != super(); ) { return true ; } return true ; }
Distance : 12

58
Tree	{ if ( parent != return; ) { return false ; } return false ; }
Code	{ if ( parent != return; ) { return false ; } return false ; }
Distance : 13

59
Tree	{ if ( parent != return; ) { return true ; } return true ; }
Code	{ if ( parent != return; ) { return true ; } return true ; }
Distance : 12

60
Tree	{ if ( parent != break; ) { return false ; } return false ; }
Code	{ if ( parent != break; ) { return false ; } return false ; }
Distance : 13

61
Tree	{ if ( NodeUtil != super(); ) { return false ; } return false ; }
Code	{ if ( NodeUtil != super(); ) { return false ; } return false ; }
Distance : 13

62
Tree	{ if ( parent != default: ) { return false ; } return false ; }
Code	{ if ( parent != default: ) { return false ; } return false ; }
Distance : 13

63
Tree	{ if ( parent != break; ) { return true ; } return true ; }
Code	{ if ( parent != break; ) { return true ; } return true ; }
Distance : 12

64
Tree	{ if ( assignLhsChild != super(); ) { return false ; } return true ; }
Code	{ if ( assignLhsChild != super(); ) { return false ; } return true ; }
Distance : 12

65
Tree	{ if ( parent != continue; ) { return false ; } return false ; }
Code	{ if ( parent != continue; ) { return false ; } return false ; }
Distance : 13

66
Tree	{ if ( NodeUtil != super(); ) { return true ; } return true ; }
Code	{ if ( NodeUtil != super(); ) { return true ; } return true ; }
Distance : 12

67
Tree	{ if ( parent != default: ) { return true ; } return true ; }
Code	{ if ( parent != default: ) { return true ; } return true ; }
Distance : 12

68
Tree	{ if ( parent != continue; ) { return true ; } return true ; }
Code	{ if ( parent != continue; ) { return true ; } return true ; }
Distance : 12

69
Tree	{ if ( NodeUtil != return; ) { return true ; } return true ; }
Code	{ if ( NodeUtil != return; ) { return true ; } return true ; }
Distance : 12

70
Tree	{ if ( assignLhsChild != return; ) { return false ; } return true ; }
Code	{ if ( assignLhsChild != return; ) { return false ; } return true ; }
Distance : 12

71
Tree	{ if ( NodeUtil != break; ) { return false ; } return false ; }
Code	{ if ( NodeUtil != break; ) { return false ; } return false ; }
Distance : 13

72
Tree	{ if ( NodeUtil != break; ) { return false ; } return true ; }
Code	{ if ( NodeUtil != break; ) { return false ; } return true ; }
Distance : 13

73
Tree	{ if ( assignLhsChild != continue; ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != continue; ) { return false ; } return false ; }
Distance : 12

74
Tree	{ if ( NodeUtil != return; ) { return false ; } return true ; }
Code	{ if ( NodeUtil != return; ) { return false ; } return true ; }
Distance : 13

75
Tree	{ if ( parent != default: ) { return false ; } return true ; }
Code	{ if ( parent != default: ) { return false ; } return true ; }
Distance : 13

76
Tree	{ if ( assignLhsChild != super(); ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != super(); ) { return true ; } return false ; }
Distance : 11

77
Tree	{ if ( NodeUtil != null ) { return false ; } return false ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false ; }
Distance : 12

78
Tree	{ if ( assignLhsChild != return; ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != return; ) { return true ; } return false ; }
Distance : 11

79
Tree	{ if ( assignLhsChild != null ) { return false ; } return true ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return true ; }
Distance : 11

80
Tree	{ if ( NodeUtil != null ) { return true ; } return true ; }
Code	{ if ( NodeUtil != null ) { return true ; } return true ; }
Distance : 11

81
Tree	{ if ( assignLhsChild != break; ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != break; ) { return true ; } return false ; }
Distance : 11

82
Tree	{ if ( assignLhsChild != default: ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != default: ) { return true ; } return false ; }
Distance : 11

83
Tree	{ if ( assignLhsChild != continue; ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != continue; ) { return true ; } return false ; }
Distance : 11

84
Tree	{ if ( parent != super(); ) { return true ; } return false ; }
Code	{ if ( parent != super(); ) { return true ; } return false ; }
Distance : 12

85
Tree	{ if ( parent != null ) { return false ; } return true ; }
Code	{ if ( parent != null ) { return false ; } return true ; }
Distance : 12

86
Tree	{ if ( assignLhsChild != default: ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != default: ) { return true ; } return true ; }
Distance : 11

87
Tree	{ if ( NodeUtil != return; ) { return false ; } return false ; }
Code	{ if ( NodeUtil != return; ) { return false ; } return false ; }
Distance : 13

88
Tree	{ if ( parent != super(); ) { return false ; } return false ; }
Code	{ if ( parent != super(); ) { return false ; } return false ; }
Distance : 13

89
Tree	{ if ( assignLhsChild != default: ) { return false ; } return true ; }
Code	{ if ( assignLhsChild != default: ) { return false ; } return true ; }
Distance : 12

90
Tree	{ if ( NodeUtil != default: ) { return true ; } return true ; }
Code	{ if ( NodeUtil != default: ) { return true ; } return true ; }
Distance : 12

91
Tree	{ if ( NodeUtil != continue; ) { return true ; } return true ; }
Code	{ if ( NodeUtil != continue; ) { return true ; } return true ; }
Distance : 12

92
Tree	{ if ( assignLhsChild != continue; ) { return false ; } return true ; }
Code	{ if ( assignLhsChild != continue; ) { return false ; } return true ; }
Distance : 12

93
Tree	{ if ( parent != super(); ) { return false ; } return true ; }
Code	{ if ( parent != super(); ) { return false ; } return true ; }
Distance : 13

94
Tree	{ if ( parent != return; ) { return false ; } return true ; }
Code	{ if ( parent != return; ) { return false ; } return true ; }
Distance : 13

95
Tree	{ if ( NodeUtil != break; ) { return true ; } return true ; }
Code	{ if ( NodeUtil != break; ) { return true ; } return true ; }
Distance : 12

96
Tree	{ if ( parent != break; ) { return false ; } return true ; }
Code	{ if ( parent != break; ) { return false ; } return true ; }
Distance : 13

97
Tree	{ if ( parent != continue; ) { return false ; } return true ; }
Code	{ if ( parent != continue; ) { return false ; } return true ; }
Distance : 13

98
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Class
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Class
Distance : 11

99
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

100
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } p
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } p
Distance : 11

101
Tree	{ if ( assignLhsChild != continue; ) { return true ; } return true ; }
Code	{ if ( assignLhsChild != continue; ) { return true ; } return true ; }
Distance : 11

102
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ]
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ]
Distance : 11

103
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } .
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } .
Distance : 11

104
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ==
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ==
Distance : 11

105
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } catch
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } catch
Distance : 11

106
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } =
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } =
Distance : 11

107
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ()
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ()
Distance : 11

108
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } {
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } {
Distance : 11

109
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } new
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } new
Distance : 11

110
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } STRING_CONSTANT
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } STRING_CONSTANT
Distance : 11

111
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } NUMBER_CONSTANT
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } NUMBER_CONSTANT
Distance : 11

112
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } return
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } return
Distance : 11

113
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } &&
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } &&
Distance : 11

114
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } }
Distance : 11

115
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } super
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } super
Distance : 11

116
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } void
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } void
Distance : 11

117
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } T
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } T
Distance : 11

118
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } throw
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } throw
Distance : 11

119
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } n
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } n
Distance : 11

120
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } String
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } String
Distance : 11

121
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } compiler
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } compiler
Distance : 11

122
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } e
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } e
Distance : 11

123
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } !=
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } !=
Distance : 11

124
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } i
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } i
Distance : 11

125
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } int
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } int
Distance : 11

126
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } checkState
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } checkState
Distance : 11

127
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } value
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } value
Distance : 11

128
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } getInstance
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } getInstance
Distance : 11

129
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } <blank>
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } <blank>
Distance : 11

130
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } fireChangeEvent
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } fireChangeEvent
Distance : 11

131
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ;
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ;
Distance : 11

132
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } false
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } false
Distance : 11

133
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } join
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } join
Distance : 11

134
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } expected
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } expected
Distance : 11

135
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } toString
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } toString
Distance : 11

136
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } IllegalArgumentException
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } IllegalArgumentException
Distance : 11

137
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } reportCodeChange
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } reportCodeChange
Distance : 11

138
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } FastMath
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } FastMath
Distance : 11

139
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } name
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } name
Distance : 11

140
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } t
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } t
Distance : 11

141
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } <s>
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } <s>
Distance : 11

142
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } source
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } source
Distance : 11

143
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } (
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } (
Distance : 11

144
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } str
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } str
Distance : 11

145
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } <
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } <
Distance : 11

146
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ArrayList
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ArrayList
Distance : 11

147
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } invocation
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } invocation
Distance : 11

148
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } assertThat
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } assertThat
Distance : 11

149
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } LINE_JOINER
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } LINE_JOINER
Distance : 11

150
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } field
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } field
Distance : 11

151
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } createIllegalArgumentException
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } createIllegalArgumentException
Distance : 11

152
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } parent
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } parent
Distance : 11

153
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } x
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } x
Distance : 11

154
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } testSame
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } testSame
Distance : 11

155
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } +
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } +
Distance : 11

156
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } null
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } null
Distance : 11

157
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } >
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } >
Distance : 11

158
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } public
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } public
Distance : 11

159
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } final
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } final
Distance : 11

160
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } this
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } this
Distance : 11

161
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } if
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } if
Distance : 11

162
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } checkArgument
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } checkArgument
Distance : 11

163
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } )
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } )
Distance : 11

164
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } fail
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } fail
Distance : 11

165
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } double
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } double
Distance : 11

166
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } false
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } false
Distance : 11

167
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } @
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } @
Distance : 11

168
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } test
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } test
Distance : 11

169
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } nullNotPermitted
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } nullNotPermitted
Distance : 11

170
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } []
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } []
Distance : 11

171
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } {}
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } {}
Distance : 11

172
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } !
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } !
Distance : 11

173
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Node
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Node
Distance : 11

174
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Exception
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Exception
Distance : 11

175
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } lines
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } lines
Distance : 11

176
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } verify
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } verify
Distance : 11

177
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Integer
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Integer
Distance : 11

178
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } v
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } v
Distance : 11

179
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } assertEquals
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } assertEquals
Distance : 11

180
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } mock
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } mock
Distance : 11

181
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } true
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } true
Distance : 11

182
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } mode
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } mode
Distance : 11

183
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } List
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } List
Distance : 11

184
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Args
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Args
Distance : 11

185
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } try
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } try
Distance : 11

186
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } result
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } result
Distance : 11

187
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } m
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } m
Distance : 11

188
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } paint
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } paint
Distance : 11

189
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } type
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } type
Distance : 11

190
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } *
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } *
Distance : 11

191
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } boolean
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } boolean
Distance : 11

192
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } serialised
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } serialised
Distance : 11

193
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } options
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } options
Distance : 11

194
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } ,
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } ,
Distance : 11

195
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } [
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } [
Distance : 11

196
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Preconditions
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Preconditions
Distance : 11

197
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } -
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } -
Distance : 11

198
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } :
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } :
Distance : 11

199
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; } Test
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; } Test
Distance : 11

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; TestUtils
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; TestUtils
Distance : 2

1
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; class
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; class
Distance : 2

2
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

3
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

4
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

5
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

6
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

7
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

8
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

9
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

10
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

11
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

12
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

13
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

14
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

15
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

16
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

17
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

18
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

20
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

21
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

22
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Assert
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Assert
Distance : 2

23
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

24
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ?
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ?
Distance : 2

25
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Fraction
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Fraction
Distance : 2

26
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Math
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Math
Distance : 2

27
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; root
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; root
Distance : 2

28
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeUtil
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeUtil
Distance : 2

29
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; wanted
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; wanted
Distance : 2

30
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; data
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; data
Distance : 2

31
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeTraversal
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeTraversal
Distance : 2

32
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ex
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ex
Distance : 2

33
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <>
Distance : 2

34
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; array
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; array
Distance : 2

35
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ParamChecks
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ParamChecks
Distance : 2

36
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; f
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; f
Distance : 2

37
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Override
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Override
Distance : 2

38
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; add
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; add
Distance : 2

39
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Object
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Object
Distance : 2

40
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; notifyListeners
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; notifyListeners
Distance : 2

41
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; MathRuntimeException
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; MathRuntimeException
Distance : 2

42
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; c
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; c
Distance : 2

43
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; externs
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; externs
Distance : 2

44
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; long
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; long
Distance : 2

45
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; /
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; /
Distance : 2

46
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertTrue
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertTrue
Distance : 2

47
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkNotNull
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkNotNull
Distance : 2

48
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; length
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; length
Distance : 2

49
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

51
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

52
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

53
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

54
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

55
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

56
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

57
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

58
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

59
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

60
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

61
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

62
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

63
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

64
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

65
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

66
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

68
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

69
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

70
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

71
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

72
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

73
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

74
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

75
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

76
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

77
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

78
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

79
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

80
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

81
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

82
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

83
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

84
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

85
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

86
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

87
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

88
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

89
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

90
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

91
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

92
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

93
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

94
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

95
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

96
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

97
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

98
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Class
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Class
Distance : 2

99
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

100
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; p
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; p
Distance : 2

101
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

102
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ]
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ]
Distance : 2

103
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Distance : 2

104
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ==
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ==
Distance : 2

105
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; catch
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; catch
Distance : 2

106
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Distance : 2

107
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Distance : 2

108
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Distance : 2

109
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Distance : 2

110
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Distance : 2

111
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Distance : 2

112
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Distance : 2

113
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; &&
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; &&
Distance : 2

114
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Distance : 2

115
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; super
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; super
Distance : 2

116
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; void
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; void
Distance : 2

117
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; T
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; T
Distance : 2

118
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; throw
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; throw
Distance : 2

119
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Distance : 2

120
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Distance : 2

121
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Distance : 2

122
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Distance : 2

123
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !=
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !=
Distance : 2

124
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; i
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; i
Distance : 2

125
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; int
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; int
Distance : 2

126
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkState
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkState
Distance : 2

127
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; value
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; value
Distance : 2

128
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; getInstance
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; getInstance
Distance : 2

129
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Distance : 2

130
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fireChangeEvent
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fireChangeEvent
Distance : 2

131
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

132
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

133
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; join
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; join
Distance : 2

134
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; expected
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; expected
Distance : 2

135
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; toString
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; toString
Distance : 2

136
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; IllegalArgumentException
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; IllegalArgumentException
Distance : 2

137
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; reportCodeChange
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; reportCodeChange
Distance : 2

138
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; FastMath
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; FastMath
Distance : 2

139
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; name
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; name
Distance : 2

140
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; t
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; t
Distance : 2

141
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Distance : 2

142
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; source
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; source
Distance : 2

143
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Distance : 2

144
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; str
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; str
Distance : 2

145
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Distance : 2

146
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ArrayList
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ArrayList
Distance : 2

147
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; invocation
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; invocation
Distance : 2

148
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertThat
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertThat
Distance : 2

149
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; LINE_JOINER
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; LINE_JOINER
Distance : 2

150
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; field
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; field
Distance : 2

151
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; createIllegalArgumentException
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; createIllegalArgumentException
Distance : 2

152
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; parent
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; parent
Distance : 2

153
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; x
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; x
Distance : 2

154
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; testSame
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; testSame
Distance : 2

155
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Distance : 2

156
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Distance : 2

157
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Distance : 2

158
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Distance : 2

159
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Distance : 2

160
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Distance : 2

161
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Distance : 2

162
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkArgument
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkArgument
Distance : 2

163
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Distance : 2

164
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fail
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fail
Distance : 2

165
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; double
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; double
Distance : 2

166
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; false
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; false
Distance : 2

167
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; @
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; @
Distance : 2

168
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; test
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; test
Distance : 2

169
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; nullNotPermitted
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; nullNotPermitted
Distance : 2

170
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; []
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; []
Distance : 2

171
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {}
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {}
Distance : 2

172
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !
Distance : 2

173
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Node
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Node
Distance : 2

174
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Exception
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Exception
Distance : 2

175
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; lines
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; lines
Distance : 2

176
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; verify
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; verify
Distance : 2

177
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Integer
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Integer
Distance : 2

178
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; v
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; v
Distance : 2

179
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertEquals
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertEquals
Distance : 2

180
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mock
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mock
Distance : 2

181
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; true
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; true
Distance : 2

182
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mode
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mode
Distance : 2

183
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; List
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; List
Distance : 2

184
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Args
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Args
Distance : 2

185
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; try
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; try
Distance : 2

186
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; result
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; result
Distance : 2

187
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; m
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; m
Distance : 2

188
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; paint
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; paint
Distance : 2

189
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; type
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; type
Distance : 2

190
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; *
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; *
Distance : 2

191
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; boolean
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; boolean
Distance : 2

192
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; serialised
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; serialised
Distance : 2

193
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; options
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; options
Distance : 2

194
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Distance : 2

195
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; [
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; [
Distance : 2

196
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Preconditions
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Preconditions
Distance : 2

197
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; -
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; -
Distance : 2

198
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; :
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; :
Distance : 2

199
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Test
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Test
Distance : 2

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; TestUtils
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; TestUtils
Distance : 2

1
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; class
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; class
Distance : 2

2
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

3
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

4
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

5
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

6
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

7
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

8
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

9
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

10
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

11
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

12
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

13
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

14
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

15
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

16
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

17
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

18
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

20
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

21
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

22
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Assert
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Assert
Distance : 2

23
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

24
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ?
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ?
Distance : 2

25
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Fraction
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Fraction
Distance : 2

26
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Math
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Math
Distance : 2

27
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; root
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; root
Distance : 2

28
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeUtil
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeUtil
Distance : 2

29
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; wanted
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; wanted
Distance : 2

30
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; data
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; data
Distance : 2

31
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeTraversal
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NodeTraversal
Distance : 2

32
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ex
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ex
Distance : 2

33
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <>
Distance : 2

34
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; array
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; array
Distance : 2

35
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ParamChecks
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ParamChecks
Distance : 2

36
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; f
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; f
Distance : 2

37
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Override
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Override
Distance : 2

38
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; add
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; add
Distance : 2

39
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Object
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Object
Distance : 2

40
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; notifyListeners
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; notifyListeners
Distance : 2

41
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; MathRuntimeException
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; MathRuntimeException
Distance : 2

42
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; c
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; c
Distance : 2

43
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; externs
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; externs
Distance : 2

44
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; long
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; long
Distance : 2

45
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; /
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; /
Distance : 2

46
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertTrue
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertTrue
Distance : 2

47
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkNotNull
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkNotNull
Distance : 2

48
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; length
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; length
Distance : 2

49
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

51
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

52
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

53
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

54
Tree	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

55
Tree	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

56
Tree	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

57
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

58
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

59
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

60
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

61
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

62
Tree	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

63
Tree	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

64
Tree	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

65
Tree	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

66
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

68
Tree	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

69
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

70
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

71
Tree	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

72
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

73
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

74
Tree	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	byte namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

75
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

76
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

77
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

78
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

79
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

80
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

81
Tree	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

82
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

83
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

84
Tree	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	double namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

85
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

86
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

87
Tree	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

88
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

89
Tree	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

90
Tree	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

91
Tree	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

92
Tree	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

93
Tree	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

94
Tree	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

95
Tree	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	void namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

96
Tree	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

97
Tree	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	boolean namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

98
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Class
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Class
Distance : 2

99
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

100
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; p
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; p
Distance : 2

101
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

102
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ]
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ]
Distance : 2

103
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; .
Distance : 2

104
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ==
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ==
Distance : 2

105
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; catch
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; catch
Distance : 2

106
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; =
Distance : 2

107
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ()
Distance : 2

108
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {
Distance : 2

109
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; new
Distance : 2

110
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; STRING_CONSTANT
Distance : 2

111
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; NUMBER_CONSTANT
Distance : 2

112
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; return
Distance : 2

113
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; &&
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; &&
Distance : 2

114
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; }
Distance : 2

115
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; super
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; super
Distance : 2

116
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; void
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; void
Distance : 2

117
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; T
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; T
Distance : 2

118
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; throw
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; throw
Distance : 2

119
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; n
Distance : 2

120
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; String
Distance : 2

121
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; compiler
Distance : 2

122
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; e
Distance : 2

123
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !=
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !=
Distance : 2

124
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; i
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; i
Distance : 2

125
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; int
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; int
Distance : 2

126
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkState
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkState
Distance : 2

127
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; value
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; value
Distance : 2

128
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; getInstance
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; getInstance
Distance : 2

129
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <blank>
Distance : 2

130
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fireChangeEvent
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fireChangeEvent
Distance : 2

131
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

132
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ;
Distance : 2

133
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; join
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; join
Distance : 2

134
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; expected
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; expected
Distance : 2

135
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; toString
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; toString
Distance : 2

136
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; IllegalArgumentException
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; IllegalArgumentException
Distance : 2

137
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; reportCodeChange
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; reportCodeChange
Distance : 2

138
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; FastMath
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; FastMath
Distance : 2

139
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; name
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; name
Distance : 2

140
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; t
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; t
Distance : 2

141
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <s>
Distance : 2

142
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; source
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; source
Distance : 2

143
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; (
Distance : 2

144
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; str
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; str
Distance : 2

145
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; <
Distance : 2

146
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ArrayList
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ArrayList
Distance : 2

147
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; invocation
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; invocation
Distance : 2

148
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertThat
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertThat
Distance : 2

149
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; LINE_JOINER
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; LINE_JOINER
Distance : 2

150
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; field
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; field
Distance : 2

151
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; createIllegalArgumentException
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; createIllegalArgumentException
Distance : 2

152
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; parent
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; parent
Distance : 2

153
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; x
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; x
Distance : 2

154
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; testSame
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; testSame
Distance : 2

155
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; +
Distance : 2

156
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; null
Distance : 2

157
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; >
Distance : 2

158
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; public
Distance : 2

159
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; final
Distance : 2

160
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; this
Distance : 2

161
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; if
Distance : 2

162
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkArgument
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; checkArgument
Distance : 2

163
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; )
Distance : 2

164
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fail
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; fail
Distance : 2

165
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; double
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; double
Distance : 2

166
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; false
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; false
Distance : 2

167
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; @
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; @
Distance : 2

168
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; test
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; test
Distance : 2

169
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; nullNotPermitted
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; nullNotPermitted
Distance : 2

170
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; []
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; []
Distance : 2

171
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {}
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; {}
Distance : 2

172
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; !
Distance : 2

173
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Node
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Node
Distance : 2

174
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Exception
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Exception
Distance : 2

175
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; lines
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; lines
Distance : 2

176
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; verify
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; verify
Distance : 2

177
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Integer
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Integer
Distance : 2

178
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; v
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; v
Distance : 2

179
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertEquals
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; assertEquals
Distance : 2

180
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mock
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mock
Distance : 2

181
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; true
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; true
Distance : 2

182
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mode
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; mode
Distance : 2

183
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; List
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; List
Distance : 2

184
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Args
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Args
Distance : 2

185
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; try
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; try
Distance : 2

186
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; result
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; result
Distance : 2

187
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; m
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; m
Distance : 2

188
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; paint
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; paint
Distance : 2

189
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; type
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; type
Distance : 2

190
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; *
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; *
Distance : 2

191
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; boolean
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; boolean
Distance : 2

192
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; serialised
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; serialised
Distance : 2

193
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; options
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; options
Distance : 2

194
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; ,
Distance : 2

195
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; [
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; [
Distance : 2

196
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Preconditions
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Preconditions
Distance : 2

197
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; -
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; -
Distance : 2

198
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; :
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; :
Distance : 2

199
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Test
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ; Test
Distance : 2

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

1
Tree	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

2
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

3
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

4
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 4

5
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 4

6
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

7
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 4

8
Tree	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

9
Tree	! type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

10
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 5

11
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

12
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 5

13
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 5

14
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 5

15
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

16
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

17
Tree	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

18
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

19
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

20
Tree	! type . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 5

21
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 5

22
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

23
Tree	! type . isSubtype ( type . getNativeType ( typeRegistry ) )
Code	! type . isSubtype ( type . getNativeType ( typeRegistry ) )
Distance : 5

24
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

25
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

26
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 4

27
Tree	! type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

28
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

29
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 6

30
Tree	! type . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 4

31
Tree	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

32
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

33
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 4

34
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

35
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 5

36
Tree	! type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 5

37
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

38
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 5

39
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

40
Tree	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

41
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

42
Tree	! type . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 6

43
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

44
Tree	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

45
Tree	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 5

46
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

47
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

48
Tree	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 4

49
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

50
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

51
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

52
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

53
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

54
Tree	! type . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 6

55
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 5

56
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

57
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 6

58
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 5

59
Tree	! type . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

60
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Distance : 7

61
Tree	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

62
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

63
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 5

64
Tree	! type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 6

65
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

66
Tree	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

67
Tree	! type . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

68
Tree	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

69
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

70
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

71
Tree	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 5

72
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 5

73
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Distance : 5

74
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

75
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 6

76
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 6

77
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 6

78
Tree	! type . isSubtype ( typeRegistry . isSubtype ( type ) )
Code	! type . isSubtype ( typeRegistry . isSubtype ( type ) )
Distance : 5

79
Tree	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

80
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 6

81
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Distance : 5

82
Tree	! type . getNativeType ( type . getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( type . getNativeType ( typeRegistry ) )
Distance : 6

83
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

84
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 6

85
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 6

86
Tree	! type . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 7

87
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 6

88
Tree	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 6

89
Tree	! type . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Code	! type . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 5

90
Tree	! type . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

91
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 6

92
Tree	! type . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 5

93
Tree	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

94
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

95
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 6

96
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

97
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

98
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 6

99
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

100
Tree	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! typeRegistry . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 5

101
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

102
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 5

103
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

104
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( type ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . getNativeType ( type ) )
Distance : 5

105
Tree	! typeRegistry . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 6

106
Tree	! type . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! type . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

107
Tree	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

108
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 5

109
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Distance : 6

110
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 6

111
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

112
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Distance : 6

113
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 7

114
Tree	! typeRegistry . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

115
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 7

116
Tree	! typeRegistry . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

117
Tree	! type . getNativeType ( typeRegistry . isSubtype ( type ) )
Code	! type . getNativeType ( typeRegistry . isSubtype ( type ) )
Distance : 6

118
Tree	! OBJECT_TYPE . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

119
Tree	! type . isSubtype ( type . isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( type . isSubtype ( typeRegistry ) )
Distance : 6

120
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 5

121
Tree	! type . restrictByNotNullOrUndefined ( type . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( type . isSubtype ( typeRegistry ) )
Distance : 6

122
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 6

123
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

124
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 6

125
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

126
Tree	! type . isSubtype ( type . getNativeType ( type ) )
Code	! type . isSubtype ( type . getNativeType ( type ) )
Distance : 5

127
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 6

128
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

129
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( type ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( type ) )
Distance : 5

130
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 6

131
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

132
Tree	! typeRegistry . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 7

133
Tree	! type . getNativeType ( type . isSubtype ( OBJECT_TYPE ) )
Code	! type . getNativeType ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 6

134
Tree	! type . getNativeType ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . getNativeType ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

135
Tree	! type . isSubtype ( OBJECT_TYPE . isSubtype ( type ) )
Code	! type . isSubtype ( OBJECT_TYPE . isSubtype ( type ) )
Distance : 6

136
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

137
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 7

138
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( type ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( type ) )
Distance : 6

139
Tree	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! typeRegistry . getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 6

140
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

141
Tree	! typeRegistry . isSubtype ( type . getNativeType ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( type . getNativeType ( typeRegistry ) )
Distance : 6

142
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( type ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( type ) )
Distance : 6

143
Tree	! typeRegistry . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Distance : 6

144
Tree	! OBJECT_TYPE . isSubtype ( type . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( type . getNativeType ( typeRegistry ) )
Distance : 6

145
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( type ) )
Distance : 7

146
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . getNativeType ( typeRegistry ) )
Distance : 6

147
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 7

148
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 6

149
Tree	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! typeRegistry . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 6

150
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 6

151
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 7

152
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 6

153
Tree	! typeRegistry . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Code	! typeRegistry . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 6

154
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 7

155
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 6

156
Tree	! OBJECT_TYPE . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 6

157
Tree	! type . getNativeType ( type . isSubtype ( typeRegistry ) )
Code	! type . getNativeType ( type . isSubtype ( typeRegistry ) )
Distance : 7

158
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 6

159
Tree	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Code	! OBJECT_TYPE . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 6

160
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 7

161
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 8

162
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 6

163
Tree	! typeRegistry . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

164
Tree	! type . getNativeType ( type . getNativeType ( type ) )
Code	! type . getNativeType ( type . getNativeType ( type ) )
Distance : 6

165
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 7

166
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 8

167
Tree	! typeRegistry . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

168
Tree	! OBJECT_TYPE . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

169
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 6

170
Tree	! type . getNativeType ( OBJECT_TYPE . isSubtype ( type ) )
Code	! type . getNativeType ( OBJECT_TYPE . isSubtype ( type ) )
Distance : 7

171
Tree	! type . isSubtype ( type . restrictByNotNullOrUndefined ( type ) )
Code	! type . isSubtype ( type . restrictByNotNullOrUndefined ( type ) )
Distance : 6

172
Tree	! typeRegistry . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( type . getNativeType ( OBJECT_TYPE ) )
Distance : 6

173
Tree	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( type ) )
Code	! typeRegistry . isSubtype ( typeRegistry . isSubtype ( type ) )
Distance : 6

174
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Distance : 6

175
Tree	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 7

176
Tree	! typeRegistry . getNativeType ( type . getNativeType ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( type . getNativeType ( typeRegistry ) )
Distance : 7

177
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( type ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( type ) )
Distance : 6

178
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( type ) )
Distance : 6

179
Tree	! OBJECT_TYPE . getNativeType ( type . getNativeType ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( type . getNativeType ( typeRegistry ) )
Distance : 7

180
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 8

181
Tree	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! typeRegistry . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 7

182
Tree	! typeRegistry . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 6

183
Tree	! typeRegistry . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

184
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 8

185
Tree	! typeRegistry . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 6

186
Tree	! type . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Code	! type . isSubtype ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 5

187
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 7

188
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 7

189
Tree	! OBJECT_TYPE . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 6

190
Tree	! OBJECT_TYPE . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

191
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . isSubtype ( OBJECT_TYPE ) )
Distance : 6

192
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

193
Tree	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Code	! OBJECT_TYPE . getNativeType ( OBJECT_TYPE . getNativeType ( type ) )
Distance : 7

194
Tree	! type . isSubtype ( type . isSubtype ( type ) )
Code	! type . isSubtype ( type . isSubtype ( type ) )
Distance : 6

195
Tree	! typeRegistry . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

196
Tree	! type . restrictByNotNullOrUndefined ( type . isSubtype ( type ) )
Code	! type . restrictByNotNullOrUndefined ( type . isSubtype ( type ) )
Distance : 6

197
Tree	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( type ) )
Code	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( type ) )
Distance : 6

198
Tree	! typeRegistry . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 7

199
Tree	! OBJECT_TYPE . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return true ; invocations
Code	return true ; invocations
Distance : 2

1
Tree	return true ; Class
Code	return true ; Class
Distance : 2

2
Tree	return true ; {}
Code	return true ; {}
Distance : 2

3
Tree	return true ; mock
Code	return true ; mock
Distance : 2

4
Tree	return true ; f
Code	return true ; f
Distance : 2

5
Tree	return true ; ParamChecks
Code	return true ; ParamChecks
Distance : 2

6
Tree	return true ; -
Code	return true ; -
Distance : 2

7
Tree	return true ; Preconditions
Code	return true ; Preconditions
Distance : 2

8
Tree	return true ; T
Code	return true ; T
Distance : 2

9
Tree	return true ; &&
Code	return true ; &&
Distance : 2

10
Tree	return true ; ]
Code	return true ; ]
Distance : 2

11
Tree	return true ; [
Code	return true ; [
Distance : 2

12
Tree	return true ; Object
Code	return true ; Object
Distance : 2

13
Tree	return true ; class
Code	return true ; class
Distance : 2

14
Tree	return true ; test
Code	return true ; test
Distance : 2

15
Tree	return true ; @
Code	return true ; @
Distance : 2

16
Tree	return true ; !
Code	return true ; !
Distance : 2

17
Tree	return true ; assertEquals
Code	return true ; assertEquals
Distance : 2

18
Tree	return true ; ==
Code	return true ; ==
Distance : 2

19
Tree	return true ; void
Code	return true ; void
Distance : 2

20
Tree	return true ; []
Code	return true ; []
Distance : 2

21
Tree	return true ; checkState
Code	return true ; checkState
Distance : 2

22
Tree	return true ; Test
Code	return true ; Test
Distance : 2

23
Tree	return true ; out
Code	return true ; out
Distance : 2

24
Tree	return true ; nullNotPermitted
Code	return true ; nullNotPermitted
Distance : 2

25
Tree	return true ; n
Code	return true ; n
Distance : 2

26
Tree	return true ; !=
Code	return true ; !=
Distance : 2

27
Tree	return true ; i
Code	return true ; i
Distance : 2

28
Tree	return true ; MathRuntimeException
Code	return true ; MathRuntimeException
Distance : 2

29
Tree	return true ; Override
Code	return true ; Override
Distance : 2

30
Tree	return true ; public
Code	return true ; public
Distance : 2

31
Tree	return true ; >
Code	return true ; >
Distance : 2

32
Tree	return true ; new
Code	return true ; new
Distance : 2

33
Tree	return true ; STRING_CONSTANT
Code	return true ; STRING_CONSTANT
Distance : 2

34
Tree	return true ; ,
Code	return true ; ,
Distance : 2

35
Tree	return true ; .
Code	return true ; .
Distance : 2

36
Tree	return true ; }
Code	return true ; }
Distance : 2

37
Tree	return true ; =
Code	return true ; =
Distance : 2

38
Tree	return true ; (
Code	return true ; (
Distance : 2

39
Tree	return true ; <s>
Code	return true ; <s>
Distance : 2

40
Tree	return true ; <blank>
Code	return true ; <blank>
Distance : 2

41
Tree	return true ; return
Code	return true ; return
Distance : 2

42
Tree	return true ; )
Code	return true ; )
Distance : 2

43
Tree	return true ; ;
Code	return true ; ;
Distance : 2

44
Tree	return true ; ()
Code	return true ; ()
Distance : 2

45
Tree	return true ; {
Code	return true ; {
Distance : 2

46
Tree	return true ; false
Code	return true ; false
Distance : 2

47
Tree	return true ; int
Code	return true ; int
Distance : 2

48
Tree	return true ; double
Code	return true ; double
Distance : 2

49
Tree	return true ; e
Code	return true ; e
Distance : 2

50
Tree	return true ; else
Code	return true ; else
Distance : 2

51
Tree	return true ; NUMBER_CONSTANT
Code	return true ; NUMBER_CONSTANT
Distance : 2

52
Tree	return true ; this
Code	return true ; this
Distance : 2

53
Tree	return true ; final
Code	return true ; final
Distance : 2

54
Tree	return true ; name
Code	return true ; name
Distance : 2

55
Tree	return true ; t
Code	return true ; t
Distance : 2

56
Tree	return true ; Collection
Code	return true ; Collection
Distance : 2

57
Tree	return true ; getField
Code	return true ; getField
Distance : 2

58
Tree	return true ; dataset
Code	return true ; dataset
Distance : 2

59
Tree	return true ; protected
Code	return true ; protected
Distance : 2

60
Tree	return true ; PlotChangeEvent
Code	return true ; PlotChangeEvent
Distance : 2

61
Tree	return true ; mode
Code	return true ; mode
Distance : 2

62
Tree	return true ; mockingProgress
Code	return true ; mockingProgress
Distance : 2

63
Tree	return true ; return;
Code	return true ; return;
Distance : 2

64
Tree	return true ; isEmpty
Code	return true ; isEmpty
Distance : 2

65
Tree	return true ; char
Code	return true ; char
Distance : 2

66
Tree	return true ; static
Code	return true ; static
Distance : 2

67
Tree	return true ; setAcceptedLanguage
Code	return true ; setAcceptedLanguage
Distance : 2

68
Tree	return true ; JSType
Code	return true ; JSType
Distance : 2

69
Tree	return true ; get
Code	return true ; get
Distance : 2

70
Tree	return true ; getMessage
Code	return true ; getMessage
Distance : 2

71
Tree	return true ; true
Code	return true ; true
Distance : 2

72
Tree	return true ; return
Code	return true ; return
Distance : 2

73
Tree	return true ; if
Code	return true ; if
Distance : 2

74
Tree	return true ; stream
Code	return true ; stream
Distance : 2

75
Tree	return true ; <
Code	return true ; <
Distance : 2

76
Tree	return true ; solver
Code	return true ; solver
Distance : 2

77
Tree	return true ; pattern
Code	return true ; pattern
Distance : 2

78
Tree	return true ; js
Code	return true ; js
Distance : 2

79
Tree	return true ; TestUtilities
Code	return true ; TestUtilities
Distance : 2

80
Tree	return true ; equals
Code	return true ; equals
Distance : 2

81
Tree	return true ; d
Code	return true ; d
Distance : 2

82
Tree	return true ; externs
Code	return true ; externs
Distance : 2

83
Tree	return true ; assertTrue
Code	return true ; assertTrue
Distance : 2

84
Tree	return true ; for
Code	return true ; for
Distance : 2

85
Tree	return true ; Invocation
Code	return true ; Invocation
Distance : 2

86
Tree	return true ; getParent
Code	return true ; getParent
Distance : 2

87
Tree	return true ; setUp
Code	return true ; setUp
Distance : 2

88
Tree	return true ; StrBuilder
Code	return true ; StrBuilder
Distance : 2

89
Tree	return true ; reportMatcher
Code	return true ; reportMatcher
Distance : 2

90
Tree	return true ; index
Code	return true ; index
Distance : 2

91
Tree	return true ; node
Code	return true ; node
Distance : 2

92
Tree	return true ; matcher
Code	return true ; matcher
Distance : 2

93
Tree	return true ; abs
Code	return true ; abs
Distance : 2

94
Tree	return true ; Double
Code	return true ; Double
Distance : 2

95
Tree	return true ; PeriodType
Code	return true ; PeriodType
Distance : 2

96
Tree	return true ; instant
Code	return true ; instant
Distance : 2

97
Tree	return true ; values
Code	return true ; values
Distance : 2

98
Tree	return true ; isNormalBlock
Code	return true ; isNormalBlock
Distance : 2

99
Tree	return true ;
Code	return true ;
Distance : 1

100
Tree	return true ; contains
Code	return true ; contains
Distance : 2

101
Tree	return true ; <=
Code	return true ; <=
Distance : 2

102
Tree	return true ; a
Code	return true ; a
Distance : 2

103
Tree	return true ; LanguageMode.ECMASCRIPT_2015
Code	return true ; LanguageMode.ECMASCRIPT_2015
Distance : 2

104
Tree	return true ; size
Code	return true ; size
Distance : 2

105
Tree	return true ; StringBuilder
Code	return true ; StringBuilder
Distance : 2

106
Tree	return true ; b
Code	return true ; b
Distance : 2

107
Tree	return true ; MutableTimePeriod
Code	return true ; MutableTimePeriod
Distance : 2

108
Tree	return true ; stroke
Code	return true ; stroke
Distance : 2

109
Tree	return true ; traverseEs6
Code	return true ; traverseEs6
Distance : 2

110
Tree	return true ; UnivariateFunction
Code	return true ; UnivariateFunction
Distance : 2

111
Tree	return true ; sb
Code	return true ; sb
Distance : 2

112
Tree	return true ; throws
Code	return true ; throws
Distance : 2

113
Tree	return true ; scope
Code	return true ; scope
Distance : 2

114
Tree	return true ; sqrt
Code	return true ; sqrt
Distance : 2

115
Tree	return true ; clone
Code	return true ; clone
Distance : 2

116
Tree	return true ; returnZero
Code	return true ; returnZero
Distance : 2

117
Tree	return true ; getFirstChild
Code	return true ; getFirstChild
Distance : 2

118
Tree	return true ; simpleMethod
Code	return true ; simpleMethod
Distance : 2

119
Tree	return true ; getArgumentMatcherStorage
Code	return true ; getArgumentMatcherStorage
Distance : 2

120
Tree	return true ; append
Code	return true ; append
Distance : 2

121
Tree	return true ; optimizer
Code	return true ; optimizer
Distance : 2

122
Tree	return true ; obj
Code	return true ; obj
Distance : 2

123
Tree	return true ; chrono
Code	return true ; chrono
Distance : 2

124
Tree	return true ; isBlock
Code	return true ; isBlock
Distance : 2

125
Tree	return true ; <>
Code	return true ; <>
Distance : 2

126
Tree	return true ; Integer
Code	return true ; Integer
Distance : 2

127
Tree	return true ; v
Code	return true ; v
Distance : 2

128
Tree	return true ; reportCodeChange
Code	return true ; reportCodeChange
Distance : 2

129
Tree	return true ; IllegalArgumentException
Code	return true ; IllegalArgumentException
Distance : 2

130
Tree	return true ; invocation
Code	return true ; invocation
Distance : 2

131
Tree	return true ; assertThat
Code	return true ; assertThat
Distance : 2

132
Tree	return true ; FastMath
Code	return true ; FastMath
Distance : 2

133
Tree	return true ; expected
Code	return true ; expected
Distance : 2

134
Tree	return true ; createIllegalArgumentException
Code	return true ; createIllegalArgumentException
Distance : 2

135
Tree	return true ; parent
Code	return true ; parent
Distance : 2

136
Tree	return true ; fireChangeEvent
Code	return true ; fireChangeEvent
Distance : 2

137
Tree	return true ; ArrayList
Code	return true ; ArrayList
Distance : 2

138
Tree	return true ; testSame
Code	return true ; testSame
Distance : 2

139
Tree	return true ; x
Code	return true ; x
Distance : 2

140
Tree	return true ; LINE_JOINER
Code	return true ; LINE_JOINER
Distance : 2

141
Tree	return true ; str
Code	return true ; str
Distance : 2

142
Tree	return true ; try
Code	return true ; try
Distance : 2

143
Tree	return true ; result
Code	return true ; result
Distance : 2

144
Tree	return true ; fail
Code	return true ; fail
Distance : 2

145
Tree	return true ; :
Code	return true ; :
Distance : 2

146
Tree	return true ; valueOf
Code	return true ; valueOf
Distance : 2

147
Tree	return true ; y
Code	return true ; y
Distance : 2

148
Tree	return false ;
Code	return false ;
Distance : 0

149
Tree	return true ; array
Code	return true ; array
Distance : 2

150
Tree	return true ; ?
Code	return true ; ?
Distance : 2

151
Tree	return true ; boolean
Code	return true ; boolean
Distance : 2

152
Tree	return true ; m
Code	return true ; m
Distance : 2

153
Tree	return true ; paint
Code	return true ; paint
Distance : 2

154
Tree	return true ; type
Code	return true ; type
Distance : 2

155
Tree	return true ; *
Code	return true ; *
Distance : 2

156
Tree	return true ; getInstance
Code	return true ; getInstance
Distance : 2

157
Tree	return true ; serialised
Code	return true ; serialised
Distance : 2

158
Tree	return true ; Fraction
Code	return true ; Fraction
Distance : 2

159
Tree	return true ; checkNotNull
Code	return true ; checkNotNull
Distance : 2

160
Tree	return true ; source
Code	return true ; source
Distance : 2

161
Tree	return true ; toString
Code	return true ; toString
Distance : 2

162
Tree	return true ; Math
Code	return true ; Math
Distance : 2

163
Tree	return true ; root
Code	return true ; root
Distance : 2

164
Tree	return true ; options
Code	return true ; options
Distance : 2

165
Tree	return true ; p
Code	return true ; p
Distance : 2

166
Tree	return true ; data
Code	return true ; data
Distance : 2

167
Tree	return true ; add
Code	return true ; add
Distance : 2

168
Tree	return true ; field
Code	return true ; field
Distance : 2

169
Tree	return true ; checkArgument
Code	return true ; checkArgument
Distance : 2

170
Tree	return true ; ex
Code	return true ; ex
Distance : 2

171
Tree	return true ; NodeUtil
Code	return true ; NodeUtil
Distance : 2

172
Tree	return true ; join
Code	return true ; join
Distance : 2

173
Tree	return true ; Args
Code	return true ; Args
Distance : 2

174
Tree	return true ; NodeTraversal
Code	return true ; NodeTraversal
Distance : 2

175
Tree	return true ; List
Code	return true ; List
Distance : 2

176
Tree	return true ; Exception
Code	return true ; Exception
Distance : 2

177
Tree	return true ; Node
Code	return true ; Node
Distance : 2

178
Tree	return true ; c
Code	return true ; c
Distance : 2

179
Tree	return true ; notifyListeners
Code	return true ; notifyListeners
Distance : 2

180
Tree	return true ; lines
Code	return true ; lines
Distance : 2

181
Tree	return true ; verify
Code	return true ; verify
Distance : 2

182
Tree	return true ; compiler
Code	return true ; compiler
Distance : 2

183
Tree	return true ; String
Code	return true ; String
Distance : 2

184
Tree	return true ; null
Code	return true ; null
Distance : 2

185
Tree	return true ; wanted
Code	return true ; wanted
Distance : 2

186
Tree	return true ; +
Code	return true ; +
Distance : 2

187
Tree	return true ; throw
Code	return true ; throw
Distance : 2

188
Tree	return true ; super
Code	return true ; super
Distance : 2

189
Tree	return true ; value
Code	return true ; value
Distance : 2

190
Tree	return true ; long
Code	return true ; long
Distance : 2

191
Tree	return true ; /
Code	return true ; /
Distance : 2

192
Tree	return true ; length
Code	return true ; length
Distance : 2

193
Tree	return true ; TestUtils
Code	return true ; TestUtils
Distance : 2

194
Tree	return true ; alpha
Code	return true ; alpha
Distance : 2

195
Tree	return true ; instance
Code	return true ; instance
Distance : 2

196
Tree	return true ; Assert
Code	return true ; Assert
Distance : 2

197
Tree	return true ; catch
Code	return true ; catch
Distance : 2

198
Tree	return true ; LanguageMode.ECMASCRIPT6
Code	return true ; LanguageMode.ECMASCRIPT6
Distance : 2

199
Tree	return true ; s
Code	return true ; s
Distance : 2

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	return TernaryValue.UNKNOWN ; invocations
Code	return TernaryValue.UNKNOWN ; invocations
Distance : 1

1
Tree	return TernaryValue.UNKNOWN ; Class
Code	return TernaryValue.UNKNOWN ; Class
Distance : 1

2
Tree	return TernaryValue.UNKNOWN ; {}
Code	return TernaryValue.UNKNOWN ; {}
Distance : 1

3
Tree	return TernaryValue.UNKNOWN ; mock
Code	return TernaryValue.UNKNOWN ; mock
Distance : 1

4
Tree	return TernaryValue.UNKNOWN ; f
Code	return TernaryValue.UNKNOWN ; f
Distance : 1

5
Tree	return TernaryValue.UNKNOWN ; ParamChecks
Code	return TernaryValue.UNKNOWN ; ParamChecks
Distance : 1

6
Tree	return TernaryValue.UNKNOWN ; -
Code	return TernaryValue.UNKNOWN ; -
Distance : 1

7
Tree	return TernaryValue.UNKNOWN ; Preconditions
Code	return TernaryValue.UNKNOWN ; Preconditions
Distance : 1

8
Tree	return TernaryValue.UNKNOWN ; T
Code	return TernaryValue.UNKNOWN ; T
Distance : 1

9
Tree	return TernaryValue.UNKNOWN ; &&
Code	return TernaryValue.UNKNOWN ; &&
Distance : 1

10
Tree	return TernaryValue.UNKNOWN ; ]
Code	return TernaryValue.UNKNOWN ; ]
Distance : 1

11
Tree	return TernaryValue.UNKNOWN ; [
Code	return TernaryValue.UNKNOWN ; [
Distance : 1

12
Tree	return TernaryValue.UNKNOWN ; Object
Code	return TernaryValue.UNKNOWN ; Object
Distance : 1

13
Tree	return TernaryValue.UNKNOWN ; class
Code	return TernaryValue.UNKNOWN ; class
Distance : 1

14
Tree	return TernaryValue.UNKNOWN ; test
Code	return TernaryValue.UNKNOWN ; test
Distance : 1

15
Tree	return TernaryValue.UNKNOWN ; @
Code	return TernaryValue.UNKNOWN ; @
Distance : 1

16
Tree	return TernaryValue.UNKNOWN ; !
Code	return TernaryValue.UNKNOWN ; !
Distance : 1

17
Tree	return TernaryValue.UNKNOWN ; assertEquals
Code	return TernaryValue.UNKNOWN ; assertEquals
Distance : 1

18
Tree	return TernaryValue.UNKNOWN ; ==
Code	return TernaryValue.UNKNOWN ; ==
Distance : 1

19
Tree	return TernaryValue.UNKNOWN ; void
Code	return TernaryValue.UNKNOWN ; void
Distance : 1

20
Tree	return TernaryValue.UNKNOWN ; []
Code	return TernaryValue.UNKNOWN ; []
Distance : 1

21
Tree	return TernaryValue.UNKNOWN ; checkState
Code	return TernaryValue.UNKNOWN ; checkState
Distance : 1

22
Tree	return TernaryValue.UNKNOWN ; Test
Code	return TernaryValue.UNKNOWN ; Test
Distance : 1

23
Tree	return TernaryValue.UNKNOWN ; out
Code	return TernaryValue.UNKNOWN ; out
Distance : 1

24
Tree	return TernaryValue.UNKNOWN ; nullNotPermitted
Code	return TernaryValue.UNKNOWN ; nullNotPermitted
Distance : 1

25
Tree	return TernaryValue.UNKNOWN ; n
Code	return TernaryValue.UNKNOWN ; n
Distance : 1

26
Tree	return TernaryValue.UNKNOWN ; !=
Code	return TernaryValue.UNKNOWN ; !=
Distance : 1

27
Tree	return TernaryValue.UNKNOWN ; i
Code	return TernaryValue.UNKNOWN ; i
Distance : 1

28
Tree	return TernaryValue.UNKNOWN ; MathRuntimeException
Code	return TernaryValue.UNKNOWN ; MathRuntimeException
Distance : 1

29
Tree	return TernaryValue.UNKNOWN ; Override
Code	return TernaryValue.UNKNOWN ; Override
Distance : 1

30
Tree	return TernaryValue.UNKNOWN ; public
Code	return TernaryValue.UNKNOWN ; public
Distance : 1

31
Tree	return TernaryValue.UNKNOWN ; >
Code	return TernaryValue.UNKNOWN ; >
Distance : 1

32
Tree	return TernaryValue.UNKNOWN ; new
Code	return TernaryValue.UNKNOWN ; new
Distance : 1

33
Tree	return TernaryValue.UNKNOWN ; STRING_CONSTANT
Code	return TernaryValue.UNKNOWN ; STRING_CONSTANT
Distance : 1

34
Tree	return TernaryValue.UNKNOWN ; ,
Code	return TernaryValue.UNKNOWN ; ,
Distance : 1

35
Tree	return TernaryValue.UNKNOWN ; .
Code	return TernaryValue.UNKNOWN ; .
Distance : 1

36
Tree	return TernaryValue.UNKNOWN ; }
Code	return TernaryValue.UNKNOWN ; }
Distance : 1

37
Tree	return TernaryValue.UNKNOWN ; =
Code	return TernaryValue.UNKNOWN ; =
Distance : 1

38
Tree	return TernaryValue.UNKNOWN ; (
Code	return TernaryValue.UNKNOWN ; (
Distance : 1

39
Tree	return TernaryValue.UNKNOWN ; <s>
Code	return TernaryValue.UNKNOWN ; <s>
Distance : 1

40
Tree	return TernaryValue.UNKNOWN ; <blank>
Code	return TernaryValue.UNKNOWN ; <blank>
Distance : 1

41
Tree	return TernaryValue.UNKNOWN ; return
Code	return TernaryValue.UNKNOWN ; return
Distance : 1

42
Tree	return TernaryValue.UNKNOWN ; )
Code	return TernaryValue.UNKNOWN ; )
Distance : 1

43
Tree	return TernaryValue.UNKNOWN ; ;
Code	return TernaryValue.UNKNOWN ; ;
Distance : 1

44
Tree	return TernaryValue.UNKNOWN ; ()
Code	return TernaryValue.UNKNOWN ; ()
Distance : 1

45
Tree	return TernaryValue.UNKNOWN ; {
Code	return TernaryValue.UNKNOWN ; {
Distance : 1

46
Tree	return TernaryValue.UNKNOWN ; false
Code	return TernaryValue.UNKNOWN ; false
Distance : 1

47
Tree	return TernaryValue.UNKNOWN ; int
Code	return TernaryValue.UNKNOWN ; int
Distance : 1

48
Tree	return TernaryValue.UNKNOWN ; double
Code	return TernaryValue.UNKNOWN ; double
Distance : 1

49
Tree	return TernaryValue.UNKNOWN ; e
Code	return TernaryValue.UNKNOWN ; e
Distance : 1

50
Tree	return TernaryValue.UNKNOWN ; else
Code	return TernaryValue.UNKNOWN ; else
Distance : 1

51
Tree	return TernaryValue.UNKNOWN ; NUMBER_CONSTANT
Code	return TernaryValue.UNKNOWN ; NUMBER_CONSTANT
Distance : 1

52
Tree	return TernaryValue.UNKNOWN ; this
Code	return TernaryValue.UNKNOWN ; this
Distance : 1

53
Tree	return TernaryValue.UNKNOWN ; final
Code	return TernaryValue.UNKNOWN ; final
Distance : 1

54
Tree	return TernaryValue.UNKNOWN ; name
Code	return TernaryValue.UNKNOWN ; name
Distance : 1

55
Tree	return TernaryValue.UNKNOWN ; t
Code	return TernaryValue.UNKNOWN ; t
Distance : 1

56
Tree	return TernaryValue.UNKNOWN ; Collection
Code	return TernaryValue.UNKNOWN ; Collection
Distance : 1

57
Tree	return TernaryValue.UNKNOWN ; getField
Code	return TernaryValue.UNKNOWN ; getField
Distance : 1

58
Tree	return TernaryValue.UNKNOWN ; dataset
Code	return TernaryValue.UNKNOWN ; dataset
Distance : 1

59
Tree	return TernaryValue.UNKNOWN ; protected
Code	return TernaryValue.UNKNOWN ; protected
Distance : 1

60
Tree	return TernaryValue.UNKNOWN ; PlotChangeEvent
Code	return TernaryValue.UNKNOWN ; PlotChangeEvent
Distance : 1

61
Tree	return TernaryValue.UNKNOWN ; mode
Code	return TernaryValue.UNKNOWN ; mode
Distance : 1

62
Tree	return TernaryValue.UNKNOWN ; mockingProgress
Code	return TernaryValue.UNKNOWN ; mockingProgress
Distance : 1

63
Tree	return TernaryValue.UNKNOWN ; return;
Code	return TernaryValue.UNKNOWN ; return;
Distance : 1

64
Tree	return TernaryValue.UNKNOWN ; isEmpty
Code	return TernaryValue.UNKNOWN ; isEmpty
Distance : 1

65
Tree	return TernaryValue.UNKNOWN ; char
Code	return TernaryValue.UNKNOWN ; char
Distance : 1

66
Tree	return TernaryValue.UNKNOWN ; static
Code	return TernaryValue.UNKNOWN ; static
Distance : 1

67
Tree	return TernaryValue.UNKNOWN ; setAcceptedLanguage
Code	return TernaryValue.UNKNOWN ; setAcceptedLanguage
Distance : 1

68
Tree	return TernaryValue.UNKNOWN ; JSType
Code	return TernaryValue.UNKNOWN ; JSType
Distance : 1

69
Tree	return TernaryValue.UNKNOWN ; get
Code	return TernaryValue.UNKNOWN ; get
Distance : 1

70
Tree	return TernaryValue.UNKNOWN ; getMessage
Code	return TernaryValue.UNKNOWN ; getMessage
Distance : 1

71
Tree	return TernaryValue.UNKNOWN ; true
Code	return TernaryValue.UNKNOWN ; true
Distance : 1

72
Tree	return TernaryValue.UNKNOWN ; return
Code	return TernaryValue.UNKNOWN ; return
Distance : 1

73
Tree	return TernaryValue.UNKNOWN ; if
Code	return TernaryValue.UNKNOWN ; if
Distance : 1

74
Tree	return TernaryValue.UNKNOWN ; stream
Code	return TernaryValue.UNKNOWN ; stream
Distance : 1

75
Tree	return TernaryValue.UNKNOWN ; <
Code	return TernaryValue.UNKNOWN ; <
Distance : 1

76
Tree	return TernaryValue.UNKNOWN ; solver
Code	return TernaryValue.UNKNOWN ; solver
Distance : 1

77
Tree	return TernaryValue.UNKNOWN ; pattern
Code	return TernaryValue.UNKNOWN ; pattern
Distance : 1

78
Tree	return TernaryValue.UNKNOWN ; js
Code	return TernaryValue.UNKNOWN ; js
Distance : 1

79
Tree	return TernaryValue.UNKNOWN ; TestUtilities
Code	return TernaryValue.UNKNOWN ; TestUtilities
Distance : 1

80
Tree	return TernaryValue.UNKNOWN ; equals
Code	return TernaryValue.UNKNOWN ; equals
Distance : 1

81
Tree	return TernaryValue.UNKNOWN ; d
Code	return TernaryValue.UNKNOWN ; d
Distance : 1

82
Tree	return TernaryValue.UNKNOWN ; externs
Code	return TernaryValue.UNKNOWN ; externs
Distance : 1

83
Tree	return TernaryValue.UNKNOWN ; assertTrue
Code	return TernaryValue.UNKNOWN ; assertTrue
Distance : 1

84
Tree	return TernaryValue.UNKNOWN ; for
Code	return TernaryValue.UNKNOWN ; for
Distance : 1

85
Tree	return TernaryValue.UNKNOWN ; Invocation
Code	return TernaryValue.UNKNOWN ; Invocation
Distance : 1

86
Tree	return TernaryValue.UNKNOWN ; getParent
Code	return TernaryValue.UNKNOWN ; getParent
Distance : 1

87
Tree	return TernaryValue.UNKNOWN ; setUp
Code	return TernaryValue.UNKNOWN ; setUp
Distance : 1

88
Tree	return TernaryValue.UNKNOWN ; StrBuilder
Code	return TernaryValue.UNKNOWN ; StrBuilder
Distance : 1

89
Tree	return TernaryValue.UNKNOWN ; reportMatcher
Code	return TernaryValue.UNKNOWN ; reportMatcher
Distance : 1

90
Tree	return TernaryValue.UNKNOWN ; index
Code	return TernaryValue.UNKNOWN ; index
Distance : 1

91
Tree	return TernaryValue.UNKNOWN ; node
Code	return TernaryValue.UNKNOWN ; node
Distance : 1

92
Tree	return TernaryValue.UNKNOWN ; matcher
Code	return TernaryValue.UNKNOWN ; matcher
Distance : 1

93
Tree	return TernaryValue.UNKNOWN ; abs
Code	return TernaryValue.UNKNOWN ; abs
Distance : 1

94
Tree	return TernaryValue.UNKNOWN ; Double
Code	return TernaryValue.UNKNOWN ; Double
Distance : 1

95
Tree	return TernaryValue.UNKNOWN ; PeriodType
Code	return TernaryValue.UNKNOWN ; PeriodType
Distance : 1

96
Tree	return TernaryValue.UNKNOWN ; instant
Code	return TernaryValue.UNKNOWN ; instant
Distance : 1

97
Tree	return TernaryValue.UNKNOWN ; values
Code	return TernaryValue.UNKNOWN ; values
Distance : 1

98
Tree	return TernaryValue.UNKNOWN ; isNormalBlock
Code	return TernaryValue.UNKNOWN ; isNormalBlock
Distance : 1

99
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

100
Tree	return TernaryValue.UNKNOWN ; contains
Code	return TernaryValue.UNKNOWN ; contains
Distance : 1

101
Tree	return TernaryValue.UNKNOWN ; <=
Code	return TernaryValue.UNKNOWN ; <=
Distance : 1

102
Tree	return TernaryValue.UNKNOWN ; a
Code	return TernaryValue.UNKNOWN ; a
Distance : 1

103
Tree	return TernaryValue.UNKNOWN ; LanguageMode.ECMASCRIPT_2015
Code	return TernaryValue.UNKNOWN ; LanguageMode.ECMASCRIPT_2015
Distance : 1

104
Tree	return TernaryValue.UNKNOWN ; size
Code	return TernaryValue.UNKNOWN ; size
Distance : 1

105
Tree	return TernaryValue.UNKNOWN ; StringBuilder
Code	return TernaryValue.UNKNOWN ; StringBuilder
Distance : 1

106
Tree	return TernaryValue.UNKNOWN ; b
Code	return TernaryValue.UNKNOWN ; b
Distance : 1

107
Tree	return TernaryValue.UNKNOWN ; MutableTimePeriod
Code	return TernaryValue.UNKNOWN ; MutableTimePeriod
Distance : 1

108
Tree	return TernaryValue.UNKNOWN ; stroke
Code	return TernaryValue.UNKNOWN ; stroke
Distance : 1

109
Tree	return TernaryValue.UNKNOWN ; traverseEs6
Code	return TernaryValue.UNKNOWN ; traverseEs6
Distance : 1

110
Tree	return TernaryValue.UNKNOWN ; UnivariateFunction
Code	return TernaryValue.UNKNOWN ; UnivariateFunction
Distance : 1

111
Tree	return TernaryValue.UNKNOWN ; sb
Code	return TernaryValue.UNKNOWN ; sb
Distance : 1

112
Tree	return TernaryValue.UNKNOWN ; throws
Code	return TernaryValue.UNKNOWN ; throws
Distance : 1

113
Tree	return TernaryValue.UNKNOWN ; scope
Code	return TernaryValue.UNKNOWN ; scope
Distance : 1

114
Tree	return TernaryValue.UNKNOWN ; sqrt
Code	return TernaryValue.UNKNOWN ; sqrt
Distance : 1

115
Tree	return TernaryValue.UNKNOWN ; clone
Code	return TernaryValue.UNKNOWN ; clone
Distance : 1

116
Tree	return TernaryValue.UNKNOWN ; returnZero
Code	return TernaryValue.UNKNOWN ; returnZero
Distance : 1

117
Tree	return TernaryValue.UNKNOWN ; getFirstChild
Code	return TernaryValue.UNKNOWN ; getFirstChild
Distance : 1

118
Tree	return TernaryValue.UNKNOWN ; simpleMethod
Code	return TernaryValue.UNKNOWN ; simpleMethod
Distance : 1

119
Tree	return TernaryValue.UNKNOWN ; getArgumentMatcherStorage
Code	return TernaryValue.UNKNOWN ; getArgumentMatcherStorage
Distance : 1

120
Tree	return TernaryValue.UNKNOWN ; append
Code	return TernaryValue.UNKNOWN ; append
Distance : 1

121
Tree	return TernaryValue.UNKNOWN ; optimizer
Code	return TernaryValue.UNKNOWN ; optimizer
Distance : 1

122
Tree	return TernaryValue.UNKNOWN ; obj
Code	return TernaryValue.UNKNOWN ; obj
Distance : 1

123
Tree	return TernaryValue.UNKNOWN ; chrono
Code	return TernaryValue.UNKNOWN ; chrono
Distance : 1

124
Tree	return TernaryValue.UNKNOWN ; isBlock
Code	return TernaryValue.UNKNOWN ; isBlock
Distance : 1

125
Tree	return TernaryValue.UNKNOWN ; <>
Code	return TernaryValue.UNKNOWN ; <>
Distance : 1

126
Tree	return TernaryValue.UNKNOWN ; Integer
Code	return TernaryValue.UNKNOWN ; Integer
Distance : 1

127
Tree	return TernaryValue.UNKNOWN ; v
Code	return TernaryValue.UNKNOWN ; v
Distance : 1

128
Tree	return TernaryValue.UNKNOWN ; reportCodeChange
Code	return TernaryValue.UNKNOWN ; reportCodeChange
Distance : 1

129
Tree	return TernaryValue.UNKNOWN ; IllegalArgumentException
Code	return TernaryValue.UNKNOWN ; IllegalArgumentException
Distance : 1

130
Tree	return TernaryValue.UNKNOWN ; invocation
Code	return TernaryValue.UNKNOWN ; invocation
Distance : 1

131
Tree	return TernaryValue.UNKNOWN ; assertThat
Code	return TernaryValue.UNKNOWN ; assertThat
Distance : 1

132
Tree	return TernaryValue.UNKNOWN ; FastMath
Code	return TernaryValue.UNKNOWN ; FastMath
Distance : 1

133
Tree	return TernaryValue.UNKNOWN ; expected
Code	return TernaryValue.UNKNOWN ; expected
Distance : 1

134
Tree	return TernaryValue.UNKNOWN ; createIllegalArgumentException
Code	return TernaryValue.UNKNOWN ; createIllegalArgumentException
Distance : 1

135
Tree	return TernaryValue.UNKNOWN ; parent
Code	return TernaryValue.UNKNOWN ; parent
Distance : 1

136
Tree	return TernaryValue.UNKNOWN ; fireChangeEvent
Code	return TernaryValue.UNKNOWN ; fireChangeEvent
Distance : 1

137
Tree	return TernaryValue.UNKNOWN ; ArrayList
Code	return TernaryValue.UNKNOWN ; ArrayList
Distance : 1

138
Tree	return TernaryValue.UNKNOWN ; testSame
Code	return TernaryValue.UNKNOWN ; testSame
Distance : 1

139
Tree	return TernaryValue.UNKNOWN ; x
Code	return TernaryValue.UNKNOWN ; x
Distance : 1

140
Tree	return TernaryValue.UNKNOWN ; LINE_JOINER
Code	return TernaryValue.UNKNOWN ; LINE_JOINER
Distance : 1

141
Tree	return TernaryValue.UNKNOWN ; str
Code	return TernaryValue.UNKNOWN ; str
Distance : 1

142
Tree	return TernaryValue.UNKNOWN ; try
Code	return TernaryValue.UNKNOWN ; try
Distance : 1

143
Tree	return TernaryValue.UNKNOWN ; result
Code	return TernaryValue.UNKNOWN ; result
Distance : 1

144
Tree	return TernaryValue.UNKNOWN ; fail
Code	return TernaryValue.UNKNOWN ; fail
Distance : 1

145
Tree	return TernaryValue.UNKNOWN ; :
Code	return TernaryValue.UNKNOWN ; :
Distance : 1

146
Tree	return TernaryValue.UNKNOWN ; valueOf
Code	return TernaryValue.UNKNOWN ; valueOf
Distance : 1

147
Tree	return TernaryValue.UNKNOWN ; y
Code	return TernaryValue.UNKNOWN ; y
Distance : 1

148
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

149
Tree	return TernaryValue.UNKNOWN ; array
Code	return TernaryValue.UNKNOWN ; array
Distance : 1

150
Tree	return TernaryValue.UNKNOWN ; ?
Code	return TernaryValue.UNKNOWN ; ?
Distance : 1

151
Tree	return TernaryValue.UNKNOWN ; boolean
Code	return TernaryValue.UNKNOWN ; boolean
Distance : 1

152
Tree	return TernaryValue.UNKNOWN ; m
Code	return TernaryValue.UNKNOWN ; m
Distance : 1

153
Tree	return TernaryValue.UNKNOWN ; paint
Code	return TernaryValue.UNKNOWN ; paint
Distance : 1

154
Tree	return TernaryValue.UNKNOWN ; type
Code	return TernaryValue.UNKNOWN ; type
Distance : 1

155
Tree	return TernaryValue.UNKNOWN ; *
Code	return TernaryValue.UNKNOWN ; *
Distance : 1

156
Tree	return TernaryValue.UNKNOWN ; getInstance
Code	return TernaryValue.UNKNOWN ; getInstance
Distance : 1

157
Tree	return TernaryValue.UNKNOWN ; serialised
Code	return TernaryValue.UNKNOWN ; serialised
Distance : 1

158
Tree	return TernaryValue.UNKNOWN ; Fraction
Code	return TernaryValue.UNKNOWN ; Fraction
Distance : 1

159
Tree	return TernaryValue.UNKNOWN ; checkNotNull
Code	return TernaryValue.UNKNOWN ; checkNotNull
Distance : 1

160
Tree	return TernaryValue.UNKNOWN ; source
Code	return TernaryValue.UNKNOWN ; source
Distance : 1

161
Tree	return TernaryValue.UNKNOWN ; toString
Code	return TernaryValue.UNKNOWN ; toString
Distance : 1

162
Tree	return TernaryValue.UNKNOWN ; Math
Code	return TernaryValue.UNKNOWN ; Math
Distance : 1

163
Tree	return TernaryValue.UNKNOWN ; root
Code	return TernaryValue.UNKNOWN ; root
Distance : 1

164
Tree	return TernaryValue.UNKNOWN ; options
Code	return TernaryValue.UNKNOWN ; options
Distance : 1

165
Tree	return TernaryValue.UNKNOWN ; p
Code	return TernaryValue.UNKNOWN ; p
Distance : 1

166
Tree	return TernaryValue.UNKNOWN ; data
Code	return TernaryValue.UNKNOWN ; data
Distance : 1

167
Tree	return TernaryValue.UNKNOWN ; add
Code	return TernaryValue.UNKNOWN ; add
Distance : 1

168
Tree	return TernaryValue.UNKNOWN ; field
Code	return TernaryValue.UNKNOWN ; field
Distance : 1

169
Tree	return TernaryValue.UNKNOWN ; checkArgument
Code	return TernaryValue.UNKNOWN ; checkArgument
Distance : 1

170
Tree	return TernaryValue.UNKNOWN ; ex
Code	return TernaryValue.UNKNOWN ; ex
Distance : 1

171
Tree	return TernaryValue.UNKNOWN ; NodeUtil
Code	return TernaryValue.UNKNOWN ; NodeUtil
Distance : 1

172
Tree	return TernaryValue.UNKNOWN ; join
Code	return TernaryValue.UNKNOWN ; join
Distance : 1

173
Tree	return TernaryValue.UNKNOWN ; Args
Code	return TernaryValue.UNKNOWN ; Args
Distance : 1

174
Tree	return TernaryValue.UNKNOWN ; NodeTraversal
Code	return TernaryValue.UNKNOWN ; NodeTraversal
Distance : 1

175
Tree	return TernaryValue.UNKNOWN ; List
Code	return TernaryValue.UNKNOWN ; List
Distance : 1

176
Tree	return TernaryValue.UNKNOWN ; Exception
Code	return TernaryValue.UNKNOWN ; Exception
Distance : 1

177
Tree	return TernaryValue.UNKNOWN ; Node
Code	return TernaryValue.UNKNOWN ; Node
Distance : 1

178
Tree	return TernaryValue.UNKNOWN ; c
Code	return TernaryValue.UNKNOWN ; c
Distance : 1

179
Tree	return TernaryValue.UNKNOWN ; notifyListeners
Code	return TernaryValue.UNKNOWN ; notifyListeners
Distance : 1

180
Tree	return TernaryValue.UNKNOWN ; lines
Code	return TernaryValue.UNKNOWN ; lines
Distance : 1

181
Tree	return TernaryValue.UNKNOWN ; verify
Code	return TernaryValue.UNKNOWN ; verify
Distance : 1

182
Tree	return TernaryValue.UNKNOWN ; compiler
Code	return TernaryValue.UNKNOWN ; compiler
Distance : 1

183
Tree	return TernaryValue.UNKNOWN ; String
Code	return TernaryValue.UNKNOWN ; String
Distance : 1

184
Tree	return TernaryValue.UNKNOWN ; null
Code	return TernaryValue.UNKNOWN ; null
Distance : 1

185
Tree	return TernaryValue.UNKNOWN ; wanted
Code	return TernaryValue.UNKNOWN ; wanted
Distance : 1

186
Tree	return TernaryValue.UNKNOWN ; +
Code	return TernaryValue.UNKNOWN ; +
Distance : 1

187
Tree	return TernaryValue.UNKNOWN ; throw
Code	return TernaryValue.UNKNOWN ; throw
Distance : 1

188
Tree	return TernaryValue.UNKNOWN ; super
Code	return TernaryValue.UNKNOWN ; super
Distance : 1

189
Tree	return TernaryValue.UNKNOWN ; value
Code	return TernaryValue.UNKNOWN ; value
Distance : 1

190
Tree	return TernaryValue.UNKNOWN ; long
Code	return TernaryValue.UNKNOWN ; long
Distance : 1

191
Tree	return TernaryValue.UNKNOWN ; /
Code	return TernaryValue.UNKNOWN ; /
Distance : 1

192
Tree	return TernaryValue.UNKNOWN ; length
Code	return TernaryValue.UNKNOWN ; length
Distance : 1

193
Tree	return TernaryValue.UNKNOWN ; TestUtils
Code	return TernaryValue.UNKNOWN ; TestUtils
Distance : 1

194
Tree	return TernaryValue.UNKNOWN ; alpha
Code	return TernaryValue.UNKNOWN ; alpha
Distance : 1

195
Tree	return TernaryValue.UNKNOWN ; instance
Code	return TernaryValue.UNKNOWN ; instance
Distance : 1

196
Tree	return TernaryValue.UNKNOWN ; Assert
Code	return TernaryValue.UNKNOWN ; Assert
Distance : 1

197
Tree	return TernaryValue.UNKNOWN ; catch
Code	return TernaryValue.UNKNOWN ; catch
Distance : 1

198
Tree	return TernaryValue.UNKNOWN ; LanguageMode.ECMASCRIPT6
Code	return TernaryValue.UNKNOWN ; LanguageMode.ECMASCRIPT6
Distance : 1

199
Tree	return TernaryValue.UNKNOWN ; s
Code	return TernaryValue.UNKNOWN ; s
Distance : 1

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 2

1
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

2
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

3
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 3

4
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 3

5
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 2

6
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 3

7
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 2

8
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

9
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

10
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 2

11
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

12
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

13
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 1

14
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

15
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

16
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

17
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

18
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

19
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

20
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

21
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

22
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 1

23
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

24
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 4

25
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 2

26
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

27
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 3

28
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

29
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 4

30
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

31
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

32
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

33
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

34
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 3

35
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

36
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

37
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

38
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

39
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 3

40
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

41
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

42
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 2

43
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 3

44
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

45
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

46
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

47
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

48
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 4

49
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

50
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

51
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

52
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

53
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

54
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 3

55
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

56
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 2

57
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

58
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 5

59
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

60
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 7

61
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 5

62
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

63
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

64
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

65
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

66
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

67
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 5

68
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 5

69
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

70
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

71
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 5

72
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

73
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

74
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

75
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

76
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

77
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

78
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 5

79
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

80
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

81
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

82
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 5

83
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 5

84
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 4

85
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

86
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

87
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

88
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 5

89
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

90
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

91
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

92
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 4

93
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

94
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

95
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 3

96
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

97
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

98
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 5

99
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

100
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 4

101
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

102
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 5

103
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 5

104
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

105
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

106
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

107
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

108
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

109
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

110
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

111
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 4

112
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

113
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

114
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

115
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

116
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 5

117
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

118
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

119
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 3

120
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

121
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 4

122
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

123
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

124
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

125
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

126
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 3

127
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 6

128
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 6

129
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

130
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 6

131
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

132
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

133
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 6

134
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 6

135
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 5

136
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

137
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

138
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 6

139
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 5

140
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 5

141
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

142
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

143
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 6

144
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 6

145
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

146
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

147
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 6

148
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

149
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 6

150
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

151
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 5

152
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 5

153
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

154
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

155
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

156
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 6

157
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 5

158
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

159
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

160
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

161
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 6

162
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

163
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

164
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

165
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 5

166
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 6

167
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

168
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

169
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

170
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 5

171
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

172
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

173
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 5

174
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

175
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

176
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

177
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 5

178
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

179
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

180
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 6

181
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { c . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

182
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

183
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 5

184
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 5

185
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

186
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 5

187
Tree	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

188
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( c , c ) ; }
Distance : 5

189
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

190
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 5

191
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

192
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , sb ) ; }
Distance : 4

193
Tree	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

194
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , c ) ; }
Distance : 5

195
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

196
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

197
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( sb ) ; } else { append ( sb , sb ) ; }
Distance : 6

198
Tree	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Code	if ( sb > NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , sb ) ; }
Distance : 5

199
Tree	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , sb ) ; }
Code	if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c . append ( sb ) ; } else { append ( c , sb ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

1
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

2
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

3
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

4
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 4

5
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

6
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

7
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

8
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 5

9
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

10
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

11
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

12
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

13
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 4

14
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

15
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

16
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

17
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 3

18
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

19
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 4

20
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 4

21
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

22
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

23
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

24
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

25
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 3

26
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

27
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

28
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

29
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

30
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

31
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 4

32
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 2

33
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 2

34
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 3

35
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

36
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

37
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 4

38
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 5

39
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 4

40
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

41
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

42
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

43
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 3

44
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Distance : 6

45
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

46
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Distance : 4

47
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Distance : 4

48
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

49
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

50
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

51
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

52
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 3

53
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

54
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

55
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Distance : 5

56
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

57
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 5

58
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

59
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 5

60
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . defineSlot () ; }
Distance : 4

61
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 1

62
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 2

63
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . defineSlot () ; }
Distance : 6

64
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

65
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 3

66
Tree	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

67
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 3

68
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 4

69
Tree	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

70
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 4

71
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 3

72
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

73
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

74
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 4

75
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 4

76
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Distance : 3

77
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 5

78
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 5

79
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

80
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

81
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Distance : 4

82
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Distance : 3

83
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

84
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 4

85
Tree	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

86
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Distance : 4

87
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 2

88
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 2

89
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

90
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

91
Tree	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

92
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

93
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

94
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 4

95
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getJSType () ; }
Distance : 5

96
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

97
Tree	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 4

98
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

99
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 4

100
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

101
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 1

102
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 2

103
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 5

104
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . defineSlot () ; }
Distance : 5

105
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . defineSlot () ; }
Distance : 5

106
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 2

107
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; functionNode = functionNode . getNext () ; }
Distance : 4

108
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 2

109
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Distance : 4

110
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 6

111
Tree	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

112
Tree	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

113
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 3

114
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Distance : 4

115
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 6

116
Tree	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

117
Tree	{ defineSlot ( functionNode , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

118
Tree	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

119
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 4

120
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 3

121
Tree	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

122
Tree	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

123
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . defineSlot () ; }
Distance : 5

124
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 4

125
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

126
Tree	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 5

127
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 2

128
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getJSType () ; }
Distance : 4

129
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Distance : 5

130
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; astParameter = functionNode . getNext () ; }
Distance : 3

131
Tree	{ getNext ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ getNext ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 5

132
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

133
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 4

134
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 2

135
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 3

136
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Distance : 6

137
Tree	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

138
Tree	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

139
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; functionNode = astParameter . getNext () ; }
Distance : 3

140
Tree	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 3

141
Tree	{ defineSlot ( functionNode , functionNode , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , functionNode , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

142
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

143
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 3

144
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

145
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 1

146
Tree	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

147
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

148
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

149
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 4

150
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

151
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 4

152
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 4

153
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

154
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 3

155
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

156
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Distance : 5

157
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 5

158
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 3

159
Tree	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , jsDocParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

160
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getJSType () ; }
Distance : 6

161
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 1

162
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 4

163
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 1

164
Tree	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

165
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

166
Tree	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 5

167
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . defineSlot () ; }
Distance : 4

168
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . defineSlot () ; }
Distance : 5

169
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 5

170
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 1

171
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getJSType () ; }
Distance : 6

172
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; functionNode = functionNode . getNext () ; }
Distance : 4

173
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 3

174
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 5

175
Tree	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , jsDocParameter , astParameter . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

176
Tree	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . defineSlot () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 4

177
Tree	{ defineSlot ( astParameter , astParameter , jsDocParameter . defineSlot () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , jsDocParameter . defineSlot () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

178
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . defineSlot () ; }
Distance : 6

179
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

180
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

181
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 3

182
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , false ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 3

183
Tree	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , astParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 5

184
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; astParameter = functionNode . getNext () ; }
Distance : 6

185
Tree	{ defineSlot ( functionNode , astParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , functionNode . getJSType () , true ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 5

186
Tree	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 2

187
Tree	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ getNext ( astParameter , astParameter , astParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 4

188
Tree	{ getNext ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ getNext ( astParameter , astParameter , jsDocParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

189
Tree	{ defineSlot ( astParameter , jsDocParameter , astParameter . defineSlot () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , astParameter . defineSlot () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

190
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 3

191
Tree	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , functionNode . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 2

192
Tree	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 3

193
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getNext () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 6

194
Tree	{ getNext ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ getNext ( astParameter , jsDocParameter , astParameter . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

195
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getNext () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 6

196
Tree	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . defineSlot () ; }
Code	{ defineSlot ( astParameter , astParameter , astParameter . getJSType () , false ) ; astParameter = jsDocParameter . defineSlot () ; }
Distance : 4

197
Tree	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter , astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getJSType () ; }
Distance : 6

198
Tree	{ defineSlot ( functionNode , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( functionNode , astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 5

199
Tree	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , jsDocParameter , jsDocParameter . getJSType () , true ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 3

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } protected
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } protected
Distance : 6

1
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Distance : 6

2
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Distance : 6

3
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } MathRuntimeException
Distance : 6

4
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } {}
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } {}
Distance : 6

5
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Override
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Override
Distance : 6

6
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } f
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } f
Distance : 6

7
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } [
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } [
Distance : 6

8
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } -
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } -
Distance : 6

9
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } &&
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } &&
Distance : 6

10
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Preconditions
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Preconditions
Distance : 6

11
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } true
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } true
Distance : 6

12
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ]
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ]
Distance : 6

13
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } mode
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } mode
Distance : 6

14
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ParamChecks
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ParamChecks
Distance : 6

15
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } false
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } false
Distance : 6

16
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } test
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } test
Distance : 6

17
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } assertEquals
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } assertEquals
Distance : 6

18
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } @
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } @
Distance : 6

19
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } []
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } []
Distance : 6

20
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ==
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ==
Distance : 6

21
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } !
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } !
Distance : 6

22
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } notifyListeners
Distance : 6

23
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } String
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } String
Distance : 6

24
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } nullNotPermitted
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } nullNotPermitted
Distance : 6

25
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } }
Distance : 6

26
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } int
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } int
Distance : 6

27
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } super
Distance : 6

28
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } !=
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } !=
Distance : 6

29
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } value
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } value
Distance : 6

30
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Object
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Object
Distance : 6

31
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } null
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } null
Distance : 6

32
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 6

33
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } =
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } =
Distance : 6

34
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } new
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } new
Distance : 6

35
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ()
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ()
Distance : 6

36
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ,
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ,
Distance : 6

37
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } {
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } {
Distance : 6

38
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } STRING_CONSTANT
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } STRING_CONSTANT
Distance : 6

39
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } )
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } )
Distance : 6

40
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <s>
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <s>
Distance : 6

41
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } return
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } return
Distance : 6

42
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <blank>
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <blank>
Distance : 6

43
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ;
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ;
Distance : 6

44
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } (
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } (
Distance : 6

45
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } .
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } .
Distance : 6

46
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkState
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkState
Distance : 6

47
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } i
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } i
Distance : 6

48
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } double
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } double
Distance : 6

49
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } public
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } public
Distance : 6

50
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } instant
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } instant
Distance : 6

51
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } this
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } this
Distance : 6

52
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } return
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } return
Distance : 6

53
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } final
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } final
Distance : 6

54
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <
Distance : 6

55
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } field
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } field
Distance : 6

56
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } PlotChangeEvent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } PlotChangeEvent
Distance : 6

57
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT6
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT6
Distance : 6

58
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Collection
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Collection
Distance : 6

59
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } solver
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } solver
Distance : 6

60
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } valueOf
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } valueOf
Distance : 6

61
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } dataset
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } dataset
Distance : 6

62
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } mock
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } mock
Distance : 6

63
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } size
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } size
Distance : 6

64
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } mockingProgress
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } mockingProgress
Distance : 6

65
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } char
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } char
Distance : 6

66
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } return;
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } return;
Distance : 6

67
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } JSType
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } JSType
Distance : 6

68
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } static
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } static
Distance : 6

69
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } get
Distance : 6

70
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } isEmpty
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } isEmpty
Distance : 6

71
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } else
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } else
Distance : 6

72
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } >
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } >
Distance : 6

73
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } if
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } if
Distance : 6

74
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getMessage
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getMessage
Distance : 6

75
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } stream
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } stream
Distance : 6

76
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } abs
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } abs
Distance : 6

77
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getChronology
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getChronology
Distance : 6

78
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } StrBuilder
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } StrBuilder
Distance : 6

79
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } js
Distance : 6

80
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } d
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } d
Distance : 6

81
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TestUtilities
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TestUtilities
Distance : 6

82
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } for
Distance : 6

83
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } externs
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } externs
Distance : 6

84
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Invocation
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Invocation
Distance : 6

85
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } equals
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } equals
Distance : 6

86
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } node
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } node
Distance : 6

87
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getParent
Distance : 6

88
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } reportMatcher
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } reportMatcher
Distance : 6

89
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setUp
Distance : 6

90
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } out
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } out
Distance : 6

91
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } index
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } index
Distance : 6

92
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } invocations
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } invocations
Distance : 6

93
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setAcceptedLanguage
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } setAcceptedLanguage
Distance : 6

94
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } clone
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } clone
Distance : 6

95
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Double
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Double
Distance : 6

96
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } matcher
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } matcher
Distance : 6

97
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } values
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } values
Distance : 6

98
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } s
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } s
Distance : 6

99
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 5

100
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } obj
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } obj
Distance : 6

101
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <=
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <=
Distance : 6

102
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } isNormalBlock
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } isNormalBlock
Distance : 6

103
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } MutableTimePeriod
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } MutableTimePeriod
Distance : 6

104
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } a
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } a
Distance : 6

105
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } StringBuilder
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } StringBuilder
Distance : 6

106
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT_2015
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 6

107
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } stroke
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } stroke
Distance : 6

108
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } b
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } b
Distance : 6

109
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } traverseEs6
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } traverseEs6
Distance : 6

110
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } chrono
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } chrono
Distance : 6

111
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } append
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } append
Distance : 6

112
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } UnivariateFunction
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } UnivariateFunction
Distance : 6

113
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } scope
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } scope
Distance : 6

114
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } sb
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } sb
Distance : 6

115
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } returnZero
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } returnZero
Distance : 6

116
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } sqrt
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } sqrt
Distance : 6

117
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getFirstChild
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getFirstChild
Distance : 6

118
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } throws
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } throws
Distance : 6

119
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } y
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } y
Distance : 6

120
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } simpleMethod
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } simpleMethod
Distance : 6

121
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } isBlock
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } isBlock
Distance : 6

122
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getArgumentMatcherStorage
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getArgumentMatcherStorage
Distance : 6

123
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } alpha
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } alpha
Distance : 6

124
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } optimizer
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } optimizer
Distance : 6

125
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } instance
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } instance
Distance : 6

126
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getField
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getField
Distance : 6

127
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } length
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } length
Distance : 6

128
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } name
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } name
Distance : 6

129
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 6

130
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Distance : 6

131
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } FastMath
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } FastMath
Distance : 6

132
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } invocation
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } invocation
Distance : 6

133
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } expected
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } expected
Distance : 6

134
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } reportCodeChange
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } reportCodeChange
Distance : 6

135
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } x
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } x
Distance : 6

136
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 6

137
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ArrayList
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ArrayList
Distance : 6

138
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } parent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } parent
Distance : 6

139
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LINE_JOINER
Distance : 6

140
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } testSame
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } testSame
Distance : 6

141
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } str
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } str
Distance : 6

142
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } assertThat
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } assertThat
Distance : 6

143
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } m
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } m
Distance : 6

144
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } try
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } try
Distance : 6

145
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 6

146
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } result
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } result
Distance : 6

147
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } List
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } List
Distance : 6

148
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } contains
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } contains
Distance : 6

149
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <>
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <>
Distance : 6

150
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fail
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fail
Distance : 6

151
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } join
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } join
Distance : 6

152
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } paint
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } paint
Distance : 6

153
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } boolean
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } boolean
Distance : 6

154
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getInstance
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getInstance
Distance : 6

155
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } type
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } type
Distance : 6

156
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } serialised
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } serialised
Distance : 6

157
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fireChangeEvent
Distance : 6

158
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ?
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ?
Distance : 6

159
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Test
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Test
Distance : 6

160
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } toString
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } toString
Distance : 6

161
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Class
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Class
Distance : 6

162
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } options
Distance : 6

163
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Math
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Math
Distance : 6

164
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } p
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } p
Distance : 6

165
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } source
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } source
Distance : 6

166
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NodeTraversal
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NodeTraversal
Distance : 6

167
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } data
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } data
Distance : 6

168
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkArgument
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkArgument
Distance : 6

169
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } add
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } add
Distance : 6

170
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NodeUtil
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } NodeUtil
Distance : 6

171
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } wanted
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } wanted
Distance : 6

172
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } *
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } *
Distance : 6

173
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ex
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ex
Distance : 6

174
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } root
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } root
Distance : 6

175
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Args
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Args
Distance : 6

176
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Integer
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Integer
Distance : 6

177
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Node
Distance : 6

178
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } v
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } v
Distance : 6

179
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } lines
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } lines
Distance : 6

180
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } c
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } c
Distance : 6

181
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } verify
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } verify
Distance : 6

182
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Exception
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Exception
Distance : 6

183
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } catch
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } catch
Distance : 6

184
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } n
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } n
Distance : 6

185
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } +
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } +
Distance : 6

186
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } pattern
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } pattern
Distance : 6

187
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } e
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } e
Distance : 6

188
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } compiler
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } compiler
Distance : 6

189
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } void
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } void
Distance : 6

190
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } T
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } T
Distance : 6

191
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } /
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } /
Distance : 6

192
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Fraction
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Fraction
Distance : 6

193
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TestUtils
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } TestUtils
Distance : 6

194
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } checkNotNull
Distance : 6

195
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } assertTrue
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } assertTrue
Distance : 6

196
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Assert
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Assert
Distance : 6

197
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } long
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } long
Distance : 6

198
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } throw
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } throw
Distance : 6

199
Tree	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } PeriodType
Code	if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } PeriodType
Distance : 6

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } TestUtils
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } TestUtils
Distance : 3

1
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } test
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } test
Distance : 3

2
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } testSame
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } testSame
Distance : 3

3
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <s>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <s>
Distance : 3

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } return
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } return
Distance : 3

5
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <blank>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <blank>
Distance : 3

6
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ;
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ;
Distance : 3

7
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } )
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } )
Distance : 3

8
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } .
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } .
Distance : 3

9
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ,
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ,
Distance : 3

10
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } (
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } (
Distance : 3

11
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } nullNotPermitted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } nullNotPermitted
Distance : 3

12
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } field
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } field
Distance : 3

13
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } !
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } !
Distance : 3

14
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } value
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } value
Distance : 3

15
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } checkState
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } checkState
Distance : 3

16
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } int
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } int
Distance : 3

17
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } i
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } i
Distance : 3

18
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } !=
Distance : 3

19
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } s
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } s
Distance : 3

20
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } isNormalBlock
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } isNormalBlock
Distance : 3

21
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } obj
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } obj
Distance : 3

22
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } x
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } x
Distance : 3

23
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <=
Distance : 3

24
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } parent
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } parent
Distance : 3

25
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } str
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } str
Distance : 3

26
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } getInstance
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } getInstance
Distance : 3

27
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } fireChangeEvent
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } fireChangeEvent
Distance : 3

28
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ArrayList
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ArrayList
Distance : 3

29
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } checkArgument
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } checkArgument
Distance : 3

30
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } length
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } length
Distance : 3

31
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } t
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } t
Distance : 3

32
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } name
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } name
Distance : 3

33
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } expected
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } expected
Distance : 3

34
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } FastMath
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } FastMath
Distance : 3

35
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } reportCodeChange
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } reportCodeChange
Distance : 3

36
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } IllegalArgumentException
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } IllegalArgumentException
Distance : 3

37
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } double
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } double
Distance : 3

38
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } false
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } false
Distance : 3

39
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } @
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } @
Distance : 3

40
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } join
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } join
Distance : 3

41
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } boolean
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } boolean
Distance : 3

42
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } *
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } *
Distance : 3

43
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } type
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } type
Distance : 3

44
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } invocation
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } invocation
Distance : 3

45
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } assertThat
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } assertThat
Distance : 3

46
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } LINE_JOINER
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } LINE_JOINER
Distance : 3

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } createIllegalArgumentException
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } createIllegalArgumentException
Distance : 3

48
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } serialised
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } serialised
Distance : 3

49
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } []
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } []
Distance : 3

50
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } clone
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } clone
Distance : 3

51
Tree	{ toSource () ; return toSource ( n , return; ) ; }
Code	{ toSource () ; return toSource ( n , return; ) ; }
Distance : 4

52
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Distance : 3

53
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , return; ) ; }
Distance : 3

54
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

55
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , return; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , return; ) ; }
Distance : 3

56
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

57
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

58
Tree	{ toSource () ; return toSource ( n , return; ) ; }
Code	{ toSource () ; return toSource ( n , return; ) ; }
Distance : 4

59
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Distance : 3

60
Tree	{ toSource () ; return toSource ( n , super(); ) ; }
Code	{ toSource () ; return toSource ( n , super(); ) ; }
Distance : 4

61
Tree	{ toSource () ; return toSource ( n , continue; ) ; }
Code	{ toSource () ; return toSource ( n , continue; ) ; }
Distance : 4

62
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , break; ) ; }
Distance : 3

63
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , continue; ) ; }
Distance : 3

64
Tree	{ toSource () ; return toSource ( n , break; ) ; }
Code	{ toSource () ; return toSource ( n , break; ) ; }
Distance : 4

65
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , default: ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , default: ) ; }
Distance : 3

66
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , continue; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , continue; ) ; }
Distance : 3

67
Tree	{ toSource () ; return toSource ( n , break; ) ; }
Code	{ toSource () ; return toSource ( n , break; ) ; }
Distance : 4

68
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , default: ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , default: ) ; }
Distance : 3

69
Tree	{ toSource () ; return toSource ( n , default: ) ; }
Code	{ toSource () ; return toSource ( n , default: ) ; }
Distance : 4

70
Tree	{ toSource () ; return toSource ( n , continue; ) ; }
Code	{ toSource () ; return toSource ( n , continue; ) ; }
Distance : 4

71
Tree	{ toSource () ; return toSource ( n , default: ) ; }
Code	{ toSource () ; return toSource ( n , default: ) ; }
Distance : 4

72
Tree	{ toSource () ; return toSource ( n , super(); ) ; }
Code	{ toSource () ; return toSource ( n , super(); ) ; }
Distance : 4

73
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } PeriodType
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } PeriodType
Distance : 3

74
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } array
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } array
Distance : 3

75
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ParamChecks
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ParamChecks
Distance : 3

76
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } sqrt
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } sqrt
Distance : 3

77
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } static
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } static
Distance : 3

78
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } setAcceptedLanguage
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } setAcceptedLanguage
Distance : 3

79
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } super
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } super
Distance : 3

80
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } T
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } T
Distance : 3

81
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Double
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Double
Distance : 3

82
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <>
Distance : 3

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } &&
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } &&
Distance : 3

84
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } assertEquals
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } assertEquals
Distance : 3

85
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } reportMatcher
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } reportMatcher
Distance : 3

86
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } TestUtilities
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } TestUtilities
Distance : 3

87
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } js
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } js
Distance : 3

88
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Invocation
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Invocation
Distance : 3

89
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } for
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } for
Distance : 3

90
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } equals
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } equals
Distance : 3

91
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } StrBuilder
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } StrBuilder
Distance : 3

92
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } class
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } class
Distance : 3

93
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Object
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Object
Distance : 3

94
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } MathRuntimeException
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } MathRuntimeException
Distance : 3

95
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Override
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Override
Distance : 3

96
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } f
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } f
Distance : 3

97
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } d
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } d
Distance : 3

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } matcher
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } matcher
Distance : 3

99
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

100
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } getMessage
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } getMessage
Distance : 3

101
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } paint
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } paint
Distance : 3

102
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } m
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } m
Distance : 3

103
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } result
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } result
Distance : 3

104
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Args
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Args
Distance : 3

105
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } stream
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } stream
Distance : 3

106
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , break; ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , break; ) ; }
Distance : 3

107
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } char
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } char
Distance : 3

108
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } notifyListeners
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } notifyListeners
Distance : 3

109
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Class
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Class
Distance : 3

110
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Test
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Test
Distance : 3

111
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } p
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } p
Distance : 3

112
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } options
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } options
Distance : 3

113
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } source
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } source
Distance : 3

114
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } toString
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } toString
Distance : 3

115
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } if
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } if
Distance : 3

116
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } =
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } =
Distance : 3

117
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } }
Distance : 3

118
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ()
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ()
Distance : 3

119
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } {
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } {
Distance : 3

120
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } List
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } List
Distance : 3

121
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } try
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } try
Distance : 3

122
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } else
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } else
Distance : 3

123
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } instant
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } instant
Distance : 3

124
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } compiler
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } compiler
Distance : 3

125
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } String
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } String
Distance : 3

126
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } e
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } e
Distance : 3

127
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } <
Distance : 3

128
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } n
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } n
Distance : 3

129
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } catch
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } catch
Distance : 3

130
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } void
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } void
Distance : 3

131
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ==
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ==
Distance : 3

132
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } return
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } return
Distance : 3

133
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } NUMBER_CONSTANT
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } NUMBER_CONSTANT
Distance : 3

134
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } STRING_CONSTANT
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } STRING_CONSTANT
Distance : 3

135
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } new
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } new
Distance : 3

136
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } throw
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } throw
Distance : 3

137
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } this
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } this
Distance : 3

138
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } JSType
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } JSType
Distance : 3

139
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } public
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } public
Distance : 3

140
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } {}
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } {}
Distance : 3

141
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } b
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } b
Distance : 3

142
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } MutableTimePeriod
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } MutableTimePeriod
Distance : 3

143
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

144
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } a
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } a
Distance : 3

145
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } traverseEs6
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } traverseEs6
Distance : 3

146
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } stroke
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } stroke
Distance : 3

147
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } chrono
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } chrono
Distance : 3

148
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } contains
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } contains
Distance : 3

149
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } final
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } final
Distance : 3

150
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ?
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ?
Distance : 3

151
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } checkNotNull
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } checkNotNull
Distance : 3

152
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Fraction
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Fraction
Distance : 3

153
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } /
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } /
Distance : 3

154
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } assertTrue
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } assertTrue
Distance : 3

155
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } mock
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } mock
Distance : 3

156
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } true
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } true
Distance : 3

157
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Assert
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Assert
Distance : 3

158
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } -
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } -
Distance : 3

159
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } mode
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } mode
Distance : 3

160
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } >
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } >
Distance : 3

161
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } null
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } null
Distance : 3

162
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Node
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Node
Distance : 3

163
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Exception
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Exception
Distance : 3

164
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } lines
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } lines
Distance : 3

165
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } verify
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } verify
Distance : 3

166
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Integer
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Integer
Distance : 3

167
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } +
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } +
Distance : 3

168
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } c
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } c
Distance : 3

169
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } isEmpty
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } isEmpty
Distance : 3

170
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } externs
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } externs
Distance : 3

171
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } long
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } long
Distance : 3

172
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ]
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ]
Distance : 3

173
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } [
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } [
Distance : 3

174
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } v
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } v
Distance : 3

175
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Preconditions
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Preconditions
Distance : 3

176
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Math
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } Math
Distance : 3

177
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } root
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } root
Distance : 3

178
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } NodeUtil
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } NodeUtil
Distance : 3

179
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } wanted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } wanted
Distance : 3

180
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } NodeTraversal
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } NodeTraversal
Distance : 3

181
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } add
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } add
Distance : 3

182
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ex
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } ex
Distance : 3

183
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } :
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } :
Distance : 3

184
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } index
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } index
Distance : 3

185
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } data
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } data
Distance : 3

186
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } node
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } node
Distance : 3

187
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } return;
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } return;
Distance : 3

188
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } getParent
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } getParent
Distance : 3

189
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } invocations
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } invocations
Distance : 3

190
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } out
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } out
Distance : 3

191
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } protected
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } protected
Distance : 3

192
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } values
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } values
Distance : 3

193
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } StringBuilder
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } StringBuilder
Distance : 3

194
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } size
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } size
Distance : 3

195
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } mockingProgress
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } mockingProgress
Distance : 3

196
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } fail
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } fail
Distance : 3

197
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } get
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } get
Distance : 3

198
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } setUp
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } setUp
Distance : 3

199
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } abs
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; } abs
Distance : 3

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String code = toSource ( root , sourceMap ) ; <>
Code	String code = toSource ( root , sourceMap ) ; <>
Distance : 5

1
Tree	String code = toSource ( root , sourceMap ) ; c
Code	String code = toSource ( root , sourceMap ) ; c
Distance : 5

2
Tree	String code = toSource ( root , sourceMap ) ; type
Code	String code = toSource ( root , sourceMap ) ; type
Distance : 5

3
Tree	String code = toSource ( root , sourceMap ) ; try
Code	String code = toSource ( root , sourceMap ) ; try
Distance : 5

4
Tree	String code = toSource ( root , sourceMap ) ; *
Code	String code = toSource ( root , sourceMap ) ; *
Distance : 5

5
Tree	String code = toSource ( root , sourceMap ) ; Args
Code	String code = toSource ( root , sourceMap ) ; Args
Distance : 5

6
Tree	String code = toSource ( root , sourceMap ) ; notifyListeners
Code	String code = toSource ( root , sourceMap ) ; notifyListeners
Distance : 5

7
Tree	String code = toSource ( root , sourceMap ) ; fail
Code	String code = toSource ( root , sourceMap ) ; fail
Distance : 5

8
Tree	String code = toSource ( root , sourceMap ) ; :
Code	String code = toSource ( root , sourceMap ) ; :
Distance : 5

9
Tree	String code = toSource ( root , sourceMap ) ; List
Code	String code = toSource ( root , sourceMap ) ; List
Distance : 5

10
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

11
Tree	String sourceMap = toSource ( code , code ) ;
Code	String sourceMap = toSource ( code , code ) ;
Distance : 7

12
Tree	String root = toSource ( code , sourceMap ) ;
Code	String root = toSource ( code , sourceMap ) ;
Distance : 6

13
Tree	String code = toSource ( code , root ) ;
Code	String code = toSource ( code , root ) ;
Distance : 6

14
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

15
Tree	String root = toSource ( root , root ) ;
Code	String root = toSource ( root , root ) ;
Distance : 6

16
Tree	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Distance : 6

17
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

18
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

19
Tree	String sourceMap = toSource ( sourceMap , code ) ;
Code	String sourceMap = toSource ( sourceMap , code ) ;
Distance : 6

20
Tree	String root = toSource ( sourceMap , sourceMap ) ;
Code	String root = toSource ( sourceMap , sourceMap ) ;
Distance : 6

21
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

22
Tree	String code = toSource ( root , sourceMap ) ; boolean
Code	String code = toSource ( root , sourceMap ) ; boolean
Distance : 5

23
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

24
Tree	String code = toSource ( root , sourceMap ) ; join
Code	String code = toSource ( root , sourceMap ) ; join
Distance : 5

25
Tree	String code = toSource ( root , sourceMap ) ; getInstance
Code	String code = toSource ( root , sourceMap ) ; getInstance
Distance : 5

26
Tree	String code = toSource ( root , sourceMap ) ; LINE_JOINER
Code	String code = toSource ( root , sourceMap ) ; LINE_JOINER
Distance : 5

27
Tree	String code = toSource ( root , sourceMap ) ; str
Code	String code = toSource ( root , sourceMap ) ; str
Distance : 5

28
Tree	String code = toSource ( root , sourceMap ) ; createIllegalArgumentException
Code	String code = toSource ( root , sourceMap ) ; createIllegalArgumentException
Distance : 5

29
Tree	String code = toSource ( root , sourceMap ) ; parent
Code	String code = toSource ( root , sourceMap ) ; parent
Distance : 5

30
Tree	String code = toSource ( root , sourceMap ) ; x
Code	String code = toSource ( root , sourceMap ) ; x
Distance : 5

31
Tree	String code = toSource ( root , sourceMap ) ; testSame
Code	String code = toSource ( root , sourceMap ) ; testSame
Distance : 5

32
Tree	String code = toSource ( root , sourceMap ) ; IllegalArgumentException
Code	String code = toSource ( root , sourceMap ) ; IllegalArgumentException
Distance : 5

33
Tree	String code = toSource ( root , sourceMap ) ; reportCodeChange
Code	String code = toSource ( root , sourceMap ) ; reportCodeChange
Distance : 5

34
Tree	String code = toSource ( root , sourceMap ) ; FastMath
Code	String code = toSource ( root , sourceMap ) ; FastMath
Distance : 5

35
Tree	String code = toSource ( root , sourceMap ) ; expected
Code	String code = toSource ( root , sourceMap ) ; expected
Distance : 5

36
Tree	String code = toSource ( root , sourceMap ) ; name
Code	String code = toSource ( root , sourceMap ) ; name
Distance : 5

37
Tree	String code = toSource ( root , sourceMap ) ; t
Code	String code = toSource ( root , sourceMap ) ; t
Distance : 5

38
Tree	String code = toSource ( root , sourceMap ) ; checkArgument
Code	String code = toSource ( root , sourceMap ) ; checkArgument
Distance : 5

39
Tree	String code = toSource ( root , sourceMap ) ; array
Code	String code = toSource ( root , sourceMap ) ; array
Distance : 5

40
Tree	String code = toSource ( root , sourceMap ) ; invocation
Code	String code = toSource ( root , sourceMap ) ; invocation
Distance : 5

41
Tree	String code = toSource ( root , sourceMap ) ; paint
Code	String code = toSource ( root , sourceMap ) ; paint
Distance : 5

42
Tree	String code = toSource ( root , sourceMap ) ; field
Code	String code = toSource ( root , sourceMap ) ; field
Distance : 5

43
Tree	String code = toSource ( root , sourceMap ) ; result
Code	String code = toSource ( root , sourceMap ) ; result
Distance : 5

44
Tree	String code = toSource ( root , sourceMap ) ; m
Code	String code = toSource ( root , sourceMap ) ; m
Distance : 5

45
Tree	String code = toSource ( root , sourceMap ) ; ArrayList
Code	String code = toSource ( root , sourceMap ) ; ArrayList
Distance : 5

46
Tree	String code = toSource ( root , sourceMap ) ; fireChangeEvent
Code	String code = toSource ( root , sourceMap ) ; fireChangeEvent
Distance : 5

47
Tree	String code = toSource ( root , sourceMap ) ; serialised
Code	String code = toSource ( root , sourceMap ) ; serialised
Distance : 5

48
Tree	String code = toSource ( root , sourceMap ) ; assertThat
Code	String code = toSource ( root , sourceMap ) ; assertThat
Distance : 5

49
Tree	String root = toSource ( code , code ) ;
Code	String root = toSource ( code , code ) ;
Distance : 7

50
Tree	String sourceMap = toSource ( root , root ) ;
Code	String sourceMap = toSource ( root , root ) ;
Distance : 6

51
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

52
Tree	String root = toSource ( root , root ) ;
Code	String root = toSource ( root , root ) ;
Distance : 6

53
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

54
Tree	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Distance : 6

55
Tree	String root = toSource ( sourceMap , root ) ;
Code	String root = toSource ( sourceMap , root ) ;
Distance : 6

56
Tree	String code = toSource ( sourceMap , code ) ;
Code	String code = toSource ( sourceMap , code ) ;
Distance : 5

57
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

58
Tree	String sourceMap = toSource ( root , root ) ;
Code	String sourceMap = toSource ( root , root ) ;
Distance : 6

59
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

60
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

61
Tree	String sourceMap = toSource ( sourceMap , root ) ;
Code	String sourceMap = toSource ( sourceMap , root ) ;
Distance : 6

62
Tree	String sourceMap = toSource ( code , sourceMap ) ;
Code	String sourceMap = toSource ( code , sourceMap ) ;
Distance : 6

63
Tree	String root = toSource ( code , root ) ;
Code	String root = toSource ( code , root ) ;
Distance : 7

64
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

65
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

66
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

67
Tree	String root = toSource ( root , code ) ;
Code	String root = toSource ( root , code ) ;
Distance : 6

68
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

69
Tree	String root = toSource ( sourceMap , code ) ;
Code	String root = toSource ( sourceMap , code ) ;
Distance : 6

70
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

71
Tree	String sourceMap = toSource ( code , root ) ;
Code	String sourceMap = toSource ( code , root ) ;
Distance : 7

72
Tree	String code = toSource ( code , root ) ;
Code	String code = toSource ( code , root ) ;
Distance : 6

73
Tree	String root = toSource ( root , code ) ;
Code	String root = toSource ( root , code ) ;
Distance : 6

74
Tree	String root = toSource ( sourceMap , sourceMap ) ;
Code	String root = toSource ( sourceMap , sourceMap ) ;
Distance : 6

75
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

76
Tree	String code = toSource ( sourceMap , code ) ;
Code	String code = toSource ( sourceMap , code ) ;
Distance : 5

77
Tree	String sourceMap = toSource ( code , sourceMap ) ;
Code	String sourceMap = toSource ( code , sourceMap ) ;
Distance : 6

78
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

79
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

80
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

81
Tree	String code = toSource ( code , code ) ;
Code	String code = toSource ( code , code ) ;
Distance : 6

82
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

83
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

84
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

85
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

86
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

87
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

88
Tree	String code = toSource ( sourceMap , root ) ;
Code	String code = toSource ( sourceMap , root ) ;
Distance : 5

89
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

90
Tree	String sourceMap = toSource ( root , code ) ;
Code	String sourceMap = toSource ( root , code ) ;
Distance : 6

91
Tree	String root = toSource ( code , sourceMap ) ;
Code	String root = toSource ( code , sourceMap ) ;
Distance : 6

92
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

93
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

94
Tree	String code = toSource ( sourceMap , sourceMap ) ;
Code	String code = toSource ( sourceMap , sourceMap ) ;
Distance : 5

95
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

96
Tree	String code = toSource ( sourceMap , root ) ;
Code	String code = toSource ( sourceMap , root ) ;
Distance : 5

97
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

98
Tree	String code = toSource ( root , sourceMap ) ; Class
Code	String code = toSource ( root , sourceMap ) ; Class
Distance : 5

99
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

100
Tree	String code = toSource ( root , sourceMap ) ; p
Code	String code = toSource ( root , sourceMap ) ; p
Distance : 5

101
Tree	String code = toSource ( root , sourceMap ) ; ()
Code	String code = toSource ( root , sourceMap ) ; ()
Distance : 5

102
Tree	String code = toSource ( root , sourceMap ) ; }
Code	String code = toSource ( root , sourceMap ) ; }
Distance : 5

103
Tree	String code = toSource ( root , sourceMap ) ; =
Code	String code = toSource ( root , sourceMap ) ; =
Distance : 5

104
Tree	String code = toSource ( root , sourceMap ) ; @
Code	String code = toSource ( root , sourceMap ) ; @
Distance : 5

105
Tree	String code = toSource ( root , sourceMap ) ; double
Code	String code = toSource ( root , sourceMap ) ; double
Distance : 5

106
Tree	String code = toSource ( root , sourceMap ) ; <s>
Code	String code = toSource ( root , sourceMap ) ; <s>
Distance : 5

107
Tree	String code = toSource ( root , sourceMap ) ; {}
Code	String code = toSource ( root , sourceMap ) ; {}
Distance : 5

108
Tree	String code = toSource ( root , sourceMap ) ; ParamChecks
Code	String code = toSource ( root , sourceMap ) ; ParamChecks
Distance : 5

109
Tree	String code = toSource ( root , sourceMap ) ; f
Code	String code = toSource ( root , sourceMap ) ; f
Distance : 5

110
Tree	String code = toSource ( root , sourceMap ) ; Override
Code	String code = toSource ( root , sourceMap ) ; Override
Distance : 5

111
Tree	String code = toSource ( root , sourceMap ) ; MathRuntimeException
Code	String code = toSource ( root , sourceMap ) ; MathRuntimeException
Distance : 5

112
Tree	String code = toSource ( root , sourceMap ) ; Object
Code	String code = toSource ( root , sourceMap ) ; Object
Distance : 5

113
Tree	String code = toSource ( root , sourceMap ) ; class
Code	String code = toSource ( root , sourceMap ) ; class
Distance : 5

114
Tree	String code = toSource ( root , sourceMap ) ; assertTrue
Code	String code = toSource ( root , sourceMap ) ; assertTrue
Distance : 5

115
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

116
Tree	String code = toSource ( root , sourceMap ) ; {
Code	String code = toSource ( root , sourceMap ) ; {
Distance : 5

117
Tree	String code = toSource ( root , sourceMap ) ; new
Code	String code = toSource ( root , sourceMap ) ; new
Distance : 5

118
Tree	String code = toSource ( root , sourceMap ) ; externs
Code	String code = toSource ( root , sourceMap ) ; externs
Distance : 5

119
Tree	String code = toSource ( root , sourceMap ) ; NUMBER_CONSTANT
Code	String code = toSource ( root , sourceMap ) ; NUMBER_CONSTANT
Distance : 5

120
Tree	String code = toSource ( root , sourceMap ) ; STRING_CONSTANT
Code	String code = toSource ( root , sourceMap ) ; STRING_CONSTANT
Distance : 5

121
Tree	String code = toSource ( root , sourceMap ) ; nullNotPermitted
Code	String code = toSource ( root , sourceMap ) ; nullNotPermitted
Distance : 5

122
Tree	String code = toSource ( root , sourceMap ) ; []
Code	String code = toSource ( root , sourceMap ) ; []
Distance : 5

123
Tree	String code = toSource ( root , sourceMap ) ; !
Code	String code = toSource ( root , sourceMap ) ; !
Distance : 5

124
Tree	String code = toSource ( root , sourceMap ) ; assertEquals
Code	String code = toSource ( root , sourceMap ) ; assertEquals
Distance : 5

125
Tree	String code = toSource ( root , sourceMap ) ; !=
Code	String code = toSource ( root , sourceMap ) ; !=
Distance : 5

126
Tree	String code = toSource ( root , sourceMap ) ; i
Code	String code = toSource ( root , sourceMap ) ; i
Distance : 5

127
Tree	String code = toSource ( root , sourceMap ) ; test
Code	String code = toSource ( root , sourceMap ) ; test
Distance : 5

128
Tree	String code = toSource ( root , sourceMap ) ; checkState
Code	String code = toSource ( root , sourceMap ) ; checkState
Distance : 5

129
Tree	String code = toSource ( root , sourceMap ) ; return
Code	String code = toSource ( root , sourceMap ) ; return
Distance : 5

130
Tree	String code = toSource ( root , sourceMap ) ; int
Code	String code = toSource ( root , sourceMap ) ; int
Distance : 5

131
Tree	String code = toSource ( root , sourceMap ) ; &&
Code	String code = toSource ( root , sourceMap ) ; &&
Distance : 5

132
Tree	String code = toSource ( root , sourceMap ) ; false
Code	String code = toSource ( root , sourceMap ) ; false
Distance : 5

133
Tree	String code = toSource ( root , sourceMap ) ; super
Code	String code = toSource ( root , sourceMap ) ; super
Distance : 5

134
Tree	String code = toSource ( root , sourceMap ) ; value
Code	String code = toSource ( root , sourceMap ) ; value
Distance : 5

135
Tree	String code = toSource ( root , sourceMap ) ; T
Code	String code = toSource ( root , sourceMap ) ; T
Distance : 5

136
Tree	String code = toSource ( root , sourceMap ) ; NodeTraversal
Code	String code = toSource ( root , sourceMap ) ; NodeTraversal
Distance : 5

137
Tree	String code = toSource ( root , sourceMap ) ; +
Code	String code = toSource ( root , sourceMap ) ; +
Distance : 5

138
Tree	String code = toSource ( root , sourceMap ) ; ,
Code	String code = toSource ( root , sourceMap ) ; ,
Distance : 5

139
Tree	String code = toSource ( root , sourceMap ) ; .
Code	String code = toSource ( root , sourceMap ) ; .
Distance : 5

140
Tree	String code = toSource ( root , sourceMap ) ; )
Code	String code = toSource ( root , sourceMap ) ; )
Distance : 5

141
Tree	String code = toSource ( root , sourceMap ) ; ;
Code	String code = toSource ( root , sourceMap ) ; ;
Distance : 5

142
Tree	String code = toSource ( root , sourceMap ) ; String
Code	String code = toSource ( root , sourceMap ) ; String
Distance : 5

143
Tree	String code = toSource ( root , sourceMap ) ; e
Code	String code = toSource ( root , sourceMap ) ; e
Distance : 5

144
Tree	String code = toSource ( root , sourceMap ) ; source
Code	String code = toSource ( root , sourceMap ) ; source
Distance : 5

145
Tree	String code = toSource ( root , sourceMap ) ; toString
Code	String code = toSource ( root , sourceMap ) ; toString
Distance : 5

146
Tree	String code = toSource ( root , sourceMap ) ; ex
Code	String code = toSource ( root , sourceMap ) ; ex
Distance : 5

147
Tree	String code = toSource ( root , sourceMap ) ; null
Code	String code = toSource ( root , sourceMap ) ; null
Distance : 5

148
Tree	String code = toSource ( root , sourceMap ) ; <blank>
Code	String code = toSource ( root , sourceMap ) ; <blank>
Distance : 5

149
Tree	String code = toSource ( root , sourceMap ) ; throw
Code	String code = toSource ( root , sourceMap ) ; throw
Distance : 5

150
Tree	String code = toSource ( root , sourceMap ) ; StrBuilder
Code	String code = toSource ( root , sourceMap ) ; StrBuilder
Distance : 5

151
Tree	String code = toSource ( root , sourceMap ) ; public
Code	String code = toSource ( root , sourceMap ) ; public
Distance : 5

152
Tree	String code = toSource ( root , sourceMap ) ; final
Code	String code = toSource ( root , sourceMap ) ; final
Distance : 5

153
Tree	String code = toSource ( root , sourceMap ) ; this
Code	String code = toSource ( root , sourceMap ) ; this
Distance : 5

154
Tree	String code = toSource ( root , sourceMap ) ; <
Code	String code = toSource ( root , sourceMap ) ; <
Distance : 5

155
Tree	String code = toSource ( root , sourceMap ) ; if
Code	String code = toSource ( root , sourceMap ) ; if
Distance : 5

156
Tree	String code = toSource ( root , sourceMap ) ; reportMatcher
Code	String code = toSource ( root , sourceMap ) ; reportMatcher
Distance : 5

157
Tree	String code = toSource ( root , sourceMap ) ; TestUtilities
Code	String code = toSource ( root , sourceMap ) ; TestUtilities
Distance : 5

158
Tree	String code = toSource ( root , sourceMap ) ; js
Code	String code = toSource ( root , sourceMap ) ; js
Distance : 5

159
Tree	String code = toSource ( root , sourceMap ) ; Invocation
Code	String code = toSource ( root , sourceMap ) ; Invocation
Distance : 5

160
Tree	String code = toSource ( root , sourceMap ) ; for
Code	String code = toSource ( root , sourceMap ) ; for
Distance : 5

161
Tree	String code = toSource ( root , sourceMap ) ; equals
Code	String code = toSource ( root , sourceMap ) ; equals
Distance : 5

162
Tree	String code = toSource ( root , sourceMap ) ; d
Code	String code = toSource ( root , sourceMap ) ; d
Distance : 5

163
Tree	String code = toSource ( root , sourceMap ) ; compiler
Code	String code = toSource ( root , sourceMap ) ; compiler
Distance : 5

164
Tree	String code = toSource ( root , sourceMap ) ; add
Code	String code = toSource ( root , sourceMap ) ; add
Distance : 5

165
Tree	String code = toSource ( root , sourceMap ) ; >
Code	String code = toSource ( root , sourceMap ) ; >
Distance : 5

166
Tree	String code = toSource ( root , sourceMap ) ; data
Code	String code = toSource ( root , sourceMap ) ; data
Distance : 5

167
Tree	String code = toSource ( root , sourceMap ) ; code
Code	String code = toSource ( root , sourceMap ) ; code
Distance : 5

168
Tree	String code = toSource ( root , sourceMap ) ; NodeUtil
Code	String code = toSource ( root , sourceMap ) ; NodeUtil
Distance : 5

169
Tree	String code = toSource ( root , sourceMap ) ; long
Code	String code = toSource ( root , sourceMap ) ; long
Distance : 5

170
Tree	String code = toSource ( root , sourceMap ) ; /
Code	String code = toSource ( root , sourceMap ) ; /
Distance : 5

171
Tree	String code = toSource ( root , sourceMap ) ; Fraction
Code	String code = toSource ( root , sourceMap ) ; Fraction
Distance : 5

172
Tree	String code = toSource ( root , sourceMap ) ; checkNotNull
Code	String code = toSource ( root , sourceMap ) ; checkNotNull
Distance : 5

173
Tree	String code = toSource ( root , sourceMap ) ; ?
Code	String code = toSource ( root , sourceMap ) ; ?
Distance : 5

174
Tree	String code = toSource ( root , sourceMap ) ; Assert
Code	String code = toSource ( root , sourceMap ) ; Assert
Distance : 5

175
Tree	String code = toSource ( root , sourceMap ) ; ]
Code	String code = toSource ( root , sourceMap ) ; ]
Distance : 5

176
Tree	String code = toSource ( root , sourceMap ) ; [
Code	String code = toSource ( root , sourceMap ) ; [
Distance : 5

177
Tree	String code = toSource ( root , sourceMap ) ; Preconditions
Code	String code = toSource ( root , sourceMap ) ; Preconditions
Distance : 5

178
Tree	String code = toSource ( root , sourceMap ) ; -
Code	String code = toSource ( root , sourceMap ) ; -
Distance : 5

179
Tree	String code = toSource ( root , sourceMap ) ; mode
Code	String code = toSource ( root , sourceMap ) ; mode
Distance : 5

180
Tree	String code = toSource ( root , sourceMap ) ; true
Code	String code = toSource ( root , sourceMap ) ; true
Distance : 5

181
Tree	String code = toSource ( root , sourceMap ) ; mock
Code	String code = toSource ( root , sourceMap ) ; mock
Distance : 5

182
Tree	String code = toSource ( root , sourceMap ) ; (
Code	String code = toSource ( root , sourceMap ) ; (
Distance : 5

183
Tree	String code = toSource ( root , sourceMap ) ; options
Code	String code = toSource ( root , sourceMap ) ; options
Distance : 5

184
Tree	String code = toSource ( root , sourceMap ) ; n
Code	String code = toSource ( root , sourceMap ) ; n
Distance : 5

185
Tree	String code = toSource ( root , sourceMap ) ; catch
Code	String code = toSource ( root , sourceMap ) ; catch
Distance : 5

186
Tree	String code = toSource ( root , sourceMap ) ; void
Code	String code = toSource ( root , sourceMap ) ; void
Distance : 5

187
Tree	String code = toSource ( root , sourceMap ) ; ==
Code	String code = toSource ( root , sourceMap ) ; ==
Distance : 5

188
Tree	String code = toSource ( root , sourceMap ) ; Node
Code	String code = toSource ( root , sourceMap ) ; Node
Distance : 5

189
Tree	String code = toSource ( root , sourceMap ) ; Exception
Code	String code = toSource ( root , sourceMap ) ; Exception
Distance : 5

190
Tree	String code = toSource ( root , sourceMap ) ; lines
Code	String code = toSource ( root , sourceMap ) ; lines
Distance : 5

191
Tree	String code = toSource ( root , sourceMap ) ; verify
Code	String code = toSource ( root , sourceMap ) ; verify
Distance : 5

192
Tree	String code = toSource ( root , sourceMap ) ; Integer
Code	String code = toSource ( root , sourceMap ) ; Integer
Distance : 5

193
Tree	String code = toSource ( root , sourceMap ) ; v
Code	String code = toSource ( root , sourceMap ) ; v
Distance : 5

194
Tree	String code = toSource ( root , sourceMap ) ; length
Code	String code = toSource ( root , sourceMap ) ; length
Distance : 5

195
Tree	String code = toSource ( root , sourceMap ) ; TestUtils
Code	String code = toSource ( root , sourceMap ) ; TestUtils
Distance : 5

196
Tree	String code = toSource ( root , sourceMap ) ; Math
Code	String code = toSource ( root , sourceMap ) ; Math
Distance : 5

197
Tree	String code = toSource ( root , sourceMap ) ; root
Code	String code = toSource ( root , sourceMap ) ; root
Distance : 5

198
Tree	String code = toSource ( root , sourceMap ) ; wanted
Code	String code = toSource ( root , sourceMap ) ; wanted
Distance : 5

199
Tree	String code = toSource ( root , sourceMap ) ; Test
Code	String code = toSource ( root , sourceMap ) ; Test
Distance : 5

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; notifyListeners
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; notifyListeners
Distance : 8

1
Tree	this . maybeAliased = ! assignNode . isExprResult () . getParent () ;
Code	this . maybeAliased = ! assignNode . isExprResult () . getParent () ;
Distance : 7

2
Tree	this . assignNode = ! assignNode . getParent () . getParent () ;
Code	this . assignNode = ! assignNode . getParent () . getParent () ;
Distance : 8

3
Tree	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

4
Tree	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Code	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

5
Tree	this . assignNode = ! NodeUtil . isExprResult () . getParent () ;
Code	this . assignNode = ! NodeUtil . isExprResult () . getParent () ;
Distance : 7

6
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

7
Tree	this . maybeAliased = ! NodeUtil . getParent () . getParent () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . getParent () ;
Distance : 6

8
Tree	this . maybeAliased = ! NodeUtil . isExprResult () . getParent () ;
Code	this . maybeAliased = ! NodeUtil . isExprResult () . getParent () ;
Distance : 6

9
Tree	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Distance : 7

10
Tree	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Distance : 7

11
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

12
Tree	this . assignNode = ! NodeUtil . isExprResult () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . isExprResult () . isExprResult () ;
Distance : 7

13
Tree	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Distance : 6

14
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

15
Tree	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Distance : 7

16
Tree	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Distance : 7

17
Tree	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

18
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

19
Tree	this . maybeAliased = ! NodeUtil . getParent () . getParent () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . getParent () ;
Distance : 6

20
Tree	this . maybeAliased = ! NodeUtil . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . isExprResult () . isExprResult () ;
Distance : 6

21
Tree	this . assignNode = ! assignNode . getParent () . getParent () ;
Code	this . assignNode = ! assignNode . getParent () . getParent () ;
Distance : 8

22
Tree	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

23
Tree	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Code	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

24
Tree	this . assignNode = ! assignNode . isExprResult () . getParent () ;
Code	this . assignNode = ! assignNode . isExprResult () . getParent () ;
Distance : 8

25
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

26
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; field
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; field
Distance : 8

27
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; IllegalArgumentException
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; IllegalArgumentException
Distance : 8

28
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; name
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; name
Distance : 8

29
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; FastMath
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; FastMath
Distance : 8

30
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; expected
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; expected
Distance : 8

31
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; t
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; t
Distance : 8

32
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; x
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; x
Distance : 8

33
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; invocation
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; invocation
Distance : 8

34
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ArrayList
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ArrayList
Distance : 8

35
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; parent
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; parent
Distance : 8

36
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; LINE_JOINER
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; LINE_JOINER
Distance : 8

37
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; mode
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; mode
Distance : 8

38
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; testSame
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; testSame
Distance : 8

39
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; str
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; str
Distance : 8

40
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; reportCodeChange
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; reportCodeChange
Distance : 8

41
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Object
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Object
Distance : 8

42
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; createIllegalArgumentException
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; createIllegalArgumentException
Distance : 8

43
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

44
Tree	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Distance : 7

45
Tree	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

46
Tree	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Distance : 6

47
Tree	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Code	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Distance : 8

48
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Test
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Test
Distance : 8

49
Tree	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

50
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

51
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

52
Tree	this . NodeUtil = ! NodeUtil . getParent () . getParent () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . getParent () ;
Distance : 7

53
Tree	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

54
Tree	this . NodeUtil = ! NodeUtil . isExprResult () . getParent () ;
Code	this . NodeUtil = ! NodeUtil . isExprResult () . getParent () ;
Distance : 7

55
Tree	this . assignNode = ! assignNode . getParent () . getParent () ;
Code	this . assignNode = ! assignNode . getParent () . getParent () ;
Distance : 8

56
Tree	this . NodeUtil = ! NodeUtil . isExprResult () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . isExprResult () . isExprResult () ;
Distance : 7

57
Tree	this . maybeAliased = ! NodeUtil . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . isExprResult () . isExprResult () ;
Distance : 6

58
Tree	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Code	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

59
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

60
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

61
Tree	this . NodeUtil = ! assignNode . isExprResult () . getParent () ;
Code	this . NodeUtil = ! assignNode . isExprResult () . getParent () ;
Distance : 8

62
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

63
Tree	this . assignNode = ! NodeUtil . getParent () . getParent () ;
Code	this . assignNode = ! NodeUtil . getParent () . getParent () ;
Distance : 7

64
Tree	this . assignNode = ! assignNode . isExprResult () . getParent () ;
Code	this . assignNode = ! assignNode . isExprResult () . getParent () ;
Distance : 8

65
Tree	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Distance : 7

66
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

67
Tree	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Code	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Distance : 8

68
Tree	this . assignNode = ! NodeUtil . isExprResult () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . isExprResult () . isExprResult () ;
Distance : 7

69
Tree	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

70
Tree	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

71
Tree	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Distance : 6

72
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

73
Tree	this . maybeAliased = ! assignNode . isExprResult () . getParent () ;
Code	this . maybeAliased = ! assignNode . isExprResult () . getParent () ;
Distance : 7

74
Tree	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

75
Tree	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Code	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Distance : 8

76
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

77
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

78
Tree	this . assignNode = ! NodeUtil . getParent () . getParent () ;
Code	this . assignNode = ! NodeUtil . getParent () . getParent () ;
Distance : 7

79
Tree	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ! assignNode . getParent () . getParent () ;
Distance : 7

80
Tree	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ! NodeUtil . getParent () . isExprResult () ;
Distance : 6

81
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

82
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

83
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

84
Tree	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Code	this . NodeUtil = ! assignNode . getParent () . getParent () ;
Distance : 8

85
Tree	this . assignNode = ! assignNode . getParent () . getParent () ;
Code	this . assignNode = ! assignNode . getParent () . getParent () ;
Distance : 8

86
Tree	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

87
Tree	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Code	this . assignNode = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

88
Tree	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Code	this . assignNode = ! assignNode . isExprResult () . isExprResult () ;
Distance : 8

89
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

90
Tree	this . NodeUtil = ! NodeUtil . getParent () . getParent () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . getParent () ;
Distance : 7

91
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

92
Tree	this . NodeUtil = ! assignNode . isExprResult () . getParent () ;
Code	this . NodeUtil = ! assignNode . isExprResult () . getParent () ;
Distance : 8

93
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

94
Tree	this . NodeUtil = ! NodeUtil . isExprResult () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . isExprResult () . isExprResult () ;
Distance : 7

95
Tree	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Code	this . NodeUtil = ! assignNode . getParent () . isExprResult () ;
Distance : 8

96
Tree	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ! assignNode . getParent () . isExprResult () ;
Distance : 8

97
Tree	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Code	this . NodeUtil = ! NodeUtil . getParent () . isExprResult () ;
Distance : 7

98
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ]
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ]
Distance : 8

99
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
Distance : 7

100
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Preconditions
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Preconditions
Distance : 8

101
Tree	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ! assignNode . isExprResult () . isExprResult () ;
Distance : 7

102
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; (
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; (
Distance : 8

103
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; .
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; .
Distance : 8

104
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; }
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; }
Distance : 8

105
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; i
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; i
Distance : 8

106
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; assertEquals
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; assertEquals
Distance : 8

107
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; @
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; @
Distance : 8

108
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; []
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; []
Distance : 8

109
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; test
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; test
Distance : 8

110
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; nullNotPermitted
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; nullNotPermitted
Distance : 8

111
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; !
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; !
Distance : 8

112
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; super
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; super
Distance : 8

113
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; T
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; T
Distance : 8

114
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; checkState
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; checkState
Distance : 8

115
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; double
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; double
Distance : 8

116
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; int
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; int
Distance : 8

117
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; value
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; value
Distance : 8

118
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ==
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ==
Distance : 8

119
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; [
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; [
Distance : 8

120
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; -
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; -
Distance : 8

121
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; try
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; try
Distance : 8

122
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; :
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; :
Distance : 8

123
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ()
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ()
Distance : 8

124
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ParamChecks
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ParamChecks
Distance : 8

125
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; List
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; List
Distance : 8

126
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Override
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Override
Distance : 8

127
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Exception
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Exception
Distance : 8

128
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; MathRuntimeException
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; MathRuntimeException
Distance : 8

129
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; f
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; f
Distance : 8

130
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; class
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; class
Distance : 8

131
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; array
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; array
Distance : 8

132
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; m
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; m
Distance : 8

133
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; mock
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; mock
Distance : 8

134
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; new
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; new
Distance : 8

135
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; {}
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; {}
Distance : 8

136
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; =
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; =
Distance : 8

137
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; final
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; final
Distance : 8

138
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; false
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; false
Distance : 8

139
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; length
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; length
Distance : 8

140
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; fireChangeEvent
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; fireChangeEvent
Distance : 8

141
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; serialised
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; serialised
Distance : 8

142
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; type
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; type
Distance : 8

143
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; getInstance
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; getInstance
Distance : 8

144
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; boolean
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; boolean
Distance : 8

145
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; paint
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; paint
Distance : 8

146
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; join
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; join
Distance : 8

147
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; *
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; *
Distance : 8

148
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <
Distance : 8

149
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; c
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; c
Distance : 8

150
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; return
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; return
Distance : 8

151
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; this
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; this
Distance : 8

152
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; >
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; >
Distance : 8

153
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; if
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; if
Distance : 8

154
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; public
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; public
Distance : 8

155
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; null
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; null
Distance : 8

156
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; NUMBER_CONSTANT
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; NUMBER_CONSTANT
Distance : 8

157
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; verify
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; verify
Distance : 8

158
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ,
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ,
Distance : 8

159
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Node
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Node
Distance : 8

160
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; n
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; n
Distance : 8

161
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; String
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; String
Distance : 8

162
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; source
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; source
Distance : 8

163
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; p
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; p
Distance : 8

164
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Math
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Math
Distance : 8

165
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; options
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; options
Distance : 8

166
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Class
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Class
Distance : 8

167
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; toString
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; toString
Distance : 8

168
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; root
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; root
Distance : 8

169
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; {
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; {
Distance : 8

170
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; assertThat
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; assertThat
Distance : 8

171
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; !=
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; !=
Distance : 8

172
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; )
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; )
Distance : 8

173
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <s>
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <s>
Distance : 8

174
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ;
Distance : 8

175
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <blank>
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <blank>
Distance : 8

176
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ;
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ;
Distance : 8

177
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; +
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; +
Distance : 8

178
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; v
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; v
Distance : 8

179
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; e
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; e
Distance : 8

180
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; compiler
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; compiler
Distance : 8

181
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Integer
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Integer
Distance : 8

182
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; lines
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; lines
Distance : 8

183
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; fail
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; fail
Distance : 8

184
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Args
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; Args
Distance : 8

185
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <>
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; <>
Distance : 8

186
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; result
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; result
Distance : 8

187
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; &&
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; &&
Distance : 8

188
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; STRING_CONSTANT
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; STRING_CONSTANT
Distance : 8

189
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; wanted
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; wanted
Distance : 8

190
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ex
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; ex
Distance : 8

191
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; NodeUtil
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; NodeUtil
Distance : 8

192
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; add
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; add
Distance : 8

193
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; checkArgument
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; checkArgument
Distance : 8

194
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; data
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; data
Distance : 8

195
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; NodeTraversal
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; NodeTraversal
Distance : 8

196
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; void
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; void
Distance : 8

197
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; throw
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; throw
Distance : 8

198
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; catch
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; catch
Distance : 8

199
Tree	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; true
Code	this . maybeAliased = ! assignNode . getParent () . isExprResult () ; true
Distance : 8

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } index
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } index
Distance : 4

1
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } options
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } options
Distance : 4

2
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } p
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } p
Distance : 4

3
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } &&
Distance : 4

4
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } T
Distance : 4

5
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } super
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } super
Distance : 4

6
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } value
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } value
Distance : 4

7
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } class
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } class
Distance : 4

8
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Object
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Object
Distance : 4

9
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } MathRuntimeException
Distance : 4

10
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Override
Distance : 4

11
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } assertEquals
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } assertEquals
Distance : 4

12
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } !
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } !
Distance : 4

13
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } []
Distance : 4

14
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } nullNotPermitted
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } nullNotPermitted
Distance : 4

15
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } throw
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } throw
Distance : 4

16
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } catch
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } catch
Distance : 4

17
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } void
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } void
Distance : 4

18
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ==
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ==
Distance : 4

19
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } double
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } double
Distance : 4

20
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } node
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } node
Distance : 4

21
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } >
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } >
Distance : 4

22
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } source
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } source
Distance : 4

23
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } null
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } null
Distance : 4

24
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } toString
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } toString
Distance : 4

25
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } @
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } @
Distance : 4

26
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } mock
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } mock
Distance : 4

27
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } {}
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } {}
Distance : 4

28
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } if
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } if
Distance : 4

29
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <
Distance : 4

30
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } this
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } this
Distance : 4

31
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } final
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } final
Distance : 4

32
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } =
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } =
Distance : 4

33
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } }
Distance : 4

34
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } mode
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } mode
Distance : 4

35
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ()
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ()
Distance : 4

36
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <blank>
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <blank>
Distance : 4

37
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } {
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } {
Distance : 4

38
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <s>
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <s>
Distance : 4

39
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } (
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } (
Distance : 4

40
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ;
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ;
Distance : 4

41
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } )
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } )
Distance : 4

42
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } .
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } .
Distance : 4

43
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ,
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ,
Distance : 4

44
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } +
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } +
Distance : 4

45
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } {
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } {
Distance : 4

46
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } test
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } test
Distance : 4

47
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } false
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } false
Distance : 4

48
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } true
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } true
Distance : 4

49
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } new
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } new
Distance : 4

50
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } dataset
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } dataset
Distance : 4

51
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 4

52
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Distance : 4

53
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } FastMath
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } FastMath
Distance : 4

54
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } expected
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } expected
Distance : 4

55
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } -
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } -
Distance : 4

56
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } invocations
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } invocations
Distance : 4

57
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } [
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } [
Distance : 4

58
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Preconditions
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Preconditions
Distance : 4

59
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } char
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } char
Distance : 4

60
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } isEmpty
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } isEmpty
Distance : 4

61
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } JSType
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } JSType
Distance : 4

62
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } get
Distance : 4

63
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } abs
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } abs
Distance : 4

64
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } matcher
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } matcher
Distance : 4

65
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } setAcceptedLanguage
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } setAcceptedLanguage
Distance : 4

66
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } static
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } static
Distance : 4

67
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } values
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } values
Distance : 4

68
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } protected
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } protected
Distance : 4

69
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ]
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ]
Distance : 4

70
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

71
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

72
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } return
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } return
Distance : 4

73
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } PlotChangeEvent
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } PlotChangeEvent
Distance : 4

74
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 4

75
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } out
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } out
Distance : 4

76
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } d
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } d
Distance : 4

77
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } equals
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } equals
Distance : 4

78
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } for
Distance : 4

79
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Invocation
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Invocation
Distance : 4

80
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } /
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } /
Distance : 4

81
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } long
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } long
Distance : 4

82
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } assertTrue
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } assertTrue
Distance : 4

83
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } public
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } public
Distance : 4

84
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } externs
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } externs
Distance : 4

85
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } StrBuilder
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } StrBuilder
Distance : 4

86
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } TestUtilities
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } TestUtilities
Distance : 4

87
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } js
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } js
Distance : 4

88
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getMessage
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getMessage
Distance : 4

89
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } stream
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } stream
Distance : 4

90
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } else
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } else
Distance : 4

91
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } instant
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } instant
Distance : 4

92
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } s
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } s
Distance : 4

93
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } isNormalBlock
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } isNormalBlock
Distance : 4

94
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } reportMatcher
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } reportMatcher
Distance : 4

95
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Collection
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Collection
Distance : 4

96
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getField
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getField
Distance : 4

97
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } STRING_CONSTANT
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } STRING_CONSTANT
Distance : 4

98
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } obj
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } obj
Distance : 4

99
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 3

100
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } traverseEs6
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } traverseEs6
Distance : 4

101
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } size
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } size
Distance : 4

102
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } return;
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } return;
Distance : 4

103
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } mockingProgress
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } mockingProgress
Distance : 4

104
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } a
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } a
Distance : 4

105
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT_2015
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 4

106
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } MutableTimePeriod
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } MutableTimePeriod
Distance : 4

107
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } b
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } b
Distance : 4

108
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } scope
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } scope
Distance : 4

109
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } throws
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } throws
Distance : 4

110
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } StringBuilder
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } StringBuilder
Distance : 4

111
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } returnZero
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } returnZero
Distance : 4

112
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Double
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Double
Distance : 4

113
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } PeriodType
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } PeriodType
Distance : 4

114
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } clone
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } clone
Distance : 4

115
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } sqrt
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } sqrt
Distance : 4

116
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } isBlock
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } isBlock
Distance : 4

117
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } append
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } append
Distance : 4

118
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } sb
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } sb
Distance : 4

119
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT6
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } LanguageMode.ECMASCRIPT6
Distance : 4

120
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } stroke
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } stroke
Distance : 4

121
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getFirstChild
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getFirstChild
Distance : 4

122
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } contains
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } contains
Distance : 4

123
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } chrono
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } chrono
Distance : 4

124
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } UnivariateFunction
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } UnivariateFunction
Distance : 4

125
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } lines
Distance : 4

126
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } verify
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } verify
Distance : 4

127
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } str
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } str
Distance : 4

128
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } LINE_JOINER
Distance : 4

129
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } assertThat
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } assertThat
Distance : 4

130
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } invocation
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } invocation
Distance : 4

131
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ArrayList
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ArrayList
Distance : 4

132
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } fireChangeEvent
Distance : 4

133
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getInstance
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getInstance
Distance : 4

134
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } serialised
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } serialised
Distance : 4

135
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 4

136
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } parent
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } parent
Distance : 4

137
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } x
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } x
Distance : 4

138
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } testSame
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } testSame
Distance : 4

139
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } :
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } :
Distance : 4

140
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } fail
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } fail
Distance : 4

141
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } List
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } List
Distance : 4

142
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Args
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Args
Distance : 4

143
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } alpha
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } alpha
Distance : 4

144
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } f
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } f
Distance : 4

145
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } valueOf
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } valueOf
Distance : 4

146
Tree	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

147
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <>
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <>
Distance : 4

148
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ParamChecks
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ParamChecks
Distance : 4

149
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ?
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ?
Distance : 4

150
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } result
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } result
Distance : 4

151
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } try
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } try
Distance : 4

152
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } join
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } join
Distance : 4

153
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } boolean
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } boolean
Distance : 4

154
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } *
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } *
Distance : 4

155
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } type
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } type
Distance : 4

156
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } TestUtils
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } TestUtils
Distance : 4

157
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } length
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } length
Distance : 4

158
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } v
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } v
Distance : 4

159
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } checkNotNull
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } checkNotNull
Distance : 4

160
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Integer
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Integer
Distance : 4

161
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } NodeUtil
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } NodeUtil
Distance : 4

162
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } root
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } root
Distance : 4

163
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Math
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Math
Distance : 4

164
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } checkArgument
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } checkArgument
Distance : 4

165
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } field
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } field
Distance : 4

166
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } t
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } t
Distance : 4

167
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } name
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } name
Distance : 4

168
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } data
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } data
Distance : 4

169
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } NodeTraversal
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } NodeTraversal
Distance : 4

170
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } wanted
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } wanted
Distance : 4

171
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } paint
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } paint
Distance : 4

172
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } m
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } m
Distance : 4

173
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ex
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } ex
Distance : 4

174
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Assert
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Assert
Distance : 4

175
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Test
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Test
Distance : 4

176
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Class
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Class
Distance : 4

177
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } notifyListeners
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } notifyListeners
Distance : 4

178
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } c
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } c
Distance : 4

179
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } n
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } n
Distance : 4

180
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } e
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } e
Distance : 4

181
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } String
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } String
Distance : 4

182
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } add
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } add
Distance : 4

183
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } checkState
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } checkState
Distance : 4

184
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } compiler
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } compiler
Distance : 4

185
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } i
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } i
Distance : 4

186
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } !=
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } !=
Distance : 4

187
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } simpleMethod
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } simpleMethod
Distance : 4

188
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getArgumentMatcherStorage
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getArgumentMatcherStorage
Distance : 4

189
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } y
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } y
Distance : 4

190
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } optimizer
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } optimizer
Distance : 4

191
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getParent
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } getParent
Distance : 4

192
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } setUp
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } setUp
Distance : 4

193
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Fraction
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Fraction
Distance : 4

194
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } array
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } array
Distance : 4

195
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } int
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } int
Distance : 4

196
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Exception
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Exception
Distance : 4

197
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Node
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } Node
Distance : 4

198
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } instance
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } instance
Distance : 4

199
Tree	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <=
Code	if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; } <=
Distance : 4

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	UnmockableHashCodeAndEquals
Code	UnmockableHashCodeAndEquals
Distance : 9

1
Tree	ERAS_TYPE
Code	ERAS_TYPE
Distance : 9

2
Tree	testDependentModules
Code	testDependentModules
Distance : 9

3
Tree	CopticYearDateTimeField
Code	CopticYearDateTimeField
Distance : 9

4
Tree	EntityBlockParams
Code	EntityBlockParams
Distance : 9

5
Tree	TestGJDayOfWeekField
Code	TestGJDayOfWeekField
Distance : 9

6
Tree	markConstAndCopyJsDoc
Code	markConstAndCopyJsDoc
Distance : 9

7
Tree	langs
Code	langs
Distance : 9

8
Tree	nullOrUnknown
Code	nullOrUnknown
Distance : 9

9
Tree	codingConvention
Code	codingConvention
Distance : 9

10
Tree	JAVA_9
Code	JAVA_9
Distance : 9

11
Tree	assertTrue
Code	assertTrue
Distance : 9

12
Tree	DiscreteDistribution.Sampler
Code	DiscreteDistribution.Sampler
Distance : 9

13
Tree	DiagnosticGroup
Code	DiagnosticGroup
Distance : 9

14
Tree	LogarithmicAxis
Code	LogarithmicAxis
Distance : 9

15
Tree	convention
Code	convention
Distance : 9

16
Tree	parseWarning
Code	parseWarning
Distance : 9

17
Tree	RENAME_FUNCTION_DEFINITION
Code	RENAME_FUNCTION_DEFINITION
Distance : 9

18
Tree	DurationFieldType
Code	DurationFieldType
Distance : 9

19
Tree	vector3DFormat
Code	vector3DFormat
Distance : 9

20
Tree	newRepr
Code	newRepr
Distance : 9

21
Tree	And
Code	And
Distance : 9

22
Tree	found
Code	found
Distance : 9

23
Tree	skipStringLiteralEscapeSequence
Code	skipStringLiteralEscapeSequence
Distance : 9

24
Tree	ES8
Code	ES8
Distance : 9

25
Tree	correlationMatrix
Code	correlationMatrix
Distance : 9

26
Tree	UnescapeUtils
Code	UnescapeUtils
Distance : 9

27
Tree	mi
Code	mi
Distance : 9

28
Tree	MockitoLoggerImpl
Code	MockitoLoggerImpl
Distance : 9

29
Tree	testFunctionBind2
Code	testFunctionBind2
Distance : 9

30
Tree	neverWanted
Code	neverWanted
Distance : 9

31
Tree	patterns
Code	patterns
Distance : 9

32
Tree	shadowedVar
Code	shadowedVar
Distance : 9

33
Tree	xRef
Code	xRef
Distance : 9

34
Tree	ConvexHull2D
Code	ConvexHull2D
Distance : 9

35
Tree	lastTime
Code	lastTime
Distance : 9

36
Tree	testNewOperator2
Code	testNewOperator2
Distance : 9

37
Tree	config
Code	config
Distance : 9

38
Tree	sourceMap
Code	sourceMap
Distance : 9

39
Tree	mutNumA
Code	mutNumA
Distance : 9

40
Tree	DoesNothing
Code	DoesNothing
Distance : 9

41
Tree	inOrderMode
Code	inOrderMode
Distance : 9

42
Tree	nominal
Code	nominal
Distance : 9

43
Tree	stringArray
Code	stringArray
Distance : 9

44
Tree	inject_mocks_even_in_declared_spy
Code	inject_mocks_even_in_declared_spy
Distance : 9

45
Tree	YearMonthType
Code	YearMonthType
Distance : 9

46
Tree	globalScope
Code	globalScope
Distance : 9

47
Tree	configuration
Code	configuration
Distance : 9

48
Tree	getStartMillis
Code	getStartMillis
Distance : 9

49
Tree	Null
Code	Null
Distance : 9

50
Tree	centerTextMode
Code	centerTextMode
Distance : 9

51
Tree	TestProblem1
Code	TestProblem1
Distance : 9

52
Tree	NullResultGuardian
Code	NullResultGuardian
Distance : 9

53
Tree	fromMillisOfDay
Code	fromMillisOfDay
Distance : 9

54
Tree	useFieldNames
Code	useFieldNames
Distance : 9

55
Tree	testLegalConstReferenceBetweenModules
Code	testLegalConstReferenceBetweenModules
Distance : 9

56
Tree	SelfDescribing
Code	SelfDescribing
Distance : 9

57
Tree	createArgumentsAreDifferentException
Code	createArgumentsAreDifferentException
Distance : 9

58
Tree	parseAndTypeCheckWithScope
Code	parseAndTypeCheckWithScope
Distance : 9

59
Tree	testTypeMismatch
Code	testTypeMismatch
Distance : 9

60
Tree	CharacterLiteral
Code	CharacterLiteral
Distance : 9

61
Tree	argumentPosition
Code	argumentPosition
Distance : 9

62
Tree	testUnknownTypeReferenceDoesntCrash
Code	testUnknownTypeReferenceDoesntCrash
Distance : 9

63
Tree	third
Code	third
Distance : 9

64
Tree	ES6_MODULES
Code	ES6_MODULES
Distance : 9

65
Tree	hasData
Code	hasData
Distance : 9

66
Tree	assertUnused
Code	assertUnused
Distance : 9

67
Tree	&=
Code	&=
Distance : 9

68
Tree	DateMidnight
Code	DateMidnight
Distance : 9

69
Tree	addNumber
Code	addNumber
Distance : 9

70
Tree	setEndMillis
Code	setEndMillis
Distance : 9

71
Tree	MONTH_OF_YEAR_TYPE
Code	MONTH_OF_YEAR_TYPE
Distance : 9

72
Tree	MISSING_REQUIRE_WARNING
Code	MISSING_REQUIRE_WARNING
Distance : 9

73
Tree	DurationField
Code	DurationField
Distance : 9

74
Tree	MonthDateFormat
Code	MonthDateFormat
Distance : 9

75
Tree	LocalTime
Code	LocalTime
Distance : 9

76
Tree	durationField
Code	durationField
Distance : 9

77
Tree	Commit
Code	Commit
Distance : 9

78
Tree	logger
Code	logger
Distance : 9

79
Tree	DAYS_TYPE
Code	DAYS_TYPE
Distance : 9

80
Tree	nextToken
Code	nextToken
Distance : 9

81
Tree	LocalizedFormats.LCM_OVERFLOW_64_BITS
Code	LocalizedFormats.LCM_OVERFLOW_64_BITS
Distance : 9

82
Tree	UnivariateRealFunction
Code	UnivariateRealFunction
Distance : 9

83
Tree	SomeFeature
Code	SomeFeature
Distance : 9

84
Tree	PropListItem
Code	PropListItem
Distance : 9

85
Tree	testCoercionSubstitution_unknownType
Code	testCoercionSubstitution_unknownType
Distance : 9

86
Tree	SubLine
Code	SubLine
Distance : 9

87
Tree	testDoWhileLoopBranch
Code	testDoWhileLoopBranch
Distance : 9

88
Tree	parseFunctionTail
Code	parseFunctionTail
Distance : 9

89
Tree	isSupported
Code	isSupported
Distance : 9

90
Tree	Token.ROOT
Code	Token.ROOT
Distance : 9

91
Tree	OptimizationException
Code	OptimizationException
Distance : 9

92
Tree	UnivariateVectorialFunction
Code	UnivariateVectorialFunction
Distance : 9

93
Tree	dateTimeField
Code	dateTimeField
Distance : 9

94
Tree	GitHubImprovementsProvider
Code	GitHubImprovementsProvider
Distance : 9

95
Tree	CustomXYURLGenerator
Code	CustomXYURLGenerator
Distance : 9

96
Tree	UnpaddedMonthField
Code	UnpaddedMonthField
Distance : 9

97
Tree	warnings
Code	warnings
Distance : 9

98
Tree	loggerStub
Code	loggerStub
Distance : 9

99
Tree	ComparableObjectItem
Code	ComparableObjectItem
Distance : 9

100
Tree	endMillis
Code	endMillis
Distance : 9

101
Tree	assertPrettyPrint
Code	assertPrettyPrint
Distance : 9

102
Tree	MockitoJUnitRunner
Code	MockitoJUnitRunner
Distance : 9

103
Tree	pagedImprovements
Code	pagedImprovements
Distance : 9

104
Tree	setFeatureSet
Code	setFeatureSet
Distance : 9

105
Tree	DateTime
Code	DateTime
Distance : 9

106
Tree	isVarDeclaration
Code	isVarDeclaration
Distance : 9

107
Tree	DEFAULT_EXTERNS
Code	DEFAULT_EXTERNS
Distance : 9

108
Tree	testIndependentModules
Code	testIndependentModules
Distance : 9

109
Tree	validateNodeType
Code	validateNodeType
Distance : 9

110
Tree	createInfoField
Code	createInfoField
Distance : 9

111
Tree	setModuleResolutionMode
Code	setModuleResolutionMode
Distance : 9

112
Tree	OHLCDataItem
Code	OHLCDataItem
Distance : 9

113
Tree	assertNode
Code	assertNode
Distance : 9

114
Tree	finderStub.actualToReturn
Code	finderStub.actualToReturn
Distance : 9

115
Tree	typeString
Code	typeString
Distance : 9

116
Tree	assertGetClassThrowsNullPointerException
Code	assertGetClassThrowsNullPointerException
Distance : 9

117
Tree	BaseGJChronology
Code	BaseGJChronology
Distance : 9

118
Tree	MaxCountExceededException
Code	MaxCountExceededException
Distance : 9

119
Tree	YearWeekType
Code	YearWeekType
Distance : 9

120
Tree	testArguments6
Code	testArguments6
Distance : 9

121
Tree	ONE_WAY_ANANOVA
Code	ONE_WAY_ANANOVA
Distance : 9

122
Tree	locationMappings
Code	locationMappings
Distance : 9

123
Tree	say
Code	say
Distance : 9

124
Tree	verified
Code	verified
Distance : 9

125
Tree	testMissingRequireStrict
Code	testMissingRequireStrict
Distance : 9

126
Tree	difference
Code	difference
Distance : 9

127
Tree	iParseField
Code	iParseField
Distance : 9

128
Tree	setSourceMapLocationMappings
Code	setSourceMapLocationMappings
Distance : 9

129
Tree	ConvexHullGenerator2D
Code	ConvexHullGenerator2D
Distance : 9

130
Tree	setYears
Code	setYears
Distance : 9

131
Tree	MockitoAnnotations
Code	MockitoAnnotations
Distance : 9

132
Tree	MutableInterval
Code	MutableInterval
Distance : 9

133
Tree	testGlobalObjectDeclaredToPreserveItsPreviousValue2
Code	testGlobalObjectDeclaredToPreserveItsPreviousValue2
Distance : 9

134
Tree	testNoWarning
Code	testNoWarning
Distance : 9

135
Tree	ExperimentalMockitoJUnitRunner
Code	ExperimentalMockitoJUnitRunner
Distance : 9

136
Tree	public
Code	public
Distance : 9

137
Tree	Typedef
Code	Typedef
Distance : 9

138
Tree	DeclaredFunctionType
Code	DeclaredFunctionType
Distance : 9

139
Tree	DefaultCategoryItemRenderer
Code	DefaultCategoryItemRenderer
Distance : 9

140
Tree	chrono
Code	chrono
Distance : 9

141
Tree	getMatchers
Code	getMatchers
Distance : 9

142
Tree	clone.items
Code	clone.items
Distance : 9

143
Tree	emptiedClinitMethods
Code	emptiedClinitMethods
Distance : 9

144
Tree	addExpr
Code	addExpr
Distance : 9

145
Tree	XYIntervalSeriesCollection
Code	XYIntervalSeriesCollection
Distance : 9

146
Tree	allDeps
Code	allDeps
Distance : 9

147
Tree	ContextedRuntimeException
Code	ContextedRuntimeException
Distance : 9

148
Tree	isAsyncContext
Code	isAsyncContext
Distance : 9

149
Tree	COPTIC_PARIS
Code	COPTIC_PARIS
Distance : 9

150
Tree	equalsIncludingNaN
Code	equalsIncludingNaN
Distance : 9

151
Tree	ensureTyped
Code	ensureTyped
Distance : 9

152
Tree	exception
Code	exception
Distance : 9

153
Tree	ReadableInstant
Code	ReadableInstant
Distance : 9

154
Tree	toDurationMillis
Code	toDurationMillis
Distance : 9

155
Tree	DefaultKeyedValues2DDataset
Code	DefaultKeyedValues2DDataset
Distance : 9

156
Tree	NumberOfInvocationsInOrderChecker
Code	NumberOfInvocationsInOrderChecker
Distance : 9

157
Tree	allowExternsChanges
Code	allowExternsChanges
Distance : 9

158
Tree	testES6VarAliasClassDeclarationWithoutNew
Code	testES6VarAliasClassDeclarationWithoutNew
Distance : 9

159
Tree	nodeCount
Code	nodeCount
Distance : 9

160
Tree	void
Code	void
Distance : 9

161
Tree	addStubbedInvocation
Code	addStubbedInvocation
Distance : 9

162
Tree	BAD_PRIVATE_PROPERTY_ACCESS
Code	BAD_PRIVATE_PROPERTY_ACCESS
Distance : 9

163
Tree	violation
Code	violation
Distance : 9

164
Tree	mockDatabase
Code	mockDatabase
Distance : 9

165
Tree	clone.zValues
Code	clone.zValues
Distance : 9

166
Tree	markStubUsed
Code	markStubUsed
Distance : 9

167
Tree	testNgInjectSetVisibility
Code	testNgInjectSetVisibility
Distance : 9

168
Tree	mayBeStatement
Code	mayBeStatement
Distance : 9

169
Tree	WEEKS_TYPE
Code	WEEKS_TYPE
Distance : 9

170
Tree	inOrderContext
Code	inOrderContext
Distance : 9

171
Tree	testDestructuringForOfLoops2
Code	testDestructuringForOfLoops2
Distance : 9

172
Tree	duration
Code	duration
Distance : 9

173
Tree	TEST_TIME2
Code	TEST_TIME2
Distance : 9

174
Tree	NoTestsRemainException
Code	NoTestsRemainException
Distance : 9

175
Tree	NestableException
Code	NestableException
Distance : 9

176
Tree	InvocationsCalculator
Code	InvocationsCalculator
Distance : 9

177
Tree	resetDefaultReturnValues
Code	resetDefaultReturnValues
Distance : 9

178
Tree	MeanAndStandardDeviation
Code	MeanAndStandardDeviation
Distance : 9

179
Tree	tester
Code	tester
Distance : 9

180
Tree	WEEK_OF_WEEKYEAR_TYPE
Code	WEEK_OF_WEEKYEAR_TYPE
Distance : 9

181
Tree	ParseTree
Code	ParseTree
Distance : 9

182
Tree	dest
Code	dest
Distance : 9

183
Tree	DefaultKeyedValues
Code	DefaultKeyedValues
Distance : 9

184
Tree	TEST_TIME1
Code	TEST_TIME1
Distance : 9

185
Tree	fine
Code	fine
Distance : 9

186
Tree	vector2DFormat
Code	vector2DFormat
Distance : 9

187
Tree	setMinutes
Code	setMinutes
Distance : 9

188
Tree	OpenMapRealVector
Code	OpenMapRealVector
Distance : 9

189
Tree	endPass
Code	endPass
Distance : 9

190
Tree	ambiguateProperties
Code	ambiguateProperties
Distance : 9

191
Tree	unresolvedNamedTypes
Code	unresolvedNamedTypes
Distance : 9

192
Tree	MyIterator
Code	MyIterator
Distance : 9

193
Tree	CompilerOptions
Code	CompilerOptions
Distance : 9

194
Tree	GreaterThan
Code	GreaterThan
Distance : 9

195
Tree	cc
Code	cc
Distance : 8

196
Tree	DAY_OF_MONTH_TYPE
Code	DAY_OF_MONTH_TYPE
Distance : 9

197
Tree	ThirdMoment
Code	ThirdMoment
Distance : 9

198
Tree	itemFont
Code	itemFont
Distance : 9

199
Tree	InlineVariablesTest
Code	InlineVariablesTest
Distance : 9

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass protected
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass protected
Distance : 5

1
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass class
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass class
Distance : 5

2
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass array
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass array
Distance : 5

3
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass MathRuntimeException
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass MathRuntimeException
Distance : 5

4
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass {}
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass {}
Distance : 5

5
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Override
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Override
Distance : 5

6
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass f
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass f
Distance : 5

7
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass [
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass [
Distance : 5

8
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass -
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass -
Distance : 5

9
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass &&
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass &&
Distance : 5

10
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Preconditions
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Preconditions
Distance : 5

11
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass true
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass true
Distance : 5

12
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ]
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ]
Distance : 5

13
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass mode
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass mode
Distance : 5

14
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ParamChecks
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ParamChecks
Distance : 5

15
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass false
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass false
Distance : 5

16
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass test
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass test
Distance : 5

17
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass assertEquals
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass assertEquals
Distance : 5

18
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass @
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass @
Distance : 5

19
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass []
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass []
Distance : 5

20
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass ==
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass ==
Distance : 5

21
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass !
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass !
Distance : 5

22
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass notifyListeners
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass notifyListeners
Distance : 5

23
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass String
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass String
Distance : 5

24
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass nullNotPermitted
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass nullNotPermitted
Distance : 5

25
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass }
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass }
Distance : 5

26
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass int
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass int
Distance : 5

27
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass super
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass super
Distance : 5

28
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass !=
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass !=
Distance : 5

29
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass value
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass value
Distance : 5

30
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Object
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Object
Distance : 5

31
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass null
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass null
Distance : 5

32
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass NUMBER_CONSTANT
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass NUMBER_CONSTANT
Distance : 5

33
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass =
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass =
Distance : 5

34
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass new
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass new
Distance : 5

35
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ()
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ()
Distance : 5

36
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ,
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ,
Distance : 5

37
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass {
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass {
Distance : 5

38
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass STRING_CONSTANT
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass STRING_CONSTANT
Distance : 5

39
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass )
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass )
Distance : 5

40
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <s>
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <s>
Distance : 5

41
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass options.closurePass
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass options.closurePass
Distance : 5

42
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <blank>
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <blank>
Distance : 5

43
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ;
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ;
Distance : 5

44
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass (
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass (
Distance : 5

45
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass .
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass .
Distance : 5

46
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass checkState
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass checkState
Distance : 5

47
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass i
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass i
Distance : 5

48
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass double
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass double
Distance : 5

49
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass public
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass public
Distance : 5

50
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass instant
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass instant
Distance : 5

51
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass this
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass this
Distance : 5

52
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass return
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass return
Distance : 5

53
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass final
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass final
Distance : 5

54
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <
Distance : 5

55
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass field
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass field
Distance : 5

56
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass PlotChangeEvent
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass PlotChangeEvent
Distance : 5

57
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass LanguageMode.ECMASCRIPT6
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass LanguageMode.ECMASCRIPT6
Distance : 5

58
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Collection
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Collection
Distance : 5

59
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass solver
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass solver
Distance : 5

60
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass valueOf
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass valueOf
Distance : 5

61
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass dataset
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass dataset
Distance : 5

62
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass mock
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass mock
Distance : 5

63
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass size
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass size
Distance : 5

64
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass mockingProgress
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass mockingProgress
Distance : 5

65
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass char
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass char
Distance : 5

66
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass return;
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass return;
Distance : 5

67
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass JSType
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass JSType
Distance : 5

68
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass static
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass static
Distance : 5

69
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass get
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass get
Distance : 5

70
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass isEmpty
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass isEmpty
Distance : 5

71
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass else
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass else
Distance : 5

72
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass >
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass >
Distance : 5

73
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass if
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass if
Distance : 5

74
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getMessage
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getMessage
Distance : 5

75
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass stream
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass stream
Distance : 5

76
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass abs
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass abs
Distance : 5

77
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getChronology
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getChronology
Distance : 5

78
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass StrBuilder
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass StrBuilder
Distance : 5

79
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass js
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass js
Distance : 5

80
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass d
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass d
Distance : 5

81
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass TestUtilities
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass TestUtilities
Distance : 5

82
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass for
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass for
Distance : 5

83
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass externs
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass externs
Distance : 5

84
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Invocation
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Invocation
Distance : 5

85
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass equals
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass equals
Distance : 5

86
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass node
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass node
Distance : 5

87
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getParent
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getParent
Distance : 5

88
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass reportMatcher
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass reportMatcher
Distance : 5

89
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass setUp
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass setUp
Distance : 5

90
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass out
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass out
Distance : 5

91
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass index
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass index
Distance : 5

92
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass invocations
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass invocations
Distance : 5

93
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass setAcceptedLanguage
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass setAcceptedLanguage
Distance : 5

94
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass clone
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass clone
Distance : 5

95
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Double
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Double
Distance : 5

96
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass matcher
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass matcher
Distance : 5

97
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass values
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass values
Distance : 5

98
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass s
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass s
Distance : 5

99
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass
Distance : 4

100
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass obj
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass obj
Distance : 5

101
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <=
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <=
Distance : 5

102
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass isNormalBlock
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass isNormalBlock
Distance : 5

103
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass MutableTimePeriod
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass MutableTimePeriod
Distance : 5

104
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass a
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass a
Distance : 5

105
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass StringBuilder
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass StringBuilder
Distance : 5

106
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass LanguageMode.ECMASCRIPT_2015
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass LanguageMode.ECMASCRIPT_2015
Distance : 5

107
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass stroke
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass stroke
Distance : 5

108
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass b
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass b
Distance : 5

109
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass traverseEs6
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass traverseEs6
Distance : 5

110
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass chrono
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass chrono
Distance : 5

111
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass append
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass append
Distance : 5

112
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass UnivariateFunction
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass UnivariateFunction
Distance : 5

113
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass scope
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass scope
Distance : 5

114
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass sb
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass sb
Distance : 5

115
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass returnZero
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass returnZero
Distance : 5

116
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass sqrt
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass sqrt
Distance : 5

117
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getFirstChild
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getFirstChild
Distance : 5

118
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass throws
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass throws
Distance : 5

119
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass y
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass y
Distance : 5

120
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass simpleMethod
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass simpleMethod
Distance : 5

121
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass isBlock
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass isBlock
Distance : 5

122
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getArgumentMatcherStorage
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getArgumentMatcherStorage
Distance : 5

123
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass alpha
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass alpha
Distance : 5

124
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass optimizer
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass optimizer
Distance : 5

125
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass instance
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass instance
Distance : 5

126
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass getField
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass getField
Distance : 5

127
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass length
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass length
Distance : 5

128
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass name
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass name
Distance : 5

129
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass IllegalArgumentException
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass IllegalArgumentException
Distance : 5

130
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass t
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass t
Distance : 5

131
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass FastMath
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass FastMath
Distance : 5

132
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass invocation
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass invocation
Distance : 5

133
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass expected
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass expected
Distance : 5

134
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass reportCodeChange
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass reportCodeChange
Distance : 5

135
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass x
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass x
Distance : 5

136
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass createIllegalArgumentException
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass createIllegalArgumentException
Distance : 5

137
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ArrayList
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ArrayList
Distance : 5

138
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass parent
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass parent
Distance : 5

139
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass LINE_JOINER
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass LINE_JOINER
Distance : 5

140
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass testSame
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass testSame
Distance : 5

141
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass str
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass str
Distance : 5

142
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass assertThat
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass assertThat
Distance : 5

143
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass m
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass m
Distance : 5

144
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass try
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass try
Distance : 5

145
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass :
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass :
Distance : 5

146
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass result
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass result
Distance : 5

147
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass List
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass List
Distance : 5

148
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass contains
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass contains
Distance : 5

149
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <>
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass <>
Distance : 5

150
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass fail
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass fail
Distance : 5

151
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass join
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass join
Distance : 5

152
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass paint
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass paint
Distance : 5

153
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass boolean
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass boolean
Distance : 5

154
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getInstance
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass getInstance
Distance : 5

155
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass type
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass type
Distance : 5

156
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass serialised
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass serialised
Distance : 5

157
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass fireChangeEvent
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass fireChangeEvent
Distance : 5

158
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ?
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ?
Distance : 5

159
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Test
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Test
Distance : 5

160
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass toString
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass toString
Distance : 5

161
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass Class
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass Class
Distance : 5

162
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass options
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass options
Distance : 5

163
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass Math
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass Math
Distance : 5

164
Tree	needsManagement . needsManagement () && ! options.closurePass && options.closurePass p
Code	needsManagement . needsManagement () && ! options.closurePass && options.closurePass p
Distance : 5

165
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass source
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass source
Distance : 5

166
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass NodeTraversal
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass NodeTraversal
Distance : 5

167
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass data
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass data
Distance : 5

168
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass checkArgument
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass checkArgument
Distance : 5

169
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass add
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass add
Distance : 5

170
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass NodeUtil
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass NodeUtil
Distance : 5

171
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass wanted
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass wanted
Distance : 5

172
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass *
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass *
Distance : 5

173
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ex
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass ex
Distance : 5

174
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass root
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass root
Distance : 5

175
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Args
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Args
Distance : 5

176
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Integer
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Integer
Distance : 5

177
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Node
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Node
Distance : 5

178
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass v
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass v
Distance : 5

179
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass lines
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass lines
Distance : 5

180
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass c
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass c
Distance : 5

181
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass verify
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass verify
Distance : 5

182
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Exception
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Exception
Distance : 5

183
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass catch
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass catch
Distance : 5

184
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass n
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass n
Distance : 5

185
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass +
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass +
Distance : 5

186
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass pattern
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass pattern
Distance : 5

187
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass e
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass e
Distance : 5

188
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass compiler
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass compiler
Distance : 5

189
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass void
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass void
Distance : 5

190
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass T
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass T
Distance : 5

191
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass /
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass /
Distance : 5

192
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Fraction
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Fraction
Distance : 5

193
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass TestUtils
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass TestUtils
Distance : 5

194
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass checkNotNull
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass checkNotNull
Distance : 5

195
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass assertTrue
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass assertTrue
Distance : 5

196
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Assert
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass Assert
Distance : 5

197
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass long
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass long
Distance : 5

198
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass throw
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass throw
Distance : 5

199
Tree	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass PeriodType
Code	needsManagement . needsManagement () && ! options.skipAllPasses && options.closurePass PeriodType
Distance : 5

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } /
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } /
Distance : 4

1
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } IllegalArgumentException
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } IllegalArgumentException
Distance : 4

2
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } createIllegalArgumentException
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } createIllegalArgumentException
Distance : 4

3
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } parent
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } parent
Distance : 4

4
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } fireChangeEvent
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } fireChangeEvent
Distance : 4

5
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ArrayList
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ArrayList
Distance : 4

6
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } testSame
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } testSame
Distance : 4

7
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } x
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } x
Distance : 4

8
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } FastMath
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } FastMath
Distance : 4

9
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } expected
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } expected
Distance : 4

10
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } {
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } {
Distance : 4

11
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ()
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ()
Distance : 4

12
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ;
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ;
Distance : 4

13
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } }
Distance : 4

14
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } []
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } []
Distance : 4

15
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } NodeUtil
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } NodeUtil
Distance : 4

16
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ==
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ==
Distance : 4

17
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } true
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } true
Distance : 4

18
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getFirstChild
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getFirstChild
Distance : 4

19
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } returnZero
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } returnZero
Distance : 4

20
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } scope
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } scope
Distance : 4

21
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } throws
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } throws
Distance : 4

22
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } reportCodeChange
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } reportCodeChange
Distance : 4

23
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } clone
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } clone
Distance : 4

24
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } assertThat
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } assertThat
Distance : 4

25
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } t
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } t
Distance : 4

26
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } =
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } =
Distance : 4

27
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } }
Distance : 4

28
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } .
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } .
Distance : 4

29
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ,
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ,
Distance : 4

30
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } STRING_CONSTANT
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } STRING_CONSTANT
Distance : 4

31
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } new
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } new
Distance : 4

32
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } LINE_JOINER
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } LINE_JOINER
Distance : 4

33
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } str
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } str
Distance : 4

34
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } wanted
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } wanted
Distance : 4

35
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } long
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } long
Distance : 4

36
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } value
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } value
Distance : 4

37
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } super
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } super
Distance : 4

38
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } double
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } double
Distance : 4

39
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } false
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } false
Distance : 4

40
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } i
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } i
Distance : 4

41
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } !=
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } !=
Distance : 4

42
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <s>
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <s>
Distance : 4

43
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } nullNotPermitted
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } nullNotPermitted
Distance : 4

44
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <blank>
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <blank>
Distance : 4

45
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } )
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } )
Distance : 4

46
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } name
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } name
Distance : 4

47
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } invocation
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } invocation
Distance : 4

48
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } (
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } (
Distance : 4

49
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } void
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } void
Distance : 4

50
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } for
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } for
Distance : 4

51
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } List
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } List
Distance : 4

52
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } :
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } :
Distance : 4

53
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getParent
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getParent
Distance : 4

54
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } setUp
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } setUp
Distance : 4

55
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Args
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Args
Distance : 4

56
Tree	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( root ) ; }
Distance : 3

57
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( root ) ; }
Distance : 2

58
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( externs ) ; }
Distance : 3

59
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( compiler ) ; }
Distance : 4

60
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs ) ; }
Distance : 2

61
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( compiler ) ; }
Distance : 3

62
Tree	{ ( new NodeTraversal ( root , this ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverse ( root ) ; }
Distance : 4

63
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverse ( root ) ; }
Distance : 4

64
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( compiler ) ; }
Distance : 4

65
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( root ) ; }
Distance : 3

66
Tree	{ ( new NodeTraversal ( root , this ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverse ( compiler ) ; }
Distance : 5

67
Tree	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( externs ) ; }
Distance : 3

68
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverse ( externs ) ; }
Distance : 4

69
Tree	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverseRoots ( compiler ) ; }
Distance : 4

70
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverse ( compiler ) ; }
Distance : 5

71
Tree	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , this ) ) . traverseRoots ( externs ) ; }
Distance : 3

72
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } array
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } array
Distance : 4

73
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Invocation
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Invocation
Distance : 4

74
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <>
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <>
Distance : 4

75
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } StrBuilder
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } StrBuilder
Distance : 4

76
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } assertTrue
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } assertTrue
Distance : 4

77
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } externs
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } externs
Distance : 4

78
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } d
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } d
Distance : 4

79
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } equals
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } equals
Distance : 4

80
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } sb
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } sb
Distance : 4

81
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } UnivariateFunction
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } UnivariateFunction
Distance : 4

82
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } mockingProgress
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } mockingProgress
Distance : 4

83
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } return;
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } return;
Distance : 4

84
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } mode
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } mode
Distance : 4

85
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } try
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } try
Distance : 4

86
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } sqrt
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } sqrt
Distance : 4

87
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } fail
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } fail
Distance : 4

88
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } result
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } result
Distance : 4

89
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } assertEquals
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } assertEquals
Distance : 4

90
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } !
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } !
Distance : 4

91
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } int
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } int
Distance : 4

92
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } checkState
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } checkState
Distance : 4

93
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } out
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } out
Distance : 4

94
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } node
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } node
Distance : 4

95
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } index
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } index
Distance : 4

96
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } invocations
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } invocations
Distance : 4

97
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } reportMatcher
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } reportMatcher
Distance : 4

98
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } isEmpty
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } isEmpty
Distance : 4

99
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
Distance : 3

100
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } static
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } static
Distance : 4

101
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } if
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } if
Distance : 4

102
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } return
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } return
Distance : 4

103
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } NUMBER_CONSTANT
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } NUMBER_CONSTANT
Distance : 4

104
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } this
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } this
Distance : 4

105
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } final
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } final
Distance : 4

106
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } serialised
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } serialised
Distance : 4

107
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getInstance
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getInstance
Distance : 4

108
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } *
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } *
Distance : 4

109
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } paint
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } paint
Distance : 4

110
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } setAcceptedLanguage
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } setAcceptedLanguage
Distance : 4

111
Tree	{ ( new NodeTraversal ( root , this ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , this ) ) . traverse ( externs ) ; }
Distance : 4

112
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } -
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } -
Distance : 4

113
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } v
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } v
Distance : 4

114
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Exception
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Exception
Distance : 4

115
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Node
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Node
Distance : 4

116
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } c
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } c
Distance : 4

117
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } notifyListeners
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } notifyListeners
Distance : 4

118
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <
Distance : 4

119
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } lines
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } lines
Distance : 4

120
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } >
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } >
Distance : 4

121
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } test
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } test
Distance : 4

122
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } traverseEs6
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } traverseEs6
Distance : 4

123
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } stroke
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } stroke
Distance : 4

124
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } [
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } [
Distance : 4

125
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ]
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ]
Distance : 4

126
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } boolean
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } boolean
Distance : 4

127
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } &&
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } &&
Distance : 4

128
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } m
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } m
Distance : 4

129
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } type
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } type
Distance : 4

130
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } JSType
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } JSType
Distance : 4

131
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } get
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } get
Distance : 4

132
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getMessage
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } getMessage
Distance : 4

133
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } stream
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } stream
Distance : 4

134
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } protected
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } protected
Distance : 4

135
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } values
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } values
Distance : 4

136
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } instant
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } instant
Distance : 4

137
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } else
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } else
Distance : 4

138
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } @
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } @
Distance : 4

139
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } public
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } public
Distance : 4

140
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } verify
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } verify
Distance : 4

141
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } T
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } T
Distance : 4

142
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } e
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } e
Distance : 4

143
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Object
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Object
Distance : 4

144
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ParamChecks
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ParamChecks
Distance : 4

145
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } f
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } f
Distance : 4

146
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <=
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } <=
Distance : 4

147
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } obj
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } obj
Distance : 4

148
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } MutableTimePeriod
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } MutableTimePeriod
Distance : 4

149
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } n
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } n
Distance : 4

150
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } StringBuilder
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } StringBuilder
Distance : 4

151
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } size
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } size
Distance : 4

152
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 4

153
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } a
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } a
Distance : 4

154
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } s
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } s
Distance : 4

155
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } isNormalBlock
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } isNormalBlock
Distance : 4

156
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } chrono
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } chrono
Distance : 4

157
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } contains
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } contains
Distance : 4

158
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } PeriodType
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } PeriodType
Distance : 4

159
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } TestUtilities
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } TestUtilities
Distance : 4

160
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } class
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } class
Distance : 4

161
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } {}
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } {}
Distance : 4

162
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } b
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } b
Distance : 4

163
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } MathRuntimeException
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } MathRuntimeException
Distance : 4

164
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } mock
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } mock
Distance : 4

165
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } null
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } null
Distance : 4

166
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } +
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } +
Distance : 4

167
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } compiler
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } compiler
Distance : 4

168
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } String
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } String
Distance : 4

169
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } throw
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } throw
Distance : 4

170
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Fraction
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Fraction
Distance : 4

171
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } checkNotNull
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } checkNotNull
Distance : 4

172
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } catch
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } catch
Distance : 4

173
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } TestUtils
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } TestUtils
Distance : 4

174
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } length
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } length
Distance : 4

175
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Double
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Double
Distance : 4

176
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } js
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } js
Distance : 4

177
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Preconditions
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Preconditions
Distance : 4

178
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Override
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Override
Distance : 4

179
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ?
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ?
Distance : 4

180
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Assert
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Assert
Distance : 4

181
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Integer
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Integer
Distance : 4

182
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } field
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } field
Distance : 4

183
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } join
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } join
Distance : 4

184
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } p
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } p
Distance : 4

185
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } options
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } options
Distance : 4

186
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } NodeTraversal
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } NodeTraversal
Distance : 4

187
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ex
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } ex
Distance : 4

188
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } checkArgument
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } checkArgument
Distance : 4

189
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } add
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } add
Distance : 4

190
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } abs
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } abs
Distance : 4

191
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } toString
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } toString
Distance : 4

192
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } source
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } source
Distance : 4

193
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } root
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } root
Distance : 4

194
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Math
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Math
Distance : 4

195
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Class
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Class
Distance : 4

196
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Test
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } Test
Distance : 4

197
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } matcher
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } matcher
Distance : 4

198
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } data
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } data
Distance : 4

199
Tree	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } char
Code	{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; } char
Distance : 4

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; TestUtils
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; TestUtils
Distance : 4

1
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; class
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; class
Distance : 4

2
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

3
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

4
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

5
Tree	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Distance : 3

6
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

7
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

8
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

9
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

10
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

11
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

12
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

13
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

14
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

15
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

16
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Distance : 4

17
Tree	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Distance : 2

18
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

19
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

20
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

21
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

22
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Assert
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Assert
Distance : 4

23
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

24
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ?
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ?
Distance : 4

25
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Fraction
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Fraction
Distance : 4

26
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Math
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Math
Distance : 4

27
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; root
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; root
Distance : 4

28
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; NodeUtil
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; NodeUtil
Distance : 4

29
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; wanted
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; wanted
Distance : 4

30
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; data
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; data
Distance : 4

31
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; NodeTraversal
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; NodeTraversal
Distance : 4

32
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ex
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ex
Distance : 4

33
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <>
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <>
Distance : 4

34
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; array
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; array
Distance : 4

35
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ParamChecks
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ParamChecks
Distance : 4

36
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; f
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; f
Distance : 4

37
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Override
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Override
Distance : 4

38
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; add
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; add
Distance : 4

39
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Object
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Object
Distance : 4

40
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; notifyListeners
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; notifyListeners
Distance : 4

41
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; MathRuntimeException
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; MathRuntimeException
Distance : 4

42
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; c
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; c
Distance : 4

43
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; externs
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; externs
Distance : 4

44
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; long
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; long
Distance : 4

45
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; /
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; /
Distance : 4

46
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; assertTrue
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; assertTrue
Distance : 4

47
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; checkNotNull
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; checkNotNull
Distance : 4

48
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; length
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; length
Distance : 4

49
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

50
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

51
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchNode ) ;
Distance : 2

52
Tree	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Distance : 2

53
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

54
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

55
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

56
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

57
Tree	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Distance : 3

58
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

59
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

60
Tree	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Distance : 2

61
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

62
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

63
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Distance : 3

64
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

65
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

66
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

67
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

68
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

69
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

70
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Distance : 4

71
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchNode ) ;
Distance : 2

72
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

73
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

74
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

75
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Distance : 3

76
Tree	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Distance : 3

77
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

78
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

79
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

80
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

81
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

82
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

83
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

84
Tree	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchBody ) ;
Distance : 4

85
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

86
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

87
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

88
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchNode ) ;
Distance : 3

89
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

90
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

91
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

92
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

93
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchNode ) ;
Distance : 3

94
Tree	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Distance : 3

95
Tree	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Distance : 2

96
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

97
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

98
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Class
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Class
Distance : 4

99
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

100
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; p
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; p
Distance : 4

101
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

102
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ]
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ]
Distance : 4

103
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; .
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; .
Distance : 4

104
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ==
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ==
Distance : 4

105
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; catch
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; catch
Distance : 4

106
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; =
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; =
Distance : 4

107
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ()
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ()
Distance : 4

108
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; {
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; {
Distance : 4

109
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; new
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; new
Distance : 4

110
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; STRING_CONSTANT
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; STRING_CONSTANT
Distance : 4

111
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; NUMBER_CONSTANT
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; NUMBER_CONSTANT
Distance : 4

112
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; return
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; return
Distance : 4

113
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; &&
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; &&
Distance : 4

114
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; }
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; }
Distance : 4

115
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; super
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; super
Distance : 4

116
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; void
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; void
Distance : 4

117
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; T
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; T
Distance : 4

118
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; throw
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; throw
Distance : 4

119
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; n
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; n
Distance : 4

120
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; String
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; String
Distance : 4

121
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; compiler
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; compiler
Distance : 4

122
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; e
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; e
Distance : 4

123
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; !=
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; !=
Distance : 4

124
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; i
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; i
Distance : 4

125
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; int
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; int
Distance : 4

126
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; checkState
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; checkState
Distance : 4

127
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; value
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; value
Distance : 4

128
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; getInstance
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; getInstance
Distance : 4

129
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <blank>
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <blank>
Distance : 4

130
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; fireChangeEvent
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; fireChangeEvent
Distance : 4

131
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ;
Distance : 4

132
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; (
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; (
Distance : 4

133
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; join
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; join
Distance : 4

134
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; expected
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; expected
Distance : 4

135
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; toString
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; toString
Distance : 4

136
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; IllegalArgumentException
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; IllegalArgumentException
Distance : 4

137
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; reportCodeChange
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; reportCodeChange
Distance : 4

138
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; FastMath
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; FastMath
Distance : 4

139
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; name
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; name
Distance : 4

140
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; t
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; t
Distance : 4

141
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <s>
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <s>
Distance : 4

142
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; source
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; source
Distance : 4

143
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; (
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; (
Distance : 4

144
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; str
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; str
Distance : 4

145
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; <
Distance : 4

146
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ArrayList
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ArrayList
Distance : 4

147
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; invocation
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; invocation
Distance : 4

148
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; assertThat
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; assertThat
Distance : 4

149
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; LINE_JOINER
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; LINE_JOINER
Distance : 4

150
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; field
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; field
Distance : 4

151
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; createIllegalArgumentException
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; createIllegalArgumentException
Distance : 4

152
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; parent
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; parent
Distance : 4

153
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; x
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; x
Distance : 4

154
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; testSame
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; testSame
Distance : 4

155
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; +
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; +
Distance : 4

156
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; null
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; null
Distance : 4

157
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; >
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; >
Distance : 4

158
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; public
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; public
Distance : 4

159
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; final
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; final
Distance : 4

160
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; this
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; this
Distance : 4

161
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; if
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; if
Distance : 4

162
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; checkArgument
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; checkArgument
Distance : 4

163
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; )
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; )
Distance : 4

164
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; fail
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; fail
Distance : 4

165
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; double
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; double
Distance : 4

166
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; false
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; false
Distance : 4

167
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; @
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; @
Distance : 4

168
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; test
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; test
Distance : 4

169
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; nullNotPermitted
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; nullNotPermitted
Distance : 4

170
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; []
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; []
Distance : 4

171
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; {}
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; {}
Distance : 4

172
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; !
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; !
Distance : 4

173
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Node
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Node
Distance : 4

174
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Exception
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Exception
Distance : 4

175
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; lines
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; lines
Distance : 4

176
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; verify
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; verify
Distance : 4

177
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Integer
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Integer
Distance : 4

178
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; v
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; v
Distance : 4

179
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; assertEquals
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; assertEquals
Distance : 4

180
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; mock
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; mock
Distance : 4

181
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; true
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; true
Distance : 4

182
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; mode
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; mode
Distance : 4

183
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; List
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; List
Distance : 4

184
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Args
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Args
Distance : 4

185
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; try
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; try
Distance : 4

186
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; result
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; result
Distance : 4

187
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; m
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; m
Distance : 4

188
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; paint
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; paint
Distance : 4

189
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; type
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; type
Distance : 4

190
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; *
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; *
Distance : 4

191
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; boolean
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; boolean
Distance : 4

192
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; serialised
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; serialised
Distance : 4

193
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; options
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; options
Distance : 4

194
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ,
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; ,
Distance : 4

195
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; [
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; [
Distance : 4

196
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Preconditions
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Preconditions
Distance : 4

197
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; -
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; -
Distance : 4

198
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; :
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; :
Distance : 4

199
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Test
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ; Test
Distance : 4

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

1
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 2

2
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

3
Tree	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

4
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

5
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

6
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

7
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

8
Tree	{ for ( Node fromNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

9
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

10
Tree	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

11
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

12
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

13
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

14
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

15
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

16
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

17
Tree	{ for ( Node fromNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

18
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 2

19
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

20
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

21
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

22
Tree	{ for ( Node fromNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

23
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

24
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

25
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 4

26
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

27
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

28
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

29
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 1

30
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

31
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 2

32
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

33
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

34
Tree	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

35
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

36
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

37
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

38
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

39
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

40
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

41
Tree	{ for ( Node fromNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

42
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

43
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 4

44
Tree	{ for ( Node fromNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

45
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

46
Tree	{ for ( Node fromNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

47
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

48
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

49
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 2

50
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

51
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

52
Tree	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

53
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

54
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

55
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

56
Tree	{ for ( Node parent : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

57
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

58
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

59
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 4

60
Tree	{ for ( Node fromNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

61
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

62
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

63
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

64
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

65
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

66
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 4

67
Tree	{ for ( Node parent : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

68
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

69
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

70
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

71
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

72
Tree	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

73
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 3

74
Tree	{ for ( Node parent : get . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

75
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

76
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

77
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

78
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

79
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 3

80
Tree	{ for ( Node parent : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

81
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

82
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

83
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

84
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

85
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

86
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

87
Tree	{ for ( Node parent : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

88
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

89
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

90
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

91
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

92
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { fromNode . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

93
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

94
Tree	{ for ( Node parent : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

95
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

96
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 4

97
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

98
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

99
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

100
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

101
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

102
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , parent ) ; } }
Distance : 4

103
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

104
Tree	{ for ( Node fromNode : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

105
Tree	{ for ( Node fromNode : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

106
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

107
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

108
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

109
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

110
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

111
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

112
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

113
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

114
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

115
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

116
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

117
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

118
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

119
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

120
Tree	{ for ( Node fromNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

121
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

122
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

123
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

124
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

125
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

126
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

127
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

128
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

129
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

130
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

131
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

132
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

133
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 3

134
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

135
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 4

136
Tree	{ for ( Node finallyNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

137
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

138
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 6

139
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

140
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

141
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

142
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

143
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 6

144
Tree	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

145
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

146
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

147
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

148
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

149
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

150
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

151
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 6

152
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 4

153
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

154
Tree	{ for ( Node fromNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node fromNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 6

155
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

156
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

157
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

158
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

159
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 6

160
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

161
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

162
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

163
Tree	{ for ( Node finallyNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

164
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 1

165
Tree	{ for ( Node parent : get . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 6

166
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

167
Tree	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

168
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

169
Tree	{ for ( Node fromNode : get . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : get . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

170
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

171
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

172
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

173
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

174
Tree	{ for ( Node fromNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : get . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

175
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

176
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { parent . get ( fromNode , Branch.UNCOND , parent ) ; } }
Distance : 5

177
Tree	{ for ( Node finallyNode : get . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : get . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 6

178
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

179
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

180
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

181
Tree	{ for ( Node parent : get . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : get . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

182
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

183
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

184
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

185
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

186
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( parent , Branch.UNCOND , fromNode ) ; } }
Distance : 5

187
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . get ( parent , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

188
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

189
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

190
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 2

191
Tree	{ for ( Node parent : get . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : get . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 6

192
Tree	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node parent : get . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

193
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( fromNode ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

194
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

195
Tree	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 3

196
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

197
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 3

198
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 2

199
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , parent ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . get ( parent , Branch.UNCOND , parent ) ; } }
Distance : 5

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } externs
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } externs
Distance : 3

1
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } FastMath
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } FastMath
Distance : 3

2
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } reportCodeChange
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } reportCodeChange
Distance : 3

3
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } IllegalArgumentException
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } IllegalArgumentException
Distance : 3

4
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } !=
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } !=
Distance : 3

5
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } testSame
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } testSame
Distance : 3

6
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } parent
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } parent
Distance : 3

7
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } createIllegalArgumentException
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } createIllegalArgumentException
Distance : 3

8
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } str
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } str
Distance : 3

9
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } LINE_JOINER
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } LINE_JOINER
Distance : 3

10
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } assertThat
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } assertThat
Distance : 3

11
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } invocation
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } invocation
Distance : 3

12
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ,
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ,
Distance : 3

13
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } .
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } .
Distance : 3

14
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } x
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } x
Distance : 3

15
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } assertEquals
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } assertEquals
Distance : 3

16
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } T
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } T
Distance : 3

17
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } []
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } []
Distance : 3

18
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } throws
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } throws
Distance : 3

19
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } returnZero
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } returnZero
Distance : 3

20
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getFirstChild
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getFirstChild
Distance : 3

21
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } UnivariateFunction
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } UnivariateFunction
Distance : 3

22
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } expected
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } expected
Distance : 3

23
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } sb
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } sb
Distance : 3

24
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } name
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } name
Distance : 3

25
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } field
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } field
Distance : 3

26
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } (
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } (
Distance : 3

27
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } =
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } =
Distance : 3

28
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } }
Distance : 3

29
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ()
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ()
Distance : 3

30
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } {
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } {
Distance : 3

31
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } new
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } new
Distance : 3

32
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Distance : 3

33
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Distance : 3

34
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } return
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } return
Distance : 3

35
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } &&
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } &&
Distance : 3

36
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } assertTrue
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } assertTrue
Distance : 3

37
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } super
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } super
Distance : 3

38
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } value
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } value
Distance : 3

39
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } checkState
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } checkState
Distance : 3

40
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } int
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } int
Distance : 3

41
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } i
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } i
Distance : 3

42
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } return
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } return
Distance : 3

43
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <blank>
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <blank>
Distance : 3

44
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ;
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ;
Distance : 3

45
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } )
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } )
Distance : 3

46
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } checkArgument
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } checkArgument
Distance : 3

47
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } t
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } t
Distance : 3

48
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <s>
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <s>
Distance : 3

49
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } !
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } !
Distance : 3

50
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } d
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } d
Distance : 3

51
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } index
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } index
Distance : 3

52
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } :
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } :
Distance : 3

53
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } fail
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } fail
Distance : 3

54
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } List
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } List
Distance : 3

55
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Args
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Args
Distance : 3

56
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } try
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } try
Distance : 3

57
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getParent
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getParent
Distance : 3

58
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

59
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

60
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

61
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

62
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

63
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

64
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

65
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

66
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

67
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

68
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

69
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 1

70
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

71
Tree	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

72
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } node
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } node
Distance : 3

73
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } isBlock
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } isBlock
Distance : 3

74
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } setUp
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } setUp
Distance : 3

75
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } invocations
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } invocations
Distance : 3

76
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } equals
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } equals
Distance : 3

77
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } for
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } for
Distance : 3

78
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Invocation
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Invocation
Distance : 3

79
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } js
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } js
Distance : 3

80
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } TestUtilities
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } TestUtilities
Distance : 3

81
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } StrBuilder
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } StrBuilder
Distance : 3

82
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } reportMatcher
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } reportMatcher
Distance : 3

83
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } StringBuilder
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } StringBuilder
Distance : 3

84
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } size
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } size
Distance : 3

85
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } scope
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } scope
Distance : 3

86
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } paint
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } paint
Distance : 3

87
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } append
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } append
Distance : 3

88
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } result
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } result
Distance : 3

89
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } nullNotPermitted
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } nullNotPermitted
Distance : 3

90
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } m
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } m
Distance : 3

91
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } @
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } @
Distance : 3

92
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } false
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } false
Distance : 3

93
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } double
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } double
Distance : 3

94
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } values
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } values
Distance : 3

95
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } protected
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } protected
Distance : 3

96
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } out
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } out
Distance : 3

97
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } test
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } test
Distance : 3

98
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } return;
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } return;
Distance : 3

99
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 2

100
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } get
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } get
Distance : 3

101
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } >
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } >
Distance : 3

102
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } public
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } public
Distance : 3

103
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } final
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } final
Distance : 3

104
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } this
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } this
Distance : 3

105
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <
Distance : 3

106
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } if
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } if
Distance : 3

107
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ArrayList
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ArrayList
Distance : 3

108
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } fireChangeEvent
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } fireChangeEvent
Distance : 3

109
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getInstance
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getInstance
Distance : 3

110
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } join
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } join
Distance : 3

111
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } JSType
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } JSType
Distance : 3

112
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

113
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ]
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ]
Distance : 3

114
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } length
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } length
Distance : 3

115
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } v
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } v
Distance : 3

116
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Integer
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Integer
Distance : 3

117
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } verify
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } verify
Distance : 3

118
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } null
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } null
Distance : 3

119
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } +
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } +
Distance : 3

120
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } static
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } static
Distance : 3

121
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } setAcceptedLanguage
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } setAcceptedLanguage
Distance : 3

122
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } notifyListeners
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } notifyListeners
Distance : 3

123
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } c
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } c
Distance : 3

124
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } {}
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } {}
Distance : 3

125
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } mock
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } mock
Distance : 3

126
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } true
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } true
Distance : 3

127
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } mode
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } mode
Distance : 3

128
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } *
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } *
Distance : 3

129
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } -
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } -
Distance : 3

130
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } lines
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } lines
Distance : 3

131
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } boolean
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } boolean
Distance : 3

132
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } isEmpty
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } isEmpty
Distance : 3

133
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } char
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } char
Distance : 3

134
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } instant
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } instant
Distance : 3

135
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } else
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } else
Distance : 3

136
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } stream
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } stream
Distance : 3

137
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getMessage
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } getMessage
Distance : 3

138
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } abs
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } abs
Distance : 3

139
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } matcher
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } matcher
Distance : 3

140
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } serialised
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } serialised
Distance : 3

141
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Exception
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Exception
Distance : 3

142
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Preconditions
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Preconditions
Distance : 3

143
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } compiler
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } compiler
Distance : 3

144
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ParamChecks
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ParamChecks
Distance : 3

145
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } array
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } array
Distance : 3

146
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <>
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <>
Distance : 3

147
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } contains
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } contains
Distance : 3

148
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } chrono
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } chrono
Distance : 3

149
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Node
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Node
Distance : 3

150
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } traverseEs6
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } traverseEs6
Distance : 3

151
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } a
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } a
Distance : 3

152
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } LanguageMode.ECMASCRIPT_2015
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } LanguageMode.ECMASCRIPT_2015
Distance : 3

153
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } MutableTimePeriod
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } MutableTimePeriod
Distance : 3

154
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } b
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } b
Distance : 3

155
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } s
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } s
Distance : 3

156
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } isNormalBlock
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } isNormalBlock
Distance : 3

157
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } obj
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } obj
Distance : 3

158
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <=
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } <=
Distance : 3

159
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Double
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Double
Distance : 3

160
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } clone
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } clone
Distance : 3

161
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } f
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } f
Distance : 3

162
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Override
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Override
Distance : 3

163
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } stroke
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } stroke
Distance : 3

164
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Object
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Object
Distance : 3

165
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } String
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } String
Distance : 3

166
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } MathRuntimeException
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } MathRuntimeException
Distance : 3

167
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } n
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } n
Distance : 3

168
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } throw
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } throw
Distance : 3

169
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } catch
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } catch
Distance : 3

170
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } void
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } void
Distance : 3

171
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ==
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ==
Distance : 3

172
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Assert
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Assert
Distance : 3

173
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ?
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ?
Distance : 3

174
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } e
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } e
Distance : 3

175
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Fraction
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Fraction
Distance : 3

176
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } /
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } /
Distance : 3

177
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } long
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } long
Distance : 3

178
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } TestUtils
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } TestUtils
Distance : 3

179
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } [
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } [
Distance : 3

180
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } sqrt
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } sqrt
Distance : 3

181
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } PeriodType
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } PeriodType
Distance : 3

182
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } class
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } class
Distance : 3

183
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } checkNotNull
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } checkNotNull
Distance : 3

184
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } type
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } type
Distance : 3

185
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Math
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Math
Distance : 3

186
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } root
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } root
Distance : 3

187
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } NodeUtil
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } NodeUtil
Distance : 3

188
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } wanted
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } wanted
Distance : 3

189
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } data
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } data
Distance : 3

190
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } add
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } add
Distance : 3

191
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } source
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } source
Distance : 3

192
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ex
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } ex
Distance : 3

193
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } toString
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } toString
Distance : 3

194
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } options
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } options
Distance : 3

195
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } p
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } p
Distance : 3

196
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Test
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Test
Distance : 3

197
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Class
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } Class
Distance : 3

198
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } NodeTraversal
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } NodeTraversal
Distance : 3

199
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } mockingProgress
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper ( n ) ; } } mockingProgress
Distance : 3

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; c
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; c
Distance : 5

1
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; fail
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; fail
Distance : 5

2
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; List
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; List
Distance : 5

3
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Args
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Args
Distance : 5

4
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; try
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; try
Distance : 5

5
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; result
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; result
Distance : 5

6
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; type
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; type
Distance : 5

7
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; externs
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; externs
Distance : 5

8
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertThat
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertThat
Distance : 5

9
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; long
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; long
Distance : 5

10
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertTrue
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertTrue
Distance : 5

11
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; void
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; void
Distance : 5

12
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ==
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ==
Distance : 5

13
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; &&
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; &&
Distance : 5

14
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; T
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; T
Distance : 5

15
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; super
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; super
Distance : 5

16
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; value
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; value
Distance : 5

17
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkState
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkState
Distance : 5

18
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; int
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; int
Distance : 5

19
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !=
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !=
Distance : 5

20
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertEquals
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; assertEquals
Distance : 5

21
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; !
Distance : 5

22
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; :
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; :
Distance : 5

23
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; []
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; []
Distance : 5

24
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; *
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; *
Distance : 5

25
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; boolean
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; boolean
Distance : 5

26
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; t
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; t
Distance : 5

27
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; name
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; name
Distance : 5

28
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; expected
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; expected
Distance : 5

29
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; FastMath
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; FastMath
Distance : 5

30
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; reportCodeChange
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; reportCodeChange
Distance : 5

31
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; IllegalArgumentException
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; IllegalArgumentException
Distance : 5

32
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; testSame
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; testSame
Distance : 5

33
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; x
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; x
Distance : 5

34
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; parent
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; parent
Distance : 5

35
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; createIllegalArgumentException
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; createIllegalArgumentException
Distance : 5

36
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; str
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; str
Distance : 5

37
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; LINE_JOINER
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; LINE_JOINER
Distance : 5

38
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; notifyListeners
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; notifyListeners
Distance : 5

39
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; invocation
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; invocation
Distance : 5

40
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; paint
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; paint
Distance : 5

41
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; m
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; m
Distance : 5

42
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ArrayList
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ArrayList
Distance : 5

43
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; fireChangeEvent
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; fireChangeEvent
Distance : 5

44
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; getInstance
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; getInstance
Distance : 5

45
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; serialised
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; serialised
Distance : 5

46
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; join
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; join
Distance : 5

47
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkArgument
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkArgument
Distance : 5

48
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; field
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; field
Distance : 5

49
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; nullNotPermitted
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; nullNotPermitted
Distance : 5

50
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; i
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; i
Distance : 5

51
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

52
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

53
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

54
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 5

55
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

56
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

57
Tree	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

58
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

59
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

60
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

61
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

62
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

63
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 5

64
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

65
Tree	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

66
Tree	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

67
Tree	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

68
Tree	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

69
Tree	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

70
Tree	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

71
Tree	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

72
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

73
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; test
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; test
Distance : 5

74
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

75
Tree	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

76
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; false
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; false
Distance : 5

77
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; @
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; @
Distance : 5

78
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Fraction
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Fraction
Distance : 5

79
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkNotNull
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; checkNotNull
Distance : 5

80
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ?
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ?
Distance : 5

81
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Assert
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Assert
Distance : 5

82
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ]
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ]
Distance : 5

83
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; [
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; [
Distance : 5

84
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; /
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; /
Distance : 5

85
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; -
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; -
Distance : 5

86
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mode
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mode
Distance : 5

87
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; true
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; true
Distance : 5

88
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mock
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mock
Distance : 5

89
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {}
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {}
Distance : 5

90
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; double
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; double
Distance : 5

91
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Preconditions
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Preconditions
Distance : 5

92
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

93
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

94
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

95
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

96
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 4

97
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

98
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; catch
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; catch
Distance : 5

99
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

100
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; n
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; n
Distance : 5

101
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; new
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; new
Distance : 5

102
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {
Distance : 5

103
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ()
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ()
Distance : 5

104
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; }
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; }
Distance : 5

105
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; =
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; =
Distance : 5

106
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ex
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ex
Distance : 5

107
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NodeTraversal
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NodeTraversal
Distance : 5

108
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; add
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; add
Distance : 5

109
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; data
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; data
Distance : 5

110
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; wanted
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; wanted
Distance : 5

111
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NodeUtil
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NodeUtil
Distance : 5

112
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; root
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; root
Distance : 5

113
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; instant
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; instant
Distance : 5

114
Tree	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

115
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; e
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; e
Distance : 5

116
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Override
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Override
Distance : 5

117
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ParamChecks
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ParamChecks
Distance : 5

118
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; public
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; public
Distance : 5

119
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; >
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; >
Distance : 5

120
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; null
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; null
Distance : 5

121
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; +
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; +
Distance : 5

122
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ,
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ,
Distance : 5

123
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; .
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; .
Distance : 5

124
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; STRING_CONSTANT
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; STRING_CONSTANT
Distance : 5

125
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; )
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; )
Distance : 5

126
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <blank>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <blank>
Distance : 5

127
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Distance : 5

128
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <s>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <s>
Distance : 5

129
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; (
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; (
Distance : 5

130
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <>
Distance : 5

131
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; array
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; array
Distance : 5

132
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Distance : 5

133
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NUMBER_CONSTANT
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; NUMBER_CONSTANT
Distance : 5

134
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; stream
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; stream
Distance : 5

135
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; toString
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; toString
Distance : 5

136
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; return
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; return
Distance : 5

137
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; length
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; length
Distance : 5

138
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Integer
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Integer
Distance : 5

139
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; verify
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; verify
Distance : 5

140
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; lines
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; lines
Distance : 5

141
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Exception
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Exception
Distance : 5

142
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Node
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Node
Distance : 5

143
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; contains
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; contains
Distance : 5

144
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; chrono
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; chrono
Distance : 5

145
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; traverseEs6
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; traverseEs6
Distance : 5

146
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; a
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; a
Distance : 5

147
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; LanguageMode.ECMASCRIPT_2015
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; LanguageMode.ECMASCRIPT_2015
Distance : 5

148
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; MutableTimePeriod
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; MutableTimePeriod
Distance : 5

149
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; b
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; b
Distance : 5

150
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; StringBuilder
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; StringBuilder
Distance : 5

151
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; stroke
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; stroke
Distance : 5

152
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; return;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; return;
Distance : 5

153
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; size
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; size
Distance : 5

154
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; options
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; options
Distance : 5

155
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; p
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; p
Distance : 5

156
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Test
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Test
Distance : 5

157
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Class
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Class
Distance : 5

158
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Math
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Math
Distance : 5

159
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; else
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; else
Distance : 5

160
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; source
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; source
Distance : 5

161
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; v
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; v
Distance : 5

162
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; char
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; char
Distance : 5

163
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; isEmpty
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; isEmpty
Distance : 5

164
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; JSType
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; JSType
Distance : 5

165
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; get
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; get
Distance : 5

166
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mockingProgress
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; mockingProgress
Distance : 5

167
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; TestUtils
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; TestUtils
Distance : 5

168
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Invocation
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Invocation
Distance : 5

169
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; for
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; for
Distance : 5

170
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; equals
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; equals
Distance : 5

171
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; d
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; d
Distance : 5

172
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; index
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; index
Distance : 5

173
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; node
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; node
Distance : 5

174
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; out
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; out
Distance : 5

175
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; getParent
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; getParent
Distance : 5

176
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; invocations
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; invocations
Distance : 5

177
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; protected
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; protected
Distance : 5

178
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; values
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; values
Distance : 5

179
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; class
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; class
Distance : 5

180
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; js
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; js
Distance : 5

181
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; setUp
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; setUp
Distance : 5

182
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; TestUtilities
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; TestUtilities
Distance : 5

183
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; final
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; final
Distance : 5

184
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; reportMatcher
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; reportMatcher
Distance : 5

185
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; static
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; static
Distance : 5

186
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; setAcceptedLanguage
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; setAcceptedLanguage
Distance : 5

187
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; matcher
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; matcher
Distance : 5

188
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; abs
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; abs
Distance : 5

189
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Object
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; Object
Distance : 5

190
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; getMessage
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; getMessage
Distance : 5

191
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; MathRuntimeException
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; MathRuntimeException
Distance : 5

192
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; f
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; f
Distance : 5

193
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; String
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; String
Distance : 5

194
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; compiler
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; compiler
Distance : 5

195
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; if
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; if
Distance : 5

196
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <
Distance : 5

197
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; this
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; this
Distance : 5

198
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; StrBuilder
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; StrBuilder
Distance : 5

199
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; throw
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; throw
Distance : 5

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	c . canInline () index
Code	c . canInline () index
Distance : 5

1
Tree	c . canInline () options
Code	c . canInline () options
Distance : 5

2
Tree	c . canInline () p
Code	c . canInline () p
Distance : 5

3
Tree	c . canInline () &&
Code	c . canInline () &&
Distance : 5

4
Tree	c . canInline () T
Code	c . canInline () T
Distance : 5

5
Tree	c . canInline () super
Code	c . canInline () super
Distance : 5

6
Tree	c . canInline () value
Code	c . canInline () value
Distance : 5

7
Tree	c . canInline () class
Code	c . canInline () class
Distance : 5

8
Tree	c . canInline () Object
Code	c . canInline () Object
Distance : 5

9
Tree	c . canInline () MathRuntimeException
Code	c . canInline () MathRuntimeException
Distance : 5

10
Tree	c . canInline () Override
Code	c . canInline () Override
Distance : 5

11
Tree	c . canInline () assertEquals
Code	c . canInline () assertEquals
Distance : 5

12
Tree	c . canInline () !
Code	c . canInline () !
Distance : 5

13
Tree	c . canInline () []
Code	c . canInline () []
Distance : 5

14
Tree	c . canInline () nullNotPermitted
Code	c . canInline () nullNotPermitted
Distance : 5

15
Tree	c . canInline () throw
Code	c . canInline () throw
Distance : 5

16
Tree	c . canInline () catch
Code	c . canInline () catch
Distance : 5

17
Tree	c . canInline () void
Code	c . canInline () void
Distance : 5

18
Tree	c . canInline () ==
Code	c . canInline () ==
Distance : 5

19
Tree	c . canInline () double
Code	c . canInline () double
Distance : 5

20
Tree	c . canInline () node
Code	c . canInline () node
Distance : 5

21
Tree	c . canInline () >
Code	c . canInline () >
Distance : 5

22
Tree	c . canInline () source
Code	c . canInline () source
Distance : 5

23
Tree	c . canInline () null
Code	c . canInline () null
Distance : 5

24
Tree	c . canInline () toString
Code	c . canInline () toString
Distance : 5

25
Tree	c . canInline () @
Code	c . canInline () @
Distance : 5

26
Tree	c . canInline () mock
Code	c . canInline () mock
Distance : 5

27
Tree	c . canInline () {}
Code	c . canInline () {}
Distance : 5

28
Tree	c . canInline () if
Code	c . canInline () if
Distance : 5

29
Tree	c . canInline () <
Code	c . canInline () <
Distance : 5

30
Tree	c . canInline () this
Code	c . canInline () this
Distance : 5

31
Tree	c . canInline () final
Code	c . canInline () final
Distance : 5

32
Tree	c . canInline () =
Code	c . canInline () =
Distance : 5

33
Tree	c . canInline () }
Code	c . canInline () }
Distance : 5

34
Tree	c . canInline () mode
Code	c . canInline () mode
Distance : 5

35
Tree	c . canInline () ()
Code	c . canInline () ()
Distance : 5

36
Tree	c . canInline () <blank>
Code	c . canInline () <blank>
Distance : 5

37
Tree	c . canInline () c
Code	c . canInline () c
Distance : 5

38
Tree	c . canInline () <s>
Code	c . canInline () <s>
Distance : 5

39
Tree	c . canInline () (
Code	c . canInline () (
Distance : 5

40
Tree	c . canInline () ;
Code	c . canInline () ;
Distance : 5

41
Tree	c . canInline () )
Code	c . canInline () )
Distance : 4

42
Tree	c . canInline () .
Code	c . canInline () .
Distance : 5

43
Tree	c . canInline () ,
Code	c . canInline () ,
Distance : 5

44
Tree	c . canInline () +
Code	c . canInline () +
Distance : 5

45
Tree	c . canInline () {
Code	c . canInline () {
Distance : 5

46
Tree	c . canInline () test
Code	c . canInline () test
Distance : 5

47
Tree	c . canInline () false
Code	c . canInline () false
Distance : 5

48
Tree	c . canInline () true
Code	c . canInline () true
Distance : 5

49
Tree	c . canInline () new
Code	c . canInline () new
Distance : 5

50
Tree	c . canInline () dataset
Code	c . canInline () dataset
Distance : 5

51
Tree	c . canInline () IllegalArgumentException
Code	c . canInline () IllegalArgumentException
Distance : 5

52
Tree	c . canInline () reportCodeChange
Code	c . canInline () reportCodeChange
Distance : 5

53
Tree	c . canInline () FastMath
Code	c . canInline () FastMath
Distance : 5

54
Tree	c . canInline () expected
Code	c . canInline () expected
Distance : 5

55
Tree	c . canInline () -
Code	c . canInline () -
Distance : 5

56
Tree	c . canInline () invocations
Code	c . canInline () invocations
Distance : 5

57
Tree	c . canInline () [
Code	c . canInline () [
Distance : 5

58
Tree	c . canInline () Preconditions
Code	c . canInline () Preconditions
Distance : 5

59
Tree	c . canInline () char
Code	c . canInline () char
Distance : 5

60
Tree	c . canInline () isEmpty
Code	c . canInline () isEmpty
Distance : 5

61
Tree	c . canInline () JSType
Code	c . canInline () JSType
Distance : 5

62
Tree	c . canInline () get
Code	c . canInline () get
Distance : 5

63
Tree	c . canInline () abs
Code	c . canInline () abs
Distance : 5

64
Tree	c . canInline () matcher
Code	c . canInline () matcher
Distance : 5

65
Tree	c . canInline () setAcceptedLanguage
Code	c . canInline () setAcceptedLanguage
Distance : 5

66
Tree	c . canInline () static
Code	c . canInline () static
Distance : 5

67
Tree	c . canInline () values
Code	c . canInline () values
Distance : 5

68
Tree	c . canInline () protected
Code	c . canInline () protected
Distance : 5

69
Tree	c . canInline () ]
Code	c . canInline () ]
Distance : 5

70
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

71
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

72
Tree	c . canInline () return
Code	c . canInline () return
Distance : 5

73
Tree	c . canInline () PlotChangeEvent
Code	c . canInline () PlotChangeEvent
Distance : 5

74
Tree	c . canInline () NUMBER_CONSTANT
Code	c . canInline () NUMBER_CONSTANT
Distance : 5

75
Tree	c . canInline () out
Code	c . canInline () out
Distance : 5

76
Tree	c . canInline () d
Code	c . canInline () d
Distance : 5

77
Tree	c . canInline () equals
Code	c . canInline () equals
Distance : 5

78
Tree	c . canInline () for
Code	c . canInline () for
Distance : 5

79
Tree	c . canInline () Invocation
Code	c . canInline () Invocation
Distance : 5

80
Tree	c . canInline () /
Code	c . canInline () /
Distance : 5

81
Tree	c . canInline () long
Code	c . canInline () long
Distance : 5

82
Tree	c . canInline () assertTrue
Code	c . canInline () assertTrue
Distance : 5

83
Tree	c . canInline () public
Code	c . canInline () public
Distance : 5

84
Tree	c . canInline () externs
Code	c . canInline () externs
Distance : 5

85
Tree	c . canInline () StrBuilder
Code	c . canInline () StrBuilder
Distance : 5

86
Tree	c . canInline () TestUtilities
Code	c . canInline () TestUtilities
Distance : 5

87
Tree	c . canInline () js
Code	c . canInline () js
Distance : 5

88
Tree	c . canInline () getMessage
Code	c . canInline () getMessage
Distance : 5

89
Tree	c . canInline () stream
Code	c . canInline () stream
Distance : 5

90
Tree	c . canInline () else
Code	c . canInline () else
Distance : 5

91
Tree	c . canInline () instant
Code	c . canInline () instant
Distance : 5

92
Tree	c . canInline () s
Code	c . canInline () s
Distance : 5

93
Tree	c . canInline () isNormalBlock
Code	c . canInline () isNormalBlock
Distance : 5

94
Tree	c . canInline () reportMatcher
Code	c . canInline () reportMatcher
Distance : 5

95
Tree	c . canInline () Collection
Code	c . canInline () Collection
Distance : 5

96
Tree	c . canInline () getField
Code	c . canInline () getField
Distance : 5

97
Tree	c . canInline () STRING_CONSTANT
Code	c . canInline () STRING_CONSTANT
Distance : 5

98
Tree	c . canInline () obj
Code	c . canInline () obj
Distance : 5

99
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

100
Tree	c . canInline () traverseEs6
Code	c . canInline () traverseEs6
Distance : 5

101
Tree	c . canInline () size
Code	c . canInline () size
Distance : 5

102
Tree	c . canInline () return;
Code	c . canInline () return;
Distance : 5

103
Tree	c . canInline () mockingProgress
Code	c . canInline () mockingProgress
Distance : 5

104
Tree	c . canInline () a
Code	c . canInline () a
Distance : 5

105
Tree	c . canInline () LanguageMode.ECMASCRIPT_2015
Code	c . canInline () LanguageMode.ECMASCRIPT_2015
Distance : 5

106
Tree	c . canInline () MutableTimePeriod
Code	c . canInline () MutableTimePeriod
Distance : 5

107
Tree	c . canInline () b
Code	c . canInline () b
Distance : 5

108
Tree	c . canInline () scope
Code	c . canInline () scope
Distance : 5

109
Tree	c . canInline () throws
Code	c . canInline () throws
Distance : 5

110
Tree	c . canInline () StringBuilder
Code	c . canInline () StringBuilder
Distance : 5

111
Tree	c . canInline () returnZero
Code	c . canInline () returnZero
Distance : 5

112
Tree	c . canInline () Double
Code	c . canInline () Double
Distance : 5

113
Tree	c . canInline () PeriodType
Code	c . canInline () PeriodType
Distance : 5

114
Tree	c . canInline () clone
Code	c . canInline () clone
Distance : 5

115
Tree	c . canInline () sqrt
Code	c . canInline () sqrt
Distance : 5

116
Tree	c . canInline () isBlock
Code	c . canInline () isBlock
Distance : 5

117
Tree	c . canInline () append
Code	c . canInline () append
Distance : 5

118
Tree	c . canInline () sb
Code	c . canInline () sb
Distance : 5

119
Tree	c . canInline () LanguageMode.ECMASCRIPT6
Code	c . canInline () LanguageMode.ECMASCRIPT6
Distance : 5

120
Tree	c . canInline () stroke
Code	c . canInline () stroke
Distance : 5

121
Tree	c . canInline () getFirstChild
Code	c . canInline () getFirstChild
Distance : 5

122
Tree	c . canInline () contains
Code	c . canInline () contains
Distance : 5

123
Tree	c . canInline () chrono
Code	c . canInline () chrono
Distance : 5

124
Tree	c . canInline () UnivariateFunction
Code	c . canInline () UnivariateFunction
Distance : 5

125
Tree	c . canInline () lines
Code	c . canInline () lines
Distance : 5

126
Tree	c . canInline () verify
Code	c . canInline () verify
Distance : 5

127
Tree	c . canInline () str
Code	c . canInline () str
Distance : 5

128
Tree	c . canInline () LINE_JOINER
Code	c . canInline () LINE_JOINER
Distance : 5

129
Tree	c . canInline () assertThat
Code	c . canInline () assertThat
Distance : 5

130
Tree	c . canInline () invocation
Code	c . canInline () invocation
Distance : 5

131
Tree	c . canInline () ArrayList
Code	c . canInline () ArrayList
Distance : 5

132
Tree	c . canInline () fireChangeEvent
Code	c . canInline () fireChangeEvent
Distance : 5

133
Tree	c . canInline () getInstance
Code	c . canInline () getInstance
Distance : 5

134
Tree	c . canInline () serialised
Code	c . canInline () serialised
Distance : 5

135
Tree	c . canInline () createIllegalArgumentException
Code	c . canInline () createIllegalArgumentException
Distance : 5

136
Tree	c . canInline () parent
Code	c . canInline () parent
Distance : 5

137
Tree	c . canInline () x
Code	c . canInline () x
Distance : 5

138
Tree	c . canInline () testSame
Code	c . canInline () testSame
Distance : 5

139
Tree	c . canInline () :
Code	c . canInline () :
Distance : 5

140
Tree	c . canInline () fail
Code	c . canInline () fail
Distance : 5

141
Tree	c . canInline () List
Code	c . canInline () List
Distance : 5

142
Tree	c . canInline () Args
Code	c . canInline () Args
Distance : 5

143
Tree	c . canInline () alpha
Code	c . canInline () alpha
Distance : 5

144
Tree	c . canInline () f
Code	c . canInline () f
Distance : 5

145
Tree	c . canInline () valueOf
Code	c . canInline () valueOf
Distance : 5

146
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

147
Tree	c . canInline () <>
Code	c . canInline () <>
Distance : 5

148
Tree	c . canInline () ParamChecks
Code	c . canInline () ParamChecks
Distance : 5

149
Tree	c . canInline () ?
Code	c . canInline () ?
Distance : 5

150
Tree	c . canInline () result
Code	c . canInline () result
Distance : 5

151
Tree	c . canInline () try
Code	c . canInline () try
Distance : 5

152
Tree	c . canInline () join
Code	c . canInline () join
Distance : 5

153
Tree	c . canInline () boolean
Code	c . canInline () boolean
Distance : 5

154
Tree	c . canInline () *
Code	c . canInline () *
Distance : 5

155
Tree	c . canInline () type
Code	c . canInline () type
Distance : 5

156
Tree	c . canInline () TestUtils
Code	c . canInline () TestUtils
Distance : 5

157
Tree	c . canInline () length
Code	c . canInline () length
Distance : 5

158
Tree	c . canInline () v
Code	c . canInline () v
Distance : 5

159
Tree	c . canInline () checkNotNull
Code	c . canInline () checkNotNull
Distance : 5

160
Tree	c . canInline () Integer
Code	c . canInline () Integer
Distance : 5

161
Tree	c . canInline () NodeUtil
Code	c . canInline () NodeUtil
Distance : 5

162
Tree	c . canInline () root
Code	c . canInline () root
Distance : 5

163
Tree	c . canInline () Math
Code	c . canInline () Math
Distance : 5

164
Tree	c . canInline () checkArgument
Code	c . canInline () checkArgument
Distance : 5

165
Tree	c . canInline () field
Code	c . canInline () field
Distance : 5

166
Tree	c . canInline () t
Code	c . canInline () t
Distance : 5

167
Tree	c . canInline () name
Code	c . canInline () name
Distance : 5

168
Tree	c . canInline () data
Code	c . canInline () data
Distance : 5

169
Tree	c . canInline () NodeTraversal
Code	c . canInline () NodeTraversal
Distance : 5

170
Tree	c . canInline () wanted
Code	c . canInline () wanted
Distance : 5

171
Tree	c . canInline () paint
Code	c . canInline () paint
Distance : 5

172
Tree	c . canInline () m
Code	c . canInline () m
Distance : 5

173
Tree	c . canInline () ex
Code	c . canInline () ex
Distance : 5

174
Tree	c . canInline () Assert
Code	c . canInline () Assert
Distance : 5

175
Tree	c . canInline () Test
Code	c . canInline () Test
Distance : 5

176
Tree	c . canInline () Class
Code	c . canInline () Class
Distance : 5

177
Tree	c . canInline () notifyListeners
Code	c . canInline () notifyListeners
Distance : 5

178
Tree	c . canInline () c
Code	c . canInline () c
Distance : 5

179
Tree	c . canInline () n
Code	c . canInline () n
Distance : 5

180
Tree	c . canInline () e
Code	c . canInline () e
Distance : 5

181
Tree	c . canInline () String
Code	c . canInline () String
Distance : 5

182
Tree	c . canInline () add
Code	c . canInline () add
Distance : 5

183
Tree	c . canInline () checkState
Code	c . canInline () checkState
Distance : 5

184
Tree	c . canInline () compiler
Code	c . canInline () compiler
Distance : 5

185
Tree	c . canInline () i
Code	c . canInline () i
Distance : 5

186
Tree	c . canInline () !=
Code	c . canInline () !=
Distance : 5

187
Tree	c . canInline () simpleMethod
Code	c . canInline () simpleMethod
Distance : 5

188
Tree	c . canInline () getArgumentMatcherStorage
Code	c . canInline () getArgumentMatcherStorage
Distance : 5

189
Tree	c . canInline () y
Code	c . canInline () y
Distance : 5

190
Tree	c . canInline () optimizer
Code	c . canInline () optimizer
Distance : 5

191
Tree	c . canInline () getParent
Code	c . canInline () getParent
Distance : 5

192
Tree	c . canInline () setUp
Code	c . canInline () setUp
Distance : 5

193
Tree	c . canInline () Fraction
Code	c . canInline () Fraction
Distance : 5

194
Tree	c . canInline () array
Code	c . canInline () array
Distance : 5

195
Tree	c . canInline () int
Code	c . canInline () int
Distance : 5

196
Tree	c . canInline () Exception
Code	c . canInline () Exception
Distance : 5

197
Tree	c . canInline () Node
Code	c . canInline () Node
Distance : 5

198
Tree	c . canInline () instance
Code	c . canInline () instance
Distance : 5

199
Tree	c . canInline () <=
Code	c . canInline () <=
Distance : 5

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int len = thisBuf.length - strLen ; notifyListeners
Code	int len = thisBuf.length - strLen ; notifyListeners
Distance : 4

1
Tree	long size = thisBuf.length - strLen ;
Code	long size = thisBuf.length - strLen ;
Distance : 5

2
Tree	long strLen = thisBuf.length - strLen ;
Code	long strLen = thisBuf.length - strLen ;
Distance : 5

3
Tree	short len = thisBuf.length - len ;
Code	short len = thisBuf.length - len ;
Distance : 5

4
Tree	byte size = thisBuf.length - strLen ;
Code	byte size = thisBuf.length - strLen ;
Distance : 5

5
Tree	boolean size = thisBuf.length - strLen ;
Code	boolean size = thisBuf.length - strLen ;
Distance : 5

6
Tree	int size = thisBuf.length - len ;
Code	int size = thisBuf.length - len ;
Distance : 5

7
Tree	char size = thisBuf.length - strLen ;
Code	char size = thisBuf.length - strLen ;
Distance : 5

8
Tree	boolean len = thisBuf.length - size ;
Code	boolean len = thisBuf.length - size ;
Distance : 5

9
Tree	double size = thisBuf.length - strLen ;
Code	double size = thisBuf.length - strLen ;
Distance : 5

10
Tree	void len = thisBuf.length - len ;
Code	void len = thisBuf.length - len ;
Distance : 5

11
Tree	int strLen = thisBuf.length - strLen ;
Code	int strLen = thisBuf.length - strLen ;
Distance : 4

12
Tree	double len = thisBuf.length - size ;
Code	double len = thisBuf.length - size ;
Distance : 5

13
Tree	double len = thisBuf.length - strLen ;
Code	double len = thisBuf.length - strLen ;
Distance : 4

14
Tree	boolean len = thisBuf.length - strLen ;
Code	boolean len = thisBuf.length - strLen ;
Distance : 4

15
Tree	int len = thisBuf.length - len ;
Code	int len = thisBuf.length - len ;
Distance : 4

16
Tree	byte len = thisBuf.length - strLen ;
Code	byte len = thisBuf.length - strLen ;
Distance : 4

17
Tree	char len = thisBuf.length - strLen ;
Code	char len = thisBuf.length - strLen ;
Distance : 4

18
Tree	long len = thisBuf.length - strLen ;
Code	long len = thisBuf.length - strLen ;
Distance : 4

19
Tree	void len = thisBuf.length - strLen ;
Code	void len = thisBuf.length - strLen ;
Distance : 4

20
Tree	double len = thisBuf.length - len ;
Code	double len = thisBuf.length - len ;
Distance : 5

21
Tree	int len = thisBuf.length - size ;
Code	int len = thisBuf.length - size ;
Distance : 4

22
Tree	long len = thisBuf.length - size ;
Code	long len = thisBuf.length - size ;
Distance : 5

23
Tree	float len = thisBuf.length - strLen ;
Code	float len = thisBuf.length - strLen ;
Distance : 4

24
Tree	int strLen = thisBuf.length - len ;
Code	int strLen = thisBuf.length - len ;
Distance : 5

25
Tree	boolean strLen = thisBuf.length - strLen ;
Code	boolean strLen = thisBuf.length - strLen ;
Distance : 5

26
Tree	int len = thisBuf.length - strLen ; field
Code	int len = thisBuf.length - strLen ; field
Distance : 4

27
Tree	int len = thisBuf.length - strLen ; IllegalArgumentException
Code	int len = thisBuf.length - strLen ; IllegalArgumentException
Distance : 4

28
Tree	int len = thisBuf.length - strLen ; name
Code	int len = thisBuf.length - strLen ; name
Distance : 4

29
Tree	int len = thisBuf.length - strLen ; FastMath
Code	int len = thisBuf.length - strLen ; FastMath
Distance : 4

30
Tree	int len = thisBuf.length - strLen ; expected
Code	int len = thisBuf.length - strLen ; expected
Distance : 4

31
Tree	int len = thisBuf.length - strLen ; t
Code	int len = thisBuf.length - strLen ; t
Distance : 4

32
Tree	int len = thisBuf.length - strLen ; x
Code	int len = thisBuf.length - strLen ; x
Distance : 4

33
Tree	int len = thisBuf.length - strLen ; invocation
Code	int len = thisBuf.length - strLen ; invocation
Distance : 4

34
Tree	int len = thisBuf.length - strLen ; ArrayList
Code	int len = thisBuf.length - strLen ; ArrayList
Distance : 4

35
Tree	int len = thisBuf.length - strLen ; parent
Code	int len = thisBuf.length - strLen ; parent
Distance : 4

36
Tree	int len = thisBuf.length - strLen ; LINE_JOINER
Code	int len = thisBuf.length - strLen ; LINE_JOINER
Distance : 4

37
Tree	int len = thisBuf.length - strLen ; mode
Code	int len = thisBuf.length - strLen ; mode
Distance : 4

38
Tree	int len = thisBuf.length - strLen ; testSame
Code	int len = thisBuf.length - strLen ; testSame
Distance : 4

39
Tree	int len = thisBuf.length - strLen ; str
Code	int len = thisBuf.length - strLen ; str
Distance : 4

40
Tree	int len = thisBuf.length - strLen ; reportCodeChange
Code	int len = thisBuf.length - strLen ; reportCodeChange
Distance : 4

41
Tree	int len = thisBuf.length - strLen ; Object
Code	int len = thisBuf.length - strLen ; Object
Distance : 4

42
Tree	int len = thisBuf.length - strLen ; createIllegalArgumentException
Code	int len = thisBuf.length - strLen ; createIllegalArgumentException
Distance : 4

43
Tree	char len = thisBuf.length - size ;
Code	char len = thisBuf.length - size ;
Distance : 5

44
Tree	byte strLen = thisBuf.length - strLen ;
Code	byte strLen = thisBuf.length - strLen ;
Distance : 5

45
Tree	float len = thisBuf.length - len ;
Code	float len = thisBuf.length - len ;
Distance : 5

46
Tree	byte len = thisBuf.length - size ;
Code	byte len = thisBuf.length - size ;
Distance : 5

47
Tree	char strLen = thisBuf.length - strLen ;
Code	char strLen = thisBuf.length - strLen ;
Distance : 5

48
Tree	int len = thisBuf.length - strLen ; Test
Code	int len = thisBuf.length - strLen ; Test
Distance : 4

49
Tree	void len = thisBuf.length - size ;
Code	void len = thisBuf.length - size ;
Distance : 5

50
Tree	byte len = thisBuf.length - len ;
Code	byte len = thisBuf.length - len ;
Distance : 5

51
Tree	byte strLen = thisBuf.length - size ;
Code	byte strLen = thisBuf.length - size ;
Distance : 6

52
Tree	double strLen = thisBuf.length - len ;
Code	double strLen = thisBuf.length - len ;
Distance : 6

53
Tree	float strLen = thisBuf.length - len ;
Code	float strLen = thisBuf.length - len ;
Distance : 6

54
Tree	void strLen = thisBuf.length - len ;
Code	void strLen = thisBuf.length - len ;
Distance : 6

55
Tree	int strLen = thisBuf.length - size ;
Code	int strLen = thisBuf.length - size ;
Distance : 5

56
Tree	float strLen = thisBuf.length - strLen ;
Code	float strLen = thisBuf.length - strLen ;
Distance : 5

57
Tree	boolean strLen = thisBuf.length - len ;
Code	boolean strLen = thisBuf.length - len ;
Distance : 6

58
Tree	byte strLen = thisBuf.length - len ;
Code	byte strLen = thisBuf.length - len ;
Distance : 6

59
Tree	void size = thisBuf.length - strLen ;
Code	void size = thisBuf.length - strLen ;
Distance : 5

60
Tree	char strLen = thisBuf.length - len ;
Code	char strLen = thisBuf.length - len ;
Distance : 6

61
Tree	double size = thisBuf.length - len ;
Code	double size = thisBuf.length - len ;
Distance : 6

62
Tree	short len = thisBuf.length - size ;
Code	short len = thisBuf.length - size ;
Distance : 5

63
Tree	long strLen = thisBuf.length - len ;
Code	long strLen = thisBuf.length - len ;
Distance : 6

64
Tree	short strLen = thisBuf.length - strLen ;
Code	short strLen = thisBuf.length - strLen ;
Distance : 5

65
Tree	int size = thisBuf.length - size ;
Code	int size = thisBuf.length - size ;
Distance : 5

66
Tree	byte size = thisBuf.length - len ;
Code	byte size = thisBuf.length - len ;
Distance : 6

67
Tree	boolean size = thisBuf.length - len ;
Code	boolean size = thisBuf.length - len ;
Distance : 6

68
Tree	char size = thisBuf.length - len ;
Code	char size = thisBuf.length - len ;
Distance : 6

69
Tree	double strLen = thisBuf.length - size ;
Code	double strLen = thisBuf.length - size ;
Distance : 6

70
Tree	short size = thisBuf.length - strLen ;
Code	short size = thisBuf.length - strLen ;
Distance : 5

71
Tree	long size = thisBuf.length - len ;
Code	long size = thisBuf.length - len ;
Distance : 6

72
Tree	short size = thisBuf.length - size ;
Code	short size = thisBuf.length - size ;
Distance : 6

73
Tree	boolean len = thisBuf.length - len ;
Code	boolean len = thisBuf.length - len ;
Distance : 5

74
Tree	short strLen = thisBuf.length - size ;
Code	short strLen = thisBuf.length - size ;
Distance : 6

75
Tree	void size = thisBuf.length - size ;
Code	void size = thisBuf.length - size ;
Distance : 6

76
Tree	char len = thisBuf.length - len ;
Code	char len = thisBuf.length - len ;
Distance : 5

77
Tree	long len = thisBuf.length - len ;
Code	long len = thisBuf.length - len ;
Distance : 5

78
Tree	short len = thisBuf.length - strLen ;
Code	short len = thisBuf.length - strLen ;
Distance : 4

79
Tree	int size = thisBuf.length - strLen ;
Code	int size = thisBuf.length - strLen ;
Distance : 4

80
Tree	double strLen = thisBuf.length - strLen ;
Code	double strLen = thisBuf.length - strLen ;
Distance : 5

81
Tree	void strLen = thisBuf.length - strLen ;
Code	void strLen = thisBuf.length - strLen ;
Distance : 5

82
Tree	float size = thisBuf.length - strLen ;
Code	float size = thisBuf.length - strLen ;
Distance : 5

83
Tree	float len = thisBuf.length - size ;
Code	float len = thisBuf.length - size ;
Distance : 5

84
Tree	char strLen = thisBuf.length - size ;
Code	char strLen = thisBuf.length - size ;
Distance : 6

85
Tree	double size = thisBuf.length - size ;
Code	double size = thisBuf.length - size ;
Distance : 6

86
Tree	long strLen = thisBuf.length - size ;
Code	long strLen = thisBuf.length - size ;
Distance : 6

87
Tree	void size = thisBuf.length - len ;
Code	void size = thisBuf.length - len ;
Distance : 6

88
Tree	float size = thisBuf.length - len ;
Code	float size = thisBuf.length - len ;
Distance : 6

89
Tree	short strLen = thisBuf.length - len ;
Code	short strLen = thisBuf.length - len ;
Distance : 6

90
Tree	byte size = thisBuf.length - size ;
Code	byte size = thisBuf.length - size ;
Distance : 6

91
Tree	boolean size = thisBuf.length - size ;
Code	boolean size = thisBuf.length - size ;
Distance : 6

92
Tree	char size = thisBuf.length - size ;
Code	char size = thisBuf.length - size ;
Distance : 6

93
Tree	long size = thisBuf.length - size ;
Code	long size = thisBuf.length - size ;
Distance : 6

94
Tree	void strLen = thisBuf.length - size ;
Code	void strLen = thisBuf.length - size ;
Distance : 6

95
Tree	short size = thisBuf.length - len ;
Code	short size = thisBuf.length - len ;
Distance : 6

96
Tree	float strLen = thisBuf.length - size ;
Code	float strLen = thisBuf.length - size ;
Distance : 6

97
Tree	float size = thisBuf.length - size ;
Code	float size = thisBuf.length - size ;
Distance : 6

98
Tree	int len = thisBuf.length - strLen ; ]
Code	int len = thisBuf.length - strLen ; ]
Distance : 4

99
Tree	int len = thisBuf.length - strLen ;
Code	int len = thisBuf.length - strLen ;
Distance : 3

100
Tree	int len = thisBuf.length - strLen ; Preconditions
Code	int len = thisBuf.length - strLen ; Preconditions
Distance : 4

101
Tree	boolean strLen = thisBuf.length - size ;
Code	boolean strLen = thisBuf.length - size ;
Distance : 6

102
Tree	int len = thisBuf.length - strLen ; (
Code	int len = thisBuf.length - strLen ; (
Distance : 4

103
Tree	int len = thisBuf.length - strLen ; .
Code	int len = thisBuf.length - strLen ; .
Distance : 4

104
Tree	int len = thisBuf.length - strLen ; }
Code	int len = thisBuf.length - strLen ; }
Distance : 4

105
Tree	int len = thisBuf.length - strLen ; i
Code	int len = thisBuf.length - strLen ; i
Distance : 4

106
Tree	int len = thisBuf.length - strLen ; assertEquals
Code	int len = thisBuf.length - strLen ; assertEquals
Distance : 4

107
Tree	int len = thisBuf.length - strLen ; @
Code	int len = thisBuf.length - strLen ; @
Distance : 4

108
Tree	int len = thisBuf.length - strLen ; []
Code	int len = thisBuf.length - strLen ; []
Distance : 4

109
Tree	int len = thisBuf.length - strLen ; test
Code	int len = thisBuf.length - strLen ; test
Distance : 4

110
Tree	int len = thisBuf.length - strLen ; nullNotPermitted
Code	int len = thisBuf.length - strLen ; nullNotPermitted
Distance : 4

111
Tree	int len = thisBuf.length - strLen ; !
Code	int len = thisBuf.length - strLen ; !
Distance : 4

112
Tree	int len = thisBuf.length - strLen ; super
Code	int len = thisBuf.length - strLen ; super
Distance : 4

113
Tree	int len = thisBuf.length - strLen ; T
Code	int len = thisBuf.length - strLen ; T
Distance : 4

114
Tree	int len = thisBuf.length - strLen ; checkState
Code	int len = thisBuf.length - strLen ; checkState
Distance : 4

115
Tree	int len = thisBuf.length - strLen ; double
Code	int len = thisBuf.length - strLen ; double
Distance : 4

116
Tree	int len = thisBuf.length - strLen ; int
Code	int len = thisBuf.length - strLen ; int
Distance : 4

117
Tree	int len = thisBuf.length - strLen ; value
Code	int len = thisBuf.length - strLen ; value
Distance : 4

118
Tree	int len = thisBuf.length - strLen ; ==
Code	int len = thisBuf.length - strLen ; ==
Distance : 4

119
Tree	int len = thisBuf.length - strLen ; [
Code	int len = thisBuf.length - strLen ; [
Distance : 4

120
Tree	int len = thisBuf.length - strLen ; -
Code	int len = thisBuf.length - strLen ; -
Distance : 4

121
Tree	int len = thisBuf.length - strLen ; try
Code	int len = thisBuf.length - strLen ; try
Distance : 4

122
Tree	int len = thisBuf.length - strLen ; :
Code	int len = thisBuf.length - strLen ; :
Distance : 4

123
Tree	int len = thisBuf.length - strLen ; ()
Code	int len = thisBuf.length - strLen ; ()
Distance : 4

124
Tree	int len = thisBuf.length - strLen ; ParamChecks
Code	int len = thisBuf.length - strLen ; ParamChecks
Distance : 4

125
Tree	int len = thisBuf.length - strLen ; List
Code	int len = thisBuf.length - strLen ; List
Distance : 4

126
Tree	int len = thisBuf.length - strLen ; Override
Code	int len = thisBuf.length - strLen ; Override
Distance : 4

127
Tree	int len = thisBuf.length - strLen ; Exception
Code	int len = thisBuf.length - strLen ; Exception
Distance : 4

128
Tree	int len = thisBuf.length - strLen ; MathRuntimeException
Code	int len = thisBuf.length - strLen ; MathRuntimeException
Distance : 4

129
Tree	int len = thisBuf.length - strLen ; f
Code	int len = thisBuf.length - strLen ; f
Distance : 4

130
Tree	int len = thisBuf.length - strLen ; class
Code	int len = thisBuf.length - strLen ; class
Distance : 4

131
Tree	int len = thisBuf.length - strLen ; array
Code	int len = thisBuf.length - strLen ; array
Distance : 4

132
Tree	int len = thisBuf.length - strLen ; m
Code	int len = thisBuf.length - strLen ; m
Distance : 4

133
Tree	int len = thisBuf.length - strLen ; mock
Code	int len = thisBuf.length - strLen ; mock
Distance : 4

134
Tree	int len = thisBuf.length - strLen ; new
Code	int len = thisBuf.length - strLen ; new
Distance : 4

135
Tree	int len = thisBuf.length - strLen ; {}
Code	int len = thisBuf.length - strLen ; {}
Distance : 4

136
Tree	int len = thisBuf.length - strLen ; =
Code	int len = thisBuf.length - strLen ; =
Distance : 4

137
Tree	int len = thisBuf.length - strLen ; final
Code	int len = thisBuf.length - strLen ; final
Distance : 4

138
Tree	int len = thisBuf.length - strLen ; false
Code	int len = thisBuf.length - strLen ; false
Distance : 4

139
Tree	int len = thisBuf.length - strLen ; length
Code	int len = thisBuf.length - strLen ; length
Distance : 4

140
Tree	int len = thisBuf.length - strLen ; fireChangeEvent
Code	int len = thisBuf.length - strLen ; fireChangeEvent
Distance : 4

141
Tree	int len = thisBuf.length - strLen ; serialised
Code	int len = thisBuf.length - strLen ; serialised
Distance : 4

142
Tree	int len = thisBuf.length - strLen ; type
Code	int len = thisBuf.length - strLen ; type
Distance : 4

143
Tree	int len = thisBuf.length - strLen ; getInstance
Code	int len = thisBuf.length - strLen ; getInstance
Distance : 4

144
Tree	int len = thisBuf.length - strLen ; boolean
Code	int len = thisBuf.length - strLen ; boolean
Distance : 4

145
Tree	int len = thisBuf.length - strLen ; paint
Code	int len = thisBuf.length - strLen ; paint
Distance : 4

146
Tree	int len = thisBuf.length - strLen ; join
Code	int len = thisBuf.length - strLen ; join
Distance : 4

147
Tree	int len = thisBuf.length - strLen ; *
Code	int len = thisBuf.length - strLen ; *
Distance : 4

148
Tree	int len = thisBuf.length - strLen ; <
Code	int len = thisBuf.length - strLen ; <
Distance : 4

149
Tree	int len = thisBuf.length - strLen ; c
Code	int len = thisBuf.length - strLen ; c
Distance : 4

150
Tree	int len = thisBuf.length - strLen ; return
Code	int len = thisBuf.length - strLen ; return
Distance : 4

151
Tree	int len = thisBuf.length - strLen ; this
Code	int len = thisBuf.length - strLen ; this
Distance : 4

152
Tree	int len = thisBuf.length - strLen ; >
Code	int len = thisBuf.length - strLen ; >
Distance : 4

153
Tree	int len = thisBuf.length - strLen ; if
Code	int len = thisBuf.length - strLen ; if
Distance : 4

154
Tree	int len = thisBuf.length - strLen ; public
Code	int len = thisBuf.length - strLen ; public
Distance : 4

155
Tree	int len = thisBuf.length - strLen ; null
Code	int len = thisBuf.length - strLen ; null
Distance : 4

156
Tree	int len = thisBuf.length - strLen ; NUMBER_CONSTANT
Code	int len = thisBuf.length - strLen ; NUMBER_CONSTANT
Distance : 3

157
Tree	int len = thisBuf.length - strLen ; verify
Code	int len = thisBuf.length - strLen ; verify
Distance : 4

158
Tree	int len = thisBuf.length - strLen ; ,
Code	int len = thisBuf.length - strLen ; ,
Distance : 4

159
Tree	int len = thisBuf.length - strLen ; Node
Code	int len = thisBuf.length - strLen ; Node
Distance : 4

160
Tree	int len = thisBuf.length - strLen ; n
Code	int len = thisBuf.length - strLen ; n
Distance : 4

161
Tree	int len = thisBuf.length - strLen ; String
Code	int len = thisBuf.length - strLen ; String
Distance : 4

162
Tree	int len = thisBuf.length - strLen ; source
Code	int len = thisBuf.length - strLen ; source
Distance : 4

163
Tree	int len = thisBuf.length - strLen ; p
Code	int len = thisBuf.length - strLen ; p
Distance : 4

164
Tree	int len = thisBuf.length - strLen ; Math
Code	int len = thisBuf.length - strLen ; Math
Distance : 4

165
Tree	int len = thisBuf.length - strLen ; options
Code	int len = thisBuf.length - strLen ; options
Distance : 4

166
Tree	int len = thisBuf.length - strLen ; Class
Code	int len = thisBuf.length - strLen ; Class
Distance : 4

167
Tree	int len = thisBuf.length - strLen ; toString
Code	int len = thisBuf.length - strLen ; toString
Distance : 4

168
Tree	int len = thisBuf.length - strLen ; root
Code	int len = thisBuf.length - strLen ; root
Distance : 4

169
Tree	int len = thisBuf.length - strLen ; {
Code	int len = thisBuf.length - strLen ; {
Distance : 4

170
Tree	int len = thisBuf.length - strLen ; assertThat
Code	int len = thisBuf.length - strLen ; assertThat
Distance : 4

171
Tree	int len = thisBuf.length - strLen ; !=
Code	int len = thisBuf.length - strLen ; !=
Distance : 4

172
Tree	int len = thisBuf.length - strLen ; )
Code	int len = thisBuf.length - strLen ; )
Distance : 4

173
Tree	int len = thisBuf.length - strLen ; <s>
Code	int len = thisBuf.length - strLen ; <s>
Distance : 4

174
Tree	int len = thisBuf.length - strLen ; int
Code	int len = thisBuf.length - strLen ; int
Distance : 4

175
Tree	int len = thisBuf.length - strLen ; <blank>
Code	int len = thisBuf.length - strLen ; <blank>
Distance : 4

176
Tree	int len = thisBuf.length - strLen ; ;
Code	int len = thisBuf.length - strLen ; ;
Distance : 3

177
Tree	int len = thisBuf.length - strLen ; +
Code	int len = thisBuf.length - strLen ; +
Distance : 4

178
Tree	int len = thisBuf.length - strLen ; v
Code	int len = thisBuf.length - strLen ; v
Distance : 4

179
Tree	int len = thisBuf.length - strLen ; e
Code	int len = thisBuf.length - strLen ; e
Distance : 4

180
Tree	int len = thisBuf.length - strLen ; compiler
Code	int len = thisBuf.length - strLen ; compiler
Distance : 4

181
Tree	int len = thisBuf.length - strLen ; Integer
Code	int len = thisBuf.length - strLen ; Integer
Distance : 4

182
Tree	int len = thisBuf.length - strLen ; lines
Code	int len = thisBuf.length - strLen ; lines
Distance : 4

183
Tree	int len = thisBuf.length - strLen ; fail
Code	int len = thisBuf.length - strLen ; fail
Distance : 4

184
Tree	int len = thisBuf.length - strLen ; Args
Code	int len = thisBuf.length - strLen ; Args
Distance : 4

185
Tree	int len = thisBuf.length - strLen ; <>
Code	int len = thisBuf.length - strLen ; <>
Distance : 4

186
Tree	int len = thisBuf.length - strLen ; result
Code	int len = thisBuf.length - strLen ; result
Distance : 4

187
Tree	int len = thisBuf.length - strLen ; &&
Code	int len = thisBuf.length - strLen ; &&
Distance : 4

188
Tree	int len = thisBuf.length - strLen ; STRING_CONSTANT
Code	int len = thisBuf.length - strLen ; STRING_CONSTANT
Distance : 4

189
Tree	int len = thisBuf.length - strLen ; wanted
Code	int len = thisBuf.length - strLen ; wanted
Distance : 4

190
Tree	int len = thisBuf.length - strLen ; ex
Code	int len = thisBuf.length - strLen ; ex
Distance : 4

191
Tree	int len = thisBuf.length - strLen ; NodeUtil
Code	int len = thisBuf.length - strLen ; NodeUtil
Distance : 4

192
Tree	int len = thisBuf.length - strLen ; add
Code	int len = thisBuf.length - strLen ; add
Distance : 4

193
Tree	int len = thisBuf.length - strLen ; checkArgument
Code	int len = thisBuf.length - strLen ; checkArgument
Distance : 4

194
Tree	int len = thisBuf.length - strLen ; data
Code	int len = thisBuf.length - strLen ; data
Distance : 4

195
Tree	int len = thisBuf.length - strLen ; NodeTraversal
Code	int len = thisBuf.length - strLen ; NodeTraversal
Distance : 4

196
Tree	int len = thisBuf.length - strLen ; void
Code	int len = thisBuf.length - strLen ; void
Distance : 4

197
Tree	int len = thisBuf.length - strLen ; throw
Code	int len = thisBuf.length - strLen ; throw
Distance : 4

198
Tree	int len = thisBuf.length - strLen ; catch
Code	int len = thisBuf.length - strLen ; catch
Distance : 4

199
Tree	int len = thisBuf.length - strLen ; true
Code	int len = thisBuf.length - strLen ; true
Distance : 4

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	i
Code	i
Distance : 2

1
Tree	period
Code	period
Distance : 3

2
Tree	qnameNode
Code	qnameNode
Distance : 3

3
Tree	stream
Code	stream
Distance : 3

4
Tree	include
Code	include
Distance : 3

5
Tree	identityHashCode
Code	identityHashCode
Distance : 3

6
Tree	minor
Code	minor
Distance : 3

7
Tree	System
Code	System
Distance : 3

8
Tree	initialCapacity
Code	initialCapacity
Distance : 3

9
Tree	Date
Code	Date
Distance : 3

10
Tree	public
Code	public
Distance : 3

11
Tree	chunk
Code	chunk
Distance : 3

12
Tree	number
Code	number
Distance : 3

13
Tree	answers
Code	answers
Distance : 3

14
Tree	setJSType
Code	setJSType
Distance : 3

15
Tree	clazz
Code	clazz
Distance : 3

16
Tree	lcm
Code	lcm
Distance : 3

17
Tree	EMPTY_SCOPE
Code	EMPTY_SCOPE
Distance : 3

18
Tree	jsdoc
Code	jsdoc
Distance : 3

19
Tree	field
Code	field
Distance : 3

20
Tree	languageIn
Code	languageIn
Distance : 3

21
Tree	item
Code	item
Distance : 3

22
Tree	isNaN
Code	isNaN
Distance : 3

23
Tree	assertFalse
Code	assertFalse
Distance : 3

24
Tree	c
Code	c
Distance : 3

25
Tree	Invocation
Code	Invocation
Distance : 3

26
Tree	wantedInvocationCount
Code	wantedInvocationCount
Distance : 3

27
Tree	config
Code	config
Distance : 3

28
Tree	List
Code	List
Distance : 3

29
Tree	InvocationMatcher
Code	InvocationMatcher
Distance : 3

30
Tree	superType
Code	superType
Distance : 3

31
Tree	parent
Code	parent
Distance : 3

32
Tree	val
Code	val
Distance : 3

33
Tree	size
Code	size
Distance : 2

34
Tree	verifyingRecorder
Code	verifyingRecorder
Distance : 3

35
Tree	add
Code	add
Distance : 3

36
Tree	passes
Code	passes
Distance : 3

37
Tree	currentStatement
Code	currentStatement
Distance : 3

38
Tree	text
Code	text
Distance : 3

39
Tree	newChild
Code	newChild
Distance : 3

40
Tree	startIndex
Code	startIndex
Distance : 3

41
Tree	in
Code	in
Distance : 3

42
Tree	reportChangeToEnclosingScope
Code	reportChangeToEnclosingScope
Distance : 3

43
Tree	setSeed
Code	setSeed
Distance : 3

44
Tree	mock1
Code	mock1
Distance : 3

45
Tree	getResult
Code	getResult
Distance : 3

46
Tree	rows
Code	rows
Distance : 3

47
Tree	idx
Code	idx
Distance : 3

48
Tree	DateUtils
Code	DateUtils
Distance : 3

49
Tree	r
Code	r
Distance : 3

50
Tree	answer
Code	answer
Distance : 3

51
Tree	NaN
Code	NaN
Distance : 3

52
Tree	assertNotSame
Code	assertNotSame
Distance : 3

53
Tree	pos
Code	pos
Distance : 3

54
Tree	if
Code	if
Distance : 3

55
Tree	isClass
Code	isClass
Distance : 3

56
Tree	Double.NaN
Code	Double.NaN
Distance : 3

57
Tree	NotAMockException
Code	NotAMockException
Distance : 3

58
Tree	condition
Code	condition
Distance : 3

59
Tree	Es6RewriteModules
Code	Es6RewriteModules
Distance : 3

60
Tree	ArgumentsAreDifferent
Code	ArgumentsAreDifferent
Distance : 3

61
Tree	Calendar.FEBRUARY
Code	Calendar.FEBRUARY
Distance : 3

62
Tree	parser
Code	parser
Distance : 3

63
Tree	PotentialDeclaration
Code	PotentialDeclaration
Distance : 3

64
Tree	shape
Code	shape
Distance : 3

65
Tree	returnTypeExpr
Code	returnTypeExpr
Distance : 3

66
Tree	directly
Code	directly
Distance : 3

67
Tree	decl
Code	decl
Distance : 3

68
Tree	objType
Code	objType
Distance : 3

69
Tree	evaluate
Code	evaluate
Distance : 3

70
Tree	randomData
Code	randomData
Distance : 3

71
Tree	fn
Code	fn
Distance : 3

72
Tree	filter
Code	filter
Distance : 3

73
Tree	binomialCoefficient
Code	binomialCoefficient
Distance : 3

74
Tree	setSeedInternal
Code	setSeedInternal
Distance : 3

75
Tree	iValue
Code	iValue
Distance : 3

76
Tree	height
Code	height
Distance : 3

77
Tree	className
Code	className
Distance : 3

78
Tree	pname
Code	pname
Distance : 3

79
Tree	col
Code	col
Distance : 3

80
Tree	Complex
Code	Complex
Distance : 3

81
Tree	throwable
Code	throwable
Distance : 3

82
Tree	generator
Code	generator
Distance : 3

83
Tree	VerificationModeFactory
Code	VerificationModeFactory
Distance : 3

84
Tree	protected
Code	protected
Distance : 3

85
Tree	lhs
Code	lhs
Distance : 3

86
Tree	LocalizedFormats.INDEX_NOT_POSITIVE
Code	LocalizedFormats.INDEX_NOT_POSITIVE
Distance : 3

87
Tree	sourceNode
Code	sourceNode
Distance : 3

88
Tree	s
Code	s
Distance : 3

89
Tree	gcd
Code	gcd
Distance : 3

90
Tree	autoboxing
Code	autoboxing
Distance : 3

91
Tree	setAcceptedLanguage
Code	setAcceptedLanguage
Distance : 3

92
Tree	actualCount
Code	actualCount
Distance : 3

93
Tree	upper
Code	upper
Distance : 3

94
Tree	SerialUtils
Code	SerialUtils
Distance : 3

95
Tree	num
Code	num
Distance : 3

96
Tree	tableau
Code	tableau
Distance : 3

97
Tree	expr
Code	expr
Distance : 3

98
Tree	subtree
Code	subtree
Distance : 3

99
Tree	set
Code	set
Distance : 3

100
Tree	double
Code	double
Distance : 3

101
Tree	seq
Code	seq
Distance : 3

102
Tree	t
Code	t
Distance : 3

103
Tree	languageMode
Code	languageMode
Distance : 3

104
Tree	/=
Code	/=
Distance : 3

105
Tree	clone.data
Code	clone.data
Distance : 3

106
Tree	o
Code	o
Distance : 3

107
Tree	wanted
Code	wanted
Distance : 3

108
Tree	cal
Code	cal
Distance : 3

109
Tree	compiler
Code	compiler
Distance : 3

110
Tree	entities
Code	entities
Distance : 3

111
Tree	object
Code	object
Distance : 3

112
Tree	MathUtils
Code	MathUtils
Distance : 3

113
Tree	(
Code	(
Distance : 3

114
Tree	rhs.isNaN
Code	rhs.isNaN
Distance : 3

115
Tree	entry
Code	entry
Distance : 3

116
Tree	state
Code	state
Distance : 3

117
Tree	printer
Code	printer
Distance : 3

118
Tree	++
Code	++
Distance : 3

119
Tree	ObjectUtils
Code	ObjectUtils
Distance : 3

120
Tree	Precision
Code	Precision
Distance : 3

121
Tree	bits
Code	bits
Distance : 3

122
Tree	hash
Code	hash
Distance : 3

123
Tree	searchStr
Code	searchStr
Distance : 3

124
Tree	verifier
Code	verifier
Distance : 3

125
Tree	a
Code	a
Distance : 3

126
Tree	n
Code	n
Distance : 3

127
Tree	d
Code	d
Distance : 3

128
Tree	MathArrays
Code	MathArrays
Distance : 3

129
Tree	index
Code	index
Distance : 3

130
Tree	Assert
Code	Assert
Distance : 3

131
Tree	wantedCount
Code	wantedCount
Distance : 3

132
Tree	int
Code	int
Distance : 3

133
Tree	var
Code	var
Distance : 3

134
Tree	FACT_LEN
Code	FACT_LEN
Distance : 3

135
Tree	iter
Code	iter
Distance : 3

136
Tree	VerificationModeImpl
Code	VerificationModeImpl
Distance : 3

137
Tree	endIndex
Code	endIndex
Distance : 3

138
Tree	rhs
Code	rhs
Distance : 3

139
Tree	paint
Code	paint
Distance : 3

140
Tree	x
Code	x
Distance : 3

141
Tree	ArithmeticsUtils
Code	ArithmeticsUtils
Distance : 3

142
Tree	j
Code	j
Distance : 3

143
Tree	child
Code	child
Distance : 3

144
Tree	k
Code	k
Distance : 3

145
Tree	final
Code	final
Distance : 3

146
Tree	%
Code	%
Distance : 3

147
Tree	result
Code	result
Distance : 3

148
Tree	seed
Code	seed
Distance : 3

149
Tree	Set
Code	Set
Distance : 3

150
Tree	minPos
Code	minPos
Distance : 3

151
Tree	@
Code	@
Distance : 3

152
Tree	deepClone
Code	deepClone
Distance : 3

153
Tree	pb
Code	pb
Distance : 3

154
Tree	return;
Code	return;
Distance : 3

155
Tree	isName
Code	isName
Distance : 3

156
Tree	Preconditions
Code	Preconditions
Distance : 3

157
Tree	stubber
Code	stubber
Distance : 3

158
Tree	data
Code	data
Distance : 3

159
Tree	line
Code	line
Distance : 3

160
Tree	isGetProp
Code	isGetProp
Distance : 3

161
Tree	N
Code	N
Distance : 3

162
Tree	namespace
Code	namespace
Distance : 3

163
Tree	l
Code	l
Distance : 3

164
Tree	numberOfElements
Code	numberOfElements
Distance : 3

165
Tree	msgNode
Code	msgNode
Distance : 3

166
Tree	count
Code	count
Distance : 3

167
Tree	b
Code	b
Distance : 3

168
Tree	numerator
Code	numerator
Distance : 3

169
Tree	ArrayList
Code	ArrayList
Distance : 3

170
Tree	scopeRoot
Code	scopeRoot
Distance : 3

171
Tree	reportCodeChange
Code	reportCodeChange
Distance : 3

172
Tree	g2
Code	g2
Distance : 3

173
Tree	expansionMode
Code	expansionMode
Distance : 3

174
Tree	returnType
Code	returnType
Distance : 3

175
Tree	binomial
Code	binomial
Distance : 3

176
Tree	start
Code	start
Distance : 3

177
Tree	dist
Code	dist
Distance : 3

178
Tree	CharSequence
Code	CharSequence
Distance : 3

179
Tree	-
Code	-
Distance : 3

180
Tree	JSType
Code	JSType
Distance : 3

181
Tree	lower
Code	lower
Distance : 3

182
Tree	compareTo
Code	compareTo
Distance : 3

183
Tree	+=
Code	+=
Distance : 3

184
Tree	while
Code	while
Distance : 3

185
Tree	distribution
Code	distribution
Distance : 3

186
Tree	shift
Code	shift
Distance : 3

187
Tree	continue;
Code	continue;
Distance : 3

188
Tree	ImmutableSet
Code	ImmutableSet
Distance : 3

189
Tree	TransformUtils
Code	TransformUtils
Distance : 3

190
Tree	len
Code	len
Distance : 3

191
Tree	*
Code	*
Distance : 3

192
Tree	cc
Code	cc
Distance : 3

193
Tree	y
Code	y
Distance : 3

194
Tree	rng
Code	rng
Distance : 3

195
Tree	HashUtils
Code	HashUtils
Distance : 3

196
Tree	wrong
Code	wrong
Distance : 3

197
Tree	js
Code	js
Distance : 3

198
Tree	absolutePositivityThreshold
Code	absolutePositivityThreshold
Distance : 3

199
Tree	isVar
Code	isVar
Distance : 3

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	i
Code	i
Distance : 4

1
Tree	period
Code	period
Distance : 5

2
Tree	qnameNode
Code	qnameNode
Distance : 5

3
Tree	stream
Code	stream
Distance : 5

4
Tree	include
Code	include
Distance : 5

5
Tree	identityHashCode
Code	identityHashCode
Distance : 5

6
Tree	minor
Code	minor
Distance : 5

7
Tree	System
Code	System
Distance : 5

8
Tree	initialCapacity
Code	initialCapacity
Distance : 5

9
Tree	Date
Code	Date
Distance : 5

10
Tree	public
Code	public
Distance : 5

11
Tree	chunk
Code	chunk
Distance : 5

12
Tree	number
Code	number
Distance : 5

13
Tree	answers
Code	answers
Distance : 5

14
Tree	setJSType
Code	setJSType
Distance : 5

15
Tree	clazz
Code	clazz
Distance : 5

16
Tree	lcm
Code	lcm
Distance : 5

17
Tree	EMPTY_SCOPE
Code	EMPTY_SCOPE
Distance : 5

18
Tree	jsdoc
Code	jsdoc
Distance : 5

19
Tree	field
Code	field
Distance : 5

20
Tree	languageIn
Code	languageIn
Distance : 5

21
Tree	item
Code	item
Distance : 5

22
Tree	isNaN
Code	isNaN
Distance : 5

23
Tree	assertFalse
Code	assertFalse
Distance : 5

24
Tree	c
Code	c
Distance : 5

25
Tree	Invocation
Code	Invocation
Distance : 5

26
Tree	wantedInvocationCount
Code	wantedInvocationCount
Distance : 5

27
Tree	config
Code	config
Distance : 5

28
Tree	List
Code	List
Distance : 5

29
Tree	InvocationMatcher
Code	InvocationMatcher
Distance : 5

30
Tree	superType
Code	superType
Distance : 5

31
Tree	parent
Code	parent
Distance : 5

32
Tree	val
Code	val
Distance : 5

33
Tree	size
Code	size
Distance : 4

34
Tree	verifyingRecorder
Code	verifyingRecorder
Distance : 5

35
Tree	add
Code	add
Distance : 5

36
Tree	passes
Code	passes
Distance : 5

37
Tree	currentStatement
Code	currentStatement
Distance : 5

38
Tree	text
Code	text
Distance : 5

39
Tree	newChild
Code	newChild
Distance : 5

40
Tree	startIndex
Code	startIndex
Distance : 5

41
Tree	in
Code	in
Distance : 5

42
Tree	reportChangeToEnclosingScope
Code	reportChangeToEnclosingScope
Distance : 5

43
Tree	setSeed
Code	setSeed
Distance : 5

44
Tree	mock1
Code	mock1
Distance : 5

45
Tree	getResult
Code	getResult
Distance : 5

46
Tree	rows
Code	rows
Distance : 5

47
Tree	idx
Code	idx
Distance : 5

48
Tree	DateUtils
Code	DateUtils
Distance : 5

49
Tree	r
Code	r
Distance : 5

50
Tree	answer
Code	answer
Distance : 5

51
Tree	NaN
Code	NaN
Distance : 5

52
Tree	assertNotSame
Code	assertNotSame
Distance : 5

53
Tree	pos
Code	pos
Distance : 5

54
Tree	if
Code	if
Distance : 5

55
Tree	isClass
Code	isClass
Distance : 5

56
Tree	Double.NaN
Code	Double.NaN
Distance : 5

57
Tree	NotAMockException
Code	NotAMockException
Distance : 5

58
Tree	condition
Code	condition
Distance : 5

59
Tree	Es6RewriteModules
Code	Es6RewriteModules
Distance : 5

60
Tree	ArgumentsAreDifferent
Code	ArgumentsAreDifferent
Distance : 5

61
Tree	Calendar.FEBRUARY
Code	Calendar.FEBRUARY
Distance : 5

62
Tree	parser
Code	parser
Distance : 5

63
Tree	PotentialDeclaration
Code	PotentialDeclaration
Distance : 5

64
Tree	shape
Code	shape
Distance : 5

65
Tree	returnTypeExpr
Code	returnTypeExpr
Distance : 5

66
Tree	directly
Code	directly
Distance : 5

67
Tree	decl
Code	decl
Distance : 5

68
Tree	objType
Code	objType
Distance : 5

69
Tree	evaluate
Code	evaluate
Distance : 5

70
Tree	randomData
Code	randomData
Distance : 5

71
Tree	fn
Code	fn
Distance : 5

72
Tree	filter
Code	filter
Distance : 5

73
Tree	binomialCoefficient
Code	binomialCoefficient
Distance : 5

74
Tree	setSeedInternal
Code	setSeedInternal
Distance : 5

75
Tree	iValue
Code	iValue
Distance : 5

76
Tree	height
Code	height
Distance : 5

77
Tree	className
Code	className
Distance : 5

78
Tree	pname
Code	pname
Distance : 5

79
Tree	col
Code	col
Distance : 5

80
Tree	Complex
Code	Complex
Distance : 5

81
Tree	throwable
Code	throwable
Distance : 5

82
Tree	generator
Code	generator
Distance : 5

83
Tree	VerificationModeFactory
Code	VerificationModeFactory
Distance : 5

84
Tree	protected
Code	protected
Distance : 5

85
Tree	lhs
Code	lhs
Distance : 5

86
Tree	LocalizedFormats.INDEX_NOT_POSITIVE
Code	LocalizedFormats.INDEX_NOT_POSITIVE
Distance : 5

87
Tree	sourceNode
Code	sourceNode
Distance : 5

88
Tree	s
Code	s
Distance : 5

89
Tree	gcd
Code	gcd
Distance : 5

90
Tree	autoboxing
Code	autoboxing
Distance : 5

91
Tree	setAcceptedLanguage
Code	setAcceptedLanguage
Distance : 5

92
Tree	actualCount
Code	actualCount
Distance : 5

93
Tree	upper
Code	upper
Distance : 5

94
Tree	SerialUtils
Code	SerialUtils
Distance : 5

95
Tree	num
Code	num
Distance : 5

96
Tree	tableau
Code	tableau
Distance : 5

97
Tree	expr
Code	expr
Distance : 5

98
Tree	subtree
Code	subtree
Distance : 5

99
Tree	set
Code	set
Distance : 5

100
Tree	double
Code	double
Distance : 5

101
Tree	seq
Code	seq
Distance : 5

102
Tree	t
Code	t
Distance : 5

103
Tree	languageMode
Code	languageMode
Distance : 5

104
Tree	/=
Code	/=
Distance : 5

105
Tree	clone.data
Code	clone.data
Distance : 5

106
Tree	o
Code	o
Distance : 5

107
Tree	wanted
Code	wanted
Distance : 5

108
Tree	cal
Code	cal
Distance : 5

109
Tree	compiler
Code	compiler
Distance : 5

110
Tree	entities
Code	entities
Distance : 5

111
Tree	object
Code	object
Distance : 5

112
Tree	MathUtils
Code	MathUtils
Distance : 5

113
Tree	(
Code	(
Distance : 5

114
Tree	rhs.isNaN
Code	rhs.isNaN
Distance : 5

115
Tree	entry
Code	entry
Distance : 5

116
Tree	state
Code	state
Distance : 5

117
Tree	printer
Code	printer
Distance : 5

118
Tree	++
Code	++
Distance : 5

119
Tree	ObjectUtils
Code	ObjectUtils
Distance : 5

120
Tree	Precision
Code	Precision
Distance : 5

121
Tree	bits
Code	bits
Distance : 5

122
Tree	hash
Code	hash
Distance : 5

123
Tree	searchStr
Code	searchStr
Distance : 5

124
Tree	verifier
Code	verifier
Distance : 5

125
Tree	a
Code	a
Distance : 5

126
Tree	n
Code	n
Distance : 5

127
Tree	d
Code	d
Distance : 5

128
Tree	MathArrays
Code	MathArrays
Distance : 5

129
Tree	index
Code	index
Distance : 5

130
Tree	Assert
Code	Assert
Distance : 5

131
Tree	wantedCount
Code	wantedCount
Distance : 5

132
Tree	int
Code	int
Distance : 5

133
Tree	var
Code	var
Distance : 5

134
Tree	FACT_LEN
Code	FACT_LEN
Distance : 5

135
Tree	iter
Code	iter
Distance : 5

136
Tree	VerificationModeImpl
Code	VerificationModeImpl
Distance : 5

137
Tree	endIndex
Code	endIndex
Distance : 5

138
Tree	rhs
Code	rhs
Distance : 5

139
Tree	paint
Code	paint
Distance : 5

140
Tree	x
Code	x
Distance : 5

141
Tree	ArithmeticsUtils
Code	ArithmeticsUtils
Distance : 5

142
Tree	j
Code	j
Distance : 5

143
Tree	child
Code	child
Distance : 5

144
Tree	k
Code	k
Distance : 5

145
Tree	final
Code	final
Distance : 5

146
Tree	%
Code	%
Distance : 5

147
Tree	result
Code	result
Distance : 5

148
Tree	seed
Code	seed
Distance : 5

149
Tree	Set
Code	Set
Distance : 5

150
Tree	minPos
Code	minPos
Distance : 5

151
Tree	@
Code	@
Distance : 5

152
Tree	deepClone
Code	deepClone
Distance : 5

153
Tree	pb
Code	pb
Distance : 5

154
Tree	return;
Code	return;
Distance : 5

155
Tree	isName
Code	isName
Distance : 5

156
Tree	Preconditions
Code	Preconditions
Distance : 5

157
Tree	stubber
Code	stubber
Distance : 5

158
Tree	data
Code	data
Distance : 5

159
Tree	line
Code	line
Distance : 5

160
Tree	isGetProp
Code	isGetProp
Distance : 5

161
Tree	N
Code	N
Distance : 5

162
Tree	namespace
Code	namespace
Distance : 5

163
Tree	l
Code	l
Distance : 5

164
Tree	numberOfElements
Code	numberOfElements
Distance : 5

165
Tree	msgNode
Code	msgNode
Distance : 5

166
Tree	count
Code	count
Distance : 5

167
Tree	b
Code	b
Distance : 5

168
Tree	numerator
Code	numerator
Distance : 5

169
Tree	ArrayList
Code	ArrayList
Distance : 5

170
Tree	scopeRoot
Code	scopeRoot
Distance : 5

171
Tree	reportCodeChange
Code	reportCodeChange
Distance : 5

172
Tree	g2
Code	g2
Distance : 5

173
Tree	expansionMode
Code	expansionMode
Distance : 5

174
Tree	returnType
Code	returnType
Distance : 5

175
Tree	binomial
Code	binomial
Distance : 5

176
Tree	start
Code	start
Distance : 5

177
Tree	dist
Code	dist
Distance : 5

178
Tree	CharSequence
Code	CharSequence
Distance : 5

179
Tree	-
Code	-
Distance : 5

180
Tree	JSType
Code	JSType
Distance : 5

181
Tree	lower
Code	lower
Distance : 5

182
Tree	compareTo
Code	compareTo
Distance : 5

183
Tree	+=
Code	+=
Distance : 5

184
Tree	while
Code	while
Distance : 5

185
Tree	distribution
Code	distribution
Distance : 5

186
Tree	shift
Code	shift
Distance : 5

187
Tree	continue;
Code	continue;
Distance : 5

188
Tree	ImmutableSet
Code	ImmutableSet
Distance : 5

189
Tree	TransformUtils
Code	TransformUtils
Distance : 5

190
Tree	len
Code	len
Distance : 5

191
Tree	*
Code	*
Distance : 5

192
Tree	cc
Code	cc
Distance : 5

193
Tree	y
Code	y
Distance : 5

194
Tree	rng
Code	rng
Distance : 5

195
Tree	HashUtils
Code	HashUtils
Distance : 5

196
Tree	wrong
Code	wrong
Distance : 5

197
Tree	js
Code	js
Distance : 5

198
Tree	absolutePositivityThreshold
Code	absolutePositivityThreshold
Distance : 5

199
Tree	isVar
Code	isVar
Distance : 5

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Distance : 0

1
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Distance : 1

2
Tree	{ str . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Distance : 1

3
Tree	{ str . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Distance : 1

4
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 1

5
Tree	{ str . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Distance : 1

6
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 1

7
Tree	{ str . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Distance : 1

8
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

9
Tree	{ str . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Distance : 1

10
Tree	{ str . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Distance : 1

11
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

12
Tree	{ width . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Distance : 1

13
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Distance : 1

14
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 2

15
Tree	{ str . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Distance : 1

16
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 2

17
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Distance : 1

18
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 2

19
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

20
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Distance : 2

21
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Distance : 2

22
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

23
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 3

24
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

25
Tree	{ str . getChars ( NUMBER_CONSTANT , width , width , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , width , str ) ; }
Distance : 2

26
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

27
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Distance : 2

28
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 2

29
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Distance : 2

30
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Distance : 2

31
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 2

32
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Distance : 2

33
Tree	{ str . getChars ( NUMBER_CONSTANT , width , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , size , size ) ; }
Distance : 1

34
Tree	{ str . getChars ( NUMBER_CONSTANT , width , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , strLen , str ) ; }
Distance : 2

35
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Distance : 2

36
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Distance : 2

37
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , str ) ; }
Distance : 2

38
Tree	{ str . getChars ( NUMBER_CONSTANT , width , str , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , str , str ) ; }
Distance : 2

39
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Distance : 2

40
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 3

41
Tree	{ str . getChars ( NUMBER_CONSTANT , width , strLen , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , strLen , strLen ) ; }
Distance : 2

42
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , strLen ) ; }
Distance : 2

43
Tree	{ buffer . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Distance : 2

44
Tree	{ str . getChars ( NUMBER_CONSTANT , width , str , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , str , strLen ) ; }
Distance : 2

45
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , strLen , size ) ; }
Distance : 2

46
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

47
Tree	{ size . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
Distance : 1

48
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Distance : 2

49
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , str , size ) ; }
Distance : 2

50
Tree	{ width . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Distance : 2

51
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Distance : 2

52
Tree	{ str . getChars ( NUMBER_CONSTANT , str , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , strLen , size ) ; }
Distance : 2

53
Tree	{ str . getChars ( NUMBER_CONSTANT , width , width , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , width , strLen ) ; }
Distance : 2

54
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ; }
Distance : 2

55
Tree	{ str . getChars ( NUMBER_CONSTANT , str , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , str , size ) ; }
Distance : 2

56
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 3

57
Tree	{ width . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Distance : 2

58
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , width , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , width , size ) ; }
Distance : 2

59
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer , strLen ) ; }
Distance : 2

60
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , width , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , width , str ) ; }
Distance : 4

61
Tree	{ str . getChars ( NUMBER_CONSTANT , width , strLen , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , strLen , buffer ) ; }
Distance : 2

62
Tree	{ width . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 2

63
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ; }
Distance : 2

64
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 2

65
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , str ) ; }
Distance : 3

66
Tree	{ str . getChars ( NUMBER_CONSTANT , width , str , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , str , buffer ) ; }
Distance : 2

67
Tree	{ str . getChars ( NUMBER_CONSTANT , str , width , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , width , size ) ; }
Distance : 2

68
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 3

69
Tree	{ width . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Distance : 2

70
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Distance : 2

71
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , str ) ; }
Distance : 3

72
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer , str ) ; }
Distance : 2

73
Tree	{ width . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Distance : 2

74
Tree	{ str . getChars ( NUMBER_CONSTANT , size , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , strLen , size ) ; }
Distance : 2

75
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Distance : 3

76
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , strLen ) ; }
Distance : 3

77
Tree	{ str . getChars ( NUMBER_CONSTANT , size , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , str , size ) ; }
Distance : 2

78
Tree	{ str . getChars ( NUMBER_CONSTANT , width , width , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , width , buffer ) ; }
Distance : 2

79
Tree	{ str . getChars ( NUMBER_CONSTANT , width , strLen , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , strLen , width ) ; }
Distance : 2

80
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Distance : 2

81
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , strLen ) ; }
Distance : 3

82
Tree	{ width . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Distance : 2

83
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , width , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , width , str ) ; }
Distance : 3

84
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , width ) ; }
Distance : 2

85
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer , buffer ) ; }
Distance : 2

86
Tree	{ str . getChars ( NUMBER_CONSTANT , width , str , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , str , width ) ; }
Distance : 2

87
Tree	{ width . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Distance : 2

88
Tree	{ strLen . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 2

89
Tree	{ str . getChars ( NUMBER_CONSTANT , size , width , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , width , size ) ; }
Distance : 2

90
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 3

91
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Distance : 3

92
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , width , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , width , strLen ) ; }
Distance : 3

93
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Distance : 2

94
Tree	{ width . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Distance : 2

95
Tree	{ str . getChars ( NUMBER_CONSTANT , width , width , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , width , width ) ; }
Distance : 2

96
Tree	{ width . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 2

97
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , width ) ; }
Distance : 2

98
Tree	{ strLen . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 2

99
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Distance : 2

100
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 3

101
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , buffer ) ; }
Distance : 3

102
Tree	{ width . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Distance : 2

103
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer , width ) ; }
Distance : 2

104
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Distance : 2

105
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , buffer ) ; }
Distance : 3

106
Tree	{ size . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , buffer , strLen ) ; }
Distance : 2

107
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Distance : 2

108
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 3

109
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 3

110
Tree	{ size . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , buffer , buffer , size ) ; }
Distance : 2

111
Tree	{ strLen . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Distance : 2

112
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 3

113
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , width , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , width , buffer ) ; }
Distance : 3

114
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , width ) ; }
Distance : 3

115
Tree	{ size . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , strLen , size ) ; }
Distance : 2

116
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 3

117
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 3

118
Tree	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Distance : 2

119
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , width ) ; }
Distance : 3

120
Tree	{ size . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 2

121
Tree	{ size . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , str , size ) ; }
Distance : 2

122
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Distance : 3

123
Tree	{ size . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , buffer , buffer ) ; }
Distance : 2

124
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 3

125
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , width , width ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , width , width ) ; }
Distance : 3

126
Tree	{ size . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , width , size ) ; }
Distance : 2

127
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 3

128
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 3

129
Tree	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Distance : 3

130
Tree	{ size . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Distance : 2

131
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 3

132
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Distance : 3

133
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 3

134
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Distance : 3

135
Tree	{ size . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , buffer , width ) ; }
Distance : 2

136
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , size , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , size , size ) ; }
Distance : 2

137
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , str ) ; }
Distance : 3

138
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Distance : 3

139
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , str ) ; }
Distance : 3

140
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , str , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , str , str ) ; }
Distance : 3

141
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , strLen , size ) ; }
Distance : 3

142
Tree	{ str . getChars ( NUMBER_CONSTANT , width , size , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , size , str ) ; }
Distance : 2

143
Tree	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Distance : 3

144
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , strLen ) ; }
Distance : 3

145
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 3

146
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , strLen ) ; }
Distance : 3

147
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , str , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , str , strLen ) ; }
Distance : 3

148
Tree	{ size . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , width , buffer , str ) ; }
Distance : 2

149
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , strLen , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , strLen , size ) ; }
Distance : 3

150
Tree	{ str . getChars ( NUMBER_CONSTANT , width , size , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , size , strLen ) ; }
Distance : 2

151
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , str , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , str , size ) ; }
Distance : 3

152
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , width , size ) ; }
Distance : 3

153
Tree	{ buffer . getChars ( NUMBER_CONSTANT , size , buffer , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , size , buffer , str ) ; }
Distance : 3

154
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , size , size ) ; }
Distance : 2

155
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , strLen , str ) ; }
Distance : 3

156
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , width , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , width , strLen ) ; }
Distance : 3

157
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , strLen , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , strLen , size ) ; }
Distance : 3

158
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ; }
Distance : 3

159
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , str , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , str , str ) ; }
Distance : 3

160
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , str , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , str , size ) ; }
Distance : 3

161
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , width , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , width , size ) ; }
Distance : 3

162
Tree	{ buffer . getChars ( NUMBER_CONSTANT , size , buffer , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , size , buffer , strLen ) ; }
Distance : 3

163
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , strLen , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , strLen , strLen ) ; }
Distance : 3

164
Tree	{ str . getChars ( NUMBER_CONSTANT , str , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , size , size ) ; }
Distance : 2

165
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , buffer ) ; }
Distance : 3

166
Tree	{ str . getChars ( NUMBER_CONSTANT , str , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , strLen , str ) ; }
Distance : 3

167
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , width ) ; }
Distance : 3

168
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , buffer , buffer ) ; }
Distance : 3

169
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 3

170
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , str , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , str , buffer ) ; }
Distance : 3

171
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , strLen , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , strLen , str ) ; }
Distance : 4

172
Tree	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 3

173
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , str , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , str , strLen ) ; }
Distance : 3

174
Tree	{ str . getChars ( NUMBER_CONSTANT , str , str , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , str , str ) ; }
Distance : 3

175
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , width , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , width , str ) ; }
Distance : 3

176
Tree	{ str . getChars ( NUMBER_CONSTANT , width , size , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , width , size , buffer ) ; }
Distance : 2

177
Tree	{ buffer . getChars ( NUMBER_CONSTANT , str , width , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , str , width , size ) ; }
Distance : 3

178
Tree	{ str . getChars ( NUMBER_CONSTANT , str , strLen , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , strLen , strLen ) ; }
Distance : 3

179
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , str , str ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , str , str ) ; }
Distance : 4

180
Tree	{ buffer . getChars ( NUMBER_CONSTANT , size , strLen , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , size , strLen , size ) ; }
Distance : 3

181
Tree	{ width . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Distance : 3

182
Tree	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , width ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , buffer , buffer , width ) ; }
Distance : 3

183
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , str ) ; }
Distance : 3

184
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , strLen , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , strLen , strLen ) ; }
Distance : 4

185
Tree	{ str . getChars ( NUMBER_CONSTANT , str , str , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , str , strLen ) ; }
Distance : 3

186
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 3

187
Tree	{ buffer . getChars ( NUMBER_CONSTANT , size , str , size ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , size , str , size ) ; }
Distance : 3

188
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , width , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , width , strLen ) ; }
Distance : 3

189
Tree	{ str . getChars ( NUMBER_CONSTANT , str , width , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , width , str ) ; }
Distance : 3

190
Tree	{ width . getChars ( NUMBER_CONSTANT , width , size , size ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , size , size ) ; }
Distance : 2

191
Tree	{ str . getChars ( NUMBER_CONSTANT , size , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , size , size ) ; }
Distance : 2

192
Tree	{ width . getChars ( NUMBER_CONSTANT , width , strLen , str ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , width , strLen , str ) ; }
Distance : 3

193
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , width ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , strLen , width ) ; }
Distance : 3

194
Tree	{ str . getChars ( NUMBER_CONSTANT , size , strLen , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , strLen , str ) ; }
Distance : 3

195
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , str , strLen ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , str , strLen ) ; }
Distance : 4

196
Tree	{ width . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Code	{ width . getChars ( NUMBER_CONSTANT , buffer , buffer , strLen ) ; }
Distance : 3

197
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , width , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , width , str ) ; }
Distance : 3

198
Tree	{ buffer . getChars ( NUMBER_CONSTANT , width , width , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , width , width , buffer ) ; }
Distance : 3

199
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , strLen ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } reportMatcher
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } reportMatcher
Distance : 3

1
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } wanted
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } wanted
Distance : 3

2
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } data
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } data
Distance : 3

3
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } add
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } add
Distance : 3

4
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } NodeTraversal
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } NodeTraversal
Distance : 3

5
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ex
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ex
Distance : 3

6
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ==
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ==
Distance : 3

7
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } final
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } final
Distance : 3

8
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } void
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } void
Distance : 3

9
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } throw
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } throw
Distance : 3

10
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } n
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } n
Distance : 3

11
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } e
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } e
Distance : 3

12
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } String
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } String
Distance : 3

13
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } compiler
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } compiler
Distance : 3

14
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {}
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {}
Distance : 3

15
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mock
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mock
Distance : 3

16
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } true
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } true
Distance : 3

17
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mode
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mode
Distance : 3

18
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } catch
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } catch
Distance : 3

19
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } public
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } public
Distance : 3

20
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <
Distance : 3

21
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } null
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } null
Distance : 3

22
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } NodeUtil
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } NodeUtil
Distance : 3

23
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } LanguageMode.ECMASCRIPT6
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } LanguageMode.ECMASCRIPT6
Distance : 3

24
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } root
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } root
Distance : 3

25
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } -
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } -
Distance : 3

26
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } NUMBER_CONSTANT
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } NUMBER_CONSTANT
Distance : 3

27
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } STRING_CONSTANT
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } STRING_CONSTANT
Distance : 3

28
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } new
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } new
Distance : 3

29
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Distance : 3

30
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ()
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ()
Distance : 3

31
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } }
Distance : 3

32
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } =
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } =
Distance : 3

33
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ,
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ,
Distance : 3

34
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } .
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } .
Distance : 3

35
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } )
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } )
Distance : 3

36
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ;
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ;
Distance : 3

37
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <blank>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <blank>
Distance : 3

38
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Distance : 3

39
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <s>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <s>
Distance : 3

40
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } (
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } (
Distance : 3

41
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } if
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } if
Distance : 3

42
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } StrBuilder
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } StrBuilder
Distance : 3

43
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } this
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } this
Distance : 3

44
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ]
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ]
Distance : 3

45
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } [
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } [
Distance : 3

46
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Preconditions
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Preconditions
Distance : 3

47
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Math
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Math
Distance : 3

48
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } return
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } return
Distance : 3

49
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } >
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } >
Distance : 3

50
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } long
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } long
Distance : 3

51
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } instance
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } instance
Distance : 3

52
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } T
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } T
Distance : 3

53
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } &&
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } &&
Distance : 3

54
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } static
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } static
Distance : 3

55
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } super
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } super
Distance : 3

56
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } matcher
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } matcher
Distance : 3

57
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } setAcceptedLanguage
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } setAcceptedLanguage
Distance : 3

58
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } y
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } y
Distance : 3

59
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } optimizer
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } optimizer
Distance : 3

60
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } instant
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } instant
Distance : 3

61
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getArgumentMatcherStorage
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getArgumentMatcherStorage
Distance : 3

62
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } stream
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } stream
Distance : 3

63
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getMessage
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getMessage
Distance : 3

64
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } abs
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } abs
Distance : 3

65
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } else
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } else
Distance : 3

66
Tree	{ return locale . availableLocaleList ( cAvailableLocaleSet ) ; }
Code	{ return locale . availableLocaleList ( cAvailableLocaleSet ) ; }
Distance : 4

67
Tree	{ return locale . contains ( cAvailableLocaleSet ) ; }
Code	{ return locale . contains ( cAvailableLocaleSet ) ; }
Distance : 3

68
Tree	{ return cAvailableLocaleSet . availableLocaleList ( cAvailableLocaleSet ) ; }
Code	{ return cAvailableLocaleSet . availableLocaleList ( cAvailableLocaleSet ) ; }
Distance : 4

69
Tree	{ return cAvailableLocaleSet . contains ( cAvailableLocaleSet ) ; }
Code	{ return cAvailableLocaleSet . contains ( cAvailableLocaleSet ) ; }
Distance : 3

70
Tree	{ return locale . availableLocaleList ( locale ) ; }
Code	{ return locale . availableLocaleList ( locale ) ; }
Distance : 3

71
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

72
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } value
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } value
Distance : 3

73
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } assertTrue
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } assertTrue
Distance : 3

74
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } checkState
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } checkState
Distance : 3

75
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } i
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } i
Distance : 3

76
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } /
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } /
Distance : 3

77
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Fraction
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Fraction
Distance : 3

78
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } checkNotNull
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } checkNotNull
Distance : 3

79
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ?
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ?
Distance : 3

80
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Assert
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Assert
Distance : 3

81
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } index
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } index
Distance : 3

82
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } node
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } node
Distance : 3

83
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } setUp
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } setUp
Distance : 3

84
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getParent
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getParent
Distance : 3

85
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } invocations
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } invocations
Distance : 3

86
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } out
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } out
Distance : 3

87
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } protected
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } protected
Distance : 3

88
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } values
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } values
Distance : 3

89
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } contains
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } contains
Distance : 3

90
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } chrono
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } chrono
Distance : 3

91
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } valueOf
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } valueOf
Distance : 3

92
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } alpha
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } alpha
Distance : 3

93
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } externs
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } externs
Distance : 3

94
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } simpleMethod
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } simpleMethod
Distance : 3

95
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } +
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } +
Distance : 3

96
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } !=
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } !=
Distance : 3

97
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } int
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } int
Distance : 3

98
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } stroke
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } stroke
Distance : 3

99
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

100
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } a
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } a
Distance : 3

101
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mockingProgress
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mockingProgress
Distance : 3

102
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } return;
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } return;
Distance : 3

103
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } size
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } size
Distance : 3

104
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } StringBuilder
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } StringBuilder
Distance : 3

105
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } sqrt
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } sqrt
Distance : 3

106
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } clone
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } clone
Distance : 3

107
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } PeriodType
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } PeriodType
Distance : 3

108
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Double
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Double
Distance : 3

109
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <=
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <=
Distance : 3

110
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } obj
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } obj
Distance : 3

111
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } isNormalBlock
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } isNormalBlock
Distance : 3

112
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } s
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } s
Distance : 3

113
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } invocation
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } invocation
Distance : 3

114
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } assertThat
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } assertThat
Distance : 3

115
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } LINE_JOINER
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } LINE_JOINER
Distance : 3

116
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } createIllegalArgumentException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } createIllegalArgumentException
Distance : 3

117
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

118
Tree	{ return cAvailableLocaleSet . availableLocaleList ( locale ) ; }
Code	{ return cAvailableLocaleSet . availableLocaleList ( locale ) ; }
Distance : 3

119
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } class
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } class
Distance : 3

120
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } get
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } get
Distance : 3

121
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } JSType
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } JSType
Distance : 3

122
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } isEmpty
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } isEmpty
Distance : 3

123
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } char
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } char
Distance : 3

124
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } source
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } source
Distance : 3

125
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } toString
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } toString
Distance : 3

126
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } type
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } type
Distance : 3

127
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } *
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } *
Distance : 3

128
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } boolean
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } boolean
Distance : 3

129
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } join
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } join
Distance : 3

130
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } serialised
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } serialised
Distance : 3

131
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getInstance
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getInstance
Distance : 3

132
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } fireChangeEvent
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } fireChangeEvent
Distance : 3

133
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } throws
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } throws
Distance : 3

134
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ArrayList
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ArrayList
Distance : 3

135
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } array
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } array
Distance : 3

136
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ParamChecks
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ParamChecks
Distance : 3

137
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } f
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } f
Distance : 3

138
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } x
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } x
Distance : 3

139
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Override
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Override
Distance : 3

140
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } parent
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } parent
Distance : 3

141
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } str
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } str
Distance : 3

142
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } MutableTimePeriod
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } MutableTimePeriod
Distance : 3

143
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } b
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } b
Distance : 3

144
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <>
Distance : 3

145
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } returnZero
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } returnZero
Distance : 3

146
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } MathRuntimeException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } MathRuntimeException
Distance : 3

147
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } UnivariateFunction
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } UnivariateFunction
Distance : 3

148
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Args
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Args
Distance : 3

149
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getFirstChild
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getFirstChild
Distance : 3

150
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } result
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } result
Distance : 3

151
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } m
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } m
Distance : 3

152
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } paint
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } paint
Distance : 3

153
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Node
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Node
Distance : 3

154
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Exception
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Exception
Distance : 3

155
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } lines
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } lines
Distance : 3

156
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } verify
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } verify
Distance : 3

157
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Integer
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Integer
Distance : 3

158
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } v
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } v
Distance : 3

159
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } length
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } length
Distance : 3

160
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } TestUtils
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } TestUtils
Distance : 3

161
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } IllegalArgumentException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } IllegalArgumentException
Distance : 3

162
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } reportCodeChange
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } reportCodeChange
Distance : 3

163
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } FastMath
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } FastMath
Distance : 3

164
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } expected
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } expected
Distance : 3

165
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } name
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } name
Distance : 3

166
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } field
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } field
Distance : 3

167
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } List
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } List
Distance : 3

168
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } fail
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } fail
Distance : 3

169
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } try
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } try
Distance : 3

170
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } t
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } t
Distance : 3

171
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } sb
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } sb
Distance : 3

172
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } append
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } append
Distance : 3

173
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } isBlock
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } isBlock
Distance : 3

174
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } assertEquals
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } assertEquals
Distance : 3

175
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } !
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } !
Distance : 3

176
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } []
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } []
Distance : 3

177
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } :
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } :
Distance : 3

178
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } test
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } test
Distance : 3

179
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } @
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } @
Distance : 3

180
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } false
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } false
Distance : 3

181
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } nullNotPermitted
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } nullNotPermitted
Distance : 3

182
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } d
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } d
Distance : 3

183
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } double
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } double
Distance : 3

184
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Object
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Object
Distance : 3

185
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } scope
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } scope
Distance : 3

186
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } TestUtilities
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } TestUtilities
Distance : 3

187
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } checkArgument
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } checkArgument
Distance : 3

188
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Invocation
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Invocation
Distance : 3

189
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } for
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } for
Distance : 3

190
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } equals
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } equals
Distance : 3

191
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } js
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } js
Distance : 3

192
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } options
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } options
Distance : 3

193
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } p
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } p
Distance : 3

194
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Test
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Test
Distance : 3

195
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Class
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Class
Distance : 3

196
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } notifyListeners
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } notifyListeners
Distance : 3

197
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } c
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } c
Distance : 3

198
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } testSame
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } testSame
Distance : 3

199
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } traverseEs6
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } traverseEs6
Distance : 3

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( out , str , true ) ; } reportMatcher
Code	{ escapeJavaStyleString ( out , str , true ) ; } reportMatcher
Distance : 3

1
Tree	{ escapeJavaStyleString ( out , str , true ) ; } wanted
Code	{ escapeJavaStyleString ( out , str , true ) ; } wanted
Distance : 3

2
Tree	{ escapeJavaStyleString ( out , str , true ) ; } data
Code	{ escapeJavaStyleString ( out , str , true ) ; } data
Distance : 3

3
Tree	{ escapeJavaStyleString ( out , str , true ) ; } add
Code	{ escapeJavaStyleString ( out , str , true ) ; } add
Distance : 3

4
Tree	{ escapeJavaStyleString ( out , str , true ) ; } NodeTraversal
Code	{ escapeJavaStyleString ( out , str , true ) ; } NodeTraversal
Distance : 3

5
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ex
Code	{ escapeJavaStyleString ( out , str , true ) ; } ex
Distance : 3

6
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ==
Code	{ escapeJavaStyleString ( out , str , true ) ; } ==
Distance : 3

7
Tree	{ escapeJavaStyleString ( out , str , true ) ; } final
Code	{ escapeJavaStyleString ( out , str , true ) ; } final
Distance : 3

8
Tree	{ escapeJavaStyleString ( out , str , true ) ; } void
Code	{ escapeJavaStyleString ( out , str , true ) ; } void
Distance : 3

9
Tree	{ escapeJavaStyleString ( out , str , true ) ; } throw
Code	{ escapeJavaStyleString ( out , str , true ) ; } throw
Distance : 3

10
Tree	{ escapeJavaStyleString ( out , str , true ) ; } n
Code	{ escapeJavaStyleString ( out , str , true ) ; } n
Distance : 3

11
Tree	{ escapeJavaStyleString ( out , str , true ) ; } e
Code	{ escapeJavaStyleString ( out , str , true ) ; } e
Distance : 3

12
Tree	{ escapeJavaStyleString ( out , str , true ) ; } String
Code	{ escapeJavaStyleString ( out , str , true ) ; } String
Distance : 3

13
Tree	{ escapeJavaStyleString ( out , str , true ) ; } compiler
Code	{ escapeJavaStyleString ( out , str , true ) ; } compiler
Distance : 3

14
Tree	{ escapeJavaStyleString ( out , str , true ) ; } {}
Code	{ escapeJavaStyleString ( out , str , true ) ; } {}
Distance : 3

15
Tree	{ escapeJavaStyleString ( out , str , true ) ; } mock
Code	{ escapeJavaStyleString ( out , str , true ) ; } mock
Distance : 3

16
Tree	{ escapeJavaStyleString ( out , str , true ) ; } true
Code	{ escapeJavaStyleString ( out , str , true ) ; } true
Distance : 3

17
Tree	{ escapeJavaStyleString ( out , str , true ) ; } mode
Code	{ escapeJavaStyleString ( out , str , true ) ; } mode
Distance : 3

18
Tree	{ escapeJavaStyleString ( out , str , true ) ; } catch
Code	{ escapeJavaStyleString ( out , str , true ) ; } catch
Distance : 3

19
Tree	{ escapeJavaStyleString ( out , str , true ) ; } public
Code	{ escapeJavaStyleString ( out , str , true ) ; } public
Distance : 3

20
Tree	{ escapeJavaStyleString ( out , str , true ) ; } <
Code	{ escapeJavaStyleString ( out , str , true ) ; } <
Distance : 3

21
Tree	{ escapeJavaStyleString ( out , str , true ) ; } null
Code	{ escapeJavaStyleString ( out , str , true ) ; } null
Distance : 3

22
Tree	{ escapeJavaStyleString ( out , str , true ) ; } NodeUtil
Code	{ escapeJavaStyleString ( out , str , true ) ; } NodeUtil
Distance : 3

23
Tree	{ escapeJavaStyleString ( out , str , true ) ; } LanguageMode.ECMASCRIPT6
Code	{ escapeJavaStyleString ( out , str , true ) ; } LanguageMode.ECMASCRIPT6
Distance : 3

24
Tree	{ escapeJavaStyleString ( out , str , true ) ; } root
Code	{ escapeJavaStyleString ( out , str , true ) ; } root
Distance : 3

25
Tree	{ escapeJavaStyleString ( out , str , true ) ; } -
Code	{ escapeJavaStyleString ( out , str , true ) ; } -
Distance : 3

26
Tree	{ escapeJavaStyleString ( out , str , true ) ; } NUMBER_CONSTANT
Code	{ escapeJavaStyleString ( out , str , true ) ; } NUMBER_CONSTANT
Distance : 3

27
Tree	{ escapeJavaStyleString ( out , str , true ) ; } STRING_CONSTANT
Code	{ escapeJavaStyleString ( out , str , true ) ; } STRING_CONSTANT
Distance : 3

28
Tree	{ escapeJavaStyleString ( out , str , true ) ; } new
Code	{ escapeJavaStyleString ( out , str , true ) ; } new
Distance : 3

29
Tree	{ escapeJavaStyleString ( out , str , true ) ; } {
Code	{ escapeJavaStyleString ( out , str , true ) ; } {
Distance : 3

30
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ()
Code	{ escapeJavaStyleString ( out , str , true ) ; } ()
Distance : 3

31
Tree	{ escapeJavaStyleString ( out , str , true ) ; } }
Code	{ escapeJavaStyleString ( out , str , true ) ; } }
Distance : 3

32
Tree	{ escapeJavaStyleString ( out , str , true ) ; } =
Code	{ escapeJavaStyleString ( out , str , true ) ; } =
Distance : 3

33
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ,
Code	{ escapeJavaStyleString ( out , str , true ) ; } ,
Distance : 3

34
Tree	{ escapeJavaStyleString ( out , str , true ) ; } .
Code	{ escapeJavaStyleString ( out , str , true ) ; } .
Distance : 3

35
Tree	{ escapeJavaStyleString ( out , str , true ) ; } )
Code	{ escapeJavaStyleString ( out , str , true ) ; } )
Distance : 3

36
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ;
Code	{ escapeJavaStyleString ( out , str , true ) ; } ;
Distance : 3

37
Tree	{ escapeJavaStyleString ( out , str , true ) ; } <blank>
Code	{ escapeJavaStyleString ( out , str , true ) ; } <blank>
Distance : 3

38
Tree	{ escapeJavaStyleString ( out , str , true ) ; } {
Code	{ escapeJavaStyleString ( out , str , true ) ; } {
Distance : 3

39
Tree	{ escapeJavaStyleString ( out , str , true ) ; } <s>
Code	{ escapeJavaStyleString ( out , str , true ) ; } <s>
Distance : 3

40
Tree	{ escapeJavaStyleString ( out , str , true ) ; } (
Code	{ escapeJavaStyleString ( out , str , true ) ; } (
Distance : 3

41
Tree	{ escapeJavaStyleString ( out , str , true ) ; } if
Code	{ escapeJavaStyleString ( out , str , true ) ; } if
Distance : 3

42
Tree	{ escapeJavaStyleString ( out , str , true ) ; } StrBuilder
Code	{ escapeJavaStyleString ( out , str , true ) ; } StrBuilder
Distance : 3

43
Tree	{ escapeJavaStyleString ( out , str , true ) ; } this
Code	{ escapeJavaStyleString ( out , str , true ) ; } this
Distance : 3

44
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ]
Code	{ escapeJavaStyleString ( out , str , true ) ; } ]
Distance : 3

45
Tree	{ escapeJavaStyleString ( out , str , true ) ; } [
Code	{ escapeJavaStyleString ( out , str , true ) ; } [
Distance : 3

46
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Preconditions
Code	{ escapeJavaStyleString ( out , str , true ) ; } Preconditions
Distance : 3

47
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Math
Code	{ escapeJavaStyleString ( out , str , true ) ; } Math
Distance : 3

48
Tree	{ escapeJavaStyleString ( out , str , true ) ; } return
Code	{ escapeJavaStyleString ( out , str , true ) ; } return
Distance : 3

49
Tree	{ escapeJavaStyleString ( out , str , true ) ; } >
Code	{ escapeJavaStyleString ( out , str , true ) ; } >
Distance : 3

50
Tree	{ escapeJavaStyleString ( out , str , true ) ; } long
Code	{ escapeJavaStyleString ( out , str , true ) ; } long
Distance : 3

51
Tree	{ escapeJavaStyleString ( out , str , true ) ; } instance
Code	{ escapeJavaStyleString ( out , str , true ) ; } instance
Distance : 3

52
Tree	{ escapeJavaStyleString ( out , str , true ) ; } T
Code	{ escapeJavaStyleString ( out , str , true ) ; } T
Distance : 3

53
Tree	{ escapeJavaStyleString ( out , str , true ) ; } &&
Code	{ escapeJavaStyleString ( out , str , true ) ; } &&
Distance : 3

54
Tree	{ escapeJavaStyleString ( out , str , true ) ; } static
Code	{ escapeJavaStyleString ( out , str , true ) ; } static
Distance : 3

55
Tree	{ escapeJavaStyleString ( out , str , true ) ; } super
Code	{ escapeJavaStyleString ( out , str , true ) ; } super
Distance : 3

56
Tree	{ escapeJavaStyleString ( out , str , true ) ; } matcher
Code	{ escapeJavaStyleString ( out , str , true ) ; } matcher
Distance : 3

57
Tree	{ escapeJavaStyleString ( out , str , true ) ; } setAcceptedLanguage
Code	{ escapeJavaStyleString ( out , str , true ) ; } setAcceptedLanguage
Distance : 3

58
Tree	{ escapeJavaStyleString ( out , str , true ) ; } y
Code	{ escapeJavaStyleString ( out , str , true ) ; } y
Distance : 3

59
Tree	{ escapeJavaStyleString ( out , str , true ) ; } optimizer
Code	{ escapeJavaStyleString ( out , str , true ) ; } optimizer
Distance : 3

60
Tree	{ escapeJavaStyleString ( out , str , true ) ; } instant
Code	{ escapeJavaStyleString ( out , str , true ) ; } instant
Distance : 3

61
Tree	{ escapeJavaStyleString ( out , str , true ) ; } getArgumentMatcherStorage
Code	{ escapeJavaStyleString ( out , str , true ) ; } getArgumentMatcherStorage
Distance : 3

62
Tree	{ escapeJavaStyleString ( out , str , true ) ; } stream
Code	{ escapeJavaStyleString ( out , str , true ) ; } stream
Distance : 3

63
Tree	{ escapeJavaStyleString ( out , str , true ) ; } getMessage
Code	{ escapeJavaStyleString ( out , str , true ) ; } getMessage
Distance : 3

64
Tree	{ escapeJavaStyleString ( out , str , true ) ; } abs
Code	{ escapeJavaStyleString ( out , str , true ) ; } abs
Distance : 3

65
Tree	{ escapeJavaStyleString ( out , str , true ) ; } else
Code	{ escapeJavaStyleString ( out , str , true ) ; } else
Distance : 3

66
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

67
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 4

68
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

69
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 3

70
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 3

71
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 3

72
Tree	{ escapeJavaStyleString ( out , str , true ) ; } value
Code	{ escapeJavaStyleString ( out , str , true ) ; } value
Distance : 3

73
Tree	{ escapeJavaStyleString ( out , str , true ) ; } assertTrue
Code	{ escapeJavaStyleString ( out , str , true ) ; } assertTrue
Distance : 3

74
Tree	{ escapeJavaStyleString ( out , str , true ) ; } checkState
Code	{ escapeJavaStyleString ( out , str , true ) ; } checkState
Distance : 3

75
Tree	{ escapeJavaStyleString ( out , str , true ) ; } i
Code	{ escapeJavaStyleString ( out , str , true ) ; } i
Distance : 3

76
Tree	{ escapeJavaStyleString ( out , str , true ) ; } /
Code	{ escapeJavaStyleString ( out , str , true ) ; } /
Distance : 3

77
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Fraction
Code	{ escapeJavaStyleString ( out , str , true ) ; } Fraction
Distance : 3

78
Tree	{ escapeJavaStyleString ( out , str , true ) ; } checkNotNull
Code	{ escapeJavaStyleString ( out , str , true ) ; } checkNotNull
Distance : 3

79
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ?
Code	{ escapeJavaStyleString ( out , str , true ) ; } ?
Distance : 3

80
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Assert
Code	{ escapeJavaStyleString ( out , str , true ) ; } Assert
Distance : 3

81
Tree	{ escapeJavaStyleString ( out , str , true ) ; } index
Code	{ escapeJavaStyleString ( out , str , true ) ; } index
Distance : 3

82
Tree	{ escapeJavaStyleString ( out , str , true ) ; } node
Code	{ escapeJavaStyleString ( out , str , true ) ; } node
Distance : 3

83
Tree	{ escapeJavaStyleString ( out , str , true ) ; } setUp
Code	{ escapeJavaStyleString ( out , str , true ) ; } setUp
Distance : 3

84
Tree	{ escapeJavaStyleString ( out , str , true ) ; } getParent
Code	{ escapeJavaStyleString ( out , str , true ) ; } getParent
Distance : 3

85
Tree	{ escapeJavaStyleString ( out , str , true ) ; } invocations
Code	{ escapeJavaStyleString ( out , str , true ) ; } invocations
Distance : 3

86
Tree	{ escapeJavaStyleString ( out , str , true ) ; } out
Code	{ escapeJavaStyleString ( out , str , true ) ; } out
Distance : 3

87
Tree	{ escapeJavaStyleString ( out , str , true ) ; } protected
Code	{ escapeJavaStyleString ( out , str , true ) ; } protected
Distance : 3

88
Tree	{ escapeJavaStyleString ( out , str , true ) ; } values
Code	{ escapeJavaStyleString ( out , str , true ) ; } values
Distance : 3

89
Tree	{ escapeJavaStyleString ( out , str , true ) ; } contains
Code	{ escapeJavaStyleString ( out , str , true ) ; } contains
Distance : 3

90
Tree	{ escapeJavaStyleString ( out , str , true ) ; } chrono
Code	{ escapeJavaStyleString ( out , str , true ) ; } chrono
Distance : 3

91
Tree	{ escapeJavaStyleString ( out , str , true ) ; } valueOf
Code	{ escapeJavaStyleString ( out , str , true ) ; } valueOf
Distance : 3

92
Tree	{ escapeJavaStyleString ( out , str , true ) ; } alpha
Code	{ escapeJavaStyleString ( out , str , true ) ; } alpha
Distance : 3

93
Tree	{ escapeJavaStyleString ( out , str , true ) ; } externs
Code	{ escapeJavaStyleString ( out , str , true ) ; } externs
Distance : 3

94
Tree	{ escapeJavaStyleString ( out , str , true ) ; } simpleMethod
Code	{ escapeJavaStyleString ( out , str , true ) ; } simpleMethod
Distance : 3

95
Tree	{ escapeJavaStyleString ( out , str , true ) ; } +
Code	{ escapeJavaStyleString ( out , str , true ) ; } +
Distance : 3

96
Tree	{ escapeJavaStyleString ( out , str , true ) ; } !=
Code	{ escapeJavaStyleString ( out , str , true ) ; } !=
Distance : 3

97
Tree	{ escapeJavaStyleString ( out , str , true ) ; } int
Code	{ escapeJavaStyleString ( out , str , true ) ; } int
Distance : 3

98
Tree	{ escapeJavaStyleString ( out , str , true ) ; } stroke
Code	{ escapeJavaStyleString ( out , str , true ) ; } stroke
Distance : 3

99
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 2

100
Tree	{ escapeJavaStyleString ( out , str , true ) ; } a
Code	{ escapeJavaStyleString ( out , str , true ) ; } a
Distance : 3

101
Tree	{ escapeJavaStyleString ( out , str , true ) ; } mockingProgress
Code	{ escapeJavaStyleString ( out , str , true ) ; } mockingProgress
Distance : 3

102
Tree	{ escapeJavaStyleString ( out , str , true ) ; } return;
Code	{ escapeJavaStyleString ( out , str , true ) ; } return;
Distance : 3

103
Tree	{ escapeJavaStyleString ( out , str , true ) ; } size
Code	{ escapeJavaStyleString ( out , str , true ) ; } size
Distance : 3

104
Tree	{ escapeJavaStyleString ( out , str , true ) ; } StringBuilder
Code	{ escapeJavaStyleString ( out , str , true ) ; } StringBuilder
Distance : 3

105
Tree	{ escapeJavaStyleString ( out , str , true ) ; } sqrt
Code	{ escapeJavaStyleString ( out , str , true ) ; } sqrt
Distance : 3

106
Tree	{ escapeJavaStyleString ( out , str , true ) ; } clone
Code	{ escapeJavaStyleString ( out , str , true ) ; } clone
Distance : 3

107
Tree	{ escapeJavaStyleString ( out , str , true ) ; } PeriodType
Code	{ escapeJavaStyleString ( out , str , true ) ; } PeriodType
Distance : 3

108
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Double
Code	{ escapeJavaStyleString ( out , str , true ) ; } Double
Distance : 3

109
Tree	{ escapeJavaStyleString ( out , str , true ) ; } <=
Code	{ escapeJavaStyleString ( out , str , true ) ; } <=
Distance : 3

110
Tree	{ escapeJavaStyleString ( out , str , true ) ; } obj
Code	{ escapeJavaStyleString ( out , str , true ) ; } obj
Distance : 3

111
Tree	{ escapeJavaStyleString ( out , str , true ) ; } isNormalBlock
Code	{ escapeJavaStyleString ( out , str , true ) ; } isNormalBlock
Distance : 3

112
Tree	{ escapeJavaStyleString ( out , str , true ) ; } s
Code	{ escapeJavaStyleString ( out , str , true ) ; } s
Distance : 3

113
Tree	{ escapeJavaStyleString ( out , str , true ) ; } invocation
Code	{ escapeJavaStyleString ( out , str , true ) ; } invocation
Distance : 3

114
Tree	{ escapeJavaStyleString ( out , str , true ) ; } assertThat
Code	{ escapeJavaStyleString ( out , str , true ) ; } assertThat
Distance : 3

115
Tree	{ escapeJavaStyleString ( out , str , true ) ; } LINE_JOINER
Code	{ escapeJavaStyleString ( out , str , true ) ; } LINE_JOINER
Distance : 3

116
Tree	{ escapeJavaStyleString ( out , str , true ) ; } createIllegalArgumentException
Code	{ escapeJavaStyleString ( out , str , true ) ; } createIllegalArgumentException
Distance : 3

117
Tree	{ escapeJavaStyleString ( out , str , true ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ escapeJavaStyleString ( out , str , true ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

118
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

119
Tree	{ escapeJavaStyleString ( out , str , true ) ; } class
Code	{ escapeJavaStyleString ( out , str , true ) ; } class
Distance : 3

120
Tree	{ escapeJavaStyleString ( out , str , true ) ; } get
Code	{ escapeJavaStyleString ( out , str , true ) ; } get
Distance : 3

121
Tree	{ escapeJavaStyleString ( out , str , true ) ; } JSType
Code	{ escapeJavaStyleString ( out , str , true ) ; } JSType
Distance : 3

122
Tree	{ escapeJavaStyleString ( out , str , true ) ; } isEmpty
Code	{ escapeJavaStyleString ( out , str , true ) ; } isEmpty
Distance : 3

123
Tree	{ escapeJavaStyleString ( out , str , true ) ; } char
Code	{ escapeJavaStyleString ( out , str , true ) ; } char
Distance : 3

124
Tree	{ escapeJavaStyleString ( out , str , true ) ; } source
Code	{ escapeJavaStyleString ( out , str , true ) ; } source
Distance : 3

125
Tree	{ escapeJavaStyleString ( out , str , true ) ; } toString
Code	{ escapeJavaStyleString ( out , str , true ) ; } toString
Distance : 3

126
Tree	{ escapeJavaStyleString ( out , str , true ) ; } type
Code	{ escapeJavaStyleString ( out , str , true ) ; } type
Distance : 3

127
Tree	{ escapeJavaStyleString ( out , str , true ) ; } *
Code	{ escapeJavaStyleString ( out , str , true ) ; } *
Distance : 3

128
Tree	{ escapeJavaStyleString ( out , str , true ) ; } boolean
Code	{ escapeJavaStyleString ( out , str , true ) ; } boolean
Distance : 3

129
Tree	{ escapeJavaStyleString ( out , str , true ) ; } join
Code	{ escapeJavaStyleString ( out , str , true ) ; } join
Distance : 3

130
Tree	{ escapeJavaStyleString ( out , str , true ) ; } serialised
Code	{ escapeJavaStyleString ( out , str , true ) ; } serialised
Distance : 3

131
Tree	{ escapeJavaStyleString ( out , str , true ) ; } getInstance
Code	{ escapeJavaStyleString ( out , str , true ) ; } getInstance
Distance : 3

132
Tree	{ escapeJavaStyleString ( out , str , true ) ; } fireChangeEvent
Code	{ escapeJavaStyleString ( out , str , true ) ; } fireChangeEvent
Distance : 3

133
Tree	{ escapeJavaStyleString ( out , str , true ) ; } throws
Code	{ escapeJavaStyleString ( out , str , true ) ; } throws
Distance : 3

134
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ArrayList
Code	{ escapeJavaStyleString ( out , str , true ) ; } ArrayList
Distance : 3

135
Tree	{ escapeJavaStyleString ( out , str , true ) ; } array
Code	{ escapeJavaStyleString ( out , str , true ) ; } array
Distance : 3

136
Tree	{ escapeJavaStyleString ( out , str , true ) ; } ParamChecks
Code	{ escapeJavaStyleString ( out , str , true ) ; } ParamChecks
Distance : 3

137
Tree	{ escapeJavaStyleString ( out , str , true ) ; } f
Code	{ escapeJavaStyleString ( out , str , true ) ; } f
Distance : 3

138
Tree	{ escapeJavaStyleString ( out , str , true ) ; } x
Code	{ escapeJavaStyleString ( out , str , true ) ; } x
Distance : 3

139
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Override
Code	{ escapeJavaStyleString ( out , str , true ) ; } Override
Distance : 3

140
Tree	{ escapeJavaStyleString ( out , str , true ) ; } parent
Code	{ escapeJavaStyleString ( out , str , true ) ; } parent
Distance : 3

141
Tree	{ escapeJavaStyleString ( out , str , true ) ; } str
Code	{ escapeJavaStyleString ( out , str , true ) ; } str
Distance : 3

142
Tree	{ escapeJavaStyleString ( out , str , true ) ; } MutableTimePeriod
Code	{ escapeJavaStyleString ( out , str , true ) ; } MutableTimePeriod
Distance : 3

143
Tree	{ escapeJavaStyleString ( out , str , true ) ; } b
Code	{ escapeJavaStyleString ( out , str , true ) ; } b
Distance : 3

144
Tree	{ escapeJavaStyleString ( out , str , true ) ; } <>
Code	{ escapeJavaStyleString ( out , str , true ) ; } <>
Distance : 3

145
Tree	{ escapeJavaStyleString ( out , str , true ) ; } returnZero
Code	{ escapeJavaStyleString ( out , str , true ) ; } returnZero
Distance : 3

146
Tree	{ escapeJavaStyleString ( out , str , true ) ; } MathRuntimeException
Code	{ escapeJavaStyleString ( out , str , true ) ; } MathRuntimeException
Distance : 3

147
Tree	{ escapeJavaStyleString ( out , str , true ) ; } UnivariateFunction
Code	{ escapeJavaStyleString ( out , str , true ) ; } UnivariateFunction
Distance : 3

148
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Args
Code	{ escapeJavaStyleString ( out , str , true ) ; } Args
Distance : 3

149
Tree	{ escapeJavaStyleString ( out , str , true ) ; } getFirstChild
Code	{ escapeJavaStyleString ( out , str , true ) ; } getFirstChild
Distance : 3

150
Tree	{ escapeJavaStyleString ( out , str , true ) ; } result
Code	{ escapeJavaStyleString ( out , str , true ) ; } result
Distance : 3

151
Tree	{ escapeJavaStyleString ( out , str , true ) ; } m
Code	{ escapeJavaStyleString ( out , str , true ) ; } m
Distance : 3

152
Tree	{ escapeJavaStyleString ( out , str , true ) ; } paint
Code	{ escapeJavaStyleString ( out , str , true ) ; } paint
Distance : 3

153
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Node
Code	{ escapeJavaStyleString ( out , str , true ) ; } Node
Distance : 3

154
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Exception
Code	{ escapeJavaStyleString ( out , str , true ) ; } Exception
Distance : 3

155
Tree	{ escapeJavaStyleString ( out , str , true ) ; } lines
Code	{ escapeJavaStyleString ( out , str , true ) ; } lines
Distance : 3

156
Tree	{ escapeJavaStyleString ( out , str , true ) ; } verify
Code	{ escapeJavaStyleString ( out , str , true ) ; } verify
Distance : 3

157
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Integer
Code	{ escapeJavaStyleString ( out , str , true ) ; } Integer
Distance : 3

158
Tree	{ escapeJavaStyleString ( out , str , true ) ; } v
Code	{ escapeJavaStyleString ( out , str , true ) ; } v
Distance : 3

159
Tree	{ escapeJavaStyleString ( out , str , true ) ; } length
Code	{ escapeJavaStyleString ( out , str , true ) ; } length
Distance : 3

160
Tree	{ escapeJavaStyleString ( out , str , true ) ; } TestUtils
Code	{ escapeJavaStyleString ( out , str , true ) ; } TestUtils
Distance : 3

161
Tree	{ escapeJavaStyleString ( out , str , true ) ; } IllegalArgumentException
Code	{ escapeJavaStyleString ( out , str , true ) ; } IllegalArgumentException
Distance : 3

162
Tree	{ escapeJavaStyleString ( out , str , true ) ; } reportCodeChange
Code	{ escapeJavaStyleString ( out , str , true ) ; } reportCodeChange
Distance : 3

163
Tree	{ escapeJavaStyleString ( out , str , true ) ; } FastMath
Code	{ escapeJavaStyleString ( out , str , true ) ; } FastMath
Distance : 3

164
Tree	{ escapeJavaStyleString ( out , str , true ) ; } expected
Code	{ escapeJavaStyleString ( out , str , true ) ; } expected
Distance : 3

165
Tree	{ escapeJavaStyleString ( out , str , true ) ; } name
Code	{ escapeJavaStyleString ( out , str , true ) ; } name
Distance : 3

166
Tree	{ escapeJavaStyleString ( out , str , true ) ; } field
Code	{ escapeJavaStyleString ( out , str , true ) ; } field
Distance : 3

167
Tree	{ escapeJavaStyleString ( out , str , true ) ; } List
Code	{ escapeJavaStyleString ( out , str , true ) ; } List
Distance : 3

168
Tree	{ escapeJavaStyleString ( out , str , true ) ; } fail
Code	{ escapeJavaStyleString ( out , str , true ) ; } fail
Distance : 3

169
Tree	{ escapeJavaStyleString ( out , str , true ) ; } try
Code	{ escapeJavaStyleString ( out , str , true ) ; } try
Distance : 3

170
Tree	{ escapeJavaStyleString ( out , str , true ) ; } t
Code	{ escapeJavaStyleString ( out , str , true ) ; } t
Distance : 3

171
Tree	{ escapeJavaStyleString ( out , str , true ) ; } sb
Code	{ escapeJavaStyleString ( out , str , true ) ; } sb
Distance : 3

172
Tree	{ escapeJavaStyleString ( out , str , true ) ; } append
Code	{ escapeJavaStyleString ( out , str , true ) ; } append
Distance : 3

173
Tree	{ escapeJavaStyleString ( out , str , true ) ; } isBlock
Code	{ escapeJavaStyleString ( out , str , true ) ; } isBlock
Distance : 3

174
Tree	{ escapeJavaStyleString ( out , str , true ) ; } assertEquals
Code	{ escapeJavaStyleString ( out , str , true ) ; } assertEquals
Distance : 3

175
Tree	{ escapeJavaStyleString ( out , str , true ) ; } !
Code	{ escapeJavaStyleString ( out , str , true ) ; } !
Distance : 3

176
Tree	{ escapeJavaStyleString ( out , str , true ) ; } []
Code	{ escapeJavaStyleString ( out , str , true ) ; } []
Distance : 3

177
Tree	{ escapeJavaStyleString ( out , str , true ) ; } :
Code	{ escapeJavaStyleString ( out , str , true ) ; } :
Distance : 3

178
Tree	{ escapeJavaStyleString ( out , str , true ) ; } test
Code	{ escapeJavaStyleString ( out , str , true ) ; } test
Distance : 3

179
Tree	{ escapeJavaStyleString ( out , str , true ) ; } @
Code	{ escapeJavaStyleString ( out , str , true ) ; } @
Distance : 3

180
Tree	{ escapeJavaStyleString ( out , str , true ) ; } false
Code	{ escapeJavaStyleString ( out , str , true ) ; } false
Distance : 3

181
Tree	{ escapeJavaStyleString ( out , str , true ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , str , true ) ; } nullNotPermitted
Distance : 3

182
Tree	{ escapeJavaStyleString ( out , str , true ) ; } d
Code	{ escapeJavaStyleString ( out , str , true ) ; } d
Distance : 3

183
Tree	{ escapeJavaStyleString ( out , str , true ) ; } double
Code	{ escapeJavaStyleString ( out , str , true ) ; } double
Distance : 3

184
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Object
Code	{ escapeJavaStyleString ( out , str , true ) ; } Object
Distance : 3

185
Tree	{ escapeJavaStyleString ( out , str , true ) ; } scope
Code	{ escapeJavaStyleString ( out , str , true ) ; } scope
Distance : 3

186
Tree	{ escapeJavaStyleString ( out , str , true ) ; } TestUtilities
Code	{ escapeJavaStyleString ( out , str , true ) ; } TestUtilities
Distance : 3

187
Tree	{ escapeJavaStyleString ( out , str , true ) ; } checkArgument
Code	{ escapeJavaStyleString ( out , str , true ) ; } checkArgument
Distance : 3

188
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Invocation
Code	{ escapeJavaStyleString ( out , str , true ) ; } Invocation
Distance : 3

189
Tree	{ escapeJavaStyleString ( out , str , true ) ; } for
Code	{ escapeJavaStyleString ( out , str , true ) ; } for
Distance : 3

190
Tree	{ escapeJavaStyleString ( out , str , true ) ; } equals
Code	{ escapeJavaStyleString ( out , str , true ) ; } equals
Distance : 3

191
Tree	{ escapeJavaStyleString ( out , str , true ) ; } js
Code	{ escapeJavaStyleString ( out , str , true ) ; } js
Distance : 3

192
Tree	{ escapeJavaStyleString ( out , str , true ) ; } options
Code	{ escapeJavaStyleString ( out , str , true ) ; } options
Distance : 3

193
Tree	{ escapeJavaStyleString ( out , str , true ) ; } p
Code	{ escapeJavaStyleString ( out , str , true ) ; } p
Distance : 3

194
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Test
Code	{ escapeJavaStyleString ( out , str , true ) ; } Test
Distance : 3

195
Tree	{ escapeJavaStyleString ( out , str , true ) ; } Class
Code	{ escapeJavaStyleString ( out , str , true ) ; } Class
Distance : 3

196
Tree	{ escapeJavaStyleString ( out , str , true ) ; } notifyListeners
Code	{ escapeJavaStyleString ( out , str , true ) ; } notifyListeners
Distance : 3

197
Tree	{ escapeJavaStyleString ( out , str , true ) ; } c
Code	{ escapeJavaStyleString ( out , str , true ) ; } c
Distance : 3

198
Tree	{ escapeJavaStyleString ( out , str , true ) ; } testSame
Code	{ escapeJavaStyleString ( out , str , true ) ; } testSame
Distance : 3

199
Tree	{ escapeJavaStyleString ( out , str , true ) ; } traverseEs6
Code	{ escapeJavaStyleString ( out , str , true ) ; } traverseEs6
Distance : 3

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return escapeJavaStyleString ( str , true ) ; } invocations
Code	{ return escapeJavaStyleString ( str , true ) ; } invocations
Distance : 3

1
Tree	{ return escapeJavaStyleString ( str , true ) ; } Class
Code	{ return escapeJavaStyleString ( str , true ) ; } Class
Distance : 3

2
Tree	{ return escapeJavaStyleString ( str , true ) ; } {}
Code	{ return escapeJavaStyleString ( str , true ) ; } {}
Distance : 3

3
Tree	{ return escapeJavaStyleString ( str , true ) ; } mock
Code	{ return escapeJavaStyleString ( str , true ) ; } mock
Distance : 3

4
Tree	{ return escapeJavaStyleString ( str , true ) ; } f
Code	{ return escapeJavaStyleString ( str , true ) ; } f
Distance : 3

5
Tree	{ return escapeJavaStyleString ( str , true ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , true ) ; } ParamChecks
Distance : 3

6
Tree	{ return escapeJavaStyleString ( str , true ) ; } -
Code	{ return escapeJavaStyleString ( str , true ) ; } -
Distance : 3

7
Tree	{ return escapeJavaStyleString ( str , true ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , true ) ; } Preconditions
Distance : 3

8
Tree	{ return escapeJavaStyleString ( str , true ) ; } T
Code	{ return escapeJavaStyleString ( str , true ) ; } T
Distance : 3

9
Tree	{ return escapeJavaStyleString ( str , true ) ; } &&
Code	{ return escapeJavaStyleString ( str , true ) ; } &&
Distance : 3

10
Tree	{ return escapeJavaStyleString ( str , true ) ; } ]
Code	{ return escapeJavaStyleString ( str , true ) ; } ]
Distance : 3

11
Tree	{ return escapeJavaStyleString ( str , true ) ; } [
Code	{ return escapeJavaStyleString ( str , true ) ; } [
Distance : 3

12
Tree	{ return escapeJavaStyleString ( str , true ) ; } Object
Code	{ return escapeJavaStyleString ( str , true ) ; } Object
Distance : 3

13
Tree	{ return escapeJavaStyleString ( str , true ) ; } class
Code	{ return escapeJavaStyleString ( str , true ) ; } class
Distance : 3

14
Tree	{ return escapeJavaStyleString ( str , true ) ; } test
Code	{ return escapeJavaStyleString ( str , true ) ; } test
Distance : 3

15
Tree	{ return escapeJavaStyleString ( str , true ) ; } @
Code	{ return escapeJavaStyleString ( str , true ) ; } @
Distance : 3

16
Tree	{ return escapeJavaStyleString ( str , true ) ; } !
Code	{ return escapeJavaStyleString ( str , true ) ; } !
Distance : 3

17
Tree	{ return escapeJavaStyleString ( str , true ) ; } assertEquals
Code	{ return escapeJavaStyleString ( str , true ) ; } assertEquals
Distance : 3

18
Tree	{ return escapeJavaStyleString ( str , true ) ; } ==
Code	{ return escapeJavaStyleString ( str , true ) ; } ==
Distance : 3

19
Tree	{ return escapeJavaStyleString ( str , true ) ; } void
Code	{ return escapeJavaStyleString ( str , true ) ; } void
Distance : 3

20
Tree	{ return escapeJavaStyleString ( str , true ) ; } []
Code	{ return escapeJavaStyleString ( str , true ) ; } []
Distance : 3

21
Tree	{ return escapeJavaStyleString ( str , true ) ; } checkState
Code	{ return escapeJavaStyleString ( str , true ) ; } checkState
Distance : 3

22
Tree	{ return escapeJavaStyleString ( str , true ) ; } Test
Code	{ return escapeJavaStyleString ( str , true ) ; } Test
Distance : 3

23
Tree	{ return escapeJavaStyleString ( str , true ) ; } out
Code	{ return escapeJavaStyleString ( str , true ) ; } out
Distance : 3

24
Tree	{ return escapeJavaStyleString ( str , true ) ; } nullNotPermitted
Code	{ return escapeJavaStyleString ( str , true ) ; } nullNotPermitted
Distance : 3

25
Tree	{ return escapeJavaStyleString ( str , true ) ; } n
Code	{ return escapeJavaStyleString ( str , true ) ; } n
Distance : 3

26
Tree	{ return escapeJavaStyleString ( str , true ) ; } !=
Code	{ return escapeJavaStyleString ( str , true ) ; } !=
Distance : 3

27
Tree	{ return escapeJavaStyleString ( str , true ) ; } i
Code	{ return escapeJavaStyleString ( str , true ) ; } i
Distance : 3

28
Tree	{ return escapeJavaStyleString ( str , true ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , true ) ; } MathRuntimeException
Distance : 3

29
Tree	{ return escapeJavaStyleString ( str , true ) ; } Override
Code	{ return escapeJavaStyleString ( str , true ) ; } Override
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , true ) ; } public
Code	{ return escapeJavaStyleString ( str , true ) ; } public
Distance : 3

31
Tree	{ return escapeJavaStyleString ( str , true ) ; } >
Code	{ return escapeJavaStyleString ( str , true ) ; } >
Distance : 3

32
Tree	{ return escapeJavaStyleString ( str , true ) ; } new
Code	{ return escapeJavaStyleString ( str , true ) ; } new
Distance : 3

33
Tree	{ return escapeJavaStyleString ( str , true ) ; } STRING_CONSTANT
Code	{ return escapeJavaStyleString ( str , true ) ; } STRING_CONSTANT
Distance : 3

34
Tree	{ return escapeJavaStyleString ( str , true ) ; } ,
Code	{ return escapeJavaStyleString ( str , true ) ; } ,
Distance : 3

35
Tree	{ return escapeJavaStyleString ( str , true ) ; } .
Code	{ return escapeJavaStyleString ( str , true ) ; } .
Distance : 3

36
Tree	{ return escapeJavaStyleString ( str , true ) ; } }
Code	{ return escapeJavaStyleString ( str , true ) ; } }
Distance : 3

37
Tree	{ return escapeJavaStyleString ( str , true ) ; } =
Code	{ return escapeJavaStyleString ( str , true ) ; } =
Distance : 3

38
Tree	{ return escapeJavaStyleString ( str , true ) ; } (
Code	{ return escapeJavaStyleString ( str , true ) ; } (
Distance : 3

39
Tree	{ return escapeJavaStyleString ( str , true ) ; } <s>
Code	{ return escapeJavaStyleString ( str , true ) ; } <s>
Distance : 3

40
Tree	{ return escapeJavaStyleString ( str , true ) ; } <blank>
Code	{ return escapeJavaStyleString ( str , true ) ; } <blank>
Distance : 3

41
Tree	{ return escapeJavaStyleString ( str , true ) ; } {
Code	{ return escapeJavaStyleString ( str , true ) ; } {
Distance : 3

42
Tree	{ return escapeJavaStyleString ( str , true ) ; } )
Code	{ return escapeJavaStyleString ( str , true ) ; } )
Distance : 3

43
Tree	{ return escapeJavaStyleString ( str , true ) ; } ;
Code	{ return escapeJavaStyleString ( str , true ) ; } ;
Distance : 3

44
Tree	{ return escapeJavaStyleString ( str , true ) ; } ()
Code	{ return escapeJavaStyleString ( str , true ) ; } ()
Distance : 3

45
Tree	{ return escapeJavaStyleString ( str , true ) ; } {
Code	{ return escapeJavaStyleString ( str , true ) ; } {
Distance : 3

46
Tree	{ return escapeJavaStyleString ( str , true ) ; } false
Code	{ return escapeJavaStyleString ( str , true ) ; } false
Distance : 3

47
Tree	{ return escapeJavaStyleString ( str , true ) ; } int
Code	{ return escapeJavaStyleString ( str , true ) ; } int
Distance : 3

48
Tree	{ return escapeJavaStyleString ( str , true ) ; } double
Code	{ return escapeJavaStyleString ( str , true ) ; } double
Distance : 3

49
Tree	{ return escapeJavaStyleString ( str , true ) ; } e
Code	{ return escapeJavaStyleString ( str , true ) ; } e
Distance : 3

50
Tree	{ return escapeJavaStyleString ( str , true ) ; } else
Code	{ return escapeJavaStyleString ( str , true ) ; } else
Distance : 3

51
Tree	{ return escapeJavaStyleString ( str , true ) ; } NUMBER_CONSTANT
Code	{ return escapeJavaStyleString ( str , true ) ; } NUMBER_CONSTANT
Distance : 3

52
Tree	{ return escapeJavaStyleString ( str , true ) ; } this
Code	{ return escapeJavaStyleString ( str , true ) ; } this
Distance : 3

53
Tree	{ return escapeJavaStyleString ( str , true ) ; } final
Code	{ return escapeJavaStyleString ( str , true ) ; } final
Distance : 3

54
Tree	{ return escapeJavaStyleString ( str , true ) ; } name
Code	{ return escapeJavaStyleString ( str , true ) ; } name
Distance : 3

55
Tree	{ return escapeJavaStyleString ( str , true ) ; } t
Code	{ return escapeJavaStyleString ( str , true ) ; } t
Distance : 3

56
Tree	{ return escapeJavaStyleString ( str , true ) ; } Collection
Code	{ return escapeJavaStyleString ( str , true ) ; } Collection
Distance : 3

57
Tree	{ return escapeJavaStyleString ( str , true ) ; } getField
Code	{ return escapeJavaStyleString ( str , true ) ; } getField
Distance : 3

58
Tree	{ return escapeJavaStyleString ( str , true ) ; } dataset
Code	{ return escapeJavaStyleString ( str , true ) ; } dataset
Distance : 3

59
Tree	{ return escapeJavaStyleString ( str , true ) ; } protected
Code	{ return escapeJavaStyleString ( str , true ) ; } protected
Distance : 3

60
Tree	{ return escapeJavaStyleString ( str , true ) ; } PlotChangeEvent
Code	{ return escapeJavaStyleString ( str , true ) ; } PlotChangeEvent
Distance : 3

61
Tree	{ return escapeJavaStyleString ( str , true ) ; } mode
Code	{ return escapeJavaStyleString ( str , true ) ; } mode
Distance : 3

62
Tree	{ return escapeJavaStyleString ( str , true ) ; } mockingProgress
Code	{ return escapeJavaStyleString ( str , true ) ; } mockingProgress
Distance : 3

63
Tree	{ return escapeJavaStyleString ( str , true ) ; } return;
Code	{ return escapeJavaStyleString ( str , true ) ; } return;
Distance : 3

64
Tree	{ return escapeJavaStyleString ( str , true ) ; } isEmpty
Code	{ return escapeJavaStyleString ( str , true ) ; } isEmpty
Distance : 3

65
Tree	{ return escapeJavaStyleString ( str , true ) ; } char
Code	{ return escapeJavaStyleString ( str , true ) ; } char
Distance : 3

66
Tree	{ return escapeJavaStyleString ( str , true ) ; } static
Code	{ return escapeJavaStyleString ( str , true ) ; } static
Distance : 3

67
Tree	{ return escapeJavaStyleString ( str , true ) ; } setAcceptedLanguage
Code	{ return escapeJavaStyleString ( str , true ) ; } setAcceptedLanguage
Distance : 3

68
Tree	{ return escapeJavaStyleString ( str , true ) ; } JSType
Code	{ return escapeJavaStyleString ( str , true ) ; } JSType
Distance : 3

69
Tree	{ return escapeJavaStyleString ( str , true ) ; } get
Code	{ return escapeJavaStyleString ( str , true ) ; } get
Distance : 3

70
Tree	{ return escapeJavaStyleString ( str , true ) ; } getMessage
Code	{ return escapeJavaStyleString ( str , true ) ; } getMessage
Distance : 3

71
Tree	{ return escapeJavaStyleString ( str , true ) ; } true
Code	{ return escapeJavaStyleString ( str , true ) ; } true
Distance : 3

72
Tree	{ return escapeJavaStyleString ( str , true ) ; } return
Code	{ return escapeJavaStyleString ( str , true ) ; } return
Distance : 3

73
Tree	{ return escapeJavaStyleString ( str , true ) ; } if
Code	{ return escapeJavaStyleString ( str , true ) ; } if
Distance : 3

74
Tree	{ return escapeJavaStyleString ( str , true ) ; } stream
Code	{ return escapeJavaStyleString ( str , true ) ; } stream
Distance : 3

75
Tree	{ return escapeJavaStyleString ( str , true ) ; } <
Code	{ return escapeJavaStyleString ( str , true ) ; } <
Distance : 3

76
Tree	{ return escapeJavaStyleString ( str , true ) ; } solver
Code	{ return escapeJavaStyleString ( str , true ) ; } solver
Distance : 3

77
Tree	{ return escapeJavaStyleString ( str , true ) ; } pattern
Code	{ return escapeJavaStyleString ( str , true ) ; } pattern
Distance : 3

78
Tree	{ return escapeJavaStyleString ( str , true ) ; } js
Code	{ return escapeJavaStyleString ( str , true ) ; } js
Distance : 3

79
Tree	{ return escapeJavaStyleString ( str , true ) ; } TestUtilities
Code	{ return escapeJavaStyleString ( str , true ) ; } TestUtilities
Distance : 3

80
Tree	{ return escapeJavaStyleString ( str , true ) ; } equals
Code	{ return escapeJavaStyleString ( str , true ) ; } equals
Distance : 3

81
Tree	{ return escapeJavaStyleString ( str , true ) ; } d
Code	{ return escapeJavaStyleString ( str , true ) ; } d
Distance : 3

82
Tree	{ return escapeJavaStyleString ( str , true ) ; } externs
Code	{ return escapeJavaStyleString ( str , true ) ; } externs
Distance : 3

83
Tree	{ return escapeJavaStyleString ( str , true ) ; } assertTrue
Code	{ return escapeJavaStyleString ( str , true ) ; } assertTrue
Distance : 3

84
Tree	{ return escapeJavaStyleString ( str , true ) ; } for
Code	{ return escapeJavaStyleString ( str , true ) ; } for
Distance : 3

85
Tree	{ return escapeJavaStyleString ( str , true ) ; } Invocation
Code	{ return escapeJavaStyleString ( str , true ) ; } Invocation
Distance : 3

86
Tree	{ return escapeJavaStyleString ( str , true ) ; } getParent
Code	{ return escapeJavaStyleString ( str , true ) ; } getParent
Distance : 3

87
Tree	{ return escapeJavaStyleString ( str , true ) ; } setUp
Code	{ return escapeJavaStyleString ( str , true ) ; } setUp
Distance : 3

88
Tree	{ return escapeJavaStyleString ( str , true ) ; } StrBuilder
Code	{ return escapeJavaStyleString ( str , true ) ; } StrBuilder
Distance : 3

89
Tree	{ return escapeJavaStyleString ( str , true ) ; } reportMatcher
Code	{ return escapeJavaStyleString ( str , true ) ; } reportMatcher
Distance : 3

90
Tree	{ return escapeJavaStyleString ( str , true ) ; } index
Code	{ return escapeJavaStyleString ( str , true ) ; } index
Distance : 3

91
Tree	{ return escapeJavaStyleString ( str , true ) ; } node
Code	{ return escapeJavaStyleString ( str , true ) ; } node
Distance : 3

92
Tree	{ return escapeJavaStyleString ( str , true ) ; } matcher
Code	{ return escapeJavaStyleString ( str , true ) ; } matcher
Distance : 3

93
Tree	{ return escapeJavaStyleString ( str , true ) ; } abs
Code	{ return escapeJavaStyleString ( str , true ) ; } abs
Distance : 3

94
Tree	{ return escapeJavaStyleString ( str , true ) ; } Double
Code	{ return escapeJavaStyleString ( str , true ) ; } Double
Distance : 3

95
Tree	{ return escapeJavaStyleString ( str , true ) ; } PeriodType
Code	{ return escapeJavaStyleString ( str , true ) ; } PeriodType
Distance : 3

96
Tree	{ return escapeJavaStyleString ( str , true ) ; } instant
Code	{ return escapeJavaStyleString ( str , true ) ; } instant
Distance : 3

97
Tree	{ return escapeJavaStyleString ( str , true ) ; } values
Code	{ return escapeJavaStyleString ( str , true ) ; } values
Distance : 3

98
Tree	{ return escapeJavaStyleString ( str , true ) ; } isNormalBlock
Code	{ return escapeJavaStyleString ( str , true ) ; } isNormalBlock
Distance : 3

99
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

100
Tree	{ return escapeJavaStyleString ( str , true ) ; } contains
Code	{ return escapeJavaStyleString ( str , true ) ; } contains
Distance : 3

101
Tree	{ return escapeJavaStyleString ( str , true ) ; } <=
Code	{ return escapeJavaStyleString ( str , true ) ; } <=
Distance : 3

102
Tree	{ return escapeJavaStyleString ( str , true ) ; } a
Code	{ return escapeJavaStyleString ( str , true ) ; } a
Distance : 3

103
Tree	{ return escapeJavaStyleString ( str , true ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ return escapeJavaStyleString ( str , true ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

104
Tree	{ return escapeJavaStyleString ( str , true ) ; } size
Code	{ return escapeJavaStyleString ( str , true ) ; } size
Distance : 3

105
Tree	{ return escapeJavaStyleString ( str , true ) ; } StringBuilder
Code	{ return escapeJavaStyleString ( str , true ) ; } StringBuilder
Distance : 3

106
Tree	{ return escapeJavaStyleString ( str , true ) ; } b
Code	{ return escapeJavaStyleString ( str , true ) ; } b
Distance : 3

107
Tree	{ return escapeJavaStyleString ( str , true ) ; } MutableTimePeriod
Code	{ return escapeJavaStyleString ( str , true ) ; } MutableTimePeriod
Distance : 3

108
Tree	{ return escapeJavaStyleString ( str , true ) ; } stroke
Code	{ return escapeJavaStyleString ( str , true ) ; } stroke
Distance : 3

109
Tree	{ return escapeJavaStyleString ( str , true ) ; } traverseEs6
Code	{ return escapeJavaStyleString ( str , true ) ; } traverseEs6
Distance : 3

110
Tree	{ return escapeJavaStyleString ( str , true ) ; } UnivariateFunction
Code	{ return escapeJavaStyleString ( str , true ) ; } UnivariateFunction
Distance : 3

111
Tree	{ return escapeJavaStyleString ( str , true ) ; } sb
Code	{ return escapeJavaStyleString ( str , true ) ; } sb
Distance : 3

112
Tree	{ return escapeJavaStyleString ( str , true ) ; } throws
Code	{ return escapeJavaStyleString ( str , true ) ; } throws
Distance : 3

113
Tree	{ return escapeJavaStyleString ( str , true ) ; } scope
Code	{ return escapeJavaStyleString ( str , true ) ; } scope
Distance : 3

114
Tree	{ return escapeJavaStyleString ( str , true ) ; } sqrt
Code	{ return escapeJavaStyleString ( str , true ) ; } sqrt
Distance : 3

115
Tree	{ return escapeJavaStyleString ( str , true ) ; } clone
Code	{ return escapeJavaStyleString ( str , true ) ; } clone
Distance : 3

116
Tree	{ return escapeJavaStyleString ( str , true ) ; } returnZero
Code	{ return escapeJavaStyleString ( str , true ) ; } returnZero
Distance : 3

117
Tree	{ return escapeJavaStyleString ( str , true ) ; } getFirstChild
Code	{ return escapeJavaStyleString ( str , true ) ; } getFirstChild
Distance : 3

118
Tree	{ return escapeJavaStyleString ( str , true ) ; } simpleMethod
Code	{ return escapeJavaStyleString ( str , true ) ; } simpleMethod
Distance : 3

119
Tree	{ return escapeJavaStyleString ( str , true ) ; } getArgumentMatcherStorage
Code	{ return escapeJavaStyleString ( str , true ) ; } getArgumentMatcherStorage
Distance : 3

120
Tree	{ return escapeJavaStyleString ( str , true ) ; } append
Code	{ return escapeJavaStyleString ( str , true ) ; } append
Distance : 3

121
Tree	{ return escapeJavaStyleString ( str , true ) ; } optimizer
Code	{ return escapeJavaStyleString ( str , true ) ; } optimizer
Distance : 3

122
Tree	{ return escapeJavaStyleString ( str , true ) ; } obj
Code	{ return escapeJavaStyleString ( str , true ) ; } obj
Distance : 3

123
Tree	{ return escapeJavaStyleString ( str , true ) ; } chrono
Code	{ return escapeJavaStyleString ( str , true ) ; } chrono
Distance : 3

124
Tree	{ return escapeJavaStyleString ( str , true ) ; } isBlock
Code	{ return escapeJavaStyleString ( str , true ) ; } isBlock
Distance : 3

125
Tree	{ return escapeJavaStyleString ( str , true ) ; } <>
Code	{ return escapeJavaStyleString ( str , true ) ; } <>
Distance : 3

126
Tree	{ return escapeJavaStyleString ( str , true ) ; } Integer
Code	{ return escapeJavaStyleString ( str , true ) ; } Integer
Distance : 3

127
Tree	{ return escapeJavaStyleString ( str , true ) ; } v
Code	{ return escapeJavaStyleString ( str , true ) ; } v
Distance : 3

128
Tree	{ return escapeJavaStyleString ( str , true ) ; } reportCodeChange
Code	{ return escapeJavaStyleString ( str , true ) ; } reportCodeChange
Distance : 3

129
Tree	{ return escapeJavaStyleString ( str , true ) ; } IllegalArgumentException
Code	{ return escapeJavaStyleString ( str , true ) ; } IllegalArgumentException
Distance : 3

130
Tree	{ return escapeJavaStyleString ( str , true ) ; } invocation
Code	{ return escapeJavaStyleString ( str , true ) ; } invocation
Distance : 3

131
Tree	{ return escapeJavaStyleString ( str , true ) ; } assertThat
Code	{ return escapeJavaStyleString ( str , true ) ; } assertThat
Distance : 3

132
Tree	{ return escapeJavaStyleString ( str , true ) ; } FastMath
Code	{ return escapeJavaStyleString ( str , true ) ; } FastMath
Distance : 3

133
Tree	{ return escapeJavaStyleString ( str , true ) ; } expected
Code	{ return escapeJavaStyleString ( str , true ) ; } expected
Distance : 3

134
Tree	{ return escapeJavaStyleString ( str , true ) ; } createIllegalArgumentException
Code	{ return escapeJavaStyleString ( str , true ) ; } createIllegalArgumentException
Distance : 3

135
Tree	{ return escapeJavaStyleString ( str , true ) ; } parent
Code	{ return escapeJavaStyleString ( str , true ) ; } parent
Distance : 3

136
Tree	{ return escapeJavaStyleString ( str , true ) ; } fireChangeEvent
Code	{ return escapeJavaStyleString ( str , true ) ; } fireChangeEvent
Distance : 3

137
Tree	{ return escapeJavaStyleString ( str , true ) ; } ArrayList
Code	{ return escapeJavaStyleString ( str , true ) ; } ArrayList
Distance : 3

138
Tree	{ return escapeJavaStyleString ( str , true ) ; } testSame
Code	{ return escapeJavaStyleString ( str , true ) ; } testSame
Distance : 3

139
Tree	{ return escapeJavaStyleString ( str , true ) ; } x
Code	{ return escapeJavaStyleString ( str , true ) ; } x
Distance : 3

140
Tree	{ return escapeJavaStyleString ( str , true ) ; } LINE_JOINER
Code	{ return escapeJavaStyleString ( str , true ) ; } LINE_JOINER
Distance : 3

141
Tree	{ return escapeJavaStyleString ( str , true ) ; } str
Code	{ return escapeJavaStyleString ( str , true ) ; } str
Distance : 3

142
Tree	{ return escapeJavaStyleString ( str , true ) ; } try
Code	{ return escapeJavaStyleString ( str , true ) ; } try
Distance : 3

143
Tree	{ return escapeJavaStyleString ( str , true ) ; } result
Code	{ return escapeJavaStyleString ( str , true ) ; } result
Distance : 3

144
Tree	{ return escapeJavaStyleString ( str , true ) ; } fail
Code	{ return escapeJavaStyleString ( str , true ) ; } fail
Distance : 3

145
Tree	{ return escapeJavaStyleString ( str , true ) ; } :
Code	{ return escapeJavaStyleString ( str , true ) ; } :
Distance : 3

146
Tree	{ return escapeJavaStyleString ( str , true ) ; } valueOf
Code	{ return escapeJavaStyleString ( str , true ) ; } valueOf
Distance : 3

147
Tree	{ return escapeJavaStyleString ( str , true ) ; } y
Code	{ return escapeJavaStyleString ( str , true ) ; } y
Distance : 3

148
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

149
Tree	{ return escapeJavaStyleString ( str , true ) ; } array
Code	{ return escapeJavaStyleString ( str , true ) ; } array
Distance : 3

150
Tree	{ return escapeJavaStyleString ( str , true ) ; } ?
Code	{ return escapeJavaStyleString ( str , true ) ; } ?
Distance : 3

151
Tree	{ return escapeJavaStyleString ( str , true ) ; } boolean
Code	{ return escapeJavaStyleString ( str , true ) ; } boolean
Distance : 3

152
Tree	{ return escapeJavaStyleString ( str , true ) ; } m
Code	{ return escapeJavaStyleString ( str , true ) ; } m
Distance : 3

153
Tree	{ return escapeJavaStyleString ( str , true ) ; } paint
Code	{ return escapeJavaStyleString ( str , true ) ; } paint
Distance : 3

154
Tree	{ return escapeJavaStyleString ( str , true ) ; } type
Code	{ return escapeJavaStyleString ( str , true ) ; } type
Distance : 3

155
Tree	{ return escapeJavaStyleString ( str , true ) ; } *
Code	{ return escapeJavaStyleString ( str , true ) ; } *
Distance : 3

156
Tree	{ return escapeJavaStyleString ( str , true ) ; } getInstance
Code	{ return escapeJavaStyleString ( str , true ) ; } getInstance
Distance : 3

157
Tree	{ return escapeJavaStyleString ( str , true ) ; } serialised
Code	{ return escapeJavaStyleString ( str , true ) ; } serialised
Distance : 3

158
Tree	{ return escapeJavaStyleString ( str , true ) ; } Fraction
Code	{ return escapeJavaStyleString ( str , true ) ; } Fraction
Distance : 3

159
Tree	{ return escapeJavaStyleString ( str , true ) ; } checkNotNull
Code	{ return escapeJavaStyleString ( str , true ) ; } checkNotNull
Distance : 3

160
Tree	{ return escapeJavaStyleString ( str , true ) ; } source
Code	{ return escapeJavaStyleString ( str , true ) ; } source
Distance : 3

161
Tree	{ return escapeJavaStyleString ( str , true ) ; } toString
Code	{ return escapeJavaStyleString ( str , true ) ; } toString
Distance : 3

162
Tree	{ return escapeJavaStyleString ( str , true ) ; } Math
Code	{ return escapeJavaStyleString ( str , true ) ; } Math
Distance : 3

163
Tree	{ return escapeJavaStyleString ( str , true ) ; } root
Code	{ return escapeJavaStyleString ( str , true ) ; } root
Distance : 3

164
Tree	{ return escapeJavaStyleString ( str , true ) ; } options
Code	{ return escapeJavaStyleString ( str , true ) ; } options
Distance : 3

165
Tree	{ return escapeJavaStyleString ( str , true ) ; } p
Code	{ return escapeJavaStyleString ( str , true ) ; } p
Distance : 3

166
Tree	{ return escapeJavaStyleString ( str , true ) ; } data
Code	{ return escapeJavaStyleString ( str , true ) ; } data
Distance : 3

167
Tree	{ return escapeJavaStyleString ( str , true ) ; } add
Code	{ return escapeJavaStyleString ( str , true ) ; } add
Distance : 3

168
Tree	{ return escapeJavaStyleString ( str , true ) ; } field
Code	{ return escapeJavaStyleString ( str , true ) ; } field
Distance : 3

169
Tree	{ return escapeJavaStyleString ( str , true ) ; } checkArgument
Code	{ return escapeJavaStyleString ( str , true ) ; } checkArgument
Distance : 3

170
Tree	{ return escapeJavaStyleString ( str , true ) ; } ex
Code	{ return escapeJavaStyleString ( str , true ) ; } ex
Distance : 3

171
Tree	{ return escapeJavaStyleString ( str , true ) ; } NodeUtil
Code	{ return escapeJavaStyleString ( str , true ) ; } NodeUtil
Distance : 3

172
Tree	{ return escapeJavaStyleString ( str , true ) ; } join
Code	{ return escapeJavaStyleString ( str , true ) ; } join
Distance : 3

173
Tree	{ return escapeJavaStyleString ( str , true ) ; } Args
Code	{ return escapeJavaStyleString ( str , true ) ; } Args
Distance : 3

174
Tree	{ return escapeJavaStyleString ( str , true ) ; } NodeTraversal
Code	{ return escapeJavaStyleString ( str , true ) ; } NodeTraversal
Distance : 3

175
Tree	{ return escapeJavaStyleString ( str , true ) ; } List
Code	{ return escapeJavaStyleString ( str , true ) ; } List
Distance : 3

176
Tree	{ return escapeJavaStyleString ( str , true ) ; } Exception
Code	{ return escapeJavaStyleString ( str , true ) ; } Exception
Distance : 3

177
Tree	{ return escapeJavaStyleString ( str , true ) ; } Node
Code	{ return escapeJavaStyleString ( str , true ) ; } Node
Distance : 3

178
Tree	{ return escapeJavaStyleString ( str , true ) ; } c
Code	{ return escapeJavaStyleString ( str , true ) ; } c
Distance : 3

179
Tree	{ return escapeJavaStyleString ( str , true ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , true ) ; } notifyListeners
Distance : 3

180
Tree	{ return escapeJavaStyleString ( str , true ) ; } lines
Code	{ return escapeJavaStyleString ( str , true ) ; } lines
Distance : 3

181
Tree	{ return escapeJavaStyleString ( str , true ) ; } verify
Code	{ return escapeJavaStyleString ( str , true ) ; } verify
Distance : 3

182
Tree	{ return escapeJavaStyleString ( str , true ) ; } compiler
Code	{ return escapeJavaStyleString ( str , true ) ; } compiler
Distance : 3

183
Tree	{ return escapeJavaStyleString ( str , true ) ; } String
Code	{ return escapeJavaStyleString ( str , true ) ; } String
Distance : 3

184
Tree	{ return escapeJavaStyleString ( str , true ) ; } null
Code	{ return escapeJavaStyleString ( str , true ) ; } null
Distance : 3

185
Tree	{ return escapeJavaStyleString ( str , true ) ; } wanted
Code	{ return escapeJavaStyleString ( str , true ) ; } wanted
Distance : 3

186
Tree	{ return escapeJavaStyleString ( str , true ) ; } +
Code	{ return escapeJavaStyleString ( str , true ) ; } +
Distance : 3

187
Tree	{ return escapeJavaStyleString ( str , true ) ; } throw
Code	{ return escapeJavaStyleString ( str , true ) ; } throw
Distance : 3

188
Tree	{ return escapeJavaStyleString ( str , true ) ; } super
Code	{ return escapeJavaStyleString ( str , true ) ; } super
Distance : 3

189
Tree	{ return escapeJavaStyleString ( str , true ) ; } value
Code	{ return escapeJavaStyleString ( str , true ) ; } value
Distance : 3

190
Tree	{ return escapeJavaStyleString ( str , true ) ; } long
Code	{ return escapeJavaStyleString ( str , true ) ; } long
Distance : 3

191
Tree	{ return escapeJavaStyleString ( str , true ) ; } /
Code	{ return escapeJavaStyleString ( str , true ) ; } /
Distance : 3

192
Tree	{ return escapeJavaStyleString ( str , true ) ; } length
Code	{ return escapeJavaStyleString ( str , true ) ; } length
Distance : 3

193
Tree	{ return escapeJavaStyleString ( str , true ) ; } TestUtils
Code	{ return escapeJavaStyleString ( str , true ) ; } TestUtils
Distance : 3

194
Tree	{ return escapeJavaStyleString ( str , true ) ; } alpha
Code	{ return escapeJavaStyleString ( str , true ) ; } alpha
Distance : 3

195
Tree	{ return escapeJavaStyleString ( str , true ) ; } instance
Code	{ return escapeJavaStyleString ( str , true ) ; } instance
Distance : 3

196
Tree	{ return escapeJavaStyleString ( str , true ) ; } Assert
Code	{ return escapeJavaStyleString ( str , true ) ; } Assert
Distance : 3

197
Tree	{ return escapeJavaStyleString ( str , true ) ; } catch
Code	{ return escapeJavaStyleString ( str , true ) ; } catch
Distance : 3

198
Tree	{ return escapeJavaStyleString ( str , true ) ; } LanguageMode.ECMASCRIPT6
Code	{ return escapeJavaStyleString ( str , true ) ; } LanguageMode.ECMASCRIPT6
Distance : 3

199
Tree	{ return escapeJavaStyleString ( str , true ) ; } s
Code	{ return escapeJavaStyleString ( str , true ) ; } s
Distance : 3

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ escapeJavaStyleString ( out , str , false ) ; } reportMatcher
Code	{ escapeJavaStyleString ( out , str , false ) ; } reportMatcher
Distance : 3

1
Tree	{ escapeJavaStyleString ( out , str , false ) ; } wanted
Code	{ escapeJavaStyleString ( out , str , false ) ; } wanted
Distance : 3

2
Tree	{ escapeJavaStyleString ( out , str , false ) ; } data
Code	{ escapeJavaStyleString ( out , str , false ) ; } data
Distance : 3

3
Tree	{ escapeJavaStyleString ( out , str , false ) ; } add
Code	{ escapeJavaStyleString ( out , str , false ) ; } add
Distance : 3

4
Tree	{ escapeJavaStyleString ( out , str , false ) ; } NodeTraversal
Code	{ escapeJavaStyleString ( out , str , false ) ; } NodeTraversal
Distance : 3

5
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ex
Code	{ escapeJavaStyleString ( out , str , false ) ; } ex
Distance : 3

6
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ==
Code	{ escapeJavaStyleString ( out , str , false ) ; } ==
Distance : 3

7
Tree	{ escapeJavaStyleString ( out , str , false ) ; } final
Code	{ escapeJavaStyleString ( out , str , false ) ; } final
Distance : 3

8
Tree	{ escapeJavaStyleString ( out , str , false ) ; } void
Code	{ escapeJavaStyleString ( out , str , false ) ; } void
Distance : 3

9
Tree	{ escapeJavaStyleString ( out , str , false ) ; } throw
Code	{ escapeJavaStyleString ( out , str , false ) ; } throw
Distance : 3

10
Tree	{ escapeJavaStyleString ( out , str , false ) ; } n
Code	{ escapeJavaStyleString ( out , str , false ) ; } n
Distance : 3

11
Tree	{ escapeJavaStyleString ( out , str , false ) ; } e
Code	{ escapeJavaStyleString ( out , str , false ) ; } e
Distance : 3

12
Tree	{ escapeJavaStyleString ( out , str , false ) ; } String
Code	{ escapeJavaStyleString ( out , str , false ) ; } String
Distance : 3

13
Tree	{ escapeJavaStyleString ( out , str , false ) ; } compiler
Code	{ escapeJavaStyleString ( out , str , false ) ; } compiler
Distance : 3

14
Tree	{ escapeJavaStyleString ( out , str , false ) ; } {}
Code	{ escapeJavaStyleString ( out , str , false ) ; } {}
Distance : 3

15
Tree	{ escapeJavaStyleString ( out , str , false ) ; } mock
Code	{ escapeJavaStyleString ( out , str , false ) ; } mock
Distance : 3

16
Tree	{ escapeJavaStyleString ( out , str , false ) ; } true
Code	{ escapeJavaStyleString ( out , str , false ) ; } true
Distance : 3

17
Tree	{ escapeJavaStyleString ( out , str , false ) ; } mode
Code	{ escapeJavaStyleString ( out , str , false ) ; } mode
Distance : 3

18
Tree	{ escapeJavaStyleString ( out , str , false ) ; } catch
Code	{ escapeJavaStyleString ( out , str , false ) ; } catch
Distance : 3

19
Tree	{ escapeJavaStyleString ( out , str , false ) ; } public
Code	{ escapeJavaStyleString ( out , str , false ) ; } public
Distance : 3

20
Tree	{ escapeJavaStyleString ( out , str , false ) ; } <
Code	{ escapeJavaStyleString ( out , str , false ) ; } <
Distance : 3

21
Tree	{ escapeJavaStyleString ( out , str , false ) ; } null
Code	{ escapeJavaStyleString ( out , str , false ) ; } null
Distance : 3

22
Tree	{ escapeJavaStyleString ( out , str , false ) ; } NodeUtil
Code	{ escapeJavaStyleString ( out , str , false ) ; } NodeUtil
Distance : 3

23
Tree	{ escapeJavaStyleString ( out , str , false ) ; } LanguageMode.ECMASCRIPT6
Code	{ escapeJavaStyleString ( out , str , false ) ; } LanguageMode.ECMASCRIPT6
Distance : 3

24
Tree	{ escapeJavaStyleString ( out , str , false ) ; } root
Code	{ escapeJavaStyleString ( out , str , false ) ; } root
Distance : 3

25
Tree	{ escapeJavaStyleString ( out , str , false ) ; } -
Code	{ escapeJavaStyleString ( out , str , false ) ; } -
Distance : 3

26
Tree	{ escapeJavaStyleString ( out , str , false ) ; } NUMBER_CONSTANT
Code	{ escapeJavaStyleString ( out , str , false ) ; } NUMBER_CONSTANT
Distance : 3

27
Tree	{ escapeJavaStyleString ( out , str , false ) ; } STRING_CONSTANT
Code	{ escapeJavaStyleString ( out , str , false ) ; } STRING_CONSTANT
Distance : 3

28
Tree	{ escapeJavaStyleString ( out , str , false ) ; } new
Code	{ escapeJavaStyleString ( out , str , false ) ; } new
Distance : 3

29
Tree	{ escapeJavaStyleString ( out , str , false ) ; } {
Code	{ escapeJavaStyleString ( out , str , false ) ; } {
Distance : 3

30
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ()
Code	{ escapeJavaStyleString ( out , str , false ) ; } ()
Distance : 3

31
Tree	{ escapeJavaStyleString ( out , str , false ) ; } }
Code	{ escapeJavaStyleString ( out , str , false ) ; } }
Distance : 3

32
Tree	{ escapeJavaStyleString ( out , str , false ) ; } =
Code	{ escapeJavaStyleString ( out , str , false ) ; } =
Distance : 3

33
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ,
Code	{ escapeJavaStyleString ( out , str , false ) ; } ,
Distance : 3

34
Tree	{ escapeJavaStyleString ( out , str , false ) ; } .
Code	{ escapeJavaStyleString ( out , str , false ) ; } .
Distance : 3

35
Tree	{ escapeJavaStyleString ( out , str , false ) ; } )
Code	{ escapeJavaStyleString ( out , str , false ) ; } )
Distance : 3

36
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ;
Code	{ escapeJavaStyleString ( out , str , false ) ; } ;
Distance : 3

37
Tree	{ escapeJavaStyleString ( out , str , false ) ; } <blank>
Code	{ escapeJavaStyleString ( out , str , false ) ; } <blank>
Distance : 3

38
Tree	{ escapeJavaStyleString ( out , str , false ) ; } {
Code	{ escapeJavaStyleString ( out , str , false ) ; } {
Distance : 3

39
Tree	{ escapeJavaStyleString ( out , str , false ) ; } <s>
Code	{ escapeJavaStyleString ( out , str , false ) ; } <s>
Distance : 3

40
Tree	{ escapeJavaStyleString ( out , str , false ) ; } (
Code	{ escapeJavaStyleString ( out , str , false ) ; } (
Distance : 3

41
Tree	{ escapeJavaStyleString ( out , str , false ) ; } if
Code	{ escapeJavaStyleString ( out , str , false ) ; } if
Distance : 3

42
Tree	{ escapeJavaStyleString ( out , str , false ) ; } StrBuilder
Code	{ escapeJavaStyleString ( out , str , false ) ; } StrBuilder
Distance : 3

43
Tree	{ escapeJavaStyleString ( out , str , false ) ; } this
Code	{ escapeJavaStyleString ( out , str , false ) ; } this
Distance : 3

44
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ]
Code	{ escapeJavaStyleString ( out , str , false ) ; } ]
Distance : 3

45
Tree	{ escapeJavaStyleString ( out , str , false ) ; } [
Code	{ escapeJavaStyleString ( out , str , false ) ; } [
Distance : 3

46
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Preconditions
Code	{ escapeJavaStyleString ( out , str , false ) ; } Preconditions
Distance : 3

47
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Math
Code	{ escapeJavaStyleString ( out , str , false ) ; } Math
Distance : 3

48
Tree	{ escapeJavaStyleString ( out , str , false ) ; } return
Code	{ escapeJavaStyleString ( out , str , false ) ; } return
Distance : 3

49
Tree	{ escapeJavaStyleString ( out , str , false ) ; } >
Code	{ escapeJavaStyleString ( out , str , false ) ; } >
Distance : 3

50
Tree	{ escapeJavaStyleString ( out , str , false ) ; } long
Code	{ escapeJavaStyleString ( out , str , false ) ; } long
Distance : 3

51
Tree	{ escapeJavaStyleString ( out , str , false ) ; } instance
Code	{ escapeJavaStyleString ( out , str , false ) ; } instance
Distance : 3

52
Tree	{ escapeJavaStyleString ( out , str , false ) ; } T
Code	{ escapeJavaStyleString ( out , str , false ) ; } T
Distance : 3

53
Tree	{ escapeJavaStyleString ( out , str , false ) ; } &&
Code	{ escapeJavaStyleString ( out , str , false ) ; } &&
Distance : 3

54
Tree	{ escapeJavaStyleString ( out , str , false ) ; } static
Code	{ escapeJavaStyleString ( out , str , false ) ; } static
Distance : 3

55
Tree	{ escapeJavaStyleString ( out , str , false ) ; } super
Code	{ escapeJavaStyleString ( out , str , false ) ; } super
Distance : 3

56
Tree	{ escapeJavaStyleString ( out , str , false ) ; } matcher
Code	{ escapeJavaStyleString ( out , str , false ) ; } matcher
Distance : 3

57
Tree	{ escapeJavaStyleString ( out , str , false ) ; } setAcceptedLanguage
Code	{ escapeJavaStyleString ( out , str , false ) ; } setAcceptedLanguage
Distance : 3

58
Tree	{ escapeJavaStyleString ( out , str , false ) ; } y
Code	{ escapeJavaStyleString ( out , str , false ) ; } y
Distance : 3

59
Tree	{ escapeJavaStyleString ( out , str , false ) ; } optimizer
Code	{ escapeJavaStyleString ( out , str , false ) ; } optimizer
Distance : 3

60
Tree	{ escapeJavaStyleString ( out , str , false ) ; } instant
Code	{ escapeJavaStyleString ( out , str , false ) ; } instant
Distance : 3

61
Tree	{ escapeJavaStyleString ( out , str , false ) ; } getArgumentMatcherStorage
Code	{ escapeJavaStyleString ( out , str , false ) ; } getArgumentMatcherStorage
Distance : 3

62
Tree	{ escapeJavaStyleString ( out , str , false ) ; } stream
Code	{ escapeJavaStyleString ( out , str , false ) ; } stream
Distance : 3

63
Tree	{ escapeJavaStyleString ( out , str , false ) ; } getMessage
Code	{ escapeJavaStyleString ( out , str , false ) ; } getMessage
Distance : 3

64
Tree	{ escapeJavaStyleString ( out , str , false ) ; } abs
Code	{ escapeJavaStyleString ( out , str , false ) ; } abs
Distance : 3

65
Tree	{ escapeJavaStyleString ( out , str , false ) ; } else
Code	{ escapeJavaStyleString ( out , str , false ) ; } else
Distance : 3

66
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 4

67
Tree	{ escapeJavaStyleString ( str , str , true ) ; }
Code	{ escapeJavaStyleString ( str , str , true ) ; }
Distance : 4

68
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

69
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 3

70
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

71
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 3

72
Tree	{ escapeJavaStyleString ( out , str , false ) ; } value
Code	{ escapeJavaStyleString ( out , str , false ) ; } value
Distance : 3

73
Tree	{ escapeJavaStyleString ( out , str , false ) ; } assertTrue
Code	{ escapeJavaStyleString ( out , str , false ) ; } assertTrue
Distance : 3

74
Tree	{ escapeJavaStyleString ( out , str , false ) ; } checkState
Code	{ escapeJavaStyleString ( out , str , false ) ; } checkState
Distance : 3

75
Tree	{ escapeJavaStyleString ( out , str , false ) ; } i
Code	{ escapeJavaStyleString ( out , str , false ) ; } i
Distance : 3

76
Tree	{ escapeJavaStyleString ( out , str , false ) ; } /
Code	{ escapeJavaStyleString ( out , str , false ) ; } /
Distance : 3

77
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Fraction
Code	{ escapeJavaStyleString ( out , str , false ) ; } Fraction
Distance : 3

78
Tree	{ escapeJavaStyleString ( out , str , false ) ; } checkNotNull
Code	{ escapeJavaStyleString ( out , str , false ) ; } checkNotNull
Distance : 3

79
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ?
Code	{ escapeJavaStyleString ( out , str , false ) ; } ?
Distance : 3

80
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Assert
Code	{ escapeJavaStyleString ( out , str , false ) ; } Assert
Distance : 3

81
Tree	{ escapeJavaStyleString ( out , str , false ) ; } index
Code	{ escapeJavaStyleString ( out , str , false ) ; } index
Distance : 3

82
Tree	{ escapeJavaStyleString ( out , str , false ) ; } node
Code	{ escapeJavaStyleString ( out , str , false ) ; } node
Distance : 3

83
Tree	{ escapeJavaStyleString ( out , str , false ) ; } setUp
Code	{ escapeJavaStyleString ( out , str , false ) ; } setUp
Distance : 3

84
Tree	{ escapeJavaStyleString ( out , str , false ) ; } getParent
Code	{ escapeJavaStyleString ( out , str , false ) ; } getParent
Distance : 3

85
Tree	{ escapeJavaStyleString ( out , str , false ) ; } invocations
Code	{ escapeJavaStyleString ( out , str , false ) ; } invocations
Distance : 3

86
Tree	{ escapeJavaStyleString ( out , str , false ) ; } out
Code	{ escapeJavaStyleString ( out , str , false ) ; } out
Distance : 3

87
Tree	{ escapeJavaStyleString ( out , str , false ) ; } protected
Code	{ escapeJavaStyleString ( out , str , false ) ; } protected
Distance : 3

88
Tree	{ escapeJavaStyleString ( out , str , false ) ; } values
Code	{ escapeJavaStyleString ( out , str , false ) ; } values
Distance : 3

89
Tree	{ escapeJavaStyleString ( out , str , false ) ; } contains
Code	{ escapeJavaStyleString ( out , str , false ) ; } contains
Distance : 3

90
Tree	{ escapeJavaStyleString ( out , str , false ) ; } chrono
Code	{ escapeJavaStyleString ( out , str , false ) ; } chrono
Distance : 3

91
Tree	{ escapeJavaStyleString ( out , str , false ) ; } valueOf
Code	{ escapeJavaStyleString ( out , str , false ) ; } valueOf
Distance : 3

92
Tree	{ escapeJavaStyleString ( out , str , false ) ; } alpha
Code	{ escapeJavaStyleString ( out , str , false ) ; } alpha
Distance : 3

93
Tree	{ escapeJavaStyleString ( out , str , false ) ; } externs
Code	{ escapeJavaStyleString ( out , str , false ) ; } externs
Distance : 3

94
Tree	{ escapeJavaStyleString ( out , str , false ) ; } simpleMethod
Code	{ escapeJavaStyleString ( out , str , false ) ; } simpleMethod
Distance : 3

95
Tree	{ escapeJavaStyleString ( out , str , false ) ; } +
Code	{ escapeJavaStyleString ( out , str , false ) ; } +
Distance : 3

96
Tree	{ escapeJavaStyleString ( out , str , false ) ; } !=
Code	{ escapeJavaStyleString ( out , str , false ) ; } !=
Distance : 3

97
Tree	{ escapeJavaStyleString ( out , str , false ) ; } int
Code	{ escapeJavaStyleString ( out , str , false ) ; } int
Distance : 3

98
Tree	{ escapeJavaStyleString ( out , str , false ) ; } stroke
Code	{ escapeJavaStyleString ( out , str , false ) ; } stroke
Distance : 3

99
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

100
Tree	{ escapeJavaStyleString ( out , str , false ) ; } a
Code	{ escapeJavaStyleString ( out , str , false ) ; } a
Distance : 3

101
Tree	{ escapeJavaStyleString ( out , str , false ) ; } mockingProgress
Code	{ escapeJavaStyleString ( out , str , false ) ; } mockingProgress
Distance : 3

102
Tree	{ escapeJavaStyleString ( out , str , false ) ; } return;
Code	{ escapeJavaStyleString ( out , str , false ) ; } return;
Distance : 3

103
Tree	{ escapeJavaStyleString ( out , str , false ) ; } size
Code	{ escapeJavaStyleString ( out , str , false ) ; } size
Distance : 3

104
Tree	{ escapeJavaStyleString ( out , str , false ) ; } StringBuilder
Code	{ escapeJavaStyleString ( out , str , false ) ; } StringBuilder
Distance : 3

105
Tree	{ escapeJavaStyleString ( out , str , false ) ; } sqrt
Code	{ escapeJavaStyleString ( out , str , false ) ; } sqrt
Distance : 3

106
Tree	{ escapeJavaStyleString ( out , str , false ) ; } clone
Code	{ escapeJavaStyleString ( out , str , false ) ; } clone
Distance : 3

107
Tree	{ escapeJavaStyleString ( out , str , false ) ; } PeriodType
Code	{ escapeJavaStyleString ( out , str , false ) ; } PeriodType
Distance : 3

108
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Double
Code	{ escapeJavaStyleString ( out , str , false ) ; } Double
Distance : 3

109
Tree	{ escapeJavaStyleString ( out , str , false ) ; } <=
Code	{ escapeJavaStyleString ( out , str , false ) ; } <=
Distance : 3

110
Tree	{ escapeJavaStyleString ( out , str , false ) ; } obj
Code	{ escapeJavaStyleString ( out , str , false ) ; } obj
Distance : 3

111
Tree	{ escapeJavaStyleString ( out , str , false ) ; } isNormalBlock
Code	{ escapeJavaStyleString ( out , str , false ) ; } isNormalBlock
Distance : 3

112
Tree	{ escapeJavaStyleString ( out , str , false ) ; } s
Code	{ escapeJavaStyleString ( out , str , false ) ; } s
Distance : 3

113
Tree	{ escapeJavaStyleString ( out , str , false ) ; } invocation
Code	{ escapeJavaStyleString ( out , str , false ) ; } invocation
Distance : 3

114
Tree	{ escapeJavaStyleString ( out , str , false ) ; } assertThat
Code	{ escapeJavaStyleString ( out , str , false ) ; } assertThat
Distance : 3

115
Tree	{ escapeJavaStyleString ( out , str , false ) ; } LINE_JOINER
Code	{ escapeJavaStyleString ( out , str , false ) ; } LINE_JOINER
Distance : 3

116
Tree	{ escapeJavaStyleString ( out , str , false ) ; } createIllegalArgumentException
Code	{ escapeJavaStyleString ( out , str , false ) ; } createIllegalArgumentException
Distance : 3

117
Tree	{ escapeJavaStyleString ( out , str , false ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ escapeJavaStyleString ( out , str , false ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

118
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

119
Tree	{ escapeJavaStyleString ( out , str , false ) ; } class
Code	{ escapeJavaStyleString ( out , str , false ) ; } class
Distance : 3

120
Tree	{ escapeJavaStyleString ( out , str , false ) ; } get
Code	{ escapeJavaStyleString ( out , str , false ) ; } get
Distance : 3

121
Tree	{ escapeJavaStyleString ( out , str , false ) ; } JSType
Code	{ escapeJavaStyleString ( out , str , false ) ; } JSType
Distance : 3

122
Tree	{ escapeJavaStyleString ( out , str , false ) ; } isEmpty
Code	{ escapeJavaStyleString ( out , str , false ) ; } isEmpty
Distance : 3

123
Tree	{ escapeJavaStyleString ( out , str , false ) ; } char
Code	{ escapeJavaStyleString ( out , str , false ) ; } char
Distance : 3

124
Tree	{ escapeJavaStyleString ( out , str , false ) ; } source
Code	{ escapeJavaStyleString ( out , str , false ) ; } source
Distance : 3

125
Tree	{ escapeJavaStyleString ( out , str , false ) ; } toString
Code	{ escapeJavaStyleString ( out , str , false ) ; } toString
Distance : 3

126
Tree	{ escapeJavaStyleString ( out , str , false ) ; } type
Code	{ escapeJavaStyleString ( out , str , false ) ; } type
Distance : 3

127
Tree	{ escapeJavaStyleString ( out , str , false ) ; } *
Code	{ escapeJavaStyleString ( out , str , false ) ; } *
Distance : 3

128
Tree	{ escapeJavaStyleString ( out , str , false ) ; } boolean
Code	{ escapeJavaStyleString ( out , str , false ) ; } boolean
Distance : 3

129
Tree	{ escapeJavaStyleString ( out , str , false ) ; } join
Code	{ escapeJavaStyleString ( out , str , false ) ; } join
Distance : 3

130
Tree	{ escapeJavaStyleString ( out , str , false ) ; } serialised
Code	{ escapeJavaStyleString ( out , str , false ) ; } serialised
Distance : 3

131
Tree	{ escapeJavaStyleString ( out , str , false ) ; } getInstance
Code	{ escapeJavaStyleString ( out , str , false ) ; } getInstance
Distance : 3

132
Tree	{ escapeJavaStyleString ( out , str , false ) ; } fireChangeEvent
Code	{ escapeJavaStyleString ( out , str , false ) ; } fireChangeEvent
Distance : 3

133
Tree	{ escapeJavaStyleString ( out , str , false ) ; } throws
Code	{ escapeJavaStyleString ( out , str , false ) ; } throws
Distance : 3

134
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ArrayList
Code	{ escapeJavaStyleString ( out , str , false ) ; } ArrayList
Distance : 3

135
Tree	{ escapeJavaStyleString ( out , str , false ) ; } array
Code	{ escapeJavaStyleString ( out , str , false ) ; } array
Distance : 3

136
Tree	{ escapeJavaStyleString ( out , str , false ) ; } ParamChecks
Code	{ escapeJavaStyleString ( out , str , false ) ; } ParamChecks
Distance : 3

137
Tree	{ escapeJavaStyleString ( out , str , false ) ; } f
Code	{ escapeJavaStyleString ( out , str , false ) ; } f
Distance : 3

138
Tree	{ escapeJavaStyleString ( out , str , false ) ; } x
Code	{ escapeJavaStyleString ( out , str , false ) ; } x
Distance : 3

139
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Override
Code	{ escapeJavaStyleString ( out , str , false ) ; } Override
Distance : 3

140
Tree	{ escapeJavaStyleString ( out , str , false ) ; } parent
Code	{ escapeJavaStyleString ( out , str , false ) ; } parent
Distance : 3

141
Tree	{ escapeJavaStyleString ( out , str , false ) ; } str
Code	{ escapeJavaStyleString ( out , str , false ) ; } str
Distance : 3

142
Tree	{ escapeJavaStyleString ( out , str , false ) ; } MutableTimePeriod
Code	{ escapeJavaStyleString ( out , str , false ) ; } MutableTimePeriod
Distance : 3

143
Tree	{ escapeJavaStyleString ( out , str , false ) ; } b
Code	{ escapeJavaStyleString ( out , str , false ) ; } b
Distance : 3

144
Tree	{ escapeJavaStyleString ( out , str , false ) ; } <>
Code	{ escapeJavaStyleString ( out , str , false ) ; } <>
Distance : 3

145
Tree	{ escapeJavaStyleString ( out , str , false ) ; } returnZero
Code	{ escapeJavaStyleString ( out , str , false ) ; } returnZero
Distance : 3

146
Tree	{ escapeJavaStyleString ( out , str , false ) ; } MathRuntimeException
Code	{ escapeJavaStyleString ( out , str , false ) ; } MathRuntimeException
Distance : 3

147
Tree	{ escapeJavaStyleString ( out , str , false ) ; } UnivariateFunction
Code	{ escapeJavaStyleString ( out , str , false ) ; } UnivariateFunction
Distance : 3

148
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Args
Code	{ escapeJavaStyleString ( out , str , false ) ; } Args
Distance : 3

149
Tree	{ escapeJavaStyleString ( out , str , false ) ; } getFirstChild
Code	{ escapeJavaStyleString ( out , str , false ) ; } getFirstChild
Distance : 3

150
Tree	{ escapeJavaStyleString ( out , str , false ) ; } result
Code	{ escapeJavaStyleString ( out , str , false ) ; } result
Distance : 3

151
Tree	{ escapeJavaStyleString ( out , str , false ) ; } m
Code	{ escapeJavaStyleString ( out , str , false ) ; } m
Distance : 3

152
Tree	{ escapeJavaStyleString ( out , str , false ) ; } paint
Code	{ escapeJavaStyleString ( out , str , false ) ; } paint
Distance : 3

153
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Node
Code	{ escapeJavaStyleString ( out , str , false ) ; } Node
Distance : 3

154
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Exception
Code	{ escapeJavaStyleString ( out , str , false ) ; } Exception
Distance : 3

155
Tree	{ escapeJavaStyleString ( out , str , false ) ; } lines
Code	{ escapeJavaStyleString ( out , str , false ) ; } lines
Distance : 3

156
Tree	{ escapeJavaStyleString ( out , str , false ) ; } verify
Code	{ escapeJavaStyleString ( out , str , false ) ; } verify
Distance : 3

157
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Integer
Code	{ escapeJavaStyleString ( out , str , false ) ; } Integer
Distance : 3

158
Tree	{ escapeJavaStyleString ( out , str , false ) ; } v
Code	{ escapeJavaStyleString ( out , str , false ) ; } v
Distance : 3

159
Tree	{ escapeJavaStyleString ( out , str , false ) ; } length
Code	{ escapeJavaStyleString ( out , str , false ) ; } length
Distance : 3

160
Tree	{ escapeJavaStyleString ( out , str , false ) ; } TestUtils
Code	{ escapeJavaStyleString ( out , str , false ) ; } TestUtils
Distance : 3

161
Tree	{ escapeJavaStyleString ( out , str , false ) ; } IllegalArgumentException
Code	{ escapeJavaStyleString ( out , str , false ) ; } IllegalArgumentException
Distance : 3

162
Tree	{ escapeJavaStyleString ( out , str , false ) ; } reportCodeChange
Code	{ escapeJavaStyleString ( out , str , false ) ; } reportCodeChange
Distance : 3

163
Tree	{ escapeJavaStyleString ( out , str , false ) ; } FastMath
Code	{ escapeJavaStyleString ( out , str , false ) ; } FastMath
Distance : 3

164
Tree	{ escapeJavaStyleString ( out , str , false ) ; } expected
Code	{ escapeJavaStyleString ( out , str , false ) ; } expected
Distance : 3

165
Tree	{ escapeJavaStyleString ( out , str , false ) ; } name
Code	{ escapeJavaStyleString ( out , str , false ) ; } name
Distance : 3

166
Tree	{ escapeJavaStyleString ( out , str , false ) ; } field
Code	{ escapeJavaStyleString ( out , str , false ) ; } field
Distance : 3

167
Tree	{ escapeJavaStyleString ( out , str , false ) ; } List
Code	{ escapeJavaStyleString ( out , str , false ) ; } List
Distance : 3

168
Tree	{ escapeJavaStyleString ( out , str , false ) ; } fail
Code	{ escapeJavaStyleString ( out , str , false ) ; } fail
Distance : 3

169
Tree	{ escapeJavaStyleString ( out , str , false ) ; } try
Code	{ escapeJavaStyleString ( out , str , false ) ; } try
Distance : 3

170
Tree	{ escapeJavaStyleString ( out , str , false ) ; } t
Code	{ escapeJavaStyleString ( out , str , false ) ; } t
Distance : 3

171
Tree	{ escapeJavaStyleString ( out , str , false ) ; } sb
Code	{ escapeJavaStyleString ( out , str , false ) ; } sb
Distance : 3

172
Tree	{ escapeJavaStyleString ( out , str , false ) ; } append
Code	{ escapeJavaStyleString ( out , str , false ) ; } append
Distance : 3

173
Tree	{ escapeJavaStyleString ( out , str , false ) ; } isBlock
Code	{ escapeJavaStyleString ( out , str , false ) ; } isBlock
Distance : 3

174
Tree	{ escapeJavaStyleString ( out , str , false ) ; } assertEquals
Code	{ escapeJavaStyleString ( out , str , false ) ; } assertEquals
Distance : 3

175
Tree	{ escapeJavaStyleString ( out , str , false ) ; } !
Code	{ escapeJavaStyleString ( out , str , false ) ; } !
Distance : 3

176
Tree	{ escapeJavaStyleString ( out , str , false ) ; } []
Code	{ escapeJavaStyleString ( out , str , false ) ; } []
Distance : 3

177
Tree	{ escapeJavaStyleString ( out , str , false ) ; } :
Code	{ escapeJavaStyleString ( out , str , false ) ; } :
Distance : 3

178
Tree	{ escapeJavaStyleString ( out , str , false ) ; } test
Code	{ escapeJavaStyleString ( out , str , false ) ; } test
Distance : 3

179
Tree	{ escapeJavaStyleString ( out , str , false ) ; } @
Code	{ escapeJavaStyleString ( out , str , false ) ; } @
Distance : 3

180
Tree	{ escapeJavaStyleString ( out , str , false ) ; } false
Code	{ escapeJavaStyleString ( out , str , false ) ; } false
Distance : 3

181
Tree	{ escapeJavaStyleString ( out , str , false ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , str , false ) ; } nullNotPermitted
Distance : 3

182
Tree	{ escapeJavaStyleString ( out , str , false ) ; } d
Code	{ escapeJavaStyleString ( out , str , false ) ; } d
Distance : 3

183
Tree	{ escapeJavaStyleString ( out , str , false ) ; } double
Code	{ escapeJavaStyleString ( out , str , false ) ; } double
Distance : 3

184
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Object
Code	{ escapeJavaStyleString ( out , str , false ) ; } Object
Distance : 3

185
Tree	{ escapeJavaStyleString ( out , str , false ) ; } scope
Code	{ escapeJavaStyleString ( out , str , false ) ; } scope
Distance : 3

186
Tree	{ escapeJavaStyleString ( out , str , false ) ; } TestUtilities
Code	{ escapeJavaStyleString ( out , str , false ) ; } TestUtilities
Distance : 3

187
Tree	{ escapeJavaStyleString ( out , str , false ) ; } checkArgument
Code	{ escapeJavaStyleString ( out , str , false ) ; } checkArgument
Distance : 3

188
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Invocation
Code	{ escapeJavaStyleString ( out , str , false ) ; } Invocation
Distance : 3

189
Tree	{ escapeJavaStyleString ( out , str , false ) ; } for
Code	{ escapeJavaStyleString ( out , str , false ) ; } for
Distance : 3

190
Tree	{ escapeJavaStyleString ( out , str , false ) ; } equals
Code	{ escapeJavaStyleString ( out , str , false ) ; } equals
Distance : 3

191
Tree	{ escapeJavaStyleString ( out , str , false ) ; } js
Code	{ escapeJavaStyleString ( out , str , false ) ; } js
Distance : 3

192
Tree	{ escapeJavaStyleString ( out , str , false ) ; } options
Code	{ escapeJavaStyleString ( out , str , false ) ; } options
Distance : 3

193
Tree	{ escapeJavaStyleString ( out , str , false ) ; } p
Code	{ escapeJavaStyleString ( out , str , false ) ; } p
Distance : 3

194
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Test
Code	{ escapeJavaStyleString ( out , str , false ) ; } Test
Distance : 3

195
Tree	{ escapeJavaStyleString ( out , str , false ) ; } Class
Code	{ escapeJavaStyleString ( out , str , false ) ; } Class
Distance : 3

196
Tree	{ escapeJavaStyleString ( out , str , false ) ; } notifyListeners
Code	{ escapeJavaStyleString ( out , str , false ) ; } notifyListeners
Distance : 3

197
Tree	{ escapeJavaStyleString ( out , str , false ) ; } c
Code	{ escapeJavaStyleString ( out , str , false ) ; } c
Distance : 3

198
Tree	{ escapeJavaStyleString ( out , str , false ) ; } testSame
Code	{ escapeJavaStyleString ( out , str , false ) ; } testSame
Distance : 3

199
Tree	{ escapeJavaStyleString ( out , str , false ) ; } traverseEs6
Code	{ escapeJavaStyleString ( out , str , false ) ; } traverseEs6
Distance : 3

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return escapeJavaStyleString ( str , false ) ; } invocations
Code	{ return escapeJavaStyleString ( str , false ) ; } invocations
Distance : 3

1
Tree	{ return escapeJavaStyleString ( str , false ) ; } Class
Code	{ return escapeJavaStyleString ( str , false ) ; } Class
Distance : 3

2
Tree	{ return escapeJavaStyleString ( str , false ) ; } {}
Code	{ return escapeJavaStyleString ( str , false ) ; } {}
Distance : 3

3
Tree	{ return escapeJavaStyleString ( str , false ) ; } mock
Code	{ return escapeJavaStyleString ( str , false ) ; } mock
Distance : 3

4
Tree	{ return escapeJavaStyleString ( str , false ) ; } f
Code	{ return escapeJavaStyleString ( str , false ) ; } f
Distance : 3

5
Tree	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Distance : 3

6
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 3

7
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 3

8
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 3

9
Tree	{ return escapeJavaStyleString ( str , false ) ; } &&
Code	{ return escapeJavaStyleString ( str , false ) ; } &&
Distance : 3

10
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 3

11
Tree	{ return escapeJavaStyleString ( str , false ) ; } [
Code	{ return escapeJavaStyleString ( str , false ) ; } [
Distance : 3

12
Tree	{ return escapeJavaStyleString ( str , false ) ; } Object
Code	{ return escapeJavaStyleString ( str , false ) ; } Object
Distance : 3

13
Tree	{ return escapeJavaStyleString ( str , false ) ; } class
Code	{ return escapeJavaStyleString ( str , false ) ; } class
Distance : 3

14
Tree	{ return escapeJavaStyleString ( str , false ) ; } test
Code	{ return escapeJavaStyleString ( str , false ) ; } test
Distance : 3

15
Tree	{ return escapeJavaStyleString ( str , false ) ; } @
Code	{ return escapeJavaStyleString ( str , false ) ; } @
Distance : 3

16
Tree	{ return escapeJavaStyleString ( str , false ) ; } !
Code	{ return escapeJavaStyleString ( str , false ) ; } !
Distance : 3

17
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Code	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Distance : 3

18
Tree	{ return escapeJavaStyleString ( str , false ) ; } ==
Code	{ return escapeJavaStyleString ( str , false ) ; } ==
Distance : 3

19
Tree	{ return escapeJavaStyleString ( str , false ) ; } void
Code	{ return escapeJavaStyleString ( str , false ) ; } void
Distance : 3

20
Tree	{ return escapeJavaStyleString ( str , false ) ; } []
Code	{ return escapeJavaStyleString ( str , false ) ; } []
Distance : 3

21
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkState
Code	{ return escapeJavaStyleString ( str , false ) ; } checkState
Distance : 3

22
Tree	{ return escapeJavaStyleString ( str , false ) ; } Test
Code	{ return escapeJavaStyleString ( str , false ) ; } Test
Distance : 3

23
Tree	{ return escapeJavaStyleString ( str , false ) ; } out
Code	{ return escapeJavaStyleString ( str , false ) ; } out
Distance : 3

24
Tree	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Code	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Distance : 3

25
Tree	{ return escapeJavaStyleString ( str , false ) ; } n
Code	{ return escapeJavaStyleString ( str , false ) ; } n
Distance : 3

26
Tree	{ return escapeJavaStyleString ( str , false ) ; } !=
Code	{ return escapeJavaStyleString ( str , false ) ; } !=
Distance : 3

27
Tree	{ return escapeJavaStyleString ( str , false ) ; } i
Code	{ return escapeJavaStyleString ( str , false ) ; } i
Distance : 3

28
Tree	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Distance : 3

29
Tree	{ return escapeJavaStyleString ( str , false ) ; } Override
Code	{ return escapeJavaStyleString ( str , false ) ; } Override
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , false ) ; } public
Code	{ return escapeJavaStyleString ( str , false ) ; } public
Distance : 3

31
Tree	{ return escapeJavaStyleString ( str , false ) ; } >
Code	{ return escapeJavaStyleString ( str , false ) ; } >
Distance : 3

32
Tree	{ return escapeJavaStyleString ( str , false ) ; } new
Code	{ return escapeJavaStyleString ( str , false ) ; } new
Distance : 3

33
Tree	{ return escapeJavaStyleString ( str , false ) ; } STRING_CONSTANT
Code	{ return escapeJavaStyleString ( str , false ) ; } STRING_CONSTANT
Distance : 3

34
Tree	{ return escapeJavaStyleString ( str , false ) ; } ,
Code	{ return escapeJavaStyleString ( str , false ) ; } ,
Distance : 3

35
Tree	{ return escapeJavaStyleString ( str , false ) ; } .
Code	{ return escapeJavaStyleString ( str , false ) ; } .
Distance : 3

36
Tree	{ return escapeJavaStyleString ( str , false ) ; } }
Code	{ return escapeJavaStyleString ( str , false ) ; } }
Distance : 3

37
Tree	{ return escapeJavaStyleString ( str , false ) ; } =
Code	{ return escapeJavaStyleString ( str , false ) ; } =
Distance : 3

38
Tree	{ return escapeJavaStyleString ( str , false ) ; } (
Code	{ return escapeJavaStyleString ( str , false ) ; } (
Distance : 3

39
Tree	{ return escapeJavaStyleString ( str , false ) ; } <s>
Code	{ return escapeJavaStyleString ( str , false ) ; } <s>
Distance : 3

40
Tree	{ return escapeJavaStyleString ( str , false ) ; } <blank>
Code	{ return escapeJavaStyleString ( str , false ) ; } <blank>
Distance : 3

41
Tree	{ return escapeJavaStyleString ( str , false ) ; } {
Code	{ return escapeJavaStyleString ( str , false ) ; } {
Distance : 3

42
Tree	{ return escapeJavaStyleString ( str , false ) ; } )
Code	{ return escapeJavaStyleString ( str , false ) ; } )
Distance : 3

43
Tree	{ return escapeJavaStyleString ( str , false ) ; } ;
Code	{ return escapeJavaStyleString ( str , false ) ; } ;
Distance : 3

44
Tree	{ return escapeJavaStyleString ( str , false ) ; } ()
Code	{ return escapeJavaStyleString ( str , false ) ; } ()
Distance : 3

45
Tree	{ return escapeJavaStyleString ( str , false ) ; } {
Code	{ return escapeJavaStyleString ( str , false ) ; } {
Distance : 3

46
Tree	{ return escapeJavaStyleString ( str , false ) ; } false
Code	{ return escapeJavaStyleString ( str , false ) ; } false
Distance : 3

47
Tree	{ return escapeJavaStyleString ( str , false ) ; } int
Code	{ return escapeJavaStyleString ( str , false ) ; } int
Distance : 3

48
Tree	{ return escapeJavaStyleString ( str , false ) ; } double
Code	{ return escapeJavaStyleString ( str , false ) ; } double
Distance : 3

49
Tree	{ return escapeJavaStyleString ( str , false ) ; } e
Code	{ return escapeJavaStyleString ( str , false ) ; } e
Distance : 3

50
Tree	{ return escapeJavaStyleString ( str , false ) ; } else
Code	{ return escapeJavaStyleString ( str , false ) ; } else
Distance : 3

51
Tree	{ return escapeJavaStyleString ( str , false ) ; } NUMBER_CONSTANT
Code	{ return escapeJavaStyleString ( str , false ) ; } NUMBER_CONSTANT
Distance : 3

52
Tree	{ return escapeJavaStyleString ( str , false ) ; } this
Code	{ return escapeJavaStyleString ( str , false ) ; } this
Distance : 3

53
Tree	{ return escapeJavaStyleString ( str , false ) ; } final
Code	{ return escapeJavaStyleString ( str , false ) ; } final
Distance : 3

54
Tree	{ return escapeJavaStyleString ( str , false ) ; } name
Code	{ return escapeJavaStyleString ( str , false ) ; } name
Distance : 3

55
Tree	{ return escapeJavaStyleString ( str , false ) ; } t
Code	{ return escapeJavaStyleString ( str , false ) ; } t
Distance : 3

56
Tree	{ return escapeJavaStyleString ( str , false ) ; } Collection
Code	{ return escapeJavaStyleString ( str , false ) ; } Collection
Distance : 3

57
Tree	{ return escapeJavaStyleString ( str , false ) ; } getField
Code	{ return escapeJavaStyleString ( str , false ) ; } getField
Distance : 3

58
Tree	{ return escapeJavaStyleString ( str , false ) ; } dataset
Code	{ return escapeJavaStyleString ( str , false ) ; } dataset
Distance : 3

59
Tree	{ return escapeJavaStyleString ( str , false ) ; } protected
Code	{ return escapeJavaStyleString ( str , false ) ; } protected
Distance : 3

60
Tree	{ return escapeJavaStyleString ( str , false ) ; } PlotChangeEvent
Code	{ return escapeJavaStyleString ( str , false ) ; } PlotChangeEvent
Distance : 3

61
Tree	{ return escapeJavaStyleString ( str , false ) ; } mode
Code	{ return escapeJavaStyleString ( str , false ) ; } mode
Distance : 3

62
Tree	{ return escapeJavaStyleString ( str , false ) ; } mockingProgress
Code	{ return escapeJavaStyleString ( str , false ) ; } mockingProgress
Distance : 3

63
Tree	{ return escapeJavaStyleString ( str , false ) ; } return;
Code	{ return escapeJavaStyleString ( str , false ) ; } return;
Distance : 3

64
Tree	{ return escapeJavaStyleString ( str , false ) ; } isEmpty
Code	{ return escapeJavaStyleString ( str , false ) ; } isEmpty
Distance : 3

65
Tree	{ return escapeJavaStyleString ( str , false ) ; } char
Code	{ return escapeJavaStyleString ( str , false ) ; } char
Distance : 3

66
Tree	{ return escapeJavaStyleString ( str , false ) ; } static
Code	{ return escapeJavaStyleString ( str , false ) ; } static
Distance : 3

67
Tree	{ return escapeJavaStyleString ( str , false ) ; } setAcceptedLanguage
Code	{ return escapeJavaStyleString ( str , false ) ; } setAcceptedLanguage
Distance : 3

68
Tree	{ return escapeJavaStyleString ( str , false ) ; } JSType
Code	{ return escapeJavaStyleString ( str , false ) ; } JSType
Distance : 3

69
Tree	{ return escapeJavaStyleString ( str , false ) ; } get
Code	{ return escapeJavaStyleString ( str , false ) ; } get
Distance : 3

70
Tree	{ return escapeJavaStyleString ( str , false ) ; } getMessage
Code	{ return escapeJavaStyleString ( str , false ) ; } getMessage
Distance : 3

71
Tree	{ return escapeJavaStyleString ( str , false ) ; } true
Code	{ return escapeJavaStyleString ( str , false ) ; } true
Distance : 3

72
Tree	{ return escapeJavaStyleString ( str , false ) ; } return
Code	{ return escapeJavaStyleString ( str , false ) ; } return
Distance : 3

73
Tree	{ return escapeJavaStyleString ( str , false ) ; } if
Code	{ return escapeJavaStyleString ( str , false ) ; } if
Distance : 3

74
Tree	{ return escapeJavaStyleString ( str , false ) ; } stream
Code	{ return escapeJavaStyleString ( str , false ) ; } stream
Distance : 3

75
Tree	{ return escapeJavaStyleString ( str , false ) ; } <
Code	{ return escapeJavaStyleString ( str , false ) ; } <
Distance : 3

76
Tree	{ return escapeJavaStyleString ( str , false ) ; } solver
Code	{ return escapeJavaStyleString ( str , false ) ; } solver
Distance : 3

77
Tree	{ return escapeJavaStyleString ( str , false ) ; } pattern
Code	{ return escapeJavaStyleString ( str , false ) ; } pattern
Distance : 3

78
Tree	{ return escapeJavaStyleString ( str , false ) ; } js
Code	{ return escapeJavaStyleString ( str , false ) ; } js
Distance : 3

79
Tree	{ return escapeJavaStyleString ( str , false ) ; } TestUtilities
Code	{ return escapeJavaStyleString ( str , false ) ; } TestUtilities
Distance : 3

80
Tree	{ return escapeJavaStyleString ( str , false ) ; } equals
Code	{ return escapeJavaStyleString ( str , false ) ; } equals
Distance : 3

81
Tree	{ return escapeJavaStyleString ( str , false ) ; } d
Code	{ return escapeJavaStyleString ( str , false ) ; } d
Distance : 3

82
Tree	{ return escapeJavaStyleString ( str , false ) ; } externs
Code	{ return escapeJavaStyleString ( str , false ) ; } externs
Distance : 3

83
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertTrue
Code	{ return escapeJavaStyleString ( str , false ) ; } assertTrue
Distance : 3

84
Tree	{ return escapeJavaStyleString ( str , false ) ; } for
Code	{ return escapeJavaStyleString ( str , false ) ; } for
Distance : 3

85
Tree	{ return escapeJavaStyleString ( str , false ) ; } Invocation
Code	{ return escapeJavaStyleString ( str , false ) ; } Invocation
Distance : 3

86
Tree	{ return escapeJavaStyleString ( str , false ) ; } getParent
Code	{ return escapeJavaStyleString ( str , false ) ; } getParent
Distance : 3

87
Tree	{ return escapeJavaStyleString ( str , false ) ; } setUp
Code	{ return escapeJavaStyleString ( str , false ) ; } setUp
Distance : 3

88
Tree	{ return escapeJavaStyleString ( str , false ) ; } StrBuilder
Code	{ return escapeJavaStyleString ( str , false ) ; } StrBuilder
Distance : 3

89
Tree	{ return escapeJavaStyleString ( str , false ) ; } reportMatcher
Code	{ return escapeJavaStyleString ( str , false ) ; } reportMatcher
Distance : 3

90
Tree	{ return escapeJavaStyleString ( str , false ) ; } index
Code	{ return escapeJavaStyleString ( str , false ) ; } index
Distance : 3

91
Tree	{ return escapeJavaStyleString ( str , false ) ; } node
Code	{ return escapeJavaStyleString ( str , false ) ; } node
Distance : 3

92
Tree	{ return escapeJavaStyleString ( str , false ) ; } matcher
Code	{ return escapeJavaStyleString ( str , false ) ; } matcher
Distance : 3

93
Tree	{ return escapeJavaStyleString ( str , false ) ; } abs
Code	{ return escapeJavaStyleString ( str , false ) ; } abs
Distance : 3

94
Tree	{ return escapeJavaStyleString ( str , false ) ; } Double
Code	{ return escapeJavaStyleString ( str , false ) ; } Double
Distance : 3

95
Tree	{ return escapeJavaStyleString ( str , false ) ; } PeriodType
Code	{ return escapeJavaStyleString ( str , false ) ; } PeriodType
Distance : 3

96
Tree	{ return escapeJavaStyleString ( str , false ) ; } instant
Code	{ return escapeJavaStyleString ( str , false ) ; } instant
Distance : 3

97
Tree	{ return escapeJavaStyleString ( str , false ) ; } values
Code	{ return escapeJavaStyleString ( str , false ) ; } values
Distance : 3

98
Tree	{ return escapeJavaStyleString ( str , false ) ; } isNormalBlock
Code	{ return escapeJavaStyleString ( str , false ) ; } isNormalBlock
Distance : 3

99
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

100
Tree	{ return escapeJavaStyleString ( str , false ) ; } contains
Code	{ return escapeJavaStyleString ( str , false ) ; } contains
Distance : 3

101
Tree	{ return escapeJavaStyleString ( str , false ) ; } <=
Code	{ return escapeJavaStyleString ( str , false ) ; } <=
Distance : 3

102
Tree	{ return escapeJavaStyleString ( str , false ) ; } a
Code	{ return escapeJavaStyleString ( str , false ) ; } a
Distance : 3

103
Tree	{ return escapeJavaStyleString ( str , false ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ return escapeJavaStyleString ( str , false ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

104
Tree	{ return escapeJavaStyleString ( str , false ) ; } size
Code	{ return escapeJavaStyleString ( str , false ) ; } size
Distance : 3

105
Tree	{ return escapeJavaStyleString ( str , false ) ; } StringBuilder
Code	{ return escapeJavaStyleString ( str , false ) ; } StringBuilder
Distance : 3

106
Tree	{ return escapeJavaStyleString ( str , false ) ; } b
Code	{ return escapeJavaStyleString ( str , false ) ; } b
Distance : 3

107
Tree	{ return escapeJavaStyleString ( str , false ) ; } MutableTimePeriod
Code	{ return escapeJavaStyleString ( str , false ) ; } MutableTimePeriod
Distance : 3

108
Tree	{ return escapeJavaStyleString ( str , false ) ; } stroke
Code	{ return escapeJavaStyleString ( str , false ) ; } stroke
Distance : 3

109
Tree	{ return escapeJavaStyleString ( str , false ) ; } traverseEs6
Code	{ return escapeJavaStyleString ( str , false ) ; } traverseEs6
Distance : 3

110
Tree	{ return escapeJavaStyleString ( str , false ) ; } UnivariateFunction
Code	{ return escapeJavaStyleString ( str , false ) ; } UnivariateFunction
Distance : 3

111
Tree	{ return escapeJavaStyleString ( str , false ) ; } sb
Code	{ return escapeJavaStyleString ( str , false ) ; } sb
Distance : 3

112
Tree	{ return escapeJavaStyleString ( str , false ) ; } throws
Code	{ return escapeJavaStyleString ( str , false ) ; } throws
Distance : 3

113
Tree	{ return escapeJavaStyleString ( str , false ) ; } scope
Code	{ return escapeJavaStyleString ( str , false ) ; } scope
Distance : 3

114
Tree	{ return escapeJavaStyleString ( str , false ) ; } sqrt
Code	{ return escapeJavaStyleString ( str , false ) ; } sqrt
Distance : 3

115
Tree	{ return escapeJavaStyleString ( str , false ) ; } clone
Code	{ return escapeJavaStyleString ( str , false ) ; } clone
Distance : 3

116
Tree	{ return escapeJavaStyleString ( str , false ) ; } returnZero
Code	{ return escapeJavaStyleString ( str , false ) ; } returnZero
Distance : 3

117
Tree	{ return escapeJavaStyleString ( str , false ) ; } getFirstChild
Code	{ return escapeJavaStyleString ( str , false ) ; } getFirstChild
Distance : 3

118
Tree	{ return escapeJavaStyleString ( str , false ) ; } simpleMethod
Code	{ return escapeJavaStyleString ( str , false ) ; } simpleMethod
Distance : 3

119
Tree	{ return escapeJavaStyleString ( str , false ) ; } getArgumentMatcherStorage
Code	{ return escapeJavaStyleString ( str , false ) ; } getArgumentMatcherStorage
Distance : 3

120
Tree	{ return escapeJavaStyleString ( str , false ) ; } append
Code	{ return escapeJavaStyleString ( str , false ) ; } append
Distance : 3

121
Tree	{ return escapeJavaStyleString ( str , false ) ; } optimizer
Code	{ return escapeJavaStyleString ( str , false ) ; } optimizer
Distance : 3

122
Tree	{ return escapeJavaStyleString ( str , false ) ; } obj
Code	{ return escapeJavaStyleString ( str , false ) ; } obj
Distance : 3

123
Tree	{ return escapeJavaStyleString ( str , false ) ; } chrono
Code	{ return escapeJavaStyleString ( str , false ) ; } chrono
Distance : 3

124
Tree	{ return escapeJavaStyleString ( str , false ) ; } isBlock
Code	{ return escapeJavaStyleString ( str , false ) ; } isBlock
Distance : 3

125
Tree	{ return escapeJavaStyleString ( str , false ) ; } <>
Code	{ return escapeJavaStyleString ( str , false ) ; } <>
Distance : 3

126
Tree	{ return escapeJavaStyleString ( str , false ) ; } Integer
Code	{ return escapeJavaStyleString ( str , false ) ; } Integer
Distance : 3

127
Tree	{ return escapeJavaStyleString ( str , false ) ; } v
Code	{ return escapeJavaStyleString ( str , false ) ; } v
Distance : 3

128
Tree	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Code	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Distance : 3

129
Tree	{ return escapeJavaStyleString ( str , false ) ; } IllegalArgumentException
Code	{ return escapeJavaStyleString ( str , false ) ; } IllegalArgumentException
Distance : 3

130
Tree	{ return escapeJavaStyleString ( str , false ) ; } invocation
Code	{ return escapeJavaStyleString ( str , false ) ; } invocation
Distance : 3

131
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertThat
Code	{ return escapeJavaStyleString ( str , false ) ; } assertThat
Distance : 3

132
Tree	{ return escapeJavaStyleString ( str , false ) ; } FastMath
Code	{ return escapeJavaStyleString ( str , false ) ; } FastMath
Distance : 3

133
Tree	{ return escapeJavaStyleString ( str , false ) ; } expected
Code	{ return escapeJavaStyleString ( str , false ) ; } expected
Distance : 3

134
Tree	{ return escapeJavaStyleString ( str , false ) ; } createIllegalArgumentException
Code	{ return escapeJavaStyleString ( str , false ) ; } createIllegalArgumentException
Distance : 3

135
Tree	{ return escapeJavaStyleString ( str , false ) ; } parent
Code	{ return escapeJavaStyleString ( str , false ) ; } parent
Distance : 3

136
Tree	{ return escapeJavaStyleString ( str , false ) ; } fireChangeEvent
Code	{ return escapeJavaStyleString ( str , false ) ; } fireChangeEvent
Distance : 3

137
Tree	{ return escapeJavaStyleString ( str , false ) ; } ArrayList
Code	{ return escapeJavaStyleString ( str , false ) ; } ArrayList
Distance : 3

138
Tree	{ return escapeJavaStyleString ( str , false ) ; } testSame
Code	{ return escapeJavaStyleString ( str , false ) ; } testSame
Distance : 3

139
Tree	{ return escapeJavaStyleString ( str , false ) ; } x
Code	{ return escapeJavaStyleString ( str , false ) ; } x
Distance : 3

140
Tree	{ return escapeJavaStyleString ( str , false ) ; } LINE_JOINER
Code	{ return escapeJavaStyleString ( str , false ) ; } LINE_JOINER
Distance : 3

141
Tree	{ return escapeJavaStyleString ( str , false ) ; } str
Code	{ return escapeJavaStyleString ( str , false ) ; } str
Distance : 3

142
Tree	{ return escapeJavaStyleString ( str , false ) ; } try
Code	{ return escapeJavaStyleString ( str , false ) ; } try
Distance : 3

143
Tree	{ return escapeJavaStyleString ( str , false ) ; } result
Code	{ return escapeJavaStyleString ( str , false ) ; } result
Distance : 3

144
Tree	{ return escapeJavaStyleString ( str , false ) ; } fail
Code	{ return escapeJavaStyleString ( str , false ) ; } fail
Distance : 3

145
Tree	{ return escapeJavaStyleString ( str , false ) ; } :
Code	{ return escapeJavaStyleString ( str , false ) ; } :
Distance : 3

146
Tree	{ return escapeJavaStyleString ( str , false ) ; } valueOf
Code	{ return escapeJavaStyleString ( str , false ) ; } valueOf
Distance : 3

147
Tree	{ return escapeJavaStyleString ( str , false ) ; } y
Code	{ return escapeJavaStyleString ( str , false ) ; } y
Distance : 3

148
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

149
Tree	{ return escapeJavaStyleString ( str , false ) ; } array
Code	{ return escapeJavaStyleString ( str , false ) ; } array
Distance : 3

150
Tree	{ return escapeJavaStyleString ( str , false ) ; } ?
Code	{ return escapeJavaStyleString ( str , false ) ; } ?
Distance : 3

151
Tree	{ return escapeJavaStyleString ( str , false ) ; } boolean
Code	{ return escapeJavaStyleString ( str , false ) ; } boolean
Distance : 3

152
Tree	{ return escapeJavaStyleString ( str , false ) ; } m
Code	{ return escapeJavaStyleString ( str , false ) ; } m
Distance : 3

153
Tree	{ return escapeJavaStyleString ( str , false ) ; } paint
Code	{ return escapeJavaStyleString ( str , false ) ; } paint
Distance : 3

154
Tree	{ return escapeJavaStyleString ( str , false ) ; } type
Code	{ return escapeJavaStyleString ( str , false ) ; } type
Distance : 3

155
Tree	{ return escapeJavaStyleString ( str , false ) ; } *
Code	{ return escapeJavaStyleString ( str , false ) ; } *
Distance : 3

156
Tree	{ return escapeJavaStyleString ( str , false ) ; } getInstance
Code	{ return escapeJavaStyleString ( str , false ) ; } getInstance
Distance : 3

157
Tree	{ return escapeJavaStyleString ( str , false ) ; } serialised
Code	{ return escapeJavaStyleString ( str , false ) ; } serialised
Distance : 3

158
Tree	{ return escapeJavaStyleString ( str , false ) ; } Fraction
Code	{ return escapeJavaStyleString ( str , false ) ; } Fraction
Distance : 3

159
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkNotNull
Code	{ return escapeJavaStyleString ( str , false ) ; } checkNotNull
Distance : 3

160
Tree	{ return escapeJavaStyleString ( str , false ) ; } source
Code	{ return escapeJavaStyleString ( str , false ) ; } source
Distance : 3

161
Tree	{ return escapeJavaStyleString ( str , false ) ; } toString
Code	{ return escapeJavaStyleString ( str , false ) ; } toString
Distance : 3

162
Tree	{ return escapeJavaStyleString ( str , false ) ; } Math
Code	{ return escapeJavaStyleString ( str , false ) ; } Math
Distance : 3

163
Tree	{ return escapeJavaStyleString ( str , false ) ; } root
Code	{ return escapeJavaStyleString ( str , false ) ; } root
Distance : 3

164
Tree	{ return escapeJavaStyleString ( str , false ) ; } options
Code	{ return escapeJavaStyleString ( str , false ) ; } options
Distance : 3

165
Tree	{ return escapeJavaStyleString ( str , false ) ; } p
Code	{ return escapeJavaStyleString ( str , false ) ; } p
Distance : 3

166
Tree	{ return escapeJavaStyleString ( str , false ) ; } data
Code	{ return escapeJavaStyleString ( str , false ) ; } data
Distance : 3

167
Tree	{ return escapeJavaStyleString ( str , false ) ; } add
Code	{ return escapeJavaStyleString ( str , false ) ; } add
Distance : 3

168
Tree	{ return escapeJavaStyleString ( str , false ) ; } field
Code	{ return escapeJavaStyleString ( str , false ) ; } field
Distance : 3

169
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkArgument
Code	{ return escapeJavaStyleString ( str , false ) ; } checkArgument
Distance : 3

170
Tree	{ return escapeJavaStyleString ( str , false ) ; } ex
Code	{ return escapeJavaStyleString ( str , false ) ; } ex
Distance : 3

171
Tree	{ return escapeJavaStyleString ( str , false ) ; } NodeUtil
Code	{ return escapeJavaStyleString ( str , false ) ; } NodeUtil
Distance : 3

172
Tree	{ return escapeJavaStyleString ( str , false ) ; } join
Code	{ return escapeJavaStyleString ( str , false ) ; } join
Distance : 3

173
Tree	{ return escapeJavaStyleString ( str , false ) ; } Args
Code	{ return escapeJavaStyleString ( str , false ) ; } Args
Distance : 3

174
Tree	{ return escapeJavaStyleString ( str , false ) ; } NodeTraversal
Code	{ return escapeJavaStyleString ( str , false ) ; } NodeTraversal
Distance : 3

175
Tree	{ return escapeJavaStyleString ( str , false ) ; } List
Code	{ return escapeJavaStyleString ( str , false ) ; } List
Distance : 3

176
Tree	{ return escapeJavaStyleString ( str , false ) ; } Exception
Code	{ return escapeJavaStyleString ( str , false ) ; } Exception
Distance : 3

177
Tree	{ return escapeJavaStyleString ( str , false ) ; } Node
Code	{ return escapeJavaStyleString ( str , false ) ; } Node
Distance : 3

178
Tree	{ return escapeJavaStyleString ( str , false ) ; } c
Code	{ return escapeJavaStyleString ( str , false ) ; } c
Distance : 3

179
Tree	{ return escapeJavaStyleString ( str , false ) ; } notifyListeners
Code	{ return escapeJavaStyleString ( str , false ) ; } notifyListeners
Distance : 3

180
Tree	{ return escapeJavaStyleString ( str , false ) ; } lines
Code	{ return escapeJavaStyleString ( str , false ) ; } lines
Distance : 3

181
Tree	{ return escapeJavaStyleString ( str , false ) ; } verify
Code	{ return escapeJavaStyleString ( str , false ) ; } verify
Distance : 3

182
Tree	{ return escapeJavaStyleString ( str , false ) ; } compiler
Code	{ return escapeJavaStyleString ( str , false ) ; } compiler
Distance : 3

183
Tree	{ return escapeJavaStyleString ( str , false ) ; } String
Code	{ return escapeJavaStyleString ( str , false ) ; } String
Distance : 3

184
Tree	{ return escapeJavaStyleString ( str , false ) ; } null
Code	{ return escapeJavaStyleString ( str , false ) ; } null
Distance : 3

185
Tree	{ return escapeJavaStyleString ( str , false ) ; } wanted
Code	{ return escapeJavaStyleString ( str , false ) ; } wanted
Distance : 3

186
Tree	{ return escapeJavaStyleString ( str , false ) ; } +
Code	{ return escapeJavaStyleString ( str , false ) ; } +
Distance : 3

187
Tree	{ return escapeJavaStyleString ( str , false ) ; } throw
Code	{ return escapeJavaStyleString ( str , false ) ; } throw
Distance : 3

188
Tree	{ return escapeJavaStyleString ( str , false ) ; } super
Code	{ return escapeJavaStyleString ( str , false ) ; } super
Distance : 3

189
Tree	{ return escapeJavaStyleString ( str , false ) ; } value
Code	{ return escapeJavaStyleString ( str , false ) ; } value
Distance : 3

190
Tree	{ return escapeJavaStyleString ( str , false ) ; } long
Code	{ return escapeJavaStyleString ( str , false ) ; } long
Distance : 3

191
Tree	{ return escapeJavaStyleString ( str , false ) ; } /
Code	{ return escapeJavaStyleString ( str , false ) ; } /
Distance : 3

192
Tree	{ return escapeJavaStyleString ( str , false ) ; } length
Code	{ return escapeJavaStyleString ( str , false ) ; } length
Distance : 3

193
Tree	{ return escapeJavaStyleString ( str , false ) ; } TestUtils
Code	{ return escapeJavaStyleString ( str , false ) ; } TestUtils
Distance : 3

194
Tree	{ return escapeJavaStyleString ( str , false ) ; } alpha
Code	{ return escapeJavaStyleString ( str , false ) ; } alpha
Distance : 3

195
Tree	{ return escapeJavaStyleString ( str , false ) ; } instance
Code	{ return escapeJavaStyleString ( str , false ) ; } instance
Distance : 3

196
Tree	{ return escapeJavaStyleString ( str , false ) ; } Assert
Code	{ return escapeJavaStyleString ( str , false ) ; } Assert
Distance : 3

197
Tree	{ return escapeJavaStyleString ( str , false ) ; } catch
Code	{ return escapeJavaStyleString ( str , false ) ; } catch
Distance : 3

198
Tree	{ return escapeJavaStyleString ( str , false ) ; } LanguageMode.ECMASCRIPT6
Code	{ return escapeJavaStyleString ( str , false ) ; } LanguageMode.ECMASCRIPT6
Distance : 3

199
Tree	{ return escapeJavaStyleString ( str , false ) ; } s
Code	{ return escapeJavaStyleString ( str , false ) ; } s
Distance : 3

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 6

1
Tree	if ( element != null ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 7

2
Tree	if ( element != null ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 7

3
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 6

4
Tree	if ( element != null ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 7

5
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

6
Tree	if ( element != null ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 7

7
Tree	if ( element != null ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 6

8
Tree	if ( type != null ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

9
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

10
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 6

11
Tree	if ( element != null ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 7

12
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

13
Tree	if ( element != null ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 7

14
Tree	if ( element != null ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 8

15
Tree	if ( element != break; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

16
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 7

17
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

18
Tree	if ( element != default: ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 7

19
Tree	if ( element != null ) { element = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = Object . class ; }
Distance : 7

20
Tree	if ( element != null ) { Object = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { type = element . class ; }
Distance : 7

21
Tree	if ( element != null ) { element = type . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = type . class ; }
Distance : 8

22
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 6

23
Tree	if ( element != super(); ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

24
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

25
Tree	if ( Object != null ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

26
Tree	if ( element != null ) { type = type . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { element = type . class ; }
Distance : 7

27
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element . class ; }
Distance : 7

28
Tree	if ( Object != null ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

29
Tree	if ( Object != null ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

30
Tree	if ( type != null ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

31
Tree	if ( element != null ) { Object = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { Object = Object . getClass () ; } else { type = type . class ; }
Distance : 8

32
Tree	if ( type != null ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

33
Tree	if ( element != null ) { type = Object . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { type = element . class ; }
Distance : 7

34
Tree	if ( element != null ) { Object = element . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { element = type . class ; }
Distance : 7

35
Tree	if ( element != null ) { type = element . getClass () ; } else { element = element . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = element . class ; }
Distance : 6

36
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

37
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

38
Tree	if ( Object != null ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

39
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = Object . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = Object . class ; }
Distance : 6

40
Tree	if ( type != null ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

41
Tree	if ( type != null ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

42
Tree	if ( element != null ) { type = type . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { Object = type . class ; }
Distance : 7

43
Tree	if ( element != null ) { element = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { element = Object . getClass () ; } else { type = type . class ; }
Distance : 8

44
Tree	if ( Object != null ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

45
Tree	if ( element != null ) { element = element . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { element = type . class ; }
Distance : 7

46
Tree	if ( element != null ) { type = Object . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { type = Object . class ; }
Distance : 7

47
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

48
Tree	if ( element != null ) { type = element . getClass () ; } else { element = Object . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { element = Object . class ; }
Distance : 6

49
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

50
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

51
Tree	if ( element != null ) { type = Object . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { element = type . class ; }
Distance : 7

52
Tree	if ( element != null ) { Object = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { Object = type . class ; }
Distance : 7

53
Tree	if ( element != null ) { type = element . getClass () ; } else { Object = element . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Object = element . class ; }
Distance : 6

54
Tree	if ( type != null ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

55
Tree	if ( element != null ) { Object = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { Object = type . getClass () ; } else { type = Object . class ; }
Distance : 8

56
Tree	if ( element != break; ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

57
Tree	if ( element != break; ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != break; ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

58
Tree	if ( type != null ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

59
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

60
Tree	if ( element != null ) { element = Object . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { element = Object . getClass () ; } else { element = type . class ; }
Distance : 8

61
Tree	if ( element != return; ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

62
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

63
Tree	if ( type != null ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

64
Tree	if ( element != return; ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

65
Tree	if ( Object != super(); ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != super(); ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

66
Tree	if ( element != null ) { element = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { Object = type . class ; }
Distance : 7

67
Tree	if ( element != default: ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 7

68
Tree	if ( Object != null ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

69
Tree	if ( element != super(); ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

70
Tree	if ( element != default: ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != default: ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

71
Tree	if ( element != break; ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( element != break; ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

72
Tree	if ( element != return; ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 8

73
Tree	if ( element != super(); ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

74
Tree	if ( element != null ) { element = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = Object . class ; }
Distance : 8

75
Tree	if ( element != break; ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

76
Tree	if ( element != super(); ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

77
Tree	if ( element != continue; ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( element != continue; ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

78
Tree	if ( element != continue; ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

79
Tree	if ( element != return; ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

80
Tree	if ( Object != return; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != return; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

81
Tree	if ( type != super(); ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( type != super(); ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

82
Tree	if ( element != null ) { type = type . getClass () ; } else { element = Object . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { element = Object . class ; }
Distance : 7

83
Tree	if ( element != default: ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( element != default: ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 8

84
Tree	if ( element != return; ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

85
Tree	if ( element != default: ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 7

86
Tree	if ( Object != null ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( Object != null ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 8

87
Tree	if ( type != null ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

88
Tree	if ( element != break; ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != break; ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

89
Tree	if ( element != null ) { element = type . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { element = type . getClass () ; } else { type = element . class ; }
Distance : 8

90
Tree	if ( Object != break; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != break; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

91
Tree	if ( Object != null ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 9

92
Tree	if ( element != return; ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

93
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 8

94
Tree	if ( element != null ) { Object = Object . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { Object = Object . getClass () ; } else { type = Object . class ; }
Distance : 8

95
Tree	if ( type != null ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

96
Tree	if ( element != null ) { type = Object . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { Object = type . class ; }
Distance : 7

97
Tree	if ( element != null ) { Object = type . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { Object = type . getClass () ; } else { type = element . class ; }
Distance : 8

98
Tree	if ( element != continue; ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != continue; ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

99
Tree	if ( element != break; ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != break; ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

100
Tree	if ( Object != continue; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != continue; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

101
Tree	if ( element != super(); ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

102
Tree	if ( type != return; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( type != return; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

103
Tree	if ( element != null ) { Object = type . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { Object = type . getClass () ; } else { element = type . class ; }
Distance : 8

104
Tree	if ( element != continue; ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != continue; ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

105
Tree	if ( element != break; ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

106
Tree	if ( element != null ) { type = type . getClass () ; } else { element = element . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { element = element . class ; }
Distance : 7

107
Tree	if ( element != default: ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != default: ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

108
Tree	if ( Object != default: ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != default: ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

109
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

110
Tree	if ( Object != null ) { element = element . getClass () ; } else { type = Object . class ; }
Code	if ( Object != null ) { element = element . getClass () ; } else { type = Object . class ; }
Distance : 8

111
Tree	if ( element != continue; ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

112
Tree	if ( Object != null ) { Object = element . getClass () ; } else { type = element . class ; }
Code	if ( Object != null ) { Object = element . getClass () ; } else { type = element . class ; }
Distance : 8

113
Tree	if ( type != null ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( type != null ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 8

114
Tree	if ( Object != null ) { element = type . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { element = type . getClass () ; } else { type = type . class ; }
Distance : 9

115
Tree	if ( element != null ) { type = type . getClass () ; } else { Object = Object . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { Object = Object . class ; }
Distance : 7

116
Tree	if ( type != break; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( type != break; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

117
Tree	if ( element != default: ) { type = Object . getClass () ; } else { type = type . class ; }
Code	if ( element != default: ) { type = Object . getClass () ; } else { type = type . class ; }
Distance : 8

118
Tree	if ( type != null ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 9

119
Tree	if ( element != null ) { element = Object . getClass () ; } else { type = Object . class ; }
Code	if ( element != null ) { element = Object . getClass () ; } else { type = Object . class ; }
Distance : 8

120
Tree	if ( element != null ) { Object = Object . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { Object = Object . getClass () ; } else { type = element . class ; }
Distance : 8

121
Tree	if ( type != null ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 8

122
Tree	if ( Object != null ) { type = Object . getClass () ; } else { type = Object . class ; }
Code	if ( Object != null ) { type = Object . getClass () ; } else { type = Object . class ; }
Distance : 8

123
Tree	if ( type != continue; ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( type != continue; ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

124
Tree	if ( element != default: ) { type = element . getClass () ; } else { element = type . class ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { element = type . class ; }
Distance : 7

125
Tree	if ( element != null ) { element = element . getClass () ; } else { element = Object . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { element = Object . class ; }
Distance : 7

126
Tree	if ( element != null ) { Object = element . getClass () ; } else { element = element . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { element = element . class ; }
Distance : 7

127
Tree	if ( Object != null ) { type = element . getClass () ; } else { element = Object . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { element = Object . class ; }
Distance : 7

128
Tree	if ( element != return; ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != return; ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

129
Tree	if ( element != null ) { element = type . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { element = type . getClass () ; } else { element = type . class ; }
Distance : 8

130
Tree	if ( element != super(); ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != super(); ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 8

131
Tree	if ( Object != null ) { type = type . getClass () ; } else { element = type . class ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { element = type . class ; }
Distance : 8

132
Tree	if ( element != super(); ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 9

133
Tree	if ( element != return; ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != return; ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

134
Tree	if ( element != null ) { type = Object . getClass () ; } else { element = Object . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { element = Object . class ; }
Distance : 7

135
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 8

136
Tree	if ( type != default: ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( type != default: ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 8

137
Tree	if ( element != null ) { Object = element . getClass () ; } else { Object = Object . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { Object = Object . class ; }
Distance : 7

138
Tree	if ( Object != null ) { element = element . getClass () ; } else { type = element . class ; }
Code	if ( Object != null ) { element = element . getClass () ; } else { type = element . class ; }
Distance : 8

139
Tree	if ( type != null ) { element = element . getClass () ; } else { type = Object . class ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = Object . class ; }
Distance : 8

140
Tree	if ( type != null ) { Object = element . getClass () ; } else { type = element . class ; }
Code	if ( type != null ) { Object = element . getClass () ; } else { type = element . class ; }
Distance : 8

141
Tree	if ( element != null ) { Object = type . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { Object = type . getClass () ; } else { Object = type . class ; }
Distance : 8

142
Tree	if ( element != break; ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != break; ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

143
Tree	if ( element != null ) { type = type . getClass () ; } else { Object = element . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { Object = element . class ; }
Distance : 7

144
Tree	if ( type != null ) { element = type . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { element = type . getClass () ; } else { type = type . class ; }
Distance : 9

145
Tree	if ( element != null ) { element = Object . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { element = Object . getClass () ; } else { type = element . class ; }
Distance : 8

146
Tree	if ( Object != null ) { Object = Object . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { Object = Object . getClass () ; } else { type = type . class ; }
Distance : 9

147
Tree	if ( Object != null ) { type = Object . getClass () ; } else { type = element . class ; }
Code	if ( Object != null ) { type = Object . getClass () ; } else { type = element . class ; }
Distance : 8

148
Tree	if ( element != null ) { Object = element . getClass () ; } else { element = Object . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { element = Object . class ; }
Distance : 7

149
Tree	if ( element != break; ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != break; ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

150
Tree	if ( type != null ) { type = Object . getClass () ; } else { type = Object . class ; }
Code	if ( type != null ) { type = Object . getClass () ; } else { type = Object . class ; }
Distance : 8

151
Tree	if ( Object != null ) { Object = element . getClass () ; } else { element = type . class ; }
Code	if ( Object != null ) { Object = element . getClass () ; } else { element = type . class ; }
Distance : 8

152
Tree	if ( Object != null ) { type = element . getClass () ; } else { element = element . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { element = element . class ; }
Distance : 7

153
Tree	if ( element != return; ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != return; ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 8

154
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = Object . class ; }
Distance : 8

155
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

156
Tree	if ( type != null ) { type = element . getClass () ; } else { element = Object . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { element = Object . class ; }
Distance : 7

157
Tree	if ( element != super(); ) { Object = element . getClass () ; } else { type = element . class ; }
Code	if ( element != super(); ) { Object = element . getClass () ; } else { type = element . class ; }
Distance : 8

158
Tree	if ( element != return; ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 9

159
Tree	if ( Object != super(); ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( Object != super(); ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 8

160
Tree	if ( element != super(); ) { element = type . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { element = type . getClass () ; } else { type = type . class ; }
Distance : 9

161
Tree	if ( element != null ) { Object = Object . getClass () ; } else { element = type . class ; }
Code	if ( element != null ) { Object = Object . getClass () ; } else { element = type . class ; }
Distance : 8

162
Tree	if ( type != null ) { type = type . getClass () ; } else { element = type . class ; }
Code	if ( type != null ) { type = type . getClass () ; } else { element = type . class ; }
Distance : 8

163
Tree	if ( element != null ) { type = Object . getClass () ; } else { element = element . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { element = element . class ; }
Distance : 7

164
Tree	if ( element != return; ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != return; ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 8

165
Tree	if ( element != default: ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != default: ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

166
Tree	if ( element != null ) { element = element . getClass () ; } else { Object = Object . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { Object = Object . class ; }
Distance : 7

167
Tree	if ( element != null ) { Object = element . getClass () ; } else { Object = element . class ; }
Code	if ( element != null ) { Object = element . getClass () ; } else { Object = element . class ; }
Distance : 7

168
Tree	if ( Object != super(); ) { type = type . getClass () ; } else { type = type . class ; }
Code	if ( Object != super(); ) { type = type . getClass () ; } else { type = type . class ; }
Distance : 9

169
Tree	if ( Object != null ) { type = element . getClass () ; } else { Object = Object . class ; }
Code	if ( Object != null ) { type = element . getClass () ; } else { Object = Object . class ; }
Distance : 7

170
Tree	if ( type != null ) { element = element . getClass () ; } else { type = element . class ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = element . class ; }
Distance : 8

171
Tree	if ( element != null ) { element = type . getClass () ; } else { Object = type . class ; }
Code	if ( element != null ) { element = type . getClass () ; } else { Object = type . class ; }
Distance : 8

172
Tree	if ( element != null ) { element = element . getClass () ; } else { element = element . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { element = element . class ; }
Distance : 7

173
Tree	if ( element != super(); ) { type = Object . getClass () ; } else { type = Object . class ; }
Code	if ( element != super(); ) { type = Object . getClass () ; } else { type = Object . class ; }
Distance : 8

174
Tree	if ( element != default: ) { type = type . getClass () ; } else { type = Object . class ; }
Code	if ( element != default: ) { type = type . getClass () ; } else { type = Object . class ; }
Distance : 8

175
Tree	if ( element != continue; ) { type = element . getClass () ; } else { Object = type . class ; }
Code	if ( element != continue; ) { type = element . getClass () ; } else { Object = type . class ; }
Distance : 7

176
Tree	if ( Object != null ) { type = type . getClass () ; } else { Object = type . class ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { Object = type . class ; }
Distance : 8

177
Tree	if ( Object != null ) { element = Object . getClass () ; } else { type = type . class ; }
Code	if ( Object != null ) { element = Object . getClass () ; } else { type = type . class ; }
Distance : 9

178
Tree	if ( element != null ) { type = Object . getClass () ; } else { Object = Object . class ; }
Code	if ( element != null ) { type = Object . getClass () ; } else { Object = Object . class ; }
Distance : 7

179
Tree	if ( element != break; ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( element != break; ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 9

180
Tree	if ( type != null ) { Object = Object . getClass () ; } else { type = type . class ; }
Code	if ( type != null ) { Object = Object . getClass () ; } else { type = type . class ; }
Distance : 9

181
Tree	if ( element != super(); ) { type = element . getClass () ; } else { element = Object . class ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { element = Object . class ; }
Distance : 7

182
Tree	if ( element != break; ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != break; ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 8

183
Tree	if ( type != null ) { type = Object . getClass () ; } else { type = element . class ; }
Code	if ( type != null ) { type = Object . getClass () ; } else { type = element . class ; }
Distance : 8

184
Tree	if ( element != continue; ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != continue; ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 8

185
Tree	if ( element != super(); ) { type = type . getClass () ; } else { element = type . class ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { element = type . class ; }
Distance : 8

186
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = type . class ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = type . class ; }
Distance : 8

187
Tree	if ( Object != null ) { element = element . getClass () ; } else { element = type . class ; }
Code	if ( Object != null ) { element = element . getClass () ; } else { element = type . class ; }
Distance : 8

188
Tree	if ( element != return; ) { element = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != return; ) { element = element . getClass () ; } else { type = Object . class ; }
Distance : 8

189
Tree	if ( type != null ) { Object = element . getClass () ; } else { element = type . class ; }
Code	if ( type != null ) { Object = element . getClass () ; } else { element = type . class ; }
Distance : 8

190
Tree	if ( element != return; ) { Object = element . getClass () ; } else { type = element . class ; }
Code	if ( element != return; ) { Object = element . getClass () ; } else { type = element . class ; }
Distance : 8

191
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = element . class ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = element . class ; }
Distance : 8

192
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 8

193
Tree	if ( type != null ) { type = element . getClass () ; } else { element = element . class ; }
Code	if ( type != null ) { type = element . getClass () ; } else { element = element . class ; }
Distance : 7

194
Tree	if ( Object != return; ) { type = element . getClass () ; } else { type = Object . class ; }
Code	if ( Object != return; ) { type = element . getClass () ; } else { type = Object . class ; }
Distance : 8

195
Tree	if ( element != return; ) { element = type . getClass () ; } else { type = type . class ; }
Code	if ( element != return; ) { element = type . getClass () ; } else { type = type . class ; }
Distance : 9

196
Tree	if ( Object != super(); ) { Object = element . getClass () ; } else { type = type . class ; }
Code	if ( Object != super(); ) { Object = element . getClass () ; } else { type = type . class ; }
Distance : 9

197
Tree	if ( element != break; ) { Object = element . getClass () ; } else { type = Object . class ; }
Code	if ( element != break; ) { Object = element . getClass () ; } else { type = Object . class ; }
Distance : 8

198
Tree	if ( element != continue; ) { Object = type . getClass () ; } else { type = type . class ; }
Code	if ( element != continue; ) { Object = type . getClass () ; } else { type = type . class ; }
Distance : 9

199
Tree	if ( Object != super(); ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( Object != super(); ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 8

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return true ;
Code	return true ;
Distance : 10

1
Tree	return fNode ;
Code	return fNode ;
Distance : 10

2
Tree	return currentParent ;
Code	return currentParent ;
Distance : 10

3
Tree	return isAssignmentOp ;
Code	return isAssignmentOp ;
Distance : 10

4
Tree	return InvocationBuilder ;
Code	return InvocationBuilder ;
Distance : 10

5
Tree	return newDeclaration ;
Code	return newDeclaration ;
Distance : 10

6
Tree	return report ;
Code	return report ;
Distance : 10

7
Tree	return requireName ;
Code	return requireName ;
Distance : 10

8
Tree	return TimePeriod ;
Code	return TimePeriod ;
Distance : 10

9
Tree	return isTry ;
Code	return isTry ;
Distance : 10

10
Tree	return BasicChronology ;
Code	return BasicChronology ;
Distance : 10

11
Tree	return DiagnosticGroups.ANALYZER_CHECKS ;
Code	return DiagnosticGroups.ANALYZER_CHECKS ;
Distance : 10

12
Tree	return InterruptedException ;
Code	return InterruptedException ;
Distance : 10

13
Tree	return super(); ;
Code	return super(); ;
Distance : 10

14
Tree	return array ;
Code	return array ;
Distance : 10

15
Tree	return DescribedInvocation ;
Code	return DescribedInvocation ;
Distance : 10

16
Tree	return InOrderVerificationMode ;
Code	return InOrderVerificationMode ;
Distance : 10

17
Tree	return LanguageMode.ECMASCRIPT_2017 ;
Code	return LanguageMode.ECMASCRIPT_2017 ;
Distance : 10

18
Tree	return hasFirstMethodInStackTrace ;
Code	return hasFirstMethodInStackTrace ;
Distance : 10

19
Tree	return validateFeature ;
Code	return validateFeature ;
Distance : 10

20
Tree	return preMultiply ;
Code	return preMultiply ;
Distance : 10

21
Tree	return cause ;
Code	return cause ;
Distance : 10

22
Tree	return Printable ;
Code	return Printable ;
Distance : 10

23
Tree	return caseBlock ;
Code	return caseBlock ;
Distance : 10

24
Tree	return -- ;
Code	return -- ;
Distance : 10

25
Tree	return ClassNotFoundException ;
Code	return ClassNotFoundException ;
Distance : 10

26
Tree	return MathUnsupportedOperationException ;
Code	return MathUnsupportedOperationException ;
Distance : 10

27
Tree	return CollapseProperties ;
Code	return CollapseProperties ;
Distance : 10

28
Tree	return ES6 ;
Code	return ES6 ;
Distance : 10

29
Tree	return null ;
Code	return null ;
Distance : 9

30
Tree	return expansionMode ;
Code	return expansionMode ;
Distance : 10

31
Tree	return allowExternsChanges ;
Code	return allowExternsChanges ;
Distance : 10

32
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 10

33
Tree	return DiagnosticGroups.LINT_CHECKS ;
Code	return DiagnosticGroups.LINT_CHECKS ;
Distance : 10

34
Tree	return != ;
Code	return != ;
Distance : 9

35
Tree	return Invocation ;
Code	return Invocation ;
Distance : 10

36
Tree	return this ;
Code	return this ;
Distance : 10

37
Tree	return sumSqImpl ;
Code	return sumSqImpl ;
Distance : 10

38
Tree	return IllegalFieldValueException ;
Code	return IllegalFieldValueException ;
Distance : 10

39
Tree	return Token.BLOCK ;
Code	return Token.BLOCK ;
Distance : 10

40
Tree	return ES6_MODULES ;
Code	return ES6_MODULES ;
Distance : 10

41
Tree	return InvocationDiffersFromActual ;
Code	return InvocationDiffersFromActual ;
Distance : 10

42
Tree	return grandparent ;
Code	return grandparent ;
Distance : 10

43
Tree	return IOException ;
Code	return IOException ;
Distance : 10

44
Tree	return isAnyFor ;
Code	return isAnyFor ;
Distance : 10

45
Tree	return inputId ;
Code	return inputId ;
Distance : 10

46
Tree	return warningsGuard ;
Code	return warningsGuard ;
Distance : 10

47
Tree	return registeredInvocations ;
Code	return registeredInvocations ;
Distance : 10

48
Tree	return Times ;
Code	return Times ;
Distance : 10

49
Tree	return setLanguageIn ;
Code	return setLanguageIn ;
Distance : 10

50
Tree	return LanguageMode.ECMASCRIPT5 ;
Code	return LanguageMode.ECMASCRIPT5 ;
Distance : 10

51
Tree	return root ;
Code	return root ;
Distance : 10

52
Tree	return error ;
Code	return error ;
Distance : 10

53
Tree	return getTemplateTypeMap ;
Code	return getTemplateTypeMap ;
Distance : 10

54
Tree	return languageIn ;
Code	return languageIn ;
Distance : 10

55
Tree	return IllegalArgumentException ;
Code	return IllegalArgumentException ;
Distance : 10

56
Tree	return validateNodeType ;
Code	return validateNodeType ;
Distance : 10

57
Tree	return yval.length ;
Code	return yval.length ;
Distance : 10

58
Tree	return InvocationsCalculator ;
Code	return InvocationsCalculator ;
Distance : 10

59
Tree	return srcParent ;
Code	return srcParent ;
Distance : 10

60
Tree	return yDot ;
Code	return yDot ;
Distance : 10

61
Tree	return SubtypeCache ;
Code	return SubtypeCache ;
Distance : 10

62
Tree	return mockTwo ;
Code	return mockTwo ;
Distance : 10

63
Tree	return char ;
Code	return char ;
Distance : 10

64
Tree	return setJSType ;
Code	return setJSType ;
Distance : 10

65
Tree	return message ;
Code	return message ;
Distance : 10

66
Tree	return assertNotNull ;
Code	return assertNotNull ;
Distance : 10

67
Tree	return isStrictModeInput ;
Code	return isStrictModeInput ;
Distance : 10

68
Tree	return unusedStubs ;
Code	return unusedStubs ;
Distance : 10

69
Tree	return passes ;
Code	return passes ;
Distance : 10

70
Tree	return LocalizedFormats.UNSUPPORTED_OPERATION ;
Code	return LocalizedFormats.UNSUPPORTED_OPERATION ;
Distance : 10

71
Tree	return diag ;
Code	return diag ;
Distance : 10

72
Tree	return problem.y ;
Code	return problem.y ;
Distance : 10

73
Tree	return TooLittleActualInvocationsError ;
Code	return TooLittleActualInvocationsError ;
Distance : 10

74
Tree	return BaseRuleFactory ;
Code	return BaseRuleFactory ;
Distance : 10

75
Tree	return make ;
Code	return make ;
Distance : 10

76
Tree	return getConditionExpression ;
Code	return getConditionExpression ;
Distance : 10

77
Tree	return l40 ;
Code	return l40 ;
Distance : 10

78
Tree	return Duration ;
Code	return Duration ;
Distance : 10

79
Tree	return stubber ;
Code	return stubber ;
Distance : 10

80
Tree	return item ;
Code	return item ;
Distance : 10

81
Tree	return Ref.Type.PROTOTYPE_GET ;
Code	return Ref.Type.PROTOTYPE_GET ;
Distance : 10

82
Tree	return ++ ;
Code	return ++ ;
Distance : 10

83
Tree	return log ;
Code	return log ;
Distance : 10

84
Tree	return MathArrays.OrderDirection.INCREASING ;
Code	return MathArrays.OrderDirection.INCREASING ;
Distance : 10

85
Tree	return Double.NEGATIVE_INFINITY ;
Code	return Double.NEGATIVE_INFINITY ;
Distance : 10

86
Tree	return markFunctionsDeleted ;
Code	return markFunctionsDeleted ;
Distance : 10

87
Tree	return externsRoot ;
Code	return externsRoot ;
Distance : 10

88
Tree	return expectThrowable ;
Code	return expectThrowable ;
Distance : 10

89
Tree	return tokens ;
Code	return tokens ;
Distance : 10

90
Tree	return getLanguageMode ;
Code	return getLanguageMode ;
Distance : 10

91
Tree	return searchStrs ;
Code	return searchStrs ;
Distance : 10

92
Tree	return ContextedRuntimeException ;
Code	return ContextedRuntimeException ;
Distance : 10

93
Tree	return allowed ;
Code	return allowed ;
Distance : 10

94
Tree	return defaultName ;
Code	return defaultName ;
Distance : 10

95
Tree	return isExprAssign ;
Code	return isExprAssign ;
Distance : 10

96
Tree	return minStep ;
Code	return minStep ;
Distance : 10

97
Tree	return Feature.ARROW_FUNCTIONS ;
Code	return Feature.ARROW_FUNCTIONS ;
Distance : 10

98
Tree	return Mockito ;
Code	return Mockito ;
Distance : 10

99
Tree	return {} ;
Code	return {} ;
Distance : 10

100
Tree	return found ;
Code	return found ;
Distance : 10

101
Tree	return PropertyCollapseLevel.ALL ;
Code	return PropertyCollapseLevel.ALL ;
Distance : 10

102
Tree	return MathIllegalStateException ;
Code	return MathIllegalStateException ;
Distance : 10

103
Tree	return >= ;
Code	return >= ;
Distance : 10

104
Tree	return throws ;
Code	return throws ;
Distance : 10

105
Tree	return class ;
Code	return class ;
Distance : 10

106
Tree	return throw ;
Code	return throw ;
Distance : 10

107
Tree	return body ;
Code	return body ;
Distance : 10

108
Tree	return RuntimeException ;
Code	return RuntimeException ;
Distance : 10

109
Tree	return OptimizationException ;
Code	return OptimizationException ;
Distance : 10

110
Tree	return MathException ;
Code	return MathException ;
Distance : 10

111
Tree	return CheckLevel.ERROR ;
Code	return CheckLevel.ERROR ;
Distance : 10

112
Tree	return addingRoot ;
Code	return addingRoot ;
Distance : 10

113
Tree	return parent ;
Code	return parent ;
Distance : 10

114
Tree	return languageOut ;
Code	return languageOut ;
Distance : 10

115
Tree	return TypeInferenceMode.CHECKED ;
Code	return TypeInferenceMode.CHECKED ;
Distance : 10

116
Tree	return testSame ;
Code	return testSame ;
Distance : 10

117
Tree	return assertTrue ;
Code	return assertTrue ;
Distance : 10

118
Tree	return PhaseOptimizer ;
Code	return PhaseOptimizer ;
Distance : 10

119
Tree	return doThrow ;
Code	return doThrow ;
Distance : 10

120
Tree	return has ;
Code	return has ;
Distance : 10

121
Tree	return description ;
Code	return description ;
Distance : 10

122
Tree	return VerificationInOrderFailure ;
Code	return VerificationInOrderFailure ;
Distance : 10

123
Tree	return double ;
Code	return double ;
Distance : 10

124
Tree	return super ;
Code	return super ;
Distance : 10

125
Tree	return - ;
Code	return - ;
Distance : 10

126
Tree	return ? ;
Code	return ? ;
Distance : 10

127
Tree	return extends ;
Code	return extends ;
Distance : 10

128
Tree	return false ;
Code	return false ;
Distance : 10

129
Tree	return void ;
Code	return void ;
Distance : 10

130
Tree	return long ;
Code	return long ;
Distance : 10

131
Tree	return else ;
Code	return else ;
Distance : 10

132
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

133
Tree	return STRING_CONSTANT ;
Code	return STRING_CONSTANT ;
Distance : 10

134
Tree	return options ;
Code	return options ;
Distance : 10

135
Tree	return removeFirstChild ;
Code	return removeFirstChild ;
Distance : 10

136
Tree	return default: ;
Code	return default: ;
Distance : 10

137
Tree	return <= ;
Code	return <= ;
Distance : 10

138
Tree	return break; ;
Code	return break; ;
Distance : 10

139
Tree	return abstract ;
Code	return abstract ;
Distance : 10

140
Tree	return &= ;
Code	return &= ;
Distance : 10

141
Tree	return % ;
Code	return % ;
Distance : 10

142
Tree	return paramType ;
Code	return paramType ;
Distance : 10

143
Tree	return /= ;
Code	return /= ;
Distance : 10

144
Tree	return return; ;
Code	return return; ;
Distance : 10

145
Tree	return MockitoException ;
Code	return MockitoException ;
Distance : 10

146
Tree	return config ;
Code	return config ;
Distance : 10

147
Tree	return js ;
Code	return js ;
Distance : 10

148
Tree	return += ;
Code	return += ;
Distance : 10

149
Tree	return float ;
Code	return float ;
Distance : 10

150
Tree	return ConvergenceException ;
Code	return ConvergenceException ;
Distance : 10

151
Tree	return MaxCountExceededException ;
Code	return MaxCountExceededException ;
Distance : 10

152
Tree	return maybeAssign ;
Code	return maybeAssign ;
Distance : 10

153
Tree	return options.prettyPrint ;
Code	return options.prettyPrint ;
Distance : 10

154
Tree	return testWarning ;
Code	return testWarning ;
Distance : 10

155
Tree	return setIsAddedBlock ;
Code	return setIsAddedBlock ;
Distance : 10

156
Tree	return *= ;
Code	return *= ;
Distance : 10

157
Tree	return xval.length ;
Code	return xval.length ;
Distance : 10

158
Tree	return setLanguageOut ;
Code	return setLanguageOut ;
Distance : 10

159
Tree	return case ;
Code	return case ;
Distance : 10

160
Tree	return getParentNode ;
Code	return getParentNode ;
Distance : 10

161
Tree	return getFirstChild ;
Code	return getFirstChild ;
Distance : 10

162
Tree	return actualYieldType ;
Code	return actualYieldType ;
Distance : 10

163
Tree	return NoInteractionsWantedError ;
Code	return NoInteractionsWantedError ;
Distance : 10

164
Tree	return VerificationModeFactory ;
Code	return VerificationModeFactory ;
Distance : 10

165
Tree	return %= ;
Code	return %= ;
Distance : 10

166
Tree	return nameNode ;
Code	return nameNode ;
Distance : 10

167
Tree	return addAnswer ;
Code	return addAnswer ;
Distance : 10

168
Tree	return gp ;
Code	return gp ;
Distance : 10

169
Tree	return defineSlot ;
Code	return defineSlot ;
Distance : 10

170
Tree	return NoInteractionsWanted ;
Code	return NoInteractionsWanted ;
Distance : 10

171
Tree	return testNoWarning ;
Code	return testNoWarning ;
Distance : 10

172
Tree	return child ;
Code	return child ;
Distance : 10

173
Tree	return varType ;
Code	return varType ;
Distance : 10

174
Tree	return UnhandledException ;
Code	return UnhandledException ;
Distance : 10

175
Tree	return warnings ;
Code	return warnings ;
Distance : 10

176
Tree	return mode ;
Code	return mode ;
Distance : 10

177
Tree	return inliningReach ;
Code	return inliningReach ;
Distance : 10

178
Tree	return then ;
Code	return then ;
Distance : 10

179
Tree	return containsKey ;
Code	return containsKey ;
Distance : 9

180
Tree	return handyReturnValues ;
Code	return handyReturnValues ;
Distance : 10

181
Tree	return isNameDeclaration ;
Code	return isNameDeclaration ;
Distance : 10

182
Tree	return cond ;
Code	return cond ;
Distance : 10

183
Tree	return int ;
Code	return int ;
Distance : 10

184
Tree	return * ;
Code	return * ;
Distance : 10

185
Tree	return getFirstFirstChild ;
Code	return getFirstFirstChild ;
Distance : 10

186
Tree	return wantedButNotInvoked ;
Code	return wantedButNotInvoked ;
Distance : 10

187
Tree	return boolean ;
Code	return boolean ;
Distance : 10

188
Tree	return DEFAULT_EXTERNS ;
Code	return DEFAULT_EXTERNS ;
Distance : 10

189
Tree	return tester ;
Code	return tester ;
Distance : 10

190
Tree	return assert ;
Code	return assert ;
Distance : 10

191
Tree	return removeChild ;
Code	return removeChild ;
Distance : 10

192
Tree	return IllegalStateException ;
Code	return IllegalStateException ;
Distance : 10

193
Tree	return Node ;
Code	return Node ;
Distance : 10

194
Tree	return short ;
Code	return short ;
Distance : 10

195
Tree	return ! ;
Code	return ! ;
Distance : 10

196
Tree	return METHOD_NAME ;
Code	return METHOD_NAME ;
Distance : 10

197
Tree	return problem.a ;
Code	return problem.a ;
Distance : 10

198
Tree	return & ;
Code	return & ;
Distance : 10

199
Tree	return Assert ;
Code	return Assert ;
Distance : 10

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	CharSequence cs invocations
Code	CharSequence cs invocations
Distance : 2

1
Tree	CharSequence cs Class
Code	CharSequence cs Class
Distance : 2

2
Tree	CharSequence cs {}
Code	CharSequence cs {}
Distance : 2

3
Tree	CharSequence cs mock
Code	CharSequence cs mock
Distance : 2

4
Tree	CharSequence cs f
Code	CharSequence cs f
Distance : 2

5
Tree	CharSequence cs ParamChecks
Code	CharSequence cs ParamChecks
Distance : 2

6
Tree	CharSequence cs -
Code	CharSequence cs -
Distance : 2

7
Tree	CharSequence cs Preconditions
Code	CharSequence cs Preconditions
Distance : 2

8
Tree	CharSequence cs T
Code	CharSequence cs T
Distance : 2

9
Tree	CharSequence cs &&
Code	CharSequence cs &&
Distance : 2

10
Tree	CharSequence cs ]
Code	CharSequence cs ]
Distance : 2

11
Tree	CharSequence cs [
Code	CharSequence cs [
Distance : 2

12
Tree	CharSequence cs Object
Code	CharSequence cs Object
Distance : 2

13
Tree	CharSequence cs class
Code	CharSequence cs class
Distance : 2

14
Tree	CharSequence cs test
Code	CharSequence cs test
Distance : 2

15
Tree	CharSequence cs @
Code	CharSequence cs @
Distance : 2

16
Tree	CharSequence cs !
Code	CharSequence cs !
Distance : 2

17
Tree	CharSequence cs assertEquals
Code	CharSequence cs assertEquals
Distance : 2

18
Tree	CharSequence cs ==
Code	CharSequence cs ==
Distance : 2

19
Tree	CharSequence cs void
Code	CharSequence cs void
Distance : 2

20
Tree	CharSequence cs []
Code	CharSequence cs []
Distance : 2

21
Tree	CharSequence cs checkState
Code	CharSequence cs checkState
Distance : 2

22
Tree	CharSequence cs Test
Code	CharSequence cs Test
Distance : 2

23
Tree	CharSequence cs out
Code	CharSequence cs out
Distance : 2

24
Tree	CharSequence cs nullNotPermitted
Code	CharSequence cs nullNotPermitted
Distance : 2

25
Tree	CharSequence cs n
Code	CharSequence cs n
Distance : 2

26
Tree	CharSequence cs !=
Code	CharSequence cs !=
Distance : 2

27
Tree	CharSequence cs i
Code	CharSequence cs i
Distance : 2

28
Tree	CharSequence cs MathRuntimeException
Code	CharSequence cs MathRuntimeException
Distance : 2

29
Tree	CharSequence cs Override
Code	CharSequence cs Override
Distance : 2

30
Tree	CharSequence cs public
Code	CharSequence cs public
Distance : 2

31
Tree	CharSequence cs >
Code	CharSequence cs >
Distance : 2

32
Tree	CharSequence cs new
Code	CharSequence cs new
Distance : 2

33
Tree	CharSequence cs STRING_CONSTANT
Code	CharSequence cs STRING_CONSTANT
Distance : 2

34
Tree	CharSequence cs ,
Code	CharSequence cs ,
Distance : 2

35
Tree	CharSequence cs .
Code	CharSequence cs .
Distance : 2

36
Tree	CharSequence cs }
Code	CharSequence cs }
Distance : 2

37
Tree	CharSequence cs =
Code	CharSequence cs =
Distance : 2

38
Tree	CharSequence cs (
Code	CharSequence cs (
Distance : 2

39
Tree	CharSequence cs <s>
Code	CharSequence cs <s>
Distance : 2

40
Tree	CharSequence cs <blank>
Code	CharSequence cs <blank>
Distance : 2

41
Tree	CharSequence cs CharSequence
Code	CharSequence cs CharSequence
Distance : 2

42
Tree	CharSequence cs )
Code	CharSequence cs )
Distance : 2

43
Tree	CharSequence cs ;
Code	CharSequence cs ;
Distance : 2

44
Tree	CharSequence cs ()
Code	CharSequence cs ()
Distance : 2

45
Tree	CharSequence cs {
Code	CharSequence cs {
Distance : 2

46
Tree	CharSequence cs false
Code	CharSequence cs false
Distance : 2

47
Tree	CharSequence cs int
Code	CharSequence cs int
Distance : 2

48
Tree	CharSequence cs double
Code	CharSequence cs double
Distance : 2

49
Tree	CharSequence cs e
Code	CharSequence cs e
Distance : 2

50
Tree	CharSequence cs else
Code	CharSequence cs else
Distance : 2

51
Tree	CharSequence cs NUMBER_CONSTANT
Code	CharSequence cs NUMBER_CONSTANT
Distance : 2

52
Tree	CharSequence cs this
Code	CharSequence cs this
Distance : 2

53
Tree	CharSequence cs final
Code	CharSequence cs final
Distance : 2

54
Tree	CharSequence cs name
Code	CharSequence cs name
Distance : 2

55
Tree	CharSequence cs t
Code	CharSequence cs t
Distance : 2

56
Tree	CharSequence cs Collection
Code	CharSequence cs Collection
Distance : 2

57
Tree	CharSequence cs getField
Code	CharSequence cs getField
Distance : 2

58
Tree	CharSequence cs dataset
Code	CharSequence cs dataset
Distance : 2

59
Tree	CharSequence cs protected
Code	CharSequence cs protected
Distance : 2

60
Tree	CharSequence cs PlotChangeEvent
Code	CharSequence cs PlotChangeEvent
Distance : 2

61
Tree	CharSequence cs mode
Code	CharSequence cs mode
Distance : 2

62
Tree	CharSequence cs mockingProgress
Code	CharSequence cs mockingProgress
Distance : 2

63
Tree	CharSequence cs return;
Code	CharSequence cs return;
Distance : 2

64
Tree	CharSequence cs isEmpty
Code	CharSequence cs isEmpty
Distance : 2

65
Tree	CharSequence cs char
Code	CharSequence cs char
Distance : 2

66
Tree	CharSequence cs static
Code	CharSequence cs static
Distance : 2

67
Tree	CharSequence cs setAcceptedLanguage
Code	CharSequence cs setAcceptedLanguage
Distance : 2

68
Tree	CharSequence cs JSType
Code	CharSequence cs JSType
Distance : 2

69
Tree	CharSequence cs get
Code	CharSequence cs get
Distance : 2

70
Tree	CharSequence cs getMessage
Code	CharSequence cs getMessage
Distance : 2

71
Tree	CharSequence cs true
Code	CharSequence cs true
Distance : 2

72
Tree	CharSequence cs return
Code	CharSequence cs return
Distance : 2

73
Tree	CharSequence cs if
Code	CharSequence cs if
Distance : 2

74
Tree	CharSequence cs stream
Code	CharSequence cs stream
Distance : 2

75
Tree	CharSequence cs <
Code	CharSequence cs <
Distance : 2

76
Tree	CharSequence cs solver
Code	CharSequence cs solver
Distance : 2

77
Tree	CharSequence cs pattern
Code	CharSequence cs pattern
Distance : 2

78
Tree	CharSequence cs js
Code	CharSequence cs js
Distance : 2

79
Tree	CharSequence cs TestUtilities
Code	CharSequence cs TestUtilities
Distance : 2

80
Tree	CharSequence cs equals
Code	CharSequence cs equals
Distance : 2

81
Tree	CharSequence cs d
Code	CharSequence cs d
Distance : 2

82
Tree	CharSequence cs externs
Code	CharSequence cs externs
Distance : 2

83
Tree	CharSequence cs assertTrue
Code	CharSequence cs assertTrue
Distance : 2

84
Tree	CharSequence cs for
Code	CharSequence cs for
Distance : 2

85
Tree	CharSequence cs Invocation
Code	CharSequence cs Invocation
Distance : 2

86
Tree	CharSequence cs getParent
Code	CharSequence cs getParent
Distance : 2

87
Tree	CharSequence cs setUp
Code	CharSequence cs setUp
Distance : 2

88
Tree	CharSequence cs StrBuilder
Code	CharSequence cs StrBuilder
Distance : 2

89
Tree	CharSequence cs reportMatcher
Code	CharSequence cs reportMatcher
Distance : 2

90
Tree	CharSequence cs index
Code	CharSequence cs index
Distance : 2

91
Tree	CharSequence cs node
Code	CharSequence cs node
Distance : 2

92
Tree	CharSequence cs matcher
Code	CharSequence cs matcher
Distance : 2

93
Tree	CharSequence cs abs
Code	CharSequence cs abs
Distance : 2

94
Tree	CharSequence cs Double
Code	CharSequence cs Double
Distance : 2

95
Tree	CharSequence cs PeriodType
Code	CharSequence cs PeriodType
Distance : 2

96
Tree	CharSequence cs instant
Code	CharSequence cs instant
Distance : 2

97
Tree	CharSequence cs values
Code	CharSequence cs values
Distance : 2

98
Tree	CharSequence cs isNormalBlock
Code	CharSequence cs isNormalBlock
Distance : 2

99
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

100
Tree	CharSequence cs contains
Code	CharSequence cs contains
Distance : 2

101
Tree	CharSequence cs <=
Code	CharSequence cs <=
Distance : 2

102
Tree	CharSequence cs a
Code	CharSequence cs a
Distance : 2

103
Tree	CharSequence cs LanguageMode.ECMASCRIPT_2015
Code	CharSequence cs LanguageMode.ECMASCRIPT_2015
Distance : 2

104
Tree	CharSequence cs size
Code	CharSequence cs size
Distance : 2

105
Tree	CharSequence cs StringBuilder
Code	CharSequence cs StringBuilder
Distance : 2

106
Tree	CharSequence cs b
Code	CharSequence cs b
Distance : 2

107
Tree	CharSequence cs MutableTimePeriod
Code	CharSequence cs MutableTimePeriod
Distance : 2

108
Tree	CharSequence cs stroke
Code	CharSequence cs stroke
Distance : 2

109
Tree	CharSequence cs traverseEs6
Code	CharSequence cs traverseEs6
Distance : 2

110
Tree	CharSequence cs UnivariateFunction
Code	CharSequence cs UnivariateFunction
Distance : 2

111
Tree	CharSequence cs sb
Code	CharSequence cs sb
Distance : 2

112
Tree	CharSequence cs throws
Code	CharSequence cs throws
Distance : 2

113
Tree	CharSequence cs scope
Code	CharSequence cs scope
Distance : 2

114
Tree	CharSequence cs sqrt
Code	CharSequence cs sqrt
Distance : 2

115
Tree	CharSequence cs clone
Code	CharSequence cs clone
Distance : 2

116
Tree	CharSequence cs returnZero
Code	CharSequence cs returnZero
Distance : 2

117
Tree	CharSequence cs getFirstChild
Code	CharSequence cs getFirstChild
Distance : 2

118
Tree	CharSequence cs simpleMethod
Code	CharSequence cs simpleMethod
Distance : 2

119
Tree	CharSequence cs getArgumentMatcherStorage
Code	CharSequence cs getArgumentMatcherStorage
Distance : 2

120
Tree	CharSequence cs append
Code	CharSequence cs append
Distance : 2

121
Tree	CharSequence cs optimizer
Code	CharSequence cs optimizer
Distance : 2

122
Tree	CharSequence cs obj
Code	CharSequence cs obj
Distance : 2

123
Tree	CharSequence cs chrono
Code	CharSequence cs chrono
Distance : 2

124
Tree	CharSequence cs isBlock
Code	CharSequence cs isBlock
Distance : 2

125
Tree	CharSequence cs <>
Code	CharSequence cs <>
Distance : 2

126
Tree	CharSequence cs Integer
Code	CharSequence cs Integer
Distance : 2

127
Tree	CharSequence cs v
Code	CharSequence cs v
Distance : 2

128
Tree	CharSequence cs reportCodeChange
Code	CharSequence cs reportCodeChange
Distance : 2

129
Tree	CharSequence cs IllegalArgumentException
Code	CharSequence cs IllegalArgumentException
Distance : 2

130
Tree	CharSequence cs invocation
Code	CharSequence cs invocation
Distance : 2

131
Tree	CharSequence cs assertThat
Code	CharSequence cs assertThat
Distance : 2

132
Tree	CharSequence cs FastMath
Code	CharSequence cs FastMath
Distance : 2

133
Tree	CharSequence cs expected
Code	CharSequence cs expected
Distance : 2

134
Tree	CharSequence cs createIllegalArgumentException
Code	CharSequence cs createIllegalArgumentException
Distance : 2

135
Tree	CharSequence cs parent
Code	CharSequence cs parent
Distance : 2

136
Tree	CharSequence cs fireChangeEvent
Code	CharSequence cs fireChangeEvent
Distance : 2

137
Tree	CharSequence cs ArrayList
Code	CharSequence cs ArrayList
Distance : 2

138
Tree	CharSequence cs testSame
Code	CharSequence cs testSame
Distance : 2

139
Tree	CharSequence cs x
Code	CharSequence cs x
Distance : 2

140
Tree	CharSequence cs LINE_JOINER
Code	CharSequence cs LINE_JOINER
Distance : 2

141
Tree	CharSequence cs str
Code	CharSequence cs str
Distance : 2

142
Tree	CharSequence cs try
Code	CharSequence cs try
Distance : 2

143
Tree	CharSequence cs result
Code	CharSequence cs result
Distance : 2

144
Tree	CharSequence cs fail
Code	CharSequence cs fail
Distance : 2

145
Tree	CharSequence cs :
Code	CharSequence cs :
Distance : 2

146
Tree	CharSequence cs valueOf
Code	CharSequence cs valueOf
Distance : 2

147
Tree	CharSequence cs y
Code	CharSequence cs y
Distance : 2

148
Tree	String cs
Code	String cs
Distance : 0

149
Tree	CharSequence cs array
Code	CharSequence cs array
Distance : 2

150
Tree	CharSequence cs ?
Code	CharSequence cs ?
Distance : 2

151
Tree	CharSequence cs boolean
Code	CharSequence cs boolean
Distance : 2

152
Tree	CharSequence cs m
Code	CharSequence cs m
Distance : 2

153
Tree	CharSequence cs paint
Code	CharSequence cs paint
Distance : 2

154
Tree	CharSequence cs type
Code	CharSequence cs type
Distance : 2

155
Tree	CharSequence cs *
Code	CharSequence cs *
Distance : 2

156
Tree	CharSequence cs getInstance
Code	CharSequence cs getInstance
Distance : 2

157
Tree	CharSequence cs serialised
Code	CharSequence cs serialised
Distance : 2

158
Tree	CharSequence cs Fraction
Code	CharSequence cs Fraction
Distance : 2

159
Tree	CharSequence cs checkNotNull
Code	CharSequence cs checkNotNull
Distance : 2

160
Tree	CharSequence cs source
Code	CharSequence cs source
Distance : 2

161
Tree	CharSequence cs toString
Code	CharSequence cs toString
Distance : 2

162
Tree	CharSequence cs Math
Code	CharSequence cs Math
Distance : 2

163
Tree	CharSequence cs root
Code	CharSequence cs root
Distance : 2

164
Tree	CharSequence cs options
Code	CharSequence cs options
Distance : 2

165
Tree	CharSequence cs p
Code	CharSequence cs p
Distance : 2

166
Tree	CharSequence cs data
Code	CharSequence cs data
Distance : 2

167
Tree	CharSequence cs add
Code	CharSequence cs add
Distance : 2

168
Tree	CharSequence cs field
Code	CharSequence cs field
Distance : 2

169
Tree	CharSequence cs checkArgument
Code	CharSequence cs checkArgument
Distance : 2

170
Tree	CharSequence cs ex
Code	CharSequence cs ex
Distance : 2

171
Tree	CharSequence cs NodeUtil
Code	CharSequence cs NodeUtil
Distance : 2

172
Tree	CharSequence cs join
Code	CharSequence cs join
Distance : 2

173
Tree	CharSequence cs Args
Code	CharSequence cs Args
Distance : 2

174
Tree	CharSequence cs NodeTraversal
Code	CharSequence cs NodeTraversal
Distance : 2

175
Tree	CharSequence cs List
Code	CharSequence cs List
Distance : 2

176
Tree	CharSequence cs Exception
Code	CharSequence cs Exception
Distance : 2

177
Tree	CharSequence cs Node
Code	CharSequence cs Node
Distance : 2

178
Tree	CharSequence cs c
Code	CharSequence cs c
Distance : 2

179
Tree	CharSequence cs notifyListeners
Code	CharSequence cs notifyListeners
Distance : 2

180
Tree	CharSequence cs lines
Code	CharSequence cs lines
Distance : 2

181
Tree	CharSequence cs verify
Code	CharSequence cs verify
Distance : 2

182
Tree	CharSequence cs compiler
Code	CharSequence cs compiler
Distance : 2

183
Tree	CharSequence cs String
Code	CharSequence cs String
Distance : 2

184
Tree	CharSequence cs null
Code	CharSequence cs null
Distance : 2

185
Tree	CharSequence cs wanted
Code	CharSequence cs wanted
Distance : 2

186
Tree	CharSequence cs +
Code	CharSequence cs +
Distance : 2

187
Tree	CharSequence cs throw
Code	CharSequence cs throw
Distance : 2

188
Tree	CharSequence cs super
Code	CharSequence cs super
Distance : 2

189
Tree	CharSequence cs value
Code	CharSequence cs value
Distance : 2

190
Tree	CharSequence cs long
Code	CharSequence cs long
Distance : 2

191
Tree	CharSequence cs /
Code	CharSequence cs /
Distance : 2

192
Tree	CharSequence cs length
Code	CharSequence cs length
Distance : 2

193
Tree	CharSequence cs TestUtils
Code	CharSequence cs TestUtils
Distance : 2

194
Tree	CharSequence cs alpha
Code	CharSequence cs alpha
Distance : 2

195
Tree	CharSequence cs instance
Code	CharSequence cs instance
Distance : 2

196
Tree	CharSequence cs Assert
Code	CharSequence cs Assert
Distance : 2

197
Tree	CharSequence cs catch
Code	CharSequence cs catch
Distance : 2

198
Tree	CharSequence cs LanguageMode.ECMASCRIPT6
Code	CharSequence cs LanguageMode.ECMASCRIPT6
Distance : 2

199
Tree	CharSequence cs s
Code	CharSequence cs s
Distance : 2

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Node
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Node
Distance : 3

1
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; parent
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; parent
Distance : 3

2
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; x
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; x
Distance : 3

3
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; testSame
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; testSame
Distance : 3

4
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ?
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ?
Distance : 3

5
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkNotNull
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkNotNull
Distance : 3

6
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertThat
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertThat
Distance : 3

7
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Integer
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Integer
Distance : 3

8
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Fraction
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Fraction
Distance : 3

9
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; node
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; node
Distance : 3

10
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; index
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; index
Distance : 3

11
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; toString
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; toString
Distance : 3

12
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; source
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; source
Distance : 3

13
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; options
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; options
Distance : 3

14
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; p
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; p
Distance : 3

15
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; @
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; @
Distance : 3

16
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; false
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; false
Distance : 3

17
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; double
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; double
Distance : 3

18
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ==
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ==
Distance : 3

19
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; void
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; void
Distance : 3

20
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; catch
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; catch
Distance : 3

21
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; throw
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; throw
Distance : 3

22
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; createIllegalArgumentException
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; createIllegalArgumentException
Distance : 3

23
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; test
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; test
Distance : 3

24
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <>
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <>
Distance : 3

25
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ParamChecks
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ParamChecks
Distance : 3

26
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; :
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; :
Distance : 3

27
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; fail
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; fail
Distance : 3

28
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; List
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; List
Distance : 3

29
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Args
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Args
Distance : 3

30
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; IllegalArgumentException
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; IllegalArgumentException
Distance : 3

31
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; reportCodeChange
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; reportCodeChange
Distance : 3

32
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; FastMath
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; FastMath
Distance : 3

33
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; expected
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; expected
Distance : 3

34
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ArrayList
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ArrayList
Distance : 3

35
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; fireChangeEvent
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; fireChangeEvent
Distance : 3

36
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; getInstance
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; getInstance
Distance : 3

37
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; serialised
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; serialised
Distance : 3

38
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; str
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; str
Distance : 3

39
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; LINE_JOINER
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; LINE_JOINER
Distance : 3

40
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Exception
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Exception
Distance : 3

41
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; invocation
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; invocation
Distance : 3

42
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; paint
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; paint
Distance : 3

43
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; m
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; m
Distance : 3

44
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; result
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; result
Distance : 3

45
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; try
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; try
Distance : 3

46
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; f
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; f
Distance : 3

47
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; array
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; array
Distance : 3

48
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Assert
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Assert
Distance : 3

49
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; []
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; []
Distance : 3

50
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; nullNotPermitted
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; nullNotPermitted
Distance : 3

51
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

52
Tree	GregorianCalendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

53
Tree	GregorianCalendar c = new Calendar ( mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mLocale ) ;
Distance : 4

54
Tree	Calendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Distance : 3

55
Tree	GregorianCalendar mLocale = new GregorianCalendar ( c ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( c ) ;
Distance : 5

56
Tree	Calendar mTimeZone = new Calendar ( mLocale ) ;
Code	Calendar mTimeZone = new Calendar ( mLocale ) ;
Distance : 4

57
Tree	GregorianCalendar mTimeZone = new Calendar ( c ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( c ) ;
Distance : 6

58
Tree	GregorianCalendar mTimeZone = new GregorianCalendar ( c ) ;
Code	GregorianCalendar mTimeZone = new GregorianCalendar ( c ) ;
Distance : 5

59
Tree	GregorianCalendar mLocale = new Calendar ( c ) ;
Code	GregorianCalendar mLocale = new Calendar ( c ) ;
Distance : 6

60
Tree	Calendar mTimeZone = new Calendar ( c ) ;
Code	Calendar mTimeZone = new Calendar ( c ) ;
Distance : 5

61
Tree	Calendar mTimeZone = new GregorianCalendar ( c ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( c ) ;
Distance : 4

62
Tree	GregorianCalendar mTimeZone = new Calendar ( mLocale ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( mLocale ) ;
Distance : 5

63
Tree	Calendar mLocale = new Calendar ( c ) ;
Code	Calendar mLocale = new Calendar ( c ) ;
Distance : 5

64
Tree	GregorianCalendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar mTimeZone = new GregorianCalendar ( mLocale ) ;
Distance : 4

65
Tree	Calendar mLocale = new GregorianCalendar ( c ) ;
Code	Calendar mLocale = new GregorianCalendar ( c ) ;
Distance : 4

66
Tree	GregorianCalendar mTimeZone = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 5

67
Tree	GregorianCalendar mLocale = new Calendar ( mLocale ) ;
Code	GregorianCalendar mLocale = new Calendar ( mLocale ) ;
Distance : 5

68
Tree	GregorianCalendar c = new Calendar ( c ) ;
Code	GregorianCalendar c = new Calendar ( c ) ;
Distance : 5

69
Tree	GregorianCalendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

70
Tree	GregorianCalendar mLocale = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar mLocale = new GregorianCalendar ( mLocale ) ;
Distance : 4

71
Tree	GregorianCalendar c = new GregorianCalendar ( c ) ;
Code	GregorianCalendar c = new GregorianCalendar ( c ) ;
Distance : 4

72
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

73
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; v
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; v
Distance : 3

74
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

75
Tree	GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Distance : 3

76
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; length
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; length
Distance : 3

77
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; TestUtils
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; TestUtils
Distance : 3

78
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; &&
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; &&
Distance : 3

79
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; super
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; super
Distance : 3

80
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; value
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; value
Distance : 3

81
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; T
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; T
Distance : 3

82
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; -
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; -
Distance : 3

83
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Preconditions
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Preconditions
Distance : 3

84
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; [
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; [
Distance : 3

85
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ]
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ]
Distance : 3

86
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertEquals
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertEquals
Distance : 3

87
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; !
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; !
Distance : 3

88
Tree	Calendar c = new GregorianCalendar ( c ) ;
Code	Calendar c = new GregorianCalendar ( c ) ;
Distance : 3

89
Tree	Calendar mLocale = new Calendar ( mLocale ) ;
Code	Calendar mLocale = new Calendar ( mLocale ) ;
Distance : 4

90
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

91
Tree	Calendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar mTimeZone = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

92
Tree	Calendar mLocale = new GregorianCalendar ( mLocale ) ;
Code	Calendar mLocale = new GregorianCalendar ( mLocale ) ;
Distance : 3

93
Tree	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Code	Calendar mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 4

94
Tree	Calendar mLocale = new Calendar ( mTimeZone ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 4

95
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

96
Tree	Calendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar mLocale = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

97
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

98
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; setUp
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; setUp
Distance : 3

99
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

100
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; compiler
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; compiler
Distance : 3

101
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <
Distance : 3

102
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; this
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; this
Distance : 3

103
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; final
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; final
Distance : 3

104
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; =
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; =
Distance : 3

105
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; }
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; }
Distance : 3

106
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ()
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ()
Distance : 3

107
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; {
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; {
Distance : 3

108
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkArgument
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkArgument
Distance : 3

109
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; field
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; field
Distance : 3

110
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; t
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; t
Distance : 3

111
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; name
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; name
Distance : 3

112
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; data
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; data
Distance : 3

113
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; add
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; add
Distance : 3

114
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; NodeTraversal
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; NodeTraversal
Distance : 3

115
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; values
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; values
Distance : 3

116
Tree	GregorianCalendar mLocale = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 5

117
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; String
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; String
Distance : 3

118
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; mode
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; mode
Distance : 3

119
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; MathRuntimeException
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; MathRuntimeException
Distance : 3

120
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Object
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Object
Distance : 3

121
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; class
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; class
Distance : 3

122
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <blank>
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <blank>
Distance : 3

123
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; (
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; (
Distance : 3

124
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; <s>
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; <s>
Distance : 3

125
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; (
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; (
Distance : 3

126
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ;
Distance : 3

127
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; )
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; )
Distance : 3

128
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; .
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; .
Distance : 3

129
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ,
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ,
Distance : 3

130
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; if
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; if
Distance : 3

131
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Math
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Math
Distance : 3

132
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; out
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; out
Distance : 3

133
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; NodeUtil
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; NodeUtil
Distance : 3

134
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; root
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; root
Distance : 3

135
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; MutableTimePeriod
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; MutableTimePeriod
Distance : 3

136
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; a
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; a
Distance : 3

137
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Test
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Test
Distance : 3

138
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Class
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Class
Distance : 3

139
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; notifyListeners
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; notifyListeners
Distance : 3

140
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; c
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; c
Distance : 3

141
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; return;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; return;
Distance : 3

142
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; size
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; size
Distance : 3

143
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; StringBuilder
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; StringBuilder
Distance : 3

144
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; join
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; join
Distance : 3

145
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; boolean
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; boolean
Distance : 3

146
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; *
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; *
Distance : 3

147
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; type
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; type
Distance : 3

148
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; mockingProgress
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; mockingProgress
Distance : 3

149
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; i
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; i
Distance : 3

150
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; wanted
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; wanted
Distance : 3

151
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; !=
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; !=
Distance : 3

152
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; verify
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; verify
Distance : 3

153
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; lines
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; lines
Distance : 3

154
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; ex
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; ex
Distance : 3

155
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; b
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; b
Distance : 3

156
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; LanguageMode.ECMASCRIPT_2015
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; LanguageMode.ECMASCRIPT_2015
Distance : 3

157
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; protected
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; protected
Distance : 3

158
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; get
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; get
Distance : 3

159
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; JSType
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; JSType
Distance : 3

160
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; isEmpty
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; isEmpty
Distance : 3

161
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; char
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; char
Distance : 3

162
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkState
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; checkState
Distance : 3

163
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; int
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; int
Distance : 3

164
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; externs
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; externs
Distance : 3

165
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Invocation
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Invocation
Distance : 3

166
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; /
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; /
Distance : 3

167
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; long
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; long
Distance : 3

168
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertTrue
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; assertTrue
Distance : 3

169
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; for
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; for
Distance : 3

170
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; reportMatcher
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; reportMatcher
Distance : 3

171
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; instant
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; instant
Distance : 3

172
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; TestUtilities
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; TestUtilities
Distance : 3

173
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; js
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; js
Distance : 3

174
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; getMessage
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; getMessage
Distance : 3

175
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; stream
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; stream
Distance : 3

176
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; else
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; else
Distance : 3

177
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; {}
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; {}
Distance : 3

178
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; equals
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; equals
Distance : 3

179
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; StrBuilder
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; StrBuilder
Distance : 3

180
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; d
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; d
Distance : 3

181
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; public
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; public
Distance : 3

182
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; setAcceptedLanguage
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; setAcceptedLanguage
Distance : 3

183
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; +
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; +
Distance : 3

184
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; null
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; null
Distance : 3

185
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; >
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; >
Distance : 3

186
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; new
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; new
Distance : 3

187
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; STRING_CONSTANT
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; STRING_CONSTANT
Distance : 3

188
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; NUMBER_CONSTANT
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; NUMBER_CONSTANT
Distance : 3

189
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; return
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; return
Distance : 3

190
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; n
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; n
Distance : 3

191
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; e
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; e
Distance : 3

192
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; Override
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; Override
Distance : 3

193
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; true
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; true
Distance : 3

194
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; invocations
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; invocations
Distance : 3

195
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; mock
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; mock
Distance : 3

196
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; abs
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; abs
Distance : 3

197
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; matcher
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; matcher
Distance : 3

198
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; static
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; static
Distance : 3

199
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ; getParent
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ; getParent
Distance : 3

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 4

1
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 5

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 5

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 4

4
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 5

5
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 5

6
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 6

7
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 5

8
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 5

9
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

10
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 5

11
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

12
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 5

13
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

14
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

15
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 5

16
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 6

17
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 6

18
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 5

19
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 6

20
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 6

21
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 5

22
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

23
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 6

24
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

25
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 5

26
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 6

27
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 6

28
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

29
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 5

30
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 6

31
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 5

32
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

33
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 6

34
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 6

35
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 6

36
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 6

37
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 5

38
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 5

39
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 7

40
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 6

41
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 6

42
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 6

43
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 6

44
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 6

45
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 6

46
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 6

47
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 5

48
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 5

49
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 7

50
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 6

51
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 6

52
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 6

53
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 6

54
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 6

55
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 6

56
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 7

57
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 5

58
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

59
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 6

60
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 7

61
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 6

62
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 6

63
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

64
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 7

65
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 6

66
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 6

67
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

68
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 7

69
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 6

70
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

71
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 6

72
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 5

73
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 6

74
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 7

75
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 6

76
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 7

77
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 6

78
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 7

79
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

80
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

81
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 6

82
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 6

83
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 7

84
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

85
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 7

86
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

87
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

88
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 6

89
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 6

90
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

91
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

92
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

93
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

94
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

95
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 7

96
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 6

97
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

98
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 7

99
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

100
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

101
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 6

102
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

103
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 6

104
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

105
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 7

106
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

107
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 7

108
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

109
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

110
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

111
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 7

112
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 7

113
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 6

114
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

115
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

116
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

117
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

118
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 6

119
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

120
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

121
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

122
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasDecPoint ; }
Distance : 6

123
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

124
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

125
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasDecPoint && ! i ; }
Distance : 7

126
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! foundDigit ; }
Distance : 7

127
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

128
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

129
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

130
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

131
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return hasExp && ! i ; }
Distance : 6

132
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

133
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

134
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

135
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

136
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

137
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

138
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

139
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

140
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

141
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

142
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

143
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

144
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

145
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! i ; }
Distance : 7

146
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

147
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

148
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 6

149
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

150
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

151
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

152
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

153
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

154
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

155
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! i ; }
Distance : 7

156
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

157
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

158
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

159
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

160
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

161
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

162
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

163
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

164
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

165
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return foundDigit && ! foundDigit ; }
Distance : 7

166
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

167
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

168
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

169
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasDecPoint ; }
Distance : 6

170
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

171
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return i && ! i ; }
Distance : 7

172
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasDecPoint ; }
Distance : 7

173
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

174
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

175
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

176
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

177
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! hasExp ; }
Distance : 7

178
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

179
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

180
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

181
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! hasExp ; }
Distance : 7

182
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

183
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 7

184
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

185
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

186
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 6

187
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 7

188
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

189
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 7

190
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

191
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 7

192
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 7

193
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 7

194
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ foundDigit ] == CHAR_CONS ) { return hasDecPoint && ! foundDigit ; }
Distance : 8

195
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 7

196
Tree	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ foundDigit ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 7

197
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return hasExp && ! foundDigit ; }
Distance : 7

198
Tree	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ hasDecPoint ] == CHAR_CONS chars chars [ hasDecPoint ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 7

199
Tree	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Code	if ( chars [ hasExp ] == CHAR_CONS chars chars [ hasExp ] == CHAR_CONS ) { return i && ! hasDecPoint ; }
Distance : 7

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) externs
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) externs
Distance : 1

1
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) FastMath
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) FastMath
Distance : 1

2
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) reportCodeChange
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) reportCodeChange
Distance : 1

3
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) IllegalArgumentException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) IllegalArgumentException
Distance : 1

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) !=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) !=
Distance : 1

5
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) testSame
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) testSame
Distance : 1

6
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) parent
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) parent
Distance : 1

7
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) createIllegalArgumentException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) createIllegalArgumentException
Distance : 1

8
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) str
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) str
Distance : 1

9
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) LINE_JOINER
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) LINE_JOINER
Distance : 1

10
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) assertThat
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) assertThat
Distance : 1

11
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) invocation
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) invocation
Distance : 1

12
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ,
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ,
Distance : 1

13
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) .
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) .
Distance : 1

14
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) x
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) x
Distance : 1

15
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) assertEquals
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) assertEquals
Distance : 1

16
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) T
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) T
Distance : 1

17
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) []
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) []
Distance : 1

18
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) throws
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) throws
Distance : 1

19
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) returnZero
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) returnZero
Distance : 1

20
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getFirstChild
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getFirstChild
Distance : 1

21
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) UnivariateFunction
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) UnivariateFunction
Distance : 1

22
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) expected
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) expected
Distance : 1

23
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) sb
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) sb
Distance : 1

24
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) name
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) name
Distance : 1

25
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) field
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) field
Distance : 1

26
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) (
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) (
Distance : 1

27
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) =
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) =
Distance : 1

28
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) }
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) }
Distance : 1

29
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ()
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ()
Distance : 1

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) {
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) {
Distance : 1

31
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) new
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) new
Distance : 1

32
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) STRING_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) STRING_CONSTANT
Distance : 1

33
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) NUMBER_CONSTANT
Distance : 1

34
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) return
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) return
Distance : 1

35
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Distance : 1

36
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) assertTrue
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) assertTrue
Distance : 1

37
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) super
Distance : 1

38
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) value
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) value
Distance : 1

39
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) checkState
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) checkState
Distance : 1

40
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) int
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) int
Distance : 1

41
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) i
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) i
Distance : 1

42
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) (
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) (
Distance : 1

43
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <blank>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <blank>
Distance : 1

44
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 1

45
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) )
Distance : 1

46
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) checkArgument
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) checkArgument
Distance : 1

47
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) t
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) t
Distance : 1

48
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <s>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <s>
Distance : 1

49
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) !
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) !
Distance : 1

50
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) d
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) d
Distance : 1

51
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) index
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) index
Distance : 1

52
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) :
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) :
Distance : 1

53
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) fail
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) fail
Distance : 1

54
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) List
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) List
Distance : 1

55
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Args
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Args
Distance : 1

56
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) try
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) try
Distance : 1

57
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getParent
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getParent
Distance : 1

58
Tree	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

59
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

60
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Distance : 1

61
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

62
Tree	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Code	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

63
Tree	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Code	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Distance : 2

64
Tree	cal2 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal2 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

65
Tree	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR )
Code	cal2 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR )
Distance : 3

66
Tree	cal1 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

67
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Distance : 2

68
Tree	cal2 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Code	cal2 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR_OF_DAY )
Distance : 3

69
Tree	cal2 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Code	cal2 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Distance : 3

70
Tree	cal1 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR )
Distance : 3

71
Tree	cal2 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR )
Code	cal2 . get ( Calendar.HOUR ) == cal1 . get ( Calendar.HOUR )
Distance : 4

72
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) node
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) node
Distance : 1

73
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isBlock
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isBlock
Distance : 1

74
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) setUp
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) setUp
Distance : 1

75
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) invocations
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) invocations
Distance : 1

76
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) equals
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) equals
Distance : 1

77
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) for
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) for
Distance : 1

78
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Invocation
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Invocation
Distance : 1

79
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) js
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) js
Distance : 1

80
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) TestUtilities
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) TestUtilities
Distance : 1

81
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) StrBuilder
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) StrBuilder
Distance : 1

82
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) reportMatcher
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) reportMatcher
Distance : 1

83
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) StringBuilder
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) StringBuilder
Distance : 1

84
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) size
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) size
Distance : 1

85
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) scope
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) scope
Distance : 1

86
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) paint
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) paint
Distance : 1

87
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) append
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) append
Distance : 1

88
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) result
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) result
Distance : 1

89
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) nullNotPermitted
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) nullNotPermitted
Distance : 1

90
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) m
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) m
Distance : 1

91
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) @
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) @
Distance : 1

92
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) false
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) false
Distance : 1

93
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) double
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) double
Distance : 1

94
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) values
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) values
Distance : 1

95
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) protected
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) protected
Distance : 1

96
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) out
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) out
Distance : 1

97
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) test
Distance : 1

98
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) return;
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) return;
Distance : 1

99
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 0

100
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) get
Distance : 1

101
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) >
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) >
Distance : 1

102
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) public
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) public
Distance : 1

103
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) final
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) final
Distance : 1

104
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) this
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) this
Distance : 1

105
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <
Distance : 1

106
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) if
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) if
Distance : 1

107
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ArrayList
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ArrayList
Distance : 1

108
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) fireChangeEvent
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) fireChangeEvent
Distance : 1

109
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getInstance
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getInstance
Distance : 1

110
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) join
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) join
Distance : 1

111
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) JSType
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) JSType
Distance : 1

112
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal1 . get ( Calendar.HOUR )
Distance : 2

113
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ]
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ]
Distance : 1

114
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) length
Distance : 1

115
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) v
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) v
Distance : 1

116
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Integer
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Integer
Distance : 1

117
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) verify
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) verify
Distance : 1

118
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) null
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) null
Distance : 1

119
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) +
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) +
Distance : 1

120
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) static
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) static
Distance : 1

121
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) setAcceptedLanguage
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) setAcceptedLanguage
Distance : 1

122
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) notifyListeners
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) notifyListeners
Distance : 1

123
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) c
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) c
Distance : 1

124
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) {}
Distance : 1

125
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) mock
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) mock
Distance : 1

126
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) true
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) true
Distance : 1

127
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) mode
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) mode
Distance : 1

128
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) *
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) *
Distance : 1

129
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) -
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) -
Distance : 1

130
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) lines
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) lines
Distance : 1

131
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) boolean
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) boolean
Distance : 1

132
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isEmpty
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isEmpty
Distance : 1

133
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) char
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) char
Distance : 1

134
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) instant
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) instant
Distance : 1

135
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) else
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) else
Distance : 1

136
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) stream
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) stream
Distance : 1

137
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getMessage
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) getMessage
Distance : 1

138
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) abs
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) abs
Distance : 1

139
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) matcher
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) matcher
Distance : 1

140
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) serialised
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) serialised
Distance : 1

141
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Exception
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Exception
Distance : 1

142
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Preconditions
Distance : 1

143
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) compiler
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) compiler
Distance : 1

144
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ParamChecks
Distance : 1

145
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) array
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) array
Distance : 1

146
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <>
Distance : 1

147
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) contains
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) contains
Distance : 1

148
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) chrono
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) chrono
Distance : 1

149
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Node
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Node
Distance : 1

150
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) traverseEs6
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) traverseEs6
Distance : 1

151
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) a
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) a
Distance : 1

152
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) LanguageMode.ECMASCRIPT_2015
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) LanguageMode.ECMASCRIPT_2015
Distance : 1

153
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) MutableTimePeriod
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) MutableTimePeriod
Distance : 1

154
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) b
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) b
Distance : 1

155
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) s
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) s
Distance : 1

156
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isNormalBlock
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) isNormalBlock
Distance : 1

157
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) obj
Distance : 1

158
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) <=
Distance : 1

159
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Double
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Double
Distance : 1

160
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) clone
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) clone
Distance : 1

161
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) f
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) f
Distance : 1

162
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Override
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Override
Distance : 1

163
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) stroke
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) stroke
Distance : 1

164
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Object
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Object
Distance : 1

165
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) String
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) String
Distance : 1

166
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) MathRuntimeException
Distance : 1

167
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) n
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) n
Distance : 1

168
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) throw
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) throw
Distance : 1

169
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) catch
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) catch
Distance : 1

170
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) void
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) void
Distance : 1

171
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ==
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ==
Distance : 1

172
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Assert
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Assert
Distance : 1

173
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ?
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ?
Distance : 1

174
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) e
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) e
Distance : 1

175
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Fraction
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Fraction
Distance : 1

176
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) /
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) /
Distance : 1

177
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) long
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) long
Distance : 1

178
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) TestUtils
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) TestUtils
Distance : 1

179
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) [
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) [
Distance : 1

180
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) sqrt
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) sqrt
Distance : 1

181
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) PeriodType
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) PeriodType
Distance : 1

182
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) class
Distance : 1

183
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) checkNotNull
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) checkNotNull
Distance : 1

184
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) type
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) type
Distance : 1

185
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Math
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Math
Distance : 1

186
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) root
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) root
Distance : 1

187
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) NodeUtil
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) NodeUtil
Distance : 1

188
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) wanted
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) wanted
Distance : 1

189
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) data
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) data
Distance : 1

190
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) add
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) add
Distance : 1

191
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) source
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) source
Distance : 1

192
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ex
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) ex
Distance : 1

193
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) toString
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) toString
Distance : 1

194
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) options
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) options
Distance : 1

195
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) p
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) p
Distance : 1

196
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Test
Distance : 1

197
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) Class
Distance : 1

198
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) NodeTraversal
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) NodeTraversal
Distance : 1

199
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) mockingProgress
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY ) mockingProgress
Distance : 1

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 0

1
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

2
Tree	{ pos += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 1

3
Tree	{ pos += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

4
Tree	{ pos += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 1

5
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 1

6
Tree	{ pos += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

7
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 1

8
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

9
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

10
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 2

11
Tree	{ pos += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

12
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 1

13
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 1

14
Tree	{ pt += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 2

15
Tree	{ input += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

16
Tree	{ Character += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

17
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

18
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 1

19
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

20
Tree	{ pos += Character . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

21
Tree	{ pos += input . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

22
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 1

23
Tree	{ pos += Character . charCount ( Character . charCount ( input , input ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , input ) ) ; }
Distance : 2

24
Tree	{ pos += Character . charCount ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( input , pt ) ) ; }
Distance : 1

25
Tree	{ Character += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ Character += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

26
Tree	{ pos += Character . charCount ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( input , pt ) ) ; }
Distance : 1

27
Tree	{ pos += pos . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 2

28
Tree	{ pt += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

29
Tree	{ pt += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

30
Tree	{ pos += Character . charCount ( Character . charCount ( pt , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( pt , pt ) ) ; }
Distance : 2

31
Tree	{ pos += Character . charCount ( input . charCount ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( input . charCount ( input , pt ) ) ; }
Distance : 2

32
Tree	{ pos += pt . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos += pt . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

33
Tree	{ pt += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

34
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

35
Tree	{ pos += input . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += input . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 2

36
Tree	{ pt += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

37
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

38
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

39
Tree	{ pos += Character . charCount ( Character . charCount ( Character , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( Character , pt ) ) ; }
Distance : 2

40
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

41
Tree	{ pt += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pt += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 3

42
Tree	{ pt += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

43
Tree	{ input += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ input += Character . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

44
Tree	{ pos += pt . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += pt . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 2

45
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

46
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

47
Tree	{ pt += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

48
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

49
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 2

50
Tree	{ pos += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

51
Tree	{ pos += pos . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += pos . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

52
Tree	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 2

53
Tree	{ pos += Character . codePointAt ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( pos . codePointAt ( input , pt ) ) ; }
Distance : 2

54
Tree	{ pos += Character . charCount ( input . codePointAt ( pt , pt ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( pt , pt ) ) ; }
Distance : 2

55
Tree	{ pos += pos . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

56
Tree	{ pos += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

57
Tree	{ pt += pos . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += pos . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 3

58
Tree	{ input += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ input += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 2

59
Tree	{ pos += input . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

60
Tree	{ pt += Character . charCount ( input . codePointAt ( Character , pt ) ) ; }
Code	{ pt += Character . charCount ( input . codePointAt ( Character , pt ) ) ; }
Distance : 3

61
Tree	{ pt += Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 2

62
Tree	{ pos += Character . codePointAt ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( pt . codePointAt ( input , pt ) ) ; }
Distance : 2

63
Tree	{ Character += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ Character += Character . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 2

64
Tree	{ pos += pos . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += pos . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 3

65
Tree	{ pos += Character . charCount ( Character . charCount ( pos , pt ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( pos , pt ) ) ; }
Distance : 2

66
Tree	{ pos += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 2

67
Tree	{ pos += Character . charCount ( input . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( Character , pt ) ) ; }
Distance : 2

68
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

69
Tree	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 2

70
Tree	{ pt += Character . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

71
Tree	{ pos += Character . codePointAt ( Character . charCount ( pt , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( pt , pt ) ) ; }
Distance : 3

72
Tree	{ pos += pos . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

73
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

74
Tree	{ pt += Character . charCount ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( pos . codePointAt ( input , pt ) ) ; }
Distance : 2

75
Tree	{ pos += input . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

76
Tree	{ pos += Character . charCount ( pos . charCount ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( pos . charCount ( input , pt ) ) ; }
Distance : 2

77
Tree	{ pos += pt . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

78
Tree	{ pt += input . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += input . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 3

79
Tree	{ pos += pos . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

80
Tree	{ pos += pt . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += pt . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

81
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

82
Tree	{ pos += input . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += input . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 3

83
Tree	{ pos += Character . charCount ( Character . codePointAt ( pt , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pt , input ) ) ; }
Distance : 2

84
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 3

85
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

86
Tree	{ pos += Character . charCount ( input . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , input ) ) ; }
Distance : 2

87
Tree	{ pt += pos . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pt += pos . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 3

88
Tree	{ pt += Character . charCount ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( pt . codePointAt ( input , pt ) ) ; }
Distance : 2

89
Tree	{ pos += Character . codePointAt ( Character . charCount ( Character , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( Character , pt ) ) ; }
Distance : 3

90
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 3

91
Tree	{ pos += Character . charCount ( Character . codePointAt ( pt , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pt , Character ) ) ; }
Distance : 2

92
Tree	{ pos += Character . charCount ( pt . charCount ( input , pt ) ) ; }
Code	{ pos += Character . charCount ( pt . charCount ( input , pt ) ) ; }
Distance : 2

93
Tree	{ pos += Character . charCount ( input . codePointAt ( input , Character ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( input , Character ) ) ; }
Distance : 2

94
Tree	{ pos += input . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

95
Tree	{ pos += pt . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

96
Tree	{ pos += pos . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

97
Tree	{ pos += Character . codePointAt ( input . charCount ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( input . charCount ( input , pt ) ) ; }
Distance : 3

98
Tree	{ input += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ input += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

99
Tree	{ pos += pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

100
Tree	{ pt += Character . charCount ( Character . charCount ( pt , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( pt , pt ) ) ; }
Distance : 3

101
Tree	{ pt += pt . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt += pt . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 3

102
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , input ) ) ; }
Distance : 2

103
Tree	{ pos += input . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

104
Tree	{ Character += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ Character += pos . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

105
Tree	{ pos += pt . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pos += pt . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 3

106
Tree	{ pos += pos . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 2

107
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Distance : 3

108
Tree	{ input += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ input += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

109
Tree	{ input += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

110
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , Character ) ) ; }
Distance : 2

111
Tree	{ pt += input . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pt += input . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 3

112
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , input ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , input ) ) ; }
Distance : 3

113
Tree	{ Character += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 2

114
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Distance : 3

115
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

116
Tree	{ pt += Character . charCount ( Character . charCount ( Character , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( Character , pt ) ) ; }
Distance : 3

117
Tree	{ pos += pos . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += pos . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

118
Tree	{ Character += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ Character += Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

119
Tree	{ pos += Character . codePointAt ( Character . charCount ( input , Character ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( input , Character ) ) ; }
Distance : 3

120
Tree	{ pt += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

121
Tree	{ pos += pt . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

122
Tree	{ pos += Character . charCount ( input . codePointAt ( pos , pt ) ) ; }
Code	{ pos += Character . charCount ( input . codePointAt ( pos , pt ) ) ; }
Distance : 2

123
Tree	{ pos += pos . charCount ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pos += pos . charCount ( pos . codePointAt ( input , pt ) ) ; }
Distance : 2

124
Tree	{ input += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ input += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

125
Tree	{ pos += pt . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

126
Tree	{ Character += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ Character += input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

127
Tree	{ input += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

128
Tree	{ pos += Character . codePointAt ( input . codePointAt ( pt , pt ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( pt , pt ) ) ; }
Distance : 3

129
Tree	{ input += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

130
Tree	{ pos += input . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos += input . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 2

131
Tree	{ pos += Character . charCount ( pos . codePointAt ( pt , pt ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( pt , pt ) ) ; }
Distance : 2

132
Tree	{ Character += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 2

133
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 3

134
Tree	{ pt += pt . charCount ( Character . charCount ( input , pt ) ) ; }
Code	{ pt += pt . charCount ( Character . charCount ( input , pt ) ) ; }
Distance : 3

135
Tree	{ Character += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

136
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

137
Tree	{ pos += pos . charCount ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pos += pos . charCount ( pt . codePointAt ( input , pt ) ) ; }
Distance : 2

138
Tree	{ input += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ input += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 3

139
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 2

140
Tree	{ pos += input . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += input . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

141
Tree	{ pt += Character . codePointAt ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pt += Character . codePointAt ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 3

142
Tree	{ pt += Character . charCount ( Character . charCount ( input , input ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( input , input ) ) ; }
Distance : 3

143
Tree	{ pos += input . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

144
Tree	{ pt += pos . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pt += pos . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

145
Tree	{ Character += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ Character += Character . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 3

146
Tree	{ pt += pos . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pt += pos . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

147
Tree	{ pos += input . charCount ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . charCount ( pos . codePointAt ( input , pt ) ) ; }
Distance : 2

148
Tree	{ pt += Character . charCount ( input . charCount ( input , pt ) ) ; }
Code	{ pt += Character . charCount ( input . charCount ( input , pt ) ) ; }
Distance : 3

149
Tree	{ pos += Character . codePointAt ( Character . charCount ( pos , pt ) ) ; }
Code	{ pos += Character . codePointAt ( Character . charCount ( pos , pt ) ) ; }
Distance : 3

150
Tree	{ input += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ input += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

151
Tree	{ pos += Character . codePointAt ( input . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( Character , pt ) ) ; }
Distance : 3

152
Tree	{ pos += pos . charCount ( Character . charCount ( pt , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . charCount ( pt , pt ) ) ; }
Distance : 3

153
Tree	{ pt += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 3

154
Tree	{ pos += Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Distance : 3

155
Tree	{ pos += Character . charCount ( pos . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( Character , pt ) ) ; }
Distance : 2

156
Tree	{ Character += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ Character += pt . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

157
Tree	{ input += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

158
Tree	{ pos += pos . charCount ( input . charCount ( input , pt ) ) ; }
Code	{ pos += pos . charCount ( input . charCount ( input , pt ) ) ; }
Distance : 3

159
Tree	{ pos += Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Distance : 2

160
Tree	{ pos += pt . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos += pt . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 2

161
Tree	{ pt += Character . codePointAt ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . codePointAt ( pos . codePointAt ( input , pt ) ) ; }
Distance : 3

162
Tree	{ pt += Character . charCount ( input . codePointAt ( pt , pt ) ) ; }
Code	{ pt += Character . charCount ( input . codePointAt ( pt , pt ) ) ; }
Distance : 3

163
Tree	{ Character += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 2

164
Tree	{ pos += input . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos += input . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 3

165
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Distance : 3

166
Tree	{ input += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ input += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

167
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , input ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , input ) ) ; }
Distance : 2

168
Tree	{ pos += input . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += input . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

169
Tree	{ pos += Character . codePointAt ( pos . charCount ( input , pt ) ) ; }
Code	{ pos += Character . codePointAt ( pos . charCount ( input , pt ) ) ; }
Distance : 3

170
Tree	{ pos += input . charCount ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . charCount ( pt . codePointAt ( input , pt ) ) ; }
Distance : 2

171
Tree	{ pos += pt . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos += pt . codePointAt ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

172
Tree	{ pos += Character . charCount ( pt . codePointAt ( pt , pt ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( pt , pt ) ) ; }
Distance : 2

173
Tree	{ pos += Character . charCount ( input . charCount ( pt , pt ) ) ; }
Code	{ pos += Character . charCount ( input . charCount ( pt , pt ) ) ; }
Distance : 3

174
Tree	{ pt += pos . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pt += pos . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 3

175
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 3

176
Tree	{ Character += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ Character += Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 2

177
Tree	{ pos += pos . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pos += pos . codePointAt ( Character . codePointAt ( input , Character ) ) ; }
Distance : 3

178
Tree	{ pos += pt . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += pt . codePointAt ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

179
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

180
Tree	{ pos += Character . charCount ( pt . codePointAt ( Character , pt ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( Character , pt ) ) ; }
Distance : 2

181
Tree	{ pos += Character . charCount ( Character . codePointAt ( pos , Character ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( pos , Character ) ) ; }
Distance : 2

182
Tree	{ pos += pos . charCount ( Character . charCount ( Character , pt ) ) ; }
Code	{ pos += pos . charCount ( Character . charCount ( Character , pt ) ) ; }
Distance : 3

183
Tree	{ pt += input . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pt += input . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

184
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pt , input ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pt , input ) ) ; }
Distance : 3

185
Tree	{ pos += pt . charCount ( pos . codePointAt ( input , pt ) ) ; }
Code	{ pos += pt . charCount ( pos . codePointAt ( input , pt ) ) ; }
Distance : 2

186
Tree	{ pos += input . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos += input . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

187
Tree	{ pos += Character . charCount ( pt . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( pt . codePointAt ( input , pos ) ) ; }
Distance : 2

188
Tree	{ pos += pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

189
Tree	{ pos += Character . codePointAt ( input . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . codePointAt ( input . codePointAt ( input , input ) ) ; }
Distance : 3

190
Tree	{ pos += input . charCount ( Character . charCount ( pt , pt ) ) ; }
Code	{ pos += input . charCount ( Character . charCount ( pt , pt ) ) ; }
Distance : 3

191
Tree	{ pt += Character . codePointAt ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pt += Character . codePointAt ( pt . codePointAt ( input , pt ) ) ; }
Distance : 3

192
Tree	{ pt += pos . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pt += pos . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 4

193
Tree	{ pt += Character . charCount ( Character . charCount ( pos , pt ) ) ; }
Code	{ pt += Character . charCount ( Character . charCount ( pos , pt ) ) ; }
Distance : 3

194
Tree	{ pos += Character . charCount ( pos . codePointAt ( input , input ) ) ; }
Code	{ pos += Character . charCount ( pos . codePointAt ( input , input ) ) ; }
Distance : 2

195
Tree	{ pos += input . charCount ( input . charCount ( input , pt ) ) ; }
Code	{ pos += input . charCount ( input . charCount ( input , pt ) ) ; }
Distance : 3

196
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( pt , Character ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( pt , Character ) ) ; }
Distance : 3

197
Tree	{ pt += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

198
Tree	{ pt += input . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pt += input . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

199
Tree	{ pt += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

1
Tree	final CharSequence result = lookupMap . get ( lookupMap ) ;
Code	final CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 4

2
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

3
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

4
Tree	public CharSequence result = lookupMap . get ( subSeq ) ;
Code	public CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

5
Tree	static CharSequence result = lookupMap . get ( subSeq ) ;
Code	static CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

6
Tree	final CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	final CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 4

7
Tree	final CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	final CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 4

8
Tree	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

9
Tree	final CharSequence result = subSeq . get ( lookupMap ) ;
Code	final CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 5

10
Tree	final CharSequence result = lookupMap . toString ( subSeq ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 4

11
Tree	private CharSequence result = lookupMap . get ( subSeq ) ;
Code	private CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

12
Tree	final CharSequence result = subSeq . get ( result ) ;
Code	final CharSequence result = subSeq . get ( result ) ;
Distance : 5

13
Tree	protected CharSequence result = lookupMap . get ( subSeq ) ;
Code	protected CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

14
Tree	synchronized CharSequence result = lookupMap . get ( subSeq ) ;
Code	synchronized CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

15
Tree	public CharSequence result = subSeq . get ( subSeq ) ;
Code	public CharSequence result = subSeq . get ( subSeq ) ;
Distance : 5

16
Tree	final CharSequence result = result . get ( lookupMap ) ;
Code	final CharSequence result = result . get ( lookupMap ) ;
Distance : 5

17
Tree	public CharSequence result = lookupMap . get ( lookupMap ) ;
Code	public CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 5

18
Tree	final CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	final CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 5

19
Tree	static CharSequence result = subSeq . get ( subSeq ) ;
Code	static CharSequence result = subSeq . get ( subSeq ) ;
Distance : 5

20
Tree	final CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	final CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 5

21
Tree	final CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	final CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 5

22
Tree	final CharSequence result = subSeq . get ( subSeq ) ;
Code	final CharSequence result = subSeq . get ( subSeq ) ;
Distance : 4

23
Tree	static CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	static CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 5

24
Tree	abstract CharSequence result = subSeq . get ( subSeq ) ;
Code	abstract CharSequence result = subSeq . get ( subSeq ) ;
Distance : 5

25
Tree	synchronized CharSequence result = subSeq . get ( subSeq ) ;
Code	synchronized CharSequence result = subSeq . get ( subSeq ) ;
Distance : 5

26
Tree	final CharSequence result = subSeq . toString ( subSeq ) ;
Code	final CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 5

27
Tree	final CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	final CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 5

28
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

29
Tree	public CharSequence result = lookupMap . get ( result ) ;
Code	public CharSequence result = lookupMap . get ( result ) ;
Distance : 5

30
Tree	static CharSequence result = lookupMap . get ( result ) ;
Code	static CharSequence result = lookupMap . get ( result ) ;
Distance : 5

31
Tree	final CharSequence subSeq = lookupMap . get ( result ) ;
Code	final CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 5

32
Tree	final CharSequence lookupMap = lookupMap . get ( result ) ;
Code	final CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 5

33
Tree	abstract CharSequence result = lookupMap . get ( result ) ;
Code	abstract CharSequence result = lookupMap . get ( result ) ;
Distance : 5

34
Tree	private CharSequence result = subSeq . get ( subSeq ) ;
Code	private CharSequence result = subSeq . get ( subSeq ) ;
Distance : 5

35
Tree	public CharSequence result = result . get ( subSeq ) ;
Code	public CharSequence result = result . get ( subSeq ) ;
Distance : 5

36
Tree	private CharSequence result = lookupMap . get ( lookupMap ) ;
Code	private CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 5

37
Tree	protected CharSequence result = subSeq . get ( subSeq ) ;
Code	protected CharSequence result = subSeq . get ( subSeq ) ;
Distance : 5

38
Tree	public CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	public CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 5

39
Tree	final CharSequence subSeq = result . get ( subSeq ) ;
Code	final CharSequence subSeq = result . get ( subSeq ) ;
Distance : 5

40
Tree	static CharSequence result = result . get ( subSeq ) ;
Code	static CharSequence result = result . get ( subSeq ) ;
Distance : 5

41
Tree	final CharSequence lookupMap = result . get ( subSeq ) ;
Code	final CharSequence lookupMap = result . get ( subSeq ) ;
Distance : 5

42
Tree	protected CharSequence result = lookupMap . get ( lookupMap ) ;
Code	protected CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 5

43
Tree	abstract CharSequence result = result . get ( subSeq ) ;
Code	abstract CharSequence result = result . get ( subSeq ) ;
Distance : 5

44
Tree	public CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	public CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 5

45
Tree	final CharSequence result = lookupMap . toString ( result ) ;
Code	final CharSequence result = lookupMap . toString ( result ) ;
Distance : 5

46
Tree	final CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	final CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 5

47
Tree	static CharSequence result = lookupMap . get ( lookupMap ) ;
Code	static CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 5

48
Tree	abstract CharSequence result = lookupMap . get ( lookupMap ) ;
Code	abstract CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 5

49
Tree	abstract CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 5

50
Tree	final CharSequence lookupMap = subSeq . get ( result ) ;
Code	final CharSequence lookupMap = subSeq . get ( result ) ;
Distance : 6

51
Tree	abstract CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	abstract CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 5

52
Tree	public CharSequence result = subSeq . get ( lookupMap ) ;
Code	public CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 6

53
Tree	final CharSequence result = result . toString ( subSeq ) ;
Code	final CharSequence result = result . toString ( subSeq ) ;
Distance : 5

54
Tree	public CharSequence result = lookupMap . toString ( subSeq ) ;
Code	public CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

55
Tree	final CharSequence subSeq = subSeq . get ( lookupMap ) ;
Code	final CharSequence subSeq = subSeq . get ( lookupMap ) ;
Distance : 6

56
Tree	static CharSequence result = subSeq . get ( lookupMap ) ;
Code	static CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 6

57
Tree	static CharSequence result = lookupMap . toString ( subSeq ) ;
Code	static CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

58
Tree	private CharSequence result = lookupMap . get ( result ) ;
Code	private CharSequence result = lookupMap . get ( result ) ;
Distance : 5

59
Tree	final CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Code	final CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Distance : 6

60
Tree	final CharSequence lookupMap = subSeq . toString ( lookupMap ) ;
Code	final CharSequence lookupMap = subSeq . toString ( lookupMap ) ;
Distance : 7

61
Tree	abstract CharSequence result = subSeq . get ( lookupMap ) ;
Code	abstract CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 6

62
Tree	final CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Code	final CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Distance : 5

63
Tree	final CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Code	final CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Distance : 5

64
Tree	protected CharSequence result = lookupMap . get ( result ) ;
Code	protected CharSequence result = lookupMap . get ( result ) ;
Distance : 5

65
Tree	private CharSequence result = result . get ( subSeq ) ;
Code	private CharSequence result = result . get ( subSeq ) ;
Distance : 5

66
Tree	synchronized CharSequence result = lookupMap . get ( result ) ;
Code	synchronized CharSequence result = lookupMap . get ( result ) ;
Distance : 5

67
Tree	final CharSequence result = subSeq . toString ( lookupMap ) ;
Code	final CharSequence result = subSeq . toString ( lookupMap ) ;
Distance : 6

68
Tree	public CharSequence result = subSeq . get ( result ) ;
Code	public CharSequence result = subSeq . get ( result ) ;
Distance : 6

69
Tree	private CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	private CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 5

70
Tree	protected CharSequence result = result . get ( subSeq ) ;
Code	protected CharSequence result = result . get ( subSeq ) ;
Distance : 5

71
Tree	private CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	private CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 5

72
Tree	synchronized CharSequence result = lookupMap . get ( lookupMap ) ;
Code	synchronized CharSequence result = lookupMap . get ( lookupMap ) ;
Distance : 5

73
Tree	static CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	static CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 5

74
Tree	static CharSequence result = subSeq . get ( result ) ;
Code	static CharSequence result = subSeq . get ( result ) ;
Distance : 6

75
Tree	protected CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	protected CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 5

76
Tree	abstract CharSequence result = subSeq . get ( result ) ;
Code	abstract CharSequence result = subSeq . get ( result ) ;
Distance : 6

77
Tree	protected CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	protected CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 5

78
Tree	private CharSequence result = subSeq . get ( lookupMap ) ;
Code	private CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 6

79
Tree	public CharSequence result = result . get ( lookupMap ) ;
Code	public CharSequence result = result . get ( lookupMap ) ;
Distance : 6

80
Tree	synchronized CharSequence subSeq = lookupMap . get ( subSeq ) ;
Code	synchronized CharSequence subSeq = lookupMap . get ( subSeq ) ;
Distance : 5

81
Tree	private CharSequence result = lookupMap . toString ( subSeq ) ;
Code	private CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

82
Tree	synchronized CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Code	synchronized CharSequence lookupMap = lookupMap . get ( subSeq ) ;
Distance : 5

83
Tree	public CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	public CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 6

84
Tree	protected CharSequence result = subSeq . get ( lookupMap ) ;
Code	protected CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 6

85
Tree	public CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	public CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 6

86
Tree	protected CharSequence result = lookupMap . toString ( subSeq ) ;
Code	protected CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

87
Tree	final CharSequence subSeq = result . get ( lookupMap ) ;
Code	final CharSequence subSeq = result . get ( lookupMap ) ;
Distance : 6

88
Tree	public CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	public CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 6

89
Tree	final CharSequence result = subSeq . toString ( result ) ;
Code	final CharSequence result = subSeq . toString ( result ) ;
Distance : 6

90
Tree	static CharSequence result = result . get ( lookupMap ) ;
Code	static CharSequence result = result . get ( lookupMap ) ;
Distance : 6

91
Tree	final CharSequence lookupMap = result . get ( lookupMap ) ;
Code	final CharSequence lookupMap = result . get ( lookupMap ) ;
Distance : 6

92
Tree	static CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	static CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 6

93
Tree	abstract CharSequence result = result . get ( lookupMap ) ;
Code	abstract CharSequence result = result . get ( lookupMap ) ;
Distance : 6

94
Tree	public CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	public CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 6

95
Tree	abstract CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	abstract CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 6

96
Tree	synchronized CharSequence result = result . get ( subSeq ) ;
Code	synchronized CharSequence result = result . get ( subSeq ) ;
Distance : 5

97
Tree	final CharSequence subSeq = subSeq . get ( result ) ;
Code	final CharSequence subSeq = subSeq . get ( result ) ;
Distance : 6

98
Tree	static CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	static CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 6

99
Tree	synchronized CharSequence result = subSeq . get ( lookupMap ) ;
Code	synchronized CharSequence result = subSeq . get ( lookupMap ) ;
Distance : 6

100
Tree	static CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	static CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 6

101
Tree	abstract CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	abstract CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 6

102
Tree	static CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	static CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 6

103
Tree	abstract CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	abstract CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 6

104
Tree	abstract CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	abstract CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 6

105
Tree	public CharSequence result = subSeq . toString ( subSeq ) ;
Code	public CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 6

106
Tree	final CharSequence result = result . toString ( lookupMap ) ;
Code	final CharSequence result = result . toString ( lookupMap ) ;
Distance : 6

107
Tree	public CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	public CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 6

108
Tree	public CharSequence result = result . get ( result ) ;
Code	public CharSequence result = result . get ( result ) ;
Distance : 6

109
Tree	private CharSequence result = subSeq . get ( result ) ;
Code	private CharSequence result = subSeq . get ( result ) ;
Distance : 6

110
Tree	static CharSequence result = subSeq . toString ( subSeq ) ;
Code	static CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 6

111
Tree	abstract CharSequence result = subSeq . toString ( subSeq ) ;
Code	abstract CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 6

112
Tree	static CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	static CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 6

113
Tree	final CharSequence subSeq = subSeq . toString ( subSeq ) ;
Code	final CharSequence subSeq = subSeq . toString ( subSeq ) ;
Distance : 6

114
Tree	final CharSequence lookupMap = subSeq . toString ( subSeq ) ;
Code	final CharSequence lookupMap = subSeq . toString ( subSeq ) ;
Distance : 6

115
Tree	protected CharSequence result = subSeq . get ( result ) ;
Code	protected CharSequence result = subSeq . get ( result ) ;
Distance : 6

116
Tree	abstract CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	abstract CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 6

117
Tree	final CharSequence subSeq = lookupMap . toString ( lookupMap ) ;
Code	final CharSequence subSeq = lookupMap . toString ( lookupMap ) ;
Distance : 6

118
Tree	public CharSequence subSeq = lookupMap . get ( result ) ;
Code	public CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 6

119
Tree	static CharSequence result = result . get ( result ) ;
Code	static CharSequence result = result . get ( result ) ;
Distance : 6

120
Tree	final CharSequence subSeq = result . get ( result ) ;
Code	final CharSequence subSeq = result . get ( result ) ;
Distance : 6

121
Tree	final CharSequence lookupMap = lookupMap . toString ( lookupMap ) ;
Code	final CharSequence lookupMap = lookupMap . toString ( lookupMap ) ;
Distance : 6

122
Tree	final CharSequence lookupMap = result . get ( result ) ;
Code	final CharSequence lookupMap = result . get ( result ) ;
Distance : 6

123
Tree	abstract CharSequence result = result . get ( result ) ;
Code	abstract CharSequence result = result . get ( result ) ;
Distance : 6

124
Tree	public CharSequence lookupMap = lookupMap . get ( result ) ;
Code	public CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 6

125
Tree	synchronized CharSequence result = subSeq . get ( result ) ;
Code	synchronized CharSequence result = subSeq . get ( result ) ;
Distance : 6

126
Tree	static CharSequence subSeq = lookupMap . get ( result ) ;
Code	static CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 6

127
Tree	private CharSequence result = result . get ( lookupMap ) ;
Code	private CharSequence result = result . get ( lookupMap ) ;
Distance : 6

128
Tree	static CharSequence lookupMap = lookupMap . get ( result ) ;
Code	static CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 6

129
Tree	abstract CharSequence subSeq = lookupMap . get ( result ) ;
Code	abstract CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 6

130
Tree	private CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	private CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 6

131
Tree	abstract CharSequence lookupMap = lookupMap . get ( result ) ;
Code	abstract CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 6

132
Tree	public CharSequence subSeq = result . get ( subSeq ) ;
Code	public CharSequence subSeq = result . get ( subSeq ) ;
Distance : 6

133
Tree	private CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	private CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 6

134
Tree	private CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	private CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 6

135
Tree	protected CharSequence result = result . get ( lookupMap ) ;
Code	protected CharSequence result = result . get ( lookupMap ) ;
Distance : 6

136
Tree	public CharSequence lookupMap = result . get ( subSeq ) ;
Code	public CharSequence lookupMap = result . get ( subSeq ) ;
Distance : 6

137
Tree	public CharSequence result = lookupMap . toString ( result ) ;
Code	public CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

138
Tree	final CharSequence result = result . toString ( result ) ;
Code	final CharSequence result = result . toString ( result ) ;
Distance : 6

139
Tree	protected CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	protected CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 6

140
Tree	private CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	private CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 6

141
Tree	static CharSequence subSeq = result . get ( subSeq ) ;
Code	static CharSequence subSeq = result . get ( subSeq ) ;
Distance : 6

142
Tree	protected CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	protected CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 6

143
Tree	static CharSequence result = lookupMap . toString ( result ) ;
Code	static CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

144
Tree	protected CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	protected CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 6

145
Tree	abstract CharSequence subSeq = result . get ( subSeq ) ;
Code	abstract CharSequence subSeq = result . get ( subSeq ) ;
Distance : 6

146
Tree	static CharSequence lookupMap = result . get ( subSeq ) ;
Code	static CharSequence lookupMap = result . get ( subSeq ) ;
Distance : 6

147
Tree	synchronized CharSequence result = result . get ( lookupMap ) ;
Code	synchronized CharSequence result = result . get ( lookupMap ) ;
Distance : 6

148
Tree	synchronized CharSequence result = lookupMap . toString ( subSeq ) ;
Code	synchronized CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

149
Tree	abstract CharSequence result = lookupMap . toString ( result ) ;
Code	abstract CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

150
Tree	abstract CharSequence lookupMap = result . get ( subSeq ) ;
Code	abstract CharSequence lookupMap = result . get ( subSeq ) ;
Distance : 6

151
Tree	private CharSequence result = subSeq . toString ( subSeq ) ;
Code	private CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 6

152
Tree	final CharSequence subSeq = lookupMap . toString ( result ) ;
Code	final CharSequence subSeq = lookupMap . toString ( result ) ;
Distance : 6

153
Tree	synchronized CharSequence lookupMap = subSeq . get ( subSeq ) ;
Code	synchronized CharSequence lookupMap = subSeq . get ( subSeq ) ;
Distance : 6

154
Tree	final CharSequence lookupMap = lookupMap . toString ( result ) ;
Code	final CharSequence lookupMap = lookupMap . toString ( result ) ;
Distance : 6

155
Tree	public CharSequence result = result . toString ( subSeq ) ;
Code	public CharSequence result = result . toString ( subSeq ) ;
Distance : 6

156
Tree	synchronized CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Code	synchronized CharSequence subSeq = lookupMap . get ( lookupMap ) ;
Distance : 6

157
Tree	private CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	private CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 6

158
Tree	synchronized CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	synchronized CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 6

159
Tree	protected CharSequence result = subSeq . toString ( subSeq ) ;
Code	protected CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 6

160
Tree	public CharSequence subSeq = subSeq . get ( lookupMap ) ;
Code	public CharSequence subSeq = subSeq . get ( lookupMap ) ;
Distance : 7

161
Tree	private CharSequence result = result . get ( result ) ;
Code	private CharSequence result = result . get ( result ) ;
Distance : 6

162
Tree	static CharSequence result = result . toString ( subSeq ) ;
Code	static CharSequence result = result . toString ( subSeq ) ;
Distance : 6

163
Tree	public CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Code	public CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Distance : 6

164
Tree	protected CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	protected CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 6

165
Tree	public CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Code	public CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Distance : 7

166
Tree	abstract CharSequence result = result . toString ( subSeq ) ;
Code	abstract CharSequence result = result . toString ( subSeq ) ;
Distance : 6

167
Tree	final CharSequence subSeq = result . toString ( subSeq ) ;
Code	final CharSequence subSeq = result . toString ( subSeq ) ;
Distance : 6

168
Tree	final CharSequence lookupMap = result . toString ( subSeq ) ;
Code	final CharSequence lookupMap = result . toString ( subSeq ) ;
Distance : 6

169
Tree	static CharSequence subSeq = subSeq . get ( lookupMap ) ;
Code	static CharSequence subSeq = subSeq . get ( lookupMap ) ;
Distance : 7

170
Tree	public CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Code	public CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Distance : 6

171
Tree	static CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Code	static CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Distance : 6

172
Tree	synchronized CharSequence subSeq = subSeq . get ( subSeq ) ;
Code	synchronized CharSequence subSeq = subSeq . get ( subSeq ) ;
Distance : 6

173
Tree	synchronized CharSequence result = subSeq . toString ( subSeq ) ;
Code	synchronized CharSequence result = subSeq . toString ( subSeq ) ;
Distance : 6

174
Tree	private CharSequence subSeq = lookupMap . get ( result ) ;
Code	private CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 6

175
Tree	protected CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Code	protected CharSequence lookupMap = lookupMap . get ( lookupMap ) ;
Distance : 6

176
Tree	abstract CharSequence subSeq = subSeq . get ( lookupMap ) ;
Code	abstract CharSequence subSeq = subSeq . get ( lookupMap ) ;
Distance : 7

177
Tree	static CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Code	static CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Distance : 7

178
Tree	private CharSequence lookupMap = lookupMap . get ( result ) ;
Code	private CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 6

179
Tree	abstract CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Code	abstract CharSequence subSeq = lookupMap . toString ( subSeq ) ;
Distance : 6

180
Tree	static CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Code	static CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Distance : 6

181
Tree	synchronized CharSequence result = lookupMap . toString ( lookupMap ) ;
Code	synchronized CharSequence result = lookupMap . toString ( lookupMap ) ;
Distance : 6

182
Tree	abstract CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Code	abstract CharSequence lookupMap = subSeq . get ( lookupMap ) ;
Distance : 7

183
Tree	abstract CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Code	abstract CharSequence lookupMap = lookupMap . toString ( subSeq ) ;
Distance : 6

184
Tree	protected CharSequence subSeq = lookupMap . get ( result ) ;
Code	protected CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 6

185
Tree	synchronized CharSequence result = result . get ( result ) ;
Code	synchronized CharSequence result = result . get ( result ) ;
Distance : 6

186
Tree	abstract CharSequence result = lookupMap . toString ( subSeq ) ;
Code	abstract CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

187
Tree	public CharSequence result = subSeq . toString ( lookupMap ) ;
Code	public CharSequence result = subSeq . toString ( lookupMap ) ;
Distance : 7

188
Tree	private CharSequence subSeq = result . get ( subSeq ) ;
Code	private CharSequence subSeq = result . get ( subSeq ) ;
Distance : 6

189
Tree	static CharSequence result = subSeq . toString ( lookupMap ) ;
Code	static CharSequence result = subSeq . toString ( lookupMap ) ;
Distance : 7

190
Tree	synchronized CharSequence subSeq = lookupMap . get ( result ) ;
Code	synchronized CharSequence subSeq = lookupMap . get ( result ) ;
Distance : 6

191
Tree	private CharSequence result = lookupMap . toString ( result ) ;
Code	private CharSequence result = lookupMap . toString ( result ) ;
Distance : 6

192
Tree	private CharSequence lookupMap = result . get ( subSeq ) ;
Code	private CharSequence lookupMap = result . get ( subSeq ) ;
Distance : 6

193
Tree	abstract CharSequence result = subSeq . toString ( lookupMap ) ;
Code	abstract CharSequence result = subSeq . toString ( lookupMap ) ;
Distance : 7

194
Tree	synchronized CharSequence lookupMap = lookupMap . get ( result ) ;
Code	synchronized CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 6

195
Tree	final CharSequence subSeq = subSeq . toString ( lookupMap ) ;
Code	final CharSequence subSeq = subSeq . toString ( lookupMap ) ;
Distance : 7

196
Tree	public CharSequence subSeq = subSeq . get ( result ) ;
Code	public CharSequence subSeq = subSeq . get ( result ) ;
Distance : 7

197
Tree	protected CharSequence result = result . get ( result ) ;
Code	protected CharSequence result = result . get ( result ) ;
Distance : 6

198
Tree	protected CharSequence lookupMap = lookupMap . get ( result ) ;
Code	protected CharSequence lookupMap = lookupMap . get ( result ) ;
Distance : 6

199
Tree	protected CharSequence subSeq = result . get ( subSeq ) ;
Code	protected CharSequence subSeq = result . get ( subSeq ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

1
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

2
Tree	final int length = problem . getAllParameters () . length ;
Code	final int length = problem . getAllParameters () . length ;
Distance : 2

3
Tree	final long cols = problem . getAllParameters () . length ;
Code	final long cols = problem . getAllParameters () . length ;
Distance : 2

4
Tree	final float cols = problem . getAllParameters () . length ;
Code	final float cols = problem . getAllParameters () . length ;
Distance : 2

5
Tree	final boolean cols = problem . getAllParameters () . length ;
Code	final boolean cols = problem . getAllParameters () . length ;
Distance : 2

6
Tree	final char cols = problem . getAllParameters () . length ;
Code	final char cols = problem . getAllParameters () . length ;
Distance : 2

7
Tree	final short cols = problem . getAllParameters () . length ;
Code	final short cols = problem . getAllParameters () . length ;
Distance : 2

8
Tree	final byte length = problem . getAllParameters () . length ;
Code	final byte length = problem . getAllParameters () . length ;
Distance : 3

9
Tree	final int cols = cols . getAllParameters () . length ;
Code	final int cols = cols . getAllParameters () . length ;
Distance : 2

10
Tree	public int cols = problem . getAllParameters () . length ;
Code	public int cols = problem . getAllParameters () . length ;
Distance : 2

11
Tree	final double length = problem . getAllParameters () . length ;
Code	final double length = problem . getAllParameters () . length ;
Distance : 3

12
Tree	final void cols = problem . getAllParameters () . length ;
Code	final void cols = problem . getAllParameters () . length ;
Distance : 2

13
Tree	final long length = problem . getAllParameters () . length ;
Code	final long length = problem . getAllParameters () . length ;
Distance : 3

14
Tree	final int problem = problem . getAllParameters () . length ;
Code	final int problem = problem . getAllParameters () . length ;
Distance : 2

15
Tree	final float length = problem . getAllParameters () . length ;
Code	final float length = problem . getAllParameters () . length ;
Distance : 3

16
Tree	public byte cols = problem . getAllParameters () . length ;
Code	public byte cols = problem . getAllParameters () . length ;
Distance : 3

17
Tree	final byte cols = cols . getAllParameters () . length ;
Code	final byte cols = cols . getAllParameters () . length ;
Distance : 3

18
Tree	static int cols = problem . getAllParameters () . length ;
Code	static int cols = problem . getAllParameters () . length ;
Distance : 2

19
Tree	public double cols = problem . getAllParameters () . length ;
Code	public double cols = problem . getAllParameters () . length ;
Distance : 3

20
Tree	final boolean length = problem . getAllParameters () . length ;
Code	final boolean length = problem . getAllParameters () . length ;
Distance : 3

21
Tree	final char length = problem . getAllParameters () . length ;
Code	final char length = problem . getAllParameters () . length ;
Distance : 3

22
Tree	final byte cols = problem . getAllParameters () . length ;
Code	final byte cols = problem . getAllParameters () . length ;
Distance : 2

23
Tree	final double cols = length . getAllParameters () . length ;
Code	final double cols = length . getAllParameters () . length ;
Distance : 3

24
Tree	abstract int cols = problem . getAllParameters () . length ;
Code	abstract int cols = problem . getAllParameters () . length ;
Distance : 2

25
Tree	final char cols = cols . getAllParameters () . length ;
Code	final char cols = cols . getAllParameters () . length ;
Distance : 3

26
Tree	final int cols = problem . getAllParameters () . cols ;
Code	final int cols = problem . getAllParameters () . cols ;
Distance : 2

27
Tree	private int cols = problem . getAllParameters () . length ;
Code	private int cols = problem . getAllParameters () . length ;
Distance : 2

28
Tree	final int length = cols . getAllParameters () . length ;
Code	final int length = cols . getAllParameters () . length ;
Distance : 3

29
Tree	final byte problem = problem . getAllParameters () . length ;
Code	final byte problem = problem . getAllParameters () . length ;
Distance : 3

30
Tree	public long cols = problem . getAllParameters () . length ;
Code	public long cols = problem . getAllParameters () . length ;
Distance : 3

31
Tree	public float cols = problem . getAllParameters () . length ;
Code	public float cols = problem . getAllParameters () . length ;
Distance : 3

32
Tree	final long cols = cols . getAllParameters () . length ;
Code	final long cols = cols . getAllParameters () . length ;
Distance : 3

33
Tree	final void length = problem . getAllParameters () . length ;
Code	final void length = problem . getAllParameters () . length ;
Distance : 3

34
Tree	public int length = problem . getAllParameters () . length ;
Code	public int length = problem . getAllParameters () . length ;
Distance : 3

35
Tree	static double cols = problem . getAllParameters () . length ;
Code	static double cols = problem . getAllParameters () . length ;
Distance : 3

36
Tree	final float cols = cols . getAllParameters () . length ;
Code	final float cols = cols . getAllParameters () . length ;
Distance : 3

37
Tree	static byte cols = problem . getAllParameters () . length ;
Code	static byte cols = problem . getAllParameters () . length ;
Distance : 3

38
Tree	final double problem = problem . getAllParameters () . length ;
Code	final double problem = problem . getAllParameters () . length ;
Distance : 3

39
Tree	abstract double cols = problem . getAllParameters () . length ;
Code	abstract double cols = problem . getAllParameters () . length ;
Distance : 3

40
Tree	public char cols = problem . getAllParameters () . length ;
Code	public char cols = problem . getAllParameters () . length ;
Distance : 3

41
Tree	abstract byte cols = problem . getAllParameters () . length ;
Code	abstract byte cols = problem . getAllParameters () . length ;
Distance : 3

42
Tree	protected int cols = problem . getAllParameters () . length ;
Code	protected int cols = problem . getAllParameters () . length ;
Distance : 2

43
Tree	public boolean cols = problem . getAllParameters () . length ;
Code	public boolean cols = problem . getAllParameters () . length ;
Distance : 3

44
Tree	final byte cols = length . getAllParameters () . length ;
Code	final byte cols = length . getAllParameters () . length ;
Distance : 3

45
Tree	final boolean cols = cols . getAllParameters () . length ;
Code	final boolean cols = cols . getAllParameters () . length ;
Distance : 3

46
Tree	final double cols = cols . getAllParameters () . length ;
Code	final double cols = cols . getAllParameters () . length ;
Distance : 3

47
Tree	final int cols = length . getAllParameters () . length ;
Code	final int cols = length . getAllParameters () . length ;
Distance : 2

48
Tree	final short length = problem . getAllParameters () . length ;
Code	final short length = problem . getAllParameters () . length ;
Distance : 3

49
Tree	final long problem = problem . getAllParameters () . length ;
Code	final long problem = problem . getAllParameters () . length ;
Distance : 3

50
Tree	abstract int length = problem . getAllParameters () . length ;
Code	abstract int length = problem . getAllParameters () . length ;
Distance : 3

51
Tree	private byte cols = problem . getAllParameters () . length ;
Code	private byte cols = problem . getAllParameters () . length ;
Distance : 3

52
Tree	public short cols = problem . getAllParameters () . length ;
Code	public short cols = problem . getAllParameters () . length ;
Distance : 3

53
Tree	synchronized int cols = problem . getAllParameters () . length ;
Code	synchronized int cols = problem . getAllParameters () . length ;
Distance : 2

54
Tree	final byte cols = problem . getAllParameters () . cols ;
Code	final byte cols = problem . getAllParameters () . cols ;
Distance : 3

55
Tree	static long cols = problem . getAllParameters () . length ;
Code	static long cols = problem . getAllParameters () . length ;
Distance : 3

56
Tree	final float problem = problem . getAllParameters () . length ;
Code	final float problem = problem . getAllParameters () . length ;
Distance : 3

57
Tree	final byte length = cols . getAllParameters () . length ;
Code	final byte length = cols . getAllParameters () . length ;
Distance : 4

58
Tree	public byte length = problem . getAllParameters () . length ;
Code	public byte length = problem . getAllParameters () . length ;
Distance : 4

59
Tree	static float cols = problem . getAllParameters () . length ;
Code	static float cols = problem . getAllParameters () . length ;
Distance : 3

60
Tree	final float length = problem . getAllParameters () . cols ;
Code	final float length = problem . getAllParameters () . cols ;
Distance : 4

61
Tree	public void cols = problem . getAllParameters () . length ;
Code	public void cols = problem . getAllParameters () . length ;
Distance : 3

62
Tree	public double length = problem . getAllParameters () . length ;
Code	public double length = problem . getAllParameters () . length ;
Distance : 4

63
Tree	static boolean cols = problem . getAllParameters () . length ;
Code	static boolean cols = problem . getAllParameters () . length ;
Distance : 3

64
Tree	abstract float cols = problem . getAllParameters () . length ;
Code	abstract float cols = problem . getAllParameters () . length ;
Distance : 3

65
Tree	abstract boolean cols = problem . getAllParameters () . length ;
Code	abstract boolean cols = problem . getAllParameters () . length ;
Distance : 3

66
Tree	final int length = length . getAllParameters () . length ;
Code	final int length = length . getAllParameters () . length ;
Distance : 3

67
Tree	static int length = problem . getAllParameters () . length ;
Code	static int length = problem . getAllParameters () . length ;
Distance : 3

68
Tree	final double cols = problem . getAllParameters () . cols ;
Code	final double cols = problem . getAllParameters () . cols ;
Distance : 3

69
Tree	static char cols = problem . getAllParameters () . length ;
Code	static char cols = problem . getAllParameters () . length ;
Distance : 3

70
Tree	final double length = cols . getAllParameters () . length ;
Code	final double length = cols . getAllParameters () . length ;
Distance : 4

71
Tree	protected double cols = problem . getAllParameters () . length ;
Code	protected double cols = problem . getAllParameters () . length ;
Distance : 3

72
Tree	private double cols = problem . getAllParameters () . length ;
Code	private double cols = problem . getAllParameters () . length ;
Distance : 3

73
Tree	final short cols = cols . getAllParameters () . length ;
Code	final short cols = cols . getAllParameters () . length ;
Distance : 3

74
Tree	public int cols = cols . getAllParameters () . length ;
Code	public int cols = cols . getAllParameters () . length ;
Distance : 3

75
Tree	abstract char cols = problem . getAllParameters () . length ;
Code	abstract char cols = problem . getAllParameters () . length ;
Distance : 3

76
Tree	final boolean problem = problem . getAllParameters () . length ;
Code	final boolean problem = problem . getAllParameters () . length ;
Distance : 3

77
Tree	protected byte cols = problem . getAllParameters () . length ;
Code	protected byte cols = problem . getAllParameters () . length ;
Distance : 3

78
Tree	final char problem = problem . getAllParameters () . length ;
Code	final char problem = problem . getAllParameters () . length ;
Distance : 3

79
Tree	final float cols = length . getAllParameters () . length ;
Code	final float cols = length . getAllParameters () . length ;
Distance : 3

80
Tree	private long cols = problem . getAllParameters () . length ;
Code	private long cols = problem . getAllParameters () . length ;
Distance : 3

81
Tree	final int cols = problem . getAllParameters () . problem ;
Code	final int cols = problem . getAllParameters () . problem ;
Distance : 2

82
Tree	final int length = problem . getAllParameters () . cols ;
Code	final int length = problem . getAllParameters () . cols ;
Distance : 3

83
Tree	final short problem = problem . getAllParameters () . length ;
Code	final short problem = problem . getAllParameters () . length ;
Distance : 3

84
Tree	private boolean cols = problem . getAllParameters () . length ;
Code	private boolean cols = problem . getAllParameters () . length ;
Distance : 3

85
Tree	private float cols = problem . getAllParameters () . length ;
Code	private float cols = problem . getAllParameters () . length ;
Distance : 3

86
Tree	final long cols = problem . getAllParameters () . cols ;
Code	final long cols = problem . getAllParameters () . cols ;
Distance : 3

87
Tree	private char cols = problem . getAllParameters () . length ;
Code	private char cols = problem . getAllParameters () . length ;
Distance : 3

88
Tree	final long length = cols . getAllParameters () . length ;
Code	final long length = cols . getAllParameters () . length ;
Distance : 4

89
Tree	private int length = problem . getAllParameters () . length ;
Code	private int length = problem . getAllParameters () . length ;
Distance : 3

90
Tree	synchronized double cols = problem . getAllParameters () . length ;
Code	synchronized double cols = problem . getAllParameters () . length ;
Distance : 3

91
Tree	final boolean cols = length . getAllParameters () . length ;
Code	final boolean cols = length . getAllParameters () . length ;
Distance : 3

92
Tree	public long length = problem . getAllParameters () . length ;
Code	public long length = problem . getAllParameters () . length ;
Distance : 4

93
Tree	final float cols = problem . getAllParameters () . cols ;
Code	final float cols = problem . getAllParameters () . cols ;
Distance : 3

94
Tree	static short cols = problem . getAllParameters () . length ;
Code	static short cols = problem . getAllParameters () . length ;
Distance : 3

95
Tree	final char cols = length . getAllParameters () . length ;
Code	final char cols = length . getAllParameters () . length ;
Distance : 3

96
Tree	final void cols = cols . getAllParameters () . length ;
Code	final void cols = cols . getAllParameters () . length ;
Distance : 3

97
Tree	final long cols = length . getAllParameters () . length ;
Code	final long cols = length . getAllParameters () . length ;
Distance : 3

98
Tree	synchronized byte cols = problem . getAllParameters () . length ;
Code	synchronized byte cols = problem . getAllParameters () . length ;
Distance : 3

99
Tree	public float length = problem . getAllParameters () . length ;
Code	public float length = problem . getAllParameters () . length ;
Distance : 4

100
Tree	final int problem = cols . getAllParameters () . length ;
Code	final int problem = cols . getAllParameters () . length ;
Distance : 3

101
Tree	final float length = cols . getAllParameters () . length ;
Code	final float length = cols . getAllParameters () . length ;
Distance : 4

102
Tree	abstract short cols = problem . getAllParameters () . length ;
Code	abstract short cols = problem . getAllParameters () . length ;
Distance : 3

103
Tree	abstract void cols = problem . getAllParameters () . length ;
Code	abstract void cols = problem . getAllParameters () . length ;
Distance : 3

104
Tree	protected long cols = problem . getAllParameters () . length ;
Code	protected long cols = problem . getAllParameters () . length ;
Distance : 3

105
Tree	final short cols = length . getAllParameters () . length ;
Code	final short cols = length . getAllParameters () . length ;
Distance : 3

106
Tree	final void problem = problem . getAllParameters () . length ;
Code	final void problem = problem . getAllParameters () . length ;
Distance : 3

107
Tree	protected float cols = problem . getAllParameters () . length ;
Code	protected float cols = problem . getAllParameters () . length ;
Distance : 3

108
Tree	static double length = problem . getAllParameters () . length ;
Code	static double length = problem . getAllParameters () . length ;
Distance : 4

109
Tree	public int problem = problem . getAllParameters () . length ;
Code	public int problem = problem . getAllParameters () . length ;
Distance : 3

110
Tree	protected boolean cols = problem . getAllParameters () . length ;
Code	protected boolean cols = problem . getAllParameters () . length ;
Distance : 3

111
Tree	static byte length = problem . getAllParameters () . length ;
Code	static byte length = problem . getAllParameters () . length ;
Distance : 4

112
Tree	public byte cols = cols . getAllParameters () . length ;
Code	public byte cols = cols . getAllParameters () . length ;
Distance : 4

113
Tree	public char length = problem . getAllParameters () . length ;
Code	public char length = problem . getAllParameters () . length ;
Distance : 4

114
Tree	public boolean length = problem . getAllParameters () . length ;
Code	public boolean length = problem . getAllParameters () . length ;
Distance : 4

115
Tree	final byte length = length . getAllParameters () . length ;
Code	final byte length = length . getAllParameters () . length ;
Distance : 4

116
Tree	final boolean cols = problem . getAllParameters () . cols ;
Code	final boolean cols = problem . getAllParameters () . cols ;
Distance : 3

117
Tree	abstract double length = problem . getAllParameters () . length ;
Code	abstract double length = problem . getAllParameters () . length ;
Distance : 4

118
Tree	static int cols = cols . getAllParameters () . length ;
Code	static int cols = cols . getAllParameters () . length ;
Distance : 3

119
Tree	protected char cols = problem . getAllParameters () . length ;
Code	protected char cols = problem . getAllParameters () . length ;
Distance : 3

120
Tree	final char cols = problem . getAllParameters () . cols ;
Code	final char cols = problem . getAllParameters () . cols ;
Distance : 3

121
Tree	public double cols = cols . getAllParameters () . length ;
Code	public double cols = cols . getAllParameters () . length ;
Distance : 4

122
Tree	abstract byte length = problem . getAllParameters () . length ;
Code	abstract byte length = problem . getAllParameters () . length ;
Distance : 4

123
Tree	final boolean length = cols . getAllParameters () . length ;
Code	final boolean length = cols . getAllParameters () . length ;
Distance : 4

124
Tree	protected int length = problem . getAllParameters () . length ;
Code	protected int length = problem . getAllParameters () . length ;
Distance : 3

125
Tree	final char length = cols . getAllParameters () . length ;
Code	final char length = cols . getAllParameters () . length ;
Distance : 4

126
Tree	abstract int cols = cols . getAllParameters () . length ;
Code	abstract int cols = cols . getAllParameters () . length ;
Distance : 3

127
Tree	private short cols = problem . getAllParameters () . length ;
Code	private short cols = problem . getAllParameters () . length ;
Distance : 3

128
Tree	final short cols = problem . getAllParameters () . cols ;
Code	final short cols = problem . getAllParameters () . cols ;
Distance : 3

129
Tree	final double length = length . getAllParameters () . length ;
Code	final double length = length . getAllParameters () . length ;
Distance : 4

130
Tree	private void cols = problem . getAllParameters () . length ;
Code	private void cols = problem . getAllParameters () . length ;
Distance : 3

131
Tree	synchronized long cols = problem . getAllParameters () . length ;
Code	synchronized long cols = problem . getAllParameters () . length ;
Distance : 3

132
Tree	final short length = cols . getAllParameters () . length ;
Code	final short length = cols . getAllParameters () . length ;
Distance : 4

133
Tree	final void cols = length . getAllParameters () . length ;
Code	final void cols = length . getAllParameters () . length ;
Distance : 3

134
Tree	public int cols = length . getAllParameters () . length ;
Code	public int cols = length . getAllParameters () . length ;
Distance : 3

135
Tree	final byte cols = problem . getAllParameters () . problem ;
Code	final byte cols = problem . getAllParameters () . problem ;
Distance : 3

136
Tree	synchronized float cols = problem . getAllParameters () . length ;
Code	synchronized float cols = problem . getAllParameters () . length ;
Distance : 3

137
Tree	synchronized boolean cols = problem . getAllParameters () . length ;
Code	synchronized boolean cols = problem . getAllParameters () . length ;
Distance : 3

138
Tree	final byte length = problem . getAllParameters () . cols ;
Code	final byte length = problem . getAllParameters () . cols ;
Distance : 4

139
Tree	public short length = problem . getAllParameters () . length ;
Code	public short length = problem . getAllParameters () . length ;
Distance : 4

140
Tree	synchronized char cols = problem . getAllParameters () . length ;
Code	synchronized char cols = problem . getAllParameters () . length ;
Distance : 3

141
Tree	private double length = problem . getAllParameters () . length ;
Code	private double length = problem . getAllParameters () . length ;
Distance : 4

142
Tree	private byte length = problem . getAllParameters () . length ;
Code	private byte length = problem . getAllParameters () . length ;
Distance : 4

143
Tree	final int cols = cols . getAllParameters () . cols ;
Code	final int cols = cols . getAllParameters () . cols ;
Distance : 3

144
Tree	public void length = problem . getAllParameters () . length ;
Code	public void length = problem . getAllParameters () . length ;
Distance : 4

145
Tree	synchronized int length = problem . getAllParameters () . length ;
Code	synchronized int length = problem . getAllParameters () . length ;
Distance : 3

146
Tree	static long length = problem . getAllParameters () . length ;
Code	static long length = problem . getAllParameters () . length ;
Distance : 4

147
Tree	final double cols = problem . getAllParameters () . problem ;
Code	final double cols = problem . getAllParameters () . problem ;
Distance : 3

148
Tree	static void cols = problem . getAllParameters () . length ;
Code	static void cols = problem . getAllParameters () . length ;
Distance : 3

149
Tree	private int cols = cols . getAllParameters () . length ;
Code	private int cols = cols . getAllParameters () . length ;
Distance : 3

150
Tree	final double length = problem . getAllParameters () . cols ;
Code	final double length = problem . getAllParameters () . cols ;
Distance : 4

151
Tree	final byte problem = cols . getAllParameters () . length ;
Code	final byte problem = cols . getAllParameters () . length ;
Distance : 4

152
Tree	protected short cols = problem . getAllParameters () . length ;
Code	protected short cols = problem . getAllParameters () . length ;
Distance : 3

153
Tree	protected void cols = problem . getAllParameters () . length ;
Code	protected void cols = problem . getAllParameters () . length ;
Distance : 3

154
Tree	abstract long length = problem . getAllParameters () . length ;
Code	abstract long length = problem . getAllParameters () . length ;
Distance : 4

155
Tree	final void cols = problem . getAllParameters () . cols ;
Code	final void cols = problem . getAllParameters () . cols ;
Distance : 3

156
Tree	public byte problem = problem . getAllParameters () . length ;
Code	public byte problem = problem . getAllParameters () . length ;
Distance : 4

157
Tree	static boolean length = problem . getAllParameters () . length ;
Code	static boolean length = problem . getAllParameters () . length ;
Distance : 4

158
Tree	static int problem = problem . getAllParameters () . length ;
Code	static int problem = problem . getAllParameters () . length ;
Distance : 3

159
Tree	final long length = length . getAllParameters () . length ;
Code	final long length = length . getAllParameters () . length ;
Distance : 4

160
Tree	final void length = cols . getAllParameters () . length ;
Code	final void length = cols . getAllParameters () . length ;
Distance : 4

161
Tree	public long cols = cols . getAllParameters () . length ;
Code	public long cols = cols . getAllParameters () . length ;
Distance : 4

162
Tree	abstract float length = problem . getAllParameters () . length ;
Code	abstract float length = problem . getAllParameters () . length ;
Distance : 4

163
Tree	public float cols = cols . getAllParameters () . length ;
Code	public float cols = cols . getAllParameters () . length ;
Distance : 4

164
Tree	abstract boolean length = problem . getAllParameters () . length ;
Code	abstract boolean length = problem . getAllParameters () . length ;
Distance : 4

165
Tree	public int length = cols . getAllParameters () . length ;
Code	public int length = cols . getAllParameters () . length ;
Distance : 4

166
Tree	public double problem = problem . getAllParameters () . length ;
Code	public double problem = problem . getAllParameters () . length ;
Distance : 4

167
Tree	final int problem = length . getAllParameters () . length ;
Code	final int problem = length . getAllParameters () . length ;
Distance : 3

168
Tree	abstract int problem = problem . getAllParameters () . length ;
Code	abstract int problem = problem . getAllParameters () . length ;
Distance : 3

169
Tree	final float length = length . getAllParameters () . length ;
Code	final float length = length . getAllParameters () . length ;
Distance : 4

170
Tree	static double cols = cols . getAllParameters () . length ;
Code	static double cols = cols . getAllParameters () . length ;
Distance : 4

171
Tree	static byte cols = cols . getAllParameters () . length ;
Code	static byte cols = cols . getAllParameters () . length ;
Distance : 4

172
Tree	static float length = problem . getAllParameters () . length ;
Code	static float length = problem . getAllParameters () . length ;
Distance : 4

173
Tree	static char length = problem . getAllParameters () . length ;
Code	static char length = problem . getAllParameters () . length ;
Distance : 4

174
Tree	protected double length = problem . getAllParameters () . length ;
Code	protected double length = problem . getAllParameters () . length ;
Distance : 4

175
Tree	public int cols = problem . getAllParameters () . cols ;
Code	public int cols = problem . getAllParameters () . cols ;
Distance : 3

176
Tree	final int length = problem . getAllParameters () . problem ;
Code	final int length = problem . getAllParameters () . problem ;
Distance : 3

177
Tree	abstract char length = problem . getAllParameters () . length ;
Code	abstract char length = problem . getAllParameters () . length ;
Distance : 4

178
Tree	protected byte length = problem . getAllParameters () . length ;
Code	protected byte length = problem . getAllParameters () . length ;
Distance : 4

179
Tree	abstract double cols = cols . getAllParameters () . length ;
Code	abstract double cols = cols . getAllParameters () . length ;
Distance : 4

180
Tree	public char cols = cols . getAllParameters () . length ;
Code	public char cols = cols . getAllParameters () . length ;
Distance : 4

181
Tree	abstract byte cols = cols . getAllParameters () . length ;
Code	abstract byte cols = cols . getAllParameters () . length ;
Distance : 4

182
Tree	protected int cols = cols . getAllParameters () . length ;
Code	protected int cols = cols . getAllParameters () . length ;
Distance : 3

183
Tree	public boolean cols = cols . getAllParameters () . length ;
Code	public boolean cols = cols . getAllParameters () . length ;
Distance : 4

184
Tree	final long cols = problem . getAllParameters () . problem ;
Code	final long cols = problem . getAllParameters () . problem ;
Distance : 3

185
Tree	public byte cols = length . getAllParameters () . length ;
Code	public byte cols = length . getAllParameters () . length ;
Distance : 4

186
Tree	abstract long cols = problem . getAllParameters () . length ;
Code	abstract long cols = problem . getAllParameters () . length ;
Distance : 3

187
Tree	final long length = problem . getAllParameters () . cols ;
Code	final long length = problem . getAllParameters () . cols ;
Distance : 4

188
Tree	synchronized void cols = problem . getAllParameters () . length ;
Code	synchronized void cols = problem . getAllParameters () . length ;
Distance : 3

189
Tree	synchronized short cols = problem . getAllParameters () . length ;
Code	synchronized short cols = problem . getAllParameters () . length ;
Distance : 3

190
Tree	static int cols = length . getAllParameters () . length ;
Code	static int cols = length . getAllParameters () . length ;
Distance : 3

191
Tree	final float cols = problem . getAllParameters () . problem ;
Code	final float cols = problem . getAllParameters () . problem ;
Distance : 3

192
Tree	final int problem = problem . getAllParameters () . cols ;
Code	final int problem = problem . getAllParameters () . cols ;
Distance : 3

193
Tree	final boolean length = length . getAllParameters () . length ;
Code	final boolean length = length . getAllParameters () . length ;
Distance : 4

194
Tree	private boolean length = problem . getAllParameters () . length ;
Code	private boolean length = problem . getAllParameters () . length ;
Distance : 4

195
Tree	private float length = problem . getAllParameters () . length ;
Code	private float length = problem . getAllParameters () . length ;
Distance : 4

196
Tree	public double cols = length . getAllParameters () . length ;
Code	public double cols = length . getAllParameters () . length ;
Distance : 4

197
Tree	final double problem = cols . getAllParameters () . length ;
Code	final double problem = cols . getAllParameters () . length ;
Distance : 4

198
Tree	private long length = problem . getAllParameters () . length ;
Code	private long length = problem . getAllParameters () . length ;
Distance : 4

199
Tree	final char length = length . getAllParameters () . length ;
Code	final char length = length . getAllParameters () . length ;
Distance : 4

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Invocation
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Invocation
Distance : 2

1
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; field
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; field
Distance : 2

2
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; checkArgument
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; checkArgument
Distance : 2

3
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; IllegalArgumentException
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; IllegalArgumentException
Distance : 2

4
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; reportCodeChange
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; reportCodeChange
Distance : 2

5
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ()
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ()
Distance : 2

6
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; t
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; t
Distance : 2

7
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; str
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; str
Distance : 2

8
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; LINE_JOINER
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; LINE_JOINER
Distance : 2

9
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; x
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; x
Distance : 2

10
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; testSame
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; testSame
Distance : 2

11
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; invocation
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; invocation
Distance : 2

12
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; assertThat
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; assertThat
Distance : 2

13
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; -
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; -
Distance : 2

14
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Preconditions
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Preconditions
Distance : 2

15
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; name
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; name
Distance : 2

16
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; value
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; value
Distance : 2

17
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; final
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; final
Distance : 2

18
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; @
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; @
Distance : 2

19
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Fraction
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Fraction
Distance : 2

20
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; checkNotNull
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; checkNotNull
Distance : 2

21
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; throws
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; throws
Distance : 2

22
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; e
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; e
Distance : 2

23
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; scope
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; scope
Distance : 2

24
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; n
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; n
Distance : 2

25
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; data
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; data
Distance : 2

26
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; <s>
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; <s>
Distance : 2

27
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; )
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; )
Distance : 2

28
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ;
Distance : 2

29
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; new
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; new
Distance : 2

30
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; STRING_CONSTANT
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; STRING_CONSTANT
Distance : 2

31
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; }
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; }
Distance : 2

32
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; =
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; =
Distance : 2

33
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ,
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ,
Distance : 2

34
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; return
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; return
Distance : 2

35
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; <blank>
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; <blank>
Distance : 2

36
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; final
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; final
Distance : 2

37
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; this
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; this
Distance : 2

38
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; for
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; for
Distance : 2

39
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; T
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; T
Distance : 2

40
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; &&
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; &&
Distance : 2

41
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; !=
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; !=
Distance : 2

42
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; i
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; i
Distance : 2

43
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; NUMBER_CONSTANT
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; NUMBER_CONSTANT
Distance : 2

44
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; super
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; super
Distance : 2

45
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; .
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; .
Distance : 2

46
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; {
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; {
Distance : 2

47
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; add
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; add
Distance : 2

48
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; (
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; (
Distance : 2

49
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; test
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; test
Distance : 2

50
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; getArgumentMatcherStorage
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; getArgumentMatcherStorage
Distance : 2

51
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; index
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; index
Distance : 2

52
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; node
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; node
Distance : 2

53
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; out
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; out
Distance : 2

54
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; invocations
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; invocations
Distance : 2

55
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; try
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; try
Distance : 2

56
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; result
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; result
Distance : 2

57
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; fail
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; fail
Distance : 2

58
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; :
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; :
Distance : 2

59
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; values
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; values
Distance : 2

60
Tree	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 2

61
Tree	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

62
Tree	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

63
Tree	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

64
Tree	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

65
Tree	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

66
Tree	static BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

67
Tree	public BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	public BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

68
Tree	abstract BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

69
Tree	private BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

70
Tree	protected BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	protected BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

71
Tree	synchronized BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	synchronized BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

72
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; double
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; double
Distance : 2

73
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; append
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; append
Distance : 2

74
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; protected
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; protected
Distance : 2

75
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; getMessage
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; getMessage
Distance : 2

76
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; simpleMethod
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; simpleMethod
Distance : 2

77
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; sb
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; sb
Distance : 2

78
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; js
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; js
Distance : 2

79
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; equals
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; equals
Distance : 2

80
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; d
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; d
Distance : 2

81
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; reportMatcher
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; reportMatcher
Distance : 2

82
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; StrBuilder
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; StrBuilder
Distance : 2

83
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; setUp
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; setUp
Distance : 2

84
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; getParent
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; getParent
Distance : 2

85
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; a
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; a
Distance : 2

86
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; LanguageMode.ECMASCRIPT_2015
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; LanguageMode.ECMASCRIPT_2015
Distance : 2

87
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; TestUtilities
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; TestUtilities
Distance : 2

88
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; UnivariateFunction
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; UnivariateFunction
Distance : 2

89
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; isBlock
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; isBlock
Distance : 2

90
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; paint
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; paint
Distance : 2

91
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; !
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; !
Distance : 2

92
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; assertEquals
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; assertEquals
Distance : 2

93
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; m
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; m
Distance : 2

94
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; false
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; false
Distance : 2

95
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; int
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; int
Distance : 2

96
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; checkState
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; checkState
Distance : 2

97
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; stream
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; stream
Distance : 2

98
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; size
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; size
Distance : 2

99
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

100
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; char
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; char
Distance : 2

101
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; <=
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; <=
Distance : 2

102
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; obj
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; obj
Distance : 2

103
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; null
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; null
Distance : 2

104
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; +
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; +
Distance : 2

105
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; if
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; if
Distance : 2

106
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; <
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; <
Distance : 2

107
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; >
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; >
Distance : 2

108
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; public
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; public
Distance : 2

109
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; get
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; get
Distance : 2

110
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; createIllegalArgumentException
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; createIllegalArgumentException
Distance : 2

111
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; fireChangeEvent
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; fireChangeEvent
Distance : 2

112
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; type
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; type
Distance : 2

113
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; isEmpty
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; isEmpty
Distance : 2

114
Tree	synchronized BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	synchronized BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

115
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; mode
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; mode
Distance : 2

116
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; getFirstChild
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; getFirstChild
Distance : 2

117
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; length
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; length
Distance : 2

118
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; TestUtils
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; TestUtils
Distance : 2

119
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; parent
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; parent
Distance : 2

120
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Node
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Node
Distance : 2

121
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; JSType
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; JSType
Distance : 2

122
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; static
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; static
Distance : 2

123
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; c
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; c
Distance : 2

124
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; notifyListeners
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; notifyListeners
Distance : 2

125
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; boolean
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; boolean
Distance : 2

126
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; join
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; join
Distance : 2

127
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Override
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Override
Distance : 2

128
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; MathRuntimeException
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; MathRuntimeException
Distance : 2

129
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; mock
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; mock
Distance : 2

130
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; {}
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; {}
Distance : 2

131
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; setAcceptedLanguage
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; setAcceptedLanguage
Distance : 2

132
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; getInstance
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; getInstance
Distance : 2

133
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; *
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; *
Distance : 2

134
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ArrayList
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ArrayList
Distance : 2

135
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; return;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; return;
Distance : 2

136
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; mockingProgress
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; mockingProgress
Distance : 2

137
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; abs
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; abs
Distance : 2

138
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; matcher
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; matcher
Distance : 2

139
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; else
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; else
Distance : 2

140
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; instant
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; instant
Distance : 2

141
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ]
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ]
Distance : 2

142
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Exception
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Exception
Distance : 2

143
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; [
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; [
Distance : 2

144
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Integer
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Integer
Distance : 2

145
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; <>
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; <>
Distance : 2

146
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; array
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; array
Distance : 2

147
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; List
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; List
Distance : 2

148
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Args
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Args
Distance : 2

149
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; v
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; v
Distance : 2

150
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; verify
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; verify
Distance : 2

151
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; chrono
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; chrono
Distance : 2

152
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; contains
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; contains
Distance : 2

153
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; class
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; class
Distance : 2

154
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; b
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; b
Distance : 2

155
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; stroke
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; stroke
Distance : 2

156
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; traverseEs6
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; traverseEs6
Distance : 2

157
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Double
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Double
Distance : 2

158
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; PeriodType
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; PeriodType
Distance : 2

159
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; isNormalBlock
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; isNormalBlock
Distance : 2

160
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; s
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; s
Distance : 2

161
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; sqrt
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; sqrt
Distance : 2

162
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; FastMath
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; FastMath
Distance : 2

163
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; MutableTimePeriod
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; MutableTimePeriod
Distance : 2

164
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Object
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Object
Distance : 2

165
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; lines
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; lines
Distance : 2

166
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; f
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; f
Distance : 2

167
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; throw
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; throw
Distance : 2

168
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; catch
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; catch
Distance : 2

169
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ParamChecks
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ParamChecks
Distance : 2

170
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; compiler
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; compiler
Distance : 2

171
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ==
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ==
Distance : 2

172
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; void
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; void
Distance : 2

173
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; []
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; []
Distance : 2

174
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; nullNotPermitted
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; nullNotPermitted
Distance : 2

175
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; /
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; /
Distance : 2

176
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; String
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; String
Distance : 2

177
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ?
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ?
Distance : 2

178
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Assert
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Assert
Distance : 2

179
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; externs
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; externs
Distance : 2

180
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; assertTrue
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; assertTrue
Distance : 2

181
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; returnZero
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; returnZero
Distance : 2

182
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; true
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; true
Distance : 2

183
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; expected
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; expected
Distance : 2

184
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; clone
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; clone
Distance : 2

185
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; long
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; long
Distance : 2

186
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; serialised
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; serialised
Distance : 2

187
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; p
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; p
Distance : 2

188
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; options
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; options
Distance : 2

189
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; root
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; root
Distance : 2

190
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Math
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Math
Distance : 2

191
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; ex
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; ex
Distance : 2

192
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Test
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Test
Distance : 2

193
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; NodeUtil
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; NodeUtil
Distance : 2

194
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; wanted
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; wanted
Distance : 2

195
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; Class
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; Class
Distance : 2

196
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; source
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; source
Distance : 2

197
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; toString
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; toString
Distance : 2

198
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; NodeTraversal
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; NodeTraversal
Distance : 2

199
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ; StringBuilder
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ; StringBuilder
Distance : 2

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

1
Tree	final double [] nRows = new double [ v.length ] ;
Code	final double [] nRows = new double [ v.length ] ;
Distance : 2

2
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

3
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

4
Tree	final double [] out = new boolean [ v.length ] ;
Code	final double [] out = new boolean [ v.length ] ;
Distance : 2

5
Tree	final double [] out = new float [ v.length ] ;
Code	final double [] out = new float [ v.length ] ;
Distance : 2

6
Tree	final double [] out = new long [ v.length ] ;
Code	final double [] out = new long [ v.length ] ;
Distance : 2

7
Tree	final boolean [] out = new double [ v.length ] ;
Code	final boolean [] out = new double [ v.length ] ;
Distance : 2

8
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

9
Tree	final double [] out = new char [ v.length ] ;
Code	final double [] out = new char [ v.length ] ;
Distance : 2

10
Tree	final double [] out = new byte [ v.length ] ;
Code	final double [] out = new byte [ v.length ] ;
Distance : 2

11
Tree	final double [] out = new void [ v.length ] ;
Code	final double [] out = new void [ v.length ] ;
Distance : 2

12
Tree	final byte [] out = new double [ v.length ] ;
Code	final byte [] out = new double [ v.length ] ;
Distance : 2

13
Tree	final void [] out = new double [ v.length ] ;
Code	final void [] out = new double [ v.length ] ;
Distance : 2

14
Tree	final double [] out = new short [ v.length ] ;
Code	final double [] out = new short [ v.length ] ;
Distance : 2

15
Tree	abstract double [] out = new double [ v.length ] ;
Code	abstract double [] out = new double [ v.length ] ;
Distance : 2

16
Tree	final float [] nRows = new double [ v.length ] ;
Code	final float [] nRows = new double [ v.length ] ;
Distance : 3

17
Tree	public double [] out = new double [ v.length ] ;
Code	public double [] out = new double [ v.length ] ;
Distance : 2

18
Tree	final char [] out = new double [ v.length ] ;
Code	final char [] out = new double [ v.length ] ;
Distance : 2

19
Tree	final float [] out = new int [ v.length ] ;
Code	final float [] out = new int [ v.length ] ;
Distance : 3

20
Tree	final short [] out = new double [ v.length ] ;
Code	final short [] out = new double [ v.length ] ;
Distance : 2

21
Tree	final int [] nRows = new double [ v.length ] ;
Code	final int [] nRows = new double [ v.length ] ;
Distance : 3

22
Tree	final float [] out = new double [ v.length ] ;
Code	final float [] out = new double [ v.length ] ;
Distance : 2

23
Tree	final int [] out = new void [ v.length ] ;
Code	final int [] out = new void [ v.length ] ;
Distance : 3

24
Tree	final float [] out = new boolean [ v.length ] ;
Code	final float [] out = new boolean [ v.length ] ;
Distance : 3

25
Tree	final double [] nRows = new void [ v.length ] ;
Code	final double [] nRows = new void [ v.length ] ;
Distance : 3

26
Tree	final int [] out = new boolean [ v.length ] ;
Code	final int [] out = new boolean [ v.length ] ;
Distance : 3

27
Tree	static double [] out = new double [ v.length ] ;
Code	static double [] out = new double [ v.length ] ;
Distance : 2

28
Tree	final float [] out = new float [ v.length ] ;
Code	final float [] out = new float [ v.length ] ;
Distance : 3

29
Tree	final float [] out = new long [ v.length ] ;
Code	final float [] out = new long [ v.length ] ;
Distance : 3

30
Tree	final double [] nRows = new float [ v.length ] ;
Code	final double [] nRows = new float [ v.length ] ;
Distance : 3

31
Tree	final double [] nRows = new long [ v.length ] ;
Code	final double [] nRows = new long [ v.length ] ;
Distance : 3

32
Tree	final boolean [] nRows = new double [ v.length ] ;
Code	final boolean [] nRows = new double [ v.length ] ;
Distance : 3

33
Tree	final int [] out = new float [ v.length ] ;
Code	final int [] out = new float [ v.length ] ;
Distance : 3

34
Tree	final boolean [] out = new int [ v.length ] ;
Code	final boolean [] out = new int [ v.length ] ;
Distance : 3

35
Tree	final int [] out = new long [ v.length ] ;
Code	final int [] out = new long [ v.length ] ;
Distance : 3

36
Tree	final boolean [] out = new boolean [ v.length ] ;
Code	final boolean [] out = new boolean [ v.length ] ;
Distance : 3

37
Tree	final long [] nRows = new double [ v.length ] ;
Code	final long [] nRows = new double [ v.length ] ;
Distance : 3

38
Tree	final long [] out = new int [ v.length ] ;
Code	final long [] out = new int [ v.length ] ;
Distance : 3

39
Tree	final float [] out = new void [ v.length ] ;
Code	final float [] out = new void [ v.length ] ;
Distance : 3

40
Tree	final float [] out = new char [ v.length ] ;
Code	final float [] out = new char [ v.length ] ;
Distance : 3

41
Tree	final long [] out = new boolean [ v.length ] ;
Code	final long [] out = new boolean [ v.length ] ;
Distance : 3

42
Tree	final float [] out = new byte [ v.length ] ;
Code	final float [] out = new byte [ v.length ] ;
Distance : 3

43
Tree	final double [] nRows = new char [ v.length ] ;
Code	final double [] nRows = new char [ v.length ] ;
Distance : 3

44
Tree	final double [] nRows = new byte [ v.length ] ;
Code	final double [] nRows = new byte [ v.length ] ;
Distance : 3

45
Tree	private double [] out = new double [ v.length ] ;
Code	private double [] out = new double [ v.length ] ;
Distance : 2

46
Tree	final int [] out = new int [ v.length ] ;
Code	final int [] out = new int [ v.length ] ;
Distance : 3

47
Tree	final double [] nRows = new int [ v.length ] ;
Code	final double [] nRows = new int [ v.length ] ;
Distance : 3

48
Tree	final double [] nRows = new boolean [ v.length ] ;
Code	final double [] nRows = new boolean [ v.length ] ;
Distance : 3

49
Tree	final byte [] nRows = new double [ v.length ] ;
Code	final byte [] nRows = new double [ v.length ] ;
Distance : 3

50
Tree	final float [] nRows = new int [ v.length ] ;
Code	final float [] nRows = new int [ v.length ] ;
Distance : 4

51
Tree	final int [] out = new byte [ v.length ] ;
Code	final int [] out = new byte [ v.length ] ;
Distance : 3

52
Tree	final byte [] out = new boolean [ v.length ] ;
Code	final byte [] out = new boolean [ v.length ] ;
Distance : 3

53
Tree	final boolean [] out = new float [ v.length ] ;
Code	final boolean [] out = new float [ v.length ] ;
Distance : 3

54
Tree	final float [] out = new short [ v.length ] ;
Code	final float [] out = new short [ v.length ] ;
Distance : 3

55
Tree	final boolean [] out = new long [ v.length ] ;
Code	final boolean [] out = new long [ v.length ] ;
Distance : 3

56
Tree	final double [] nRows = new short [ v.length ] ;
Code	final double [] nRows = new short [ v.length ] ;
Distance : 3

57
Tree	final void [] nRows = new double [ v.length ] ;
Code	final void [] nRows = new double [ v.length ] ;
Distance : 3

58
Tree	final long [] out = new float [ v.length ] ;
Code	final long [] out = new float [ v.length ] ;
Distance : 3

59
Tree	final void [] out = new int [ v.length ] ;
Code	final void [] out = new int [ v.length ] ;
Distance : 3

60
Tree	final long [] nRows = new byte [ v.length ] ;
Code	final long [] nRows = new byte [ v.length ] ;
Distance : 4

61
Tree	final int [] out = new short [ v.length ] ;
Code	final int [] out = new short [ v.length ] ;
Distance : 3

62
Tree	protected double [] out = new double [ v.length ] ;
Code	protected double [] out = new double [ v.length ] ;
Distance : 2

63
Tree	final void [] out = new boolean [ v.length ] ;
Code	final void [] out = new boolean [ v.length ] ;
Distance : 3

64
Tree	final boolean [] out = new char [ v.length ] ;
Code	final boolean [] out = new char [ v.length ] ;
Distance : 3

65
Tree	final boolean [] out = new void [ v.length ] ;
Code	final boolean [] out = new void [ v.length ] ;
Distance : 3

66
Tree	final byte [] out = new float [ v.length ] ;
Code	final byte [] out = new float [ v.length ] ;
Distance : 3

67
Tree	final boolean [] out = new byte [ v.length ] ;
Code	final boolean [] out = new byte [ v.length ] ;
Distance : 3

68
Tree	final byte [] out = new long [ v.length ] ;
Code	final byte [] out = new long [ v.length ] ;
Distance : 3

69
Tree	abstract double [] nRows = new double [ v.length ] ;
Code	abstract double [] nRows = new double [ v.length ] ;
Distance : 3

70
Tree	final char [] nRows = new double [ v.length ] ;
Code	final char [] nRows = new double [ v.length ] ;
Distance : 3

71
Tree	final long [] out = new char [ v.length ] ;
Code	final long [] out = new char [ v.length ] ;
Distance : 3

72
Tree	final byte [] out = new int [ v.length ] ;
Code	final byte [] out = new int [ v.length ] ;
Distance : 3

73
Tree	final int [] out = new char [ v.length ] ;
Code	final int [] out = new char [ v.length ] ;
Distance : 3

74
Tree	final long [] out = new void [ v.length ] ;
Code	final long [] out = new void [ v.length ] ;
Distance : 3

75
Tree	final long [] out = new byte [ v.length ] ;
Code	final long [] out = new byte [ v.length ] ;
Distance : 3

76
Tree	final char [] out = new int [ v.length ] ;
Code	final char [] out = new int [ v.length ] ;
Distance : 3

77
Tree	final short [] nRows = new double [ v.length ] ;
Code	final short [] nRows = new double [ v.length ] ;
Distance : 3

78
Tree	abstract double [] out = new int [ v.length ] ;
Code	abstract double [] out = new int [ v.length ] ;
Distance : 3

79
Tree	final short [] out = new int [ v.length ] ;
Code	final short [] out = new int [ v.length ] ;
Distance : 3

80
Tree	public double [] out = new boolean [ v.length ] ;
Code	public double [] out = new boolean [ v.length ] ;
Distance : 3

81
Tree	public double [] out = new int [ v.length ] ;
Code	public double [] out = new int [ v.length ] ;
Distance : 3

82
Tree	public float [] out = new double [ v.length ] ;
Code	public float [] out = new double [ v.length ] ;
Distance : 3

83
Tree	final char [] out = new boolean [ v.length ] ;
Code	final char [] out = new boolean [ v.length ] ;
Distance : 3

84
Tree	final float [] nRows = new boolean [ v.length ] ;
Code	final float [] nRows = new boolean [ v.length ] ;
Distance : 4

85
Tree	synchronized double [] out = new double [ v.length ] ;
Code	synchronized double [] out = new double [ v.length ] ;
Distance : 2

86
Tree	abstract double [] out = new boolean [ v.length ] ;
Code	abstract double [] out = new boolean [ v.length ] ;
Distance : 3

87
Tree	final void [] out = new float [ v.length ] ;
Code	final void [] out = new float [ v.length ] ;
Distance : 3

88
Tree	final short [] out = new boolean [ v.length ] ;
Code	final short [] out = new boolean [ v.length ] ;
Distance : 3

89
Tree	final boolean [] out = new short [ v.length ] ;
Code	final boolean [] out = new short [ v.length ] ;
Distance : 3

90
Tree	final int [] nRows = new int [ v.length ] ;
Code	final int [] nRows = new int [ v.length ] ;
Distance : 4

91
Tree	final void [] out = new long [ v.length ] ;
Code	final void [] out = new long [ v.length ] ;
Distance : 3

92
Tree	final byte [] out = new char [ v.length ] ;
Code	final byte [] out = new char [ v.length ] ;
Distance : 3

93
Tree	final byte [] out = new byte [ v.length ] ;
Code	final byte [] out = new byte [ v.length ] ;
Distance : 3

94
Tree	public int [] out = new double [ v.length ] ;
Code	public int [] out = new double [ v.length ] ;
Distance : 3

95
Tree	final byte [] out = new void [ v.length ] ;
Code	final byte [] out = new void [ v.length ] ;
Distance : 3

96
Tree	abstract float [] out = new double [ v.length ] ;
Code	abstract float [] out = new double [ v.length ] ;
Distance : 3

97
Tree	public double [] nRows = new double [ v.length ] ;
Code	public double [] nRows = new double [ v.length ] ;
Distance : 3

98
Tree	final int [] nRows = new boolean [ v.length ] ;
Code	final int [] nRows = new boolean [ v.length ] ;
Distance : 4

99
Tree	abstract boolean [] out = new double [ v.length ] ;
Code	abstract boolean [] out = new double [ v.length ] ;
Distance : 3

100
Tree	final long [] out = new short [ v.length ] ;
Code	final long [] out = new short [ v.length ] ;
Distance : 3

101
Tree	public double [] out = new float [ v.length ] ;
Code	public double [] out = new float [ v.length ] ;
Distance : 3

102
Tree	public boolean [] out = new double [ v.length ] ;
Code	public boolean [] out = new double [ v.length ] ;
Distance : 3

103
Tree	static double [] nRows = new double [ v.length ] ;
Code	static double [] nRows = new double [ v.length ] ;
Distance : 3

104
Tree	final void [] out = new void [ v.length ] ;
Code	final void [] out = new void [ v.length ] ;
Distance : 3

105
Tree	abstract double [] out = new float [ v.length ] ;
Code	abstract double [] out = new float [ v.length ] ;
Distance : 3

106
Tree	public double [] out = new long [ v.length ] ;
Code	public double [] out = new long [ v.length ] ;
Distance : 3

107
Tree	final float [] nRows = new float [ v.length ] ;
Code	final float [] nRows = new float [ v.length ] ;
Distance : 4

108
Tree	final char [] out = new float [ v.length ] ;
Code	final char [] out = new float [ v.length ] ;
Distance : 3

109
Tree	final byte [] out = new short [ v.length ] ;
Code	final byte [] out = new short [ v.length ] ;
Distance : 3

110
Tree	final void [] out = new char [ v.length ] ;
Code	final void [] out = new char [ v.length ] ;
Distance : 3

111
Tree	final char [] out = new long [ v.length ] ;
Code	final char [] out = new long [ v.length ] ;
Distance : 3

112
Tree	final float [] nRows = new long [ v.length ] ;
Code	final float [] nRows = new long [ v.length ] ;
Distance : 4

113
Tree	final void [] out = new byte [ v.length ] ;
Code	final void [] out = new byte [ v.length ] ;
Distance : 3

114
Tree	final short [] out = new float [ v.length ] ;
Code	final short [] out = new float [ v.length ] ;
Distance : 3

115
Tree	static float [] out = new double [ v.length ] ;
Code	static float [] out = new double [ v.length ] ;
Distance : 3

116
Tree	static double [] out = new int [ v.length ] ;
Code	static double [] out = new int [ v.length ] ;
Distance : 3

117
Tree	public double [] out = new char [ v.length ] ;
Code	public double [] out = new char [ v.length ] ;
Distance : 3

118
Tree	final short [] out = new long [ v.length ] ;
Code	final short [] out = new long [ v.length ] ;
Distance : 3

119
Tree	final int [] nRows = new float [ v.length ] ;
Code	final int [] nRows = new float [ v.length ] ;
Distance : 4

120
Tree	abstract double [] out = new long [ v.length ] ;
Code	abstract double [] out = new long [ v.length ] ;
Distance : 3

121
Tree	static double [] out = new boolean [ v.length ] ;
Code	static double [] out = new boolean [ v.length ] ;
Distance : 3

122
Tree	public double [] out = new byte [ v.length ] ;
Code	public double [] out = new byte [ v.length ] ;
Distance : 3

123
Tree	final int [] nRows = new long [ v.length ] ;
Code	final int [] nRows = new long [ v.length ] ;
Distance : 4

124
Tree	final boolean [] nRows = new int [ v.length ] ;
Code	final boolean [] nRows = new int [ v.length ] ;
Distance : 4

125
Tree	public double [] out = new void [ v.length ] ;
Code	public double [] out = new void [ v.length ] ;
Distance : 3

126
Tree	final boolean [] nRows = new boolean [ v.length ] ;
Code	final boolean [] nRows = new boolean [ v.length ] ;
Distance : 4

127
Tree	abstract double [] out = new void [ v.length ] ;
Code	abstract double [] out = new void [ v.length ] ;
Distance : 3

128
Tree	final void [] out = new short [ v.length ] ;
Code	final void [] out = new short [ v.length ] ;
Distance : 3

129
Tree	final long [] nRows = new int [ v.length ] ;
Code	final long [] nRows = new int [ v.length ] ;
Distance : 4

130
Tree	static boolean [] out = new double [ v.length ] ;
Code	static boolean [] out = new double [ v.length ] ;
Distance : 3

131
Tree	static int [] out = new double [ v.length ] ;
Code	static int [] out = new double [ v.length ] ;
Distance : 3

132
Tree	abstract double [] out = new char [ v.length ] ;
Code	abstract double [] out = new char [ v.length ] ;
Distance : 3

133
Tree	final char [] out = new char [ v.length ] ;
Code	final char [] out = new char [ v.length ] ;
Distance : 3

134
Tree	final float [] nRows = new char [ v.length ] ;
Code	final float [] nRows = new char [ v.length ] ;
Distance : 4

135
Tree	final float [] nRows = new void [ v.length ] ;
Code	final float [] nRows = new void [ v.length ] ;
Distance : 4

136
Tree	abstract double [] out = new byte [ v.length ] ;
Code	abstract double [] out = new byte [ v.length ] ;
Distance : 3

137
Tree	final char [] out = new byte [ v.length ] ;
Code	final char [] out = new byte [ v.length ] ;
Distance : 3

138
Tree	final char [] out = new void [ v.length ] ;
Code	final char [] out = new void [ v.length ] ;
Distance : 3

139
Tree	final long [] nRows = new boolean [ v.length ] ;
Code	final long [] nRows = new boolean [ v.length ] ;
Distance : 4

140
Tree	final float [] nRows = new byte [ v.length ] ;
Code	final float [] nRows = new byte [ v.length ] ;
Distance : 4

141
Tree	final short [] out = new char [ v.length ] ;
Code	final short [] out = new char [ v.length ] ;
Distance : 3

142
Tree	public double [] out = new short [ v.length ] ;
Code	public double [] out = new short [ v.length ] ;
Distance : 3

143
Tree	final short [] out = new void [ v.length ] ;
Code	final short [] out = new void [ v.length ] ;
Distance : 3

144
Tree	public long [] out = new double [ v.length ] ;
Code	public long [] out = new double [ v.length ] ;
Distance : 3

145
Tree	final short [] out = new byte [ v.length ] ;
Code	final short [] out = new byte [ v.length ] ;
Distance : 3

146
Tree	private double [] nRows = new double [ v.length ] ;
Code	private double [] nRows = new double [ v.length ] ;
Distance : 3

147
Tree	static double [] out = new float [ v.length ] ;
Code	static double [] out = new float [ v.length ] ;
Distance : 3

148
Tree	abstract int [] out = new double [ v.length ] ;
Code	abstract int [] out = new double [ v.length ] ;
Distance : 3

149
Tree	private float [] out = new double [ v.length ] ;
Code	private float [] out = new double [ v.length ] ;
Distance : 3

150
Tree	final int [] nRows = new void [ v.length ] ;
Code	final int [] nRows = new void [ v.length ] ;
Distance : 4

151
Tree	final int [] nRows = new byte [ v.length ] ;
Code	final int [] nRows = new byte [ v.length ] ;
Distance : 4

152
Tree	abstract long [] out = new double [ v.length ] ;
Code	abstract long [] out = new double [ v.length ] ;
Distance : 3

153
Tree	final byte [] nRows = new int [ v.length ] ;
Code	final byte [] nRows = new int [ v.length ] ;
Distance : 4

154
Tree	private double [] out = new int [ v.length ] ;
Code	private double [] out = new int [ v.length ] ;
Distance : 3

155
Tree	private double [] out = new boolean [ v.length ] ;
Code	private double [] out = new boolean [ v.length ] ;
Distance : 3

156
Tree	public byte [] out = new double [ v.length ] ;
Code	public byte [] out = new double [ v.length ] ;
Distance : 3

157
Tree	final byte [] nRows = new boolean [ v.length ] ;
Code	final byte [] nRows = new boolean [ v.length ] ;
Distance : 4

158
Tree	abstract double [] out = new short [ v.length ] ;
Code	abstract double [] out = new short [ v.length ] ;
Distance : 3

159
Tree	final boolean [] nRows = new float [ v.length ] ;
Code	final boolean [] nRows = new float [ v.length ] ;
Distance : 4

160
Tree	static double [] out = new long [ v.length ] ;
Code	static double [] out = new long [ v.length ] ;
Distance : 3

161
Tree	final float [] nRows = new short [ v.length ] ;
Code	final float [] nRows = new short [ v.length ] ;
Distance : 4

162
Tree	public void [] out = new double [ v.length ] ;
Code	public void [] out = new double [ v.length ] ;
Distance : 3

163
Tree	final char [] out = new short [ v.length ] ;
Code	final char [] out = new short [ v.length ] ;
Distance : 3

164
Tree	abstract byte [] out = new double [ v.length ] ;
Code	abstract byte [] out = new double [ v.length ] ;
Distance : 3

165
Tree	final boolean [] nRows = new long [ v.length ] ;
Code	final boolean [] nRows = new long [ v.length ] ;
Distance : 4

166
Tree	private boolean [] out = new double [ v.length ] ;
Code	private boolean [] out = new double [ v.length ] ;
Distance : 3

167
Tree	final short [] out = new short [ v.length ] ;
Code	final short [] out = new short [ v.length ] ;
Distance : 3

168
Tree	final long [] nRows = new float [ v.length ] ;
Code	final long [] nRows = new float [ v.length ] ;
Distance : 4

169
Tree	final int [] nRows = new short [ v.length ] ;
Code	final int [] nRows = new short [ v.length ] ;
Distance : 4

170
Tree	static double [] out = new void [ v.length ] ;
Code	static double [] out = new void [ v.length ] ;
Distance : 3

171
Tree	protected double [] nRows = new double [ v.length ] ;
Code	protected double [] nRows = new double [ v.length ] ;
Distance : 3

172
Tree	abstract void [] out = new double [ v.length ] ;
Code	abstract void [] out = new double [ v.length ] ;
Distance : 3

173
Tree	final long [] nRows = new long [ v.length ] ;
Code	final long [] nRows = new long [ v.length ] ;
Distance : 4

174
Tree	private int [] out = new double [ v.length ] ;
Code	private int [] out = new double [ v.length ] ;
Distance : 3

175
Tree	final int [] nRows = new char [ v.length ] ;
Code	final int [] nRows = new char [ v.length ] ;
Distance : 4

176
Tree	static double [] out = new char [ v.length ] ;
Code	static double [] out = new char [ v.length ] ;
Distance : 3

177
Tree	protected float [] out = new double [ v.length ] ;
Code	protected float [] out = new double [ v.length ] ;
Distance : 3

178
Tree	final void [] nRows = new boolean [ v.length ] ;
Code	final void [] nRows = new boolean [ v.length ] ;
Distance : 4

179
Tree	static double [] out = new byte [ v.length ] ;
Code	static double [] out = new byte [ v.length ] ;
Distance : 3

180
Tree	private double [] out = new float [ v.length ] ;
Code	private double [] out = new float [ v.length ] ;
Distance : 3

181
Tree	protected double [] out = new int [ v.length ] ;
Code	protected double [] out = new int [ v.length ] ;
Distance : 3

182
Tree	abstract char [] out = new double [ v.length ] ;
Code	abstract char [] out = new double [ v.length ] ;
Distance : 3

183
Tree	final boolean [] nRows = new char [ v.length ] ;
Code	final boolean [] nRows = new char [ v.length ] ;
Distance : 4

184
Tree	protected double [] out = new boolean [ v.length ] ;
Code	protected double [] out = new boolean [ v.length ] ;
Distance : 3

185
Tree	final boolean [] nRows = new byte [ v.length ] ;
Code	final boolean [] nRows = new byte [ v.length ] ;
Distance : 4

186
Tree	final long [] out = new long [ v.length ] ;
Code	final long [] out = new long [ v.length ] ;
Distance : 3

187
Tree	final byte [] nRows = new float [ v.length ] ;
Code	final byte [] nRows = new float [ v.length ] ;
Distance : 4

188
Tree	final byte [] nRows = new long [ v.length ] ;
Code	final byte [] nRows = new long [ v.length ] ;
Distance : 4

189
Tree	public char [] out = new double [ v.length ] ;
Code	public char [] out = new double [ v.length ] ;
Distance : 3

190
Tree	protected boolean [] out = new double [ v.length ] ;
Code	protected boolean [] out = new double [ v.length ] ;
Distance : 3

191
Tree	static void [] out = new double [ v.length ] ;
Code	static void [] out = new double [ v.length ] ;
Distance : 3

192
Tree	final long [] nRows = new char [ v.length ] ;
Code	final long [] nRows = new char [ v.length ] ;
Distance : 4

193
Tree	static long [] out = new double [ v.length ] ;
Code	static long [] out = new double [ v.length ] ;
Distance : 3

194
Tree	abstract float [] nRows = new double [ v.length ] ;
Code	abstract float [] nRows = new double [ v.length ] ;
Distance : 4

195
Tree	private double [] out = new long [ v.length ] ;
Code	private double [] out = new long [ v.length ] ;
Distance : 3

196
Tree	static double [] out = new short [ v.length ] ;
Code	static double [] out = new short [ v.length ] ;
Distance : 3

197
Tree	final void [] nRows = new int [ v.length ] ;
Code	final void [] nRows = new int [ v.length ] ;
Distance : 4

198
Tree	final boolean [] nRows = new void [ v.length ] ;
Code	final boolean [] nRows = new void [ v.length ] ;
Distance : 4

199
Tree	final long [] nRows = new void [ v.length ] ;
Code	final long [] nRows = new void [ v.length ] ;
Distance : 4

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int start = getNumObjectiveFunctions () ; /
Code	int start = getNumObjectiveFunctions () ; /
Distance : 5

1
Tree	int start = getNumObjectiveFunctions () ; IllegalArgumentException
Code	int start = getNumObjectiveFunctions () ; IllegalArgumentException
Distance : 5

2
Tree	int start = getNumObjectiveFunctions () ; createIllegalArgumentException
Code	int start = getNumObjectiveFunctions () ; createIllegalArgumentException
Distance : 5

3
Tree	int start = getNumObjectiveFunctions () ; parent
Code	int start = getNumObjectiveFunctions () ; parent
Distance : 5

4
Tree	int start = getNumObjectiveFunctions () ; fireChangeEvent
Code	int start = getNumObjectiveFunctions () ; fireChangeEvent
Distance : 5

5
Tree	int start = getNumObjectiveFunctions () ; ArrayList
Code	int start = getNumObjectiveFunctions () ; ArrayList
Distance : 5

6
Tree	int start = getNumObjectiveFunctions () ; testSame
Code	int start = getNumObjectiveFunctions () ; testSame
Distance : 5

7
Tree	int start = getNumObjectiveFunctions () ; x
Code	int start = getNumObjectiveFunctions () ; x
Distance : 5

8
Tree	int start = getNumObjectiveFunctions () ; FastMath
Code	int start = getNumObjectiveFunctions () ; FastMath
Distance : 5

9
Tree	int start = getNumObjectiveFunctions () ; expected
Code	int start = getNumObjectiveFunctions () ; expected
Distance : 5

10
Tree	int start = getNumObjectiveFunctions () ; {
Code	int start = getNumObjectiveFunctions () ; {
Distance : 5

11
Tree	int start = getNumObjectiveFunctions () ; ()
Code	int start = getNumObjectiveFunctions () ; ()
Distance : 5

12
Tree	int start = getNumObjectiveFunctions () ; ;
Code	int start = getNumObjectiveFunctions () ; ;
Distance : 4

13
Tree	int start = getNumObjectiveFunctions () ; int
Code	int start = getNumObjectiveFunctions () ; int
Distance : 5

14
Tree	int start = getNumObjectiveFunctions () ; []
Code	int start = getNumObjectiveFunctions () ; []
Distance : 5

15
Tree	int start = getNumObjectiveFunctions () ; NodeUtil
Code	int start = getNumObjectiveFunctions () ; NodeUtil
Distance : 5

16
Tree	int start = getNumObjectiveFunctions () ; ==
Code	int start = getNumObjectiveFunctions () ; ==
Distance : 5

17
Tree	int start = getNumObjectiveFunctions () ; true
Code	int start = getNumObjectiveFunctions () ; true
Distance : 5

18
Tree	int start = getNumObjectiveFunctions () ; getFirstChild
Code	int start = getNumObjectiveFunctions () ; getFirstChild
Distance : 5

19
Tree	int start = getNumObjectiveFunctions () ; returnZero
Code	int start = getNumObjectiveFunctions () ; returnZero
Distance : 5

20
Tree	int start = getNumObjectiveFunctions () ; scope
Code	int start = getNumObjectiveFunctions () ; scope
Distance : 5

21
Tree	int start = getNumObjectiveFunctions () ; throws
Code	int start = getNumObjectiveFunctions () ; throws
Distance : 5

22
Tree	int start = getNumObjectiveFunctions () ; reportCodeChange
Code	int start = getNumObjectiveFunctions () ; reportCodeChange
Distance : 5

23
Tree	int start = getNumObjectiveFunctions () ; clone
Code	int start = getNumObjectiveFunctions () ; clone
Distance : 5

24
Tree	int start = getNumObjectiveFunctions () ; assertThat
Code	int start = getNumObjectiveFunctions () ; assertThat
Distance : 5

25
Tree	int start = getNumObjectiveFunctions () ; t
Code	int start = getNumObjectiveFunctions () ; t
Distance : 5

26
Tree	int start = getNumObjectiveFunctions () ; =
Code	int start = getNumObjectiveFunctions () ; =
Distance : 5

27
Tree	int start = getNumObjectiveFunctions () ; }
Code	int start = getNumObjectiveFunctions () ; }
Distance : 5

28
Tree	int start = getNumObjectiveFunctions () ; .
Code	int start = getNumObjectiveFunctions () ; .
Distance : 5

29
Tree	int start = getNumObjectiveFunctions () ; ,
Code	int start = getNumObjectiveFunctions () ; ,
Distance : 5

30
Tree	int start = getNumObjectiveFunctions () ; STRING_CONSTANT
Code	int start = getNumObjectiveFunctions () ; STRING_CONSTANT
Distance : 5

31
Tree	int start = getNumObjectiveFunctions () ; new
Code	int start = getNumObjectiveFunctions () ; new
Distance : 5

32
Tree	int start = getNumObjectiveFunctions () ; LINE_JOINER
Code	int start = getNumObjectiveFunctions () ; LINE_JOINER
Distance : 5

33
Tree	int start = getNumObjectiveFunctions () ; str
Code	int start = getNumObjectiveFunctions () ; str
Distance : 5

34
Tree	int start = getNumObjectiveFunctions () ; wanted
Code	int start = getNumObjectiveFunctions () ; wanted
Distance : 5

35
Tree	int start = getNumObjectiveFunctions () ; long
Code	int start = getNumObjectiveFunctions () ; long
Distance : 5

36
Tree	int start = getNumObjectiveFunctions () ; value
Code	int start = getNumObjectiveFunctions () ; value
Distance : 5

37
Tree	int start = getNumObjectiveFunctions () ; super
Code	int start = getNumObjectiveFunctions () ; super
Distance : 5

38
Tree	int start = getNumObjectiveFunctions () ; double
Code	int start = getNumObjectiveFunctions () ; double
Distance : 5

39
Tree	int start = getNumObjectiveFunctions () ; false
Code	int start = getNumObjectiveFunctions () ; false
Distance : 5

40
Tree	int start = getNumObjectiveFunctions () ; i
Code	int start = getNumObjectiveFunctions () ; i
Distance : 5

41
Tree	int start = getNumObjectiveFunctions () ; !=
Code	int start = getNumObjectiveFunctions () ; !=
Distance : 5

42
Tree	int start = getNumObjectiveFunctions () ; <s>
Code	int start = getNumObjectiveFunctions () ; <s>
Distance : 5

43
Tree	int start = getNumObjectiveFunctions () ; nullNotPermitted
Code	int start = getNumObjectiveFunctions () ; nullNotPermitted
Distance : 5

44
Tree	int start = getNumObjectiveFunctions () ; <blank>
Code	int start = getNumObjectiveFunctions () ; <blank>
Distance : 5

45
Tree	int start = getNumObjectiveFunctions () ; )
Code	int start = getNumObjectiveFunctions () ; )
Distance : 5

46
Tree	int start = getNumObjectiveFunctions () ; name
Code	int start = getNumObjectiveFunctions () ; name
Distance : 5

47
Tree	int start = getNumObjectiveFunctions () ; invocation
Code	int start = getNumObjectiveFunctions () ; invocation
Distance : 5

48
Tree	int start = getNumObjectiveFunctions () ; (
Code	int start = getNumObjectiveFunctions () ; (
Distance : 5

49
Tree	int start = getNumObjectiveFunctions () ; void
Code	int start = getNumObjectiveFunctions () ; void
Distance : 5

50
Tree	int start = getNumObjectiveFunctions () ; for
Code	int start = getNumObjectiveFunctions () ; for
Distance : 5

51
Tree	int start = getNumObjectiveFunctions () ; List
Code	int start = getNumObjectiveFunctions () ; List
Distance : 5

52
Tree	int start = getNumObjectiveFunctions () ; :
Code	int start = getNumObjectiveFunctions () ; :
Distance : 5

53
Tree	int start = getNumObjectiveFunctions () ; getParent
Code	int start = getNumObjectiveFunctions () ; getParent
Distance : 5

54
Tree	int start = getNumObjectiveFunctions () ; setUp
Code	int start = getNumObjectiveFunctions () ; setUp
Distance : 5

55
Tree	int start = getNumObjectiveFunctions () ; Args
Code	int start = getNumObjectiveFunctions () ; Args
Distance : 5

56
Tree	float start = getNumObjectiveFunctions () ;
Code	float start = getNumObjectiveFunctions () ;
Distance : 5

57
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

58
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

59
Tree	char start = getNumObjectiveFunctions () ;
Code	char start = getNumObjectiveFunctions () ;
Distance : 5

60
Tree	byte start = getNumObjectiveFunctions () ;
Code	byte start = getNumObjectiveFunctions () ;
Distance : 5

61
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

62
Tree	void start = getNumObjectiveFunctions () ;
Code	void start = getNumObjectiveFunctions () ;
Distance : 5

63
Tree	short start = getNumObjectiveFunctions () ;
Code	short start = getNumObjectiveFunctions () ;
Distance : 5

64
Tree	short start = getNumObjectiveFunctions () ;
Code	short start = getNumObjectiveFunctions () ;
Distance : 5

65
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

66
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

67
Tree	char start = getNumObjectiveFunctions () ;
Code	char start = getNumObjectiveFunctions () ;
Distance : 5

68
Tree	byte start = getNumObjectiveFunctions () ;
Code	byte start = getNumObjectiveFunctions () ;
Distance : 5

69
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

70
Tree	void start = getNumObjectiveFunctions () ;
Code	void start = getNumObjectiveFunctions () ;
Distance : 5

71
Tree	float start = getNumObjectiveFunctions () ;
Code	float start = getNumObjectiveFunctions () ;
Distance : 5

72
Tree	int start = getNumObjectiveFunctions () ; array
Code	int start = getNumObjectiveFunctions () ; array
Distance : 5

73
Tree	int start = getNumObjectiveFunctions () ; Invocation
Code	int start = getNumObjectiveFunctions () ; Invocation
Distance : 5

74
Tree	int start = getNumObjectiveFunctions () ; <>
Code	int start = getNumObjectiveFunctions () ; <>
Distance : 5

75
Tree	int start = getNumObjectiveFunctions () ; StrBuilder
Code	int start = getNumObjectiveFunctions () ; StrBuilder
Distance : 5

76
Tree	int start = getNumObjectiveFunctions () ; assertTrue
Code	int start = getNumObjectiveFunctions () ; assertTrue
Distance : 5

77
Tree	int start = getNumObjectiveFunctions () ; externs
Code	int start = getNumObjectiveFunctions () ; externs
Distance : 5

78
Tree	int start = getNumObjectiveFunctions () ; d
Code	int start = getNumObjectiveFunctions () ; d
Distance : 5

79
Tree	int start = getNumObjectiveFunctions () ; equals
Code	int start = getNumObjectiveFunctions () ; equals
Distance : 5

80
Tree	int start = getNumObjectiveFunctions () ; sb
Code	int start = getNumObjectiveFunctions () ; sb
Distance : 5

81
Tree	int start = getNumObjectiveFunctions () ; UnivariateFunction
Code	int start = getNumObjectiveFunctions () ; UnivariateFunction
Distance : 5

82
Tree	int start = getNumObjectiveFunctions () ; mockingProgress
Code	int start = getNumObjectiveFunctions () ; mockingProgress
Distance : 5

83
Tree	int start = getNumObjectiveFunctions () ; return;
Code	int start = getNumObjectiveFunctions () ; return;
Distance : 5

84
Tree	int start = getNumObjectiveFunctions () ; mode
Code	int start = getNumObjectiveFunctions () ; mode
Distance : 5

85
Tree	int start = getNumObjectiveFunctions () ; try
Code	int start = getNumObjectiveFunctions () ; try
Distance : 5

86
Tree	int start = getNumObjectiveFunctions () ; sqrt
Code	int start = getNumObjectiveFunctions () ; sqrt
Distance : 5

87
Tree	int start = getNumObjectiveFunctions () ; fail
Code	int start = getNumObjectiveFunctions () ; fail
Distance : 5

88
Tree	int start = getNumObjectiveFunctions () ; result
Code	int start = getNumObjectiveFunctions () ; result
Distance : 5

89
Tree	int start = getNumObjectiveFunctions () ; assertEquals
Code	int start = getNumObjectiveFunctions () ; assertEquals
Distance : 5

90
Tree	int start = getNumObjectiveFunctions () ; !
Code	int start = getNumObjectiveFunctions () ; !
Distance : 5

91
Tree	int start = getNumObjectiveFunctions () ; int
Code	int start = getNumObjectiveFunctions () ; int
Distance : 5

92
Tree	int start = getNumObjectiveFunctions () ; checkState
Code	int start = getNumObjectiveFunctions () ; checkState
Distance : 5

93
Tree	int start = getNumObjectiveFunctions () ; out
Code	int start = getNumObjectiveFunctions () ; out
Distance : 5

94
Tree	int start = getNumObjectiveFunctions () ; node
Code	int start = getNumObjectiveFunctions () ; node
Distance : 5

95
Tree	int start = getNumObjectiveFunctions () ; index
Code	int start = getNumObjectiveFunctions () ; index
Distance : 5

96
Tree	int start = getNumObjectiveFunctions () ; invocations
Code	int start = getNumObjectiveFunctions () ; invocations
Distance : 5

97
Tree	int start = getNumObjectiveFunctions () ; reportMatcher
Code	int start = getNumObjectiveFunctions () ; reportMatcher
Distance : 5

98
Tree	int start = getNumObjectiveFunctions () ; isEmpty
Code	int start = getNumObjectiveFunctions () ; isEmpty
Distance : 5

99
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

100
Tree	int start = getNumObjectiveFunctions () ; static
Code	int start = getNumObjectiveFunctions () ; static
Distance : 5

101
Tree	int start = getNumObjectiveFunctions () ; if
Code	int start = getNumObjectiveFunctions () ; if
Distance : 5

102
Tree	int start = getNumObjectiveFunctions () ; return
Code	int start = getNumObjectiveFunctions () ; return
Distance : 5

103
Tree	int start = getNumObjectiveFunctions () ; NUMBER_CONSTANT
Code	int start = getNumObjectiveFunctions () ; NUMBER_CONSTANT
Distance : 4

104
Tree	int start = getNumObjectiveFunctions () ; this
Code	int start = getNumObjectiveFunctions () ; this
Distance : 5

105
Tree	int start = getNumObjectiveFunctions () ; final
Code	int start = getNumObjectiveFunctions () ; final
Distance : 5

106
Tree	int start = getNumObjectiveFunctions () ; serialised
Code	int start = getNumObjectiveFunctions () ; serialised
Distance : 5

107
Tree	int start = getNumObjectiveFunctions () ; getInstance
Code	int start = getNumObjectiveFunctions () ; getInstance
Distance : 5

108
Tree	int start = getNumObjectiveFunctions () ; *
Code	int start = getNumObjectiveFunctions () ; *
Distance : 5

109
Tree	int start = getNumObjectiveFunctions () ; paint
Code	int start = getNumObjectiveFunctions () ; paint
Distance : 5

110
Tree	int start = getNumObjectiveFunctions () ; setAcceptedLanguage
Code	int start = getNumObjectiveFunctions () ; setAcceptedLanguage
Distance : 5

111
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

112
Tree	int start = getNumObjectiveFunctions () ; -
Code	int start = getNumObjectiveFunctions () ; -
Distance : 5

113
Tree	int start = getNumObjectiveFunctions () ; v
Code	int start = getNumObjectiveFunctions () ; v
Distance : 5

114
Tree	int start = getNumObjectiveFunctions () ; Exception
Code	int start = getNumObjectiveFunctions () ; Exception
Distance : 5

115
Tree	int start = getNumObjectiveFunctions () ; Node
Code	int start = getNumObjectiveFunctions () ; Node
Distance : 5

116
Tree	int start = getNumObjectiveFunctions () ; c
Code	int start = getNumObjectiveFunctions () ; c
Distance : 5

117
Tree	int start = getNumObjectiveFunctions () ; notifyListeners
Code	int start = getNumObjectiveFunctions () ; notifyListeners
Distance : 5

118
Tree	int start = getNumObjectiveFunctions () ; <
Code	int start = getNumObjectiveFunctions () ; <
Distance : 5

119
Tree	int start = getNumObjectiveFunctions () ; lines
Code	int start = getNumObjectiveFunctions () ; lines
Distance : 5

120
Tree	int start = getNumObjectiveFunctions () ; >
Code	int start = getNumObjectiveFunctions () ; >
Distance : 5

121
Tree	int start = getNumObjectiveFunctions () ; test
Code	int start = getNumObjectiveFunctions () ; test
Distance : 5

122
Tree	int start = getNumObjectiveFunctions () ; traverseEs6
Code	int start = getNumObjectiveFunctions () ; traverseEs6
Distance : 5

123
Tree	int start = getNumObjectiveFunctions () ; stroke
Code	int start = getNumObjectiveFunctions () ; stroke
Distance : 5

124
Tree	int start = getNumObjectiveFunctions () ; [
Code	int start = getNumObjectiveFunctions () ; [
Distance : 5

125
Tree	int start = getNumObjectiveFunctions () ; ]
Code	int start = getNumObjectiveFunctions () ; ]
Distance : 5

126
Tree	int start = getNumObjectiveFunctions () ; boolean
Code	int start = getNumObjectiveFunctions () ; boolean
Distance : 5

127
Tree	int start = getNumObjectiveFunctions () ; &&
Code	int start = getNumObjectiveFunctions () ; &&
Distance : 5

128
Tree	int start = getNumObjectiveFunctions () ; m
Code	int start = getNumObjectiveFunctions () ; m
Distance : 5

129
Tree	int start = getNumObjectiveFunctions () ; type
Code	int start = getNumObjectiveFunctions () ; type
Distance : 5

130
Tree	int start = getNumObjectiveFunctions () ; JSType
Code	int start = getNumObjectiveFunctions () ; JSType
Distance : 5

131
Tree	int start = getNumObjectiveFunctions () ; get
Code	int start = getNumObjectiveFunctions () ; get
Distance : 5

132
Tree	int start = getNumObjectiveFunctions () ; getMessage
Code	int start = getNumObjectiveFunctions () ; getMessage
Distance : 5

133
Tree	int start = getNumObjectiveFunctions () ; stream
Code	int start = getNumObjectiveFunctions () ; stream
Distance : 5

134
Tree	int start = getNumObjectiveFunctions () ; protected
Code	int start = getNumObjectiveFunctions () ; protected
Distance : 5

135
Tree	int start = getNumObjectiveFunctions () ; values
Code	int start = getNumObjectiveFunctions () ; values
Distance : 5

136
Tree	int start = getNumObjectiveFunctions () ; instant
Code	int start = getNumObjectiveFunctions () ; instant
Distance : 5

137
Tree	int start = getNumObjectiveFunctions () ; else
Code	int start = getNumObjectiveFunctions () ; else
Distance : 5

138
Tree	int start = getNumObjectiveFunctions () ; @
Code	int start = getNumObjectiveFunctions () ; @
Distance : 5

139
Tree	int start = getNumObjectiveFunctions () ; public
Code	int start = getNumObjectiveFunctions () ; public
Distance : 5

140
Tree	int start = getNumObjectiveFunctions () ; verify
Code	int start = getNumObjectiveFunctions () ; verify
Distance : 5

141
Tree	int start = getNumObjectiveFunctions () ; T
Code	int start = getNumObjectiveFunctions () ; T
Distance : 5

142
Tree	int start = getNumObjectiveFunctions () ; e
Code	int start = getNumObjectiveFunctions () ; e
Distance : 5

143
Tree	int start = getNumObjectiveFunctions () ; Object
Code	int start = getNumObjectiveFunctions () ; Object
Distance : 5

144
Tree	int start = getNumObjectiveFunctions () ; ParamChecks
Code	int start = getNumObjectiveFunctions () ; ParamChecks
Distance : 5

145
Tree	int start = getNumObjectiveFunctions () ; f
Code	int start = getNumObjectiveFunctions () ; f
Distance : 5

146
Tree	int start = getNumObjectiveFunctions () ; <=
Code	int start = getNumObjectiveFunctions () ; <=
Distance : 5

147
Tree	int start = getNumObjectiveFunctions () ; obj
Code	int start = getNumObjectiveFunctions () ; obj
Distance : 5

148
Tree	int start = getNumObjectiveFunctions () ; MutableTimePeriod
Code	int start = getNumObjectiveFunctions () ; MutableTimePeriod
Distance : 5

149
Tree	int start = getNumObjectiveFunctions () ; n
Code	int start = getNumObjectiveFunctions () ; n
Distance : 5

150
Tree	int start = getNumObjectiveFunctions () ; StringBuilder
Code	int start = getNumObjectiveFunctions () ; StringBuilder
Distance : 5

151
Tree	int start = getNumObjectiveFunctions () ; size
Code	int start = getNumObjectiveFunctions () ; size
Distance : 5

152
Tree	int start = getNumObjectiveFunctions () ; LanguageMode.ECMASCRIPT_2015
Code	int start = getNumObjectiveFunctions () ; LanguageMode.ECMASCRIPT_2015
Distance : 5

153
Tree	int start = getNumObjectiveFunctions () ; a
Code	int start = getNumObjectiveFunctions () ; a
Distance : 5

154
Tree	int start = getNumObjectiveFunctions () ; s
Code	int start = getNumObjectiveFunctions () ; s
Distance : 5

155
Tree	int start = getNumObjectiveFunctions () ; isNormalBlock
Code	int start = getNumObjectiveFunctions () ; isNormalBlock
Distance : 5

156
Tree	int start = getNumObjectiveFunctions () ; chrono
Code	int start = getNumObjectiveFunctions () ; chrono
Distance : 5

157
Tree	int start = getNumObjectiveFunctions () ; contains
Code	int start = getNumObjectiveFunctions () ; contains
Distance : 5

158
Tree	int start = getNumObjectiveFunctions () ; PeriodType
Code	int start = getNumObjectiveFunctions () ; PeriodType
Distance : 5

159
Tree	int start = getNumObjectiveFunctions () ; TestUtilities
Code	int start = getNumObjectiveFunctions () ; TestUtilities
Distance : 5

160
Tree	int start = getNumObjectiveFunctions () ; class
Code	int start = getNumObjectiveFunctions () ; class
Distance : 5

161
Tree	int start = getNumObjectiveFunctions () ; {}
Code	int start = getNumObjectiveFunctions () ; {}
Distance : 5

162
Tree	int start = getNumObjectiveFunctions () ; b
Code	int start = getNumObjectiveFunctions () ; b
Distance : 5

163
Tree	int start = getNumObjectiveFunctions () ; MathRuntimeException
Code	int start = getNumObjectiveFunctions () ; MathRuntimeException
Distance : 5

164
Tree	int start = getNumObjectiveFunctions () ; mock
Code	int start = getNumObjectiveFunctions () ; mock
Distance : 5

165
Tree	int start = getNumObjectiveFunctions () ; null
Code	int start = getNumObjectiveFunctions () ; null
Distance : 5

166
Tree	int start = getNumObjectiveFunctions () ; +
Code	int start = getNumObjectiveFunctions () ; +
Distance : 5

167
Tree	int start = getNumObjectiveFunctions () ; compiler
Code	int start = getNumObjectiveFunctions () ; compiler
Distance : 5

168
Tree	int start = getNumObjectiveFunctions () ; String
Code	int start = getNumObjectiveFunctions () ; String
Distance : 5

169
Tree	int start = getNumObjectiveFunctions () ; throw
Code	int start = getNumObjectiveFunctions () ; throw
Distance : 5

170
Tree	int start = getNumObjectiveFunctions () ; Fraction
Code	int start = getNumObjectiveFunctions () ; Fraction
Distance : 5

171
Tree	int start = getNumObjectiveFunctions () ; checkNotNull
Code	int start = getNumObjectiveFunctions () ; checkNotNull
Distance : 5

172
Tree	int start = getNumObjectiveFunctions () ; catch
Code	int start = getNumObjectiveFunctions () ; catch
Distance : 5

173
Tree	int start = getNumObjectiveFunctions () ; TestUtils
Code	int start = getNumObjectiveFunctions () ; TestUtils
Distance : 5

174
Tree	int start = getNumObjectiveFunctions () ; length
Code	int start = getNumObjectiveFunctions () ; length
Distance : 5

175
Tree	int start = getNumObjectiveFunctions () ; Double
Code	int start = getNumObjectiveFunctions () ; Double
Distance : 5

176
Tree	int start = getNumObjectiveFunctions () ; js
Code	int start = getNumObjectiveFunctions () ; js
Distance : 5

177
Tree	int start = getNumObjectiveFunctions () ; Preconditions
Code	int start = getNumObjectiveFunctions () ; Preconditions
Distance : 5

178
Tree	int start = getNumObjectiveFunctions () ; Override
Code	int start = getNumObjectiveFunctions () ; Override
Distance : 5

179
Tree	int start = getNumObjectiveFunctions () ; ?
Code	int start = getNumObjectiveFunctions () ; ?
Distance : 5

180
Tree	int start = getNumObjectiveFunctions () ; Assert
Code	int start = getNumObjectiveFunctions () ; Assert
Distance : 5

181
Tree	int start = getNumObjectiveFunctions () ; Integer
Code	int start = getNumObjectiveFunctions () ; Integer
Distance : 5

182
Tree	int start = getNumObjectiveFunctions () ; field
Code	int start = getNumObjectiveFunctions () ; field
Distance : 5

183
Tree	int start = getNumObjectiveFunctions () ; join
Code	int start = getNumObjectiveFunctions () ; join
Distance : 5

184
Tree	int start = getNumObjectiveFunctions () ; p
Code	int start = getNumObjectiveFunctions () ; p
Distance : 5

185
Tree	int start = getNumObjectiveFunctions () ; options
Code	int start = getNumObjectiveFunctions () ; options
Distance : 5

186
Tree	int start = getNumObjectiveFunctions () ; NodeTraversal
Code	int start = getNumObjectiveFunctions () ; NodeTraversal
Distance : 5

187
Tree	int start = getNumObjectiveFunctions () ; ex
Code	int start = getNumObjectiveFunctions () ; ex
Distance : 5

188
Tree	int start = getNumObjectiveFunctions () ; checkArgument
Code	int start = getNumObjectiveFunctions () ; checkArgument
Distance : 5

189
Tree	int start = getNumObjectiveFunctions () ; add
Code	int start = getNumObjectiveFunctions () ; add
Distance : 5

190
Tree	int start = getNumObjectiveFunctions () ; abs
Code	int start = getNumObjectiveFunctions () ; abs
Distance : 5

191
Tree	int start = getNumObjectiveFunctions () ; toString
Code	int start = getNumObjectiveFunctions () ; toString
Distance : 5

192
Tree	int start = getNumObjectiveFunctions () ; source
Code	int start = getNumObjectiveFunctions () ; source
Distance : 5

193
Tree	int start = getNumObjectiveFunctions () ; root
Code	int start = getNumObjectiveFunctions () ; root
Distance : 5

194
Tree	int start = getNumObjectiveFunctions () ; Math
Code	int start = getNumObjectiveFunctions () ; Math
Distance : 5

195
Tree	int start = getNumObjectiveFunctions () ; Class
Code	int start = getNumObjectiveFunctions () ; Class
Distance : 5

196
Tree	int start = getNumObjectiveFunctions () ; Test
Code	int start = getNumObjectiveFunctions () ; Test
Distance : 5

197
Tree	int start = getNumObjectiveFunctions () ; matcher
Code	int start = getNumObjectiveFunctions () ; matcher
Distance : 5

198
Tree	int start = getNumObjectiveFunctions () ; data
Code	int start = getNumObjectiveFunctions () ; data
Distance : 5

199
Tree	int start = getNumObjectiveFunctions () ; char
Code	int start = getNumObjectiveFunctions () ; char
Distance : 5

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Node
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Node
Distance : 3

1
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; parent
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; parent
Distance : 3

2
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; x
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; x
Distance : 3

3
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; testSame
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; testSame
Distance : 3

4
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ?
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ?
Distance : 3

5
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; checkNotNull
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; checkNotNull
Distance : 3

6
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; assertThat
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; assertThat
Distance : 3

7
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Integer
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Integer
Distance : 3

8
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Fraction
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Fraction
Distance : 3

9
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; node
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; node
Distance : 3

10
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; index
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; index
Distance : 3

11
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; toString
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; toString
Distance : 3

12
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; source
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; source
Distance : 3

13
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; options
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; options
Distance : 3

14
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; p
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; p
Distance : 3

15
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; @
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; @
Distance : 3

16
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; false
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; false
Distance : 3

17
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; double
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; double
Distance : 3

18
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ==
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ==
Distance : 3

19
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; void
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; void
Distance : 3

20
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; catch
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; catch
Distance : 3

21
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; throw
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; throw
Distance : 3

22
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; createIllegalArgumentException
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; createIllegalArgumentException
Distance : 3

23
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; test
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; test
Distance : 3

24
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <>
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <>
Distance : 3

25
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ParamChecks
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ParamChecks
Distance : 3

26
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; :
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; :
Distance : 3

27
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; fail
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; fail
Distance : 3

28
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; List
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; List
Distance : 3

29
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Args
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Args
Distance : 3

30
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; IllegalArgumentException
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; IllegalArgumentException
Distance : 3

31
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; reportCodeChange
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; reportCodeChange
Distance : 3

32
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; FastMath
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; FastMath
Distance : 3

33
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; expected
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; expected
Distance : 3

34
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ArrayList
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ArrayList
Distance : 3

35
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; fireChangeEvent
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; fireChangeEvent
Distance : 3

36
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; getInstance
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; getInstance
Distance : 3

37
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; serialised
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; serialised
Distance : 3

38
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; str
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; str
Distance : 3

39
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; LINE_JOINER
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; LINE_JOINER
Distance : 3

40
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Exception
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Exception
Distance : 3

41
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; invocation
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; invocation
Distance : 3

42
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; paint
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; paint
Distance : 3

43
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; m
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; m
Distance : 3

44
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; result
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; result
Distance : 3

45
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; try
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; try
Distance : 3

46
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; f
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; f
Distance : 3

47
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; array
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; array
Distance : 3

48
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Assert
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Assert
Distance : 3

49
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; []
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; []
Distance : 3

50
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; nullNotPermitted
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; nullNotPermitted
Distance : 3

51
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

52
Tree	void j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	void j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

53
Tree	short j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	short j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

54
Tree	float j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	float j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

55
Tree	byte n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	byte n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

56
Tree	short j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	short j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

57
Tree	short n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	short n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

58
Tree	float n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	float n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

59
Tree	void n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	void n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

60
Tree	char n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	char n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

61
Tree	boolean n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	boolean n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

62
Tree	long n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	long n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

63
Tree	double n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	double n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 5

64
Tree	int n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int n = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

65
Tree	short n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	short n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

66
Tree	float n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	float n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

67
Tree	void n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	void n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

68
Tree	byte n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	byte n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

69
Tree	char n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	char n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

70
Tree	boolean n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

71
Tree	long n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

72
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

73
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; v
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; v
Distance : 3

74
Tree	char j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	char j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

75
Tree	void j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	void j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

76
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; length
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; length
Distance : 3

77
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; TestUtils
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; TestUtils
Distance : 3

78
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; &&
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; &&
Distance : 3

79
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; super
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; super
Distance : 3

80
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; value
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; value
Distance : 3

81
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; T
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; T
Distance : 3

82
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; -
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; -
Distance : 3

83
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Preconditions
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Preconditions
Distance : 3

84
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; [
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; [
Distance : 3

85
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ]
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ]
Distance : 3

86
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; assertEquals
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; assertEquals
Distance : 3

87
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; !
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; !
Distance : 3

88
Tree	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

89
Tree	char j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	char j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

90
Tree	boolean j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

91
Tree	long j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

92
Tree	int n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

93
Tree	byte j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	byte j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

94
Tree	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 3

95
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

96
Tree	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

97
Tree	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

98
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; setUp
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; setUp
Distance : 3

99
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

100
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; compiler
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; compiler
Distance : 3

101
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <
Distance : 3

102
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; this
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; this
Distance : 3

103
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; final
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; final
Distance : 3

104
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; =
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; =
Distance : 3

105
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; }
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; }
Distance : 3

106
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ()
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ()
Distance : 3

107
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; {
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; {
Distance : 3

108
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; checkArgument
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; checkArgument
Distance : 3

109
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; field
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; field
Distance : 3

110
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; t
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; t
Distance : 3

111
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; name
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; name
Distance : 3

112
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; data
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; data
Distance : 3

113
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; add
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; add
Distance : 3

114
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; NodeTraversal
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; NodeTraversal
Distance : 3

115
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; values
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; values
Distance : 3

116
Tree	double n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 4

117
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; String
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; String
Distance : 3

118
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; mode
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; mode
Distance : 3

119
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; MathRuntimeException
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; MathRuntimeException
Distance : 3

120
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Object
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Object
Distance : 3

121
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; class
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; class
Distance : 3

122
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <blank>
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <blank>
Distance : 3

123
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; int
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; int
Distance : 3

124
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <s>
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; <s>
Distance : 3

125
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; (
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; (
Distance : 3

126
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ;
Distance : 2

127
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; )
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; )
Distance : 3

128
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; .
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; .
Distance : 3

129
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ,
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ,
Distance : 3

130
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; if
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; if
Distance : 3

131
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Math
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Math
Distance : 3

132
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; out
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; out
Distance : 3

133
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; NodeUtil
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; NodeUtil
Distance : 3

134
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; root
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; root
Distance : 3

135
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; MutableTimePeriod
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; MutableTimePeriod
Distance : 3

136
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; a
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; a
Distance : 3

137
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Test
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Test
Distance : 3

138
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Class
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Class
Distance : 3

139
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; notifyListeners
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; notifyListeners
Distance : 3

140
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; c
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; c
Distance : 3

141
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; return;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; return;
Distance : 3

142
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; size
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; size
Distance : 3

143
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; StringBuilder
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; StringBuilder
Distance : 3

144
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; join
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; join
Distance : 3

145
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; boolean
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; boolean
Distance : 3

146
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; *
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; *
Distance : 3

147
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; type
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; type
Distance : 3

148
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; mockingProgress
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; mockingProgress
Distance : 3

149
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; i
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; i
Distance : 3

150
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; wanted
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; wanted
Distance : 3

151
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; !=
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; !=
Distance : 3

152
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; verify
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; verify
Distance : 3

153
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; lines
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; lines
Distance : 3

154
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ex
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; ex
Distance : 3

155
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; b
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; b
Distance : 3

156
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; LanguageMode.ECMASCRIPT_2015
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; LanguageMode.ECMASCRIPT_2015
Distance : 3

157
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; protected
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; protected
Distance : 3

158
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; get
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; get
Distance : 3

159
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; JSType
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; JSType
Distance : 3

160
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; isEmpty
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; isEmpty
Distance : 3

161
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; char
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; char
Distance : 3

162
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; checkState
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; checkState
Distance : 3

163
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; int
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; int
Distance : 3

164
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; externs
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; externs
Distance : 3

165
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Invocation
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Invocation
Distance : 3

166
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; /
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; /
Distance : 3

167
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; long
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; long
Distance : 3

168
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; assertTrue
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; assertTrue
Distance : 3

169
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; for
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; for
Distance : 3

170
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; reportMatcher
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; reportMatcher
Distance : 3

171
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; instant
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; instant
Distance : 3

172
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; TestUtilities
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; TestUtilities
Distance : 3

173
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; js
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; js
Distance : 3

174
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; getMessage
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; getMessage
Distance : 3

175
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; stream
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; stream
Distance : 3

176
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; else
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; else
Distance : 3

177
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; {}
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; {}
Distance : 3

178
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; equals
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; equals
Distance : 3

179
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; StrBuilder
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; StrBuilder
Distance : 3

180
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; d
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; d
Distance : 3

181
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; public
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; public
Distance : 3

182
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; setAcceptedLanguage
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; setAcceptedLanguage
Distance : 3

183
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; +
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; +
Distance : 3

184
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; null
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; null
Distance : 3

185
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; >
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; >
Distance : 3

186
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; new
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; new
Distance : 3

187
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; STRING_CONSTANT
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; STRING_CONSTANT
Distance : 3

188
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; NUMBER_CONSTANT
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; NUMBER_CONSTANT
Distance : 3

189
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; return
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; return
Distance : 3

190
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; n
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; n
Distance : 3

191
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; e
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; e
Distance : 3

192
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Override
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; Override
Distance : 3

193
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; true
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; true
Distance : 3

194
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; invocations
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; invocations
Distance : 3

195
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; mock
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; mock
Distance : 3

196
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; abs
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; abs
Distance : 3

197
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; matcher
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; matcher
Distance : 3

198
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; static
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; static
Distance : 3

199
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; getParent
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ; getParent
Distance : 3

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

1
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Distance : 20

2
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Distance : 20

3
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 20

4
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Distance : 20

5
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 20

6
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < ExploitAssigns > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < ExploitAssigns > v ) throws CHAR_CONS ;
Distance : 20

7
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

8
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < TypeCache.Sort.WEAK > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < TypeCache.Sort.WEAK > v ) throws CHAR_CONS ;
Distance : 20

9
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

10
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

11
Tree	final short default: ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

12
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 21

13
Tree	final short assert ( false < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 21

14
Tree	final short assert ( false < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 21

15
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Distance : 20

16
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

17
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < TypeCache.Sort.SOFT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < TypeCache.Sort.SOFT > v ) throws CHAR_CONS ;
Distance : 20

18
Tree	final short break; ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

19
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Distance : 20

20
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < current.parent.scopes > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < current.parent.scopes > v ) throws CHAR_CONS ;
Distance : 20

21
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < Percentile.EstimationType > value ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < Percentile.EstimationType > value ) throws CHAR_CONS ;
Distance : 21

22
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

23
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > value ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > value ) throws CHAR_CONS ;
Distance : 21

24
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED > v ) throws CHAR_CONS ;
Distance : 20

25
Tree	final short assert ( false < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Distance : 21

26
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

27
Tree	final short default: ( Comparable < ? > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < ? > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Distance : 20

28
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 21

29
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < PropertyCollapseLevel.NONE > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < PropertyCollapseLevel.NONE > v ) throws CHAR_CONS ;
Distance : 20

30
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < MatchResult.NO_MATCH > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < MatchResult.NO_MATCH > v ) throws CHAR_CONS ;
Distance : 20

31
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < GoalType.MAXIMIZE > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < GoalType.MAXIMIZE > v ) throws CHAR_CONS ;
Distance : 20

32
Tree	final short assert ( false < double > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Distance : 21

33
Tree	final short assert ( Comparable < class > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < class > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

34
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Token.BANG > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Token.BANG > v ) throws CHAR_CONS ;
Distance : 20

35
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 20

36
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Assigner.Typing.DYNAMIC > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Assigner.Typing.DYNAMIC > v ) throws CHAR_CONS ;
Distance : 20

37
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < ExploitAssigns > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < ExploitAssigns > v ) throws CHAR_CONS ;
Distance : 20

38
Tree	final short assert ( false < double > extends , double false , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double false , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 21

39
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Distance : 20

40
Tree	final short assert ( false < double > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 21

41
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Token.AND > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Token.AND > v ) throws CHAR_CONS ;
Distance : 20

42
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < definitionsGatherer.definitions > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < definitionsGatherer.definitions > v ) throws CHAR_CONS ;
Distance : 20

43
Tree	final char assert ( Comparable < double > extends , double false , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final char assert ( Comparable < double > extends , double false , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

44
Tree	final short default: ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short default: ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 21

45
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Distance : 20

46
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Mode.ES_NEXT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Mode.ES_NEXT > v ) throws CHAR_CONS ;
Distance : 20

47
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < cov.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < cov.length > v ) throws CHAR_CONS ;
Distance : 20

48
Tree	final short assert ( false < double > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Distance : 21

49
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Void.TYPE > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Void.TYPE > v ) throws CHAR_CONS ;
Distance : 20

50
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Token.NEW > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Token.NEW > v ) throws CHAR_CONS ;
Distance : 20

51
Tree	final short break; ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short break; ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 21

52
Tree	final short assert ( false < double > extends , double extends , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 21

53
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Mockito.CALLS_REAL_METHODS > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Mockito.CALLS_REAL_METHODS > v ) throws CHAR_CONS ;
Distance : 20

54
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < ResolutionMode.BROWSER > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < ResolutionMode.BROWSER > v ) throws CHAR_CONS ;
Distance : 20

55
Tree	final char assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final char assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

56
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < rs.iRules > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < rs.iRules > v ) throws CHAR_CONS ;
Distance : 20

57
Tree	final short assert ( Comparable < extends > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < extends > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

58
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < JUnitRule.Strictness.WARN > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < JUnitRule.Strictness.WARN > v ) throws CHAR_CONS ;
Distance : 20

59
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < currentState.length > v ) throws CHAR_CONS ;
Distance : 21

60
Tree	final short assert ( byte < double > extends , double extends , double extends , false < Percentile.EstimationType > value ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < Percentile.EstimationType > value ) throws CHAR_CONS ;
Distance : 21

61
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > value ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > value ) throws CHAR_CONS ;
Distance : 21

62
Tree	final short assert ( Comparable < class > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < class > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

63
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Verification.EXPLICIT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Verification.EXPLICIT > v ) throws CHAR_CONS ;
Distance : 20

64
Tree	final char assert ( Comparable < double > extends , double false , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final char assert ( Comparable < double > extends , double false , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

65
Tree	final char assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final char assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

66
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Distance : 21

67
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < State.DURING_RESOLUTION > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < State.DURING_RESOLUTION > v ) throws CHAR_CONS ;
Distance : 20

68
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < doubleValue > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < doubleValue > v ) throws CHAR_CONS ;
Distance : 20

69
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < DevNull.out > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < DevNull.out > v ) throws CHAR_CONS ;
Distance : 20

70
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > v ) throws CHAR_CONS ;
Distance : 20

71
Tree	final short assert ( byte < @ > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( byte < @ > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 21

72
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < LifeCycleStage.NORMALIZED > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < LifeCycleStage.NORMALIZED > v ) throws CHAR_CONS ;
Distance : 20

73
Tree	final short assert ( false < double > extends , double extends , double extends , false < ExploitAssigns > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < ExploitAssigns > v ) throws CHAR_CONS ;
Distance : 21

74
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < line.originOffset > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < line.originOffset > v ) throws CHAR_CONS ;
Distance : 20

75
Tree	final short assert ( Comparable < @ > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < @ > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

76
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > interfaces ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > interfaces ) throws CHAR_CONS ;
Distance : 21

77
Tree	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

78
Tree	final short assert ( false < double > extends , double false , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double false , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 21

79
Tree	final short assert ( false < double > extends , double extends , double extends , false < TypeCache.Sort.WEAK > v ) throws CHAR_CONS ;
Code	final short assert ( false < double > extends , double extends , double extends , false < TypeCache.Sort.WEAK > v ) throws CHAR_CONS ;
Distance : 21

80
Tree	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 21

81
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 21

82
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED > v ) throws CHAR_CONS ;
Distance : 20

83
Tree	final short assert ( byte < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Distance : 21

84
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < moment.m2 > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < moment.m2 > v ) throws CHAR_CONS ;
Distance : 20

85
Tree	final char assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Code	final char assert ( Comparable < double > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws CHAR_CONS ;
Distance : 20

86
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < SimpsonIntegrator.SIMPSON_MAX_ITERATIONS_COUNT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < SimpsonIntegrator.SIMPSON_MAX_ITERATIONS_COUNT > v ) throws CHAR_CONS ;
Distance : 20

87
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < IncrementalCheckMode.GENERATE_IJS > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < IncrementalCheckMode.GENERATE_IJS > v ) throws CHAR_CONS ;
Distance : 20

88
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

89
Tree	final short assert ( Comparable < @ > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < @ > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

90
Tree	final float default: ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final float default: ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

91
Tree	final short assert ( Comparable < double > extends , double extends , byte extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , byte extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

92
Tree	final short assert ( byte < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 21

93
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

94
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < observed1.length > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < observed1.length > v ) throws CHAR_CONS ;
Distance : 20

95
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

96
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 20

97
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) throws CHAR_CONS ;
Distance : 21

98
Tree	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

99
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < y.length > v ) throws /= ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < y.length > v ) throws /= ;
Distance : 21

100
Tree	final int assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final int assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

101
Tree	final short default: ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

102
Tree	final short assert ( byte < double > extends , double extends , double extends , false < getIntercept > v ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < getIntercept > v ) throws CHAR_CONS ;
Distance : 21

103
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Distance : 21

104
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < currentState.length > v ) throws /= ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < currentState.length > v ) throws /= ;
Distance : 20

105
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

106
Tree	final float default: ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final float default: ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

107
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Distance : 21

108
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

109
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

110
Tree	final short assert ( Comparable < @ > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < @ > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

111
Tree	final float default: ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Code	final float default: ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Distance : 20

112
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Distance : 21

113
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

114
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

115
Tree	final float default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final float default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

116
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Distance : 21

117
Tree	final short assert ( byte < class > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( byte < class > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 21

118
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Distance : 21

119
Tree	final short assert ( byte < double > extends , double extends , double extends , false < LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR > v ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR > v ) throws CHAR_CONS ;
Distance : 21

120
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Distance : 21

121
Tree	final short assert ( Comparable < instanceof > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < instanceof > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws CHAR_CONS ;
Distance : 20

122
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

123
Tree	final short assert ( byte < double > extends , double extends , double extends , false < LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR > value ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR > value ) throws CHAR_CONS ;
Distance : 21

124
Tree	final short break; ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 21

125
Tree	final float default: ( Comparable < double > extends , double extends , double extends , false < tokens.length > v ) throws CHAR_CONS ;
Code	final float default: ( Comparable < double > extends , double extends , double extends , false < tokens.length > v ) throws CHAR_CONS ;
Distance : 20

126
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Distance : 21

127
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Distance : 21

128
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 21

129
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Distance : 21

130
Tree	final short default: ( byte < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

131
Tree	final short default: ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Distance : 21

132
Tree	final short assert ( false < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final short assert ( false < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 21

133
Tree	final short default: ( byte < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Distance : 21

134
Tree	final short default: ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final short default: ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 21

135
Tree	final short default: ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 21

136
Tree	final short break; ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

137
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < currentState.length > v ) throws &= ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < currentState.length > v ) throws &= ;
Distance : 20

138
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Distance : 21

139
Tree	final float break; ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final float break; ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

140
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Distance : 21

141
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

142
Tree	final short default: ( byte < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Distance : 21

143
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws &= ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws &= ;
Distance : 20

144
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Distance : 20

145
Tree	final short assert ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Distance : 21

146
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Distance : 21

147
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

148
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 20

149
Tree	final float break; ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final float break; ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

150
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Distance : 21

151
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < tokens.length > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < tokens.length > v ) throws CHAR_CONS ;
Distance : 20

152
Tree	final short assert ( false < double > extends , double extends , double extends , false < currentState.length > v ) throws /= ;
Code	final short assert ( false < double > extends , double extends , double extends , false < currentState.length > v ) throws /= ;
Distance : 21

153
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws /= ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws /= ;
Distance : 20

154
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

155
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > value ) throws /= ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > value ) throws /= ;
Distance : 21

156
Tree	final float default: ( Comparable < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Code	final float default: ( Comparable < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws CHAR_CONS ;
Distance : 20

157
Tree	final short default: ( byte < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Distance : 21

158
Tree	final short break; ( byte < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < y.length > value ) throws CHAR_CONS ;
Distance : 21

159
Tree	final float break; ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final float break; ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

160
Tree	final short break; ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final short break; ( byte < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 21

161
Tree	final short assert ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 21

162
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Distance : 20

163
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Distance : 21

164
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

165
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Distance : 21

166
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < tokens.length > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < tokens.length > v ) throws CHAR_CONS ;
Distance : 20

167
Tree	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws MatchResult.LOOSE_MATCH ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws MatchResult.LOOSE_MATCH ;
Distance : 21

168
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws /= ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws /= ;
Distance : 21

169
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

170
Tree	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws /= ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws /= ;
Distance : 21

171
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws /= ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.INVALID_BINARY_DIGIT > v ) throws /= ;
Distance : 20

172
Tree	final float break; ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Code	final float break; ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Distance : 20

173
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 20

174
Tree	final float assert ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Code	final float assert ( Comparable < double > extends , double extends , double extends , false < Integer.MAX_VALUE > v ) throws CHAR_CONS ;
Distance : 20

175
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 20

176
Tree	final char assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Code	final char assert ( Comparable < double > extends , double extends , double extends , false < SourceMap.LocationMapping > v ) throws /= ;
Distance : 20

177
Tree	final short default: ( byte < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Code	final short default: ( byte < double > extends , double extends , double extends , false < FunctionFlavor.NORMAL > value ) throws CHAR_CONS ;
Distance : 21

178
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws /= ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < Percentile.EstimationType > v ) throws /= ;
Distance : 20

179
Tree	final short default: ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws /= ;
Code	final short default: ( Comparable < ? > extends , double extends , double extends , false < y.length > v ) throws /= ;
Distance : 20

180
Tree	final short break; ( byte < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < tokens.length > value ) throws CHAR_CONS ;
Distance : 21

181
Tree	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws means ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < y.length > value ) throws means ;
Distance : 21

182
Tree	final short break; ( byte < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < y.length > v ) throws CHAR_CONS ;
Distance : 21

183
Tree	final short break; ( Comparable < double > extends , double extends , double extends , false < getIntercept > v ) throws CHAR_CONS ;
Code	final short break; ( Comparable < double > extends , double extends , double extends , false < getIntercept > v ) throws CHAR_CONS ;
Distance : 20

184
Tree	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws /= ;
Code	final short assert ( byte < ? > extends , double extends , double extends , false < LocalizedFormats.EULER_ANGLES_SINGULARITY > v ) throws /= ;
Distance : 21

185
Tree	final short assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws &= ;
Code	final short assert ( Comparable < double > extends , double extends , double extends , false < y.length > v ) throws &= ;
Distance : 20

186
Tree	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < ? > extends , double extends , double extends , false < LocalizedFormats.CARDAN_ANGLES_SINGULARITY > v ) throws CHAR_CONS ;
Distance : 20

187
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < Double.MAX_VALUE > value ) throws CHAR_CONS ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < Double.MAX_VALUE > value ) throws CHAR_CONS ;
Distance : 21

188
Tree	static double assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Code	static double assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws CHAR_CONS ;
Distance : 21

189
Tree	final short break; ( byte < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < getIntercept > value ) throws CHAR_CONS ;
Distance : 21

190
Tree	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws MatchResult.LOOSE_MATCH ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws MatchResult.LOOSE_MATCH ;
Distance : 21

191
Tree	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws /= ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws /= ;
Distance : 21

192
Tree	final short ! ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short ! ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 20

193
Tree	final short assert ( Comparable < double > extends , byte false , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Code	final short assert ( Comparable < double > extends , byte false , double extends , false < DecompositionType.UNDECOMPOSABLE > v ) throws CHAR_CONS ;
Distance : 20

194
Tree	final short default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws MatchResult.LOOSE_MATCH ;
Code	final short default: ( Comparable < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > value ) throws MatchResult.LOOSE_MATCH ;
Distance : 21

195
Tree	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > v ) throws /= ;
Code	final short assert ( Comparable < double > extends , double false , double extends , false < y.length > v ) throws /= ;
Distance : 20

196
Tree	final short default: ( false < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Code	final short default: ( false < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws CHAR_CONS ;
Distance : 21

197
Tree	final short break; ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < DecompositionType.UNDECOMPOSABLE > value ) throws CHAR_CONS ;
Distance : 21

198
Tree	final short break; ( byte < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Code	final short break; ( byte < double > extends , double extends , double extends , false < Integer.MAX_VALUE > value ) throws CHAR_CONS ;
Distance : 21

199
Tree	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws MatchResult.LOOSE_MATCH ;
Code	final short assert ( byte < double > extends , double extends , double extends , false < UnescapeUtils.UNESCAPE_ECMASCRIPT > v ) throws MatchResult.LOOSE_MATCH ;
Distance : 21

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return solve ( f , min ) ; } StrBuilder
Code	{ return solve ( f , min ) ; } StrBuilder
Distance : 3

1
Tree	{ return solve ( f , min ) ; } add
Code	{ return solve ( f , min ) ; } add
Distance : 3

2
Tree	{ return solve ( f , min ) ; } checkArgument
Code	{ return solve ( f , min ) ; } checkArgument
Distance : 3

3
Tree	{ return solve ( f , min ) ; } data
Code	{ return solve ( f , min ) ; } data
Distance : 3

4
Tree	{ return solve ( f , min ) ; } NodeUtil
Code	{ return solve ( f , min ) ; } NodeUtil
Distance : 3

5
Tree	{ return solve ( f , min ) ; } void
Code	{ return solve ( f , min ) ; } void
Distance : 3

6
Tree	{ return solve ( f , min ) ; } throw
Code	{ return solve ( f , min ) ; } throw
Distance : 3

7
Tree	{ return solve ( f , min ) ; } compiler
Code	{ return solve ( f , min ) ; } compiler
Distance : 3

8
Tree	{ return solve ( f , min ) ; } catch
Code	{ return solve ( f , min ) ; } catch
Distance : 3

9
Tree	{ return solve ( f , min ) ; } e
Code	{ return solve ( f , min ) ; } e
Distance : 3

10
Tree	{ return solve ( f , min ) ; } +
Code	{ return solve ( f , min ) ; } +
Distance : 3

11
Tree	{ return solve ( f , min ) ; } n
Code	{ return solve ( f , min ) ; } n
Distance : 3

12
Tree	{ return solve ( f , min ) ; } NodeTraversal
Code	{ return solve ( f , min ) ; } NodeTraversal
Distance : 3

13
Tree	{ return solve ( f , min ) ; } reportCodeChange
Code	{ return solve ( f , min ) ; } reportCodeChange
Distance : 3

14
Tree	{ return solve ( f , min ) ; } mock
Code	{ return solve ( f , min ) ; } mock
Distance : 3

15
Tree	{ return solve ( f , min ) ; } ]
Code	{ return solve ( f , min ) ; } ]
Distance : 3

16
Tree	{ return solve ( f , min ) ; } mode
Code	{ return solve ( f , min ) ; } mode
Distance : 3

17
Tree	{ return solve ( f , min ) ; } &&
Code	{ return solve ( f , min ) ; } &&
Distance : 3

18
Tree	{ return solve ( f , min ) ; } public
Code	{ return solve ( f , min ) ; } public
Distance : 3

19
Tree	{ return solve ( f , min ) ; } final
Code	{ return solve ( f , min ) ; } final
Distance : 3

20
Tree	{ return solve ( f , min ) ; } null
Code	{ return solve ( f , min ) ; } null
Distance : 3

21
Tree	{ return solve ( f , min ) ; } getArgumentMatcherStorage
Code	{ return solve ( f , min ) ; } getArgumentMatcherStorage
Distance : 3

22
Tree	{ return solve ( f , min ) ; } wanted
Code	{ return solve ( f , min ) ; } wanted
Distance : 3

23
Tree	{ return solve ( f , min ) ; } if
Code	{ return solve ( f , min ) ; } if
Distance : 3

24
Tree	{ return solve ( f , min ) ; } ex
Code	{ return solve ( f , min ) ; } ex
Distance : 3

25
Tree	{ return solve ( f , min ) ; } Preconditions
Code	{ return solve ( f , min ) ; } Preconditions
Distance : 3

26
Tree	{ return solve ( f , min ) ; } new
Code	{ return solve ( f , min ) ; } new
Distance : 3

27
Tree	{ return solve ( f , min ) ; } =
Code	{ return solve ( f , min ) ; } =
Distance : 3

28
Tree	{ return solve ( f , min ) ; } STRING_CONSTANT
Code	{ return solve ( f , min ) ; } STRING_CONSTANT
Distance : 3

29
Tree	{ return solve ( f , min ) ; } ()
Code	{ return solve ( f , min ) ; } ()
Distance : 3

30
Tree	{ return solve ( f , min ) ; } ,
Code	{ return solve ( f , min ) ; } ,
Distance : 3

31
Tree	{ return solve ( f , min ) ; } {
Code	{ return solve ( f , min ) ; } {
Distance : 3

32
Tree	{ return solve ( f , min ) ; } }
Code	{ return solve ( f , min ) ; } }
Distance : 3

33
Tree	{ return solve ( f , min ) ; } <
Code	{ return solve ( f , min ) ; } <
Distance : 3

34
Tree	{ return solve ( f , min ) ; } .
Code	{ return solve ( f , min ) ; } .
Distance : 3

35
Tree	{ return solve ( f , min ) ; } (
Code	{ return solve ( f , min ) ; } (
Distance : 3

36
Tree	{ return solve ( f , min ) ; } ;
Code	{ return solve ( f , min ) ; } ;
Distance : 3

37
Tree	{ return solve ( f , min ) ; } <blank>
Code	{ return solve ( f , min ) ; } <blank>
Distance : 3

38
Tree	{ return solve ( f , min ) ; } {
Code	{ return solve ( f , min ) ; } {
Distance : 3

39
Tree	{ return solve ( f , min ) ; } <s>
Code	{ return solve ( f , min ) ; } <s>
Distance : 3

40
Tree	{ return solve ( f , min ) ; } )
Code	{ return solve ( f , min ) ; } )
Distance : 3

41
Tree	{ return solve ( f , min ) ; } >
Code	{ return solve ( f , min ) ; } >
Distance : 3

42
Tree	{ return solve ( f , min ) ; } js
Code	{ return solve ( f , min ) ; } js
Distance : 3

43
Tree	{ return solve ( f , min ) ; } return
Code	{ return solve ( f , min ) ; } return
Distance : 3

44
Tree	{ return solve ( f , min ) ; } true
Code	{ return solve ( f , min ) ; } true
Distance : 3

45
Tree	{ return solve ( f , min ) ; } this
Code	{ return solve ( f , min ) ; } this
Distance : 3

46
Tree	{ return solve ( f , min ) ; } -
Code	{ return solve ( f , min ) ; } -
Distance : 3

47
Tree	{ return solve ( f , min ) ; } root
Code	{ return solve ( f , min ) ; } root
Distance : 3

48
Tree	{ return solve ( f , min ) ; } NUMBER_CONSTANT
Code	{ return solve ( f , min ) ; } NUMBER_CONSTANT
Distance : 3

49
Tree	{ return solve ( f , min ) ; } /
Code	{ return solve ( f , min ) ; } /
Distance : 3

50
Tree	{ return solve ( f , min ) ; } long
Code	{ return solve ( f , min ) ; } long
Distance : 3

51
Tree	{ return solve ( f , min ) ; } value
Code	{ return solve ( f , min ) ; } value
Distance : 3

52
Tree	{ return solve ( f , min ) ; } T
Code	{ return solve ( f , min ) ; } T
Distance : 3

53
Tree	{ return solve ( f , min ) ; } setAcceptedLanguage
Code	{ return solve ( f , min ) ; } setAcceptedLanguage
Distance : 3

54
Tree	{ return solve ( f , min ) ; } super
Code	{ return solve ( f , min ) ; } super
Distance : 3

55
Tree	{ return solve ( f , min ) ; } instant
Code	{ return solve ( f , min ) ; } instant
Distance : 3

56
Tree	{ return solve ( f , min ) ; } matcher
Code	{ return solve ( f , min ) ; } matcher
Distance : 3

57
Tree	{ return solve ( f , min ) ; } stream
Code	{ return solve ( f , min ) ; } stream
Distance : 3

58
Tree	{ return solve ( f , min ) ; } values
Code	{ return solve ( f , min ) ; } values
Distance : 3

59
Tree	{ return solve ( f , min ) ; } getMessage
Code	{ return solve ( f , min ) ; } getMessage
Distance : 3

60
Tree	{ return solve ( f , min ) ; } else
Code	{ return solve ( f , min ) ; } else
Distance : 3

61
Tree	{ return solve ( f , min ) ; } *
Code	{ return solve ( f , min ) ; } *
Distance : 3

62
Tree	{ return solve ( f , min ) ; } y
Code	{ return solve ( f , min ) ; } y
Distance : 3

63
Tree	{ return solve ( f , min ) ; } isBlock
Code	{ return solve ( f , min ) ; } isBlock
Distance : 3

64
Tree	{ return solve ( f , min ) ; } abs
Code	{ return solve ( f , min ) ; } abs
Distance : 3

65
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

66
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

67
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

68
Tree	{ return solve ( max , f ) ; }
Code	{ return solve ( max , f ) ; }
Distance : 4

69
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

70
Tree	{ return solve ( min , f ) ; }
Code	{ return solve ( min , f ) ; }
Distance : 3

71
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

72
Tree	{ return solve ( f , min ) ; } !=
Code	{ return solve ( f , min ) ; } !=
Distance : 3

73
Tree	{ return solve ( f , min ) ; } Assert
Code	{ return solve ( f , min ) ; } Assert
Distance : 3

74
Tree	{ return solve ( f , min ) ; } alpha
Code	{ return solve ( f , min ) ; } alpha
Distance : 3

75
Tree	{ return solve ( f , min ) ; } double
Code	{ return solve ( f , min ) ; } double
Distance : 3

76
Tree	{ return solve ( f , min ) ; } checkNotNull
Code	{ return solve ( f , min ) ; } checkNotNull
Distance : 3

77
Tree	{ return solve ( f , min ) ; } TestUtils
Code	{ return solve ( f , min ) ; } TestUtils
Distance : 3

78
Tree	{ return solve ( f , min ) ; } Fraction
Code	{ return solve ( f , min ) ; } Fraction
Distance : 3

79
Tree	{ return solve ( f , min ) ; } valueOf
Code	{ return solve ( f , min ) ; } valueOf
Distance : 3

80
Tree	{ return solve ( f , min ) ; } node
Code	{ return solve ( f , min ) ; } node
Distance : 3

81
Tree	{ return solve ( f , min ) ; } getParent
Code	{ return solve ( f , min ) ; } getParent
Distance : 3

82
Tree	{ return solve ( f , min ) ; } reportMatcher
Code	{ return solve ( f , min ) ; } reportMatcher
Distance : 3

83
Tree	{ return solve ( f , min ) ; } setUp
Code	{ return solve ( f , min ) ; } setUp
Distance : 3

84
Tree	{ return solve ( f , min ) ; } out
Code	{ return solve ( f , min ) ; } out
Distance : 3

85
Tree	{ return solve ( f , min ) ; } index
Code	{ return solve ( f , min ) ; } index
Distance : 3

86
Tree	{ return solve ( f , min ) ; } invocations
Code	{ return solve ( f , min ) ; } invocations
Distance : 3

87
Tree	{ return solve ( f , min ) ; } protected
Code	{ return solve ( f , min ) ; } protected
Distance : 3

88
Tree	{ return solve ( f , min ) ; } chrono
Code	{ return solve ( f , min ) ; } chrono
Distance : 3

89
Tree	{ return solve ( f , min ) ; } traverseEs6
Code	{ return solve ( f , min ) ; } traverseEs6
Distance : 3

90
Tree	{ return solve ( f , min ) ; } instance
Code	{ return solve ( f , min ) ; } instance
Distance : 3

91
Tree	{ return solve ( f , min ) ; } optimizer
Code	{ return solve ( f , min ) ; } optimizer
Distance : 3

92
Tree	{ return solve ( f , min ) ; } assertTrue
Code	{ return solve ( f , min ) ; } assertTrue
Distance : 3

93
Tree	{ return solve ( f , min ) ; } simpleMethod
Code	{ return solve ( f , min ) ; } simpleMethod
Distance : 3

94
Tree	{ return solve ( f , min ) ; } [
Code	{ return solve ( f , min ) ; } [
Distance : 3

95
Tree	{ return solve ( f , min ) ; } i
Code	{ return solve ( f , min ) ; } i
Distance : 3

96
Tree	{ return solve ( f , min ) ; } checkState
Code	{ return solve ( f , min ) ; } checkState
Distance : 3

97
Tree	{ return solve ( f , min ) ; } int
Code	{ return solve ( f , min ) ; } int
Distance : 3

98
Tree	{ return solve ( f , min ) ; } b
Code	{ return solve ( f , min ) ; } b
Distance : 3

99
Tree	{ return solve ( f , min ) ; }
Code	{ return solve ( f , min ) ; }
Distance : 2

100
Tree	{ return solve ( f , min ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ return solve ( f , min ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

101
Tree	{ return solve ( f , min ) ; } return;
Code	{ return solve ( f , min ) ; } return;
Distance : 3

102
Tree	{ return solve ( f , min ) ; } char
Code	{ return solve ( f , min ) ; } char
Distance : 3

103
Tree	{ return solve ( f , min ) ; } mockingProgress
Code	{ return solve ( f , min ) ; } mockingProgress
Distance : 3

104
Tree	{ return solve ( f , min ) ; } size
Code	{ return solve ( f , min ) ; } size
Distance : 3

105
Tree	{ return solve ( f , min ) ; } clone
Code	{ return solve ( f , min ) ; } clone
Distance : 3

106
Tree	{ return solve ( f , min ) ; } Double
Code	{ return solve ( f , min ) ; } Double
Distance : 3

107
Tree	{ return solve ( f , min ) ; } s
Code	{ return solve ( f , min ) ; } s
Distance : 3

108
Tree	{ return solve ( f , min ) ; } PeriodType
Code	{ return solve ( f , min ) ; } PeriodType
Distance : 3

109
Tree	{ return solve ( f , min ) ; } obj
Code	{ return solve ( f , min ) ; } obj
Distance : 3

110
Tree	{ return solve ( f , min ) ; } contains
Code	{ return solve ( f , min ) ; } contains
Distance : 3

111
Tree	{ return solve ( f , min ) ; } <=
Code	{ return solve ( f , min ) ; } <=
Distance : 3

112
Tree	{ return solve ( f , min ) ; } String
Code	{ return solve ( f , min ) ; } String
Distance : 3

113
Tree	{ return solve ( f , min ) ; } assertThat
Code	{ return solve ( f , min ) ; } assertThat
Distance : 3

114
Tree	{ return solve ( f , min ) ; } str
Code	{ return solve ( f , min ) ; } str
Distance : 3

115
Tree	{ return solve ( f , min ) ; } testSame
Code	{ return solve ( f , min ) ; } testSame
Distance : 3

116
Tree	{ return solve ( f , min ) ; } parent
Code	{ return solve ( f , min ) ; } parent
Distance : 3

117
Tree	{ return solve ( f , min ) ; } StringBuilder
Code	{ return solve ( f , min ) ; } StringBuilder
Distance : 3

118
Tree	{ return solve ( f , f ) ; }
Code	{ return solve ( f , f ) ; }
Distance : 3

119
Tree	{ return solve ( f , min ) ; } Object
Code	{ return solve ( f , min ) ; } Object
Distance : 3

120
Tree	{ return solve ( f , min ) ; } JSType
Code	{ return solve ( f , min ) ; } JSType
Distance : 3

121
Tree	{ return solve ( f , min ) ; } getFirstChild
Code	{ return solve ( f , min ) ; } getFirstChild
Distance : 3

122
Tree	{ return solve ( f , min ) ; } static
Code	{ return solve ( f , min ) ; } static
Distance : 3

123
Tree	{ return solve ( f , min ) ; } isEmpty
Code	{ return solve ( f , min ) ; } isEmpty
Distance : 3

124
Tree	{ return solve ( f , min ) ; } source
Code	{ return solve ( f , min ) ; } source
Distance : 3

125
Tree	{ return solve ( f , min ) ; } Exception
Code	{ return solve ( f , min ) ; } Exception
Distance : 3

126
Tree	{ return solve ( f , min ) ; } join
Code	{ return solve ( f , min ) ; } join
Distance : 3

127
Tree	{ return solve ( f , min ) ; } paint
Code	{ return solve ( f , min ) ; } paint
Distance : 3

128
Tree	{ return solve ( f , min ) ; } boolean
Code	{ return solve ( f , min ) ; } boolean
Distance : 3

129
Tree	{ return solve ( f , min ) ; } getInstance
Code	{ return solve ( f , min ) ; } getInstance
Distance : 3

130
Tree	{ return solve ( f , min ) ; } type
Code	{ return solve ( f , min ) ; } type
Distance : 3

131
Tree	{ return solve ( f , min ) ; } serialised
Code	{ return solve ( f , min ) ; } serialised
Distance : 3

132
Tree	{ return solve ( f , min ) ; } fireChangeEvent
Code	{ return solve ( f , min ) ; } fireChangeEvent
Distance : 3

133
Tree	{ return solve ( f , min ) ; } array
Code	{ return solve ( f , min ) ; } array
Distance : 3

134
Tree	{ return solve ( f , min ) ; } f
Code	{ return solve ( f , min ) ; } f
Distance : 3

135
Tree	{ return solve ( f , min ) ; } class
Code	{ return solve ( f , min ) ; } class
Distance : 3

136
Tree	{ return solve ( f , min ) ; } ParamChecks
Code	{ return solve ( f , min ) ; } ParamChecks
Distance : 3

137
Tree	{ return solve ( f , min ) ; } createIllegalArgumentException
Code	{ return solve ( f , min ) ; } createIllegalArgumentException
Distance : 3

138
Tree	{ return solve ( f , min ) ; } MathRuntimeException
Code	{ return solve ( f , min ) ; } MathRuntimeException
Distance : 3

139
Tree	{ return solve ( f , min ) ; } ArrayList
Code	{ return solve ( f , min ) ; } ArrayList
Distance : 3

140
Tree	{ return solve ( f , min ) ; } LINE_JOINER
Code	{ return solve ( f , min ) ; } LINE_JOINER
Distance : 3

141
Tree	{ return solve ( f , min ) ; } a
Code	{ return solve ( f , min ) ; } a
Distance : 3

142
Tree	{ return solve ( f , min ) ; } MutableTimePeriod
Code	{ return solve ( f , min ) ; } MutableTimePeriod
Distance : 3

143
Tree	{ return solve ( f , min ) ; } get
Code	{ return solve ( f , min ) ; } get
Distance : 3

144
Tree	{ return solve ( f , min ) ; } sqrt
Code	{ return solve ( f , min ) ; } sqrt
Distance : 3

145
Tree	{ return solve ( f , min ) ; } {}
Code	{ return solve ( f , min ) ; } {}
Distance : 3

146
Tree	{ return solve ( f , min ) ; } UnivariateFunction
Code	{ return solve ( f , min ) ; } UnivariateFunction
Distance : 3

147
Tree	{ return solve ( f , min ) ; } List
Code	{ return solve ( f , min ) ; } List
Distance : 3

148
Tree	{ return solve ( f , min ) ; } returnZero
Code	{ return solve ( f , min ) ; } returnZero
Distance : 3

149
Tree	{ return solve ( f , min ) ; } :
Code	{ return solve ( f , min ) ; } :
Distance : 3

150
Tree	{ return solve ( f , min ) ; } try
Code	{ return solve ( f , min ) ; } try
Distance : 3

151
Tree	{ return solve ( f , min ) ; } m
Code	{ return solve ( f , min ) ; } m
Distance : 3

152
Tree	{ return solve ( f , min ) ; } v
Code	{ return solve ( f , min ) ; } v
Distance : 3

153
Tree	{ return solve ( f , min ) ; } verify
Code	{ return solve ( f , min ) ; } verify
Distance : 3

154
Tree	{ return solve ( f , min ) ; } c
Code	{ return solve ( f , min ) ; } c
Distance : 3

155
Tree	{ return solve ( f , min ) ; } lines
Code	{ return solve ( f , min ) ; } lines
Distance : 3

156
Tree	{ return solve ( f , min ) ; } Integer
Code	{ return solve ( f , min ) ; } Integer
Distance : 3

157
Tree	{ return solve ( f , min ) ; } Node
Code	{ return solve ( f , min ) ; } Node
Distance : 3

158
Tree	{ return solve ( f , min ) ; } length
Code	{ return solve ( f , min ) ; } length
Distance : 3

159
Tree	{ return solve ( f , min ) ; } isNormalBlock
Code	{ return solve ( f , min ) ; } isNormalBlock
Distance : 3

160
Tree	{ return solve ( f , min ) ; } throws
Code	{ return solve ( f , min ) ; } throws
Distance : 3

161
Tree	{ return solve ( f , min ) ; } expected
Code	{ return solve ( f , min ) ; } expected
Distance : 3

162
Tree	{ return solve ( f , min ) ; } invocation
Code	{ return solve ( f , min ) ; } invocation
Distance : 3

163
Tree	{ return solve ( f , min ) ; } FastMath
Code	{ return solve ( f , min ) ; } FastMath
Distance : 3

164
Tree	{ return solve ( f , min ) ; } t
Code	{ return solve ( f , min ) ; } t
Distance : 3

165
Tree	{ return solve ( f , min ) ; } name
Code	{ return solve ( f , min ) ; } name
Distance : 3

166
Tree	{ return solve ( f , min ) ; } <>
Code	{ return solve ( f , min ) ; } <>
Distance : 3

167
Tree	{ return solve ( f , min ) ; } Args
Code	{ return solve ( f , min ) ; } Args
Distance : 3

168
Tree	{ return solve ( f , min ) ; } result
Code	{ return solve ( f , min ) ; } result
Distance : 3

169
Tree	{ return solve ( f , min ) ; } IllegalArgumentException
Code	{ return solve ( f , min ) ; } IllegalArgumentException
Distance : 3

170
Tree	{ return solve ( f , min ) ; } scope
Code	{ return solve ( f , min ) ; } scope
Distance : 3

171
Tree	{ return solve ( f , min ) ; } append
Code	{ return solve ( f , min ) ; } append
Distance : 3

172
Tree	{ return solve ( f , min ) ; } ?
Code	{ return solve ( f , min ) ; } ?
Distance : 3

173
Tree	{ return solve ( f , min ) ; } !
Code	{ return solve ( f , min ) ; } !
Distance : 3

174
Tree	{ return solve ( f , min ) ; } nullNotPermitted
Code	{ return solve ( f , min ) ; } nullNotPermitted
Distance : 3

175
Tree	{ return solve ( f , min ) ; } fail
Code	{ return solve ( f , min ) ; } fail
Distance : 3

176
Tree	{ return solve ( f , min ) ; } []
Code	{ return solve ( f , min ) ; } []
Distance : 3

177
Tree	{ return solve ( f , min ) ; } @
Code	{ return solve ( f , min ) ; } @
Distance : 3

178
Tree	{ return solve ( f , min ) ; } assertEquals
Code	{ return solve ( f , min ) ; } assertEquals
Distance : 3

179
Tree	{ return solve ( f , min ) ; } test
Code	{ return solve ( f , min ) ; } test
Distance : 3

180
Tree	{ return solve ( f , min ) ; } ==
Code	{ return solve ( f , min ) ; } ==
Distance : 3

181
Tree	{ return solve ( f , min ) ; } equals
Code	{ return solve ( f , min ) ; } equals
Distance : 3

182
Tree	{ return solve ( f , min ) ; } Invocation
Code	{ return solve ( f , min ) ; } Invocation
Distance : 3

183
Tree	{ return solve ( f , min ) ; } externs
Code	{ return solve ( f , min ) ; } externs
Distance : 3

184
Tree	{ return solve ( f , min ) ; } for
Code	{ return solve ( f , min ) ; } for
Distance : 3

185
Tree	{ return solve ( f , min ) ; } TestUtilities
Code	{ return solve ( f , min ) ; } TestUtilities
Distance : 3

186
Tree	{ return solve ( f , min ) ; } d
Code	{ return solve ( f , min ) ; } d
Distance : 3

187
Tree	{ return solve ( f , min ) ; } sb
Code	{ return solve ( f , min ) ; } sb
Distance : 3

188
Tree	{ return solve ( f , min ) ; } Override
Code	{ return solve ( f , min ) ; } Override
Distance : 3

189
Tree	{ return solve ( f , min ) ; } field
Code	{ return solve ( f , min ) ; } field
Distance : 3

190
Tree	{ return solve ( f , min ) ; } false
Code	{ return solve ( f , min ) ; } false
Distance : 3

191
Tree	{ return solve ( f , min ) ; } x
Code	{ return solve ( f , min ) ; } x
Distance : 3

192
Tree	{ return solve ( f , min ) ; } notifyListeners
Code	{ return solve ( f , min ) ; } notifyListeners
Distance : 3

193
Tree	{ return solve ( f , min ) ; } Test
Code	{ return solve ( f , min ) ; } Test
Distance : 3

194
Tree	{ return solve ( f , min ) ; } p
Code	{ return solve ( f , min ) ; } p
Distance : 3

195
Tree	{ return solve ( f , min ) ; } Class
Code	{ return solve ( f , min ) ; } Class
Distance : 3

196
Tree	{ return solve ( f , min ) ; } options
Code	{ return solve ( f , min ) ; } options
Distance : 3

197
Tree	{ return solve ( f , min ) ; } Math
Code	{ return solve ( f , min ) ; } Math
Distance : 3

198
Tree	{ return solve ( f , min ) ; } toString
Code	{ return solve ( f , min ) ; } toString
Distance : 3

199
Tree	{ return solve ( f , min ) ; } stroke
Code	{ return solve ( f , min ) ; } stroke
Distance : 3

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	out
Code	out
Distance : 17

1
Tree	assertClose
Code	assertClose
Distance : 18

2
Tree	writeField
Code	writeField
Distance : 18

3
Tree	notNull
Code	notNull
Distance : 18

4
Tree	buildArray
Code	buildArray
Distance : 18

5
Tree	cause
Code	cause
Distance : 18

6
Tree	that.data
Code	that.data
Distance : 18

7
Tree	arg
Code	arg
Distance : 18

8
Tree	endInstant
Code	endInstant
Distance : 18

9
Tree	realEigenvalues
Code	realEigenvalues
Distance : 18

10
Tree	denseOutput
Code	denseOutput
Distance : 18

11
Tree	Returns
Code	Returns
Distance : 18

12
Tree	origin
Code	origin
Distance : 18

13
Tree	locale
Code	locale
Distance : 18

14
Tree	float
Code	float
Distance : 18

15
Tree	reportAnd
Code	reportAnd
Distance : 18

16
Tree	lhs
Code	lhs
Distance : 18

17
Tree	formatter
Code	formatter
Distance : 18

18
Tree	TestObject
Code	TestObject
Distance : 18

19
Tree	minDiff
Code	minDiff
Distance : 18

20
Tree	Modifier
Code	Modifier
Distance : 18

21
Tree	isBottom
Code	isBottom
Distance : 18

22
Tree	hours
Code	hours
Distance : 18

23
Tree	rings
Code	rings
Distance : 18

24
Tree	indices
Code	indices
Distance : 18

25
Tree	()
Code	()
Distance : 18

26
Tree	xMatrix
Code	xMatrix
Distance : 18

27
Tree	feature
Code	feature
Distance : 18

28
Tree	tTest
Code	tTest
Distance : 18

29
Tree	scale
Code	scale
Distance : 18

30
Tree	incrementAll
Code	incrementAll
Distance : 18

31
Tree	isEmpty
Code	isEmpty
Distance : 18

32
Tree	XTX
Code	XTX
Distance : 18

33
Tree	sample1
Code	sample1
Distance : 18

34
Tree	b.length
Code	b.length
Distance : 18

35
Tree	s1
Code	s1
Distance : 18

36
Tree	Range
Code	Range
Distance : 18

37
Tree	)
Code	)
Distance : 17

38
Tree	TypeMismatch
Code	TypeMismatch
Distance : 18

39
Tree	ContainsTypedDescription
Code	ContainsTypedDescription
Distance : 18

40
Tree	Array2DRowRealMatrix
Code	Array2DRowRealMatrix
Distance : 18

41
Tree	T_TEST
Code	T_TEST
Distance : 18

42
Tree	value
Code	value
Distance : 18

43
Tree	recordImplicitInterfaceUses
Code	recordImplicitInterfaceUses
Distance : 18

44
Tree	!
Code	!
Distance : 18

45
Tree	ContainsExtraTypeInfo
Code	ContainsExtraTypeInfo
Distance : 18

46
Tree	Object
Code	Object
Distance : 18

47
Tree	NodeTraversal
Code	NodeTraversal
Distance : 18

48
Tree	[
Code	[
Distance : 17

49
Tree	DummyLocalizable
Code	DummyLocalizable
Distance : 18

50
Tree	out.value
Code	out.value
Distance : 18

51
Tree	iChronology
Code	iChronology
Distance : 18

52
Tree	calendar
Code	calendar
Distance : 18

53
Tree	w
Code	w
Distance : 18

54
Tree	lu
Code	lu
Distance : 18

55
Tree	Percentile
Code	Percentile
Distance : 18

56
Tree	Percentile.EstimationType
Code	Percentile.EstimationType
Distance : 18

57
Tree	ArrayEquals
Code	ArrayEquals
Distance : 18

58
Tree	!=
Code	!=
Distance : 18

59
Tree	cachedU
Code	cachedU
Distance : 18

60
Tree	final
Code	final
Distance : 18

61
Tree	v
Code	v
Distance : 18

62
Tree	Boolean
Code	Boolean
Distance : 18

63
Tree	k
Code	k
Distance : 18

64
Tree	Predicates
Code	Predicates
Distance : 18

65
Tree	normal
Code	normal
Distance : 18

66
Tree	microsphereElements
Code	microsphereElements
Distance : 18

67
Tree	ClassLoader
Code	ClassLoader
Distance : 18

68
Tree	Color.RED
Code	Color.RED
Distance : 18

69
Tree	error
Code	error
Distance : 18

70
Tree	equals
Code	equals
Distance : 18

71
Tree	distribution
Code	distribution
Distance : 18

72
Tree	booleanValue
Code	booleanValue
Distance : 18

73
Tree	setWarningLevel
Code	setWarningLevel
Distance : 18

74
Tree	domainCrosshairLockedOnData
Code	domainCrosshairLockedOnData
Distance : 18

75
Tree	typeCheck
Code	typeCheck
Distance : 18

76
Tree	invocation
Code	invocation
Distance : 18

77
Tree	ValueAndJacobianFunction
Code	ValueAndJacobianFunction
Distance : 18

78
Tree	when
Code	when
Distance : 18

79
Tree	tmp
Code	tmp
Distance : 18

80
Tree	LocalizedFormats.VECTOR_LENGTH_MISMATCH
Code	LocalizedFormats.VECTOR_LENGTH_MISMATCH
Distance : 18

81
Tree	super
Code	super
Distance : 18

82
Tree	model
Code	model
Distance : 18

83
Tree	xval
Code	xval
Distance : 18

84
Tree	removeAll
Code	removeAll
Distance : 18

85
Tree	end
Code	end
Distance : 18

86
Tree	isEquals
Code	isEquals
Distance : 18

87
Tree	x2
Code	x2
Distance : 18

88
Tree	ds
Code	ds
Distance : 18

89
Tree	MockControl
Code	MockControl
Distance : 18

90
Tree	getNumber
Code	getNumber
Distance : 18

91
Tree	real
Code	real
Distance : 18

92
Tree	summaryObjectStartText
Code	summaryObjectStartText
Distance : 18

93
Tree	checkSignificanceLevel
Code	checkSignificanceLevel
Distance : 18

94
Tree	JUnitResultAssert
Code	JUnitResultAssert
Distance : 18

95
Tree	throw
Code	throw
Distance : 18

96
Tree	FieldMatrix
Code	FieldMatrix
Distance : 18

97
Tree	X
Code	X
Distance : 18

98
Tree	originOffset
Code	originOffset
Distance : 18

99
Tree	alpha
Code	alpha
Distance : 18

100
Tree	EMPTY
Code	EMPTY
Distance : 18

101
Tree	MockCreationSettings
Code	MockCreationSettings
Distance : 18

102
Tree	bool
Code	bool
Distance : 18

103
Tree	typeParam
Code	typeParam
Distance : 18

104
Tree	strategy
Code	strategy
Distance : 18

105
Tree	mRule
Code	mRule
Distance : 18

106
Tree	separator
Code	separator
Distance : 18

107
Tree	step
Code	step
Distance : 18

108
Tree	this
Code	this
Distance : 18

109
Tree	b
Code	b
Distance : 18

110
Tree	Array
Code	Array
Distance : 18

111
Tree	renamer
Code	renamer
Distance : 18

112
Tree	(
Code	(
Distance : 17

113
Tree	getClass
Code	getClass
Distance : 18

114
Tree	
Code	
Distance : 18

115
Tree	sizeEndText
Code	sizeEndText
Distance : 18

116
Tree	ch
Code	ch
Distance : 18

117
Tree	nRows
Code	nRows
Distance : 18

118
Tree	optima
Code	optima
Distance : 18

119
Tree	bp
Code	bp
Distance : 18

120
Tree	stepSize
Code	stepSize
Distance : 18

121
Tree	values
Code	values
Distance : 18

122
Tree	visitArgumentList
Code	visitArgumentList
Distance : 18

123
Tree	PeepholeOptimizationsPass
Code	PeepholeOptimizationsPass
Distance : 18

124
Tree	DateTimePrinter
Code	DateTimePrinter
Distance : 18

125
Tree	printTo
Code	printTo
Distance : 18

126
Tree	ArrayFieldVector
Code	ArrayFieldVector
Distance : 18

127
Tree	str
Code	str
Distance : 18

128
Tree	data
Code	data
Distance : 18

129
Tree	Appendable
Code	Appendable
Distance : 18

130
Tree	newInstance
Code	newInstance
Distance : 18

131
Tree	Period
Code	Period
Distance : 18

132
Tree	Float
Code	Float
Distance : 18

133
Tree	res
Code	res
Distance : 18

134
Tree	s
Code	s
Distance : 18

135
Tree	Fraction
Code	Fraction
Distance : 18

136
Tree	key
Code	key
Distance : 18

137
Tree	getValue
Code	getValue
Distance : 18

138
Tree	T
Code	T
Distance : 18

139
Tree	style
Code	style
Distance : 18

140
Tree	array
Code	array
Distance : 18

141
Tree	proxy
Code	proxy
Distance : 18

142
Tree	lowerBound
Code	lowerBound
Distance : 18

143
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 18

144
Tree	return
Code	return
Distance : 18

145
Tree	mu
Code	mu
Distance : 18

146
Tree	prefix
Code	prefix
Distance : 18

147
Tree	x0
Code	x0
Distance : 18

148
Tree	imaginary
Code	imaginary
Distance : 18

149
Tree	ObjectUtils
Code	ObjectUtils
Distance : 18

150
Tree	mockMethod
Code	mockMethod
Distance : 18

151
Tree	short
Code	short
Distance : 18

152
Tree	kthSelector
Code	kthSelector
Distance : 18

153
Tree	ScopeScanner
Code	ScopeScanner
Distance : 18

154
Tree	features
Code	features
Distance : 18

155
Tree	leftType
Code	leftType
Distance : 18

156
Tree	File
Code	File
Distance : 18

157
Tree	MOCKITO_CORE
Code	MOCKITO_CORE
Distance : 18

158
Tree	isForward
Code	isForward
Distance : 18

159
Tree	testWarning
Code	testWarning
Distance : 18

160
Tree	for
Code	for
Distance : 18

161
Tree	tree
Code	tree
Distance : 18

162
Tree	singleRoot
Code	singleRoot
Distance : 18

163
Tree	disableTypeCheck
Code	disableTypeCheck
Distance : 18

164
Tree	clone
Code	clone
Distance : 18

165
Tree	reset
Code	reset
Distance : 18

166
Tree	product
Code	product
Distance : 18

167
Tree	pseudoName
Code	pseudoName
Distance : 18

168
Tree	[]
Code	[]
Distance : 18

169
Tree	entryTolerance
Code	entryTolerance
Distance : 18

170
Tree	m
Code	m
Distance : 18

171
Tree	singularValues
Code	singularValues
Distance : 18

172
Tree	InternalPrinter
Code	InternalPrinter
Distance : 18

173
Tree	divide
Code	divide
Distance : 18

174
Tree	CompositeFormat
Code	CompositeFormat
Distance : 18

175
Tree	buffer
Code	buffer
Distance : 18

176
Tree	sum
Code	sum
Distance : 18

177
Tree	start
Code	start
Distance : 18

178
Tree	target
Code	target
Distance : 18

179
Tree	DenseRealMatrix
Code	DenseRealMatrix
Distance : 18

180
Tree	VECTOR_LENGTH_MISMATCH_MESSAGE
Code	VECTOR_LENGTH_MISMATCH_MESSAGE
Distance : 18

181
Tree	FieldUtils
Code	FieldUtils
Distance : 18

182
Tree	fold
Code	fold
Distance : 18

183
Tree	replaceChars
Code	replaceChars
Distance : 18

184
Tree	BetaDistribution
Code	BetaDistribution
Distance : 18

185
Tree	x
Code	x
Distance : 18

186
Tree	objectData
Code	objectData
Distance : 18

187
Tree	ret
Code	ret
Distance : 18

188
Tree	caseType
Code	caseType
Distance : 18

189
Tree	domHelperType
Code	domHelperType
Distance : 18

190
Tree	Shape
Code	Shape
Distance : 18

191
Tree	regex
Code	regex
Distance : 18

192
Tree	info
Code	info
Distance : 18

193
Tree	testTypes
Code	testTypes
Distance : 18

194
Tree	MathArrays
Code	MathArrays
Distance : 18

195
Tree	rightType
Code	rightType
Distance : 18

196
Tree	fragment
Code	fragment
Distance : 18

197
Tree	shape
Code	shape
Distance : 18

198
Tree	maxEvaluations
Code	maxEvaluations
Distance : 18

199
Tree	char
Code	char
Distance : 18

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } externs
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } externs
Distance : 5

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } FastMath
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } FastMath
Distance : 5

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportCodeChange
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportCodeChange
Distance : 5

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } IllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } IllegalArgumentException
Distance : 5

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !=
Distance : 5

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } testSame
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } testSame
Distance : 5

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } parent
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } parent
Distance : 5

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } createIllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } createIllegalArgumentException
Distance : 5

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } str
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } str
Distance : 5

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LINE_JOINER
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LINE_JOINER
Distance : 5

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertThat
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertThat
Distance : 5

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocation
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocation
Distance : 5

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ,
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ,
Distance : 5

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } .
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } .
Distance : 5

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } x
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } x
Distance : 5

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertEquals
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertEquals
Distance : 5

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } T
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } T
Distance : 5

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } []
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } []
Distance : 5

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throws
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throws
Distance : 5

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } returnZero
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } returnZero
Distance : 5

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getFirstChild
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getFirstChild
Distance : 5

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } UnivariateFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } UnivariateFunction
Distance : 5

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } expected
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } expected
Distance : 5

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } sb
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } sb
Distance : 5

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } name
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } name
Distance : 5

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } field
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } field
Distance : 5

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } (
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } (
Distance : 5

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } =
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } =
Distance : 5

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } }
Distance : 5

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ()
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ()
Distance : 5

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {
Distance : 5

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } new
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } new
Distance : 5

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } STRING_CONSTANT
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } STRING_CONSTANT
Distance : 5

33
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NUMBER_CONSTANT
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NUMBER_CONSTANT
Distance : 5

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } return
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } return
Distance : 5

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } &&
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } &&
Distance : 5

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertTrue
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertTrue
Distance : 5

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } super
Distance : 5

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } value
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } value
Distance : 5

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkState
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkState
Distance : 5

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } int
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } int
Distance : 5

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } i
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } i
Distance : 5

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } (
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } (
Distance : 5

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <blank>
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <blank>
Distance : 5

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ;
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ;
Distance : 5

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } )
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } )
Distance : 5

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkArgument
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkArgument
Distance : 5

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } t
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } t
Distance : 5

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <s>
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <s>
Distance : 5

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !
Distance : 5

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } d
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } d
Distance : 5

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } index
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } index
Distance : 5

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } :
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } :
Distance : 5

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fail
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fail
Distance : 5

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } List
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } List
Distance : 5

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Args
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Args
Distance : 5

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } try
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } try
Distance : 5

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getParent
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getParent
Distance : 5

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

60
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 5

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

63
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 5

65
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 5

67
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 6

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 5

69
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 6

70
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 6

71
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 6

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } node
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } node
Distance : 5

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } isBlock
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } isBlock
Distance : 5

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } setUp
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } setUp
Distance : 5

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocations
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocations
Distance : 5

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } equals
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } equals
Distance : 5

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } for
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } for
Distance : 5

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Invocation
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Invocation
Distance : 5

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } js
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } js
Distance : 5

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } TestUtilities
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } TestUtilities
Distance : 5

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } StrBuilder
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } StrBuilder
Distance : 5

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportMatcher
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportMatcher
Distance : 5

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } StringBuilder
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } StringBuilder
Distance : 5

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } size
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } size
Distance : 5

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } scope
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } scope
Distance : 5

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } paint
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } paint
Distance : 5

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } append
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } append
Distance : 5

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } result
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } result
Distance : 5

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } nullNotPermitted
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } nullNotPermitted
Distance : 5

90
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } m
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } m
Distance : 5

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } @
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } @
Distance : 5

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } false
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } false
Distance : 5

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } double
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } double
Distance : 5

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } values
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } values
Distance : 5

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } protected
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } protected
Distance : 5

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } out
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } out
Distance : 5

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } test
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } test
Distance : 5

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } return;
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } return;
Distance : 5

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } get
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } get
Distance : 5

101
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } >
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } >
Distance : 5

102
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } public
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } public
Distance : 5

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } final
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } final
Distance : 5

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } this
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } this
Distance : 5

105
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <
Distance : 5

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } if
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } if
Distance : 5

107
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ArrayList
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ArrayList
Distance : 5

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fireChangeEvent
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fireChangeEvent
Distance : 5

109
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getInstance
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getInstance
Distance : 5

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } join
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } join
Distance : 5

111
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } JSType
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } JSType
Distance : 5

112
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

113
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ]
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ]
Distance : 5

114
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } length
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } length
Distance : 5

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } v
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } v
Distance : 5

116
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Integer
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Integer
Distance : 5

117
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } verify
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } verify
Distance : 5

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } null
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } null
Distance : 5

119
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } +
Distance : 5

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } static
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } static
Distance : 5

121
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } setAcceptedLanguage
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } setAcceptedLanguage
Distance : 5

122
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } notifyListeners
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } notifyListeners
Distance : 5

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } c
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } c
Distance : 5

124
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {}
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {}
Distance : 5

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mock
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mock
Distance : 5

126
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } true
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } true
Distance : 5

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mode
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mode
Distance : 5

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } *
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } *
Distance : 5

129
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } -
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } -
Distance : 5

130
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } lines
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } lines
Distance : 5

131
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } boolean
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } boolean
Distance : 5

132
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } isEmpty
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } isEmpty
Distance : 5

133
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } char
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } char
Distance : 5

134
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } instant
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } instant
Distance : 5

135
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } else
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } else
Distance : 5

136
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } stream
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } stream
Distance : 5

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getMessage
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } getMessage
Distance : 5

138
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } abs
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } abs
Distance : 5

139
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } matcher
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } matcher
Distance : 5

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } serialised
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } serialised
Distance : 5

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Exception
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Exception
Distance : 5

142
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Preconditions
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Preconditions
Distance : 5

143
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } compiler
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } compiler
Distance : 5

144
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ParamChecks
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ParamChecks
Distance : 5

145
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } array
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } array
Distance : 5

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <>
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <>
Distance : 5

147
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } contains
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } contains
Distance : 5

148
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } chrono
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } chrono
Distance : 5

149
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Node
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Node
Distance : 5

150
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } traverseEs6
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } traverseEs6
Distance : 5

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } a
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } a
Distance : 5

152
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LanguageMode.ECMASCRIPT_2015
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 5

153
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MutableTimePeriod
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MutableTimePeriod
Distance : 5

154
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } b
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } b
Distance : 5

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } s
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } s
Distance : 5

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } isNormalBlock
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } isNormalBlock
Distance : 5

157
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } obj
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } obj
Distance : 5

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <=
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } <=
Distance : 5

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Double
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Double
Distance : 5

160
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } clone
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } clone
Distance : 5

161
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } f
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } f
Distance : 5

162
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Override
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Override
Distance : 5

163
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } stroke
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } stroke
Distance : 5

164
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Object
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Object
Distance : 5

165
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } String
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } String
Distance : 5

166
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathRuntimeException
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathRuntimeException
Distance : 5

167
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } n
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } n
Distance : 5

168
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throw
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throw
Distance : 5

169
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } catch
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } catch
Distance : 5

170
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } void
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } void
Distance : 5

171
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ==
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ==
Distance : 5

172
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Assert
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Assert
Distance : 5

173
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ?
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ?
Distance : 5

174
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } e
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } e
Distance : 5

175
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Fraction
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Fraction
Distance : 5

176
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } /
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } /
Distance : 5

177
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } long
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } long
Distance : 5

178
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } TestUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } TestUtils
Distance : 5

179
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } [
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } [
Distance : 5

180
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } sqrt
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } sqrt
Distance : 5

181
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } PeriodType
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } PeriodType
Distance : 5

182
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } class
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } class
Distance : 5

183
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkNotNull
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkNotNull
Distance : 5

184
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } type
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } type
Distance : 5

185
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Math
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Math
Distance : 5

186
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } root
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } root
Distance : 5

187
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NodeUtil
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NodeUtil
Distance : 5

188
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } wanted
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } wanted
Distance : 5

189
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } data
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } data
Distance : 5

190
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } add
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } add
Distance : 5

191
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } source
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } source
Distance : 5

192
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ex
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ex
Distance : 5

193
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } toString
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } toString
Distance : 5

194
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } options
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } options
Distance : 5

195
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } p
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } p
Distance : 5

196
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Test
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Test
Distance : 5

197
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Class
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Class
Distance : 5

198
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NodeTraversal
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } NodeTraversal
Distance : 5

199
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mockingProgress
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mockingProgress
Distance : 5

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

1
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

2
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

3
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 2

4
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 1

5
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

6
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

7
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 2

8
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 1

9
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

10
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

11
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 1

12
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

13
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

14
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 2

15
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 1

16
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

17
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

18
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

19
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

20
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

21
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

22
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

23
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Distance : 2

24
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Distance : 2

25
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

26
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

27
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

28
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

29
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

30
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

31
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

32
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

33
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

34
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Distance : 3

35
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Distance : 2

36
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

37
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

38
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

39
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

40
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

41
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

42
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

43
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

44
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

45
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

46
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

47
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

48
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Distance : 1

49
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

50
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : Float ) ; }
Distance : 2

51
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

52
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

53
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Distance : 2

54
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

55
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

56
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

57
Tree	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

58
Tree	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

59
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

60
Tree	{ return ( b <= Float ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= Float ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 4

61
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

62
Tree	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

63
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

64
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

65
Tree	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

66
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

67
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

68
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : b ) ; }
Distance : 3

69
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : a ) ; }
Distance : 2

70
Tree	{ return ( a <= Float ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

71
Tree	{ return ( a <= Float ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

72
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

73
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

74
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

75
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

76
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Distance : 3

77
Tree	{ return ( b <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

78
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Distance : 2

79
Tree	{ return ( b <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

80
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

81
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

82
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

83
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

84
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + a ) ? Float.NaN : b ) ; }
Distance : 3

85
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

86
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

87
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 3

88
Tree	{ return ( b <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

89
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

90
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + a ) ? Float.NaN : a ) ; }
Distance : 2

91
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

92
Tree	{ return ( b <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

93
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 3

94
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Distance : 4

95
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 2

96
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

97
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

98
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Distance : 3

99
Tree	{ return ( a <= b ) ? a : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

100
Tree	{ return ( Float <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

101
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Distance : 3

102
Tree	{ return ( a <= b ) ? a : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

103
Tree	{ return ( Float <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

104
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Distance : 2

105
Tree	{ return ( a <= Float ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

106
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

107
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 3

108
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 4

109
Tree	{ return ( a <= b ) ? a : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

110
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

111
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

112
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 3

113
Tree	{ return ( a <= b ) ? a : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

114
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

115
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

116
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Distance : 4

117
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Distance : 3

118
Tree	{ return ( b <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 4

119
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 3

120
Tree	{ return ( b <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 3

121
Tree	{ return ( Float <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

122
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Distance : 3

123
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 2

124
Tree	{ return ( Float <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

125
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Distance : 2

126
Tree	{ return ( a <= a ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

127
Tree	{ return ( a <= a ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

128
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

129
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 3

130
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 4

131
Tree	{ return ( a <= a ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

132
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 3

133
Tree	{ return ( a <= a ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

134
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Distance : 4

135
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Distance : 3

136
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 4

137
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 3

138
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Distance : 3

139
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

140
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

141
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 3

142
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : Float ) ; }
Distance : 2

143
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

144
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

145
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

146
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 3

147
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Distance : 3

148
Tree	{ return ( a <= Float ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

149
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 2

150
Tree	{ return ( a <= b ) ? Float : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

151
Tree	{ return ( a <= b ) ? Float : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

152
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + a ) ? Float.NaN : Float ) ; }
Distance : 3

153
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Distance : 3

154
Tree	{ return ( Float <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

155
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Distance : 2

156
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 3

157
Tree	{ return ( a <= b ) ? Float : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( b . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

158
Tree	{ return ( a <= b ) ? Float : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( b . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

159
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 4

160
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 3

161
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Distance : 3

162
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Distance : 3

163
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + a ) ? Float.NaN : b ) ; }
Distance : 4

164
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( b + a ) ? Float.NaN : a ) ; }
Distance : 3

165
Tree	{ return ( b <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 4

166
Tree	{ return ( b <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( b <= a ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 3

167
Tree	{ return ( a <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= a ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 3

168
Tree	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

169
Tree	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 3

170
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Distance : 3

171
Tree	{ return ( a <= a ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 3

172
Tree	{ return ( Float <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

173
Tree	{ return ( a <= a ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? Float : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 4

174
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + Float ) ? Float.NaN : b ) ; }
Distance : 3

175
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : Float ) ; }
Distance : 3

176
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

177
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( Float + Float ) ? Float.NaN : a ) ; }
Distance : 2

178
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

179
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 3

180
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

181
Tree	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= b ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

182
Tree	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Code	{ return ( b <= b ) ? Float : ( Float . isNaN ( a + b ) ? Float.NaN : Float ) ; }
Distance : 3

183
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

184
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : b ) ; }
Distance : 4

185
Tree	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

186
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 3

187
Tree	{ return ( a <= b ) ? b : ( b . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( b . isNaN ( a + Float ) ? Float.NaN : a ) ; }
Distance : 2

188
Tree	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Code	{ return ( b <= Float ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : a ) ; }
Distance : 3

189
Tree	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Code	{ return ( a <= b ) ? Float : ( Float . isNaN ( a + a ) ? Float.NaN : Float ) ; }
Distance : 3

190
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : b ) ; }
Distance : 3

191
Tree	{ return ( a <= Float ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

192
Tree	{ return ( a <= Float ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? b : ( Float . isNaN ( Float + b ) ? Float.NaN : a ) ; }
Distance : 2

193
Tree	{ return ( Float <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( Float <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 3

194
Tree	{ return ( a <= Float ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= Float ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

195
Tree	{ return ( b <= a ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( b <= a ) ? b : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 4

196
Tree	{ return ( Float <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( Float <= Float ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 2

197
Tree	{ return ( b <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? a : ( Float . isNaN ( a + Float ) ? Float.NaN : b ) ; }
Distance : 4

198
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : a ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( b + Float ) ? Float.NaN : a ) ; }
Distance : 3

199
Tree	{ return ( a <= Float ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= Float ) ? a : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return fit ( new Gaussian.Parametric () , guess ) ; protected
Code	return fit ( new Gaussian.Parametric () , guess ) ; protected
Distance : 5

1
Tree	return fit ( new Gaussian.Parametric () , guess ) ; class
Code	return fit ( new Gaussian.Parametric () , guess ) ; class
Distance : 5

2
Tree	return fit ( new Gaussian.Parametric () , guess ) ; array
Code	return fit ( new Gaussian.Parametric () , guess ) ; array
Distance : 5

3
Tree	return fit ( new Gaussian.Parametric () , guess ) ; MathRuntimeException
Code	return fit ( new Gaussian.Parametric () , guess ) ; MathRuntimeException
Distance : 5

4
Tree	return fit ( new Gaussian.Parametric () , guess ) ; {}
Code	return fit ( new Gaussian.Parametric () , guess ) ; {}
Distance : 5

5
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Override
Code	return fit ( new Gaussian.Parametric () , guess ) ; Override
Distance : 5

6
Tree	return fit ( new Gaussian.Parametric () , guess ) ; f
Code	return fit ( new Gaussian.Parametric () , guess ) ; f
Distance : 5

7
Tree	return fit ( new Gaussian.Parametric () , guess ) ; [
Code	return fit ( new Gaussian.Parametric () , guess ) ; [
Distance : 5

8
Tree	return fit ( new Gaussian.Parametric () , guess ) ; -
Code	return fit ( new Gaussian.Parametric () , guess ) ; -
Distance : 5

9
Tree	return fit ( new Gaussian.Parametric () , guess ) ; &&
Code	return fit ( new Gaussian.Parametric () , guess ) ; &&
Distance : 5

10
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Preconditions
Code	return fit ( new Gaussian.Parametric () , guess ) ; Preconditions
Distance : 5

11
Tree	return fit ( new Gaussian.Parametric () , guess ) ; true
Code	return fit ( new Gaussian.Parametric () , guess ) ; true
Distance : 5

12
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ]
Code	return fit ( new Gaussian.Parametric () , guess ) ; ]
Distance : 5

13
Tree	return fit ( new Gaussian.Parametric () , guess ) ; mode
Code	return fit ( new Gaussian.Parametric () , guess ) ; mode
Distance : 5

14
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ParamChecks
Code	return fit ( new Gaussian.Parametric () , guess ) ; ParamChecks
Distance : 5

15
Tree	return fit ( new Gaussian.Parametric () , guess ) ; false
Code	return fit ( new Gaussian.Parametric () , guess ) ; false
Distance : 5

16
Tree	return fit ( new Gaussian.Parametric () , guess ) ; test
Code	return fit ( new Gaussian.Parametric () , guess ) ; test
Distance : 5

17
Tree	return fit ( new Gaussian.Parametric () , guess ) ; assertEquals
Code	return fit ( new Gaussian.Parametric () , guess ) ; assertEquals
Distance : 5

18
Tree	return fit ( new Gaussian.Parametric () , guess ) ; @
Code	return fit ( new Gaussian.Parametric () , guess ) ; @
Distance : 5

19
Tree	return fit ( new Gaussian.Parametric () , guess ) ; []
Code	return fit ( new Gaussian.Parametric () , guess ) ; []
Distance : 5

20
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ==
Code	return fit ( new Gaussian.Parametric () , guess ) ; ==
Distance : 5

21
Tree	return fit ( new Gaussian.Parametric () , guess ) ; !
Code	return fit ( new Gaussian.Parametric () , guess ) ; !
Distance : 5

22
Tree	return fit ( new Gaussian.Parametric () , guess ) ; notifyListeners
Code	return fit ( new Gaussian.Parametric () , guess ) ; notifyListeners
Distance : 5

23
Tree	return fit ( new Gaussian.Parametric () , guess ) ; String
Code	return fit ( new Gaussian.Parametric () , guess ) ; String
Distance : 5

24
Tree	return fit ( new Gaussian.Parametric () , guess ) ; nullNotPermitted
Code	return fit ( new Gaussian.Parametric () , guess ) ; nullNotPermitted
Distance : 5

25
Tree	return fit ( new Gaussian.Parametric () , guess ) ; }
Code	return fit ( new Gaussian.Parametric () , guess ) ; }
Distance : 5

26
Tree	return fit ( new Gaussian.Parametric () , guess ) ; int
Code	return fit ( new Gaussian.Parametric () , guess ) ; int
Distance : 5

27
Tree	return fit ( new Gaussian.Parametric () , guess ) ; super
Code	return fit ( new Gaussian.Parametric () , guess ) ; super
Distance : 5

28
Tree	return fit ( new Gaussian.Parametric () , guess ) ; !=
Code	return fit ( new Gaussian.Parametric () , guess ) ; !=
Distance : 5

29
Tree	return fit ( new Gaussian.Parametric () , guess ) ; value
Code	return fit ( new Gaussian.Parametric () , guess ) ; value
Distance : 5

30
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Object
Code	return fit ( new Gaussian.Parametric () , guess ) ; Object
Distance : 5

31
Tree	return fit ( new Gaussian.Parametric () , guess ) ; null
Code	return fit ( new Gaussian.Parametric () , guess ) ; null
Distance : 5

32
Tree	return fit ( new Gaussian.Parametric () , guess ) ; NUMBER_CONSTANT
Code	return fit ( new Gaussian.Parametric () , guess ) ; NUMBER_CONSTANT
Distance : 5

33
Tree	return fit ( new Gaussian.Parametric () , guess ) ; =
Code	return fit ( new Gaussian.Parametric () , guess ) ; =
Distance : 5

34
Tree	return fit ( new Gaussian.Parametric () , guess ) ; new
Code	return fit ( new Gaussian.Parametric () , guess ) ; new
Distance : 5

35
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ()
Code	return fit ( new Gaussian.Parametric () , guess ) ; ()
Distance : 5

36
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ,
Code	return fit ( new Gaussian.Parametric () , guess ) ; ,
Distance : 5

37
Tree	return fit ( new Gaussian.Parametric () , guess ) ; {
Code	return fit ( new Gaussian.Parametric () , guess ) ; {
Distance : 5

38
Tree	return fit ( new Gaussian.Parametric () , guess ) ; STRING_CONSTANT
Code	return fit ( new Gaussian.Parametric () , guess ) ; STRING_CONSTANT
Distance : 5

39
Tree	return fit ( new Gaussian.Parametric () , guess ) ; )
Code	return fit ( new Gaussian.Parametric () , guess ) ; )
Distance : 5

40
Tree	return fit ( new Gaussian.Parametric () , guess ) ; <s>
Code	return fit ( new Gaussian.Parametric () , guess ) ; <s>
Distance : 5

41
Tree	return fit ( new Gaussian.Parametric () , guess ) ; return
Code	return fit ( new Gaussian.Parametric () , guess ) ; return
Distance : 5

42
Tree	return fit ( new Gaussian.Parametric () , guess ) ; <blank>
Code	return fit ( new Gaussian.Parametric () , guess ) ; <blank>
Distance : 5

43
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ;
Code	return fit ( new Gaussian.Parametric () , guess ) ; ;
Distance : 5

44
Tree	return fit ( new Gaussian.Parametric () , guess ) ; (
Code	return fit ( new Gaussian.Parametric () , guess ) ; (
Distance : 5

45
Tree	return fit ( new Gaussian.Parametric () , guess ) ; .
Code	return fit ( new Gaussian.Parametric () , guess ) ; .
Distance : 5

46
Tree	return fit ( new Gaussian.Parametric () , guess ) ; checkState
Code	return fit ( new Gaussian.Parametric () , guess ) ; checkState
Distance : 5

47
Tree	return fit ( new Gaussian.Parametric () , guess ) ; i
Code	return fit ( new Gaussian.Parametric () , guess ) ; i
Distance : 5

48
Tree	return fit ( new Gaussian.Parametric () , guess ) ; double
Code	return fit ( new Gaussian.Parametric () , guess ) ; double
Distance : 5

49
Tree	return fit ( new Gaussian.Parametric () , guess ) ; public
Code	return fit ( new Gaussian.Parametric () , guess ) ; public
Distance : 5

50
Tree	return fit ( new Gaussian.Parametric () , guess ) ; instant
Code	return fit ( new Gaussian.Parametric () , guess ) ; instant
Distance : 5

51
Tree	return fit ( new Gaussian.Parametric () , guess ) ; this
Code	return fit ( new Gaussian.Parametric () , guess ) ; this
Distance : 5

52
Tree	return fit ( new Gaussian.Parametric () , guess ) ; return
Code	return fit ( new Gaussian.Parametric () , guess ) ; return
Distance : 5

53
Tree	return fit ( new Gaussian.Parametric () , guess ) ; final
Code	return fit ( new Gaussian.Parametric () , guess ) ; final
Distance : 5

54
Tree	return fit ( new Gaussian.Parametric () , guess ) ; <
Code	return fit ( new Gaussian.Parametric () , guess ) ; <
Distance : 5

55
Tree	return fit ( new Gaussian.Parametric () , guess ) ; field
Code	return fit ( new Gaussian.Parametric () , guess ) ; field
Distance : 5

56
Tree	return fit ( new Gaussian.Parametric () , guess ) ; PlotChangeEvent
Code	return fit ( new Gaussian.Parametric () , guess ) ; PlotChangeEvent
Distance : 5

57
Tree	return fit ( new Gaussian.Parametric () , guess ) ; LanguageMode.ECMASCRIPT6
Code	return fit ( new Gaussian.Parametric () , guess ) ; LanguageMode.ECMASCRIPT6
Distance : 5

58
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Collection
Code	return fit ( new Gaussian.Parametric () , guess ) ; Collection
Distance : 5

59
Tree	return fit ( new Gaussian.Parametric () , guess ) ; solver
Code	return fit ( new Gaussian.Parametric () , guess ) ; solver
Distance : 5

60
Tree	return fit ( new Gaussian.Parametric () , guess ) ; valueOf
Code	return fit ( new Gaussian.Parametric () , guess ) ; valueOf
Distance : 5

61
Tree	return fit ( new Gaussian.Parametric () , guess ) ; dataset
Code	return fit ( new Gaussian.Parametric () , guess ) ; dataset
Distance : 5

62
Tree	return fit ( new Gaussian.Parametric () , guess ) ; mock
Code	return fit ( new Gaussian.Parametric () , guess ) ; mock
Distance : 5

63
Tree	return fit ( new Gaussian.Parametric () , guess ) ; size
Code	return fit ( new Gaussian.Parametric () , guess ) ; size
Distance : 5

64
Tree	return fit ( new Gaussian.Parametric () , guess ) ; mockingProgress
Code	return fit ( new Gaussian.Parametric () , guess ) ; mockingProgress
Distance : 5

65
Tree	return fit ( new Gaussian.Parametric () , guess ) ; char
Code	return fit ( new Gaussian.Parametric () , guess ) ; char
Distance : 5

66
Tree	return fit ( new Gaussian.Parametric () , guess ) ; return;
Code	return fit ( new Gaussian.Parametric () , guess ) ; return;
Distance : 5

67
Tree	return fit ( new Gaussian.Parametric () , guess ) ; JSType
Code	return fit ( new Gaussian.Parametric () , guess ) ; JSType
Distance : 5

68
Tree	return fit ( new Gaussian.Parametric () , guess ) ; static
Code	return fit ( new Gaussian.Parametric () , guess ) ; static
Distance : 5

69
Tree	return fit ( new Gaussian.Parametric () , guess ) ; get
Code	return fit ( new Gaussian.Parametric () , guess ) ; get
Distance : 5

70
Tree	return fit ( new Gaussian.Parametric () , guess ) ; isEmpty
Code	return fit ( new Gaussian.Parametric () , guess ) ; isEmpty
Distance : 5

71
Tree	return fit ( new Gaussian.Parametric () , guess ) ; else
Code	return fit ( new Gaussian.Parametric () , guess ) ; else
Distance : 5

72
Tree	return fit ( new Gaussian.Parametric () , guess ) ; >
Code	return fit ( new Gaussian.Parametric () , guess ) ; >
Distance : 5

73
Tree	return fit ( new Gaussian.Parametric () , guess ) ; if
Code	return fit ( new Gaussian.Parametric () , guess ) ; if
Distance : 5

74
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getMessage
Code	return fit ( new Gaussian.Parametric () , guess ) ; getMessage
Distance : 5

75
Tree	return fit ( new Gaussian.Parametric () , guess ) ; stream
Code	return fit ( new Gaussian.Parametric () , guess ) ; stream
Distance : 5

76
Tree	return fit ( new Gaussian.Parametric () , guess ) ; abs
Code	return fit ( new Gaussian.Parametric () , guess ) ; abs
Distance : 5

77
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getChronology
Code	return fit ( new Gaussian.Parametric () , guess ) ; getChronology
Distance : 5

78
Tree	return fit ( new Gaussian.Parametric () , guess ) ; StrBuilder
Code	return fit ( new Gaussian.Parametric () , guess ) ; StrBuilder
Distance : 5

79
Tree	return fit ( new Gaussian.Parametric () , guess ) ; js
Code	return fit ( new Gaussian.Parametric () , guess ) ; js
Distance : 5

80
Tree	return fit ( new Gaussian.Parametric () , guess ) ; d
Code	return fit ( new Gaussian.Parametric () , guess ) ; d
Distance : 5

81
Tree	return fit ( new Gaussian.Parametric () , guess ) ; TestUtilities
Code	return fit ( new Gaussian.Parametric () , guess ) ; TestUtilities
Distance : 5

82
Tree	return fit ( new Gaussian.Parametric () , guess ) ; for
Code	return fit ( new Gaussian.Parametric () , guess ) ; for
Distance : 5

83
Tree	return fit ( new Gaussian.Parametric () , guess ) ; externs
Code	return fit ( new Gaussian.Parametric () , guess ) ; externs
Distance : 5

84
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Invocation
Code	return fit ( new Gaussian.Parametric () , guess ) ; Invocation
Distance : 5

85
Tree	return fit ( new Gaussian.Parametric () , guess ) ; equals
Code	return fit ( new Gaussian.Parametric () , guess ) ; equals
Distance : 5

86
Tree	return fit ( new Gaussian.Parametric () , guess ) ; node
Code	return fit ( new Gaussian.Parametric () , guess ) ; node
Distance : 5

87
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getParent
Code	return fit ( new Gaussian.Parametric () , guess ) ; getParent
Distance : 5

88
Tree	return fit ( new Gaussian.Parametric () , guess ) ; reportMatcher
Code	return fit ( new Gaussian.Parametric () , guess ) ; reportMatcher
Distance : 5

89
Tree	return fit ( new Gaussian.Parametric () , guess ) ; setUp
Code	return fit ( new Gaussian.Parametric () , guess ) ; setUp
Distance : 5

90
Tree	return fit ( new Gaussian.Parametric () , guess ) ; out
Code	return fit ( new Gaussian.Parametric () , guess ) ; out
Distance : 5

91
Tree	return fit ( new Gaussian.Parametric () , guess ) ; index
Code	return fit ( new Gaussian.Parametric () , guess ) ; index
Distance : 5

92
Tree	return fit ( new Gaussian.Parametric () , guess ) ; invocations
Code	return fit ( new Gaussian.Parametric () , guess ) ; invocations
Distance : 5

93
Tree	return fit ( new Gaussian.Parametric () , guess ) ; setAcceptedLanguage
Code	return fit ( new Gaussian.Parametric () , guess ) ; setAcceptedLanguage
Distance : 5

94
Tree	return fit ( new Gaussian.Parametric () , guess ) ; clone
Code	return fit ( new Gaussian.Parametric () , guess ) ; clone
Distance : 5

95
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Double
Code	return fit ( new Gaussian.Parametric () , guess ) ; Double
Distance : 5

96
Tree	return fit ( new Gaussian.Parametric () , guess ) ; matcher
Code	return fit ( new Gaussian.Parametric () , guess ) ; matcher
Distance : 5

97
Tree	return fit ( new Gaussian.Parametric () , guess ) ; values
Code	return fit ( new Gaussian.Parametric () , guess ) ; values
Distance : 5

98
Tree	return fit ( new Gaussian.Parametric () , guess ) ; s
Code	return fit ( new Gaussian.Parametric () , guess ) ; s
Distance : 5

99
Tree	return fit ( new Gaussian.Parametric () , guess ) ;
Code	return fit ( new Gaussian.Parametric () , guess ) ;
Distance : 4

100
Tree	return fit ( new Gaussian.Parametric () , guess ) ; obj
Code	return fit ( new Gaussian.Parametric () , guess ) ; obj
Distance : 5

101
Tree	return fit ( new Gaussian.Parametric () , guess ) ; <=
Code	return fit ( new Gaussian.Parametric () , guess ) ; <=
Distance : 5

102
Tree	return fit ( new Gaussian.Parametric () , guess ) ; isNormalBlock
Code	return fit ( new Gaussian.Parametric () , guess ) ; isNormalBlock
Distance : 5

103
Tree	return fit ( new Gaussian.Parametric () , guess ) ; MutableTimePeriod
Code	return fit ( new Gaussian.Parametric () , guess ) ; MutableTimePeriod
Distance : 5

104
Tree	return fit ( new Gaussian.Parametric () , guess ) ; a
Code	return fit ( new Gaussian.Parametric () , guess ) ; a
Distance : 5

105
Tree	return fit ( new Gaussian.Parametric () , guess ) ; StringBuilder
Code	return fit ( new Gaussian.Parametric () , guess ) ; StringBuilder
Distance : 5

106
Tree	return fit ( new Gaussian.Parametric () , guess ) ; LanguageMode.ECMASCRIPT_2015
Code	return fit ( new Gaussian.Parametric () , guess ) ; LanguageMode.ECMASCRIPT_2015
Distance : 5

107
Tree	return fit ( new Gaussian.Parametric () , guess ) ; stroke
Code	return fit ( new Gaussian.Parametric () , guess ) ; stroke
Distance : 5

108
Tree	return fit ( new Gaussian.Parametric () , guess ) ; b
Code	return fit ( new Gaussian.Parametric () , guess ) ; b
Distance : 5

109
Tree	return fit ( new Gaussian.Parametric () , guess ) ; traverseEs6
Code	return fit ( new Gaussian.Parametric () , guess ) ; traverseEs6
Distance : 5

110
Tree	return fit ( new Gaussian.Parametric () , guess ) ; chrono
Code	return fit ( new Gaussian.Parametric () , guess ) ; chrono
Distance : 5

111
Tree	return fit ( new Gaussian.Parametric () , guess ) ; append
Code	return fit ( new Gaussian.Parametric () , guess ) ; append
Distance : 5

112
Tree	return fit ( new Gaussian.Parametric () , guess ) ; UnivariateFunction
Code	return fit ( new Gaussian.Parametric () , guess ) ; UnivariateFunction
Distance : 5

113
Tree	return fit ( new Gaussian.Parametric () , guess ) ; scope
Code	return fit ( new Gaussian.Parametric () , guess ) ; scope
Distance : 5

114
Tree	return fit ( new Gaussian.Parametric () , guess ) ; sb
Code	return fit ( new Gaussian.Parametric () , guess ) ; sb
Distance : 5

115
Tree	return fit ( new Gaussian.Parametric () , guess ) ; returnZero
Code	return fit ( new Gaussian.Parametric () , guess ) ; returnZero
Distance : 5

116
Tree	return fit ( new Gaussian.Parametric () , guess ) ; sqrt
Code	return fit ( new Gaussian.Parametric () , guess ) ; sqrt
Distance : 5

117
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getFirstChild
Code	return fit ( new Gaussian.Parametric () , guess ) ; getFirstChild
Distance : 5

118
Tree	return fit ( new Gaussian.Parametric () , guess ) ; throws
Code	return fit ( new Gaussian.Parametric () , guess ) ; throws
Distance : 5

119
Tree	return fit ( new Gaussian.Parametric () , guess ) ; y
Code	return fit ( new Gaussian.Parametric () , guess ) ; y
Distance : 5

120
Tree	return fit ( new Gaussian.Parametric () , guess ) ; simpleMethod
Code	return fit ( new Gaussian.Parametric () , guess ) ; simpleMethod
Distance : 5

121
Tree	return fit ( new Gaussian.Parametric () , guess ) ; isBlock
Code	return fit ( new Gaussian.Parametric () , guess ) ; isBlock
Distance : 5

122
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getArgumentMatcherStorage
Code	return fit ( new Gaussian.Parametric () , guess ) ; getArgumentMatcherStorage
Distance : 5

123
Tree	return fit ( new Gaussian.Parametric () , guess ) ; alpha
Code	return fit ( new Gaussian.Parametric () , guess ) ; alpha
Distance : 5

124
Tree	return fit ( new Gaussian.Parametric () , guess ) ; optimizer
Code	return fit ( new Gaussian.Parametric () , guess ) ; optimizer
Distance : 5

125
Tree	return fit ( new Gaussian.Parametric () , guess ) ; instance
Code	return fit ( new Gaussian.Parametric () , guess ) ; instance
Distance : 5

126
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getField
Code	return fit ( new Gaussian.Parametric () , guess ) ; getField
Distance : 5

127
Tree	return fit ( new Gaussian.Parametric () , guess ) ; length
Code	return fit ( new Gaussian.Parametric () , guess ) ; length
Distance : 5

128
Tree	return fit ( new Gaussian.Parametric () , guess ) ; name
Code	return fit ( new Gaussian.Parametric () , guess ) ; name
Distance : 5

129
Tree	return fit ( new Gaussian.Parametric () , guess ) ; IllegalArgumentException
Code	return fit ( new Gaussian.Parametric () , guess ) ; IllegalArgumentException
Distance : 5

130
Tree	return fit ( new Gaussian.Parametric () , guess ) ; t
Code	return fit ( new Gaussian.Parametric () , guess ) ; t
Distance : 5

131
Tree	return fit ( new Gaussian.Parametric () , guess ) ; FastMath
Code	return fit ( new Gaussian.Parametric () , guess ) ; FastMath
Distance : 5

132
Tree	return fit ( new Gaussian.Parametric () , guess ) ; invocation
Code	return fit ( new Gaussian.Parametric () , guess ) ; invocation
Distance : 5

133
Tree	return fit ( new Gaussian.Parametric () , guess ) ; expected
Code	return fit ( new Gaussian.Parametric () , guess ) ; expected
Distance : 5

134
Tree	return fit ( new Gaussian.Parametric () , guess ) ; reportCodeChange
Code	return fit ( new Gaussian.Parametric () , guess ) ; reportCodeChange
Distance : 5

135
Tree	return fit ( new Gaussian.Parametric () , guess ) ; x
Code	return fit ( new Gaussian.Parametric () , guess ) ; x
Distance : 5

136
Tree	return fit ( new Gaussian.Parametric () , guess ) ; createIllegalArgumentException
Code	return fit ( new Gaussian.Parametric () , guess ) ; createIllegalArgumentException
Distance : 5

137
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ArrayList
Code	return fit ( new Gaussian.Parametric () , guess ) ; ArrayList
Distance : 5

138
Tree	return fit ( new Gaussian.Parametric () , guess ) ; parent
Code	return fit ( new Gaussian.Parametric () , guess ) ; parent
Distance : 5

139
Tree	return fit ( new Gaussian.Parametric () , guess ) ; LINE_JOINER
Code	return fit ( new Gaussian.Parametric () , guess ) ; LINE_JOINER
Distance : 5

140
Tree	return fit ( new Gaussian.Parametric () , guess ) ; testSame
Code	return fit ( new Gaussian.Parametric () , guess ) ; testSame
Distance : 5

141
Tree	return fit ( new Gaussian.Parametric () , guess ) ; str
Code	return fit ( new Gaussian.Parametric () , guess ) ; str
Distance : 5

142
Tree	return fit ( new Gaussian.Parametric () , guess ) ; assertThat
Code	return fit ( new Gaussian.Parametric () , guess ) ; assertThat
Distance : 5

143
Tree	return fit ( new Gaussian.Parametric () , guess ) ; m
Code	return fit ( new Gaussian.Parametric () , guess ) ; m
Distance : 5

144
Tree	return fit ( new Gaussian.Parametric () , guess ) ; try
Code	return fit ( new Gaussian.Parametric () , guess ) ; try
Distance : 5

145
Tree	return fit ( new Gaussian.Parametric () , guess ) ; :
Code	return fit ( new Gaussian.Parametric () , guess ) ; :
Distance : 5

146
Tree	return fit ( new Gaussian.Parametric () , guess ) ; result
Code	return fit ( new Gaussian.Parametric () , guess ) ; result
Distance : 5

147
Tree	return fit ( new Gaussian.Parametric () , guess ) ; List
Code	return fit ( new Gaussian.Parametric () , guess ) ; List
Distance : 5

148
Tree	return fit ( new Gaussian.Parametric () , guess ) ; contains
Code	return fit ( new Gaussian.Parametric () , guess ) ; contains
Distance : 5

149
Tree	return fit ( new Gaussian.Parametric () , guess ) ; <>
Code	return fit ( new Gaussian.Parametric () , guess ) ; <>
Distance : 5

150
Tree	return fit ( new Gaussian.Parametric () , guess ) ; fail
Code	return fit ( new Gaussian.Parametric () , guess ) ; fail
Distance : 5

151
Tree	return fit ( new Gaussian.Parametric () , guess ) ; join
Code	return fit ( new Gaussian.Parametric () , guess ) ; join
Distance : 5

152
Tree	return fit ( new Gaussian.Parametric () , guess ) ; paint
Code	return fit ( new Gaussian.Parametric () , guess ) ; paint
Distance : 5

153
Tree	return fit ( new Gaussian.Parametric () , guess ) ; boolean
Code	return fit ( new Gaussian.Parametric () , guess ) ; boolean
Distance : 5

154
Tree	return fit ( new Gaussian.Parametric () , guess ) ; getInstance
Code	return fit ( new Gaussian.Parametric () , guess ) ; getInstance
Distance : 5

155
Tree	return fit ( new Gaussian.Parametric () , guess ) ; type
Code	return fit ( new Gaussian.Parametric () , guess ) ; type
Distance : 5

156
Tree	return fit ( new Gaussian.Parametric () , guess ) ; serialised
Code	return fit ( new Gaussian.Parametric () , guess ) ; serialised
Distance : 5

157
Tree	return fit ( new Gaussian.Parametric () , guess ) ; fireChangeEvent
Code	return fit ( new Gaussian.Parametric () , guess ) ; fireChangeEvent
Distance : 5

158
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ?
Code	return fit ( new Gaussian.Parametric () , guess ) ; ?
Distance : 5

159
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Test
Code	return fit ( new Gaussian.Parametric () , guess ) ; Test
Distance : 5

160
Tree	return fit ( new Gaussian.Parametric () , guess ) ; toString
Code	return fit ( new Gaussian.Parametric () , guess ) ; toString
Distance : 5

161
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Class
Code	return fit ( new Gaussian.Parametric () , guess ) ; Class
Distance : 5

162
Tree	return fit ( new Gaussian.Parametric () , guess ) ; options
Code	return fit ( new Gaussian.Parametric () , guess ) ; options
Distance : 5

163
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Math
Code	return fit ( new Gaussian.Parametric () , guess ) ; Math
Distance : 5

164
Tree	return fit ( new Gaussian.Parametric () , guess ) ; p
Code	return fit ( new Gaussian.Parametric () , guess ) ; p
Distance : 5

165
Tree	return fit ( new Gaussian.Parametric () , guess ) ; source
Code	return fit ( new Gaussian.Parametric () , guess ) ; source
Distance : 5

166
Tree	return fit ( new Gaussian.Parametric () , guess ) ; NodeTraversal
Code	return fit ( new Gaussian.Parametric () , guess ) ; NodeTraversal
Distance : 5

167
Tree	return fit ( new Gaussian.Parametric () , guess ) ; data
Code	return fit ( new Gaussian.Parametric () , guess ) ; data
Distance : 5

168
Tree	return fit ( new Gaussian.Parametric () , guess ) ; checkArgument
Code	return fit ( new Gaussian.Parametric () , guess ) ; checkArgument
Distance : 5

169
Tree	return fit ( new Gaussian.Parametric () , guess ) ; add
Code	return fit ( new Gaussian.Parametric () , guess ) ; add
Distance : 5

170
Tree	return fit ( new Gaussian.Parametric () , guess ) ; NodeUtil
Code	return fit ( new Gaussian.Parametric () , guess ) ; NodeUtil
Distance : 5

171
Tree	return fit ( new Gaussian.Parametric () , guess ) ; wanted
Code	return fit ( new Gaussian.Parametric () , guess ) ; wanted
Distance : 5

172
Tree	return fit ( new Gaussian.Parametric () , guess ) ; *
Code	return fit ( new Gaussian.Parametric () , guess ) ; *
Distance : 5

173
Tree	return fit ( new Gaussian.Parametric () , guess ) ; ex
Code	return fit ( new Gaussian.Parametric () , guess ) ; ex
Distance : 5

174
Tree	return fit ( new Gaussian.Parametric () , guess ) ; root
Code	return fit ( new Gaussian.Parametric () , guess ) ; root
Distance : 5

175
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Args
Code	return fit ( new Gaussian.Parametric () , guess ) ; Args
Distance : 5

176
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Integer
Code	return fit ( new Gaussian.Parametric () , guess ) ; Integer
Distance : 5

177
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Node
Code	return fit ( new Gaussian.Parametric () , guess ) ; Node
Distance : 5

178
Tree	return fit ( new Gaussian.Parametric () , guess ) ; v
Code	return fit ( new Gaussian.Parametric () , guess ) ; v
Distance : 5

179
Tree	return fit ( new Gaussian.Parametric () , guess ) ; lines
Code	return fit ( new Gaussian.Parametric () , guess ) ; lines
Distance : 5

180
Tree	return fit ( new Gaussian.Parametric () , guess ) ; c
Code	return fit ( new Gaussian.Parametric () , guess ) ; c
Distance : 5

181
Tree	return fit ( new Gaussian.Parametric () , guess ) ; verify
Code	return fit ( new Gaussian.Parametric () , guess ) ; verify
Distance : 5

182
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Exception
Code	return fit ( new Gaussian.Parametric () , guess ) ; Exception
Distance : 5

183
Tree	return fit ( new Gaussian.Parametric () , guess ) ; catch
Code	return fit ( new Gaussian.Parametric () , guess ) ; catch
Distance : 5

184
Tree	return fit ( new Gaussian.Parametric () , guess ) ; n
Code	return fit ( new Gaussian.Parametric () , guess ) ; n
Distance : 5

185
Tree	return fit ( new Gaussian.Parametric () , guess ) ; +
Code	return fit ( new Gaussian.Parametric () , guess ) ; +
Distance : 5

186
Tree	return fit ( new Gaussian.Parametric () , guess ) ; pattern
Code	return fit ( new Gaussian.Parametric () , guess ) ; pattern
Distance : 5

187
Tree	return fit ( new Gaussian.Parametric () , guess ) ; e
Code	return fit ( new Gaussian.Parametric () , guess ) ; e
Distance : 5

188
Tree	return fit ( new Gaussian.Parametric () , guess ) ; compiler
Code	return fit ( new Gaussian.Parametric () , guess ) ; compiler
Distance : 5

189
Tree	return fit ( new Gaussian.Parametric () , guess ) ; void
Code	return fit ( new Gaussian.Parametric () , guess ) ; void
Distance : 5

190
Tree	return fit ( new Gaussian.Parametric () , guess ) ; T
Code	return fit ( new Gaussian.Parametric () , guess ) ; T
Distance : 5

191
Tree	return fit ( new Gaussian.Parametric () , guess ) ; /
Code	return fit ( new Gaussian.Parametric () , guess ) ; /
Distance : 5

192
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Fraction
Code	return fit ( new Gaussian.Parametric () , guess ) ; Fraction
Distance : 5

193
Tree	return fit ( new Gaussian.Parametric () , guess ) ; TestUtils
Code	return fit ( new Gaussian.Parametric () , guess ) ; TestUtils
Distance : 5

194
Tree	return fit ( new Gaussian.Parametric () , guess ) ; checkNotNull
Code	return fit ( new Gaussian.Parametric () , guess ) ; checkNotNull
Distance : 5

195
Tree	return fit ( new Gaussian.Parametric () , guess ) ; assertTrue
Code	return fit ( new Gaussian.Parametric () , guess ) ; assertTrue
Distance : 5

196
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Assert
Code	return fit ( new Gaussian.Parametric () , guess ) ; Assert
Distance : 5

197
Tree	return fit ( new Gaussian.Parametric () , guess ) ; long
Code	return fit ( new Gaussian.Parametric () , guess ) ; long
Distance : 5

198
Tree	return fit ( new Gaussian.Parametric () , guess ) ; throw
Code	return fit ( new Gaussian.Parametric () , guess ) ; throw
Distance : 5

199
Tree	return fit ( new Gaussian.Parametric () , guess ) ; PeriodType
Code	return fit ( new Gaussian.Parametric () , guess ) ; PeriodType
Distance : 5

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	int sum = NUMBER_CONSTANT ; StrBuilder
Code	int sum = NUMBER_CONSTANT ; StrBuilder
Distance : 2

1
Tree	int sum = NUMBER_CONSTANT ; add
Code	int sum = NUMBER_CONSTANT ; add
Distance : 2

2
Tree	int sum = NUMBER_CONSTANT ; checkArgument
Code	int sum = NUMBER_CONSTANT ; checkArgument
Distance : 2

3
Tree	int sum = NUMBER_CONSTANT ; data
Code	int sum = NUMBER_CONSTANT ; data
Distance : 2

4
Tree	int sum = NUMBER_CONSTANT ; NodeUtil
Code	int sum = NUMBER_CONSTANT ; NodeUtil
Distance : 2

5
Tree	int sum = NUMBER_CONSTANT ; void
Code	int sum = NUMBER_CONSTANT ; void
Distance : 2

6
Tree	int sum = NUMBER_CONSTANT ; throw
Code	int sum = NUMBER_CONSTANT ; throw
Distance : 2

7
Tree	int sum = NUMBER_CONSTANT ; compiler
Code	int sum = NUMBER_CONSTANT ; compiler
Distance : 2

8
Tree	int sum = NUMBER_CONSTANT ; catch
Code	int sum = NUMBER_CONSTANT ; catch
Distance : 2

9
Tree	int sum = NUMBER_CONSTANT ; e
Code	int sum = NUMBER_CONSTANT ; e
Distance : 2

10
Tree	int sum = NUMBER_CONSTANT ; +
Code	int sum = NUMBER_CONSTANT ; +
Distance : 2

11
Tree	int sum = NUMBER_CONSTANT ; n
Code	int sum = NUMBER_CONSTANT ; n
Distance : 2

12
Tree	int sum = NUMBER_CONSTANT ; NodeTraversal
Code	int sum = NUMBER_CONSTANT ; NodeTraversal
Distance : 2

13
Tree	int sum = NUMBER_CONSTANT ; reportCodeChange
Code	int sum = NUMBER_CONSTANT ; reportCodeChange
Distance : 2

14
Tree	int sum = NUMBER_CONSTANT ; mock
Code	int sum = NUMBER_CONSTANT ; mock
Distance : 2

15
Tree	int sum = NUMBER_CONSTANT ; ]
Code	int sum = NUMBER_CONSTANT ; ]
Distance : 2

16
Tree	int sum = NUMBER_CONSTANT ; mode
Code	int sum = NUMBER_CONSTANT ; mode
Distance : 2

17
Tree	int sum = NUMBER_CONSTANT ; &&
Code	int sum = NUMBER_CONSTANT ; &&
Distance : 2

18
Tree	int sum = NUMBER_CONSTANT ; public
Code	int sum = NUMBER_CONSTANT ; public
Distance : 2

19
Tree	int sum = NUMBER_CONSTANT ; final
Code	int sum = NUMBER_CONSTANT ; final
Distance : 2

20
Tree	int sum = NUMBER_CONSTANT ; null
Code	int sum = NUMBER_CONSTANT ; null
Distance : 2

21
Tree	int sum = NUMBER_CONSTANT ; getArgumentMatcherStorage
Code	int sum = NUMBER_CONSTANT ; getArgumentMatcherStorage
Distance : 2

22
Tree	int sum = NUMBER_CONSTANT ; wanted
Code	int sum = NUMBER_CONSTANT ; wanted
Distance : 2

23
Tree	int sum = NUMBER_CONSTANT ; if
Code	int sum = NUMBER_CONSTANT ; if
Distance : 2

24
Tree	int sum = NUMBER_CONSTANT ; ex
Code	int sum = NUMBER_CONSTANT ; ex
Distance : 2

25
Tree	int sum = NUMBER_CONSTANT ; Preconditions
Code	int sum = NUMBER_CONSTANT ; Preconditions
Distance : 2

26
Tree	int sum = NUMBER_CONSTANT ; new
Code	int sum = NUMBER_CONSTANT ; new
Distance : 2

27
Tree	int sum = NUMBER_CONSTANT ; =
Code	int sum = NUMBER_CONSTANT ; =
Distance : 2

28
Tree	int sum = NUMBER_CONSTANT ; STRING_CONSTANT
Code	int sum = NUMBER_CONSTANT ; STRING_CONSTANT
Distance : 2

29
Tree	int sum = NUMBER_CONSTANT ; ()
Code	int sum = NUMBER_CONSTANT ; ()
Distance : 2

30
Tree	int sum = NUMBER_CONSTANT ; ,
Code	int sum = NUMBER_CONSTANT ; ,
Distance : 2

31
Tree	int sum = NUMBER_CONSTANT ; {
Code	int sum = NUMBER_CONSTANT ; {
Distance : 2

32
Tree	int sum = NUMBER_CONSTANT ; }
Code	int sum = NUMBER_CONSTANT ; }
Distance : 2

33
Tree	int sum = NUMBER_CONSTANT ; <
Code	int sum = NUMBER_CONSTANT ; <
Distance : 2

34
Tree	int sum = NUMBER_CONSTANT ; .
Code	int sum = NUMBER_CONSTANT ; .
Distance : 2

35
Tree	int sum = NUMBER_CONSTANT ; (
Code	int sum = NUMBER_CONSTANT ; (
Distance : 2

36
Tree	int sum = NUMBER_CONSTANT ; ;
Code	int sum = NUMBER_CONSTANT ; ;
Distance : 2

37
Tree	int sum = NUMBER_CONSTANT ; <blank>
Code	int sum = NUMBER_CONSTANT ; <blank>
Distance : 2

38
Tree	int sum = NUMBER_CONSTANT ; int
Code	int sum = NUMBER_CONSTANT ; int
Distance : 2

39
Tree	int sum = NUMBER_CONSTANT ; <s>
Code	int sum = NUMBER_CONSTANT ; <s>
Distance : 2

40
Tree	int sum = NUMBER_CONSTANT ; )
Code	int sum = NUMBER_CONSTANT ; )
Distance : 2

41
Tree	int sum = NUMBER_CONSTANT ; >
Code	int sum = NUMBER_CONSTANT ; >
Distance : 2

42
Tree	int sum = NUMBER_CONSTANT ; js
Code	int sum = NUMBER_CONSTANT ; js
Distance : 2

43
Tree	int sum = NUMBER_CONSTANT ; return
Code	int sum = NUMBER_CONSTANT ; return
Distance : 2

44
Tree	int sum = NUMBER_CONSTANT ; true
Code	int sum = NUMBER_CONSTANT ; true
Distance : 2

45
Tree	int sum = NUMBER_CONSTANT ; this
Code	int sum = NUMBER_CONSTANT ; this
Distance : 2

46
Tree	int sum = NUMBER_CONSTANT ; -
Code	int sum = NUMBER_CONSTANT ; -
Distance : 2

47
Tree	int sum = NUMBER_CONSTANT ; root
Code	int sum = NUMBER_CONSTANT ; root
Distance : 2

48
Tree	int sum = NUMBER_CONSTANT ; NUMBER_CONSTANT
Code	int sum = NUMBER_CONSTANT ; NUMBER_CONSTANT
Distance : 2

49
Tree	int sum = NUMBER_CONSTANT ; /
Code	int sum = NUMBER_CONSTANT ; /
Distance : 2

50
Tree	int sum = NUMBER_CONSTANT ; long
Code	int sum = NUMBER_CONSTANT ; long
Distance : 2

51
Tree	int sum = NUMBER_CONSTANT ; value
Code	int sum = NUMBER_CONSTANT ; value
Distance : 2

52
Tree	int sum = NUMBER_CONSTANT ; T
Code	int sum = NUMBER_CONSTANT ; T
Distance : 2

53
Tree	int sum = NUMBER_CONSTANT ; setAcceptedLanguage
Code	int sum = NUMBER_CONSTANT ; setAcceptedLanguage
Distance : 2

54
Tree	int sum = NUMBER_CONSTANT ; super
Code	int sum = NUMBER_CONSTANT ; super
Distance : 2

55
Tree	int sum = NUMBER_CONSTANT ; instant
Code	int sum = NUMBER_CONSTANT ; instant
Distance : 2

56
Tree	int sum = NUMBER_CONSTANT ; matcher
Code	int sum = NUMBER_CONSTANT ; matcher
Distance : 2

57
Tree	int sum = NUMBER_CONSTANT ; stream
Code	int sum = NUMBER_CONSTANT ; stream
Distance : 2

58
Tree	int sum = NUMBER_CONSTANT ; values
Code	int sum = NUMBER_CONSTANT ; values
Distance : 2

59
Tree	int sum = NUMBER_CONSTANT ; getMessage
Code	int sum = NUMBER_CONSTANT ; getMessage
Distance : 2

60
Tree	int sum = NUMBER_CONSTANT ; else
Code	int sum = NUMBER_CONSTANT ; else
Distance : 2

61
Tree	int sum = NUMBER_CONSTANT ; *
Code	int sum = NUMBER_CONSTANT ; *
Distance : 2

62
Tree	int sum = NUMBER_CONSTANT ; y
Code	int sum = NUMBER_CONSTANT ; y
Distance : 2

63
Tree	int sum = NUMBER_CONSTANT ; isBlock
Code	int sum = NUMBER_CONSTANT ; isBlock
Distance : 2

64
Tree	int sum = NUMBER_CONSTANT ; abs
Code	int sum = NUMBER_CONSTANT ; abs
Distance : 2

65
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

66
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

67
Tree	byte sum = NUMBER_CONSTANT ;
Code	byte sum = NUMBER_CONSTANT ;
Distance : 1

68
Tree	short sum = NUMBER_CONSTANT ;
Code	short sum = NUMBER_CONSTANT ;
Distance : 1

69
Tree	char sum = NUMBER_CONSTANT ;
Code	char sum = NUMBER_CONSTANT ;
Distance : 1

70
Tree	void sum = NUMBER_CONSTANT ;
Code	void sum = NUMBER_CONSTANT ;
Distance : 1

71
Tree	float sum = NUMBER_CONSTANT ;
Code	float sum = NUMBER_CONSTANT ;
Distance : 1

72
Tree	int sum = NUMBER_CONSTANT ; !=
Code	int sum = NUMBER_CONSTANT ; !=
Distance : 2

73
Tree	int sum = NUMBER_CONSTANT ; Assert
Code	int sum = NUMBER_CONSTANT ; Assert
Distance : 2

74
Tree	int sum = NUMBER_CONSTANT ; alpha
Code	int sum = NUMBER_CONSTANT ; alpha
Distance : 2

75
Tree	int sum = NUMBER_CONSTANT ; double
Code	int sum = NUMBER_CONSTANT ; double
Distance : 2

76
Tree	int sum = NUMBER_CONSTANT ; checkNotNull
Code	int sum = NUMBER_CONSTANT ; checkNotNull
Distance : 2

77
Tree	int sum = NUMBER_CONSTANT ; TestUtils
Code	int sum = NUMBER_CONSTANT ; TestUtils
Distance : 2

78
Tree	int sum = NUMBER_CONSTANT ; Fraction
Code	int sum = NUMBER_CONSTANT ; Fraction
Distance : 2

79
Tree	int sum = NUMBER_CONSTANT ; valueOf
Code	int sum = NUMBER_CONSTANT ; valueOf
Distance : 2

80
Tree	int sum = NUMBER_CONSTANT ; node
Code	int sum = NUMBER_CONSTANT ; node
Distance : 2

81
Tree	int sum = NUMBER_CONSTANT ; getParent
Code	int sum = NUMBER_CONSTANT ; getParent
Distance : 2

82
Tree	int sum = NUMBER_CONSTANT ; reportMatcher
Code	int sum = NUMBER_CONSTANT ; reportMatcher
Distance : 2

83
Tree	int sum = NUMBER_CONSTANT ; setUp
Code	int sum = NUMBER_CONSTANT ; setUp
Distance : 2

84
Tree	int sum = NUMBER_CONSTANT ; out
Code	int sum = NUMBER_CONSTANT ; out
Distance : 2

85
Tree	int sum = NUMBER_CONSTANT ; index
Code	int sum = NUMBER_CONSTANT ; index
Distance : 2

86
Tree	int sum = NUMBER_CONSTANT ; invocations
Code	int sum = NUMBER_CONSTANT ; invocations
Distance : 2

87
Tree	int sum = NUMBER_CONSTANT ; protected
Code	int sum = NUMBER_CONSTANT ; protected
Distance : 2

88
Tree	int sum = NUMBER_CONSTANT ; chrono
Code	int sum = NUMBER_CONSTANT ; chrono
Distance : 2

89
Tree	int sum = NUMBER_CONSTANT ; traverseEs6
Code	int sum = NUMBER_CONSTANT ; traverseEs6
Distance : 2

90
Tree	int sum = NUMBER_CONSTANT ; instance
Code	int sum = NUMBER_CONSTANT ; instance
Distance : 2

91
Tree	int sum = NUMBER_CONSTANT ; optimizer
Code	int sum = NUMBER_CONSTANT ; optimizer
Distance : 2

92
Tree	int sum = NUMBER_CONSTANT ; assertTrue
Code	int sum = NUMBER_CONSTANT ; assertTrue
Distance : 2

93
Tree	int sum = NUMBER_CONSTANT ; simpleMethod
Code	int sum = NUMBER_CONSTANT ; simpleMethod
Distance : 2

94
Tree	int sum = NUMBER_CONSTANT ; [
Code	int sum = NUMBER_CONSTANT ; [
Distance : 2

95
Tree	int sum = NUMBER_CONSTANT ; i
Code	int sum = NUMBER_CONSTANT ; i
Distance : 2

96
Tree	int sum = NUMBER_CONSTANT ; checkState
Code	int sum = NUMBER_CONSTANT ; checkState
Distance : 2

97
Tree	int sum = NUMBER_CONSTANT ; int
Code	int sum = NUMBER_CONSTANT ; int
Distance : 2

98
Tree	int sum = NUMBER_CONSTANT ; b
Code	int sum = NUMBER_CONSTANT ; b
Distance : 2

99
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

100
Tree	int sum = NUMBER_CONSTANT ; LanguageMode.ECMASCRIPT_2015
Code	int sum = NUMBER_CONSTANT ; LanguageMode.ECMASCRIPT_2015
Distance : 2

101
Tree	int sum = NUMBER_CONSTANT ; return;
Code	int sum = NUMBER_CONSTANT ; return;
Distance : 2

102
Tree	int sum = NUMBER_CONSTANT ; char
Code	int sum = NUMBER_CONSTANT ; char
Distance : 2

103
Tree	int sum = NUMBER_CONSTANT ; mockingProgress
Code	int sum = NUMBER_CONSTANT ; mockingProgress
Distance : 2

104
Tree	int sum = NUMBER_CONSTANT ; size
Code	int sum = NUMBER_CONSTANT ; size
Distance : 2

105
Tree	int sum = NUMBER_CONSTANT ; clone
Code	int sum = NUMBER_CONSTANT ; clone
Distance : 2

106
Tree	int sum = NUMBER_CONSTANT ; Double
Code	int sum = NUMBER_CONSTANT ; Double
Distance : 2

107
Tree	int sum = NUMBER_CONSTANT ; s
Code	int sum = NUMBER_CONSTANT ; s
Distance : 2

108
Tree	int sum = NUMBER_CONSTANT ; PeriodType
Code	int sum = NUMBER_CONSTANT ; PeriodType
Distance : 2

109
Tree	int sum = NUMBER_CONSTANT ; obj
Code	int sum = NUMBER_CONSTANT ; obj
Distance : 2

110
Tree	int sum = NUMBER_CONSTANT ; contains
Code	int sum = NUMBER_CONSTANT ; contains
Distance : 2

111
Tree	int sum = NUMBER_CONSTANT ; <=
Code	int sum = NUMBER_CONSTANT ; <=
Distance : 2

112
Tree	int sum = NUMBER_CONSTANT ; String
Code	int sum = NUMBER_CONSTANT ; String
Distance : 2

113
Tree	int sum = NUMBER_CONSTANT ; assertThat
Code	int sum = NUMBER_CONSTANT ; assertThat
Distance : 2

114
Tree	int sum = NUMBER_CONSTANT ; str
Code	int sum = NUMBER_CONSTANT ; str
Distance : 2

115
Tree	int sum = NUMBER_CONSTANT ; testSame
Code	int sum = NUMBER_CONSTANT ; testSame
Distance : 2

116
Tree	int sum = NUMBER_CONSTANT ; parent
Code	int sum = NUMBER_CONSTANT ; parent
Distance : 2

117
Tree	int sum = NUMBER_CONSTANT ; StringBuilder
Code	int sum = NUMBER_CONSTANT ; StringBuilder
Distance : 2

118
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

119
Tree	int sum = NUMBER_CONSTANT ; Object
Code	int sum = NUMBER_CONSTANT ; Object
Distance : 2

120
Tree	int sum = NUMBER_CONSTANT ; JSType
Code	int sum = NUMBER_CONSTANT ; JSType
Distance : 2

121
Tree	int sum = NUMBER_CONSTANT ; getFirstChild
Code	int sum = NUMBER_CONSTANT ; getFirstChild
Distance : 2

122
Tree	int sum = NUMBER_CONSTANT ; static
Code	int sum = NUMBER_CONSTANT ; static
Distance : 2

123
Tree	int sum = NUMBER_CONSTANT ; isEmpty
Code	int sum = NUMBER_CONSTANT ; isEmpty
Distance : 2

124
Tree	int sum = NUMBER_CONSTANT ; source
Code	int sum = NUMBER_CONSTANT ; source
Distance : 2

125
Tree	int sum = NUMBER_CONSTANT ; Exception
Code	int sum = NUMBER_CONSTANT ; Exception
Distance : 2

126
Tree	int sum = NUMBER_CONSTANT ; join
Code	int sum = NUMBER_CONSTANT ; join
Distance : 2

127
Tree	int sum = NUMBER_CONSTANT ; paint
Code	int sum = NUMBER_CONSTANT ; paint
Distance : 2

128
Tree	int sum = NUMBER_CONSTANT ; boolean
Code	int sum = NUMBER_CONSTANT ; boolean
Distance : 2

129
Tree	int sum = NUMBER_CONSTANT ; getInstance
Code	int sum = NUMBER_CONSTANT ; getInstance
Distance : 2

130
Tree	int sum = NUMBER_CONSTANT ; type
Code	int sum = NUMBER_CONSTANT ; type
Distance : 2

131
Tree	int sum = NUMBER_CONSTANT ; serialised
Code	int sum = NUMBER_CONSTANT ; serialised
Distance : 2

132
Tree	int sum = NUMBER_CONSTANT ; fireChangeEvent
Code	int sum = NUMBER_CONSTANT ; fireChangeEvent
Distance : 2

133
Tree	int sum = NUMBER_CONSTANT ; array
Code	int sum = NUMBER_CONSTANT ; array
Distance : 2

134
Tree	int sum = NUMBER_CONSTANT ; f
Code	int sum = NUMBER_CONSTANT ; f
Distance : 2

135
Tree	int sum = NUMBER_CONSTANT ; class
Code	int sum = NUMBER_CONSTANT ; class
Distance : 2

136
Tree	int sum = NUMBER_CONSTANT ; ParamChecks
Code	int sum = NUMBER_CONSTANT ; ParamChecks
Distance : 2

137
Tree	int sum = NUMBER_CONSTANT ; createIllegalArgumentException
Code	int sum = NUMBER_CONSTANT ; createIllegalArgumentException
Distance : 2

138
Tree	int sum = NUMBER_CONSTANT ; MathRuntimeException
Code	int sum = NUMBER_CONSTANT ; MathRuntimeException
Distance : 2

139
Tree	int sum = NUMBER_CONSTANT ; ArrayList
Code	int sum = NUMBER_CONSTANT ; ArrayList
Distance : 2

140
Tree	int sum = NUMBER_CONSTANT ; LINE_JOINER
Code	int sum = NUMBER_CONSTANT ; LINE_JOINER
Distance : 2

141
Tree	int sum = NUMBER_CONSTANT ; a
Code	int sum = NUMBER_CONSTANT ; a
Distance : 2

142
Tree	int sum = NUMBER_CONSTANT ; MutableTimePeriod
Code	int sum = NUMBER_CONSTANT ; MutableTimePeriod
Distance : 2

143
Tree	int sum = NUMBER_CONSTANT ; get
Code	int sum = NUMBER_CONSTANT ; get
Distance : 2

144
Tree	int sum = NUMBER_CONSTANT ; sqrt
Code	int sum = NUMBER_CONSTANT ; sqrt
Distance : 2

145
Tree	int sum = NUMBER_CONSTANT ; {}
Code	int sum = NUMBER_CONSTANT ; {}
Distance : 2

146
Tree	int sum = NUMBER_CONSTANT ; UnivariateFunction
Code	int sum = NUMBER_CONSTANT ; UnivariateFunction
Distance : 2

147
Tree	int sum = NUMBER_CONSTANT ; List
Code	int sum = NUMBER_CONSTANT ; List
Distance : 2

148
Tree	int sum = NUMBER_CONSTANT ; returnZero
Code	int sum = NUMBER_CONSTANT ; returnZero
Distance : 2

149
Tree	int sum = NUMBER_CONSTANT ; :
Code	int sum = NUMBER_CONSTANT ; :
Distance : 2

150
Tree	int sum = NUMBER_CONSTANT ; try
Code	int sum = NUMBER_CONSTANT ; try
Distance : 2

151
Tree	int sum = NUMBER_CONSTANT ; m
Code	int sum = NUMBER_CONSTANT ; m
Distance : 2

152
Tree	int sum = NUMBER_CONSTANT ; v
Code	int sum = NUMBER_CONSTANT ; v
Distance : 2

153
Tree	int sum = NUMBER_CONSTANT ; verify
Code	int sum = NUMBER_CONSTANT ; verify
Distance : 2

154
Tree	int sum = NUMBER_CONSTANT ; c
Code	int sum = NUMBER_CONSTANT ; c
Distance : 2

155
Tree	int sum = NUMBER_CONSTANT ; lines
Code	int sum = NUMBER_CONSTANT ; lines
Distance : 2

156
Tree	int sum = NUMBER_CONSTANT ; Integer
Code	int sum = NUMBER_CONSTANT ; Integer
Distance : 2

157
Tree	int sum = NUMBER_CONSTANT ; Node
Code	int sum = NUMBER_CONSTANT ; Node
Distance : 2

158
Tree	int sum = NUMBER_CONSTANT ; length
Code	int sum = NUMBER_CONSTANT ; length
Distance : 2

159
Tree	int sum = NUMBER_CONSTANT ; isNormalBlock
Code	int sum = NUMBER_CONSTANT ; isNormalBlock
Distance : 2

160
Tree	int sum = NUMBER_CONSTANT ; throws
Code	int sum = NUMBER_CONSTANT ; throws
Distance : 2

161
Tree	int sum = NUMBER_CONSTANT ; expected
Code	int sum = NUMBER_CONSTANT ; expected
Distance : 2

162
Tree	int sum = NUMBER_CONSTANT ; invocation
Code	int sum = NUMBER_CONSTANT ; invocation
Distance : 2

163
Tree	int sum = NUMBER_CONSTANT ; FastMath
Code	int sum = NUMBER_CONSTANT ; FastMath
Distance : 2

164
Tree	int sum = NUMBER_CONSTANT ; t
Code	int sum = NUMBER_CONSTANT ; t
Distance : 2

165
Tree	int sum = NUMBER_CONSTANT ; name
Code	int sum = NUMBER_CONSTANT ; name
Distance : 2

166
Tree	int sum = NUMBER_CONSTANT ; <>
Code	int sum = NUMBER_CONSTANT ; <>
Distance : 2

167
Tree	int sum = NUMBER_CONSTANT ; Args
Code	int sum = NUMBER_CONSTANT ; Args
Distance : 2

168
Tree	int sum = NUMBER_CONSTANT ; result
Code	int sum = NUMBER_CONSTANT ; result
Distance : 2

169
Tree	int sum = NUMBER_CONSTANT ; IllegalArgumentException
Code	int sum = NUMBER_CONSTANT ; IllegalArgumentException
Distance : 2

170
Tree	int sum = NUMBER_CONSTANT ; scope
Code	int sum = NUMBER_CONSTANT ; scope
Distance : 2

171
Tree	int sum = NUMBER_CONSTANT ; append
Code	int sum = NUMBER_CONSTANT ; append
Distance : 2

172
Tree	int sum = NUMBER_CONSTANT ; ?
Code	int sum = NUMBER_CONSTANT ; ?
Distance : 2

173
Tree	int sum = NUMBER_CONSTANT ; !
Code	int sum = NUMBER_CONSTANT ; !
Distance : 2

174
Tree	int sum = NUMBER_CONSTANT ; nullNotPermitted
Code	int sum = NUMBER_CONSTANT ; nullNotPermitted
Distance : 2

175
Tree	int sum = NUMBER_CONSTANT ; fail
Code	int sum = NUMBER_CONSTANT ; fail
Distance : 2

176
Tree	int sum = NUMBER_CONSTANT ; []
Code	int sum = NUMBER_CONSTANT ; []
Distance : 2

177
Tree	int sum = NUMBER_CONSTANT ; @
Code	int sum = NUMBER_CONSTANT ; @
Distance : 2

178
Tree	int sum = NUMBER_CONSTANT ; assertEquals
Code	int sum = NUMBER_CONSTANT ; assertEquals
Distance : 2

179
Tree	int sum = NUMBER_CONSTANT ; test
Code	int sum = NUMBER_CONSTANT ; test
Distance : 2

180
Tree	int sum = NUMBER_CONSTANT ; ==
Code	int sum = NUMBER_CONSTANT ; ==
Distance : 2

181
Tree	int sum = NUMBER_CONSTANT ; equals
Code	int sum = NUMBER_CONSTANT ; equals
Distance : 2

182
Tree	int sum = NUMBER_CONSTANT ; Invocation
Code	int sum = NUMBER_CONSTANT ; Invocation
Distance : 2

183
Tree	int sum = NUMBER_CONSTANT ; externs
Code	int sum = NUMBER_CONSTANT ; externs
Distance : 2

184
Tree	int sum = NUMBER_CONSTANT ; for
Code	int sum = NUMBER_CONSTANT ; for
Distance : 2

185
Tree	int sum = NUMBER_CONSTANT ; TestUtilities
Code	int sum = NUMBER_CONSTANT ; TestUtilities
Distance : 2

186
Tree	int sum = NUMBER_CONSTANT ; d
Code	int sum = NUMBER_CONSTANT ; d
Distance : 2

187
Tree	int sum = NUMBER_CONSTANT ; sb
Code	int sum = NUMBER_CONSTANT ; sb
Distance : 2

188
Tree	int sum = NUMBER_CONSTANT ; Override
Code	int sum = NUMBER_CONSTANT ; Override
Distance : 2

189
Tree	int sum = NUMBER_CONSTANT ; field
Code	int sum = NUMBER_CONSTANT ; field
Distance : 2

190
Tree	int sum = NUMBER_CONSTANT ; false
Code	int sum = NUMBER_CONSTANT ; false
Distance : 2

191
Tree	int sum = NUMBER_CONSTANT ; x
Code	int sum = NUMBER_CONSTANT ; x
Distance : 2

192
Tree	int sum = NUMBER_CONSTANT ; notifyListeners
Code	int sum = NUMBER_CONSTANT ; notifyListeners
Distance : 2

193
Tree	int sum = NUMBER_CONSTANT ; Test
Code	int sum = NUMBER_CONSTANT ; Test
Distance : 2

194
Tree	int sum = NUMBER_CONSTANT ; p
Code	int sum = NUMBER_CONSTANT ; p
Distance : 2

195
Tree	int sum = NUMBER_CONSTANT ; Class
Code	int sum = NUMBER_CONSTANT ; Class
Distance : 2

196
Tree	int sum = NUMBER_CONSTANT ; options
Code	int sum = NUMBER_CONSTANT ; options
Distance : 2

197
Tree	int sum = NUMBER_CONSTANT ; Math
Code	int sum = NUMBER_CONSTANT ; Math
Distance : 2

198
Tree	int sum = NUMBER_CONSTANT ; toString
Code	int sum = NUMBER_CONSTANT ; toString
Distance : 2

199
Tree	int sum = NUMBER_CONSTANT ; stroke
Code	int sum = NUMBER_CONSTANT ; stroke
Distance : 2

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = res.entries . iterator () ; invocations
Code	Iterator iter = res.entries . iterator () ; invocations
Distance : 2

1
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

2
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

3
Tree	Iterator iter = res.entries . iterator () ; mock
Code	Iterator iter = res.entries . iterator () ; mock
Distance : 2

4
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

5
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

6
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

7
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

8
Tree	Iterator iter = res.entries . iterator () ; T
Code	Iterator iter = res.entries . iterator () ; T
Distance : 2

9
Tree	Iterator iter = res.entries . iterator () ; &&
Code	Iterator iter = res.entries . iterator () ; &&
Distance : 2

10
Tree	Iterator iter = res.entries . iterator () ; ]
Code	Iterator iter = res.entries . iterator () ; ]
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; [
Code	Iterator iter = res.entries . iterator () ; [
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; Object
Code	Iterator iter = res.entries . iterator () ; Object
Distance : 2

13
Tree	Iterator iter = res.entries . iterator () ; class
Code	Iterator iter = res.entries . iterator () ; class
Distance : 2

14
Tree	Iterator iter = res.entries . iterator () ; test
Code	Iterator iter = res.entries . iterator () ; test
Distance : 2

15
Tree	Iterator iter = res.entries . iterator () ; @
Code	Iterator iter = res.entries . iterator () ; @
Distance : 2

16
Tree	Iterator iter = res.entries . iterator () ; !
Code	Iterator iter = res.entries . iterator () ; !
Distance : 2

17
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

18
Tree	Iterator iter = res.entries . iterator () ; ==
Code	Iterator iter = res.entries . iterator () ; ==
Distance : 2

19
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; []
Code	Iterator iter = res.entries . iterator () ; []
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; checkState
Code	Iterator iter = res.entries . iterator () ; checkState
Distance : 2

22
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

23
Tree	Iterator iter = res.entries . iterator () ; out
Code	Iterator iter = res.entries . iterator () ; out
Distance : 2

24
Tree	Iterator iter = res.entries . iterator () ; nullNotPermitted
Code	Iterator iter = res.entries . iterator () ; nullNotPermitted
Distance : 2

25
Tree	Iterator iter = res.entries . iterator () ; n
Code	Iterator iter = res.entries . iterator () ; n
Distance : 2

26
Tree	Iterator iter = res.entries . iterator () ; !=
Code	Iterator iter = res.entries . iterator () ; !=
Distance : 2

27
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

28
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

29
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

30
Tree	Iterator iter = res.entries . iterator () ; public
Code	Iterator iter = res.entries . iterator () ; public
Distance : 2

31
Tree	Iterator iter = res.entries . iterator () ; >
Code	Iterator iter = res.entries . iterator () ; >
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; new
Code	Iterator iter = res.entries . iterator () ; new
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Code	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; ,
Code	Iterator iter = res.entries . iterator () ; ,
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; .
Code	Iterator iter = res.entries . iterator () ; .
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; }
Code	Iterator iter = res.entries . iterator () ; }
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; =
Code	Iterator iter = res.entries . iterator () ; =
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; (
Code	Iterator iter = res.entries . iterator () ; (
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; <s>
Code	Iterator iter = res.entries . iterator () ; <s>
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; <blank>
Code	Iterator iter = res.entries . iterator () ; <blank>
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; )
Code	Iterator iter = res.entries . iterator () ; )
Distance : 2

43
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

44
Tree	Iterator iter = res.entries . iterator () ; ()
Code	Iterator iter = res.entries . iterator () ; ()
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; {
Code	Iterator iter = res.entries . iterator () ; {
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; false
Code	Iterator iter = res.entries . iterator () ; false
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; int
Code	Iterator iter = res.entries . iterator () ; int
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; double
Code	Iterator iter = res.entries . iterator () ; double
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; e
Code	Iterator iter = res.entries . iterator () ; e
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; else
Code	Iterator iter = res.entries . iterator () ; else
Distance : 2

51
Tree	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Code	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Distance : 2

52
Tree	Iterator iter = res.entries . iterator () ; this
Code	Iterator iter = res.entries . iterator () ; this
Distance : 2

53
Tree	Iterator iter = res.entries . iterator () ; final
Code	Iterator iter = res.entries . iterator () ; final
Distance : 2

54
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

55
Tree	Iterator iter = res.entries . iterator () ; t
Code	Iterator iter = res.entries . iterator () ; t
Distance : 2

56
Tree	Iterator iter = res.entries . iterator () ; Collection
Code	Iterator iter = res.entries . iterator () ; Collection
Distance : 2

57
Tree	Iterator iter = res.entries . iterator () ; getField
Code	Iterator iter = res.entries . iterator () ; getField
Distance : 2

58
Tree	Iterator iter = res.entries . iterator () ; dataset
Code	Iterator iter = res.entries . iterator () ; dataset
Distance : 2

59
Tree	Iterator iter = res.entries . iterator () ; protected
Code	Iterator iter = res.entries . iterator () ; protected
Distance : 2

60
Tree	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Code	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Distance : 2

61
Tree	Iterator iter = res.entries . iterator () ; mode
Code	Iterator iter = res.entries . iterator () ; mode
Distance : 2

62
Tree	Iterator iter = res.entries . iterator () ; mockingProgress
Code	Iterator iter = res.entries . iterator () ; mockingProgress
Distance : 2

63
Tree	Iterator iter = res.entries . iterator () ; return;
Code	Iterator iter = res.entries . iterator () ; return;
Distance : 2

64
Tree	Iterator iter = res.entries . iterator () ; isEmpty
Code	Iterator iter = res.entries . iterator () ; isEmpty
Distance : 2

65
Tree	Iterator iter = res.entries . iterator () ; char
Code	Iterator iter = res.entries . iterator () ; char
Distance : 2

66
Tree	Iterator iter = res.entries . iterator () ; static
Code	Iterator iter = res.entries . iterator () ; static
Distance : 2

67
Tree	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Code	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Distance : 2

68
Tree	Iterator iter = res.entries . iterator () ; JSType
Code	Iterator iter = res.entries . iterator () ; JSType
Distance : 2

69
Tree	Iterator iter = res.entries . iterator () ; get
Code	Iterator iter = res.entries . iterator () ; get
Distance : 2

70
Tree	Iterator iter = res.entries . iterator () ; getMessage
Code	Iterator iter = res.entries . iterator () ; getMessage
Distance : 2

71
Tree	Iterator iter = res.entries . iterator () ; true
Code	Iterator iter = res.entries . iterator () ; true
Distance : 2

72
Tree	Iterator iter = res.entries . iterator () ; return
Code	Iterator iter = res.entries . iterator () ; return
Distance : 2

73
Tree	Iterator iter = res.entries . iterator () ; if
Code	Iterator iter = res.entries . iterator () ; if
Distance : 2

74
Tree	Iterator iter = res.entries . iterator () ; stream
Code	Iterator iter = res.entries . iterator () ; stream
Distance : 2

75
Tree	Iterator iter = res.entries . iterator () ; <
Code	Iterator iter = res.entries . iterator () ; <
Distance : 2

76
Tree	Iterator iter = res.entries . iterator () ; solver
Code	Iterator iter = res.entries . iterator () ; solver
Distance : 2

77
Tree	Iterator iter = res.entries . iterator () ; pattern
Code	Iterator iter = res.entries . iterator () ; pattern
Distance : 2

78
Tree	Iterator iter = res.entries . iterator () ; js
Code	Iterator iter = res.entries . iterator () ; js
Distance : 2

79
Tree	Iterator iter = res.entries . iterator () ; TestUtilities
Code	Iterator iter = res.entries . iterator () ; TestUtilities
Distance : 2

80
Tree	Iterator iter = res.entries . iterator () ; equals
Code	Iterator iter = res.entries . iterator () ; equals
Distance : 2

81
Tree	Iterator iter = res.entries . iterator () ; d
Code	Iterator iter = res.entries . iterator () ; d
Distance : 2

82
Tree	Iterator iter = res.entries . iterator () ; externs
Code	Iterator iter = res.entries . iterator () ; externs
Distance : 2

83
Tree	Iterator iter = res.entries . iterator () ; assertTrue
Code	Iterator iter = res.entries . iterator () ; assertTrue
Distance : 2

84
Tree	Iterator iter = res.entries . iterator () ; for
Code	Iterator iter = res.entries . iterator () ; for
Distance : 2

85
Tree	Iterator iter = res.entries . iterator () ; Invocation
Code	Iterator iter = res.entries . iterator () ; Invocation
Distance : 2

86
Tree	Iterator iter = res.entries . iterator () ; getParent
Code	Iterator iter = res.entries . iterator () ; getParent
Distance : 2

87
Tree	Iterator iter = res.entries . iterator () ; setUp
Code	Iterator iter = res.entries . iterator () ; setUp
Distance : 2

88
Tree	Iterator iter = res.entries . iterator () ; StrBuilder
Code	Iterator iter = res.entries . iterator () ; StrBuilder
Distance : 2

89
Tree	Iterator iter = res.entries . iterator () ; reportMatcher
Code	Iterator iter = res.entries . iterator () ; reportMatcher
Distance : 2

90
Tree	Iterator iter = res.entries . iterator () ; index
Code	Iterator iter = res.entries . iterator () ; index
Distance : 2

91
Tree	Iterator iter = res.entries . iterator () ; node
Code	Iterator iter = res.entries . iterator () ; node
Distance : 2

92
Tree	Iterator iter = res.entries . iterator () ; matcher
Code	Iterator iter = res.entries . iterator () ; matcher
Distance : 2

93
Tree	Iterator iter = res.entries . iterator () ; abs
Code	Iterator iter = res.entries . iterator () ; abs
Distance : 2

94
Tree	Iterator iter = res.entries . iterator () ; Double
Code	Iterator iter = res.entries . iterator () ; Double
Distance : 2

95
Tree	Iterator iter = res.entries . iterator () ; PeriodType
Code	Iterator iter = res.entries . iterator () ; PeriodType
Distance : 2

96
Tree	Iterator iter = res.entries . iterator () ; instant
Code	Iterator iter = res.entries . iterator () ; instant
Distance : 2

97
Tree	Iterator iter = res.entries . iterator () ; values
Code	Iterator iter = res.entries . iterator () ; values
Distance : 2

98
Tree	Iterator iter = res.entries . iterator () ; isNormalBlock
Code	Iterator iter = res.entries . iterator () ; isNormalBlock
Distance : 2

99
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

100
Tree	Iterator iter = res.entries . iterator () ; contains
Code	Iterator iter = res.entries . iterator () ; contains
Distance : 2

101
Tree	Iterator iter = res.entries . iterator () ; <=
Code	Iterator iter = res.entries . iterator () ; <=
Distance : 2

102
Tree	Iterator iter = res.entries . iterator () ; a
Code	Iterator iter = res.entries . iterator () ; a
Distance : 2

103
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Distance : 2

104
Tree	Iterator iter = res.entries . iterator () ; size
Code	Iterator iter = res.entries . iterator () ; size
Distance : 2

105
Tree	Iterator iter = res.entries . iterator () ; StringBuilder
Code	Iterator iter = res.entries . iterator () ; StringBuilder
Distance : 2

106
Tree	Iterator iter = res.entries . iterator () ; b
Code	Iterator iter = res.entries . iterator () ; b
Distance : 2

107
Tree	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Code	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Distance : 2

108
Tree	Iterator iter = res.entries . iterator () ; stroke
Code	Iterator iter = res.entries . iterator () ; stroke
Distance : 2

109
Tree	Iterator iter = res.entries . iterator () ; traverseEs6
Code	Iterator iter = res.entries . iterator () ; traverseEs6
Distance : 2

110
Tree	Iterator iter = res.entries . iterator () ; UnivariateFunction
Code	Iterator iter = res.entries . iterator () ; UnivariateFunction
Distance : 2

111
Tree	Iterator iter = res.entries . iterator () ; sb
Code	Iterator iter = res.entries . iterator () ; sb
Distance : 2

112
Tree	Iterator iter = res.entries . iterator () ; throws
Code	Iterator iter = res.entries . iterator () ; throws
Distance : 2

113
Tree	Iterator iter = res.entries . iterator () ; scope
Code	Iterator iter = res.entries . iterator () ; scope
Distance : 2

114
Tree	Iterator iter = res.entries . iterator () ; sqrt
Code	Iterator iter = res.entries . iterator () ; sqrt
Distance : 2

115
Tree	Iterator iter = res.entries . iterator () ; clone
Code	Iterator iter = res.entries . iterator () ; clone
Distance : 2

116
Tree	Iterator iter = res.entries . iterator () ; returnZero
Code	Iterator iter = res.entries . iterator () ; returnZero
Distance : 2

117
Tree	Iterator iter = res.entries . iterator () ; getFirstChild
Code	Iterator iter = res.entries . iterator () ; getFirstChild
Distance : 2

118
Tree	Iterator iter = res.entries . iterator () ; simpleMethod
Code	Iterator iter = res.entries . iterator () ; simpleMethod
Distance : 2

119
Tree	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Code	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Distance : 2

120
Tree	Iterator iter = res.entries . iterator () ; append
Code	Iterator iter = res.entries . iterator () ; append
Distance : 2

121
Tree	Iterator iter = res.entries . iterator () ; optimizer
Code	Iterator iter = res.entries . iterator () ; optimizer
Distance : 2

122
Tree	Iterator iter = res.entries . iterator () ; obj
Code	Iterator iter = res.entries . iterator () ; obj
Distance : 2

123
Tree	Iterator iter = res.entries . iterator () ; chrono
Code	Iterator iter = res.entries . iterator () ; chrono
Distance : 2

124
Tree	Iterator iter = res.entries . iterator () ; isBlock
Code	Iterator iter = res.entries . iterator () ; isBlock
Distance : 2

125
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

126
Tree	Iterator iter = res.entries . iterator () ; Integer
Code	Iterator iter = res.entries . iterator () ; Integer
Distance : 2

127
Tree	Iterator iter = res.entries . iterator () ; v
Code	Iterator iter = res.entries . iterator () ; v
Distance : 2

128
Tree	Iterator iter = res.entries . iterator () ; reportCodeChange
Code	Iterator iter = res.entries . iterator () ; reportCodeChange
Distance : 2

129
Tree	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Distance : 2

130
Tree	Iterator iter = res.entries . iterator () ; invocation
Code	Iterator iter = res.entries . iterator () ; invocation
Distance : 2

131
Tree	Iterator iter = res.entries . iterator () ; assertThat
Code	Iterator iter = res.entries . iterator () ; assertThat
Distance : 2

132
Tree	Iterator iter = res.entries . iterator () ; FastMath
Code	Iterator iter = res.entries . iterator () ; FastMath
Distance : 2

133
Tree	Iterator iter = res.entries . iterator () ; expected
Code	Iterator iter = res.entries . iterator () ; expected
Distance : 2

134
Tree	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Distance : 2

135
Tree	Iterator iter = res.entries . iterator () ; parent
Code	Iterator iter = res.entries . iterator () ; parent
Distance : 2

136
Tree	Iterator iter = res.entries . iterator () ; fireChangeEvent
Code	Iterator iter = res.entries . iterator () ; fireChangeEvent
Distance : 2

137
Tree	Iterator iter = res.entries . iterator () ; ArrayList
Code	Iterator iter = res.entries . iterator () ; ArrayList
Distance : 2

138
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

139
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

140
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

141
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

142
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

143
Tree	Iterator iter = res.entries . iterator () ; result
Code	Iterator iter = res.entries . iterator () ; result
Distance : 2

144
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

145
Tree	Iterator iter = res.entries . iterator () ; :
Code	Iterator iter = res.entries . iterator () ; :
Distance : 2

146
Tree	Iterator iter = res.entries . iterator () ; valueOf
Code	Iterator iter = res.entries . iterator () ; valueOf
Distance : 2

147
Tree	Iterator iter = res.entries . iterator () ; y
Code	Iterator iter = res.entries . iterator () ; y
Distance : 2

148
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

149
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

150
Tree	Iterator iter = res.entries . iterator () ; ?
Code	Iterator iter = res.entries . iterator () ; ?
Distance : 2

151
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

152
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

153
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

154
Tree	Iterator iter = res.entries . iterator () ; type
Code	Iterator iter = res.entries . iterator () ; type
Distance : 2

155
Tree	Iterator iter = res.entries . iterator () ; *
Code	Iterator iter = res.entries . iterator () ; *
Distance : 2

156
Tree	Iterator iter = res.entries . iterator () ; getInstance
Code	Iterator iter = res.entries . iterator () ; getInstance
Distance : 2

157
Tree	Iterator iter = res.entries . iterator () ; serialised
Code	Iterator iter = res.entries . iterator () ; serialised
Distance : 2

158
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

159
Tree	Iterator iter = res.entries . iterator () ; checkNotNull
Code	Iterator iter = res.entries . iterator () ; checkNotNull
Distance : 2

160
Tree	Iterator iter = res.entries . iterator () ; source
Code	Iterator iter = res.entries . iterator () ; source
Distance : 2

161
Tree	Iterator iter = res.entries . iterator () ; toString
Code	Iterator iter = res.entries . iterator () ; toString
Distance : 2

162
Tree	Iterator iter = res.entries . iterator () ; Math
Code	Iterator iter = res.entries . iterator () ; Math
Distance : 2

163
Tree	Iterator iter = res.entries . iterator () ; root
Code	Iterator iter = res.entries . iterator () ; root
Distance : 2

164
Tree	Iterator iter = res.entries . iterator () ; options
Code	Iterator iter = res.entries . iterator () ; options
Distance : 2

165
Tree	Iterator iter = res.entries . iterator () ; p
Code	Iterator iter = res.entries . iterator () ; p
Distance : 2

166
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

167
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

168
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

169
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

170
Tree	Iterator iter = res.entries . iterator () ; ex
Code	Iterator iter = res.entries . iterator () ; ex
Distance : 2

171
Tree	Iterator iter = res.entries . iterator () ; NodeUtil
Code	Iterator iter = res.entries . iterator () ; NodeUtil
Distance : 2

172
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

173
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

174
Tree	Iterator iter = res.entries . iterator () ; NodeTraversal
Code	Iterator iter = res.entries . iterator () ; NodeTraversal
Distance : 2

175
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

176
Tree	Iterator iter = res.entries . iterator () ; Exception
Code	Iterator iter = res.entries . iterator () ; Exception
Distance : 2

177
Tree	Iterator iter = res.entries . iterator () ; Node
Code	Iterator iter = res.entries . iterator () ; Node
Distance : 2

178
Tree	Iterator iter = res.entries . iterator () ; c
Code	Iterator iter = res.entries . iterator () ; c
Distance : 2

179
Tree	Iterator iter = res.entries . iterator () ; notifyListeners
Code	Iterator iter = res.entries . iterator () ; notifyListeners
Distance : 2

180
Tree	Iterator iter = res.entries . iterator () ; lines
Code	Iterator iter = res.entries . iterator () ; lines
Distance : 2

181
Tree	Iterator iter = res.entries . iterator () ; verify
Code	Iterator iter = res.entries . iterator () ; verify
Distance : 2

182
Tree	Iterator iter = res.entries . iterator () ; compiler
Code	Iterator iter = res.entries . iterator () ; compiler
Distance : 2

183
Tree	Iterator iter = res.entries . iterator () ; String
Code	Iterator iter = res.entries . iterator () ; String
Distance : 2

184
Tree	Iterator iter = res.entries . iterator () ; null
Code	Iterator iter = res.entries . iterator () ; null
Distance : 2

185
Tree	Iterator iter = res.entries . iterator () ; wanted
Code	Iterator iter = res.entries . iterator () ; wanted
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; throw
Code	Iterator iter = res.entries . iterator () ; throw
Distance : 2

188
Tree	Iterator iter = res.entries . iterator () ; super
Code	Iterator iter = res.entries . iterator () ; super
Distance : 2

189
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

190
Tree	Iterator iter = res.entries . iterator () ; long
Code	Iterator iter = res.entries . iterator () ; long
Distance : 2

191
Tree	Iterator iter = res.entries . iterator () ; /
Code	Iterator iter = res.entries . iterator () ; /
Distance : 2

192
Tree	Iterator iter = res.entries . iterator () ; length
Code	Iterator iter = res.entries . iterator () ; length
Distance : 2

193
Tree	Iterator iter = res.entries . iterator () ; TestUtils
Code	Iterator iter = res.entries . iterator () ; TestUtils
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; alpha
Code	Iterator iter = res.entries . iterator () ; alpha
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; instance
Code	Iterator iter = res.entries . iterator () ; instance
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; catch
Code	Iterator iter = res.entries . iterator () ; catch
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Distance : 2

199
Tree	Iterator iter = res.entries . iterator () ; s
Code	Iterator iter = res.entries . iterator () ; s
Distance : 2

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = res.entries . iterator () ; invocations
Code	Iterator iter = res.entries . iterator () ; invocations
Distance : 2

1
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

2
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

3
Tree	Iterator iter = res.entries . iterator () ; mock
Code	Iterator iter = res.entries . iterator () ; mock
Distance : 2

4
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

5
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

6
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

7
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

8
Tree	Iterator iter = res.entries . iterator () ; T
Code	Iterator iter = res.entries . iterator () ; T
Distance : 2

9
Tree	Iterator iter = res.entries . iterator () ; &&
Code	Iterator iter = res.entries . iterator () ; &&
Distance : 2

10
Tree	Iterator iter = res.entries . iterator () ; ]
Code	Iterator iter = res.entries . iterator () ; ]
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; [
Code	Iterator iter = res.entries . iterator () ; [
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; Object
Code	Iterator iter = res.entries . iterator () ; Object
Distance : 2

13
Tree	Iterator iter = res.entries . iterator () ; class
Code	Iterator iter = res.entries . iterator () ; class
Distance : 2

14
Tree	Iterator iter = res.entries . iterator () ; test
Code	Iterator iter = res.entries . iterator () ; test
Distance : 2

15
Tree	Iterator iter = res.entries . iterator () ; @
Code	Iterator iter = res.entries . iterator () ; @
Distance : 2

16
Tree	Iterator iter = res.entries . iterator () ; !
Code	Iterator iter = res.entries . iterator () ; !
Distance : 2

17
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

18
Tree	Iterator iter = res.entries . iterator () ; ==
Code	Iterator iter = res.entries . iterator () ; ==
Distance : 2

19
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; []
Code	Iterator iter = res.entries . iterator () ; []
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; checkState
Code	Iterator iter = res.entries . iterator () ; checkState
Distance : 2

22
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

23
Tree	Iterator iter = res.entries . iterator () ; out
Code	Iterator iter = res.entries . iterator () ; out
Distance : 2

24
Tree	Iterator iter = res.entries . iterator () ; nullNotPermitted
Code	Iterator iter = res.entries . iterator () ; nullNotPermitted
Distance : 2

25
Tree	Iterator iter = res.entries . iterator () ; n
Code	Iterator iter = res.entries . iterator () ; n
Distance : 2

26
Tree	Iterator iter = res.entries . iterator () ; !=
Code	Iterator iter = res.entries . iterator () ; !=
Distance : 2

27
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

28
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

29
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

30
Tree	Iterator iter = res.entries . iterator () ; public
Code	Iterator iter = res.entries . iterator () ; public
Distance : 2

31
Tree	Iterator iter = res.entries . iterator () ; >
Code	Iterator iter = res.entries . iterator () ; >
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; new
Code	Iterator iter = res.entries . iterator () ; new
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Code	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; ,
Code	Iterator iter = res.entries . iterator () ; ,
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; .
Code	Iterator iter = res.entries . iterator () ; .
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; }
Code	Iterator iter = res.entries . iterator () ; }
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; =
Code	Iterator iter = res.entries . iterator () ; =
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; (
Code	Iterator iter = res.entries . iterator () ; (
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; <s>
Code	Iterator iter = res.entries . iterator () ; <s>
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; <blank>
Code	Iterator iter = res.entries . iterator () ; <blank>
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; )
Code	Iterator iter = res.entries . iterator () ; )
Distance : 2

43
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

44
Tree	Iterator iter = res.entries . iterator () ; ()
Code	Iterator iter = res.entries . iterator () ; ()
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; {
Code	Iterator iter = res.entries . iterator () ; {
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; false
Code	Iterator iter = res.entries . iterator () ; false
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; int
Code	Iterator iter = res.entries . iterator () ; int
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; double
Code	Iterator iter = res.entries . iterator () ; double
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; e
Code	Iterator iter = res.entries . iterator () ; e
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; else
Code	Iterator iter = res.entries . iterator () ; else
Distance : 2

51
Tree	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Code	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Distance : 2

52
Tree	Iterator iter = res.entries . iterator () ; this
Code	Iterator iter = res.entries . iterator () ; this
Distance : 2

53
Tree	Iterator iter = res.entries . iterator () ; final
Code	Iterator iter = res.entries . iterator () ; final
Distance : 2

54
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

55
Tree	Iterator iter = res.entries . iterator () ; t
Code	Iterator iter = res.entries . iterator () ; t
Distance : 2

56
Tree	Iterator iter = res.entries . iterator () ; Collection
Code	Iterator iter = res.entries . iterator () ; Collection
Distance : 2

57
Tree	Iterator iter = res.entries . iterator () ; getField
Code	Iterator iter = res.entries . iterator () ; getField
Distance : 2

58
Tree	Iterator iter = res.entries . iterator () ; dataset
Code	Iterator iter = res.entries . iterator () ; dataset
Distance : 2

59
Tree	Iterator iter = res.entries . iterator () ; protected
Code	Iterator iter = res.entries . iterator () ; protected
Distance : 2

60
Tree	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Code	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Distance : 2

61
Tree	Iterator iter = res.entries . iterator () ; mode
Code	Iterator iter = res.entries . iterator () ; mode
Distance : 2

62
Tree	Iterator iter = res.entries . iterator () ; mockingProgress
Code	Iterator iter = res.entries . iterator () ; mockingProgress
Distance : 2

63
Tree	Iterator iter = res.entries . iterator () ; return;
Code	Iterator iter = res.entries . iterator () ; return;
Distance : 2

64
Tree	Iterator iter = res.entries . iterator () ; isEmpty
Code	Iterator iter = res.entries . iterator () ; isEmpty
Distance : 2

65
Tree	Iterator iter = res.entries . iterator () ; char
Code	Iterator iter = res.entries . iterator () ; char
Distance : 2

66
Tree	Iterator iter = res.entries . iterator () ; static
Code	Iterator iter = res.entries . iterator () ; static
Distance : 2

67
Tree	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Code	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Distance : 2

68
Tree	Iterator iter = res.entries . iterator () ; JSType
Code	Iterator iter = res.entries . iterator () ; JSType
Distance : 2

69
Tree	Iterator iter = res.entries . iterator () ; get
Code	Iterator iter = res.entries . iterator () ; get
Distance : 2

70
Tree	Iterator iter = res.entries . iterator () ; getMessage
Code	Iterator iter = res.entries . iterator () ; getMessage
Distance : 2

71
Tree	Iterator iter = res.entries . iterator () ; true
Code	Iterator iter = res.entries . iterator () ; true
Distance : 2

72
Tree	Iterator iter = res.entries . iterator () ; return
Code	Iterator iter = res.entries . iterator () ; return
Distance : 2

73
Tree	Iterator iter = res.entries . iterator () ; if
Code	Iterator iter = res.entries . iterator () ; if
Distance : 2

74
Tree	Iterator iter = res.entries . iterator () ; stream
Code	Iterator iter = res.entries . iterator () ; stream
Distance : 2

75
Tree	Iterator iter = res.entries . iterator () ; <
Code	Iterator iter = res.entries . iterator () ; <
Distance : 2

76
Tree	Iterator iter = res.entries . iterator () ; solver
Code	Iterator iter = res.entries . iterator () ; solver
Distance : 2

77
Tree	Iterator iter = res.entries . iterator () ; pattern
Code	Iterator iter = res.entries . iterator () ; pattern
Distance : 2

78
Tree	Iterator iter = res.entries . iterator () ; js
Code	Iterator iter = res.entries . iterator () ; js
Distance : 2

79
Tree	Iterator iter = res.entries . iterator () ; TestUtilities
Code	Iterator iter = res.entries . iterator () ; TestUtilities
Distance : 2

80
Tree	Iterator iter = res.entries . iterator () ; equals
Code	Iterator iter = res.entries . iterator () ; equals
Distance : 2

81
Tree	Iterator iter = res.entries . iterator () ; d
Code	Iterator iter = res.entries . iterator () ; d
Distance : 2

82
Tree	Iterator iter = res.entries . iterator () ; externs
Code	Iterator iter = res.entries . iterator () ; externs
Distance : 2

83
Tree	Iterator iter = res.entries . iterator () ; assertTrue
Code	Iterator iter = res.entries . iterator () ; assertTrue
Distance : 2

84
Tree	Iterator iter = res.entries . iterator () ; for
Code	Iterator iter = res.entries . iterator () ; for
Distance : 2

85
Tree	Iterator iter = res.entries . iterator () ; Invocation
Code	Iterator iter = res.entries . iterator () ; Invocation
Distance : 2

86
Tree	Iterator iter = res.entries . iterator () ; getParent
Code	Iterator iter = res.entries . iterator () ; getParent
Distance : 2

87
Tree	Iterator iter = res.entries . iterator () ; setUp
Code	Iterator iter = res.entries . iterator () ; setUp
Distance : 2

88
Tree	Iterator iter = res.entries . iterator () ; StrBuilder
Code	Iterator iter = res.entries . iterator () ; StrBuilder
Distance : 2

89
Tree	Iterator iter = res.entries . iterator () ; reportMatcher
Code	Iterator iter = res.entries . iterator () ; reportMatcher
Distance : 2

90
Tree	Iterator iter = res.entries . iterator () ; index
Code	Iterator iter = res.entries . iterator () ; index
Distance : 2

91
Tree	Iterator iter = res.entries . iterator () ; node
Code	Iterator iter = res.entries . iterator () ; node
Distance : 2

92
Tree	Iterator iter = res.entries . iterator () ; matcher
Code	Iterator iter = res.entries . iterator () ; matcher
Distance : 2

93
Tree	Iterator iter = res.entries . iterator () ; abs
Code	Iterator iter = res.entries . iterator () ; abs
Distance : 2

94
Tree	Iterator iter = res.entries . iterator () ; Double
Code	Iterator iter = res.entries . iterator () ; Double
Distance : 2

95
Tree	Iterator iter = res.entries . iterator () ; PeriodType
Code	Iterator iter = res.entries . iterator () ; PeriodType
Distance : 2

96
Tree	Iterator iter = res.entries . iterator () ; instant
Code	Iterator iter = res.entries . iterator () ; instant
Distance : 2

97
Tree	Iterator iter = res.entries . iterator () ; values
Code	Iterator iter = res.entries . iterator () ; values
Distance : 2

98
Tree	Iterator iter = res.entries . iterator () ; isNormalBlock
Code	Iterator iter = res.entries . iterator () ; isNormalBlock
Distance : 2

99
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

100
Tree	Iterator iter = res.entries . iterator () ; contains
Code	Iterator iter = res.entries . iterator () ; contains
Distance : 2

101
Tree	Iterator iter = res.entries . iterator () ; <=
Code	Iterator iter = res.entries . iterator () ; <=
Distance : 2

102
Tree	Iterator iter = res.entries . iterator () ; a
Code	Iterator iter = res.entries . iterator () ; a
Distance : 2

103
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Distance : 2

104
Tree	Iterator iter = res.entries . iterator () ; size
Code	Iterator iter = res.entries . iterator () ; size
Distance : 2

105
Tree	Iterator iter = res.entries . iterator () ; StringBuilder
Code	Iterator iter = res.entries . iterator () ; StringBuilder
Distance : 2

106
Tree	Iterator iter = res.entries . iterator () ; b
Code	Iterator iter = res.entries . iterator () ; b
Distance : 2

107
Tree	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Code	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Distance : 2

108
Tree	Iterator iter = res.entries . iterator () ; stroke
Code	Iterator iter = res.entries . iterator () ; stroke
Distance : 2

109
Tree	Iterator iter = res.entries . iterator () ; traverseEs6
Code	Iterator iter = res.entries . iterator () ; traverseEs6
Distance : 2

110
Tree	Iterator iter = res.entries . iterator () ; UnivariateFunction
Code	Iterator iter = res.entries . iterator () ; UnivariateFunction
Distance : 2

111
Tree	Iterator iter = res.entries . iterator () ; sb
Code	Iterator iter = res.entries . iterator () ; sb
Distance : 2

112
Tree	Iterator iter = res.entries . iterator () ; throws
Code	Iterator iter = res.entries . iterator () ; throws
Distance : 2

113
Tree	Iterator iter = res.entries . iterator () ; scope
Code	Iterator iter = res.entries . iterator () ; scope
Distance : 2

114
Tree	Iterator iter = res.entries . iterator () ; sqrt
Code	Iterator iter = res.entries . iterator () ; sqrt
Distance : 2

115
Tree	Iterator iter = res.entries . iterator () ; clone
Code	Iterator iter = res.entries . iterator () ; clone
Distance : 2

116
Tree	Iterator iter = res.entries . iterator () ; returnZero
Code	Iterator iter = res.entries . iterator () ; returnZero
Distance : 2

117
Tree	Iterator iter = res.entries . iterator () ; getFirstChild
Code	Iterator iter = res.entries . iterator () ; getFirstChild
Distance : 2

118
Tree	Iterator iter = res.entries . iterator () ; simpleMethod
Code	Iterator iter = res.entries . iterator () ; simpleMethod
Distance : 2

119
Tree	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Code	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Distance : 2

120
Tree	Iterator iter = res.entries . iterator () ; append
Code	Iterator iter = res.entries . iterator () ; append
Distance : 2

121
Tree	Iterator iter = res.entries . iterator () ; optimizer
Code	Iterator iter = res.entries . iterator () ; optimizer
Distance : 2

122
Tree	Iterator iter = res.entries . iterator () ; obj
Code	Iterator iter = res.entries . iterator () ; obj
Distance : 2

123
Tree	Iterator iter = res.entries . iterator () ; chrono
Code	Iterator iter = res.entries . iterator () ; chrono
Distance : 2

124
Tree	Iterator iter = res.entries . iterator () ; isBlock
Code	Iterator iter = res.entries . iterator () ; isBlock
Distance : 2

125
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

126
Tree	Iterator iter = res.entries . iterator () ; Integer
Code	Iterator iter = res.entries . iterator () ; Integer
Distance : 2

127
Tree	Iterator iter = res.entries . iterator () ; v
Code	Iterator iter = res.entries . iterator () ; v
Distance : 2

128
Tree	Iterator iter = res.entries . iterator () ; reportCodeChange
Code	Iterator iter = res.entries . iterator () ; reportCodeChange
Distance : 2

129
Tree	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Distance : 2

130
Tree	Iterator iter = res.entries . iterator () ; invocation
Code	Iterator iter = res.entries . iterator () ; invocation
Distance : 2

131
Tree	Iterator iter = res.entries . iterator () ; assertThat
Code	Iterator iter = res.entries . iterator () ; assertThat
Distance : 2

132
Tree	Iterator iter = res.entries . iterator () ; FastMath
Code	Iterator iter = res.entries . iterator () ; FastMath
Distance : 2

133
Tree	Iterator iter = res.entries . iterator () ; expected
Code	Iterator iter = res.entries . iterator () ; expected
Distance : 2

134
Tree	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Distance : 2

135
Tree	Iterator iter = res.entries . iterator () ; parent
Code	Iterator iter = res.entries . iterator () ; parent
Distance : 2

136
Tree	Iterator iter = res.entries . iterator () ; fireChangeEvent
Code	Iterator iter = res.entries . iterator () ; fireChangeEvent
Distance : 2

137
Tree	Iterator iter = res.entries . iterator () ; ArrayList
Code	Iterator iter = res.entries . iterator () ; ArrayList
Distance : 2

138
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

139
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

140
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

141
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

142
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

143
Tree	Iterator iter = res.entries . iterator () ; result
Code	Iterator iter = res.entries . iterator () ; result
Distance : 2

144
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

145
Tree	Iterator iter = res.entries . iterator () ; :
Code	Iterator iter = res.entries . iterator () ; :
Distance : 2

146
Tree	Iterator iter = res.entries . iterator () ; valueOf
Code	Iterator iter = res.entries . iterator () ; valueOf
Distance : 2

147
Tree	Iterator iter = res.entries . iterator () ; y
Code	Iterator iter = res.entries . iterator () ; y
Distance : 2

148
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

149
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

150
Tree	Iterator iter = res.entries . iterator () ; ?
Code	Iterator iter = res.entries . iterator () ; ?
Distance : 2

151
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

152
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

153
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

154
Tree	Iterator iter = res.entries . iterator () ; type
Code	Iterator iter = res.entries . iterator () ; type
Distance : 2

155
Tree	Iterator iter = res.entries . iterator () ; *
Code	Iterator iter = res.entries . iterator () ; *
Distance : 2

156
Tree	Iterator iter = res.entries . iterator () ; getInstance
Code	Iterator iter = res.entries . iterator () ; getInstance
Distance : 2

157
Tree	Iterator iter = res.entries . iterator () ; serialised
Code	Iterator iter = res.entries . iterator () ; serialised
Distance : 2

158
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

159
Tree	Iterator iter = res.entries . iterator () ; checkNotNull
Code	Iterator iter = res.entries . iterator () ; checkNotNull
Distance : 2

160
Tree	Iterator iter = res.entries . iterator () ; source
Code	Iterator iter = res.entries . iterator () ; source
Distance : 2

161
Tree	Iterator iter = res.entries . iterator () ; toString
Code	Iterator iter = res.entries . iterator () ; toString
Distance : 2

162
Tree	Iterator iter = res.entries . iterator () ; Math
Code	Iterator iter = res.entries . iterator () ; Math
Distance : 2

163
Tree	Iterator iter = res.entries . iterator () ; root
Code	Iterator iter = res.entries . iterator () ; root
Distance : 2

164
Tree	Iterator iter = res.entries . iterator () ; options
Code	Iterator iter = res.entries . iterator () ; options
Distance : 2

165
Tree	Iterator iter = res.entries . iterator () ; p
Code	Iterator iter = res.entries . iterator () ; p
Distance : 2

166
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

167
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

168
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

169
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

170
Tree	Iterator iter = res.entries . iterator () ; ex
Code	Iterator iter = res.entries . iterator () ; ex
Distance : 2

171
Tree	Iterator iter = res.entries . iterator () ; NodeUtil
Code	Iterator iter = res.entries . iterator () ; NodeUtil
Distance : 2

172
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

173
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

174
Tree	Iterator iter = res.entries . iterator () ; NodeTraversal
Code	Iterator iter = res.entries . iterator () ; NodeTraversal
Distance : 2

175
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

176
Tree	Iterator iter = res.entries . iterator () ; Exception
Code	Iterator iter = res.entries . iterator () ; Exception
Distance : 2

177
Tree	Iterator iter = res.entries . iterator () ; Node
Code	Iterator iter = res.entries . iterator () ; Node
Distance : 2

178
Tree	Iterator iter = res.entries . iterator () ; c
Code	Iterator iter = res.entries . iterator () ; c
Distance : 2

179
Tree	Iterator iter = res.entries . iterator () ; notifyListeners
Code	Iterator iter = res.entries . iterator () ; notifyListeners
Distance : 2

180
Tree	Iterator iter = res.entries . iterator () ; lines
Code	Iterator iter = res.entries . iterator () ; lines
Distance : 2

181
Tree	Iterator iter = res.entries . iterator () ; verify
Code	Iterator iter = res.entries . iterator () ; verify
Distance : 2

182
Tree	Iterator iter = res.entries . iterator () ; compiler
Code	Iterator iter = res.entries . iterator () ; compiler
Distance : 2

183
Tree	Iterator iter = res.entries . iterator () ; String
Code	Iterator iter = res.entries . iterator () ; String
Distance : 2

184
Tree	Iterator iter = res.entries . iterator () ; null
Code	Iterator iter = res.entries . iterator () ; null
Distance : 2

185
Tree	Iterator iter = res.entries . iterator () ; wanted
Code	Iterator iter = res.entries . iterator () ; wanted
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; throw
Code	Iterator iter = res.entries . iterator () ; throw
Distance : 2

188
Tree	Iterator iter = res.entries . iterator () ; super
Code	Iterator iter = res.entries . iterator () ; super
Distance : 2

189
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

190
Tree	Iterator iter = res.entries . iterator () ; long
Code	Iterator iter = res.entries . iterator () ; long
Distance : 2

191
Tree	Iterator iter = res.entries . iterator () ; /
Code	Iterator iter = res.entries . iterator () ; /
Distance : 2

192
Tree	Iterator iter = res.entries . iterator () ; length
Code	Iterator iter = res.entries . iterator () ; length
Distance : 2

193
Tree	Iterator iter = res.entries . iterator () ; TestUtils
Code	Iterator iter = res.entries . iterator () ; TestUtils
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; alpha
Code	Iterator iter = res.entries . iterator () ; alpha
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; instance
Code	Iterator iter = res.entries . iterator () ; instance
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; catch
Code	Iterator iter = res.entries . iterator () ; catch
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Distance : 2

199
Tree	Iterator iter = res.entries . iterator () ; s
Code	Iterator iter = res.entries . iterator () ; s
Distance : 2

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = res.entries . iterator () ; invocations
Code	Iterator iter = res.entries . iterator () ; invocations
Distance : 2

1
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

2
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

3
Tree	Iterator iter = res.entries . iterator () ; mock
Code	Iterator iter = res.entries . iterator () ; mock
Distance : 2

4
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

5
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

6
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

7
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

8
Tree	Iterator iter = res.entries . iterator () ; T
Code	Iterator iter = res.entries . iterator () ; T
Distance : 2

9
Tree	Iterator iter = res.entries . iterator () ; &&
Code	Iterator iter = res.entries . iterator () ; &&
Distance : 2

10
Tree	Iterator iter = res.entries . iterator () ; ]
Code	Iterator iter = res.entries . iterator () ; ]
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; [
Code	Iterator iter = res.entries . iterator () ; [
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; Object
Code	Iterator iter = res.entries . iterator () ; Object
Distance : 2

13
Tree	Iterator iter = res.entries . iterator () ; class
Code	Iterator iter = res.entries . iterator () ; class
Distance : 2

14
Tree	Iterator iter = res.entries . iterator () ; test
Code	Iterator iter = res.entries . iterator () ; test
Distance : 2

15
Tree	Iterator iter = res.entries . iterator () ; @
Code	Iterator iter = res.entries . iterator () ; @
Distance : 2

16
Tree	Iterator iter = res.entries . iterator () ; !
Code	Iterator iter = res.entries . iterator () ; !
Distance : 2

17
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

18
Tree	Iterator iter = res.entries . iterator () ; ==
Code	Iterator iter = res.entries . iterator () ; ==
Distance : 2

19
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; []
Code	Iterator iter = res.entries . iterator () ; []
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; checkState
Code	Iterator iter = res.entries . iterator () ; checkState
Distance : 2

22
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

23
Tree	Iterator iter = res.entries . iterator () ; out
Code	Iterator iter = res.entries . iterator () ; out
Distance : 2

24
Tree	Iterator iter = res.entries . iterator () ; nullNotPermitted
Code	Iterator iter = res.entries . iterator () ; nullNotPermitted
Distance : 2

25
Tree	Iterator iter = res.entries . iterator () ; n
Code	Iterator iter = res.entries . iterator () ; n
Distance : 2

26
Tree	Iterator iter = res.entries . iterator () ; !=
Code	Iterator iter = res.entries . iterator () ; !=
Distance : 2

27
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

28
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

29
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

30
Tree	Iterator iter = res.entries . iterator () ; public
Code	Iterator iter = res.entries . iterator () ; public
Distance : 2

31
Tree	Iterator iter = res.entries . iterator () ; >
Code	Iterator iter = res.entries . iterator () ; >
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; new
Code	Iterator iter = res.entries . iterator () ; new
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Code	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; ,
Code	Iterator iter = res.entries . iterator () ; ,
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; .
Code	Iterator iter = res.entries . iterator () ; .
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; }
Code	Iterator iter = res.entries . iterator () ; }
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; =
Code	Iterator iter = res.entries . iterator () ; =
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; (
Code	Iterator iter = res.entries . iterator () ; (
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; <s>
Code	Iterator iter = res.entries . iterator () ; <s>
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; <blank>
Code	Iterator iter = res.entries . iterator () ; <blank>
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; )
Code	Iterator iter = res.entries . iterator () ; )
Distance : 2

43
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

44
Tree	Iterator iter = res.entries . iterator () ; ()
Code	Iterator iter = res.entries . iterator () ; ()
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; {
Code	Iterator iter = res.entries . iterator () ; {
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; false
Code	Iterator iter = res.entries . iterator () ; false
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; int
Code	Iterator iter = res.entries . iterator () ; int
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; double
Code	Iterator iter = res.entries . iterator () ; double
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; e
Code	Iterator iter = res.entries . iterator () ; e
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; else
Code	Iterator iter = res.entries . iterator () ; else
Distance : 2

51
Tree	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Code	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Distance : 2

52
Tree	Iterator iter = res.entries . iterator () ; this
Code	Iterator iter = res.entries . iterator () ; this
Distance : 2

53
Tree	Iterator iter = res.entries . iterator () ; final
Code	Iterator iter = res.entries . iterator () ; final
Distance : 2

54
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

55
Tree	Iterator iter = res.entries . iterator () ; t
Code	Iterator iter = res.entries . iterator () ; t
Distance : 2

56
Tree	Iterator iter = res.entries . iterator () ; Collection
Code	Iterator iter = res.entries . iterator () ; Collection
Distance : 2

57
Tree	Iterator iter = res.entries . iterator () ; getField
Code	Iterator iter = res.entries . iterator () ; getField
Distance : 2

58
Tree	Iterator iter = res.entries . iterator () ; dataset
Code	Iterator iter = res.entries . iterator () ; dataset
Distance : 2

59
Tree	Iterator iter = res.entries . iterator () ; protected
Code	Iterator iter = res.entries . iterator () ; protected
Distance : 2

60
Tree	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Code	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Distance : 2

61
Tree	Iterator iter = res.entries . iterator () ; mode
Code	Iterator iter = res.entries . iterator () ; mode
Distance : 2

62
Tree	Iterator iter = res.entries . iterator () ; mockingProgress
Code	Iterator iter = res.entries . iterator () ; mockingProgress
Distance : 2

63
Tree	Iterator iter = res.entries . iterator () ; return;
Code	Iterator iter = res.entries . iterator () ; return;
Distance : 2

64
Tree	Iterator iter = res.entries . iterator () ; isEmpty
Code	Iterator iter = res.entries . iterator () ; isEmpty
Distance : 2

65
Tree	Iterator iter = res.entries . iterator () ; char
Code	Iterator iter = res.entries . iterator () ; char
Distance : 2

66
Tree	Iterator iter = res.entries . iterator () ; static
Code	Iterator iter = res.entries . iterator () ; static
Distance : 2

67
Tree	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Code	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Distance : 2

68
Tree	Iterator iter = res.entries . iterator () ; JSType
Code	Iterator iter = res.entries . iterator () ; JSType
Distance : 2

69
Tree	Iterator iter = res.entries . iterator () ; get
Code	Iterator iter = res.entries . iterator () ; get
Distance : 2

70
Tree	Iterator iter = res.entries . iterator () ; getMessage
Code	Iterator iter = res.entries . iterator () ; getMessage
Distance : 2

71
Tree	Iterator iter = res.entries . iterator () ; true
Code	Iterator iter = res.entries . iterator () ; true
Distance : 2

72
Tree	Iterator iter = res.entries . iterator () ; return
Code	Iterator iter = res.entries . iterator () ; return
Distance : 2

73
Tree	Iterator iter = res.entries . iterator () ; if
Code	Iterator iter = res.entries . iterator () ; if
Distance : 2

74
Tree	Iterator iter = res.entries . iterator () ; stream
Code	Iterator iter = res.entries . iterator () ; stream
Distance : 2

75
Tree	Iterator iter = res.entries . iterator () ; <
Code	Iterator iter = res.entries . iterator () ; <
Distance : 2

76
Tree	Iterator iter = res.entries . iterator () ; solver
Code	Iterator iter = res.entries . iterator () ; solver
Distance : 2

77
Tree	Iterator iter = res.entries . iterator () ; pattern
Code	Iterator iter = res.entries . iterator () ; pattern
Distance : 2

78
Tree	Iterator iter = res.entries . iterator () ; js
Code	Iterator iter = res.entries . iterator () ; js
Distance : 2

79
Tree	Iterator iter = res.entries . iterator () ; TestUtilities
Code	Iterator iter = res.entries . iterator () ; TestUtilities
Distance : 2

80
Tree	Iterator iter = res.entries . iterator () ; equals
Code	Iterator iter = res.entries . iterator () ; equals
Distance : 2

81
Tree	Iterator iter = res.entries . iterator () ; d
Code	Iterator iter = res.entries . iterator () ; d
Distance : 2

82
Tree	Iterator iter = res.entries . iterator () ; externs
Code	Iterator iter = res.entries . iterator () ; externs
Distance : 2

83
Tree	Iterator iter = res.entries . iterator () ; assertTrue
Code	Iterator iter = res.entries . iterator () ; assertTrue
Distance : 2

84
Tree	Iterator iter = res.entries . iterator () ; for
Code	Iterator iter = res.entries . iterator () ; for
Distance : 2

85
Tree	Iterator iter = res.entries . iterator () ; Invocation
Code	Iterator iter = res.entries . iterator () ; Invocation
Distance : 2

86
Tree	Iterator iter = res.entries . iterator () ; getParent
Code	Iterator iter = res.entries . iterator () ; getParent
Distance : 2

87
Tree	Iterator iter = res.entries . iterator () ; setUp
Code	Iterator iter = res.entries . iterator () ; setUp
Distance : 2

88
Tree	Iterator iter = res.entries . iterator () ; StrBuilder
Code	Iterator iter = res.entries . iterator () ; StrBuilder
Distance : 2

89
Tree	Iterator iter = res.entries . iterator () ; reportMatcher
Code	Iterator iter = res.entries . iterator () ; reportMatcher
Distance : 2

90
Tree	Iterator iter = res.entries . iterator () ; index
Code	Iterator iter = res.entries . iterator () ; index
Distance : 2

91
Tree	Iterator iter = res.entries . iterator () ; node
Code	Iterator iter = res.entries . iterator () ; node
Distance : 2

92
Tree	Iterator iter = res.entries . iterator () ; matcher
Code	Iterator iter = res.entries . iterator () ; matcher
Distance : 2

93
Tree	Iterator iter = res.entries . iterator () ; abs
Code	Iterator iter = res.entries . iterator () ; abs
Distance : 2

94
Tree	Iterator iter = res.entries . iterator () ; Double
Code	Iterator iter = res.entries . iterator () ; Double
Distance : 2

95
Tree	Iterator iter = res.entries . iterator () ; PeriodType
Code	Iterator iter = res.entries . iterator () ; PeriodType
Distance : 2

96
Tree	Iterator iter = res.entries . iterator () ; instant
Code	Iterator iter = res.entries . iterator () ; instant
Distance : 2

97
Tree	Iterator iter = res.entries . iterator () ; values
Code	Iterator iter = res.entries . iterator () ; values
Distance : 2

98
Tree	Iterator iter = res.entries . iterator () ; isNormalBlock
Code	Iterator iter = res.entries . iterator () ; isNormalBlock
Distance : 2

99
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

100
Tree	Iterator iter = res.entries . iterator () ; contains
Code	Iterator iter = res.entries . iterator () ; contains
Distance : 2

101
Tree	Iterator iter = res.entries . iterator () ; <=
Code	Iterator iter = res.entries . iterator () ; <=
Distance : 2

102
Tree	Iterator iter = res.entries . iterator () ; a
Code	Iterator iter = res.entries . iterator () ; a
Distance : 2

103
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Distance : 2

104
Tree	Iterator iter = res.entries . iterator () ; size
Code	Iterator iter = res.entries . iterator () ; size
Distance : 2

105
Tree	Iterator iter = res.entries . iterator () ; StringBuilder
Code	Iterator iter = res.entries . iterator () ; StringBuilder
Distance : 2

106
Tree	Iterator iter = res.entries . iterator () ; b
Code	Iterator iter = res.entries . iterator () ; b
Distance : 2

107
Tree	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Code	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Distance : 2

108
Tree	Iterator iter = res.entries . iterator () ; stroke
Code	Iterator iter = res.entries . iterator () ; stroke
Distance : 2

109
Tree	Iterator iter = res.entries . iterator () ; traverseEs6
Code	Iterator iter = res.entries . iterator () ; traverseEs6
Distance : 2

110
Tree	Iterator iter = res.entries . iterator () ; UnivariateFunction
Code	Iterator iter = res.entries . iterator () ; UnivariateFunction
Distance : 2

111
Tree	Iterator iter = res.entries . iterator () ; sb
Code	Iterator iter = res.entries . iterator () ; sb
Distance : 2

112
Tree	Iterator iter = res.entries . iterator () ; throws
Code	Iterator iter = res.entries . iterator () ; throws
Distance : 2

113
Tree	Iterator iter = res.entries . iterator () ; scope
Code	Iterator iter = res.entries . iterator () ; scope
Distance : 2

114
Tree	Iterator iter = res.entries . iterator () ; sqrt
Code	Iterator iter = res.entries . iterator () ; sqrt
Distance : 2

115
Tree	Iterator iter = res.entries . iterator () ; clone
Code	Iterator iter = res.entries . iterator () ; clone
Distance : 2

116
Tree	Iterator iter = res.entries . iterator () ; returnZero
Code	Iterator iter = res.entries . iterator () ; returnZero
Distance : 2

117
Tree	Iterator iter = res.entries . iterator () ; getFirstChild
Code	Iterator iter = res.entries . iterator () ; getFirstChild
Distance : 2

118
Tree	Iterator iter = res.entries . iterator () ; simpleMethod
Code	Iterator iter = res.entries . iterator () ; simpleMethod
Distance : 2

119
Tree	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Code	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Distance : 2

120
Tree	Iterator iter = res.entries . iterator () ; append
Code	Iterator iter = res.entries . iterator () ; append
Distance : 2

121
Tree	Iterator iter = res.entries . iterator () ; optimizer
Code	Iterator iter = res.entries . iterator () ; optimizer
Distance : 2

122
Tree	Iterator iter = res.entries . iterator () ; obj
Code	Iterator iter = res.entries . iterator () ; obj
Distance : 2

123
Tree	Iterator iter = res.entries . iterator () ; chrono
Code	Iterator iter = res.entries . iterator () ; chrono
Distance : 2

124
Tree	Iterator iter = res.entries . iterator () ; isBlock
Code	Iterator iter = res.entries . iterator () ; isBlock
Distance : 2

125
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

126
Tree	Iterator iter = res.entries . iterator () ; Integer
Code	Iterator iter = res.entries . iterator () ; Integer
Distance : 2

127
Tree	Iterator iter = res.entries . iterator () ; v
Code	Iterator iter = res.entries . iterator () ; v
Distance : 2

128
Tree	Iterator iter = res.entries . iterator () ; reportCodeChange
Code	Iterator iter = res.entries . iterator () ; reportCodeChange
Distance : 2

129
Tree	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Distance : 2

130
Tree	Iterator iter = res.entries . iterator () ; invocation
Code	Iterator iter = res.entries . iterator () ; invocation
Distance : 2

131
Tree	Iterator iter = res.entries . iterator () ; assertThat
Code	Iterator iter = res.entries . iterator () ; assertThat
Distance : 2

132
Tree	Iterator iter = res.entries . iterator () ; FastMath
Code	Iterator iter = res.entries . iterator () ; FastMath
Distance : 2

133
Tree	Iterator iter = res.entries . iterator () ; expected
Code	Iterator iter = res.entries . iterator () ; expected
Distance : 2

134
Tree	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Distance : 2

135
Tree	Iterator iter = res.entries . iterator () ; parent
Code	Iterator iter = res.entries . iterator () ; parent
Distance : 2

136
Tree	Iterator iter = res.entries . iterator () ; fireChangeEvent
Code	Iterator iter = res.entries . iterator () ; fireChangeEvent
Distance : 2

137
Tree	Iterator iter = res.entries . iterator () ; ArrayList
Code	Iterator iter = res.entries . iterator () ; ArrayList
Distance : 2

138
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

139
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

140
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

141
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

142
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

143
Tree	Iterator iter = res.entries . iterator () ; result
Code	Iterator iter = res.entries . iterator () ; result
Distance : 2

144
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

145
Tree	Iterator iter = res.entries . iterator () ; :
Code	Iterator iter = res.entries . iterator () ; :
Distance : 2

146
Tree	Iterator iter = res.entries . iterator () ; valueOf
Code	Iterator iter = res.entries . iterator () ; valueOf
Distance : 2

147
Tree	Iterator iter = res.entries . iterator () ; y
Code	Iterator iter = res.entries . iterator () ; y
Distance : 2

148
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

149
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

150
Tree	Iterator iter = res.entries . iterator () ; ?
Code	Iterator iter = res.entries . iterator () ; ?
Distance : 2

151
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

152
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

153
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

154
Tree	Iterator iter = res.entries . iterator () ; type
Code	Iterator iter = res.entries . iterator () ; type
Distance : 2

155
Tree	Iterator iter = res.entries . iterator () ; *
Code	Iterator iter = res.entries . iterator () ; *
Distance : 2

156
Tree	Iterator iter = res.entries . iterator () ; getInstance
Code	Iterator iter = res.entries . iterator () ; getInstance
Distance : 2

157
Tree	Iterator iter = res.entries . iterator () ; serialised
Code	Iterator iter = res.entries . iterator () ; serialised
Distance : 2

158
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

159
Tree	Iterator iter = res.entries . iterator () ; checkNotNull
Code	Iterator iter = res.entries . iterator () ; checkNotNull
Distance : 2

160
Tree	Iterator iter = res.entries . iterator () ; source
Code	Iterator iter = res.entries . iterator () ; source
Distance : 2

161
Tree	Iterator iter = res.entries . iterator () ; toString
Code	Iterator iter = res.entries . iterator () ; toString
Distance : 2

162
Tree	Iterator iter = res.entries . iterator () ; Math
Code	Iterator iter = res.entries . iterator () ; Math
Distance : 2

163
Tree	Iterator iter = res.entries . iterator () ; root
Code	Iterator iter = res.entries . iterator () ; root
Distance : 2

164
Tree	Iterator iter = res.entries . iterator () ; options
Code	Iterator iter = res.entries . iterator () ; options
Distance : 2

165
Tree	Iterator iter = res.entries . iterator () ; p
Code	Iterator iter = res.entries . iterator () ; p
Distance : 2

166
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

167
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

168
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

169
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

170
Tree	Iterator iter = res.entries . iterator () ; ex
Code	Iterator iter = res.entries . iterator () ; ex
Distance : 2

171
Tree	Iterator iter = res.entries . iterator () ; NodeUtil
Code	Iterator iter = res.entries . iterator () ; NodeUtil
Distance : 2

172
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

173
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

174
Tree	Iterator iter = res.entries . iterator () ; NodeTraversal
Code	Iterator iter = res.entries . iterator () ; NodeTraversal
Distance : 2

175
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

176
Tree	Iterator iter = res.entries . iterator () ; Exception
Code	Iterator iter = res.entries . iterator () ; Exception
Distance : 2

177
Tree	Iterator iter = res.entries . iterator () ; Node
Code	Iterator iter = res.entries . iterator () ; Node
Distance : 2

178
Tree	Iterator iter = res.entries . iterator () ; c
Code	Iterator iter = res.entries . iterator () ; c
Distance : 2

179
Tree	Iterator iter = res.entries . iterator () ; notifyListeners
Code	Iterator iter = res.entries . iterator () ; notifyListeners
Distance : 2

180
Tree	Iterator iter = res.entries . iterator () ; lines
Code	Iterator iter = res.entries . iterator () ; lines
Distance : 2

181
Tree	Iterator iter = res.entries . iterator () ; verify
Code	Iterator iter = res.entries . iterator () ; verify
Distance : 2

182
Tree	Iterator iter = res.entries . iterator () ; compiler
Code	Iterator iter = res.entries . iterator () ; compiler
Distance : 2

183
Tree	Iterator iter = res.entries . iterator () ; String
Code	Iterator iter = res.entries . iterator () ; String
Distance : 2

184
Tree	Iterator iter = res.entries . iterator () ; null
Code	Iterator iter = res.entries . iterator () ; null
Distance : 2

185
Tree	Iterator iter = res.entries . iterator () ; wanted
Code	Iterator iter = res.entries . iterator () ; wanted
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; throw
Code	Iterator iter = res.entries . iterator () ; throw
Distance : 2

188
Tree	Iterator iter = res.entries . iterator () ; super
Code	Iterator iter = res.entries . iterator () ; super
Distance : 2

189
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

190
Tree	Iterator iter = res.entries . iterator () ; long
Code	Iterator iter = res.entries . iterator () ; long
Distance : 2

191
Tree	Iterator iter = res.entries . iterator () ; /
Code	Iterator iter = res.entries . iterator () ; /
Distance : 2

192
Tree	Iterator iter = res.entries . iterator () ; length
Code	Iterator iter = res.entries . iterator () ; length
Distance : 2

193
Tree	Iterator iter = res.entries . iterator () ; TestUtils
Code	Iterator iter = res.entries . iterator () ; TestUtils
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; alpha
Code	Iterator iter = res.entries . iterator () ; alpha
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; instance
Code	Iterator iter = res.entries . iterator () ; instance
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; catch
Code	Iterator iter = res.entries . iterator () ; catch
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Distance : 2

199
Tree	Iterator iter = res.entries . iterator () ; s
Code	Iterator iter = res.entries . iterator () ; s
Distance : 2

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = res.entries . iterator () ; invocations
Code	Iterator iter = res.entries . iterator () ; invocations
Distance : 2

1
Tree	Iterator iter = res.entries . iterator () ; Class
Code	Iterator iter = res.entries . iterator () ; Class
Distance : 2

2
Tree	Iterator iter = res.entries . iterator () ; {}
Code	Iterator iter = res.entries . iterator () ; {}
Distance : 2

3
Tree	Iterator iter = res.entries . iterator () ; mock
Code	Iterator iter = res.entries . iterator () ; mock
Distance : 2

4
Tree	Iterator iter = res.entries . iterator () ; f
Code	Iterator iter = res.entries . iterator () ; f
Distance : 2

5
Tree	Iterator iter = res.entries . iterator () ; ParamChecks
Code	Iterator iter = res.entries . iterator () ; ParamChecks
Distance : 2

6
Tree	Iterator iter = res.entries . iterator () ; -
Code	Iterator iter = res.entries . iterator () ; -
Distance : 2

7
Tree	Iterator iter = res.entries . iterator () ; Preconditions
Code	Iterator iter = res.entries . iterator () ; Preconditions
Distance : 2

8
Tree	Iterator iter = res.entries . iterator () ; T
Code	Iterator iter = res.entries . iterator () ; T
Distance : 2

9
Tree	Iterator iter = res.entries . iterator () ; &&
Code	Iterator iter = res.entries . iterator () ; &&
Distance : 2

10
Tree	Iterator iter = res.entries . iterator () ; ]
Code	Iterator iter = res.entries . iterator () ; ]
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; [
Code	Iterator iter = res.entries . iterator () ; [
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; Object
Code	Iterator iter = res.entries . iterator () ; Object
Distance : 2

13
Tree	Iterator iter = res.entries . iterator () ; class
Code	Iterator iter = res.entries . iterator () ; class
Distance : 2

14
Tree	Iterator iter = res.entries . iterator () ; test
Code	Iterator iter = res.entries . iterator () ; test
Distance : 2

15
Tree	Iterator iter = res.entries . iterator () ; @
Code	Iterator iter = res.entries . iterator () ; @
Distance : 2

16
Tree	Iterator iter = res.entries . iterator () ; !
Code	Iterator iter = res.entries . iterator () ; !
Distance : 2

17
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

18
Tree	Iterator iter = res.entries . iterator () ; ==
Code	Iterator iter = res.entries . iterator () ; ==
Distance : 2

19
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

20
Tree	Iterator iter = res.entries . iterator () ; []
Code	Iterator iter = res.entries . iterator () ; []
Distance : 2

21
Tree	Iterator iter = res.entries . iterator () ; checkState
Code	Iterator iter = res.entries . iterator () ; checkState
Distance : 2

22
Tree	Iterator iter = res.entries . iterator () ; Test
Code	Iterator iter = res.entries . iterator () ; Test
Distance : 2

23
Tree	Iterator iter = res.entries . iterator () ; out
Code	Iterator iter = res.entries . iterator () ; out
Distance : 2

24
Tree	Iterator iter = res.entries . iterator () ; nullNotPermitted
Code	Iterator iter = res.entries . iterator () ; nullNotPermitted
Distance : 2

25
Tree	Iterator iter = res.entries . iterator () ; n
Code	Iterator iter = res.entries . iterator () ; n
Distance : 2

26
Tree	Iterator iter = res.entries . iterator () ; !=
Code	Iterator iter = res.entries . iterator () ; !=
Distance : 2

27
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

28
Tree	Iterator iter = res.entries . iterator () ; MathRuntimeException
Code	Iterator iter = res.entries . iterator () ; MathRuntimeException
Distance : 2

29
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

30
Tree	Iterator iter = res.entries . iterator () ; public
Code	Iterator iter = res.entries . iterator () ; public
Distance : 2

31
Tree	Iterator iter = res.entries . iterator () ; >
Code	Iterator iter = res.entries . iterator () ; >
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; new
Code	Iterator iter = res.entries . iterator () ; new
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Code	Iterator iter = res.entries . iterator () ; STRING_CONSTANT
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; ,
Code	Iterator iter = res.entries . iterator () ; ,
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; .
Code	Iterator iter = res.entries . iterator () ; .
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; }
Code	Iterator iter = res.entries . iterator () ; }
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; =
Code	Iterator iter = res.entries . iterator () ; =
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; (
Code	Iterator iter = res.entries . iterator () ; (
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; <s>
Code	Iterator iter = res.entries . iterator () ; <s>
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; <blank>
Code	Iterator iter = res.entries . iterator () ; <blank>
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; )
Code	Iterator iter = res.entries . iterator () ; )
Distance : 2

43
Tree	Iterator iter = res.entries . iterator () ; ;
Code	Iterator iter = res.entries . iterator () ; ;
Distance : 2

44
Tree	Iterator iter = res.entries . iterator () ; ()
Code	Iterator iter = res.entries . iterator () ; ()
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; {
Code	Iterator iter = res.entries . iterator () ; {
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; false
Code	Iterator iter = res.entries . iterator () ; false
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; int
Code	Iterator iter = res.entries . iterator () ; int
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; double
Code	Iterator iter = res.entries . iterator () ; double
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; e
Code	Iterator iter = res.entries . iterator () ; e
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; else
Code	Iterator iter = res.entries . iterator () ; else
Distance : 2

51
Tree	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Code	Iterator iter = res.entries . iterator () ; NUMBER_CONSTANT
Distance : 2

52
Tree	Iterator iter = res.entries . iterator () ; this
Code	Iterator iter = res.entries . iterator () ; this
Distance : 2

53
Tree	Iterator iter = res.entries . iterator () ; final
Code	Iterator iter = res.entries . iterator () ; final
Distance : 2

54
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

55
Tree	Iterator iter = res.entries . iterator () ; t
Code	Iterator iter = res.entries . iterator () ; t
Distance : 2

56
Tree	Iterator iter = res.entries . iterator () ; Collection
Code	Iterator iter = res.entries . iterator () ; Collection
Distance : 2

57
Tree	Iterator iter = res.entries . iterator () ; getField
Code	Iterator iter = res.entries . iterator () ; getField
Distance : 2

58
Tree	Iterator iter = res.entries . iterator () ; dataset
Code	Iterator iter = res.entries . iterator () ; dataset
Distance : 2

59
Tree	Iterator iter = res.entries . iterator () ; protected
Code	Iterator iter = res.entries . iterator () ; protected
Distance : 2

60
Tree	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Code	Iterator iter = res.entries . iterator () ; PlotChangeEvent
Distance : 2

61
Tree	Iterator iter = res.entries . iterator () ; mode
Code	Iterator iter = res.entries . iterator () ; mode
Distance : 2

62
Tree	Iterator iter = res.entries . iterator () ; mockingProgress
Code	Iterator iter = res.entries . iterator () ; mockingProgress
Distance : 2

63
Tree	Iterator iter = res.entries . iterator () ; return;
Code	Iterator iter = res.entries . iterator () ; return;
Distance : 2

64
Tree	Iterator iter = res.entries . iterator () ; isEmpty
Code	Iterator iter = res.entries . iterator () ; isEmpty
Distance : 2

65
Tree	Iterator iter = res.entries . iterator () ; char
Code	Iterator iter = res.entries . iterator () ; char
Distance : 2

66
Tree	Iterator iter = res.entries . iterator () ; static
Code	Iterator iter = res.entries . iterator () ; static
Distance : 2

67
Tree	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Code	Iterator iter = res.entries . iterator () ; setAcceptedLanguage
Distance : 2

68
Tree	Iterator iter = res.entries . iterator () ; JSType
Code	Iterator iter = res.entries . iterator () ; JSType
Distance : 2

69
Tree	Iterator iter = res.entries . iterator () ; get
Code	Iterator iter = res.entries . iterator () ; get
Distance : 2

70
Tree	Iterator iter = res.entries . iterator () ; getMessage
Code	Iterator iter = res.entries . iterator () ; getMessage
Distance : 2

71
Tree	Iterator iter = res.entries . iterator () ; true
Code	Iterator iter = res.entries . iterator () ; true
Distance : 2

72
Tree	Iterator iter = res.entries . iterator () ; return
Code	Iterator iter = res.entries . iterator () ; return
Distance : 2

73
Tree	Iterator iter = res.entries . iterator () ; if
Code	Iterator iter = res.entries . iterator () ; if
Distance : 2

74
Tree	Iterator iter = res.entries . iterator () ; stream
Code	Iterator iter = res.entries . iterator () ; stream
Distance : 2

75
Tree	Iterator iter = res.entries . iterator () ; <
Code	Iterator iter = res.entries . iterator () ; <
Distance : 2

76
Tree	Iterator iter = res.entries . iterator () ; solver
Code	Iterator iter = res.entries . iterator () ; solver
Distance : 2

77
Tree	Iterator iter = res.entries . iterator () ; pattern
Code	Iterator iter = res.entries . iterator () ; pattern
Distance : 2

78
Tree	Iterator iter = res.entries . iterator () ; js
Code	Iterator iter = res.entries . iterator () ; js
Distance : 2

79
Tree	Iterator iter = res.entries . iterator () ; TestUtilities
Code	Iterator iter = res.entries . iterator () ; TestUtilities
Distance : 2

80
Tree	Iterator iter = res.entries . iterator () ; equals
Code	Iterator iter = res.entries . iterator () ; equals
Distance : 2

81
Tree	Iterator iter = res.entries . iterator () ; d
Code	Iterator iter = res.entries . iterator () ; d
Distance : 2

82
Tree	Iterator iter = res.entries . iterator () ; externs
Code	Iterator iter = res.entries . iterator () ; externs
Distance : 2

83
Tree	Iterator iter = res.entries . iterator () ; assertTrue
Code	Iterator iter = res.entries . iterator () ; assertTrue
Distance : 2

84
Tree	Iterator iter = res.entries . iterator () ; for
Code	Iterator iter = res.entries . iterator () ; for
Distance : 2

85
Tree	Iterator iter = res.entries . iterator () ; Invocation
Code	Iterator iter = res.entries . iterator () ; Invocation
Distance : 2

86
Tree	Iterator iter = res.entries . iterator () ; getParent
Code	Iterator iter = res.entries . iterator () ; getParent
Distance : 2

87
Tree	Iterator iter = res.entries . iterator () ; setUp
Code	Iterator iter = res.entries . iterator () ; setUp
Distance : 2

88
Tree	Iterator iter = res.entries . iterator () ; StrBuilder
Code	Iterator iter = res.entries . iterator () ; StrBuilder
Distance : 2

89
Tree	Iterator iter = res.entries . iterator () ; reportMatcher
Code	Iterator iter = res.entries . iterator () ; reportMatcher
Distance : 2

90
Tree	Iterator iter = res.entries . iterator () ; index
Code	Iterator iter = res.entries . iterator () ; index
Distance : 2

91
Tree	Iterator iter = res.entries . iterator () ; node
Code	Iterator iter = res.entries . iterator () ; node
Distance : 2

92
Tree	Iterator iter = res.entries . iterator () ; matcher
Code	Iterator iter = res.entries . iterator () ; matcher
Distance : 2

93
Tree	Iterator iter = res.entries . iterator () ; abs
Code	Iterator iter = res.entries . iterator () ; abs
Distance : 2

94
Tree	Iterator iter = res.entries . iterator () ; Double
Code	Iterator iter = res.entries . iterator () ; Double
Distance : 2

95
Tree	Iterator iter = res.entries . iterator () ; PeriodType
Code	Iterator iter = res.entries . iterator () ; PeriodType
Distance : 2

96
Tree	Iterator iter = res.entries . iterator () ; instant
Code	Iterator iter = res.entries . iterator () ; instant
Distance : 2

97
Tree	Iterator iter = res.entries . iterator () ; values
Code	Iterator iter = res.entries . iterator () ; values
Distance : 2

98
Tree	Iterator iter = res.entries . iterator () ; isNormalBlock
Code	Iterator iter = res.entries . iterator () ; isNormalBlock
Distance : 2

99
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

100
Tree	Iterator iter = res.entries . iterator () ; contains
Code	Iterator iter = res.entries . iterator () ; contains
Distance : 2

101
Tree	Iterator iter = res.entries . iterator () ; <=
Code	Iterator iter = res.entries . iterator () ; <=
Distance : 2

102
Tree	Iterator iter = res.entries . iterator () ; a
Code	Iterator iter = res.entries . iterator () ; a
Distance : 2

103
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT_2015
Distance : 2

104
Tree	Iterator iter = res.entries . iterator () ; size
Code	Iterator iter = res.entries . iterator () ; size
Distance : 2

105
Tree	Iterator iter = res.entries . iterator () ; StringBuilder
Code	Iterator iter = res.entries . iterator () ; StringBuilder
Distance : 2

106
Tree	Iterator iter = res.entries . iterator () ; b
Code	Iterator iter = res.entries . iterator () ; b
Distance : 2

107
Tree	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Code	Iterator iter = res.entries . iterator () ; MutableTimePeriod
Distance : 2

108
Tree	Iterator iter = res.entries . iterator () ; stroke
Code	Iterator iter = res.entries . iterator () ; stroke
Distance : 2

109
Tree	Iterator iter = res.entries . iterator () ; traverseEs6
Code	Iterator iter = res.entries . iterator () ; traverseEs6
Distance : 2

110
Tree	Iterator iter = res.entries . iterator () ; UnivariateFunction
Code	Iterator iter = res.entries . iterator () ; UnivariateFunction
Distance : 2

111
Tree	Iterator iter = res.entries . iterator () ; sb
Code	Iterator iter = res.entries . iterator () ; sb
Distance : 2

112
Tree	Iterator iter = res.entries . iterator () ; throws
Code	Iterator iter = res.entries . iterator () ; throws
Distance : 2

113
Tree	Iterator iter = res.entries . iterator () ; scope
Code	Iterator iter = res.entries . iterator () ; scope
Distance : 2

114
Tree	Iterator iter = res.entries . iterator () ; sqrt
Code	Iterator iter = res.entries . iterator () ; sqrt
Distance : 2

115
Tree	Iterator iter = res.entries . iterator () ; clone
Code	Iterator iter = res.entries . iterator () ; clone
Distance : 2

116
Tree	Iterator iter = res.entries . iterator () ; returnZero
Code	Iterator iter = res.entries . iterator () ; returnZero
Distance : 2

117
Tree	Iterator iter = res.entries . iterator () ; getFirstChild
Code	Iterator iter = res.entries . iterator () ; getFirstChild
Distance : 2

118
Tree	Iterator iter = res.entries . iterator () ; simpleMethod
Code	Iterator iter = res.entries . iterator () ; simpleMethod
Distance : 2

119
Tree	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Code	Iterator iter = res.entries . iterator () ; getArgumentMatcherStorage
Distance : 2

120
Tree	Iterator iter = res.entries . iterator () ; append
Code	Iterator iter = res.entries . iterator () ; append
Distance : 2

121
Tree	Iterator iter = res.entries . iterator () ; optimizer
Code	Iterator iter = res.entries . iterator () ; optimizer
Distance : 2

122
Tree	Iterator iter = res.entries . iterator () ; obj
Code	Iterator iter = res.entries . iterator () ; obj
Distance : 2

123
Tree	Iterator iter = res.entries . iterator () ; chrono
Code	Iterator iter = res.entries . iterator () ; chrono
Distance : 2

124
Tree	Iterator iter = res.entries . iterator () ; isBlock
Code	Iterator iter = res.entries . iterator () ; isBlock
Distance : 2

125
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

126
Tree	Iterator iter = res.entries . iterator () ; Integer
Code	Iterator iter = res.entries . iterator () ; Integer
Distance : 2

127
Tree	Iterator iter = res.entries . iterator () ; v
Code	Iterator iter = res.entries . iterator () ; v
Distance : 2

128
Tree	Iterator iter = res.entries . iterator () ; reportCodeChange
Code	Iterator iter = res.entries . iterator () ; reportCodeChange
Distance : 2

129
Tree	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; IllegalArgumentException
Distance : 2

130
Tree	Iterator iter = res.entries . iterator () ; invocation
Code	Iterator iter = res.entries . iterator () ; invocation
Distance : 2

131
Tree	Iterator iter = res.entries . iterator () ; assertThat
Code	Iterator iter = res.entries . iterator () ; assertThat
Distance : 2

132
Tree	Iterator iter = res.entries . iterator () ; FastMath
Code	Iterator iter = res.entries . iterator () ; FastMath
Distance : 2

133
Tree	Iterator iter = res.entries . iterator () ; expected
Code	Iterator iter = res.entries . iterator () ; expected
Distance : 2

134
Tree	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator () ; createIllegalArgumentException
Distance : 2

135
Tree	Iterator iter = res.entries . iterator () ; parent
Code	Iterator iter = res.entries . iterator () ; parent
Distance : 2

136
Tree	Iterator iter = res.entries . iterator () ; fireChangeEvent
Code	Iterator iter = res.entries . iterator () ; fireChangeEvent
Distance : 2

137
Tree	Iterator iter = res.entries . iterator () ; ArrayList
Code	Iterator iter = res.entries . iterator () ; ArrayList
Distance : 2

138
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

139
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

140
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

141
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

142
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

143
Tree	Iterator iter = res.entries . iterator () ; result
Code	Iterator iter = res.entries . iterator () ; result
Distance : 2

144
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

145
Tree	Iterator iter = res.entries . iterator () ; :
Code	Iterator iter = res.entries . iterator () ; :
Distance : 2

146
Tree	Iterator iter = res.entries . iterator () ; valueOf
Code	Iterator iter = res.entries . iterator () ; valueOf
Distance : 2

147
Tree	Iterator iter = res.entries . iterator () ; y
Code	Iterator iter = res.entries . iterator () ; y
Distance : 2

148
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

149
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

150
Tree	Iterator iter = res.entries . iterator () ; ?
Code	Iterator iter = res.entries . iterator () ; ?
Distance : 2

151
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

152
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

153
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

154
Tree	Iterator iter = res.entries . iterator () ; type
Code	Iterator iter = res.entries . iterator () ; type
Distance : 2

155
Tree	Iterator iter = res.entries . iterator () ; *
Code	Iterator iter = res.entries . iterator () ; *
Distance : 2

156
Tree	Iterator iter = res.entries . iterator () ; getInstance
Code	Iterator iter = res.entries . iterator () ; getInstance
Distance : 2

157
Tree	Iterator iter = res.entries . iterator () ; serialised
Code	Iterator iter = res.entries . iterator () ; serialised
Distance : 2

158
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

159
Tree	Iterator iter = res.entries . iterator () ; checkNotNull
Code	Iterator iter = res.entries . iterator () ; checkNotNull
Distance : 2

160
Tree	Iterator iter = res.entries . iterator () ; source
Code	Iterator iter = res.entries . iterator () ; source
Distance : 2

161
Tree	Iterator iter = res.entries . iterator () ; toString
Code	Iterator iter = res.entries . iterator () ; toString
Distance : 2

162
Tree	Iterator iter = res.entries . iterator () ; Math
Code	Iterator iter = res.entries . iterator () ; Math
Distance : 2

163
Tree	Iterator iter = res.entries . iterator () ; root
Code	Iterator iter = res.entries . iterator () ; root
Distance : 2

164
Tree	Iterator iter = res.entries . iterator () ; options
Code	Iterator iter = res.entries . iterator () ; options
Distance : 2

165
Tree	Iterator iter = res.entries . iterator () ; p
Code	Iterator iter = res.entries . iterator () ; p
Distance : 2

166
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

167
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

168
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

169
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

170
Tree	Iterator iter = res.entries . iterator () ; ex
Code	Iterator iter = res.entries . iterator () ; ex
Distance : 2

171
Tree	Iterator iter = res.entries . iterator () ; NodeUtil
Code	Iterator iter = res.entries . iterator () ; NodeUtil
Distance : 2

172
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

173
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

174
Tree	Iterator iter = res.entries . iterator () ; NodeTraversal
Code	Iterator iter = res.entries . iterator () ; NodeTraversal
Distance : 2

175
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

176
Tree	Iterator iter = res.entries . iterator () ; Exception
Code	Iterator iter = res.entries . iterator () ; Exception
Distance : 2

177
Tree	Iterator iter = res.entries . iterator () ; Node
Code	Iterator iter = res.entries . iterator () ; Node
Distance : 2

178
Tree	Iterator iter = res.entries . iterator () ; c
Code	Iterator iter = res.entries . iterator () ; c
Distance : 2

179
Tree	Iterator iter = res.entries . iterator () ; notifyListeners
Code	Iterator iter = res.entries . iterator () ; notifyListeners
Distance : 2

180
Tree	Iterator iter = res.entries . iterator () ; lines
Code	Iterator iter = res.entries . iterator () ; lines
Distance : 2

181
Tree	Iterator iter = res.entries . iterator () ; verify
Code	Iterator iter = res.entries . iterator () ; verify
Distance : 2

182
Tree	Iterator iter = res.entries . iterator () ; compiler
Code	Iterator iter = res.entries . iterator () ; compiler
Distance : 2

183
Tree	Iterator iter = res.entries . iterator () ; String
Code	Iterator iter = res.entries . iterator () ; String
Distance : 2

184
Tree	Iterator iter = res.entries . iterator () ; null
Code	Iterator iter = res.entries . iterator () ; null
Distance : 2

185
Tree	Iterator iter = res.entries . iterator () ; wanted
Code	Iterator iter = res.entries . iterator () ; wanted
Distance : 2

186
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

187
Tree	Iterator iter = res.entries . iterator () ; throw
Code	Iterator iter = res.entries . iterator () ; throw
Distance : 2

188
Tree	Iterator iter = res.entries . iterator () ; super
Code	Iterator iter = res.entries . iterator () ; super
Distance : 2

189
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

190
Tree	Iterator iter = res.entries . iterator () ; long
Code	Iterator iter = res.entries . iterator () ; long
Distance : 2

191
Tree	Iterator iter = res.entries . iterator () ; /
Code	Iterator iter = res.entries . iterator () ; /
Distance : 2

192
Tree	Iterator iter = res.entries . iterator () ; length
Code	Iterator iter = res.entries . iterator () ; length
Distance : 2

193
Tree	Iterator iter = res.entries . iterator () ; TestUtils
Code	Iterator iter = res.entries . iterator () ; TestUtils
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; alpha
Code	Iterator iter = res.entries . iterator () ; alpha
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; instance
Code	Iterator iter = res.entries . iterator () ; instance
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; catch
Code	Iterator iter = res.entries . iterator () ; catch
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Code	Iterator iter = res.entries . iterator () ; LanguageMode.ECMASCRIPT6
Distance : 2

199
Tree	Iterator iter = res.entries . iterator () ; s
Code	Iterator iter = res.entries . iterator () ; s
Distance : 2

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } externs
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } externs
Distance : 5

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } FastMath
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } FastMath
Distance : 5

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } reportCodeChange
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } reportCodeChange
Distance : 5

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } IllegalArgumentException
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } IllegalArgumentException
Distance : 5

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } !=
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } !=
Distance : 5

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } testSame
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } testSame
Distance : 5

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } parent
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } parent
Distance : 5

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } createIllegalArgumentException
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } createIllegalArgumentException
Distance : 5

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } str
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } str
Distance : 5

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } LINE_JOINER
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } LINE_JOINER
Distance : 5

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } assertThat
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } assertThat
Distance : 5

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } invocation
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } invocation
Distance : 5

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ,
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ,
Distance : 5

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } .
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } .
Distance : 5

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } x
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } x
Distance : 5

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } assertEquals
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } assertEquals
Distance : 5

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } T
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } T
Distance : 5

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } []
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } []
Distance : 5

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } throws
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } throws
Distance : 5

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } returnZero
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } returnZero
Distance : 5

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getFirstChild
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getFirstChild
Distance : 5

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } UnivariateFunction
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } UnivariateFunction
Distance : 5

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } expected
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } expected
Distance : 5

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } sb
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } sb
Distance : 5

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } name
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } name
Distance : 5

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } field
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } field
Distance : 5

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } (
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } (
Distance : 5

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } =
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } =
Distance : 5

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } }
Distance : 5

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ()
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ()
Distance : 5

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } {
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } {
Distance : 5

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } new
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } new
Distance : 5

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } STRING_CONSTANT
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } STRING_CONSTANT
Distance : 5

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } NUMBER_CONSTANT
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } NUMBER_CONSTANT
Distance : 5

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } return
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } return
Distance : 5

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } &&
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } &&
Distance : 5

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } assertTrue
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } assertTrue
Distance : 5

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } super
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } super
Distance : 5

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } value
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } value
Distance : 5

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } checkState
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } checkState
Distance : 5

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } int
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } int
Distance : 5

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } i
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } i
Distance : 5

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } return
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } return
Distance : 5

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <blank>
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <blank>
Distance : 5

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ;
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ;
Distance : 5

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } )
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } )
Distance : 5

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } checkArgument
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } checkArgument
Distance : 5

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } t
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } t
Distance : 5

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <s>
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <s>
Distance : 5

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } !
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } !
Distance : 5

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } d
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } d
Distance : 5

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } index
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } index
Distance : 5

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } :
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } :
Distance : 5

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } fail
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } fail
Distance : 5

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } List
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } List
Distance : 5

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Args
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Args
Distance : 5

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } try
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } try
Distance : 5

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getParent
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getParent
Distance : 5

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 4

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

61
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ; }
Distance : 5

62
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

63
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

64
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ; }
Distance : 5

65
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

66
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ; }
Distance : 5

67
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

68
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

69
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

70
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

71
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ; }
Distance : 6

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } node
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } node
Distance : 5

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } isBlock
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } isBlock
Distance : 5

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } setUp
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } setUp
Distance : 5

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } invocations
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } invocations
Distance : 5

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } equals
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } equals
Distance : 5

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } for
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } for
Distance : 5

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Invocation
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Invocation
Distance : 5

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } js
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } js
Distance : 5

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } TestUtilities
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } TestUtilities
Distance : 5

81
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } StrBuilder
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } StrBuilder
Distance : 5

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } reportMatcher
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } reportMatcher
Distance : 5

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } StringBuilder
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } StringBuilder
Distance : 5

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } size
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } size
Distance : 5

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } scope
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } scope
Distance : 5

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } paint
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } paint
Distance : 5

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } append
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } append
Distance : 5

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } result
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } result
Distance : 5

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } nullNotPermitted
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } nullNotPermitted
Distance : 5

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } m
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } m
Distance : 5

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } @
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } @
Distance : 5

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } false
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } false
Distance : 5

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } double
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } double
Distance : 5

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } values
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } values
Distance : 5

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } protected
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } protected
Distance : 5

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } out
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } out
Distance : 5

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } test
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } test
Distance : 5

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } return;
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } return;
Distance : 5

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; }
Distance : 4

100
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } get
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } get
Distance : 5

101
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } >
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } >
Distance : 5

102
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } public
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } public
Distance : 5

103
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } final
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } final
Distance : 5

104
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } this
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } this
Distance : 5

105
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <
Distance : 5

106
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } if
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } if
Distance : 5

107
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ArrayList
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ArrayList
Distance : 5

108
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } fireChangeEvent
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } fireChangeEvent
Distance : 5

109
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getInstance
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getInstance
Distance : 5

110
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } join
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } join
Distance : 5

111
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } JSType
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } JSType
Distance : 5

112
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

113
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ]
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ]
Distance : 5

114
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } length
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } length
Distance : 5

115
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } v
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } v
Distance : 5

116
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Integer
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Integer
Distance : 5

117
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } verify
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } verify
Distance : 5

118
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } null
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } null
Distance : 5

119
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } +
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } +
Distance : 5

120
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } static
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } static
Distance : 5

121
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } setAcceptedLanguage
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } setAcceptedLanguage
Distance : 5

122
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } notifyListeners
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } notifyListeners
Distance : 5

123
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } c
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } c
Distance : 5

124
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } {}
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } {}
Distance : 5

125
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } mock
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } mock
Distance : 5

126
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } true
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } true
Distance : 5

127
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } mode
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } mode
Distance : 5

128
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } *
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } *
Distance : 5

129
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } -
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } -
Distance : 5

130
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } lines
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } lines
Distance : 5

131
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } boolean
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } boolean
Distance : 5

132
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } isEmpty
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } isEmpty
Distance : 5

133
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } char
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } char
Distance : 5

134
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } instant
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } instant
Distance : 5

135
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } else
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } else
Distance : 5

136
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } stream
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } stream
Distance : 5

137
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getMessage
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } getMessage
Distance : 5

138
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } abs
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } abs
Distance : 5

139
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } matcher
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } matcher
Distance : 5

140
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } serialised
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } serialised
Distance : 5

141
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Exception
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Exception
Distance : 5

142
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Preconditions
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Preconditions
Distance : 5

143
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } compiler
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } compiler
Distance : 5

144
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ParamChecks
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ParamChecks
Distance : 5

145
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } array
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } array
Distance : 5

146
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <>
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <>
Distance : 5

147
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } contains
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } contains
Distance : 5

148
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } chrono
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } chrono
Distance : 5

149
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Node
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Node
Distance : 5

150
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } traverseEs6
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } traverseEs6
Distance : 5

151
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } a
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } a
Distance : 5

152
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } LanguageMode.ECMASCRIPT_2015
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } LanguageMode.ECMASCRIPT_2015
Distance : 5

153
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } MutableTimePeriod
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } MutableTimePeriod
Distance : 5

154
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } b
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } b
Distance : 5

155
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } s
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } s
Distance : 5

156
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } isNormalBlock
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } isNormalBlock
Distance : 5

157
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } obj
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } obj
Distance : 5

158
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <=
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } <=
Distance : 5

159
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Double
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Double
Distance : 5

160
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } clone
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } clone
Distance : 5

161
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } f
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } f
Distance : 5

162
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Override
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Override
Distance : 5

163
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } stroke
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } stroke
Distance : 5

164
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Object
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Object
Distance : 5

165
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } String
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } String
Distance : 5

166
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } MathRuntimeException
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } MathRuntimeException
Distance : 5

167
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } n
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } n
Distance : 5

168
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } throw
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } throw
Distance : 5

169
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } catch
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } catch
Distance : 5

170
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } void
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } void
Distance : 5

171
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ==
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ==
Distance : 5

172
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Assert
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Assert
Distance : 5

173
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ?
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ?
Distance : 5

174
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } e
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } e
Distance : 5

175
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Fraction
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Fraction
Distance : 5

176
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } /
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } /
Distance : 5

177
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } long
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } long
Distance : 5

178
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } TestUtils
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } TestUtils
Distance : 5

179
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } [
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } [
Distance : 5

180
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } sqrt
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } sqrt
Distance : 5

181
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } PeriodType
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } PeriodType
Distance : 5

182
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } class
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } class
Distance : 5

183
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } checkNotNull
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } checkNotNull
Distance : 5

184
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } type
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } type
Distance : 5

185
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Math
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Math
Distance : 5

186
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } root
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } root
Distance : 5

187
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } NodeUtil
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } NodeUtil
Distance : 5

188
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } wanted
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } wanted
Distance : 5

189
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } data
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } data
Distance : 5

190
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } add
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } add
Distance : 5

191
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } source
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } source
Distance : 5

192
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ex
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } ex
Distance : 5

193
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } toString
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } toString
Distance : 5

194
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } options
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } options
Distance : 5

195
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } p
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } p
Distance : 5

196
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Test
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Test
Distance : 5

197
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Class
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } Class
Distance : 5

198
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } NodeTraversal
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } NodeTraversal
Distance : 5

199
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ; } mockingProgress
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ; } mockingProgress
Distance : 5

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 4

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Distance : 4

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Distance : 4

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Distance : 4

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 4

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 4

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Distance : 4

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Distance : 5

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Distance : 4

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Distance : 5

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Distance : 4

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Distance : 5

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Distance : 4

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Distance : 4

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Distance : 5

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Distance : 4

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Distance : 4

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Distance : 4

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Distance : 4

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Distance : 5

20
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 5

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Distance : 4

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Distance : 4

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Distance : 5

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Distance : 4

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Distance : 4

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Distance : 5

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Distance : 4

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Distance : 4

29
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 5

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Distance : 4

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Distance : 4

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Distance : 4

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Distance : 5

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Distance : 4

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Distance : 5

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Distance : 4

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Distance : 4

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Distance : 4

39
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Distance : 5

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Distance : 4

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Distance : 5

42
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Distance : 5

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Distance : 5

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Distance : 4

45
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Distance : 5

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Distance : 5

47
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 5

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Distance : 4

49
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Distance : 5

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : NaN ; }
Distance : 4

51
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Distance : 5

52
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : INF ; }
Distance : 5

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : isZero ; }
Distance : 5

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : NaN ; }
Distance : 4

55
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

56
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Distance : 5

57
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Distance : 5

58
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Distance : 5

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? divisor : divisor ; }
Distance : 4

60
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Distance : 5

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? isZero : divisor ; }
Distance : 5

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : isZero ; }
Distance : 5

63
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

64
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 5

65
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Distance : 5

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : NaN ; }
Distance : 4

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : NaN ; }
Distance : 4

68
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Distance : 5

69
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Distance : 5

70
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

71
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 5

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? INF : divisor ; }
Distance : 5

73
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : INF ; }
Distance : 5

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : isZero ; }
Distance : 5

75
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Distance : 6

76
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Distance : 5

77
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 5

78
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Distance : 6

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? INF : divisor ; }
Distance : 5

80
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Distance : 5

81
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : INF ; }
Distance : 5

82
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Distance : 6

83
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Distance : 5

84
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Distance : 6

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : isZero ; }
Distance : 5

86
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Distance : 5

87
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? INF : INF ; }
Distance : 6

88
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Distance : 5

89
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Distance : 5

90
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Distance : 6

91
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Distance : 5

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? isZero : divisor ; }
Distance : 5

93
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Distance : 6

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : divisor ; }
Distance : 5

95
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Distance : 6

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return INF ? divisor : isZero ; }
Distance : 5

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? isZero : divisor ; }
Distance : 5

98
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Distance : 5

99
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Distance : 5

100
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : NaN ; }
Distance : 4

101
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : divisor ; }
Distance : 5

102
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? isZero : INF ; }
Distance : 6

103
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor : INF ; }
Distance : 5

104
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Distance : 5

105
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Distance : 5

106
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? INF : INF ; }
Distance : 6

107
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Distance : 5

108
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : NaN ; }
Distance : 5

109
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Distance : 6

110
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Distance : 5

111
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Distance : 6

112
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? divisor : divisor ; }
Distance : 5

113
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : isZero ; }
Distance : 5

114
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : NaN ; }
Distance : 5

115
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Distance : 5

116
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Distance : 5

117
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Distance : 5

118
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Distance : 5

119
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Distance : 5

120
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? isZero : INF ; }
Distance : 6

121
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : isZero ; }
Distance : 5

122
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Distance : 5

123
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Distance : 6

124
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : isZero ; }
Distance : 5

125
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Distance : 6

126
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Distance : 5

127
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Distance : 5

128
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Distance : 6

129
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Distance : 5

130
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Distance : 5

131
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Distance : 5

132
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Distance : 5

133
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? INF : INF ; }
Distance : 6

134
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : isZero ; }
Distance : 5

135
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Distance : 5

136
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Distance : 6

137
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Distance : 5

138
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Distance : 6

139
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : isZero ; }
Distance : 5

140
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? divisor : divisor ; }
Distance : 5

141
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Distance : 5

142
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Distance : 5

143
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Distance : 5

144
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Distance : 6

145
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Distance : 5

146
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Distance : 5

147
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? isZero : INF ; }
Distance : 6

148
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Distance : 5

149
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? NaN : divisor ; }
Distance : 5

150
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Distance : 5

151
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Distance : 5

152
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Distance : 5

153
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : NaN ; }
Distance : 5

154
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Distance : 5

155
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? INF : divisor ; }
Distance : 5

156
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Distance : 5

157
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Distance : 5

158
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Distance : 6

159
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? INF : NaN ; }
Distance : 5

160
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Distance : 5

161
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Distance : 6

162
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Distance : 5

163
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Distance : 5

164
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Distance : 5

165
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Distance : 6

166
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : divisor ; }
Distance : 5

167
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? NaN : isZero ; }
Distance : 5

168
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? divisor : INF ; }
Distance : 6

169
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Distance : 5

170
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Distance : 6

171
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : divisor ; }
Distance : 5

172
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Distance : 6

173
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Distance : 5

174
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? INF : isZero ; }
Distance : 6

175
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? divisor : INF ; }
Distance : 6

176
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Distance : 6

177
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor : NaN ; }
Distance : 5

178
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? isZero : NaN ; }
Distance : 5

179
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? INF : NaN ; }
Distance : 5

180
Tree	if ( INF == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Distance : 5

181
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Distance : 6

182
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? INF : divisor ; }
Distance : 6

183
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Distance : 6

184
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Distance : 5

185
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? isZero : isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? isZero : isZero ; }
Distance : 6

186
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? INF : divisor ; }
Distance : 5

187
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? INF : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? INF : NaN ; }
Distance : 5

188
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Distance : 6

189
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor : isZero ; }
Distance : 5

190
Tree	if ( isZero == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return INF ? isZero : isZero ; }
Distance : 6

191
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? INF : isZero ; }
Distance : 6

192
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? isZero : NaN ; }
Distance : 5

193
Tree	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return INF ? INF : divisor ; }
Distance : 6

194
Tree	if ( INF == NUMBER_CONSTANT ) { return isZero ? isZero : isZero ; }
Code	if ( INF == NUMBER_CONSTANT ) { return isZero ? isZero : isZero ; }
Distance : 6

195
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? divisor : divisor ; }
Distance : 5

196
Tree	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return INF ? isZero : divisor ; }
Distance : 6

197
Tree	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Distance : 5

198
Tree	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Code	if ( INF == NUMBER_CONSTANT ) { return divisor ? NaN : divisor ; }
Distance : 5

199
Tree	if ( isZero == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return divisor ? divisor : INF ; }
Distance : 6

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } v
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } v
Distance : 5

1
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } (
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } (
Distance : 5

2
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } )
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } )
Distance : 5

3
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } serialised
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } serialised
Distance : 5

4
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ArrayList
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ArrayList
Distance : 5

5
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } parent
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } parent
Distance : 5

6
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } boolean
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } boolean
Distance : 5

7
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } paint
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } paint
Distance : 5

8
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } void
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } void
Distance : 5

9
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } assertEquals
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } assertEquals
Distance : 5

10
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } IllegalArgumentException
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } IllegalArgumentException
Distance : 5

11
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } !
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } !
Distance : 5

12
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } i
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } i
Distance : 5

13
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } false
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } false
Distance : 5

14
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } test
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } test
Distance : 5

15
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } double
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } double
Distance : 5

16
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } int
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } int
Distance : 5

17
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Preconditions
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Preconditions
Distance : 5

18
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } &&
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } &&
Distance : 5

19
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } value
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } value
Distance : 5

20
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } obj
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } obj
Distance : 5

21
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } isNormalBlock
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } isNormalBlock
Distance : 5

22
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } (
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } (
Distance : 5

23
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } contains
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } contains
Distance : 5

24
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <blank>
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <blank>
Distance : 5

25
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } x
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } x
Distance : 5

26
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } getInstance
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } getInstance
Distance : 5

27
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } t
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } t
Distance : 5

28
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Node
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Node
Distance : 5

29
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } expected
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } expected
Distance : 5

30
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } reportCodeChange
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } reportCodeChange
Distance : 5

31
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } join
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } join
Distance : 5

32
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } assertThat
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } assertThat
Distance : 5

33
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } invocation
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } invocation
Distance : 5

34
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } FastMath
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } FastMath
Distance : 5

35
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } add
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } add
Distance : 5

36
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } checkArgument
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } checkArgument
Distance : 5

37
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } name
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } name
Distance : 5

38
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } @
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } @
Distance : 5

39
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } str
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } str
Distance : 5

40
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } *
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } *
Distance : 5

41
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } m
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } m
Distance : 5

42
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } try
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } try
Distance : 5

43
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } LINE_JOINER
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } LINE_JOINER
Distance : 5

44
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } fireChangeEvent
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } fireChangeEvent
Distance : 5

45
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } testSame
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } testSame
Distance : 5

46
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } createIllegalArgumentException
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } createIllegalArgumentException
Distance : 5

47
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <s>
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <s>
Distance : 5

48
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } type
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } type
Distance : 5

49
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } nullNotPermitted
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } nullNotPermitted
Distance : 5

50
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } matcher
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } matcher
Distance : 5

51
Tree	if ( divisor.isZero ) { return NaN ? isZero : INF ; }
Code	if ( divisor.isZero ) { return NaN ? isZero : INF ; }
Distance : 4

52
Tree	if ( divisor.isZero ) { return NaN ? INF : INF ; }
Code	if ( divisor.isZero ) { return NaN ? INF : INF ; }
Distance : 4

53
Tree	if ( divisor.isZero ) { return isZero ? NaN : INF ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : INF ; }
Distance : 4

54
Tree	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Distance : 4

55
Tree	if ( divisor.isZero ) { return INF ? NaN : INF ; }
Code	if ( divisor.isZero ) { return INF ? NaN : INF ; }
Distance : 4

56
Tree	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Distance : 4

57
Tree	if ( divisor.isZero ) { return NaN ? NaN : isZero ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : isZero ; }
Distance : 4

58
Tree	if ( divisor.isZero ) { return INF ? isZero : INF ; }
Code	if ( divisor.isZero ) { return INF ? isZero : INF ; }
Distance : 5

59
Tree	if ( divisor.isZero ) { return INF ? INF : isZero ; }
Code	if ( divisor.isZero ) { return INF ? INF : isZero ; }
Distance : 5

60
Tree	if ( divisor.isZero ) { return NaN ? isZero : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? isZero : NaN ; }
Distance : 4

61
Tree	if ( divisor.isZero ) { return NaN ? INF : isZero ; }
Code	if ( divisor.isZero ) { return NaN ? INF : isZero ; }
Distance : 4

62
Tree	if ( divisor.isZero ) { return isZero ? NaN : isZero ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : isZero ; }
Distance : 4

63
Tree	if ( divisor.isZero ) { return isZero ? isZero : INF ; }
Code	if ( divisor.isZero ) { return isZero ? isZero : INF ; }
Distance : 5

64
Tree	if ( divisor.isZero ) { return NaN ? isZero : isZero ; }
Code	if ( divisor.isZero ) { return NaN ? isZero : isZero ; }
Distance : 4

65
Tree	if ( divisor.isZero ) { return INF ? INF : NaN ; }
Code	if ( divisor.isZero ) { return INF ? INF : NaN ; }
Distance : 4

66
Tree	if ( divisor.isZero ) { return INF ? isZero : NaN ; }
Code	if ( divisor.isZero ) { return INF ? isZero : NaN ; }
Distance : 4

67
Tree	if ( divisor.isZero ) { return isZero ? INF : NaN ; }
Code	if ( divisor.isZero ) { return isZero ? INF : NaN ; }
Distance : 4

68
Tree	if ( divisor.isZero ) { return INF ? isZero : isZero ; }
Code	if ( divisor.isZero ) { return INF ? isZero : isZero ; }
Distance : 5

69
Tree	if ( divisor.isZero ) { return isZero ? isZero : NaN ; }
Code	if ( divisor.isZero ) { return isZero ? isZero : NaN ; }
Distance : 4

70
Tree	if ( divisor.isZero ) { return isZero ? INF : isZero ; }
Code	if ( divisor.isZero ) { return isZero ? INF : isZero ; }
Distance : 5

71
Tree	if ( divisor.isZero ) { return isZero ? isZero : isZero ; }
Code	if ( divisor.isZero ) { return isZero ? isZero : isZero ; }
Distance : 5

72
Tree	if ( divisor.isZero ) { return INF ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return INF ? NaN : NaN ; }
Distance : 4

73
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } chrono
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } chrono
Distance : 5

74
Tree	if ( divisor.isZero ) { return INF ? INF : INF ; }
Code	if ( divisor.isZero ) { return INF ? INF : INF ; }
Distance : 5

75
Tree	if ( divisor.isZero ) { return INF ? NaN : isZero ; }
Code	if ( divisor.isZero ) { return INF ? NaN : isZero ; }
Distance : 4

76
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } instant
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } instant
Distance : 5

77
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } checkState
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } checkState
Distance : 5

78
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } !=
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } !=
Distance : 5

79
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } traverseEs6
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } traverseEs6
Distance : 5

80
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ParamChecks
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ParamChecks
Distance : 5

81
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } super
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } super
Distance : 5

82
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } TestUtilities
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } TestUtilities
Distance : 5

83
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Invocation
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Invocation
Distance : 5

84
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } equals
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } equals
Distance : 5

85
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } assertTrue
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } assertTrue
Distance : 5

86
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } /
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } /
Distance : 5

87
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } externs
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } externs
Distance : 5

88
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } d
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } d
Distance : 5

89
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } MathRuntimeException
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } MathRuntimeException
Distance : 5

90
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } {}
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } {}
Distance : 5

91
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } mode
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } mode
Distance : 5

92
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } mock
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } mock
Distance : 5

93
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Object
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Object
Distance : 5

94
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Override
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Override
Distance : 5

95
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } for
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } for
Distance : 5

96
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } class
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } class
Distance : 5

97
Tree	if ( divisor.isZero ) { return NaN ? INF : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? INF : NaN ; }
Distance : 4

98
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } getMessage
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } getMessage
Distance : 5

99
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Distance : 4

100
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } protected
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } protected
Distance : 5

101
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Args
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Args
Distance : 5

102
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } array
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } array
Distance : 5

103
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } throw
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } throw
Distance : 5

104
Tree	if ( divisor.isZero ) { return isZero ? INF : INF ; }
Code	if ( divisor.isZero ) { return isZero ? INF : INF ; }
Distance : 5

105
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } JSType
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } JSType
Distance : 5

106
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } toString
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } toString
Distance : 5

107
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } :
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } :
Distance : 5

108
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } p
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } p
Distance : 5

109
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } root
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } root
Distance : 5

110
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } wanted
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } wanted
Distance : 5

111
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Math
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Math
Distance : 5

112
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } options
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } options
Distance : 5

113
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } this
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } this
Distance : 5

114
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } return
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } return
Distance : 5

115
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } source
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } source
Distance : 5

116
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } result
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } result
Distance : 5

117
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ()
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ()
Distance : 5

118
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ,
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ,
Distance : 5

119
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } []
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } []
Distance : 5

120
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } e
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } e
Distance : 5

121
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } +
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } +
Distance : 5

122
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } public
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } public
Distance : 5

123
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } null
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } null
Distance : 5

124
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } String
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } String
Distance : 5

125
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } n
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } n
Distance : 5

126
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } compiler
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } compiler
Distance : 5

127
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } catch
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } catch
Distance : 5

128
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } STRING_CONSTANT
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } STRING_CONSTANT
Distance : 5

129
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } =
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } =
Distance : 5

130
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } {
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } {
Distance : 5

131
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } }
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } }
Distance : 5

132
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } .
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } .
Distance : 5

133
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ;
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ;
Distance : 5

134
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } new
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } new
Distance : 5

135
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } NUMBER_CONSTANT
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } NUMBER_CONSTANT
Distance : 5

136
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } abs
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } abs
Distance : 5

137
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } final
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } final
Distance : 5

138
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } true
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } true
Distance : 5

139
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } MutableTimePeriod
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } MutableTimePeriod
Distance : 5

140
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } a
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } a
Distance : 5

141
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } b
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } b
Distance : 5

142
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } size
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } size
Distance : 5

143
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } stroke
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } stroke
Distance : 5

144
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <=
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <=
Distance : 5

145
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } s
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } s
Distance : 5

146
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } PeriodType
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } PeriodType
Distance : 5

147
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } checkNotNull
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } checkNotNull
Distance : 5

148
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } TestUtils
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } TestUtils
Distance : 5

149
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <
Distance : 5

150
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } length
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } length
Distance : 5

151
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ?
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ?
Distance : 5

152
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Assert
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Assert
Distance : 5

153
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ]
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ]
Distance : 5

154
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } -
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } -
Distance : 5

155
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Integer
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Integer
Distance : 5

156
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } T
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } T
Distance : 5

157
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } [
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } [
Distance : 5

158
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } if
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } if
Distance : 5

159
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } lines
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } lines
Distance : 5

160
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } c
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } c
Distance : 5

161
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Test
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Test
Distance : 5

162
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } notifyListeners
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } notifyListeners
Distance : 5

163
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Exception
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Exception
Distance : 5

164
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } >
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } >
Distance : 5

165
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Class
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Class
Distance : 5

166
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } static
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } static
Distance : 5

167
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } long
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } long
Distance : 5

168
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Fraction
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } Fraction
Distance : 5

169
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } LanguageMode.ECMASCRIPT_2015
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } LanguageMode.ECMASCRIPT_2015
Distance : 5

170
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } StringBuilder
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } StringBuilder
Distance : 5

171
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } verify
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } verify
Distance : 5

172
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } mockingProgress
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } mockingProgress
Distance : 5

173
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } setUp
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } setUp
Distance : 5

174
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } stream
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } stream
Distance : 5

175
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } values
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } values
Distance : 5

176
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } invocations
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } invocations
Distance : 5

177
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } NodeUtil
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } NodeUtil
Distance : 5

178
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } data
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } data
Distance : 5

179
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ex
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ex
Distance : 5

180
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } NodeTraversal
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } NodeTraversal
Distance : 5

181
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } List
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } List
Distance : 5

182
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } reportMatcher
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } reportMatcher
Distance : 5

183
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } field
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } field
Distance : 5

184
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } js
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } js
Distance : 5

185
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } isEmpty
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } isEmpty
Distance : 5

186
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } node
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } node
Distance : 5

187
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } getParent
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } getParent
Distance : 5

188
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } index
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } index
Distance : 5

189
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } out
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } out
Distance : 5

190
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } return;
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } return;
Distance : 5

191
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } char
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } char
Distance : 5

192
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } get
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } get
Distance : 5

193
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <>
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } <>
Distance : 5

194
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } setAcceptedLanguage
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } setAcceptedLanguage
Distance : 5

195
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } f
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } f
Distance : 5

196
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } fail
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } fail
Distance : 5

197
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ==
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } ==
Distance : 5

198
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } StrBuilder
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } StrBuilder
Distance : 5

199
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; } else
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; } else
Distance : 5

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{
Code	{
Distance : 11

1
Tree	clazz
Code	clazz
Distance : 12

2
Tree	cal
Code	cal
Distance : 12

3
Tree	FParser
Code	FParser
Distance : 12

4
Tree	CharSequenceUtils
Code	CharSequenceUtils
Distance : 12

5
Tree	srcDeclaration
Code	srcDeclaration
Distance : 12

6
Tree	fnNode
Code	fnNode
Distance : 12

7
Tree	MathUtils
Code	MathUtils
Distance : 12

8
Tree	Math
Code	Math
Distance : 12

9
Tree	assertNotEquals
Code	assertNotEquals
Distance : 12

10
Tree	traverse
Code	traverse
Distance : 12

11
Tree	DateParser
Code	DateParser
Distance : 12

12
Tree	putBooleanProp
Code	putBooleanProp
Distance : 12

13
Tree	RegionFactory
Code	RegionFactory
Distance : 12

14
Tree	assertChanges
Code	assertChanges
Distance : 12

15
Tree	byteBuddy
Code	byteBuddy
Distance : 12

16
Tree	clazz
Code	clazz
Distance : 12

17
Tree	CharSequenceUtils
Code	CharSequenceUtils
Distance : 12

18
Tree	assertNotEquals
Code	assertNotEquals
Distance : 12

19
Tree	Arguments
Code	Arguments
Distance : 12

20
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 12

21
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 12

22
Tree	addMessage
Code	addMessage
Distance : 12

23
Tree	replaceChild
Code	replaceChild
Distance : 12

24
Tree	putBooleanProp
Code	putBooleanProp
Distance : 12

25
Tree	NoWeekyearZeroField
Code	NoWeekyearZeroField
Distance : 12

26
Tree	ParamChecks
Code	ParamChecks
Distance : 12

27
Tree	YearWeekType
Code	YearWeekType
Distance : 12

28
Tree	UnivariateRealSolver
Code	UnivariateRealSolver
Distance : 12

29
Tree	RenameLabels
Code	RenameLabels
Distance : 12

30
Tree	parent
Code	parent
Distance : 12

31
Tree	YearMonthType
Code	YearMonthType
Distance : 12

32
Tree	YearWeekType
Code	YearWeekType
Distance : 12

33
Tree	UnivariateRealSolver
Code	UnivariateRealSolver
Distance : 12

34
Tree	List
Code	List
Distance : 12

35
Tree	RenameLabels
Code	RenameLabels
Distance : 12

36
Tree	{
Code	{
Distance : 11

37
Tree	FParser
Code	FParser
Distance : 12

38
Tree	HoldingAReference
Code	HoldingAReference
Distance : 12

39
Tree	srcDeclaration
Code	srcDeclaration
Distance : 12

40
Tree	fnNode
Code	fnNode
Distance : 12

41
Tree	MathUtils
Code	MathUtils
Distance : 12

42
Tree	Math
Code	Math
Distance : 12

43
Tree	testModules
Code	testModules
Distance : 12

44
Tree	DateParser
Code	DateParser
Distance : 12

45
Tree	put
Code	put
Distance : 12

46
Tree	getParent
Code	getParent
Distance : 12

47
Tree	RegionFactory
Code	RegionFactory
Distance : 12

48
Tree	assertChanges
Code	assertChanges
Distance : 12

49
Tree	n
Code	n
Distance : 12

50
Tree	compiler
Code	compiler
Distance : 12

51
Tree	testWarning
Code	testWarning
Distance : 12

52
Tree	NodeTraversal
Code	NodeTraversal
Distance : 12

53
Tree	isName
Code	isName
Distance : 12

54
Tree	replaceWith
Code	replaceWith
Distance : 12

55
Tree	void
Code	void
Distance : 12

56
Tree	)
Code	)
Distance : 11

57
Tree	capturingMatcher
Code	capturingMatcher
Distance : 12

58
Tree	long
Code	long
Distance : 12

59
Tree	long
Code	long
Distance : 12

60
Tree	assertNoPureCalls
Code	assertNoPureCalls
Distance : 12

61
Tree	true
Code	true
Distance : 12

62
Tree	parent
Code	parent
Distance : 12

63
Tree	while
Code	while
Distance : 12

64
Tree	put
Code	put
Distance : 12

65
Tree	while
Code	while
Distance : 12

66
Tree	arrayType
Code	arrayType
Distance : 12

67
Tree	true
Code	true
Distance : 12

68
Tree	assertNoPureCalls
Code	assertNoPureCalls
Distance : 12

69
Tree	YearMonthType
Code	YearMonthType
Distance : 12

70
Tree	HashUtils
Code	HashUtils
Distance : 12

71
Tree	capturingMatcher
Code	capturingMatcher
Distance : 12

72
Tree	void
Code	void
Distance : 12

73
Tree	byteBuddy
Code	byteBuddy
Distance : 12

74
Tree	FunctionScopeBuilder
Code	FunctionScopeBuilder
Distance : 12

75
Tree	Collection
Code	Collection
Distance : 12

76
Tree	TestEmptySubObject
Code	TestEmptySubObject
Distance : 12

77
Tree	IR
Code	IR
Distance : 12

78
Tree	Arguments
Code	Arguments
Distance : 12

79
Tree	addMessage
Code	addMessage
Distance : 12

80
Tree	toUpperCase
Code	toUpperCase
Distance : 12

81
Tree	HashUtils
Code	HashUtils
Distance : 12

82
Tree	)
Code	)
Distance : 11

83
Tree	n
Code	n
Distance : 12

84
Tree	FunctionScopeBuilder
Code	FunctionScopeBuilder
Distance : 12

85
Tree	testWarning
Code	testWarning
Distance : 12

86
Tree	Collection
Code	Collection
Distance : 12

87
Tree	TestEmptySubObject
Code	TestEmptySubObject
Distance : 12

88
Tree	IR
Code	IR
Distance : 12

89
Tree	NodeTraversal
Code	NodeTraversal
Distance : 12

90
Tree	isName
Code	isName
Distance : 12

91
Tree	replaceWith
Code	replaceWith
Distance : 12

92
Tree	toUpperCase
Code	toUpperCase
Distance : 12

93
Tree	compiler
Code	compiler
Distance : 12

94
Tree	Class
Code	Class
Distance : 12

95
Tree	ParamChecks
Code	ParamChecks
Distance : 12

96
Tree	checkState
Code	checkState
Distance : 12

97
Tree	>
Code	>
Distance : 12

98
Tree	static
Code	static
Distance : 12

99
Tree	checkArgument
Code	checkArgument
Distance : 12

100
Tree	==
Code	==
Distance : 12

101
Tree	:
Code	:
Distance : 12

102
Tree	==
Code	==
Distance : 12

103
Tree	}
Code	}
Distance : 11

104
Tree	:
Code	:
Distance : 12

105
Tree	}
Code	}
Distance : 11

106
Tree	;
Code	;
Distance : 11

107
Tree	;
Code	;
Distance : 11

108
Tree	checkArgument
Code	checkArgument
Distance : 12

109
Tree	+
Code	+
Distance : 12

110
Tree	+
Code	+
Distance : 12

111
Tree	Preconditions
Code	Preconditions
Distance : 12

112
Tree	protected
Code	protected
Distance : 12

113
Tree	assertArrayEquals
Code	assertArrayEquals
Distance : 12

114
Tree	class
Code	class
Distance : 12

115
Tree	Preconditions
Code	Preconditions
Distance : 12

116
Tree	protected
Code	protected
Distance : 12

117
Tree	class
Code	class
Distance : 12

118
Tree	]
Code	]
Distance : 12

119
Tree	@
Code	@
Distance : 12

120
Tree	]
Code	]
Distance : 12

121
Tree	assertArrayEquals
Code	assertArrayEquals
Distance : 12

122
Tree	static
Code	static
Distance : 12

123
Tree	>
Code	>
Distance : 12

124
Tree	=
Code	=
Distance : 12

125
Tree	public
Code	public
Distance : 12

126
Tree	public
Code	public
Distance : 12

127
Tree	.
Code	.
Distance : 12

128
Tree	if
Code	if
Distance : 12

129
Tree	return
Code	return
Distance : 12

130
Tree	.
Code	.
Distance : 12

131
Tree	if
Code	if
Distance : 12

132
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 12

133
Tree	return
Code	return
Distance : 12

134
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 12

135
Tree	catch
Code	catch
Distance : 12

136
Tree	catch
Code	catch
Distance : 12

137
Tree	private
Code	private
Distance : 12

138
Tree	&&
Code	&&
Distance : 12

139
Tree	private
Code	private
Distance : 12

140
Tree	&&
Code	&&
Distance : 12

141
Tree	try
Code	try
Distance : 12

142
Tree	try
Code	try
Distance : 12

143
Tree	AbstractScope
Code	AbstractScope
Distance : 12

144
Tree	final
Code	final
Distance : 12

145
Tree	AbstractScope
Code	AbstractScope
Distance : 12

146
Tree	final
Code	final
Distance : 12

147
Tree	{}
Code	{}
Distance : 12

148
Tree	=
Code	=
Distance : 12

149
Tree	{}
Code	{}
Distance : 12

150
Tree	null
Code	null
Distance : 12

151
Tree	NoWeekyearZeroField
Code	NoWeekyearZeroField
Distance : 12

152
Tree	@
Code	@
Distance : 12

153
Tree	Map
Code	Map
Distance : 12

154
Tree	new
Code	new
Distance : 12

155
Tree	String
Code	String
Distance : 12

156
Tree	char
Code	char
Distance : 12

157
Tree	new
Code	new
Distance : 12

158
Tree	ReadableDuration
Code	ReadableDuration
Distance : 12

159
Tree	String
Code	String
Distance : 12

160
Tree	source
Code	source
Distance : 12

161
Tree	super();
Code	super();
Distance : 12

162
Tree	assertEquals
Code	assertEquals
Distance : 12

163
Tree	ReadableDuration
Code	ReadableDuration
Distance : 12

164
Tree	checkState
Code	checkState
Distance : 12

165
Tree	source
Code	source
Distance : 12

166
Tree	assertEquals
Code	assertEquals
Distance : 12

167
Tree	Class
Code	Class
Distance : 12

168
Tree	crossP
Code	crossP
Distance : 12

169
Tree	getParent
Code	getParent
Distance : 12

170
Tree	crossP
Code	crossP
Distance : 12

171
Tree	GlobalScopeBuilder
Code	GlobalScopeBuilder
Distance : 12

172
Tree	arrayType
Code	arrayType
Distance : 12

173
Tree	super();
Code	super();
Distance : 12

174
Tree	for
Code	for
Distance : 12

175
Tree	arguments
Code	arguments
Distance : 12

176
Tree	boolean
Code	boolean
Distance : 12

177
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 12

178
Tree	/
Code	/
Distance : 12

179
Tree	for
Code	for
Distance : 12

180
Tree	arguments
Code	arguments
Distance : 12

181
Tree	()
Code	()
Distance : 12

182
Tree	boolean
Code	boolean
Distance : 12

183
Tree	Iterable
Code	Iterable
Distance : 12

184
Tree	Map
Code	Map
Distance : 12

185
Tree	char
Code	char
Distance : 12

186
Tree	null
Code	null
Distance : 12

187
Tree	()
Code	()
Distance : 12

188
Tree	GlobalScopeBuilder
Code	GlobalScopeBuilder
Distance : 12

189
Tree	Iterable
Code	Iterable
Distance : 12

190
Tree	/
Code	/
Distance : 12

191
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 12

192
Tree	traverse
Code	traverse
Distance : 12

193
Tree	List
Code	List
Distance : 12

194
Tree	replaceChild
Code	replaceChild
Distance : 12

195
Tree	other
Code	other
Distance : 12

196
Tree	clusters
Code	clusters
Distance : 12

197
Tree	abstract
Code	abstract
Distance : 12

198
Tree	groupIndex
Code	groupIndex
Distance : 12

199
Tree	cal
Code	cal
Distance : 12

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{
Code	{
Distance : 13

1
Tree	ReadableDuration
Code	ReadableDuration
Distance : 14

2
Tree	GlobalScopeBuilder
Code	GlobalScopeBuilder
Distance : 14

3
Tree	YearWeekType
Code	YearWeekType
Distance : 14

4
Tree	Iterable
Code	Iterable
Distance : 14

5
Tree	@
Code	@
Distance : 14

6
Tree	for
Code	for
Distance : 14

7
Tree	()
Code	()
Distance : 14

8
Tree	boolean
Code	boolean
Distance : 14

9
Tree	source
Code	source
Distance : 14

10
Tree	UnivariateRealSolver
Code	UnivariateRealSolver
Distance : 14

11
Tree	NoWeekyearZeroField
Code	NoWeekyearZeroField
Distance : 14

12
Tree	crossP
Code	crossP
Distance : 14

13
Tree	checkState
Code	checkState
Distance : 14

14
Tree	String
Code	String
Distance : 14

15
Tree	char
Code	char
Distance : 14

16
Tree	]
Code	]
Distance : 14

17
Tree	getParent
Code	getParent
Distance : 14

18
Tree	new
Code	new
Distance : 14

19
Tree	null
Code	null
Distance : 14

20
Tree	/
Code	/
Distance : 14

21
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 14

22
Tree	arguments
Code	arguments
Distance : 14

23
Tree	ReadableDuration
Code	ReadableDuration
Distance : 14

24
Tree	Map
Code	Map
Distance : 14

25
Tree	GlobalScopeBuilder
Code	GlobalScopeBuilder
Distance : 14

26
Tree	Iterable
Code	Iterable
Distance : 14

27
Tree	assertEquals
Code	assertEquals
Distance : 14

28
Tree	@
Code	@
Distance : 14

29
Tree	RenameLabels
Code	RenameLabels
Distance : 14

30
Tree	parent
Code	parent
Distance : 14

31
Tree	{
Code	{
Distance : 13

32
Tree	byteBuddy
Code	byteBuddy
Distance : 14

33
Tree	TestEmptySubObject
Code	TestEmptySubObject
Distance : 14

34
Tree	Math
Code	Math
Distance : 14

35
Tree	YearWeekType
Code	YearWeekType
Distance : 14

36
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 14

37
Tree	FunctionScopeBuilder
Code	FunctionScopeBuilder
Distance : 14

38
Tree	toUpperCase
Code	toUpperCase
Distance : 14

39
Tree	capturingMatcher
Code	capturingMatcher
Distance : 14

40
Tree	assertNotEquals
Code	assertNotEquals
Distance : 14

41
Tree	arrayType
Code	arrayType
Distance : 14

42
Tree	()
Code	()
Distance : 14

43
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 14

44
Tree	while
Code	while
Distance : 14

45
Tree	UnivariateRealSolver
Code	UnivariateRealSolver
Distance : 14

46
Tree	Class
Code	Class
Distance : 14

47
Tree	NoWeekyearZeroField
Code	NoWeekyearZeroField
Distance : 14

48
Tree	ParamChecks
Code	ParamChecks
Distance : 14

49
Tree	assertEquals
Code	assertEquals
Distance : 14

50
Tree	assertNoPureCalls
Code	assertNoPureCalls
Distance : 14

51
Tree	n
Code	n
Distance : 14

52
Tree	put
Code	put
Distance : 14

53
Tree	YearMonthType
Code	YearMonthType
Distance : 14

54
Tree	super();
Code	super();
Distance : 14

55
Tree	getParent
Code	getParent
Distance : 14

56
Tree	new
Code	new
Distance : 14

57
Tree	source
Code	source
Distance : 14

58
Tree	for
Code	for
Distance : 14

59
Tree	Class
Code	Class
Distance : 14

60
Tree	crossP
Code	crossP
Distance : 14

61
Tree	=
Code	=
Distance : 14

62
Tree	&&
Code	&&
Distance : 14

63
Tree	>
Code	>
Distance : 14

64
Tree	{}
Code	{}
Distance : 14

65
Tree	static
Code	static
Distance : 14

66
Tree	checkArgument
Code	checkArgument
Distance : 14

67
Tree	try
Code	try
Distance : 14

68
Tree	final
Code	final
Distance : 14

69
Tree	AbstractScope
Code	AbstractScope
Distance : 14

70
Tree	private
Code	private
Distance : 14

71
Tree	catch
Code	catch
Distance : 14

72
Tree	if
Code	if
Distance : 14

73
Tree	&&
Code	&&
Distance : 14

74
Tree	return
Code	return
Distance : 14

75
Tree	try
Code	try
Distance : 14

76
Tree	final
Code	final
Distance : 14

77
Tree	boolean
Code	boolean
Distance : 14

78
Tree	AbstractScope
Code	AbstractScope
Distance : 14

79
Tree	private
Code	private
Distance : 14

80
Tree	catch
Code	catch
Distance : 14

81
Tree	if
Code	if
Distance : 14

82
Tree	return
Code	return
Distance : 14

83
Tree	.
Code	.
Distance : 14

84
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 14

85
Tree	.
Code	.
Distance : 14

86
Tree	public
Code	public
Distance : 14

87
Tree	public
Code	public
Distance : 14

88
Tree	:
Code	:
Distance : 14

89
Tree	checkArgument
Code	checkArgument
Distance : 14

90
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 14

91
Tree	static
Code	static
Distance : 14

92
Tree	}
Code	}
Distance : 13

93
Tree	String
Code	String
Distance : 14

94
Tree	Preconditions
Code	Preconditions
Distance : 14

95
Tree	char
Code	char
Distance : 14

96
Tree	protected
Code	protected
Distance : 14

97
Tree	]
Code	]
Distance : 14

98
Tree	/
Code	/
Distance : 14

99
Tree	;
Code	;
Distance : 13

100
Tree	arguments
Code	arguments
Distance : 14

101
Tree	Map
Code	Map
Distance : 14

102
Tree	class
Code	class
Distance : 14

103
Tree	+
Code	+
Distance : 14

104
Tree	assertArrayEquals
Code	assertArrayEquals
Distance : 14

105
Tree	null
Code	null
Distance : 14

106
Tree	}
Code	}
Distance : 13

107
Tree	==
Code	==
Distance : 14

108
Tree	==
Code	==
Distance : 14

109
Tree	assertArrayEquals
Code	assertArrayEquals
Distance : 14

110
Tree	+
Code	+
Distance : 14

111
Tree	>
Code	>
Distance : 14

112
Tree	class
Code	class
Distance : 14

113
Tree	{}
Code	{}
Distance : 14

114
Tree	;
Code	;
Distance : 13

115
Tree	=
Code	=
Distance : 14

116
Tree	:
Code	:
Distance : 14

117
Tree	protected
Code	protected
Distance : 14

118
Tree	Preconditions
Code	Preconditions
Distance : 14

119
Tree	cal
Code	cal
Distance : 14

120
Tree	RunnerFactory
Code	RunnerFactory
Distance : 14

121
Tree	testSame
Code	testSame
Distance : 14

122
Tree	srcDeclaration
Code	srcDeclaration
Distance : 14

123
Tree	abstract
Code	abstract
Distance : 14

124
Tree	node
Code	node
Distance : 14

125
Tree	UnpaddedNumberField
Code	UnpaddedNumberField
Distance : 14

126
Tree	byteBuddy
Code	byteBuddy
Distance : 14

127
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 14

128
Tree	addMessage
Code	addMessage
Distance : 14

129
Tree	Interval
Code	Interval
Distance : 14

130
Tree	mock
Code	mock
Distance : 14

131
Tree	FunctionScopeBuilder
Code	FunctionScopeBuilder
Distance : 14

132
Tree	replaceChild
Code	replaceChild
Distance : 14

133
Tree	returnString
Code	returnString
Distance : 14

134
Tree	scopes
Code	scopes
Distance : 14

135
Tree	TestEmptySubObject
Code	TestEmptySubObject
Distance : 14

136
Tree	newInitializer
Code	newInitializer
Distance : 14

137
Tree	Arguments
Code	Arguments
Distance : 14

138
Tree	isMultiline
Code	isMultiline
Distance : 14

139
Tree	toUpperCase
Code	toUpperCase
Distance : 14

140
Tree	<
Code	<
Distance : 14

141
Tree	replaceWith
Code	replaceWith
Distance : 14

142
Tree	currentModule.importsByLongRequiredName
Code	currentModule.importsByLongRequiredName
Distance : 14

143
Tree	timeZone
Code	timeZone
Distance : 14

144
Tree	Point2D
Code	Point2D
Distance : 14

145
Tree	setField
Code	setField
Distance : 14

146
Tree	TwoDigitNumberField
Code	TwoDigitNumberField
Distance : 14

147
Tree	DateParser
Code	DateParser
Distance : 14

148
Tree	CharMatcher
Code	CharMatcher
Distance : 14

149
Tree	RuleSet
Code	RuleSet
Distance : 14

150
Tree	true
Code	true
Distance : 14

151
Tree	traverse
Code	traverse
Distance : 14

152
Tree	returnNull
Code	returnNull
Distance : 14

153
Tree	fieldClass
Code	fieldClass
Distance : 14

154
Tree	isRoot
Code	isRoot
Distance : 14

155
Tree	fnNode
Code	fnNode
Distance : 14

156
Tree	isName
Code	isName
Distance : 14

157
Tree	capturingMatcher
Code	capturingMatcher
Distance : 14

158
Tree	Math
Code	Math
Distance : 14

159
Tree	)
Code	)
Distance : 13

160
Tree	DateParser
Code	DateParser
Distance : 14

161
Tree	Arguments
Code	Arguments
Distance : 14

162
Tree	replaceWith
Code	replaceWith
Distance : 14

163
Tree	super();
Code	super();
Distance : 14

164
Tree	compiler
Code	compiler
Distance : 14

165
Tree	Object
Code	Object
Distance : 14

166
Tree	RegionFactory
Code	RegionFactory
Distance : 14

167
Tree	YearMonthType
Code	YearMonthType
Distance : 14

168
Tree	FParser
Code	FParser
Distance : 14

169
Tree	testWarning
Code	testWarning
Distance : 14

170
Tree	put
Code	put
Distance : 14

171
Tree	parent
Code	parent
Distance : 14

172
Tree	n
Code	n
Distance : 14

173
Tree	void
Code	void
Distance : 14

174
Tree	List
Code	List
Distance : 14

175
Tree	ParamChecks
Code	ParamChecks
Distance : 14

176
Tree	NodeTraversal
Code	NodeTraversal
Distance : 14

177
Tree	clazz
Code	clazz
Distance : 14

178
Tree	clusters
Code	clusters
Distance : 14

179
Tree	newVar
Code	newVar
Distance : 14

180
Tree	putBooleanProp
Code	putBooleanProp
Distance : 14

181
Tree	triple
Code	triple
Distance : 14

182
Tree	assertNoPureCalls
Code	assertNoPureCalls
Distance : 14

183
Tree	IR
Code	IR
Distance : 14

184
Tree	CharSequenceUtils
Code	CharSequenceUtils
Distance : 14

185
Tree	Collection
Code	Collection
Distance : 14

186
Tree	true
Code	true
Distance : 14

187
Tree	RenameLabels
Code	RenameLabels
Distance : 14

188
Tree	assertNotEquals
Code	assertNotEquals
Distance : 14

189
Tree	HoldingAReference
Code	HoldingAReference
Distance : 14

190
Tree	arrayType
Code	arrayType
Distance : 14

191
Tree	assertChanges
Code	assertChanges
Distance : 14

192
Tree	groupIndex
Code	groupIndex
Distance : 14

193
Tree	checkState
Code	checkState
Distance : 14

194
Tree	while
Code	while
Distance : 14

195
Tree	testModules
Code	testModules
Distance : 14

196
Tree	long
Code	long
Distance : 14

197
Tree	isName
Code	isName
Distance : 14

198
Tree	HashUtils
Code	HashUtils
Distance : 14

199
Tree	srcDeclaration
Code	srcDeclaration
Distance : 14

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return chromosomes . iterator () ; } invocations
Code	{ return chromosomes . iterator () ; } invocations
Distance : 3

1
Tree	{ return chromosomes . iterator () ; } Class
Code	{ return chromosomes . iterator () ; } Class
Distance : 3

2
Tree	{ return chromosomes . iterator () ; } {}
Code	{ return chromosomes . iterator () ; } {}
Distance : 3

3
Tree	{ return chromosomes . iterator () ; } mock
Code	{ return chromosomes . iterator () ; } mock
Distance : 3

4
Tree	{ return chromosomes . iterator () ; } f
Code	{ return chromosomes . iterator () ; } f
Distance : 3

5
Tree	{ return chromosomes . iterator () ; } ParamChecks
Code	{ return chromosomes . iterator () ; } ParamChecks
Distance : 3

6
Tree	{ return chromosomes . iterator () ; } -
Code	{ return chromosomes . iterator () ; } -
Distance : 3

7
Tree	{ return chromosomes . iterator () ; } Preconditions
Code	{ return chromosomes . iterator () ; } Preconditions
Distance : 3

8
Tree	{ return chromosomes . iterator () ; } T
Code	{ return chromosomes . iterator () ; } T
Distance : 3

9
Tree	{ return chromosomes . iterator () ; } &&
Code	{ return chromosomes . iterator () ; } &&
Distance : 3

10
Tree	{ return chromosomes . iterator () ; } ]
Code	{ return chromosomes . iterator () ; } ]
Distance : 3

11
Tree	{ return chromosomes . iterator () ; } [
Code	{ return chromosomes . iterator () ; } [
Distance : 3

12
Tree	{ return chromosomes . iterator () ; } Object
Code	{ return chromosomes . iterator () ; } Object
Distance : 3

13
Tree	{ return chromosomes . iterator () ; } class
Code	{ return chromosomes . iterator () ; } class
Distance : 3

14
Tree	{ return chromosomes . iterator () ; } test
Code	{ return chromosomes . iterator () ; } test
Distance : 3

15
Tree	{ return chromosomes . iterator () ; } @
Code	{ return chromosomes . iterator () ; } @
Distance : 3

16
Tree	{ return chromosomes . iterator () ; } !
Code	{ return chromosomes . iterator () ; } !
Distance : 3

17
Tree	{ return chromosomes . iterator () ; } assertEquals
Code	{ return chromosomes . iterator () ; } assertEquals
Distance : 3

18
Tree	{ return chromosomes . iterator () ; } ==
Code	{ return chromosomes . iterator () ; } ==
Distance : 3

19
Tree	{ return chromosomes . iterator () ; } void
Code	{ return chromosomes . iterator () ; } void
Distance : 3

20
Tree	{ return chromosomes . iterator () ; } []
Code	{ return chromosomes . iterator () ; } []
Distance : 3

21
Tree	{ return chromosomes . iterator () ; } checkState
Code	{ return chromosomes . iterator () ; } checkState
Distance : 3

22
Tree	{ return chromosomes . iterator () ; } Test
Code	{ return chromosomes . iterator () ; } Test
Distance : 3

23
Tree	{ return chromosomes . iterator () ; } out
Code	{ return chromosomes . iterator () ; } out
Distance : 3

24
Tree	{ return chromosomes . iterator () ; } nullNotPermitted
Code	{ return chromosomes . iterator () ; } nullNotPermitted
Distance : 3

25
Tree	{ return chromosomes . iterator () ; } n
Code	{ return chromosomes . iterator () ; } n
Distance : 3

26
Tree	{ return chromosomes . iterator () ; } !=
Code	{ return chromosomes . iterator () ; } !=
Distance : 3

27
Tree	{ return chromosomes . iterator () ; } i
Code	{ return chromosomes . iterator () ; } i
Distance : 3

28
Tree	{ return chromosomes . iterator () ; } MathRuntimeException
Code	{ return chromosomes . iterator () ; } MathRuntimeException
Distance : 3

29
Tree	{ return chromosomes . iterator () ; } Override
Code	{ return chromosomes . iterator () ; } Override
Distance : 3

30
Tree	{ return chromosomes . iterator () ; } public
Code	{ return chromosomes . iterator () ; } public
Distance : 3

31
Tree	{ return chromosomes . iterator () ; } >
Code	{ return chromosomes . iterator () ; } >
Distance : 3

32
Tree	{ return chromosomes . iterator () ; } new
Code	{ return chromosomes . iterator () ; } new
Distance : 3

33
Tree	{ return chromosomes . iterator () ; } STRING_CONSTANT
Code	{ return chromosomes . iterator () ; } STRING_CONSTANT
Distance : 3

34
Tree	{ return chromosomes . iterator () ; } ,
Code	{ return chromosomes . iterator () ; } ,
Distance : 3

35
Tree	{ return chromosomes . iterator () ; } .
Code	{ return chromosomes . iterator () ; } .
Distance : 3

36
Tree	{ return chromosomes . iterator () ; } }
Code	{ return chromosomes . iterator () ; } }
Distance : 3

37
Tree	{ return chromosomes . iterator () ; } =
Code	{ return chromosomes . iterator () ; } =
Distance : 3

38
Tree	{ return chromosomes . iterator () ; } (
Code	{ return chromosomes . iterator () ; } (
Distance : 3

39
Tree	{ return chromosomes . iterator () ; } <s>
Code	{ return chromosomes . iterator () ; } <s>
Distance : 3

40
Tree	{ return chromosomes . iterator () ; } <blank>
Code	{ return chromosomes . iterator () ; } <blank>
Distance : 3

41
Tree	{ return chromosomes . iterator () ; } {
Code	{ return chromosomes . iterator () ; } {
Distance : 3

42
Tree	{ return chromosomes . iterator () ; } )
Code	{ return chromosomes . iterator () ; } )
Distance : 3

43
Tree	{ return chromosomes . iterator () ; } ;
Code	{ return chromosomes . iterator () ; } ;
Distance : 3

44
Tree	{ return chromosomes . iterator () ; } ()
Code	{ return chromosomes . iterator () ; } ()
Distance : 3

45
Tree	{ return chromosomes . iterator () ; } {
Code	{ return chromosomes . iterator () ; } {
Distance : 3

46
Tree	{ return chromosomes . iterator () ; } false
Code	{ return chromosomes . iterator () ; } false
Distance : 3

47
Tree	{ return chromosomes . iterator () ; } int
Code	{ return chromosomes . iterator () ; } int
Distance : 3

48
Tree	{ return chromosomes . iterator () ; } double
Code	{ return chromosomes . iterator () ; } double
Distance : 3

49
Tree	{ return chromosomes . iterator () ; } e
Code	{ return chromosomes . iterator () ; } e
Distance : 3

50
Tree	{ return chromosomes . iterator () ; } else
Code	{ return chromosomes . iterator () ; } else
Distance : 3

51
Tree	{ return chromosomes . iterator () ; } NUMBER_CONSTANT
Code	{ return chromosomes . iterator () ; } NUMBER_CONSTANT
Distance : 3

52
Tree	{ return chromosomes . iterator () ; } this
Code	{ return chromosomes . iterator () ; } this
Distance : 3

53
Tree	{ return chromosomes . iterator () ; } final
Code	{ return chromosomes . iterator () ; } final
Distance : 3

54
Tree	{ return chromosomes . iterator () ; } name
Code	{ return chromosomes . iterator () ; } name
Distance : 3

55
Tree	{ return chromosomes . iterator () ; } t
Code	{ return chromosomes . iterator () ; } t
Distance : 3

56
Tree	{ return chromosomes . iterator () ; } Collection
Code	{ return chromosomes . iterator () ; } Collection
Distance : 3

57
Tree	{ return chromosomes . iterator () ; } getField
Code	{ return chromosomes . iterator () ; } getField
Distance : 3

58
Tree	{ return chromosomes . iterator () ; } dataset
Code	{ return chromosomes . iterator () ; } dataset
Distance : 3

59
Tree	{ return chromosomes . iterator () ; } protected
Code	{ return chromosomes . iterator () ; } protected
Distance : 3

60
Tree	{ return chromosomes . iterator () ; } PlotChangeEvent
Code	{ return chromosomes . iterator () ; } PlotChangeEvent
Distance : 3

61
Tree	{ return chromosomes . iterator () ; } mode
Code	{ return chromosomes . iterator () ; } mode
Distance : 3

62
Tree	{ return chromosomes . iterator () ; } mockingProgress
Code	{ return chromosomes . iterator () ; } mockingProgress
Distance : 3

63
Tree	{ return chromosomes . iterator () ; } return;
Code	{ return chromosomes . iterator () ; } return;
Distance : 3

64
Tree	{ return chromosomes . iterator () ; } isEmpty
Code	{ return chromosomes . iterator () ; } isEmpty
Distance : 3

65
Tree	{ return chromosomes . iterator () ; } char
Code	{ return chromosomes . iterator () ; } char
Distance : 3

66
Tree	{ return chromosomes . iterator () ; } static
Code	{ return chromosomes . iterator () ; } static
Distance : 3

67
Tree	{ return chromosomes . iterator () ; } setAcceptedLanguage
Code	{ return chromosomes . iterator () ; } setAcceptedLanguage
Distance : 3

68
Tree	{ return chromosomes . iterator () ; } JSType
Code	{ return chromosomes . iterator () ; } JSType
Distance : 3

69
Tree	{ return chromosomes . iterator () ; } get
Code	{ return chromosomes . iterator () ; } get
Distance : 3

70
Tree	{ return chromosomes . iterator () ; } getMessage
Code	{ return chromosomes . iterator () ; } getMessage
Distance : 3

71
Tree	{ return chromosomes . iterator () ; } true
Code	{ return chromosomes . iterator () ; } true
Distance : 3

72
Tree	{ return chromosomes . iterator () ; } return
Code	{ return chromosomes . iterator () ; } return
Distance : 3

73
Tree	{ return chromosomes . iterator () ; } if
Code	{ return chromosomes . iterator () ; } if
Distance : 3

74
Tree	{ return chromosomes . iterator () ; } stream
Code	{ return chromosomes . iterator () ; } stream
Distance : 3

75
Tree	{ return chromosomes . iterator () ; } <
Code	{ return chromosomes . iterator () ; } <
Distance : 3

76
Tree	{ return chromosomes . iterator () ; } solver
Code	{ return chromosomes . iterator () ; } solver
Distance : 3

77
Tree	{ return chromosomes . iterator () ; } pattern
Code	{ return chromosomes . iterator () ; } pattern
Distance : 3

78
Tree	{ return chromosomes . iterator () ; } js
Code	{ return chromosomes . iterator () ; } js
Distance : 3

79
Tree	{ return chromosomes . iterator () ; } TestUtilities
Code	{ return chromosomes . iterator () ; } TestUtilities
Distance : 3

80
Tree	{ return chromosomes . iterator () ; } equals
Code	{ return chromosomes . iterator () ; } equals
Distance : 3

81
Tree	{ return chromosomes . iterator () ; } d
Code	{ return chromosomes . iterator () ; } d
Distance : 3

82
Tree	{ return chromosomes . iterator () ; } externs
Code	{ return chromosomes . iterator () ; } externs
Distance : 3

83
Tree	{ return chromosomes . iterator () ; } assertTrue
Code	{ return chromosomes . iterator () ; } assertTrue
Distance : 3

84
Tree	{ return chromosomes . iterator () ; } for
Code	{ return chromosomes . iterator () ; } for
Distance : 3

85
Tree	{ return chromosomes . iterator () ; } Invocation
Code	{ return chromosomes . iterator () ; } Invocation
Distance : 3

86
Tree	{ return chromosomes . iterator () ; } getParent
Code	{ return chromosomes . iterator () ; } getParent
Distance : 3

87
Tree	{ return chromosomes . iterator () ; } setUp
Code	{ return chromosomes . iterator () ; } setUp
Distance : 3

88
Tree	{ return chromosomes . iterator () ; } StrBuilder
Code	{ return chromosomes . iterator () ; } StrBuilder
Distance : 3

89
Tree	{ return chromosomes . iterator () ; } reportMatcher
Code	{ return chromosomes . iterator () ; } reportMatcher
Distance : 3

90
Tree	{ return chromosomes . iterator () ; } index
Code	{ return chromosomes . iterator () ; } index
Distance : 3

91
Tree	{ return chromosomes . iterator () ; } node
Code	{ return chromosomes . iterator () ; } node
Distance : 3

92
Tree	{ return chromosomes . iterator () ; } matcher
Code	{ return chromosomes . iterator () ; } matcher
Distance : 3

93
Tree	{ return chromosomes . iterator () ; } abs
Code	{ return chromosomes . iterator () ; } abs
Distance : 3

94
Tree	{ return chromosomes . iterator () ; } Double
Code	{ return chromosomes . iterator () ; } Double
Distance : 3

95
Tree	{ return chromosomes . iterator () ; } PeriodType
Code	{ return chromosomes . iterator () ; } PeriodType
Distance : 3

96
Tree	{ return chromosomes . iterator () ; } instant
Code	{ return chromosomes . iterator () ; } instant
Distance : 3

97
Tree	{ return chromosomes . iterator () ; } values
Code	{ return chromosomes . iterator () ; } values
Distance : 3

98
Tree	{ return chromosomes . iterator () ; } isNormalBlock
Code	{ return chromosomes . iterator () ; } isNormalBlock
Distance : 3

99
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

100
Tree	{ return chromosomes . iterator () ; } contains
Code	{ return chromosomes . iterator () ; } contains
Distance : 3

101
Tree	{ return chromosomes . iterator () ; } <=
Code	{ return chromosomes . iterator () ; } <=
Distance : 3

102
Tree	{ return chromosomes . iterator () ; } a
Code	{ return chromosomes . iterator () ; } a
Distance : 3

103
Tree	{ return chromosomes . iterator () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return chromosomes . iterator () ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

104
Tree	{ return chromosomes . iterator () ; } size
Code	{ return chromosomes . iterator () ; } size
Distance : 3

105
Tree	{ return chromosomes . iterator () ; } StringBuilder
Code	{ return chromosomes . iterator () ; } StringBuilder
Distance : 3

106
Tree	{ return chromosomes . iterator () ; } b
Code	{ return chromosomes . iterator () ; } b
Distance : 3

107
Tree	{ return chromosomes . iterator () ; } MutableTimePeriod
Code	{ return chromosomes . iterator () ; } MutableTimePeriod
Distance : 3

108
Tree	{ return chromosomes . iterator () ; } stroke
Code	{ return chromosomes . iterator () ; } stroke
Distance : 3

109
Tree	{ return chromosomes . iterator () ; } traverseEs6
Code	{ return chromosomes . iterator () ; } traverseEs6
Distance : 3

110
Tree	{ return chromosomes . iterator () ; } UnivariateFunction
Code	{ return chromosomes . iterator () ; } UnivariateFunction
Distance : 3

111
Tree	{ return chromosomes . iterator () ; } sb
Code	{ return chromosomes . iterator () ; } sb
Distance : 3

112
Tree	{ return chromosomes . iterator () ; } throws
Code	{ return chromosomes . iterator () ; } throws
Distance : 3

113
Tree	{ return chromosomes . iterator () ; } scope
Code	{ return chromosomes . iterator () ; } scope
Distance : 3

114
Tree	{ return chromosomes . iterator () ; } sqrt
Code	{ return chromosomes . iterator () ; } sqrt
Distance : 3

115
Tree	{ return chromosomes . iterator () ; } clone
Code	{ return chromosomes . iterator () ; } clone
Distance : 3

116
Tree	{ return chromosomes . iterator () ; } returnZero
Code	{ return chromosomes . iterator () ; } returnZero
Distance : 3

117
Tree	{ return chromosomes . iterator () ; } getFirstChild
Code	{ return chromosomes . iterator () ; } getFirstChild
Distance : 3

118
Tree	{ return chromosomes . iterator () ; } simpleMethod
Code	{ return chromosomes . iterator () ; } simpleMethod
Distance : 3

119
Tree	{ return chromosomes . iterator () ; } getArgumentMatcherStorage
Code	{ return chromosomes . iterator () ; } getArgumentMatcherStorage
Distance : 3

120
Tree	{ return chromosomes . iterator () ; } append
Code	{ return chromosomes . iterator () ; } append
Distance : 3

121
Tree	{ return chromosomes . iterator () ; } optimizer
Code	{ return chromosomes . iterator () ; } optimizer
Distance : 3

122
Tree	{ return chromosomes . iterator () ; } obj
Code	{ return chromosomes . iterator () ; } obj
Distance : 3

123
Tree	{ return chromosomes . iterator () ; } chrono
Code	{ return chromosomes . iterator () ; } chrono
Distance : 3

124
Tree	{ return chromosomes . iterator () ; } isBlock
Code	{ return chromosomes . iterator () ; } isBlock
Distance : 3

125
Tree	{ return chromosomes . iterator () ; } <>
Code	{ return chromosomes . iterator () ; } <>
Distance : 3

126
Tree	{ return chromosomes . iterator () ; } Integer
Code	{ return chromosomes . iterator () ; } Integer
Distance : 3

127
Tree	{ return chromosomes . iterator () ; } v
Code	{ return chromosomes . iterator () ; } v
Distance : 3

128
Tree	{ return chromosomes . iterator () ; } reportCodeChange
Code	{ return chromosomes . iterator () ; } reportCodeChange
Distance : 3

129
Tree	{ return chromosomes . iterator () ; } IllegalArgumentException
Code	{ return chromosomes . iterator () ; } IllegalArgumentException
Distance : 3

130
Tree	{ return chromosomes . iterator () ; } invocation
Code	{ return chromosomes . iterator () ; } invocation
Distance : 3

131
Tree	{ return chromosomes . iterator () ; } assertThat
Code	{ return chromosomes . iterator () ; } assertThat
Distance : 3

132
Tree	{ return chromosomes . iterator () ; } FastMath
Code	{ return chromosomes . iterator () ; } FastMath
Distance : 3

133
Tree	{ return chromosomes . iterator () ; } expected
Code	{ return chromosomes . iterator () ; } expected
Distance : 3

134
Tree	{ return chromosomes . iterator () ; } createIllegalArgumentException
Code	{ return chromosomes . iterator () ; } createIllegalArgumentException
Distance : 3

135
Tree	{ return chromosomes . iterator () ; } parent
Code	{ return chromosomes . iterator () ; } parent
Distance : 3

136
Tree	{ return chromosomes . iterator () ; } fireChangeEvent
Code	{ return chromosomes . iterator () ; } fireChangeEvent
Distance : 3

137
Tree	{ return chromosomes . iterator () ; } ArrayList
Code	{ return chromosomes . iterator () ; } ArrayList
Distance : 3

138
Tree	{ return chromosomes . iterator () ; } testSame
Code	{ return chromosomes . iterator () ; } testSame
Distance : 3

139
Tree	{ return chromosomes . iterator () ; } x
Code	{ return chromosomes . iterator () ; } x
Distance : 3

140
Tree	{ return chromosomes . iterator () ; } LINE_JOINER
Code	{ return chromosomes . iterator () ; } LINE_JOINER
Distance : 3

141
Tree	{ return chromosomes . iterator () ; } str
Code	{ return chromosomes . iterator () ; } str
Distance : 3

142
Tree	{ return chromosomes . iterator () ; } try
Code	{ return chromosomes . iterator () ; } try
Distance : 3

143
Tree	{ return chromosomes . iterator () ; } result
Code	{ return chromosomes . iterator () ; } result
Distance : 3

144
Tree	{ return chromosomes . iterator () ; } fail
Code	{ return chromosomes . iterator () ; } fail
Distance : 3

145
Tree	{ return chromosomes . iterator () ; } :
Code	{ return chromosomes . iterator () ; } :
Distance : 3

146
Tree	{ return chromosomes . iterator () ; } valueOf
Code	{ return chromosomes . iterator () ; } valueOf
Distance : 3

147
Tree	{ return chromosomes . iterator () ; } y
Code	{ return chromosomes . iterator () ; } y
Distance : 3

148
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

149
Tree	{ return chromosomes . iterator () ; } array
Code	{ return chromosomes . iterator () ; } array
Distance : 3

150
Tree	{ return chromosomes . iterator () ; } ?
Code	{ return chromosomes . iterator () ; } ?
Distance : 3

151
Tree	{ return chromosomes . iterator () ; } boolean
Code	{ return chromosomes . iterator () ; } boolean
Distance : 3

152
Tree	{ return chromosomes . iterator () ; } m
Code	{ return chromosomes . iterator () ; } m
Distance : 3

153
Tree	{ return chromosomes . iterator () ; } paint
Code	{ return chromosomes . iterator () ; } paint
Distance : 3

154
Tree	{ return chromosomes . iterator () ; } type
Code	{ return chromosomes . iterator () ; } type
Distance : 3

155
Tree	{ return chromosomes . iterator () ; } *
Code	{ return chromosomes . iterator () ; } *
Distance : 3

156
Tree	{ return chromosomes . iterator () ; } getInstance
Code	{ return chromosomes . iterator () ; } getInstance
Distance : 3

157
Tree	{ return chromosomes . iterator () ; } serialised
Code	{ return chromosomes . iterator () ; } serialised
Distance : 3

158
Tree	{ return chromosomes . iterator () ; } Fraction
Code	{ return chromosomes . iterator () ; } Fraction
Distance : 3

159
Tree	{ return chromosomes . iterator () ; } checkNotNull
Code	{ return chromosomes . iterator () ; } checkNotNull
Distance : 3

160
Tree	{ return chromosomes . iterator () ; } source
Code	{ return chromosomes . iterator () ; } source
Distance : 3

161
Tree	{ return chromosomes . iterator () ; } toString
Code	{ return chromosomes . iterator () ; } toString
Distance : 3

162
Tree	{ return chromosomes . iterator () ; } Math
Code	{ return chromosomes . iterator () ; } Math
Distance : 3

163
Tree	{ return chromosomes . iterator () ; } root
Code	{ return chromosomes . iterator () ; } root
Distance : 3

164
Tree	{ return chromosomes . iterator () ; } options
Code	{ return chromosomes . iterator () ; } options
Distance : 3

165
Tree	{ return chromosomes . iterator () ; } p
Code	{ return chromosomes . iterator () ; } p
Distance : 3

166
Tree	{ return chromosomes . iterator () ; } data
Code	{ return chromosomes . iterator () ; } data
Distance : 3

167
Tree	{ return chromosomes . iterator () ; } add
Code	{ return chromosomes . iterator () ; } add
Distance : 3

168
Tree	{ return chromosomes . iterator () ; } field
Code	{ return chromosomes . iterator () ; } field
Distance : 3

169
Tree	{ return chromosomes . iterator () ; } checkArgument
Code	{ return chromosomes . iterator () ; } checkArgument
Distance : 3

170
Tree	{ return chromosomes . iterator () ; } ex
Code	{ return chromosomes . iterator () ; } ex
Distance : 3

171
Tree	{ return chromosomes . iterator () ; } NodeUtil
Code	{ return chromosomes . iterator () ; } NodeUtil
Distance : 3

172
Tree	{ return chromosomes . iterator () ; } join
Code	{ return chromosomes . iterator () ; } join
Distance : 3

173
Tree	{ return chromosomes . iterator () ; } Args
Code	{ return chromosomes . iterator () ; } Args
Distance : 3

174
Tree	{ return chromosomes . iterator () ; } NodeTraversal
Code	{ return chromosomes . iterator () ; } NodeTraversal
Distance : 3

175
Tree	{ return chromosomes . iterator () ; } List
Code	{ return chromosomes . iterator () ; } List
Distance : 3

176
Tree	{ return chromosomes . iterator () ; } Exception
Code	{ return chromosomes . iterator () ; } Exception
Distance : 3

177
Tree	{ return chromosomes . iterator () ; } Node
Code	{ return chromosomes . iterator () ; } Node
Distance : 3

178
Tree	{ return chromosomes . iterator () ; } c
Code	{ return chromosomes . iterator () ; } c
Distance : 3

179
Tree	{ return chromosomes . iterator () ; } notifyListeners
Code	{ return chromosomes . iterator () ; } notifyListeners
Distance : 3

180
Tree	{ return chromosomes . iterator () ; } lines
Code	{ return chromosomes . iterator () ; } lines
Distance : 3

181
Tree	{ return chromosomes . iterator () ; } verify
Code	{ return chromosomes . iterator () ; } verify
Distance : 3

182
Tree	{ return chromosomes . iterator () ; } compiler
Code	{ return chromosomes . iterator () ; } compiler
Distance : 3

183
Tree	{ return chromosomes . iterator () ; } String
Code	{ return chromosomes . iterator () ; } String
Distance : 3

184
Tree	{ return chromosomes . iterator () ; } null
Code	{ return chromosomes . iterator () ; } null
Distance : 3

185
Tree	{ return chromosomes . iterator () ; } wanted
Code	{ return chromosomes . iterator () ; } wanted
Distance : 3

186
Tree	{ return chromosomes . iterator () ; } +
Code	{ return chromosomes . iterator () ; } +
Distance : 3

187
Tree	{ return chromosomes . iterator () ; } throw
Code	{ return chromosomes . iterator () ; } throw
Distance : 3

188
Tree	{ return chromosomes . iterator () ; } super
Code	{ return chromosomes . iterator () ; } super
Distance : 3

189
Tree	{ return chromosomes . iterator () ; } value
Code	{ return chromosomes . iterator () ; } value
Distance : 3

190
Tree	{ return chromosomes . iterator () ; } long
Code	{ return chromosomes . iterator () ; } long
Distance : 3

191
Tree	{ return chromosomes . iterator () ; } /
Code	{ return chromosomes . iterator () ; } /
Distance : 3

192
Tree	{ return chromosomes . iterator () ; } length
Code	{ return chromosomes . iterator () ; } length
Distance : 3

193
Tree	{ return chromosomes . iterator () ; } TestUtils
Code	{ return chromosomes . iterator () ; } TestUtils
Distance : 3

194
Tree	{ return chromosomes . iterator () ; } alpha
Code	{ return chromosomes . iterator () ; } alpha
Distance : 3

195
Tree	{ return chromosomes . iterator () ; } instance
Code	{ return chromosomes . iterator () ; } instance
Distance : 3

196
Tree	{ return chromosomes . iterator () ; } Assert
Code	{ return chromosomes . iterator () ; } Assert
Distance : 3

197
Tree	{ return chromosomes . iterator () ; } catch
Code	{ return chromosomes . iterator () ; } catch
Distance : 3

198
Tree	{ return chromosomes . iterator () ; } LanguageMode.ECMASCRIPT6
Code	{ return chromosomes . iterator () ; } LanguageMode.ECMASCRIPT6
Distance : 3

199
Tree	{ return chromosomes . iterator () ; } s
Code	{ return chromosomes . iterator () ; } s
Distance : 3

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 0

1
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

2
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

3
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

4
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

5
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

6
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

7
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

8
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

9
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

10
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 1

11
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

12
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 1

13
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

14
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

15
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

16
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 1

17
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

18
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

19
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

20
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

21
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

22
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

23
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

24
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

25
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

26
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

27
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

28
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

29
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

30
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

31
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

32
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

33
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

34
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

35
Tree	if ( i . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

36
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

37
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

38
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

39
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 1

40
Tree	if ( entry . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

41
Tree	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

42
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

43
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

44
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 1

45
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

46
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

47
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

48
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

49
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

50
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

51
Tree	if ( i . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

52
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

53
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

54
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

55
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

56
Tree	if ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

57
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

58
Tree	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

59
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

60
Tree	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

61
Tree	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

62
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 2

63
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

64
Tree	if ( entry . compareTo ( epsilon , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( epsilon , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

65
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

66
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

67
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

68
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

69
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 2

70
Tree	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

71
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 1

72
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

73
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

74
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

75
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

76
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

77
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

78
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

79
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 3

80
Tree	if ( entry . compareTo ( epsilon , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( epsilon , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

81
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

82
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

83
Tree	if ( maxUlps . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

84
Tree	if ( i . compareTo ( epsilon , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( epsilon , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

85
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 3

86
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

87
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 2

88
Tree	if ( Precision . add ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

89
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

90
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

91
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 2

92
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

93
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

94
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

95
Tree	if ( i . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( maxUlps , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

96
Tree	if ( i . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

97
Tree	if ( i . compareTo ( maxUlps , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( maxUlps , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

98
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

99
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

100
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

101
Tree	if ( maxUlps . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

102
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

103
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

104
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 1

105
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

106
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

107
Tree	if ( Precision . compareTo ( columnsToDrop , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( columnsToDrop , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

108
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 2

109
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

110
Tree	if ( Precision . add ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

111
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

112
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

113
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 1

114
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

115
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

116
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 3

117
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

118
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

119
Tree	if ( maxUlps . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

120
Tree	if ( i . compareTo ( epsilon , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( epsilon , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

121
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

122
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

123
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 2

124
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

125
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

126
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 3

127
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

128
Tree	if ( Precision . add ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

129
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

130
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

131
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

132
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

133
Tree	if ( epsilon . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

134
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

135
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

136
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

137
Tree	if ( maxUlps . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

138
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

139
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

140
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( entry ) ; }
Distance : 2

141
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 2

142
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

143
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . compareTo ( i ) ; }
Distance : 2

144
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

145
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

146
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 2

147
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

148
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

149
Tree	if ( entry . add ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

150
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

151
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

152
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

153
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

154
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

155
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

156
Tree	if ( columnsToDrop . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

157
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

158
Tree	if ( Precision . add ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( Precision , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

159
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

160
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

161
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

162
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 2

163
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 2

164
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

165
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

166
Tree	if ( maxUlps . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

167
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

168
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 1

169
Tree	if ( epsilon . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

170
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 2

171
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

172
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 3

173
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

174
Tree	if ( i . compareTo ( Precision , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( Precision , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

175
Tree	if ( Precision . compareTo ( columnsToDrop , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( columnsToDrop , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

176
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 2

177
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 4

178
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 3

179
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

180
Tree	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( Precision . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 2

181
Tree	if ( entry . compareTo ( columnsToDrop , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( columnsToDrop , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

182
Tree	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

183
Tree	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

184
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

185
Tree	if ( entry . add ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

186
Tree	if ( i . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . add ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

187
Tree	if ( i . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

188
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

189
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 2

190
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

191
Tree	if ( entry . add ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

192
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 2

193
Tree	if ( entry . add ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

194
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

195
Tree	if ( epsilon . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

196
Tree	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( epsilon , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

197
Tree	if ( i . compareTo ( Precision , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( Precision , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

198
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 3

199
Tree	if ( columnsToDrop . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( Precision , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

1
Tree	final byte n1n2prod = n1 * n2 ;
Code	final byte n1n2prod = n1 * n2 ;
Distance : 1

2
Tree	final char n1n2prod = n1 * n2 ;
Code	final char n1n2prod = n1 * n2 ;
Distance : 1

3
Tree	final float n1n2prod = n1 * n2 ;
Code	final float n1n2prod = n1 * n2 ;
Distance : 1

4
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

5
Tree	final long n1n2prod = n2 * n2 ;
Code	final long n1n2prod = n2 * n2 ;
Distance : 2

6
Tree	final short n1n2prod = n1 * n2 ;
Code	final short n1n2prod = n1 * n2 ;
Distance : 1

7
Tree	final double n1n2prod = n1 * n2 ;
Code	final double n1n2prod = n1 * n2 ;
Distance : 0

8
Tree	final boolean n1n2prod = n1 * n2 ;
Code	final boolean n1n2prod = n1 * n2 ;
Distance : 1

9
Tree	final int n1n2prod = n1n2prod * n2 ;
Code	final int n1n2prod = n1n2prod * n2 ;
Distance : 2

10
Tree	final int n1n2prod = n1 * n1 ;
Code	final int n1n2prod = n1 * n1 ;
Distance : 2

11
Tree	final long n1n2prod = n1n2prod * n2 ;
Code	final long n1n2prod = n1n2prod * n2 ;
Distance : 2

12
Tree	final long n1n2prod = n1 * n1 ;
Code	final long n1n2prod = n1 * n1 ;
Distance : 2

13
Tree	final int n2 = n1 * n2 ;
Code	final int n2 = n1 * n2 ;
Distance : 2

14
Tree	final long n2 = n1 * n2 ;
Code	final long n2 = n1 * n2 ;
Distance : 2

15
Tree	final int n1n2prod = n1 * n1n2prod ;
Code	final int n1n2prod = n1 * n1n2prod ;
Distance : 2

16
Tree	final long n1n2prod = n1 * n1n2prod ;
Code	final long n1n2prod = n1 * n1n2prod ;
Distance : 2

17
Tree	final void n1n2prod = n1 * n2 ;
Code	final void n1n2prod = n1 * n2 ;
Distance : 1

18
Tree	final int n1 = n1 * n2 ;
Code	final int n1 = n1 * n2 ;
Distance : 2

19
Tree	final long n1 = n1 * n2 ;
Code	final long n1 = n1 * n2 ;
Distance : 2

20
Tree	final byte n1n2prod = n2 * n2 ;
Code	final byte n1n2prod = n2 * n2 ;
Distance : 2

21
Tree	final float n1n2prod = n2 * n2 ;
Code	final float n1n2prod = n2 * n2 ;
Distance : 2

22
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

23
Tree	abstract int n1n2prod = n1 * n2 ;
Code	abstract int n1n2prod = n1 * n2 ;
Distance : 2

24
Tree	final char n1n2prod = n2 * n2 ;
Code	final char n1n2prod = n2 * n2 ;
Distance : 2

25
Tree	final float n1 = n1 * n2 ;
Code	final float n1 = n1 * n2 ;
Distance : 2

26
Tree	final char n1n2prod = n1n2prod * n2 ;
Code	final char n1n2prod = n1n2prod * n2 ;
Distance : 2

27
Tree	final float n1n2prod = n1 * n1 ;
Code	final float n1n2prod = n1 * n1 ;
Distance : 2

28
Tree	final byte n2 = n1 * n2 ;
Code	final byte n2 = n1 * n2 ;
Distance : 2

29
Tree	final float n1n2prod = n1n2prod * n2 ;
Code	final float n1n2prod = n1n2prod * n2 ;
Distance : 2

30
Tree	final byte n1n2prod = n1 * n1n2prod ;
Code	final byte n1n2prod = n1 * n1n2prod ;
Distance : 2

31
Tree	final char n2 = n1 * n2 ;
Code	final char n2 = n1 * n2 ;
Distance : 2

32
Tree	final float n2 = n1 * n2 ;
Code	final float n2 = n1 * n2 ;
Distance : 2

33
Tree	final char n1n2prod = n1 * n1n2prod ;
Code	final char n1n2prod = n1 * n1n2prod ;
Distance : 2

34
Tree	final float n1n2prod = n1 * n1n2prod ;
Code	final float n1n2prod = n1 * n1n2prod ;
Distance : 2

35
Tree	final short n1n2prod = n2 * n2 ;
Code	final short n1n2prod = n2 * n2 ;
Distance : 2

36
Tree	final byte n1 = n1 * n2 ;
Code	final byte n1 = n1 * n2 ;
Distance : 2

37
Tree	public int n1n2prod = n1 * n2 ;
Code	public int n1n2prod = n1 * n2 ;
Distance : 2

38
Tree	final double n1n2prod = n2 * n2 ;
Code	final double n1n2prod = n2 * n2 ;
Distance : 1

39
Tree	static int n1n2prod = n1 * n2 ;
Code	static int n1n2prod = n1 * n2 ;
Distance : 2

40
Tree	final boolean n1n2prod = n2 * n2 ;
Code	final boolean n1n2prod = n2 * n2 ;
Distance : 2

41
Tree	final int n1n2prod = n2 * n1 ;
Code	final int n1n2prod = n2 * n1 ;
Distance : 3

42
Tree	final long n1n2prod = n2 * n1 ;
Code	final long n1n2prod = n2 * n1 ;
Distance : 3

43
Tree	final short n1n2prod = n1 * n1 ;
Code	final short n1n2prod = n1 * n1 ;
Distance : 2

44
Tree	final char n1 = n1 * n2 ;
Code	final char n1 = n1 * n2 ;
Distance : 2

45
Tree	final short n1n2prod = n1n2prod * n2 ;
Code	final short n1n2prod = n1n2prod * n2 ;
Distance : 2

46
Tree	final byte n1n2prod = n1n2prod * n2 ;
Code	final byte n1n2prod = n1n2prod * n2 ;
Distance : 2

47
Tree	final byte n1n2prod = n1 * n1 ;
Code	final byte n1n2prod = n1 * n1 ;
Distance : 2

48
Tree	final char n1n2prod = n1 * n1 ;
Code	final char n1n2prod = n1 * n1 ;
Distance : 2

49
Tree	final double n1n2prod = n1n2prod * n2 ;
Code	final double n1n2prod = n1n2prod * n2 ;
Distance : 1

50
Tree	private int n1n2prod = n1 * n2 ;
Code	private int n1n2prod = n1 * n2 ;
Distance : 2

51
Tree	final boolean n1n2prod = n1 * n1 ;
Code	final boolean n1n2prod = n1 * n1 ;
Distance : 2

52
Tree	static long n1n2prod = n1 * n2 ;
Code	static long n1n2prod = n1 * n2 ;
Distance : 2

53
Tree	public long n1n2prod = n1 * n2 ;
Code	public long n1n2prod = n1 * n2 ;
Distance : 2

54
Tree	final int n2 = n2 * n2 ;
Code	final int n2 = n2 * n2 ;
Distance : 3

55
Tree	final long n2 = n2 * n2 ;
Code	final long n2 = n2 * n2 ;
Distance : 3

56
Tree	final int n1n2prod = n1n2prod * n1 ;
Code	final int n1n2prod = n1n2prod * n1 ;
Distance : 3

57
Tree	final long n1n2prod = n1n2prod * n1 ;
Code	final long n1n2prod = n1n2prod * n1 ;
Distance : 3

58
Tree	final int n1n2prod = n2 * n1n2prod ;
Code	final int n1n2prod = n2 * n1n2prod ;
Distance : 3

59
Tree	final short n2 = n1 * n2 ;
Code	final short n2 = n1 * n2 ;
Distance : 2

60
Tree	final short n2 = n1n2prod * n2 ;
Code	final short n2 = n1n2prod * n2 ;
Distance : 3

61
Tree	final double n2 = n1 * n2 ;
Code	final double n2 = n1 * n2 ;
Distance : 1

62
Tree	final short n1n2prod = n1 * n1n2prod ;
Code	final short n1n2prod = n1 * n1n2prod ;
Distance : 2

63
Tree	final boolean n2 = n1 * n2 ;
Code	final boolean n2 = n1 * n2 ;
Distance : 2

64
Tree	final double n1n2prod = n1 * n1n2prod ;
Code	final double n1n2prod = n1 * n1n2prod ;
Distance : 1

65
Tree	abstract long n1n2prod = n1 * n2 ;
Code	abstract long n1n2prod = n1 * n2 ;
Distance : 2

66
Tree	final boolean n1n2prod = n1 * n1n2prod ;
Code	final boolean n1n2prod = n1 * n1n2prod ;
Distance : 2

67
Tree	final int n2 = n1n2prod * n2 ;
Code	final int n2 = n1n2prod * n2 ;
Distance : 3

68
Tree	final int n2 = n1 * n1 ;
Code	final int n2 = n1 * n1 ;
Distance : 3

69
Tree	final long n2 = n1n2prod * n2 ;
Code	final long n2 = n1n2prod * n2 ;
Distance : 3

70
Tree	final long n2 = n1 * n1 ;
Code	final long n2 = n1 * n1 ;
Distance : 3

71
Tree	final int n1n2prod = n1n2prod * n1n2prod ;
Code	final int n1n2prod = n1n2prod * n1n2prod ;
Distance : 3

72
Tree	final boolean n1n2prod = n1n2prod * n2 ;
Code	final boolean n1n2prod = n1n2prod * n2 ;
Distance : 2

73
Tree	final double n1n2prod = n1 * n1 ;
Code	final double n1n2prod = n1 * n1 ;
Distance : 1

74
Tree	final void n1n2prod = n2 * n2 ;
Code	final void n1n2prod = n2 * n2 ;
Distance : 2

75
Tree	final long n1n2prod = n1n2prod * n1n2prod ;
Code	final long n1n2prod = n1n2prod * n1n2prod ;
Distance : 3

76
Tree	final short n1 = n1 * n2 ;
Code	final short n1 = n1 * n2 ;
Distance : 2

77
Tree	final double n1 = n1 * n2 ;
Code	final double n1 = n1 * n2 ;
Distance : 1

78
Tree	final boolean n1 = n1 * n2 ;
Code	final boolean n1 = n1 * n2 ;
Distance : 2

79
Tree	final int n2 = n1 * n1n2prod ;
Code	final int n2 = n1 * n1n2prod ;
Distance : 3

80
Tree	final long n2 = n1 * n1n2prod ;
Code	final long n2 = n1 * n1n2prod ;
Distance : 3

81
Tree	final void n1n2prod = n1 * n1 ;
Code	final void n1n2prod = n1 * n1 ;
Distance : 2

82
Tree	final void n1n2prod = n1n2prod * n2 ;
Code	final void n1n2prod = n1n2prod * n2 ;
Distance : 2

83
Tree	final int n1 = n1n2prod * n2 ;
Code	final int n1 = n1n2prod * n2 ;
Distance : 3

84
Tree	final int n1 = n1 * n1 ;
Code	final int n1 = n1 * n1 ;
Distance : 3

85
Tree	final long n1 = n1n2prod * n2 ;
Code	final long n1 = n1n2prod * n2 ;
Distance : 3

86
Tree	final long n1 = n1 * n1 ;
Code	final long n1 = n1 * n1 ;
Distance : 3

87
Tree	public byte n1n2prod = n1 * n2 ;
Code	public byte n1n2prod = n1 * n2 ;
Distance : 2

88
Tree	final byte n1n2prod = n2 * n1 ;
Code	final byte n1n2prod = n2 * n1 ;
Distance : 3

89
Tree	private long n1n2prod = n1 * n2 ;
Code	private long n1n2prod = n1 * n2 ;
Distance : 2

90
Tree	static byte n1n2prod = n1 * n2 ;
Code	static byte n1n2prod = n1 * n2 ;
Distance : 2

91
Tree	static char n1n2prod = n1 * n2 ;
Code	static char n1n2prod = n1 * n2 ;
Distance : 2

92
Tree	synchronized int n1n2prod = n1 * n2 ;
Code	synchronized int n1n2prod = n1 * n2 ;
Distance : 2

93
Tree	final void n2 = n1 * n2 ;
Code	final void n2 = n1 * n2 ;
Distance : 2

94
Tree	protected int n1n2prod = n1 * n2 ;
Code	protected int n1n2prod = n1 * n2 ;
Distance : 2

95
Tree	public char n1n2prod = n1 * n2 ;
Code	public char n1n2prod = n1 * n2 ;
Distance : 2

96
Tree	final long n1 = n2 * n2 ;
Code	final long n1 = n2 * n2 ;
Distance : 3

97
Tree	final int n1 = n2 * n2 ;
Code	final int n1 = n2 * n2 ;
Distance : 3

98
Tree	final int n1 = n1 * n1n2prod ;
Code	final int n1 = n1 * n1n2prod ;
Distance : 3

99
Tree	final void n1n2prod = n1 * n1n2prod ;
Code	final void n1n2prod = n1 * n1n2prod ;
Distance : 2

100
Tree	final long n1 = n1 * n1n2prod ;
Code	final long n1 = n1 * n1n2prod ;
Distance : 3

101
Tree	abstract byte n1n2prod = n1 * n2 ;
Code	abstract byte n1n2prod = n1 * n2 ;
Distance : 2

102
Tree	final char n1n2prod = n2 * n1 ;
Code	final char n1n2prod = n2 * n1 ;
Distance : 3

103
Tree	final float n1n2prod = n2 * n1 ;
Code	final float n1n2prod = n2 * n1 ;
Distance : 3

104
Tree	final byte n2 = n2 * n2 ;
Code	final byte n2 = n2 * n2 ;
Distance : 3

105
Tree	final byte n1n2prod = n1n2prod * n1 ;
Code	final byte n1n2prod = n1n2prod * n1 ;
Distance : 3

106
Tree	abstract char n1n2prod = n1 * n2 ;
Code	abstract char n1n2prod = n1 * n2 ;
Distance : 2

107
Tree	final byte n1n2prod = n2 * n1n2prod ;
Code	final byte n1n2prod = n2 * n1n2prod ;
Distance : 3

108
Tree	static float n1n2prod = n1 * n2 ;
Code	static float n1n2prod = n1 * n2 ;
Distance : 2

109
Tree	final void n1 = n1 * n2 ;
Code	final void n1 = n1 * n2 ;
Distance : 2

110
Tree	protected long n1n2prod = n1 * n2 ;
Code	protected long n1n2prod = n1 * n2 ;
Distance : 2

111
Tree	synchronized long n1n2prod = n1 * n2 ;
Code	synchronized long n1n2prod = n1 * n2 ;
Distance : 2

112
Tree	static boolean n1n2prod = n1 * n2 ;
Code	static boolean n1n2prod = n1 * n2 ;
Distance : 2

113
Tree	static double n1n2prod = n1 * n2 ;
Code	static double n1n2prod = n1 * n2 ;
Distance : 1

114
Tree	final char n2 = n2 * n2 ;
Code	final char n2 = n2 * n2 ;
Distance : 3

115
Tree	final char n1n2prod = n1n2prod * n1 ;
Code	final char n1n2prod = n1n2prod * n1 ;
Distance : 3

116
Tree	public double n1n2prod = n1 * n2 ;
Code	public double n1n2prod = n1 * n2 ;
Distance : 1

117
Tree	final byte n2 = n1n2prod * n2 ;
Code	final byte n2 = n1n2prod * n2 ;
Distance : 3

118
Tree	final byte n2 = n1 * n1 ;
Code	final byte n2 = n1 * n1 ;
Distance : 3

119
Tree	final float n2 = n2 * n2 ;
Code	final float n2 = n2 * n2 ;
Distance : 3

120
Tree	final float n1n2prod = n1n2prod * n1 ;
Code	final float n1n2prod = n1n2prod * n1 ;
Distance : 3

121
Tree	abstract float n1n2prod = n1 * n2 ;
Code	abstract float n1n2prod = n1 * n2 ;
Distance : 2

122
Tree	final char n1n2prod = n2 * n1n2prod ;
Code	final char n1n2prod = n2 * n1n2prod ;
Distance : 3

123
Tree	final float n1n2prod = n2 * n1n2prod ;
Code	final float n1n2prod = n2 * n1n2prod ;
Distance : 3

124
Tree	public boolean n1n2prod = n1 * n2 ;
Code	public boolean n1n2prod = n1 * n2 ;
Distance : 2

125
Tree	final byte n1n2prod = n1n2prod * n1n2prod ;
Code	final byte n1n2prod = n1n2prod * n1n2prod ;
Distance : 3

126
Tree	final byte n1 = n2 * n2 ;
Code	final byte n1 = n2 * n2 ;
Distance : 3

127
Tree	public int n1n2prod = n2 * n2 ;
Code	public int n1n2prod = n2 * n2 ;
Distance : 3

128
Tree	static int n1n2prod = n2 * n2 ;
Code	static int n1n2prod = n2 * n2 ;
Distance : 3

129
Tree	abstract boolean n1n2prod = n1 * n2 ;
Code	abstract boolean n1n2prod = n1 * n2 ;
Distance : 2

130
Tree	abstract double n1n2prod = n1 * n2 ;
Code	abstract double n1n2prod = n1 * n2 ;
Distance : 1

131
Tree	final char n2 = n1 * n1 ;
Code	final char n2 = n1 * n1 ;
Distance : 3

132
Tree	final char n2 = n1n2prod * n2 ;
Code	final char n2 = n1n2prod * n2 ;
Distance : 3

133
Tree	final float n2 = n1 * n1 ;
Code	final float n2 = n1 * n1 ;
Distance : 3

134
Tree	final float n2 = n1n2prod * n2 ;
Code	final float n2 = n1n2prod * n2 ;
Distance : 3

135
Tree	private byte n1n2prod = n1 * n2 ;
Code	private byte n1n2prod = n1 * n2 ;
Distance : 2

136
Tree	final char n1n2prod = n1n2prod * n1n2prod ;
Code	final char n1n2prod = n1n2prod * n1n2prod ;
Distance : 3

137
Tree	final float n1n2prod = n1n2prod * n1n2prod ;
Code	final float n1n2prod = n1n2prod * n1n2prod ;
Distance : 3

138
Tree	final byte n2 = n1 * n1n2prod ;
Code	final byte n2 = n1 * n1n2prod ;
Distance : 3

139
Tree	final short n1n2prod = n2 * n1 ;
Code	final short n1n2prod = n2 * n1 ;
Distance : 3

140
Tree	private char n1n2prod = n1 * n2 ;
Code	private char n1n2prod = n1 * n2 ;
Distance : 2

141
Tree	final char n1 = n2 * n2 ;
Code	final char n1 = n2 * n2 ;
Distance : 3

142
Tree	final byte n1 = n1 * n1 ;
Code	final byte n1 = n1 * n1 ;
Distance : 3

143
Tree	final byte n1 = n1n2prod * n2 ;
Code	final byte n1 = n1n2prod * n2 ;
Distance : 3

144
Tree	final float n1 = n2 * n2 ;
Code	final float n1 = n2 * n2 ;
Distance : 3

145
Tree	abstract int n1n2prod = n2 * n2 ;
Code	abstract int n1n2prod = n2 * n2 ;
Distance : 3

146
Tree	final double n1n2prod = n2 * n1 ;
Code	final double n1n2prod = n2 * n1 ;
Distance : 2

147
Tree	public int n1n2prod = n1n2prod * n2 ;
Code	public int n1n2prod = n1n2prod * n2 ;
Distance : 3

148
Tree	public float n1n2prod = n1 * n2 ;
Code	public float n1n2prod = n1 * n2 ;
Distance : 2

149
Tree	final boolean n1n2prod = n2 * n1 ;
Code	final boolean n1n2prod = n2 * n1 ;
Distance : 3

150
Tree	public short n1n2prod = n1 * n2 ;
Code	public short n1n2prod = n1 * n2 ;
Distance : 2

151
Tree	static int n1n2prod = n1 * n1 ;
Code	static int n1n2prod = n1 * n1 ;
Distance : 3

152
Tree	static short n1n2prod = n1 * n2 ;
Code	static short n1n2prod = n1 * n2 ;
Distance : 2

153
Tree	public long n1n2prod = n2 * n2 ;
Code	public long n1n2prod = n2 * n2 ;
Distance : 3

154
Tree	static long n1n2prod = n2 * n2 ;
Code	static long n1n2prod = n2 * n2 ;
Distance : 3

155
Tree	final char n2 = n1 * n1n2prod ;
Code	final char n2 = n1 * n1n2prod ;
Distance : 3

156
Tree	final float n2 = n1 * n1n2prod ;
Code	final float n2 = n1 * n1n2prod ;
Distance : 3

157
Tree	final char n1 = n1 * n1 ;
Code	final char n1 = n1 * n1 ;
Distance : 3

158
Tree	final short n2 = n2 * n2 ;
Code	final short n2 = n2 * n2 ;
Distance : 3

159
Tree	final short n1n2prod = n1n2prod * n1 ;
Code	final short n1n2prod = n1n2prod * n1 ;
Distance : 3

160
Tree	final char n1 = n1n2prod * n2 ;
Code	final char n1 = n1n2prod * n2 ;
Distance : 3

161
Tree	final float n1 = n1 * n1 ;
Code	final float n1 = n1 * n1 ;
Distance : 3

162
Tree	final double n2 = n2 * n2 ;
Code	final double n2 = n2 * n2 ;
Distance : 2

163
Tree	final float n1 = n1n2prod * n2 ;
Code	final float n1 = n1n2prod * n2 ;
Distance : 3

164
Tree	private float n1n2prod = n1 * n2 ;
Code	private float n1n2prod = n1 * n2 ;
Distance : 2

165
Tree	public int n2 = n1 * n2 ;
Code	public int n2 = n1 * n2 ;
Distance : 3

166
Tree	final short n1n2prod = n2 * n1n2prod ;
Code	final short n1n2prod = n2 * n1n2prod ;
Distance : 3

167
Tree	final boolean n2 = n2 * n2 ;
Code	final boolean n2 = n2 * n2 ;
Distance : 3

168
Tree	static int n2 = n1 * n2 ;
Code	static int n2 = n1 * n2 ;
Distance : 3

169
Tree	final double n1n2prod = n1n2prod * n1 ;
Code	final double n1n2prod = n1n2prod * n1 ;
Distance : 2

170
Tree	abstract int n1n2prod = n1 * n1 ;
Code	abstract int n1n2prod = n1 * n1 ;
Distance : 3

171
Tree	abstract int n1n2prod = n1n2prod * n2 ;
Code	abstract int n1n2prod = n1n2prod * n2 ;
Distance : 3

172
Tree	static int n1n2prod = n1n2prod * n2 ;
Code	static int n1n2prod = n1n2prod * n2 ;
Distance : 3

173
Tree	final byte n1 = n1 * n1n2prod ;
Code	final byte n1 = n1 * n1n2prod ;
Distance : 3

174
Tree	abstract short n1n2prod = n1 * n2 ;
Code	abstract short n1n2prod = n1 * n2 ;
Distance : 2

175
Tree	public int n1n2prod = n1 * n1 ;
Code	public int n1n2prod = n1 * n1 ;
Distance : 3

176
Tree	final double n1n2prod = n2 * n1n2prod ;
Code	final double n1n2prod = n2 * n1n2prod ;
Distance : 2

177
Tree	public int n1n2prod = n1 * n1n2prod ;
Code	public int n1n2prod = n1 * n1n2prod ;
Distance : 3

178
Tree	final boolean n1n2prod = n2 * n1n2prod ;
Code	final boolean n1n2prod = n2 * n1n2prod ;
Distance : 3

179
Tree	static int n1n2prod = n1 * n1n2prod ;
Code	static int n1n2prod = n1 * n1n2prod ;
Distance : 3

180
Tree	abstract long n1n2prod = n2 * n2 ;
Code	abstract long n1n2prod = n2 * n2 ;
Distance : 3

181
Tree	protected byte n1n2prod = n1 * n2 ;
Code	protected byte n1n2prod = n1 * n2 ;
Distance : 2

182
Tree	synchronized char n1n2prod = n1 * n2 ;
Code	synchronized char n1n2prod = n1 * n2 ;
Distance : 2

183
Tree	static void n1n2prod = n1 * n2 ;
Code	static void n1n2prod = n1 * n2 ;
Distance : 2

184
Tree	private boolean n1n2prod = n1 * n2 ;
Code	private boolean n1n2prod = n1 * n2 ;
Distance : 2

185
Tree	synchronized byte n1n2prod = n1 * n2 ;
Code	synchronized byte n1n2prod = n1 * n2 ;
Distance : 2

186
Tree	final long n1n2prod = n2 * n1n2prod ;
Code	final long n1n2prod = n2 * n1n2prod ;
Distance : 3

187
Tree	protected char n1n2prod = n1 * n2 ;
Code	protected char n1n2prod = n1 * n2 ;
Distance : 2

188
Tree	private double n1n2prod = n1 * n2 ;
Code	private double n1n2prod = n1 * n2 ;
Distance : 1

189
Tree	final long n2 = n2 * n1 ;
Code	final long n2 = n2 * n1 ;
Distance : 4

190
Tree	public long n1n2prod = n1n2prod * n2 ;
Code	public long n1n2prod = n1n2prod * n2 ;
Distance : 3

191
Tree	static long n1n2prod = n1n2prod * n2 ;
Code	static long n1n2prod = n1n2prod * n2 ;
Distance : 3

192
Tree	static long n1n2prod = n1 * n1 ;
Code	static long n1n2prod = n1 * n1 ;
Distance : 3

193
Tree	public long n1n2prod = n1 * n1 ;
Code	public long n1n2prod = n1 * n1 ;
Distance : 3

194
Tree	public void n1n2prod = n1 * n2 ;
Code	public void n1n2prod = n1 * n2 ;
Distance : 2

195
Tree	final short n2 = n1 * n1 ;
Code	final short n2 = n1 * n1 ;
Distance : 3

196
Tree	abstract int n2 = n1 * n2 ;
Code	abstract int n2 = n1 * n2 ;
Distance : 3

197
Tree	final boolean n1n2prod = n1n2prod * n1 ;
Code	final boolean n1n2prod = n1n2prod * n1 ;
Distance : 3

198
Tree	final int n2 = n2 * n1 ;
Code	final int n2 = n2 * n1 ;
Distance : 4

199
Tree	final double n2 = n1n2prod * n2 ;
Code	final double n2 = n1n2prod * n2 ;
Distance : 2

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

1
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 1

2
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

3
Tree	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

4
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

5
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 1

6
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

7
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

8
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 1

9
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

10
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

11
Tree	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

12
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 2

13
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

14
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 2

15
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

16
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

17
Tree	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

18
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

19
Tree	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 1

20
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 2

21
Tree	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

22
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

23
Tree	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

24
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

25
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Distance : 2

26
Tree	if ( y >= x y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

27
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

28
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

29
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

30
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 2

31
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

32
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

33
Tree	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

34
Tree	if ( y >= y y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

35
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

36
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

37
Tree	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

38
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 2

39
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

40
Tree	if ( y >= TWO_POWER_53 y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - y ) { return pow ( - x , y ) ; }
Distance : 2

41
Tree	if ( y >= x y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

42
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

43
Tree	if ( y >= y y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

44
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

45
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 2

46
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

47
Tree	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

48
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

49
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

50
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 2

51
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

52
Tree	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

53
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

54
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 2

55
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

56
Tree	if ( x >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

57
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 2

58
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

59
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 2

60
Tree	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 4

61
Tree	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

62
Tree	if ( y >= x y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

63
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

64
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

65
Tree	if ( TWO_POWER_53 >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

66
Tree	if ( TWO_POWER_53 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

67
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 3

68
Tree	if ( x >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

69
Tree	if ( x >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

70
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

71
Tree	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

72
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

73
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 2

74
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

75
Tree	if ( TWO_POWER_52 >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

76
Tree	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

77
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

78
Tree	if ( y >= TWO_POWER_52 y x <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - y ) { return pow ( - x , y ) ; }
Distance : 3

79
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

80
Tree	if ( TWO_POWER_52 >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

81
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

82
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

83
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 2

84
Tree	if ( y >= y y x <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= y y x <= - y ) { return pow ( - x , y ) ; }
Distance : 3

85
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

86
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

87
Tree	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

88
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

89
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

90
Tree	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

91
Tree	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

92
Tree	if ( x >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

93
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

94
Tree	if ( y >= TWO_POWER_53 y x <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y x <= - y ) { return pow ( - x , y ) ; }
Distance : 2

95
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

96
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 3

97
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 2

98
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , x ) ; }
Distance : 3

99
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_53 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_53 ) ; }
Distance : 3

100
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

101
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

102
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 3

103
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 2

104
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

105
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 2

106
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

107
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

108
Tree	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Distance : 3

109
Tree	if ( y >= y y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - x ) { return pow ( - x , y ) ; }
Distance : 3

110
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_53 ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_53 ) ; }
Distance : 3

111
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

112
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

113
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_53 ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_53 ) ; }
Distance : 2

114
Tree	if ( x >= y y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

115
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

116
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - y , y ) ; }
Distance : 4

117
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

118
Tree	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

119
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

120
Tree	if ( y >= x y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= x y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

121
Tree	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

122
Tree	if ( y >= x y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

123
Tree	if ( y >= TWO_POWER_53 y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - x ) { return pow ( - x , y ) ; }
Distance : 2

124
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

125
Tree	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

126
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Distance : 4

127
Tree	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

128
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 2

129
Tree	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - y , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - y , y ) ; }
Distance : 4

130
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

131
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

132
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - y , y ) ; }
Distance : 3

133
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

134
Tree	if ( y >= x y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

135
Tree	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

136
Tree	if ( y >= y y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 3

137
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

138
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

139
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Distance : 4

140
Tree	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 2

141
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

142
Tree	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

143
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

144
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - y , y ) ; }
Distance : 3

145
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

146
Tree	if ( x >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

147
Tree	if ( x >= y y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= y y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

148
Tree	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 2

149
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - x ) { return pow ( - x , y ) ; }
Distance : 2

150
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

151
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - y ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

152
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

153
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 2

154
Tree	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( x >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 4

155
Tree	if ( TWO_POWER_53 >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

156
Tree	if ( TWO_POWER_53 >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= y y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

157
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

158
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

159
Tree	if ( x >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

160
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , x ) ; }
Distance : 4

161
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

162
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

163
Tree	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

164
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 4

165
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

166
Tree	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 3

167
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 3

168
Tree	if ( y >= x y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y y <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

169
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 3

170
Tree	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= y y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 3

171
Tree	if ( TWO_POWER_53 >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

172
Tree	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - y ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

173
Tree	if ( TWO_POWER_52 >= y y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= y y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

174
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , x ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , x ) ; }
Distance : 4

175
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 4

176
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

177
Tree	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 4

178
Tree	if ( TWO_POWER_52 >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

179
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , x ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , x ) ; }
Distance : 3

180
Tree	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 2

181
Tree	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_53 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 2

182
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , x ) ; }
Distance : 3

183
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

184
Tree	if ( x >= x y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( x >= x y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

185
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , x ) ; }
Distance : 4

186
Tree	if ( TWO_POWER_53 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

187
Tree	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= y y x <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 3

188
Tree	if ( TWO_POWER_53 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

189
Tree	if ( y >= y y y <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= y y y <= - y ) { return pow ( - x , x ) ; }
Distance : 4

190
Tree	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 2

191
Tree	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - x , x ) ; }
Distance : 4

192
Tree	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= x y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 3

193
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_53 <= - y ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

194
Tree	if ( TWO_POWER_53 >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= y y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 3

195
Tree	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , x ) ; }
Code	if ( y >= y y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , x ) ; }
Distance : 4

196
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_53 , y ) ; }
Distance : 3

197
Tree	if ( TWO_POWER_53 >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_53 >= TWO_POWER_53 y y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
Distance : 2

198
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_53 <= - TWO_POWER_53 ) { return pow ( - y , y ) ; }
Distance : 4

199
Tree	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_53 y x <= - TWO_POWER_53 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

1
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

2
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

3
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 4

4
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

5
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

6
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

7
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

8
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

9
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

10
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

11
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

12
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 4

13
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

14
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

15
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 4

16
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 4

17
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

18
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

19
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

20
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

21
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

22
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 4

23
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

24
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 4

25
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

26
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 4

27
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

28
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

29
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

30
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

31
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

32
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

33
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

34
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

35
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

36
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

37
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

38
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 4

39
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

40
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

41
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

42
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

43
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

44
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

45
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

46
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

47
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

48
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 4

49
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

50
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

51
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Distance : 5

52
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

53
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

54
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

55
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

56
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

57
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

58
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

59
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

60
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

61
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

62
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

63
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( dim )
Distance : 5

64
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

65
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 4

66
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

67
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

68
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

69
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

70
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

71
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

72
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

73
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

74
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

75
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

76
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

77
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

78
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

79
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

80
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

81
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

82
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

83
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

84
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

85
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

86
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

87
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

88
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

89
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

90
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

91
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

92
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

93
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

94
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

95
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

96
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

97
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

98
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

99
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

100
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

101
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

102
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

103
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 4

104
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

105
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

106
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

107
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

108
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

109
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Distance : 6

110
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

111
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

112
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

113
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

114
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

115
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

116
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

117
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

118
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Distance : 6

119
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

120
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

121
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

122
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 4

123
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

124
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

125
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

126
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

127
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

128
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( dim )
Distance : 6

129
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

130
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

131
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

132
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

133
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

134
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

135
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

136
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

137
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

138
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

139
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

140
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

141
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

142
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

143
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

144
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

145
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

146
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( dim )
Distance : 6

147
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

148
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

149
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

150
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

151
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

152
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

153
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

154
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

155
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

156
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

157
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

158
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( covarianceMatrixDeterminant )
Distance : 5

159
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

160
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

161
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

162
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

163
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

164
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

165
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

166
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

167
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

168
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

169
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

170
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

171
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

172
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

173
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

174
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

175
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

176
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

177
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - vals / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

178
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 5

179
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

180
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

181
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

182
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

183
Tree	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	covarianceMatrixDeterminant . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

184
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * vals . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

185
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

186
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

187
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

188
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

189
Tree	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	vals . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

190
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

191
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * dim . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 5

192
Tree	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . getExponentTerm ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

193
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( dim )
Distance : 5

194
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( FastMath )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( FastMath )
Distance : 5

195
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * dim . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( covarianceMatrixDeterminant )
Distance : 6

196
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . getExponentTerm ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

197
Tree	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Code	dim . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( FastMath )
Distance : 5

198
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * vals . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 6

199
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - covarianceMatrixDeterminant / NUMBER_CONSTANT ) * covarianceMatrixDeterminant . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; index
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; index
Distance : 2

1
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; options
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; options
Distance : 2

2
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; p
Distance : 2

3
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; &&
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; &&
Distance : 2

4
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; T
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; T
Distance : 2

5
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; super
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; super
Distance : 2

6
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; value
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; value
Distance : 2

7
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; class
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; class
Distance : 2

8
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Object
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Object
Distance : 2

9
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; MathRuntimeException
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; MathRuntimeException
Distance : 2

10
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Override
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Override
Distance : 2

11
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; assertEquals
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; assertEquals
Distance : 2

12
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; !
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; !
Distance : 2

13
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; []
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; []
Distance : 2

14
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; nullNotPermitted
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; nullNotPermitted
Distance : 2

15
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; throw
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; throw
Distance : 2

16
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; catch
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; catch
Distance : 2

17
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; void
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; void
Distance : 2

18
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ==
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ==
Distance : 2

19
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; double
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; double
Distance : 2

20
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; node
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; node
Distance : 2

21
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; >
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; >
Distance : 2

22
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; source
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; source
Distance : 2

23
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; null
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; null
Distance : 2

24
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; toString
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; toString
Distance : 2

25
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; @
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; @
Distance : 2

26
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; mock
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; mock
Distance : 2

27
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; {}
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; {}
Distance : 2

28
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; if
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; if
Distance : 2

29
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <
Distance : 2

30
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; this
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; this
Distance : 2

31
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; final
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; final
Distance : 2

32
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; =
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; =
Distance : 2

33
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; }
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; }
Distance : 2

34
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; mode
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; mode
Distance : 2

35
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ()
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ()
Distance : 2

36
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <blank>
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <blank>
Distance : 2

37
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; new
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; new
Distance : 2

38
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <s>
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <s>
Distance : 2

39
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; (
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; (
Distance : 2

40
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ;
Distance : 2

41
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; )
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; )
Distance : 2

42
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; .
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; .
Distance : 2

43
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ,
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ,
Distance : 2

44
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; +
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; +
Distance : 2

45
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; {
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; {
Distance : 2

46
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; test
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; test
Distance : 2

47
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; false
Distance : 2

48
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; true
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; true
Distance : 2

49
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; new
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; new
Distance : 2

50
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; dataset
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; dataset
Distance : 2

51
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; IllegalArgumentException
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; IllegalArgumentException
Distance : 2

52
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; reportCodeChange
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; reportCodeChange
Distance : 2

53
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; FastMath
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; FastMath
Distance : 2

54
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; expected
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; expected
Distance : 2

55
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; -
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; -
Distance : 2

56
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; invocations
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; invocations
Distance : 2

57
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; [
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; [
Distance : 2

58
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Preconditions
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Preconditions
Distance : 2

59
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; char
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; char
Distance : 2

60
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; isEmpty
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; isEmpty
Distance : 2

61
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; JSType
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; JSType
Distance : 2

62
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; get
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; get
Distance : 2

63
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; abs
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; abs
Distance : 2

64
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; matcher
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; matcher
Distance : 2

65
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; setAcceptedLanguage
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; setAcceptedLanguage
Distance : 2

66
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; static
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; static
Distance : 2

67
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; values
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; values
Distance : 2

68
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; protected
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; protected
Distance : 2

69
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ]
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ]
Distance : 2

70
Tree	iterations = new MaxIterCallback ( NUMBER_CONSTANT , new Incrementor () ) ;
Code	iterations = new MaxIterCallback ( NUMBER_CONSTANT , new Incrementor () ) ;
Distance : 3

71
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new Incrementor () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new Incrementor () ) ;
Distance : 2

72
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; return
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; return
Distance : 2

73
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; PlotChangeEvent
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; PlotChangeEvent
Distance : 2

74
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; NUMBER_CONSTANT
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; NUMBER_CONSTANT
Distance : 2

75
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; out
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; out
Distance : 2

76
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; d
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; d
Distance : 2

77
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; equals
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; equals
Distance : 2

78
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; for
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; for
Distance : 2

79
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Invocation
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Invocation
Distance : 2

80
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; /
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; /
Distance : 2

81
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; long
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; long
Distance : 2

82
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; assertTrue
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; assertTrue
Distance : 2

83
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; public
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; public
Distance : 2

84
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; externs
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; externs
Distance : 2

85
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; StrBuilder
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; StrBuilder
Distance : 2

86
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; TestUtilities
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; TestUtilities
Distance : 2

87
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; js
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; js
Distance : 2

88
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getMessage
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getMessage
Distance : 2

89
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; stream
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; stream
Distance : 2

90
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; else
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; else
Distance : 2

91
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; instant
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; instant
Distance : 2

92
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; s
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; s
Distance : 2

93
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; isNormalBlock
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; isNormalBlock
Distance : 2

94
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; reportMatcher
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; reportMatcher
Distance : 2

95
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Collection
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Collection
Distance : 2

96
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getField
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getField
Distance : 2

97
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; STRING_CONSTANT
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; STRING_CONSTANT
Distance : 2

98
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; obj
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; obj
Distance : 2

99
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Distance : 1

100
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; traverseEs6
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; traverseEs6
Distance : 2

101
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; size
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; size
Distance : 2

102
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; return;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; return;
Distance : 2

103
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; mockingProgress
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; mockingProgress
Distance : 2

104
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; a
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; a
Distance : 2

105
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; LanguageMode.ECMASCRIPT_2015
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; LanguageMode.ECMASCRIPT_2015
Distance : 2

106
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; MutableTimePeriod
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; MutableTimePeriod
Distance : 2

107
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; b
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; b
Distance : 2

108
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; scope
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; scope
Distance : 2

109
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; throws
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; throws
Distance : 2

110
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; StringBuilder
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; StringBuilder
Distance : 2

111
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; returnZero
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; returnZero
Distance : 2

112
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Double
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Double
Distance : 2

113
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; PeriodType
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; PeriodType
Distance : 2

114
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; clone
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; clone
Distance : 2

115
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; sqrt
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; sqrt
Distance : 2

116
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; isBlock
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; isBlock
Distance : 2

117
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; append
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; append
Distance : 2

118
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; sb
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; sb
Distance : 2

119
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; LanguageMode.ECMASCRIPT6
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; LanguageMode.ECMASCRIPT6
Distance : 2

120
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; stroke
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; stroke
Distance : 2

121
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getFirstChild
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getFirstChild
Distance : 2

122
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; contains
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; contains
Distance : 2

123
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; chrono
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; chrono
Distance : 2

124
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; UnivariateFunction
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; UnivariateFunction
Distance : 2

125
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; lines
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; lines
Distance : 2

126
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; verify
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; verify
Distance : 2

127
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; str
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; str
Distance : 2

128
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; LINE_JOINER
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; LINE_JOINER
Distance : 2

129
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; assertThat
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; assertThat
Distance : 2

130
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; invocation
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; invocation
Distance : 2

131
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ArrayList
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ArrayList
Distance : 2

132
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; fireChangeEvent
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; fireChangeEvent
Distance : 2

133
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getInstance
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getInstance
Distance : 2

134
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; serialised
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; serialised
Distance : 2

135
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; createIllegalArgumentException
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; createIllegalArgumentException
Distance : 2

136
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; parent
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; parent
Distance : 2

137
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; x
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; x
Distance : 2

138
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; testSame
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; testSame
Distance : 2

139
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; :
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; :
Distance : 2

140
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; fail
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; fail
Distance : 2

141
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; List
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; List
Distance : 2

142
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Args
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Args
Distance : 2

143
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; alpha
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; alpha
Distance : 2

144
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; f
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; f
Distance : 2

145
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; valueOf
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; valueOf
Distance : 2

146
Tree	iterations = new MaxIterCallback ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Code	iterations = new MaxIterCallback ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Distance : 2

147
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <>
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <>
Distance : 2

148
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ParamChecks
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ParamChecks
Distance : 2

149
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ?
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ?
Distance : 2

150
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; result
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; result
Distance : 2

151
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; try
Distance : 2

152
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; join
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; join
Distance : 2

153
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; boolean
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; boolean
Distance : 2

154
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; *
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; *
Distance : 2

155
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; type
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; type
Distance : 2

156
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; TestUtils
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; TestUtils
Distance : 2

157
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; length
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; length
Distance : 2

158
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; v
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; v
Distance : 2

159
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; checkNotNull
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; checkNotNull
Distance : 2

160
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Integer
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Integer
Distance : 2

161
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; NodeUtil
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; NodeUtil
Distance : 2

162
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; root
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; root
Distance : 2

163
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Math
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Math
Distance : 2

164
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; checkArgument
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; checkArgument
Distance : 2

165
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; field
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; field
Distance : 2

166
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; t
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; t
Distance : 2

167
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; name
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; name
Distance : 2

168
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; data
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; data
Distance : 2

169
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; NodeTraversal
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; NodeTraversal
Distance : 2

170
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; wanted
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; wanted
Distance : 2

171
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; paint
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; paint
Distance : 2

172
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; m
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; m
Distance : 2

173
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ex
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; ex
Distance : 2

174
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Assert
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Assert
Distance : 2

175
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Test
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Test
Distance : 2

176
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Class
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Class
Distance : 2

177
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; notifyListeners
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; notifyListeners
Distance : 2

178
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; c
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; c
Distance : 2

179
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; n
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; n
Distance : 2

180
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; e
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; e
Distance : 2

181
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; String
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; String
Distance : 2

182
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; add
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; add
Distance : 2

183
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; checkState
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; checkState
Distance : 2

184
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; compiler
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; compiler
Distance : 2

185
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; i
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; i
Distance : 2

186
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; !=
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; !=
Distance : 2

187
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; simpleMethod
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; simpleMethod
Distance : 2

188
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getArgumentMatcherStorage
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getArgumentMatcherStorage
Distance : 2

189
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; y
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; y
Distance : 2

190
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; optimizer
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; optimizer
Distance : 2

191
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getParent
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; getParent
Distance : 2

192
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; setUp
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; setUp
Distance : 2

193
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Fraction
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Fraction
Distance : 2

194
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; array
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; array
Distance : 2

195
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; int
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; int
Distance : 2

196
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Exception
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Exception
Distance : 2

197
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Node
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Node
Distance : 2

198
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; instance
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; instance
Distance : 2

199
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <=
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; <=
Distance : 2

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <>
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <>
Distance : 1

1
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } c
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } c
Distance : 1

2
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } type
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } type
Distance : 1

3
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } try
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } try
Distance : 1

4
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } *
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } *
Distance : 1

5
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Args
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Args
Distance : 1

6
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } notifyListeners
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } notifyListeners
Distance : 1

7
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } fail
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } fail
Distance : 1

8
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } :
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } :
Distance : 1

9
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } List
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } List
Distance : 1

10
Tree	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

11
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Distance : 2

12
Tree	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

13
Tree	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Code	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

14
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

15
Tree	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

16
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

17
Tree	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Code	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

18
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

19
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Distance : 2

20
Tree	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Code	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

21
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

22
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } boolean
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } boolean
Distance : 1

23
Tree	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Distance : 2

24
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } join
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } join
Distance : 1

25
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } getInstance
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } getInstance
Distance : 1

26
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } LINE_JOINER
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } LINE_JOINER
Distance : 1

27
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } str
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } str
Distance : 1

28
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } createIllegalArgumentException
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } createIllegalArgumentException
Distance : 1

29
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } parent
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } parent
Distance : 1

30
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } x
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } x
Distance : 1

31
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } testSame
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } testSame
Distance : 1

32
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } IllegalArgumentException
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } IllegalArgumentException
Distance : 1

33
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } reportCodeChange
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } reportCodeChange
Distance : 1

34
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } FastMath
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } FastMath
Distance : 1

35
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } expected
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } expected
Distance : 1

36
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } name
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } name
Distance : 1

37
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } t
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } t
Distance : 1

38
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } checkArgument
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } checkArgument
Distance : 1

39
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } array
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } array
Distance : 1

40
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } invocation
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } invocation
Distance : 1

41
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } paint
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } paint
Distance : 1

42
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } field
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } field
Distance : 1

43
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } result
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } result
Distance : 1

44
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } m
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } m
Distance : 1

45
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ArrayList
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ArrayList
Distance : 1

46
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } fireChangeEvent
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } fireChangeEvent
Distance : 1

47
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } serialised
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } serialised
Distance : 1

48
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } assertThat
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } assertThat
Distance : 1

49
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

50
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

51
Tree	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Distance : 3

52
Tree	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

53
Tree	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

54
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

55
Tree	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

56
Tree	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Code	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Distance : 3

57
Tree	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

58
Tree	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Distance : 3

59
Tree	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

60
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Distance : 2

61
Tree	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Code	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

62
Tree	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

63
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

64
Tree	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

65
Tree	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Code	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Distance : 2

66
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return real ; }
Distance : 3

67
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

68
Tree	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Code	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

69
Tree	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

70
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Distance : 2

71
Tree	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

72
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Distance : 3

73
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return real ; }
Distance : 1

74
Tree	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Code	if ( INF == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Distance : 3

75
Tree	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return real ; }
Distance : 3

76
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Distance : 1

77
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

78
Tree	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Code	if ( INF == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Distance : 1

79
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

80
Tree	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

81
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return INF ; }
Distance : 1

82
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 1

83
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

84
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Distance : 1

85
Tree	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Code	if ( real == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Distance : 1

86
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

87
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return INF ; }
Distance : 1

88
Tree	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Code	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

89
Tree	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Code	if ( imaginary == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return INF ; }
Distance : 2

90
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

91
Tree	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

92
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

93
Tree	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Distance : 3

94
Tree	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( NaN == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

95
Tree	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Code	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return real ; }
Distance : 3

96
Tree	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( INF == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

97
Tree	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( NaN == NUMBER_CONSTANT && INF == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

98
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Class
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Class
Distance : 1

99
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
Distance : 0

100
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } p
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } p
Distance : 1

101
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ()
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ()
Distance : 1

102
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } }
Distance : 1

103
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } =
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } =
Distance : 1

104
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } @
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } @
Distance : 1

105
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } double
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } double
Distance : 1

106
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <s>
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <s>
Distance : 1

107
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } {}
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } {}
Distance : 1

108
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ParamChecks
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ParamChecks
Distance : 1

109
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } f
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } f
Distance : 1

110
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Override
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Override
Distance : 1

111
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } MathRuntimeException
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } MathRuntimeException
Distance : 1

112
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Object
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Object
Distance : 1

113
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } class
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } class
Distance : 1

114
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } assertTrue
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } assertTrue
Distance : 1

115
Tree	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( INF == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

116
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } {
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } {
Distance : 1

117
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } new
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } new
Distance : 1

118
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } externs
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } externs
Distance : 1

119
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } NUMBER_CONSTANT
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } NUMBER_CONSTANT
Distance : 1

120
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } STRING_CONSTANT
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } STRING_CONSTANT
Distance : 1

121
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } nullNotPermitted
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } nullNotPermitted
Distance : 1

122
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } []
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } []
Distance : 1

123
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } !
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } !
Distance : 1

124
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } assertEquals
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } assertEquals
Distance : 1

125
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } !=
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } !=
Distance : 1

126
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } i
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } i
Distance : 1

127
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } test
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } test
Distance : 1

128
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } checkState
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } checkState
Distance : 1

129
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } return
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } return
Distance : 1

130
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } int
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } int
Distance : 1

131
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } &&
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } &&
Distance : 1

132
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } false
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } false
Distance : 1

133
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } super
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } super
Distance : 1

134
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } value
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } value
Distance : 1

135
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } T
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } T
Distance : 1

136
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } NodeTraversal
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } NodeTraversal
Distance : 1

137
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } +
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } +
Distance : 1

138
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ,
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ,
Distance : 1

139
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } .
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } .
Distance : 1

140
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } )
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } )
Distance : 1

141
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ;
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ;
Distance : 1

142
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } String
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } String
Distance : 1

143
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } e
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } e
Distance : 1

144
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } source
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } source
Distance : 1

145
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } toString
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } toString
Distance : 1

146
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ex
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ex
Distance : 1

147
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } null
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } null
Distance : 1

148
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <blank>
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <blank>
Distance : 1

149
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } throw
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } throw
Distance : 1

150
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } StrBuilder
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } StrBuilder
Distance : 1

151
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } public
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } public
Distance : 1

152
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } final
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } final
Distance : 1

153
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } this
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } this
Distance : 1

154
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } <
Distance : 1

155
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } if
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } if
Distance : 1

156
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } reportMatcher
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } reportMatcher
Distance : 1

157
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } TestUtilities
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } TestUtilities
Distance : 1

158
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } js
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } js
Distance : 1

159
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Invocation
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Invocation
Distance : 1

160
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } for
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } for
Distance : 1

161
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } equals
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } equals
Distance : 1

162
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } d
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } d
Distance : 1

163
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } compiler
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } compiler
Distance : 1

164
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } add
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } add
Distance : 1

165
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } >
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } >
Distance : 1

166
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } data
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } data
Distance : 1

167
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } {
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } {
Distance : 1

168
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } NodeUtil
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } NodeUtil
Distance : 1

169
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } long
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } long
Distance : 1

170
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } /
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } /
Distance : 1

171
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Fraction
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Fraction
Distance : 1

172
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } checkNotNull
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } checkNotNull
Distance : 1

173
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ?
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ?
Distance : 1

174
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Assert
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Assert
Distance : 1

175
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ]
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ]
Distance : 1

176
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } [
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } [
Distance : 1

177
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Preconditions
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Preconditions
Distance : 1

178
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } -
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } -
Distance : 1

179
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } mode
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } mode
Distance : 1

180
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } true
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } true
Distance : 1

181
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } mock
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } mock
Distance : 1

182
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } (
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } (
Distance : 1

183
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } options
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } options
Distance : 1

184
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } n
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } n
Distance : 1

185
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } catch
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } catch
Distance : 1

186
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } void
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } void
Distance : 1

187
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ==
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } ==
Distance : 1

188
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Node
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Node
Distance : 1

189
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Exception
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Exception
Distance : 1

190
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } lines
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } lines
Distance : 1

191
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } verify
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } verify
Distance : 1

192
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Integer
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Integer
Distance : 1

193
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } v
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } v
Distance : 1

194
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } length
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } length
Distance : 1

195
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } TestUtils
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } TestUtils
Distance : 1

196
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Math
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Math
Distance : 1

197
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } root
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } root
Distance : 1

198
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } wanted
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } wanted
Distance : 1

199
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Test
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; } Test
Distance : 1

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new Reporter () . smartNullPointerException ( obj ) ; invocations
Code	new Reporter () . smartNullPointerException ( obj ) ; invocations
Distance : 3

1
Tree	new Reporter () . smartNullPointerException ( obj ) ; Class
Code	new Reporter () . smartNullPointerException ( obj ) ; Class
Distance : 3

2
Tree	new Reporter () . smartNullPointerException ( obj ) ; {}
Code	new Reporter () . smartNullPointerException ( obj ) ; {}
Distance : 3

3
Tree	new Reporter () . smartNullPointerException ( obj ) ; mock
Code	new Reporter () . smartNullPointerException ( obj ) ; mock
Distance : 3

4
Tree	new Reporter () . smartNullPointerException ( obj ) ; f
Code	new Reporter () . smartNullPointerException ( obj ) ; f
Distance : 3

5
Tree	new Reporter () . smartNullPointerException ( obj ) ; ParamChecks
Code	new Reporter () . smartNullPointerException ( obj ) ; ParamChecks
Distance : 3

6
Tree	new Reporter () . smartNullPointerException ( obj ) ; -
Code	new Reporter () . smartNullPointerException ( obj ) ; -
Distance : 3

7
Tree	new Reporter () . smartNullPointerException ( obj ) ; Preconditions
Code	new Reporter () . smartNullPointerException ( obj ) ; Preconditions
Distance : 3

8
Tree	new Reporter () . smartNullPointerException ( obj ) ; T
Code	new Reporter () . smartNullPointerException ( obj ) ; T
Distance : 3

9
Tree	new Reporter () . smartNullPointerException ( obj ) ; &&
Code	new Reporter () . smartNullPointerException ( obj ) ; &&
Distance : 3

10
Tree	new Reporter () . smartNullPointerException ( obj ) ; ]
Code	new Reporter () . smartNullPointerException ( obj ) ; ]
Distance : 3

11
Tree	new Reporter () . smartNullPointerException ( obj ) ; [
Code	new Reporter () . smartNullPointerException ( obj ) ; [
Distance : 3

12
Tree	new Reporter () . smartNullPointerException ( obj ) ; Object
Code	new Reporter () . smartNullPointerException ( obj ) ; Object
Distance : 3

13
Tree	new Reporter () . smartNullPointerException ( obj ) ; class
Code	new Reporter () . smartNullPointerException ( obj ) ; class
Distance : 3

14
Tree	new Reporter () . smartNullPointerException ( obj ) ; test
Code	new Reporter () . smartNullPointerException ( obj ) ; test
Distance : 3

15
Tree	new Reporter () . smartNullPointerException ( obj ) ; @
Code	new Reporter () . smartNullPointerException ( obj ) ; @
Distance : 3

16
Tree	new Reporter () . smartNullPointerException ( obj ) ; !
Code	new Reporter () . smartNullPointerException ( obj ) ; !
Distance : 3

17
Tree	new Reporter () . smartNullPointerException ( obj ) ; assertEquals
Code	new Reporter () . smartNullPointerException ( obj ) ; assertEquals
Distance : 3

18
Tree	new Reporter () . smartNullPointerException ( obj ) ; ==
Code	new Reporter () . smartNullPointerException ( obj ) ; ==
Distance : 3

19
Tree	new Reporter () . smartNullPointerException ( obj ) ; void
Code	new Reporter () . smartNullPointerException ( obj ) ; void
Distance : 3

20
Tree	new Reporter () . smartNullPointerException ( obj ) ; []
Code	new Reporter () . smartNullPointerException ( obj ) ; []
Distance : 3

21
Tree	new Reporter () . smartNullPointerException ( obj ) ; checkState
Code	new Reporter () . smartNullPointerException ( obj ) ; checkState
Distance : 3

22
Tree	new Reporter () . smartNullPointerException ( obj ) ; Test
Code	new Reporter () . smartNullPointerException ( obj ) ; Test
Distance : 3

23
Tree	new Reporter () . smartNullPointerException ( obj ) ; out
Code	new Reporter () . smartNullPointerException ( obj ) ; out
Distance : 3

24
Tree	new Reporter () . smartNullPointerException ( obj ) ; nullNotPermitted
Code	new Reporter () . smartNullPointerException ( obj ) ; nullNotPermitted
Distance : 3

25
Tree	new Reporter () . smartNullPointerException ( obj ) ; n
Code	new Reporter () . smartNullPointerException ( obj ) ; n
Distance : 3

26
Tree	new Reporter () . smartNullPointerException ( obj ) ; !=
Code	new Reporter () . smartNullPointerException ( obj ) ; !=
Distance : 3

27
Tree	new Reporter () . smartNullPointerException ( obj ) ; i
Code	new Reporter () . smartNullPointerException ( obj ) ; i
Distance : 3

28
Tree	new Reporter () . smartNullPointerException ( obj ) ; MathRuntimeException
Code	new Reporter () . smartNullPointerException ( obj ) ; MathRuntimeException
Distance : 3

29
Tree	new Reporter () . smartNullPointerException ( obj ) ; Override
Code	new Reporter () . smartNullPointerException ( obj ) ; Override
Distance : 3

30
Tree	new Reporter () . smartNullPointerException ( obj ) ; public
Code	new Reporter () . smartNullPointerException ( obj ) ; public
Distance : 3

31
Tree	new Reporter () . smartNullPointerException ( obj ) ; >
Code	new Reporter () . smartNullPointerException ( obj ) ; >
Distance : 3

32
Tree	new Reporter () . smartNullPointerException ( obj ) ; new
Code	new Reporter () . smartNullPointerException ( obj ) ; new
Distance : 3

33
Tree	new Reporter () . smartNullPointerException ( obj ) ; STRING_CONSTANT
Code	new Reporter () . smartNullPointerException ( obj ) ; STRING_CONSTANT
Distance : 3

34
Tree	new Reporter () . smartNullPointerException ( obj ) ; ,
Code	new Reporter () . smartNullPointerException ( obj ) ; ,
Distance : 3

35
Tree	new Reporter () . smartNullPointerException ( obj ) ; .
Code	new Reporter () . smartNullPointerException ( obj ) ; .
Distance : 3

36
Tree	new Reporter () . smartNullPointerException ( obj ) ; }
Code	new Reporter () . smartNullPointerException ( obj ) ; }
Distance : 3

37
Tree	new Reporter () . smartNullPointerException ( obj ) ; =
Code	new Reporter () . smartNullPointerException ( obj ) ; =
Distance : 3

38
Tree	new Reporter () . smartNullPointerException ( obj ) ; (
Code	new Reporter () . smartNullPointerException ( obj ) ; (
Distance : 3

39
Tree	new Reporter () . smartNullPointerException ( obj ) ; <s>
Code	new Reporter () . smartNullPointerException ( obj ) ; <s>
Distance : 3

40
Tree	new Reporter () . smartNullPointerException ( obj ) ; <blank>
Code	new Reporter () . smartNullPointerException ( obj ) ; <blank>
Distance : 3

41
Tree	new Reporter () . smartNullPointerException ( obj ) ; new
Code	new Reporter () . smartNullPointerException ( obj ) ; new
Distance : 3

42
Tree	new Reporter () . smartNullPointerException ( obj ) ; )
Code	new Reporter () . smartNullPointerException ( obj ) ; )
Distance : 3

43
Tree	new Reporter () . smartNullPointerException ( obj ) ; ;
Code	new Reporter () . smartNullPointerException ( obj ) ; ;
Distance : 3

44
Tree	new Reporter () . smartNullPointerException ( obj ) ; ()
Code	new Reporter () . smartNullPointerException ( obj ) ; ()
Distance : 3

45
Tree	new Reporter () . smartNullPointerException ( obj ) ; {
Code	new Reporter () . smartNullPointerException ( obj ) ; {
Distance : 3

46
Tree	new Reporter () . smartNullPointerException ( obj ) ; false
Code	new Reporter () . smartNullPointerException ( obj ) ; false
Distance : 3

47
Tree	new Reporter () . smartNullPointerException ( obj ) ; int
Code	new Reporter () . smartNullPointerException ( obj ) ; int
Distance : 3

48
Tree	new Reporter () . smartNullPointerException ( obj ) ; double
Code	new Reporter () . smartNullPointerException ( obj ) ; double
Distance : 3

49
Tree	new Reporter () . smartNullPointerException ( obj ) ; e
Code	new Reporter () . smartNullPointerException ( obj ) ; e
Distance : 3

50
Tree	new Reporter () . smartNullPointerException ( obj ) ; else
Code	new Reporter () . smartNullPointerException ( obj ) ; else
Distance : 3

51
Tree	new Reporter () . smartNullPointerException ( obj ) ; NUMBER_CONSTANT
Code	new Reporter () . smartNullPointerException ( obj ) ; NUMBER_CONSTANT
Distance : 3

52
Tree	new Reporter () . smartNullPointerException ( obj ) ; this
Code	new Reporter () . smartNullPointerException ( obj ) ; this
Distance : 3

53
Tree	new Reporter () . smartNullPointerException ( obj ) ; final
Code	new Reporter () . smartNullPointerException ( obj ) ; final
Distance : 3

54
Tree	new Reporter () . smartNullPointerException ( obj ) ; name
Code	new Reporter () . smartNullPointerException ( obj ) ; name
Distance : 3

55
Tree	new Reporter () . smartNullPointerException ( obj ) ; t
Code	new Reporter () . smartNullPointerException ( obj ) ; t
Distance : 3

56
Tree	new Reporter () . smartNullPointerException ( obj ) ; Collection
Code	new Reporter () . smartNullPointerException ( obj ) ; Collection
Distance : 3

57
Tree	new Reporter () . smartNullPointerException ( obj ) ; getField
Code	new Reporter () . smartNullPointerException ( obj ) ; getField
Distance : 3

58
Tree	new Reporter () . smartNullPointerException ( obj ) ; dataset
Code	new Reporter () . smartNullPointerException ( obj ) ; dataset
Distance : 3

59
Tree	new Reporter () . smartNullPointerException ( obj ) ; protected
Code	new Reporter () . smartNullPointerException ( obj ) ; protected
Distance : 3

60
Tree	new Reporter () . smartNullPointerException ( obj ) ; PlotChangeEvent
Code	new Reporter () . smartNullPointerException ( obj ) ; PlotChangeEvent
Distance : 3

61
Tree	new Reporter () . smartNullPointerException ( obj ) ; mode
Code	new Reporter () . smartNullPointerException ( obj ) ; mode
Distance : 3

62
Tree	new Reporter () . smartNullPointerException ( obj ) ; mockingProgress
Code	new Reporter () . smartNullPointerException ( obj ) ; mockingProgress
Distance : 3

63
Tree	new Reporter () . smartNullPointerException ( obj ) ; return;
Code	new Reporter () . smartNullPointerException ( obj ) ; return;
Distance : 3

64
Tree	new Reporter () . smartNullPointerException ( obj ) ; isEmpty
Code	new Reporter () . smartNullPointerException ( obj ) ; isEmpty
Distance : 3

65
Tree	new Reporter () . smartNullPointerException ( obj ) ; char
Code	new Reporter () . smartNullPointerException ( obj ) ; char
Distance : 3

66
Tree	new Reporter () . smartNullPointerException ( obj ) ; static
Code	new Reporter () . smartNullPointerException ( obj ) ; static
Distance : 3

67
Tree	new Reporter () . smartNullPointerException ( obj ) ; setAcceptedLanguage
Code	new Reporter () . smartNullPointerException ( obj ) ; setAcceptedLanguage
Distance : 3

68
Tree	new Reporter () . smartNullPointerException ( obj ) ; JSType
Code	new Reporter () . smartNullPointerException ( obj ) ; JSType
Distance : 3

69
Tree	new Reporter () . smartNullPointerException ( obj ) ; get
Code	new Reporter () . smartNullPointerException ( obj ) ; get
Distance : 3

70
Tree	new Reporter () . smartNullPointerException ( obj ) ; getMessage
Code	new Reporter () . smartNullPointerException ( obj ) ; getMessage
Distance : 3

71
Tree	new Reporter () . smartNullPointerException ( obj ) ; true
Code	new Reporter () . smartNullPointerException ( obj ) ; true
Distance : 3

72
Tree	new Reporter () . smartNullPointerException ( obj ) ; return
Code	new Reporter () . smartNullPointerException ( obj ) ; return
Distance : 3

73
Tree	new Reporter () . smartNullPointerException ( obj ) ; if
Code	new Reporter () . smartNullPointerException ( obj ) ; if
Distance : 3

74
Tree	new Reporter () . smartNullPointerException ( obj ) ; stream
Code	new Reporter () . smartNullPointerException ( obj ) ; stream
Distance : 3

75
Tree	new Reporter () . smartNullPointerException ( obj ) ; <
Code	new Reporter () . smartNullPointerException ( obj ) ; <
Distance : 3

76
Tree	new Reporter () . smartNullPointerException ( obj ) ; solver
Code	new Reporter () . smartNullPointerException ( obj ) ; solver
Distance : 3

77
Tree	new Reporter () . smartNullPointerException ( obj ) ; pattern
Code	new Reporter () . smartNullPointerException ( obj ) ; pattern
Distance : 3

78
Tree	new Reporter () . smartNullPointerException ( obj ) ; js
Code	new Reporter () . smartNullPointerException ( obj ) ; js
Distance : 3

79
Tree	new Reporter () . smartNullPointerException ( obj ) ; TestUtilities
Code	new Reporter () . smartNullPointerException ( obj ) ; TestUtilities
Distance : 3

80
Tree	new Reporter () . smartNullPointerException ( obj ) ; equals
Code	new Reporter () . smartNullPointerException ( obj ) ; equals
Distance : 3

81
Tree	new Reporter () . smartNullPointerException ( obj ) ; d
Code	new Reporter () . smartNullPointerException ( obj ) ; d
Distance : 3

82
Tree	new Reporter () . smartNullPointerException ( obj ) ; externs
Code	new Reporter () . smartNullPointerException ( obj ) ; externs
Distance : 3

83
Tree	new Reporter () . smartNullPointerException ( obj ) ; assertTrue
Code	new Reporter () . smartNullPointerException ( obj ) ; assertTrue
Distance : 3

84
Tree	new Reporter () . smartNullPointerException ( obj ) ; for
Code	new Reporter () . smartNullPointerException ( obj ) ; for
Distance : 3

85
Tree	new Reporter () . smartNullPointerException ( obj ) ; Invocation
Code	new Reporter () . smartNullPointerException ( obj ) ; Invocation
Distance : 3

86
Tree	new Reporter () . smartNullPointerException ( obj ) ; getParent
Code	new Reporter () . smartNullPointerException ( obj ) ; getParent
Distance : 3

87
Tree	new Reporter () . smartNullPointerException ( obj ) ; setUp
Code	new Reporter () . smartNullPointerException ( obj ) ; setUp
Distance : 3

88
Tree	new Reporter () . smartNullPointerException ( obj ) ; StrBuilder
Code	new Reporter () . smartNullPointerException ( obj ) ; StrBuilder
Distance : 3

89
Tree	new Reporter () . smartNullPointerException ( obj ) ; reportMatcher
Code	new Reporter () . smartNullPointerException ( obj ) ; reportMatcher
Distance : 3

90
Tree	new Reporter () . smartNullPointerException ( obj ) ; index
Code	new Reporter () . smartNullPointerException ( obj ) ; index
Distance : 3

91
Tree	new Reporter () . smartNullPointerException ( obj ) ; node
Code	new Reporter () . smartNullPointerException ( obj ) ; node
Distance : 3

92
Tree	new Reporter () . smartNullPointerException ( obj ) ; matcher
Code	new Reporter () . smartNullPointerException ( obj ) ; matcher
Distance : 3

93
Tree	new Reporter () . smartNullPointerException ( obj ) ; abs
Code	new Reporter () . smartNullPointerException ( obj ) ; abs
Distance : 3

94
Tree	new Reporter () . smartNullPointerException ( obj ) ; Double
Code	new Reporter () . smartNullPointerException ( obj ) ; Double
Distance : 3

95
Tree	new Reporter () . smartNullPointerException ( obj ) ; PeriodType
Code	new Reporter () . smartNullPointerException ( obj ) ; PeriodType
Distance : 3

96
Tree	new Reporter () . smartNullPointerException ( obj ) ; instant
Code	new Reporter () . smartNullPointerException ( obj ) ; instant
Distance : 3

97
Tree	new Reporter () . smartNullPointerException ( obj ) ; values
Code	new Reporter () . smartNullPointerException ( obj ) ; values
Distance : 3

98
Tree	new Reporter () . smartNullPointerException ( obj ) ; isNormalBlock
Code	new Reporter () . smartNullPointerException ( obj ) ; isNormalBlock
Distance : 3

99
Tree	new Reporter () . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) ;
Distance : 2

100
Tree	new Reporter () . smartNullPointerException ( obj ) ; contains
Code	new Reporter () . smartNullPointerException ( obj ) ; contains
Distance : 3

101
Tree	new Reporter () . smartNullPointerException ( obj ) ; <=
Code	new Reporter () . smartNullPointerException ( obj ) ; <=
Distance : 3

102
Tree	new Reporter () . smartNullPointerException ( obj ) ; a
Code	new Reporter () . smartNullPointerException ( obj ) ; a
Distance : 3

103
Tree	new Reporter () . smartNullPointerException ( obj ) ; LanguageMode.ECMASCRIPT_2015
Code	new Reporter () . smartNullPointerException ( obj ) ; LanguageMode.ECMASCRIPT_2015
Distance : 3

104
Tree	new Reporter () . smartNullPointerException ( obj ) ; size
Code	new Reporter () . smartNullPointerException ( obj ) ; size
Distance : 3

105
Tree	new Reporter () . smartNullPointerException ( obj ) ; StringBuilder
Code	new Reporter () . smartNullPointerException ( obj ) ; StringBuilder
Distance : 3

106
Tree	new Reporter () . smartNullPointerException ( obj ) ; b
Code	new Reporter () . smartNullPointerException ( obj ) ; b
Distance : 3

107
Tree	new Reporter () . smartNullPointerException ( obj ) ; MutableTimePeriod
Code	new Reporter () . smartNullPointerException ( obj ) ; MutableTimePeriod
Distance : 3

108
Tree	new Reporter () . smartNullPointerException ( obj ) ; stroke
Code	new Reporter () . smartNullPointerException ( obj ) ; stroke
Distance : 3

109
Tree	new Reporter () . smartNullPointerException ( obj ) ; traverseEs6
Code	new Reporter () . smartNullPointerException ( obj ) ; traverseEs6
Distance : 3

110
Tree	new Reporter () . smartNullPointerException ( obj ) ; UnivariateFunction
Code	new Reporter () . smartNullPointerException ( obj ) ; UnivariateFunction
Distance : 3

111
Tree	new Reporter () . smartNullPointerException ( obj ) ; sb
Code	new Reporter () . smartNullPointerException ( obj ) ; sb
Distance : 3

112
Tree	new Reporter () . smartNullPointerException ( obj ) ; throws
Code	new Reporter () . smartNullPointerException ( obj ) ; throws
Distance : 3

113
Tree	new Reporter () . smartNullPointerException ( obj ) ; scope
Code	new Reporter () . smartNullPointerException ( obj ) ; scope
Distance : 3

114
Tree	new Reporter () . smartNullPointerException ( obj ) ; sqrt
Code	new Reporter () . smartNullPointerException ( obj ) ; sqrt
Distance : 3

115
Tree	new Reporter () . smartNullPointerException ( obj ) ; clone
Code	new Reporter () . smartNullPointerException ( obj ) ; clone
Distance : 3

116
Tree	new Reporter () . smartNullPointerException ( obj ) ; returnZero
Code	new Reporter () . smartNullPointerException ( obj ) ; returnZero
Distance : 3

117
Tree	new Reporter () . smartNullPointerException ( obj ) ; getFirstChild
Code	new Reporter () . smartNullPointerException ( obj ) ; getFirstChild
Distance : 3

118
Tree	new Reporter () . smartNullPointerException ( obj ) ; simpleMethod
Code	new Reporter () . smartNullPointerException ( obj ) ; simpleMethod
Distance : 3

119
Tree	new Reporter () . smartNullPointerException ( obj ) ; getArgumentMatcherStorage
Code	new Reporter () . smartNullPointerException ( obj ) ; getArgumentMatcherStorage
Distance : 3

120
Tree	new Reporter () . smartNullPointerException ( obj ) ; append
Code	new Reporter () . smartNullPointerException ( obj ) ; append
Distance : 3

121
Tree	new Reporter () . smartNullPointerException ( obj ) ; optimizer
Code	new Reporter () . smartNullPointerException ( obj ) ; optimizer
Distance : 3

122
Tree	new Reporter () . smartNullPointerException ( obj ) ; obj
Code	new Reporter () . smartNullPointerException ( obj ) ; obj
Distance : 3

123
Tree	new Reporter () . smartNullPointerException ( obj ) ; chrono
Code	new Reporter () . smartNullPointerException ( obj ) ; chrono
Distance : 3

124
Tree	new Reporter () . smartNullPointerException ( obj ) ; isBlock
Code	new Reporter () . smartNullPointerException ( obj ) ; isBlock
Distance : 3

125
Tree	new Reporter () . smartNullPointerException ( obj ) ; <>
Code	new Reporter () . smartNullPointerException ( obj ) ; <>
Distance : 3

126
Tree	new Reporter () . smartNullPointerException ( obj ) ; Integer
Code	new Reporter () . smartNullPointerException ( obj ) ; Integer
Distance : 3

127
Tree	new Reporter () . smartNullPointerException ( obj ) ; v
Code	new Reporter () . smartNullPointerException ( obj ) ; v
Distance : 3

128
Tree	new Reporter () . smartNullPointerException ( obj ) ; reportCodeChange
Code	new Reporter () . smartNullPointerException ( obj ) ; reportCodeChange
Distance : 3

129
Tree	new Reporter () . smartNullPointerException ( obj ) ; IllegalArgumentException
Code	new Reporter () . smartNullPointerException ( obj ) ; IllegalArgumentException
Distance : 3

130
Tree	new Reporter () . smartNullPointerException ( obj ) ; invocation
Code	new Reporter () . smartNullPointerException ( obj ) ; invocation
Distance : 3

131
Tree	new Reporter () . smartNullPointerException ( obj ) ; assertThat
Code	new Reporter () . smartNullPointerException ( obj ) ; assertThat
Distance : 3

132
Tree	new Reporter () . smartNullPointerException ( obj ) ; FastMath
Code	new Reporter () . smartNullPointerException ( obj ) ; FastMath
Distance : 3

133
Tree	new Reporter () . smartNullPointerException ( obj ) ; expected
Code	new Reporter () . smartNullPointerException ( obj ) ; expected
Distance : 3

134
Tree	new Reporter () . smartNullPointerException ( obj ) ; createIllegalArgumentException
Code	new Reporter () . smartNullPointerException ( obj ) ; createIllegalArgumentException
Distance : 3

135
Tree	new Reporter () . smartNullPointerException ( obj ) ; parent
Code	new Reporter () . smartNullPointerException ( obj ) ; parent
Distance : 3

136
Tree	new Reporter () . smartNullPointerException ( obj ) ; fireChangeEvent
Code	new Reporter () . smartNullPointerException ( obj ) ; fireChangeEvent
Distance : 3

137
Tree	new Reporter () . smartNullPointerException ( obj ) ; ArrayList
Code	new Reporter () . smartNullPointerException ( obj ) ; ArrayList
Distance : 3

138
Tree	new Reporter () . smartNullPointerException ( obj ) ; testSame
Code	new Reporter () . smartNullPointerException ( obj ) ; testSame
Distance : 3

139
Tree	new Reporter () . smartNullPointerException ( obj ) ; x
Code	new Reporter () . smartNullPointerException ( obj ) ; x
Distance : 3

140
Tree	new Reporter () . smartNullPointerException ( obj ) ; LINE_JOINER
Code	new Reporter () . smartNullPointerException ( obj ) ; LINE_JOINER
Distance : 3

141
Tree	new Reporter () . smartNullPointerException ( obj ) ; str
Code	new Reporter () . smartNullPointerException ( obj ) ; str
Distance : 3

142
Tree	new Reporter () . smartNullPointerException ( obj ) ; try
Code	new Reporter () . smartNullPointerException ( obj ) ; try
Distance : 3

143
Tree	new Reporter () . smartNullPointerException ( obj ) ; result
Code	new Reporter () . smartNullPointerException ( obj ) ; result
Distance : 3

144
Tree	new Reporter () . smartNullPointerException ( obj ) ; fail
Code	new Reporter () . smartNullPointerException ( obj ) ; fail
Distance : 3

145
Tree	new Reporter () . smartNullPointerException ( obj ) ; :
Code	new Reporter () . smartNullPointerException ( obj ) ; :
Distance : 3

146
Tree	new Reporter () . smartNullPointerException ( obj ) ; valueOf
Code	new Reporter () . smartNullPointerException ( obj ) ; valueOf
Distance : 3

147
Tree	new Reporter () . smartNullPointerException ( obj ) ; y
Code	new Reporter () . smartNullPointerException ( obj ) ; y
Distance : 3

148
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

149
Tree	new Reporter () . smartNullPointerException ( obj ) ; array
Code	new Reporter () . smartNullPointerException ( obj ) ; array
Distance : 3

150
Tree	new Reporter () . smartNullPointerException ( obj ) ; ?
Code	new Reporter () . smartNullPointerException ( obj ) ; ?
Distance : 3

151
Tree	new Reporter () . smartNullPointerException ( obj ) ; boolean
Code	new Reporter () . smartNullPointerException ( obj ) ; boolean
Distance : 3

152
Tree	new Reporter () . smartNullPointerException ( obj ) ; m
Code	new Reporter () . smartNullPointerException ( obj ) ; m
Distance : 3

153
Tree	new Reporter () . smartNullPointerException ( obj ) ; paint
Code	new Reporter () . smartNullPointerException ( obj ) ; paint
Distance : 3

154
Tree	new Reporter () . smartNullPointerException ( obj ) ; type
Code	new Reporter () . smartNullPointerException ( obj ) ; type
Distance : 3

155
Tree	new Reporter () . smartNullPointerException ( obj ) ; *
Code	new Reporter () . smartNullPointerException ( obj ) ; *
Distance : 3

156
Tree	new Reporter () . smartNullPointerException ( obj ) ; getInstance
Code	new Reporter () . smartNullPointerException ( obj ) ; getInstance
Distance : 3

157
Tree	new Reporter () . smartNullPointerException ( obj ) ; serialised
Code	new Reporter () . smartNullPointerException ( obj ) ; serialised
Distance : 3

158
Tree	new Reporter () . smartNullPointerException ( obj ) ; Fraction
Code	new Reporter () . smartNullPointerException ( obj ) ; Fraction
Distance : 3

159
Tree	new Reporter () . smartNullPointerException ( obj ) ; checkNotNull
Code	new Reporter () . smartNullPointerException ( obj ) ; checkNotNull
Distance : 3

160
Tree	new Reporter () . smartNullPointerException ( obj ) ; source
Code	new Reporter () . smartNullPointerException ( obj ) ; source
Distance : 3

161
Tree	new Reporter () . smartNullPointerException ( obj ) ; toString
Code	new Reporter () . smartNullPointerException ( obj ) ; toString
Distance : 3

162
Tree	new Reporter () . smartNullPointerException ( obj ) ; Math
Code	new Reporter () . smartNullPointerException ( obj ) ; Math
Distance : 3

163
Tree	new Reporter () . smartNullPointerException ( obj ) ; root
Code	new Reporter () . smartNullPointerException ( obj ) ; root
Distance : 3

164
Tree	new Reporter () . smartNullPointerException ( obj ) ; options
Code	new Reporter () . smartNullPointerException ( obj ) ; options
Distance : 3

165
Tree	new Reporter () . smartNullPointerException ( obj ) ; p
Code	new Reporter () . smartNullPointerException ( obj ) ; p
Distance : 3

166
Tree	new Reporter () . smartNullPointerException ( obj ) ; data
Code	new Reporter () . smartNullPointerException ( obj ) ; data
Distance : 3

167
Tree	new Reporter () . smartNullPointerException ( obj ) ; add
Code	new Reporter () . smartNullPointerException ( obj ) ; add
Distance : 3

168
Tree	new Reporter () . smartNullPointerException ( obj ) ; field
Code	new Reporter () . smartNullPointerException ( obj ) ; field
Distance : 3

169
Tree	new Reporter () . smartNullPointerException ( obj ) ; checkArgument
Code	new Reporter () . smartNullPointerException ( obj ) ; checkArgument
Distance : 3

170
Tree	new Reporter () . smartNullPointerException ( obj ) ; ex
Code	new Reporter () . smartNullPointerException ( obj ) ; ex
Distance : 3

171
Tree	new Reporter () . smartNullPointerException ( obj ) ; NodeUtil
Code	new Reporter () . smartNullPointerException ( obj ) ; NodeUtil
Distance : 3

172
Tree	new Reporter () . smartNullPointerException ( obj ) ; join
Code	new Reporter () . smartNullPointerException ( obj ) ; join
Distance : 3

173
Tree	new Reporter () . smartNullPointerException ( obj ) ; Args
Code	new Reporter () . smartNullPointerException ( obj ) ; Args
Distance : 3

174
Tree	new Reporter () . smartNullPointerException ( obj ) ; NodeTraversal
Code	new Reporter () . smartNullPointerException ( obj ) ; NodeTraversal
Distance : 3

175
Tree	new Reporter () . smartNullPointerException ( obj ) ; List
Code	new Reporter () . smartNullPointerException ( obj ) ; List
Distance : 3

176
Tree	new Reporter () . smartNullPointerException ( obj ) ; Exception
Code	new Reporter () . smartNullPointerException ( obj ) ; Exception
Distance : 3

177
Tree	new Reporter () . smartNullPointerException ( obj ) ; Node
Code	new Reporter () . smartNullPointerException ( obj ) ; Node
Distance : 3

178
Tree	new Reporter () . smartNullPointerException ( obj ) ; c
Code	new Reporter () . smartNullPointerException ( obj ) ; c
Distance : 3

179
Tree	new Reporter () . smartNullPointerException ( obj ) ; notifyListeners
Code	new Reporter () . smartNullPointerException ( obj ) ; notifyListeners
Distance : 3

180
Tree	new Reporter () . smartNullPointerException ( obj ) ; lines
Code	new Reporter () . smartNullPointerException ( obj ) ; lines
Distance : 3

181
Tree	new Reporter () . smartNullPointerException ( obj ) ; verify
Code	new Reporter () . smartNullPointerException ( obj ) ; verify
Distance : 3

182
Tree	new Reporter () . smartNullPointerException ( obj ) ; compiler
Code	new Reporter () . smartNullPointerException ( obj ) ; compiler
Distance : 3

183
Tree	new Reporter () . smartNullPointerException ( obj ) ; String
Code	new Reporter () . smartNullPointerException ( obj ) ; String
Distance : 3

184
Tree	new Reporter () . smartNullPointerException ( obj ) ; null
Code	new Reporter () . smartNullPointerException ( obj ) ; null
Distance : 3

185
Tree	new Reporter () . smartNullPointerException ( obj ) ; wanted
Code	new Reporter () . smartNullPointerException ( obj ) ; wanted
Distance : 3

186
Tree	new Reporter () . smartNullPointerException ( obj ) ; +
Code	new Reporter () . smartNullPointerException ( obj ) ; +
Distance : 3

187
Tree	new Reporter () . smartNullPointerException ( obj ) ; throw
Code	new Reporter () . smartNullPointerException ( obj ) ; throw
Distance : 3

188
Tree	new Reporter () . smartNullPointerException ( obj ) ; super
Code	new Reporter () . smartNullPointerException ( obj ) ; super
Distance : 3

189
Tree	new Reporter () . smartNullPointerException ( obj ) ; value
Code	new Reporter () . smartNullPointerException ( obj ) ; value
Distance : 3

190
Tree	new Reporter () . smartNullPointerException ( obj ) ; long
Code	new Reporter () . smartNullPointerException ( obj ) ; long
Distance : 3

191
Tree	new Reporter () . smartNullPointerException ( obj ) ; /
Code	new Reporter () . smartNullPointerException ( obj ) ; /
Distance : 3

192
Tree	new Reporter () . smartNullPointerException ( obj ) ; length
Code	new Reporter () . smartNullPointerException ( obj ) ; length
Distance : 3

193
Tree	new Reporter () . smartNullPointerException ( obj ) ; TestUtils
Code	new Reporter () . smartNullPointerException ( obj ) ; TestUtils
Distance : 3

194
Tree	new Reporter () . smartNullPointerException ( obj ) ; alpha
Code	new Reporter () . smartNullPointerException ( obj ) ; alpha
Distance : 3

195
Tree	new Reporter () . smartNullPointerException ( obj ) ; instance
Code	new Reporter () . smartNullPointerException ( obj ) ; instance
Distance : 3

196
Tree	new Reporter () . smartNullPointerException ( obj ) ; Assert
Code	new Reporter () . smartNullPointerException ( obj ) ; Assert
Distance : 3

197
Tree	new Reporter () . smartNullPointerException ( obj ) ; catch
Code	new Reporter () . smartNullPointerException ( obj ) ; catch
Distance : 3

198
Tree	new Reporter () . smartNullPointerException ( obj ) ; LanguageMode.ECMASCRIPT6
Code	new Reporter () . smartNullPointerException ( obj ) ; LanguageMode.ECMASCRIPT6
Distance : 3

199
Tree	new Reporter () . smartNullPointerException ( obj ) ; s
Code	new Reporter () . smartNullPointerException ( obj ) ; s
Distance : 3

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 6

1
Tree	return JSDocInfo ;
Code	return JSDocInfo ;
Distance : 6

2
Tree	return SUM_OF_SQUARES ;
Code	return SUM_OF_SQUARES ;
Distance : 6

3
Tree	return mode ;
Code	return mode ;
Distance : 6

4
Tree	return lhs.length ;
Code	return lhs.length ;
Distance : 6

5
Tree	return Year ;
Code	return Year ;
Distance : 6

6
Tree	return eigenvalues ;
Code	return eigenvalues ;
Distance : 6

7
Tree	return IntegratorException ;
Code	return IntegratorException ;
Distance : 6

8
Tree	return StringBuffer ;
Code	return StringBuffer ;
Distance : 6

9
Tree	return useTypes ;
Code	return useTypes ;
Distance : 6

10
Tree	return doThrow ;
Code	return doThrow ;
Distance : 6

11
Tree	return ISOPeriodFormat ;
Code	return ISOPeriodFormat ;
Distance : 6

12
Tree	return Location ;
Code	return Location ;
Distance : 6

13
Tree	return com.google.protobuf.GeneratedMessageV3 ;
Code	return com.google.protobuf.GeneratedMessageV3 ;
Distance : 6

14
Tree	return UnsupportedDateTimeField ;
Code	return UnsupportedDateTimeField ;
Distance : 6

15
Tree	return Mockito ;
Code	return Mockito ;
Distance : 6

16
Tree	return CompilerOptions.LanguageMode.ECMASCRIPT_2017 ;
Code	return CompilerOptions.LanguageMode.ECMASCRIPT_2017 ;
Distance : 6

17
Tree	return tTest ;
Code	return tTest ;
Distance : 6

18
Tree	return continue; ;
Code	return continue; ;
Distance : 6

19
Tree	return ModelSpecificationException ;
Code	return ModelSpecificationException ;
Distance : 6

20
Tree	return LocalizedFormats.IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO ;
Code	return LocalizedFormats.IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO ;
Distance : 6

21
Tree	return TokenType.MODULE ;
Code	return TokenType.MODULE ;
Distance : 6

22
Tree	return VoidMethodStubbableImpl ;
Code	return VoidMethodStubbableImpl ;
Distance : 6

23
Tree	return : ;
Code	return : ;
Distance : 6

24
Tree	return template ;
Code	return template ;
Distance : 6

25
Tree	return handler ;
Code	return handler ;
Distance : 6

26
Tree	return EnclosingBall ;
Code	return EnclosingBall ;
Distance : 6

27
Tree	return && ;
Code	return && ;
Distance : 6

28
Tree	return stat ;
Code	return stat ;
Distance : 6

29
Tree	return polynomials ;
Code	return polynomials ;
Distance : 6

30
Tree	return InvocationDiffersFromActual ;
Code	return InvocationDiffersFromActual ;
Distance : 6

31
Tree	return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST ;
Code	return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST ;
Distance : 6

32
Tree	return org.joda.time.gwt.util.Arrays ;
Code	return org.joda.time.gwt.util.Arrays ;
Distance : 6

33
Tree	return iZone ;
Code	return iZone ;
Distance : 6

34
Tree	return DatasetUtils ;
Code	return DatasetUtils ;
Distance : 6

35
Tree	return T ;
Code	return T ;
Distance : 6

36
Tree	return leftType ;
Code	return leftType ;
Distance : 6

37
Tree	return IllegalFieldValueException ;
Code	return IllegalFieldValueException ;
Distance : 6

38
Tree	return ConvexHullGenerator2D ;
Code	return ConvexHullGenerator2D ;
Distance : 6

39
Tree	return ReturnValues ;
Code	return ReturnValues ;
Distance : 6

40
Tree	return LogGamma ;
Code	return LogGamma ;
Distance : 6

41
Tree	return scaleArray ;
Code	return scaleArray ;
Distance : 6

42
Tree	return CompilerOptions.LanguageMode.ECMASCRIPT_2015 ;
Code	return CompilerOptions.LanguageMode.ECMASCRIPT_2015 ;
Distance : 6

43
Tree	return ArgumentsAreDifferent ;
Code	return ArgumentsAreDifferent ;
Distance : 6

44
Tree	return RemoveUnusedCode.Builder ;
Code	return RemoveUnusedCode.Builder ;
Distance : 6

45
Tree	return objType ;
Code	return objType ;
Distance : 6

46
Tree	return TypeParameters ;
Code	return TypeParameters ;
Distance : 6

47
Tree	return JColorChooser ;
Code	return JColorChooser ;
Distance : 6

48
Tree	return anchor ;
Code	return anchor ;
Distance : 6

49
Tree	return Property ;
Code	return Property ;
Distance : 6

50
Tree	return theoreticalMinParams ;
Code	return theoreticalMinParams ;
Distance : 6

51
Tree	return LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX ;
Code	return LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX ;
Distance : 6

52
Tree	return optima ;
Code	return optima ;
Distance : 6

53
Tree	return options.rewritePolyfills ;
Code	return options.rewritePolyfills ;
Distance : 6

54
Tree	return actualMatcher ;
Code	return actualMatcher ;
Distance : 6

55
Tree	return residuals ;
Code	return residuals ;
Distance : 6

56
Tree	return isSubtype ;
Code	return isSubtype ;
Distance : 6

57
Tree	return ReadablePeriod ;
Code	return ReadablePeriod ;
Distance : 6

58
Tree	return ^ ;
Code	return ^ ;
Distance : 6

59
Tree	return Mode.SINGLE_FILE ;
Code	return Mode.SINGLE_FILE ;
Distance : 6

60
Tree	return Shape ;
Code	return Shape ;
Distance : 6

61
Tree	return traverse ;
Code	return traverse ;
Distance : 6

62
Tree	return StrMatcher ;
Code	return StrMatcher ;
Distance : 6

63
Tree	return DateTimeComparator ;
Code	return DateTimeComparator ;
Distance : 6

64
Tree	return bp ;
Code	return bp ;
Distance : 6

65
Tree	return computeDerivatives ;
Code	return computeDerivatives ;
Distance : 6

66
Tree	return PeepholeOptimizationsPass ;
Code	return PeepholeOptimizationsPass ;
Distance : 6

67
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 6

68
Tree	return path ;
Code	return path ;
Distance : 6

69
Tree	return EigenDecompositionImpl ;
Code	return EigenDecompositionImpl ;
Distance : 6

70
Tree	return Float.NaN ;
Code	return Float.NaN ;
Distance : 6

71
Tree	return objType.nominalType ;
Code	return objType.nominalType ;
Distance : 6

72
Tree	return PropertyCollapseLevel.ALL ;
Code	return PropertyCollapseLevel.ALL ;
Distance : 6

73
Tree	return ^= ;
Code	return ^= ;
Distance : 6

74
Tree	return iChronology ;
Code	return iChronology ;
Distance : 6

75
Tree	return QRDecomposition ;
Code	return QRDecomposition ;
Distance : 6

76
Tree	return @ ;
Code	return @ ;
Distance : 6

77
Tree	return specific ;
Code	return specific ;
Distance : 6

78
Tree	return MOCKITO_CORE ;
Code	return MOCKITO_CORE ;
Distance : 6

79
Tree	return ExponentialDistribution ;
Code	return ExponentialDistribution ;
Distance : 6

80
Tree	return ListSampler ;
Code	return ListSampler ;
Distance : 6

81
Tree	return getFragment ;
Code	return getFragment ;
Distance : 6

82
Tree	return CHI_SQUARE_TEST ;
Code	return CHI_SQUARE_TEST ;
Distance : 6

83
Tree	return LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY ;
Code	return LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY ;
Distance : 6

84
Tree	return StringConverter.INSTANCE ;
Code	return StringConverter.INSTANCE ;
Distance : 6

85
Tree	return ConsecutiveStubbing ;
Code	return ConsecutiveStubbing ;
Distance : 6

86
Tree	return return ;
Code	return return ;
Distance : 6

87
Tree	return VerifcationInOrderFailure ;
Code	return VerifcationInOrderFailure ;
Distance : 6

88
Tree	return blind ;
Code	return blind ;
Distance : 6

89
Tree	return proxyClass ;
Code	return proxyClass ;
Distance : 6

90
Tree	return FunctionUtils ;
Code	return FunctionUtils ;
Distance : 6

91
Tree	return cloned.chars ;
Code	return cloned.chars ;
Distance : 6

92
Tree	return LocalizedFormats.DUPLICATED_ABSCISSA ;
Code	return LocalizedFormats.DUPLICATED_ABSCISSA ;
Distance : 6

93
Tree	return Predicates ;
Code	return Predicates ;
Distance : 6

94
Tree	return getTimeInMillis ;
Code	return getTimeInMillis ;
Distance : 6

95
Tree	return analyzeExprFwd ;
Code	return analyzeExprFwd ;
Distance : 6

96
Tree	return Comparable ;
Code	return Comparable ;
Distance : 6

97
Tree	return NUMBER_CONSTANT ;
Code	return NUMBER_CONSTANT ;
Distance : 6

98
Tree	return parent ;
Code	return parent ;
Distance : 6

99
Tree	return -- ;
Code	return -- ;
Distance : 6

100
Tree	return != ;
Code	return != ;
Distance : 6

101
Tree	return {} ;
Code	return {} ;
Distance : 6

102
Tree	return class ;
Code	return class ;
Distance : 6

103
Tree	return void ;
Code	return void ;
Distance : 6

104
Tree	return try ;
Code	return try ;
Distance : 6

105
Tree	return <= ;
Code	return <= ;
Distance : 6

106
Tree	return IllegalArgumentException ;
Code	return IllegalArgumentException ;
Distance : 6

107
Tree	return NodeTraversal ;
Code	return NodeTraversal ;
Distance : 6

108
Tree	return this ;
Code	return this ;
Distance : 6

109
Tree	return while ;
Code	return while ;
Distance : 6

110
Tree	return -= ;
Code	return -= ;
Distance : 6

111
Tree	return static ;
Code	return static ;
Distance : 6

112
Tree	return synchronized ;
Code	return synchronized ;
Distance : 6

113
Tree	return LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ;
Code	return LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ;
Distance : 6

114
Tree	return &= ;
Code	return &= ;
Distance : 6

115
Tree	return DimensionMismatchException ;
Code	return DimensionMismatchException ;
Distance : 6

116
Tree	return % ;
Code	return % ;
Distance : 6

117
Tree	return null ;
Code	return null ;
Distance : 6

118
Tree	return *= ;
Code	return *= ;
Distance : 6

119
Tree	return ObjectUtils ;
Code	return ObjectUtils ;
Distance : 6

120
Tree	return super(); ;
Code	return super(); ;
Distance : 6

121
Tree	return char ;
Code	return char ;
Distance : 6

122
Tree	return instanceof ;
Code	return instanceof ;
Distance : 6

123
Tree	return byte ;
Code	return byte ;
Distance : 6

124
Tree	return /= ;
Code	return /= ;
Distance : 6

125
Tree	return super ;
Code	return super ;
Distance : 6

126
Tree	return ! ;
Code	return ! ;
Distance : 6

127
Tree	return extends ;
Code	return extends ;
Distance : 6

128
Tree	return true ;
Code	return true ;
Distance : 6

129
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 6

130
Tree	return float ;
Code	return float ;
Distance : 6

131
Tree	return - ;
Code	return - ;
Distance : 6

132
Tree	return case ;
Code	return case ;
Distance : 6

133
Tree	return throw ;
Code	return throw ;
Distance : 6

134
Tree	return if ;
Code	return if ;
Distance : 6

135
Tree	return int ;
Code	return int ;
Distance : 6

136
Tree	return >= ;
Code	return >= ;
Distance : 6

137
Tree	return double ;
Code	return double ;
Distance : 6

138
Tree	return throws ;
Code	return throws ;
Distance : 6

139
Tree	return short ;
Code	return short ;
Distance : 6

140
Tree	return else ;
Code	return else ;
Distance : 6

141
Tree	return for ;
Code	return for ;
Distance : 6

142
Tree	return new ;
Code	return new ;
Distance : 6

143
Tree	return += ;
Code	return += ;
Distance : 6

144
Tree	return ++ ;
Code	return ++ ;
Distance : 6

145
Tree	return assert ;
Code	return assert ;
Distance : 6

146
Tree	return boolean ;
Code	return boolean ;
Distance : 6

147
Tree	return DEFAULT_RETURN_VALUES ;
Code	return DEFAULT_RETURN_VALUES ;
Distance : 6

148
Tree	return ? ;
Code	return ? ;
Distance : 6

149
Tree	return * ;
Code	return * ;
Distance : 6

150
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 6

151
Tree	return switch ;
Code	return switch ;
Distance : 6

152
Tree	return FunctionEvaluationException ;
Code	return FunctionEvaluationException ;
Distance : 6

153
Tree	return options.checksOnly ;
Code	return options.checksOnly ;
Distance : 6

154
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 6

155
Tree	return factory ;
Code	return factory ;
Distance : 6

156
Tree	return qr ;
Code	return qr ;
Distance : 6

157
Tree	return com.google.protobuf.AbstractMessageLite.Builder ;
Code	return com.google.protobuf.AbstractMessageLite.Builder ;
Distance : 6

158
Tree	return & ;
Code	return & ;
Distance : 6

159
Tree	return EvalMode.EVAL ;
Code	return EvalMode.EVAL ;
Distance : 6

160
Tree	return ReadablePartial ;
Code	return ReadablePartial ;
Distance : 6

161
Tree	return nt ;
Code	return nt ;
Distance : 6

162
Tree	return VerificationModeFactory ;
Code	return VerificationModeFactory ;
Distance : 6

163
Tree	return ImmutableList ;
Code	return ImmutableList ;
Distance : 6

164
Tree	return VerificationModeImpl ;
Code	return VerificationModeImpl ;
Distance : 6

165
Tree	return EscapeUtils ;
Code	return EscapeUtils ;
Distance : 6

166
Tree	return rhs.a ;
Code	return rhs.a ;
Distance : 6

167
Tree	return useSourceInfoForNewQName ;
Code	return useSourceInfoForNewQName ;
Distance : 6

168
Tree	return BigInteger.ZERO ;
Code	return BigInteger.ZERO ;
Distance : 6

169
Tree	return invocation ;
Code	return invocation ;
Distance : 5

170
Tree	return mockUtil ;
Code	return mockUtil ;
Distance : 6

171
Tree	return MathUnsupportedOperationException ;
Code	return MathUnsupportedOperationException ;
Distance : 6

172
Tree	return LanguageMode.ECMASCRIPT3 ;
Code	return LanguageMode.ECMASCRIPT3 ;
Distance : 6

173
Tree	return break; ;
Code	return break; ;
Distance : 6

174
Tree	return return; ;
Code	return return; ;
Distance : 6

175
Tree	return stubber ;
Code	return stubber ;
Distance : 6

176
Tree	return Configuration ;
Code	return Configuration ;
Distance : 6

177
Tree	return Sphere2D ;
Code	return Sphere2D ;
Distance : 6

178
Tree	return MathUserException ;
Code	return MathUserException ;
Distance : 6

179
Tree	return == ;
Code	return == ;
Distance : 6

180
Tree	return Range ;
Code	return Range ;
Distance : 6

181
Tree	return LocalizedFormats.VECTOR_LENGTH_MISMATCH ;
Code	return LocalizedFormats.VECTOR_LENGTH_MISMATCH ;
Distance : 6

182
Tree	return default: ;
Code	return default: ;
Distance : 6

183
Tree	return TransformUtils ;
Code	return TransformUtils ;
Distance : 6

184
Tree	return long ;
Code	return long ;
Distance : 6

185
Tree	return TypeI ;
Code	return TypeI ;
Distance : 6

186
Tree	return final ;
Code	return final ;
Distance : 6

187
Tree	return Set ;
Code	return Set ;
Distance : 6

188
Tree	return UnsupportedOperationException ;
Code	return UnsupportedOperationException ;
Distance : 6

189
Tree	return / ;
Code	return / ;
Distance : 6

190
Tree	return FeatureSet ;
Code	return FeatureSet ;
Distance : 6

191
Tree	return STATIC_B ;
Code	return STATIC_B ;
Distance : 6

192
Tree	return MockCreationSettings ;
Code	return MockCreationSettings ;
Distance : 6

193
Tree	return NumberIsTooSmallException ;
Code	return NumberIsTooSmallException ;
Distance : 6

194
Tree	return [ ;
Code	return [ ;
Distance : 6

195
Tree	return LanguageMode.ECMASCRIPT_2017 ;
Code	return LanguageMode.ECMASCRIPT_2017 ;
Distance : 6

196
Tree	return finally ;
Code	return finally ;
Distance : 6

197
Tree	return parentClass ;
Code	return parentClass ;
Distance : 6

198
Tree	return oldHandler ;
Code	return oldHandler ;
Distance : 6

199
Tree	return continue ;
Code	return continue ;
Distance : 6

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Node
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Node
Distance : 4

1
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; parent
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; parent
Distance : 4

2
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; x
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; x
Distance : 4

3
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; testSame
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; testSame
Distance : 4

4
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ?
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ?
Distance : 4

5
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkNotNull
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkNotNull
Distance : 4

6
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertThat
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertThat
Distance : 4

7
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Integer
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Integer
Distance : 4

8
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Fraction
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Fraction
Distance : 4

9
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; node
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; node
Distance : 4

10
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; index
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; index
Distance : 4

11
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; toString
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; toString
Distance : 4

12
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; source
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; source
Distance : 4

13
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; options
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; options
Distance : 4

14
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; p
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; p
Distance : 4

15
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; @
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; @
Distance : 4

16
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; false
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; false
Distance : 4

17
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; double
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; double
Distance : 4

18
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ==
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ==
Distance : 4

19
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; void
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; void
Distance : 4

20
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; catch
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; catch
Distance : 4

21
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; throw
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; throw
Distance : 4

22
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; createIllegalArgumentException
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; createIllegalArgumentException
Distance : 4

23
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; test
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; test
Distance : 4

24
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <>
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <>
Distance : 4

25
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ParamChecks
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ParamChecks
Distance : 4

26
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; :
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; :
Distance : 4

27
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fail
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fail
Distance : 4

28
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; List
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; List
Distance : 4

29
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Args
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Args
Distance : 4

30
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; IllegalArgumentException
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; IllegalArgumentException
Distance : 4

31
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; reportCodeChange
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; reportCodeChange
Distance : 4

32
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; FastMath
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; FastMath
Distance : 4

33
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; expected
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; expected
Distance : 4

34
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ArrayList
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ArrayList
Distance : 4

35
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fireChangeEvent
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; fireChangeEvent
Distance : 4

36
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getInstance
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getInstance
Distance : 4

37
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; serialised
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; serialised
Distance : 4

38
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; str
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; str
Distance : 4

39
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; LINE_JOINER
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; LINE_JOINER
Distance : 4

40
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Exception
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Exception
Distance : 4

41
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; invocation
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; invocation
Distance : 4

42
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; paint
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; paint
Distance : 4

43
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; m
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; m
Distance : 4

44
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; result
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; result
Distance : 4

45
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; try
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; try
Distance : 4

46
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; f
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; f
Distance : 4

47
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; array
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; array
Distance : 4

48
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Assert
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Assert
Distance : 4

49
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; []
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; []
Distance : 4

50
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; nullNotPermitted
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; nullNotPermitted
Distance : 4

51
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

52
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

53
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

54
Tree	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

55
Tree	return returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Distance : 6

56
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( mockSettings ) ) ;
Distance : 5

57
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 7

58
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

59
Tree	return returnTypeGenericMetadata . defaultAnswer ( serializable ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( serializable ( mockSettings ) ) ;
Distance : 6

60
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

61
Tree	return returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Distance : 6

62
Tree	return returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) ) ;
Distance : 6

63
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

64
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

65
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 6

66
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

67
Tree	return returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

68
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Distance : 6

69
Tree	return mockSettings . defaultAnswer ( serializable ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( serializable ( mockSettings ) ) ;
Distance : 5

70
Tree	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 5

71
Tree	return returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

72
Tree	return mockSettings . serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

73
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; v
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; v
Distance : 4

74
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

75
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 4

76
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; length
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; length
Distance : 4

77
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; TestUtils
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; TestUtils
Distance : 4

78
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; &&
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; &&
Distance : 4

79
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; super
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; super
Distance : 4

80
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; value
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; value
Distance : 4

81
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; T
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; T
Distance : 4

82
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; -
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; -
Distance : 4

83
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Preconditions
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Preconditions
Distance : 4

84
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; [
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; [
Distance : 4

85
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ]
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ]
Distance : 4

86
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertEquals
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertEquals
Distance : 4

87
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !
Distance : 4

88
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 5

89
Tree	return returnTypeGenericMetadata . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

90
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

91
Tree	return mockSettings . serializable ( defaultAnswer ( mockSettings ) ) ;
Code	return mockSettings . serializable ( defaultAnswer ( mockSettings ) ) ;
Distance : 5

92
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 4

93
Tree	return mockSettings . serializable ( serializable ( mockSettings ) ) ;
Code	return mockSettings . serializable ( serializable ( mockSettings ) ) ;
Distance : 5

94
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 5

95
Tree	return mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

96
Tree	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

97
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

98
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; setUp
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; setUp
Distance : 4

99
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

100
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; compiler
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; compiler
Distance : 4

101
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <
Distance : 4

102
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; this
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; this
Distance : 4

103
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; final
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; final
Distance : 4

104
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; =
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; =
Distance : 4

105
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; }
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; }
Distance : 4

106
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ()
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ()
Distance : 4

107
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {
Distance : 4

108
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkArgument
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkArgument
Distance : 4

109
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; field
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; field
Distance : 4

110
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; t
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; t
Distance : 4

111
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; name
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; name
Distance : 4

112
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; data
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; data
Distance : 4

113
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; add
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; add
Distance : 4

114
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NodeTraversal
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NodeTraversal
Distance : 4

115
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; values
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; values
Distance : 4

116
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

117
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; String
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; String
Distance : 4

118
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mode
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mode
Distance : 4

119
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; MathRuntimeException
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; MathRuntimeException
Distance : 4

120
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Object
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Object
Distance : 4

121
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; class
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; class
Distance : 4

122
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <blank>
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <blank>
Distance : 4

123
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; (
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; (
Distance : 4

124
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <s>
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; <s>
Distance : 4

125
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; (
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; (
Distance : 4

126
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ;
Distance : 4

127
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; )
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; )
Distance : 4

128
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; .
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; .
Distance : 4

129
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ,
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ,
Distance : 4

130
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; if
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; if
Distance : 4

131
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Math
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Math
Distance : 4

132
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; out
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; out
Distance : 4

133
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NodeUtil
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NodeUtil
Distance : 4

134
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; root
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; root
Distance : 4

135
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; MutableTimePeriod
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; MutableTimePeriod
Distance : 4

136
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; a
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; a
Distance : 4

137
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Test
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Test
Distance : 4

138
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Class
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Class
Distance : 4

139
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; notifyListeners
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; notifyListeners
Distance : 4

140
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; c
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; c
Distance : 4

141
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; return;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; return;
Distance : 4

142
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; size
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; size
Distance : 4

143
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; StringBuilder
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; StringBuilder
Distance : 4

144
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; join
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; join
Distance : 4

145
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; boolean
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; boolean
Distance : 4

146
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; *
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; *
Distance : 4

147
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; type
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; type
Distance : 4

148
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mockingProgress
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mockingProgress
Distance : 4

149
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; i
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; i
Distance : 4

150
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; wanted
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; wanted
Distance : 4

151
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !=
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; !=
Distance : 4

152
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; verify
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; verify
Distance : 4

153
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; lines
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; lines
Distance : 4

154
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ex
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; ex
Distance : 4

155
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; b
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; b
Distance : 4

156
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; LanguageMode.ECMASCRIPT_2015
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; LanguageMode.ECMASCRIPT_2015
Distance : 4

157
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; protected
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; protected
Distance : 4

158
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; get
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; get
Distance : 4

159
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; JSType
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; JSType
Distance : 4

160
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; isEmpty
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; isEmpty
Distance : 4

161
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; char
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; char
Distance : 4

162
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkState
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; checkState
Distance : 4

163
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; int
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; int
Distance : 4

164
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; externs
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; externs
Distance : 4

165
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Invocation
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Invocation
Distance : 4

166
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; /
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; /
Distance : 4

167
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; long
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; long
Distance : 4

168
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertTrue
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; assertTrue
Distance : 4

169
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; for
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; for
Distance : 4

170
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; reportMatcher
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; reportMatcher
Distance : 4

171
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; instant
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; instant
Distance : 4

172
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; TestUtilities
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; TestUtilities
Distance : 4

173
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; js
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; js
Distance : 4

174
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getMessage
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getMessage
Distance : 4

175
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; stream
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; stream
Distance : 4

176
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; else
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; else
Distance : 4

177
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {}
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; {}
Distance : 4

178
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; equals
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; equals
Distance : 4

179
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; StrBuilder
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; StrBuilder
Distance : 4

180
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; d
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; d
Distance : 4

181
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; public
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; public
Distance : 4

182
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; setAcceptedLanguage
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; setAcceptedLanguage
Distance : 4

183
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; +
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; +
Distance : 4

184
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; null
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; null
Distance : 4

185
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; >
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; >
Distance : 4

186
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; new
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; new
Distance : 4

187
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; STRING_CONSTANT
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; STRING_CONSTANT
Distance : 4

188
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NUMBER_CONSTANT
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; NUMBER_CONSTANT
Distance : 4

189
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; return
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; return
Distance : 4

190
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; n
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; n
Distance : 4

191
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; e
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; e
Distance : 4

192
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Override
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; Override
Distance : 4

193
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; true
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; true
Distance : 4

194
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; invocations
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; invocations
Distance : 4

195
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mock
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; mock
Distance : 4

196
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; abs
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; abs
Distance : 4

197
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; matcher
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; matcher
Distance : 4

198
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; static
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; static
Distance : 4

199
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getParent
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ; getParent
Distance : 4

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 2

1
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 2

2
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 3

3
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 3

4
Tree	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

5
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

6
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

7
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

8
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

9
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 3

10
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

11
Tree	{ if ( cls == null ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == null ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

12
Tree	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

13
Tree	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

14
Tree	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

15
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

16
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

17
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

18
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

19
Tree	{ if ( cls == null ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

20
Tree	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

21
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 3

22
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

23
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

24
Tree	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

25
Tree	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

26
Tree	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

27
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

28
Tree	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

29
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

30
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 3

31
Tree	{ if ( cls == null ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

32
Tree	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

33
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 4

34
Tree	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

35
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

36
Tree	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

37
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

38
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

39
Tree	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

40
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

41
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

42
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

43
Tree	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

44
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

45
Tree	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 6

46
Tree	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

47
Tree	{ if ( cls == null ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == null ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

48
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

49
Tree	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

50
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

51
Tree	{ if ( cls == null ) { return withParams ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return withParams ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

52
Tree	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

53
Tree	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

54
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

55
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

56
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

57
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

58
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

59
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

60
Tree	{ if ( cls == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 6

61
Tree	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

62
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

63
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

64
Tree	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

65
Tree	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

66
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

67
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 3

68
Tree	{ if ( cls == null ) { return withParams ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withParams ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

69
Tree	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

70
Tree	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

71
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

72
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

73
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

74
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

75
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

76
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

77
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

78
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

79
Tree	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

80
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

81
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

82
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

83
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

84
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

85
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

86
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

87
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

88
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

89
Tree	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

90
Tree	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

91
Tree	{ if ( cls == super(); ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == super(); ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 5

92
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

93
Tree	{ if ( outerClassInstance == continue; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

94
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

95
Tree	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 6

96
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

97
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

98
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

99
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 3

100
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 4

101
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

102
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

103
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

104
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

105
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

106
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

107
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

108
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 4

109
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

110
Tree	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

111
Tree	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

112
Tree	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

113
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

114
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

115
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 5

116
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

117
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

118
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

119
Tree	{ if ( outerClassInstance == default: ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

120
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

121
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

122
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

123
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

124
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

125
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

126
Tree	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

127
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

128
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

129
Tree	{ if ( cls == break; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == break; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 5

130
Tree	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

131
Tree	{ if ( cls == return; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == return; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 5

132
Tree	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

133
Tree	{ if ( outerClassInstance == break; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

134
Tree	{ if ( cls == super(); ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

135
Tree	{ if ( outerClassInstance == return; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

136
Tree	{ if ( cls == continue; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == continue; ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 5

137
Tree	{ if ( outerClassInstance == continue; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

138
Tree	{ if ( cls == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 6

139
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

140
Tree	{ if ( outerClassInstance == continue; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

141
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

142
Tree	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

143
Tree	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

144
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

145
Tree	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

146
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

147
Tree	{ if ( cls == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

148
Tree	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withParams ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

149
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

150
Tree	{ if ( outerClassInstance == super(); ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

151
Tree	{ if ( outerClassInstance == super(); ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

152
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

153
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

154
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 4

155
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

156
Tree	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

157
Tree	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

158
Tree	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

159
Tree	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return withOuterClass ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

160
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

161
Tree	{ if ( cls == default: ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == default: ) { return withParams ( cls ) ; } return withParams ( cls ) ; }
Distance : 5

162
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

163
Tree	{ if ( outerClassInstance == default: ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 4

164
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

165
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

166
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

167
Tree	{ if ( outerClassInstance == default: ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 5

168
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

169
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

170
Tree	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 6

171
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

172
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

173
Tree	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

174
Tree	{ if ( cls == break; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

175
Tree	{ if ( outerClassInstance == continue; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

176
Tree	{ if ( cls == break; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == break; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 6

177
Tree	{ if ( outerClassInstance == break; ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

178
Tree	{ if ( cls == return; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == return; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 6

179
Tree	{ if ( outerClassInstance == return; ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

180
Tree	{ if ( outerClassInstance == default: ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 5

181
Tree	{ if ( cls == continue; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

182
Tree	{ if ( cls == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == super(); ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 6

183
Tree	{ if ( cls == continue; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Code	{ if ( cls == continue; ) { return withParams ( outerClassInstance ) ; } return withParams ( cls ) ; }
Distance : 6

184
Tree	{ if ( outerClassInstance == continue; ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return withParams ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

185
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

186
Tree	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return withOuterClass ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

187
Tree	{ if ( cls == break; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == break; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

188
Tree	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

189
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

190
Tree	{ if ( cls == return; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( cls == return; ) { return withParams ( cls ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

191
Tree	{ if ( outerClassInstance == break; ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

192
Tree	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( cls ) ; } return noArgConstructor ( outerClassInstance ) ; }
Distance : 5

193
Tree	{ if ( outerClassInstance == break; ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == break; ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

194
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

195
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 4

196
Tree	{ if ( outerClassInstance == return; ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return withOuterClass ( cls ) ; } return withParams ( cls ) ; }
Distance : 4

197
Tree	{ if ( cls == return; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return withParams ( cls ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

198
Tree	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withParams ( outerClassInstance ) ; }
Distance : 5

199
Tree	{ if ( outerClassInstance == return; ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return withParams ( outerClassInstance ) ; } return noArgConstructor ( cls ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 2

1
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 3

2
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 3

3
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

4
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 3

5
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 3

6
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 3

7
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

8
Tree	Object injected = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

9
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Distance : 3

10
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

11
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

12
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 3

13
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 3

14
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 3

15
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Distance : 2

16
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . filterCandidate () ;
Distance : 3

17
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

18
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

19
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

20
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Distance : 4

21
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

22
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

23
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 3

24
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 4

25
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

26
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

27
Tree	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

28
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , instance ) . thenInject () ;
Distance : 3

29
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

30
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , field ) . filterCandidate () ;
Distance : 4

31
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

32
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

33
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

34
Tree	Object injected = instance . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

35
Tree	Object injected = mocks . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

36
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

37
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , injected , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , injected , orderedInstanceFields ) . thenInject () ;
Distance : 3

38
Tree	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

39
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

40
Tree	Object injected = field . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 3

41
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , field ) . thenInject () ;
Distance : 4

42
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

43
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , field ) . thenInject () ;
Distance : 4

44
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , mocks ) . thenInject () ;
Distance : 4

45
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , mocks ) . thenInject () ;
Distance : 4

46
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , instance ) . thenInject () ;
Distance : 3

47
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Distance : 3

48
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , field ) . thenInject () ;
Distance : 3

49
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mockCandidateFilter , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mockCandidateFilter , orderedInstanceFields ) . thenInject () ;
Distance : 3

50
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

51
Tree	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

52
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , field , instance ) . thenInject () ;
Distance : 3

53
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

54
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , mocks ) . thenInject () ;
Distance : 3

55
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

56
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

57
Tree	Object mockCandidateFilter = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

58
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

59
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

60
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

61
Tree	Object injected = injected . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

62
Tree	Object injected = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

63
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . filterCandidate () ;
Distance : 4

64
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , field , instance ) . thenInject () ;
Distance : 3

65
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

66
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

67
Tree	Object injected = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

68
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

69
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , field ) . thenInject () ;
Distance : 4

70
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , injected , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , injected , instance ) . thenInject () ;
Distance : 3

71
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

72
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

73
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

74
Tree	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , field , instance ) . thenInject () ;
Distance : 3

75
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , mockCandidateFilter ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , mockCandidateFilter ) . thenInject () ;
Distance : 4

76
Tree	Object injected = injected . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

77
Tree	Object injected = mockCandidateFilter . thenInject ( instance , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( instance , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

78
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

79
Tree	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

80
Tree	Object injected = mockCandidateFilter . thenInject ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

81
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

82
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

83
Tree	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

84
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

85
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , injected ) . thenInject () ;
Distance : 4

86
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , injected ) . thenInject () ;
Distance : 4

87
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , field , field ) . thenInject () ;
Distance : 4

88
Tree	Object injected = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

89
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , mocks ) . thenInject () ;
Distance : 4

90
Tree	Object mockCandidateFilter = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

91
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , mocks ) . thenInject () ;
Distance : 4

92
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

93
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , mockCandidateFilter ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , mockCandidateFilter ) . thenInject () ;
Distance : 3

94
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

95
Tree	Object injected = instance . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

96
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , mockCandidateFilter ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , mockCandidateFilter ) . thenInject () ;
Distance : 4

97
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

98
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mockCandidateFilter , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mockCandidateFilter , instance ) . thenInject () ;
Distance : 3

99
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , field , field ) . thenInject () ;
Distance : 4

100
Tree	Object injected = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

101
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Distance : 3

102
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , injected ) . thenInject () ;
Distance : 3

103
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . filterCandidate () ;
Distance : 4

104
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Distance : 4

105
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

106
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , injected , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , injected , field ) . thenInject () ;
Distance : 4

107
Tree	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , field , field ) . thenInject () ;
Distance : 4

108
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

109
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

110
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . filterCandidate () ;
Distance : 4

111
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

112
Tree	Object injected = injected . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Distance : 4

113
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

114
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

115
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , instance ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , instance ) . filterCandidate () ;
Distance : 4

116
Tree	Object field = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object field = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

117
Tree	Object mockCandidateFilter = mockCandidateFilter . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 4

118
Tree	Object injected = injected . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

119
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . filterCandidate () ;
Distance : 4

120
Tree	Object injected = injected . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( orderedInstanceFields , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

121
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

122
Tree	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

123
Tree	Object injected = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

124
Tree	Object injected = injected . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 4

125
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , mocks , field ) . thenInject () ;
Distance : 5

126
Tree	Object injected = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

127
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

128
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

129
Tree	Object instance = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object instance = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

130
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Distance : 4

131
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , instance ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , instance ) . filterCandidate () ;
Distance : 3

132
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

133
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , mockCandidateFilter ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , mockCandidateFilter ) . thenInject () ;
Distance : 4

134
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Distance : 3

135
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , mockCandidateFilter ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , mockCandidateFilter ) . thenInject () ;
Distance : 4

136
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mockCandidateFilter , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mockCandidateFilter , field ) . thenInject () ;
Distance : 4

137
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , mocks , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , mocks , instance ) . thenInject () ;
Distance : 4

138
Tree	Object injected = injected . filterCandidate ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , orderedInstanceFields , instance ) . thenInject () ;
Distance : 3

139
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

140
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

141
Tree	Object injected = mockCandidateFilter . thenInject ( instance , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( instance , field , instance ) . thenInject () ;
Distance : 4

142
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , mocks , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , mocks , instance ) . thenInject () ;
Distance : 4

143
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , orderedInstanceFields , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , orderedInstanceFields , field ) . thenInject () ;
Distance : 4

144
Tree	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

145
Tree	Object injected = orderedInstanceFields . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = orderedInstanceFields . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

146
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , mocks ) . thenInject () ;
Distance : 4

147
Tree	Object orderedInstanceFields = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

148
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

149
Tree	Object injected = mockCandidateFilter . thenInject ( orderedInstanceFields , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( orderedInstanceFields , field , instance ) . thenInject () ;
Distance : 4

150
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

151
Tree	Object injected = mockCandidateFilter . thenInject ( field , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( field , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

152
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , field , injected ) . thenInject () ;
Distance : 4

153
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . filterCandidate () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . filterCandidate () ;
Distance : 4

154
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . filterCandidate () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . filterCandidate () ;
Distance : 4

155
Tree	Object field = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object field = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

156
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

157
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , field ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , mocks , field ) . filterCandidate () ;
Distance : 5

158
Tree	Object mockCandidateFilter = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mockCandidateFilter = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

159
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

160
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Distance : 5

161
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , field , field ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , field , field ) . filterCandidate () ;
Distance : 5

162
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

163
Tree	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

164
Tree	Object mockCandidateFilter = mockCandidateFilter . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 5

165
Tree	Object mocks = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

166
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , field , mocks ) . thenInject () ;
Distance : 4

167
Tree	Object injected = injected . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Distance : 5

168
Tree	Object injected = injected . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 5

169
Tree	Object injected = instance . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

170
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

171
Tree	Object injected = instance . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = instance . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

172
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

173
Tree	Object injected = mocks . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

174
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , orderedInstanceFields , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , orderedInstanceFields , instance ) . thenInject () ;
Distance : 3

175
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , injected ) . thenInject () ;
Distance : 4

176
Tree	Object injected = mocks . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mocks . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

177
Tree	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Code	Object instance = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

178
Tree	Object injected = orderedInstanceFields . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = orderedInstanceFields . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

179
Tree	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , orderedInstanceFields , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( orderedInstanceFields , orderedInstanceFields , instance ) . thenInject () ;
Distance : 3

180
Tree	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object orderedInstanceFields = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 4

181
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , orderedInstanceFields ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , orderedInstanceFields ) . filterCandidate () ;
Distance : 4

182
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

183
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Distance : 4

184
Tree	Object injected = mockCandidateFilter . filterCandidate ( field , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( field , orderedInstanceFields , orderedInstanceFields ) . thenInject () ;
Distance : 3

185
Tree	Object instance = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

186
Tree	Object injected = injected . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . thenInject ( mocks , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

187
Tree	Object injected = injected . filterCandidate ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , instance , orderedInstanceFields ) . thenInject () ;
Distance : 4

188
Tree	Object field = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( mocks , field , mockCandidateFilter ) . thenInject () ;
Distance : 4

189
Tree	Object injected = instance . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = instance . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

190
Tree	Object injected = mockCandidateFilter . thenInject ( mocks , injected , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mocks , injected , orderedInstanceFields ) . thenInject () ;
Distance : 4

191
Tree	Object injected = mockCandidateFilter . thenInject ( mockCandidateFilter , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( mockCandidateFilter , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

192
Tree	Object injected = mocks . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field , mocks ) . thenInject () ;
Distance : 4

193
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , field , mocks ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , field , mocks ) . thenInject () ;
Distance : 4

194
Tree	Object injected = mockCandidateFilter . filterCandidate ( instance , field , instance ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( instance , field , instance ) . filterCandidate () ;
Distance : 4

195
Tree	Object field = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Code	Object field = mockCandidateFilter . filterCandidate ( instance , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

196
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , field ) . filterCandidate () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , orderedInstanceFields , field ) . filterCandidate () ;
Distance : 4

197
Tree	Object injected = mockCandidateFilter . thenInject ( injected , field , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . thenInject ( injected , field , orderedInstanceFields ) . thenInject () ;
Distance : 4

198
Tree	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , mocks , orderedInstanceFields ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mockCandidateFilter , mocks , orderedInstanceFields ) . thenInject () ;
Distance : 4

199
Tree	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( instance , field , instance ) . thenInject () ;
Code	Object mockCandidateFilter = mockCandidateFilter . filterCandidate ( instance , field , instance ) . thenInject () ;
Distance : 4

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } v
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } v
Distance : 3

1
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {
Distance : 3

2
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } )
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } )
Distance : 3

3
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } serialised
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } serialised
Distance : 3

4
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ArrayList
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ArrayList
Distance : 3

5
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } parent
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } parent
Distance : 3

6
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } boolean
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } boolean
Distance : 3

7
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } paint
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } paint
Distance : 3

8
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } void
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } void
Distance : 3

9
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertEquals
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertEquals
Distance : 3

10
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } IllegalArgumentException
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } IllegalArgumentException
Distance : 3

11
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !
Distance : 3

12
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } i
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } i
Distance : 3

13
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } false
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } false
Distance : 3

14
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } test
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } test
Distance : 3

15
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } double
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } double
Distance : 3

16
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } int
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } int
Distance : 3

17
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Preconditions
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Preconditions
Distance : 3

18
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } &&
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } &&
Distance : 3

19
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } value
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } value
Distance : 3

20
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } obj
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } obj
Distance : 3

21
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } isNormalBlock
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } isNormalBlock
Distance : 3

22
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } (
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } (
Distance : 3

23
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } contains
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } contains
Distance : 3

24
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <blank>
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <blank>
Distance : 3

25
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } x
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } x
Distance : 3

26
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } getInstance
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } getInstance
Distance : 3

27
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } t
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } t
Distance : 3

28
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Node
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Node
Distance : 3

29
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } expected
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } expected
Distance : 3

30
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } reportCodeChange
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } reportCodeChange
Distance : 3

31
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } join
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } join
Distance : 3

32
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertThat
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertThat
Distance : 3

33
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } invocation
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } invocation
Distance : 3

34
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } FastMath
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } FastMath
Distance : 3

35
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } add
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } add
Distance : 3

36
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkArgument
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkArgument
Distance : 3

37
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } name
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } name
Distance : 3

38
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } @
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } @
Distance : 3

39
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } str
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } str
Distance : 3

40
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } *
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } *
Distance : 3

41
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } m
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } m
Distance : 3

42
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } try
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } try
Distance : 3

43
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } LINE_JOINER
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } LINE_JOINER
Distance : 3

44
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } fireChangeEvent
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } fireChangeEvent
Distance : 3

45
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } testSame
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } testSame
Distance : 3

46
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } createIllegalArgumentException
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } createIllegalArgumentException
Distance : 3

47
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <s>
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <s>
Distance : 3

48
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } type
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } type
Distance : 3

49
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } nullNotPermitted
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } nullNotPermitted
Distance : 3

50
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } matcher
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } matcher
Distance : 3

51
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Distance : 3

52
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Distance : 3

53
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

54
Tree	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Distance : 3

55
Tree	{ return mockSettings . mock ( classToMock , mockSettings ) ; }
Code	{ return mockSettings . mock ( classToMock , mockSettings ) ; }
Distance : 3

56
Tree	{ return mockSettings . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 4

57
Tree	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 3

58
Tree	{ return classToMock . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 4

59
Tree	{ return classToMock . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 4

60
Tree	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 3

61
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 4

62
Tree	{ return classToMock . mock ( classToMock , classToMock ) ; }
Code	{ return classToMock . mock ( classToMock , classToMock ) ; }
Distance : 4

63
Tree	{ return MOCKITO_CORE . mock ( mockSettings , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , classToMock ) ; }
Distance : 3

64
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 4

65
Tree	{ return mockSettings . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 4

66
Tree	{ return mockSettings . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 5

67
Tree	{ return mockSettings . mock ( mockSettings , classToMock ) ; }
Code	{ return mockSettings . mock ( mockSettings , classToMock ) ; }
Distance : 4

68
Tree	{ return classToMock . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 5

69
Tree	{ return mockSettings . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 5

70
Tree	{ return classToMock . mock ( mockSettings , classToMock ) ; }
Code	{ return classToMock . mock ( mockSettings , classToMock ) ; }
Distance : 4

71
Tree	{ return classToMock . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 5

72
Tree	{ return mockSettings . mock ( mockSettings , mockSettings ) ; }
Code	{ return mockSettings . mock ( mockSettings , mockSettings ) ; }
Distance : 4

73
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } chrono
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } chrono
Distance : 3

74
Tree	{ return mockSettings . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 4

75
Tree	{ return classToMock . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 4

76
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } instant
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } instant
Distance : 3

77
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkState
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkState
Distance : 3

78
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !=
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } !=
Distance : 3

79
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } traverseEs6
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } traverseEs6
Distance : 3

80
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ParamChecks
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ParamChecks
Distance : 3

81
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } super
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } super
Distance : 3

82
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } TestUtilities
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } TestUtilities
Distance : 3

83
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Invocation
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Invocation
Distance : 3

84
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } equals
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } equals
Distance : 3

85
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertTrue
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } assertTrue
Distance : 3

86
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } /
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } /
Distance : 3

87
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } externs
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } externs
Distance : 3

88
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } d
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } d
Distance : 3

89
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MathRuntimeException
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MathRuntimeException
Distance : 3

90
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {}
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {}
Distance : 3

91
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mode
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mode
Distance : 3

92
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mock
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mock
Distance : 3

93
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Object
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Object
Distance : 3

94
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Override
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Override
Distance : 3

95
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } for
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } for
Distance : 3

96
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } class
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } class
Distance : 3

97
Tree	{ return classToMock . mock ( mockSettings , mockSettings ) ; }
Code	{ return classToMock . mock ( mockSettings , mockSettings ) ; }
Distance : 4

98
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } getMessage
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } getMessage
Distance : 3

99
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

100
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } protected
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } protected
Distance : 3

101
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Args
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Args
Distance : 3

102
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } array
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } array
Distance : 3

103
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } throw
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } throw
Distance : 3

104
Tree	{ return mockSettings . mock ( classToMock , classToMock ) ; }
Code	{ return mockSettings . mock ( classToMock , classToMock ) ; }
Distance : 4

105
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } JSType
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } JSType
Distance : 3

106
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } toString
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } toString
Distance : 3

107
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } :
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } :
Distance : 3

108
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } p
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } p
Distance : 3

109
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } root
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } root
Distance : 3

110
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } wanted
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } wanted
Distance : 3

111
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Math
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Math
Distance : 3

112
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } options
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } options
Distance : 3

113
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } this
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } this
Distance : 3

114
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } return
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } return
Distance : 3

115
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } source
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } source
Distance : 3

116
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } result
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } result
Distance : 3

117
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ()
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ()
Distance : 3

118
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ,
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ,
Distance : 3

119
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } []
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } []
Distance : 3

120
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } e
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } e
Distance : 3

121
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } +
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } +
Distance : 3

122
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } public
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } public
Distance : 3

123
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } null
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } null
Distance : 3

124
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } String
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } String
Distance : 3

125
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } n
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } n
Distance : 3

126
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } compiler
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } compiler
Distance : 3

127
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } catch
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } catch
Distance : 3

128
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } STRING_CONSTANT
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } STRING_CONSTANT
Distance : 3

129
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } =
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } =
Distance : 3

130
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } {
Distance : 3

131
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } }
Distance : 3

132
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } .
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } .
Distance : 3

133
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ;
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ;
Distance : 3

134
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } new
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } new
Distance : 3

135
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NUMBER_CONSTANT
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NUMBER_CONSTANT
Distance : 3

136
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } abs
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } abs
Distance : 3

137
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } final
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } final
Distance : 3

138
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } true
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } true
Distance : 3

139
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MutableTimePeriod
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } MutableTimePeriod
Distance : 3

140
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } a
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } a
Distance : 3

141
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } b
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } b
Distance : 3

142
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } size
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } size
Distance : 3

143
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } stroke
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } stroke
Distance : 3

144
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <=
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <=
Distance : 3

145
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } s
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } s
Distance : 3

146
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } PeriodType
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } PeriodType
Distance : 3

147
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkNotNull
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } checkNotNull
Distance : 3

148
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } TestUtils
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } TestUtils
Distance : 3

149
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <
Distance : 3

150
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } length
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } length
Distance : 3

151
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ?
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ?
Distance : 3

152
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Assert
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Assert
Distance : 3

153
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ]
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ]
Distance : 3

154
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } -
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } -
Distance : 3

155
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Integer
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Integer
Distance : 3

156
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } T
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } T
Distance : 3

157
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } [
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } [
Distance : 3

158
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } if
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } if
Distance : 3

159
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } lines
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } lines
Distance : 3

160
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } c
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } c
Distance : 3

161
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Test
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Test
Distance : 3

162
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } notifyListeners
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } notifyListeners
Distance : 3

163
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Exception
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Exception
Distance : 3

164
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } >
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } >
Distance : 3

165
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Class
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Class
Distance : 3

166
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } static
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } static
Distance : 3

167
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } long
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } long
Distance : 3

168
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Fraction
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } Fraction
Distance : 3

169
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 3

170
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } StringBuilder
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } StringBuilder
Distance : 3

171
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } verify
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } verify
Distance : 3

172
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mockingProgress
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } mockingProgress
Distance : 3

173
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } setUp
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } setUp
Distance : 3

174
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } stream
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } stream
Distance : 3

175
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } values
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } values
Distance : 3

176
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } invocations
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } invocations
Distance : 3

177
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NodeUtil
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NodeUtil
Distance : 3

178
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } data
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } data
Distance : 3

179
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ex
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ex
Distance : 3

180
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NodeTraversal
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } NodeTraversal
Distance : 3

181
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } List
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } List
Distance : 3

182
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } reportMatcher
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } reportMatcher
Distance : 3

183
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } field
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } field
Distance : 3

184
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } js
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } js
Distance : 3

185
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } isEmpty
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } isEmpty
Distance : 3

186
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } node
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } node
Distance : 3

187
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } getParent
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } getParent
Distance : 3

188
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } index
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } index
Distance : 3

189
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } out
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } out
Distance : 3

190
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } return;
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } return;
Distance : 3

191
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } char
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } char
Distance : 3

192
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } get
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } get
Distance : 3

193
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <>
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } <>
Distance : 3

194
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } setAcceptedLanguage
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } setAcceptedLanguage
Distance : 3

195
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } f
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } f
Distance : 3

196
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } fail
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } fail
Distance : 3

197
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ==
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } ==
Distance : 3

198
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } StrBuilder
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } StrBuilder
Distance : 3

199
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } else
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; } else
Distance : 3

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	mockingProgress
Code	mockingProgress
Distance : 12

1
Tree	MockSettingsInfo
Code	MockSettingsInfo
Distance : 13

2
Tree	Map
Code	Map
Distance : 13

3
Tree	TransformUtils
Code	TransformUtils
Distance : 13

4
Tree	DefaultMultiValueCategoryDataset
Code	DefaultMultiValueCategoryDataset
Distance : 13

5
Tree	sample
Code	sample
Distance : 13

6
Tree	cfg
Code	cfg
Distance : 13

7
Tree	disableStrictMissingPropertyChecks
Code	disableStrictMissingPropertyChecks
Distance : 13

8
Tree	bounds
Code	bounds
Distance : 13

9
Tree	stubbingStarted
Code	stubbingStarted
Distance : 13

10
Tree	specific
Code	specific
Distance : 13

11
Tree	Constructor
Code	Constructor
Distance : 13

12
Tree	final
Code	final
Distance : 13

13
Tree	createMock
Code	createMock
Distance : 13

14
Tree	returnsDeepStubsAnswerUsing
Code	returnsDeepStubsAnswerUsing
Distance : 13

15
Tree	valueAnchor
Code	valueAnchor
Distance : 13

16
Tree	RealFieldUnivariateFunction
Code	RealFieldUnivariateFunction
Distance : 13

17
Tree	generatedMockClass
Code	generatedMockClass
Distance : 13

18
Tree	RectangleInsets
Code	RectangleInsets
Distance : 13

19
Tree	mockHandler
Code	mockHandler
Distance : 13

20
Tree	assertClose
Code	assertClose
Distance : 13

21
Tree	inOrder
Code	inOrder
Distance : 13

22
Tree	mocks
Code	mocks
Distance : 13

23
Tree	peepholePass
Code	peepholePass
Distance : 13

24
Tree	scriptRoot
Code	scriptRoot
Distance : 13

25
Tree	TypeEnv
Code	TypeEnv
Distance : 13

26
Tree	random
Code	random
Distance : 13

27
Tree	CombinedDomainXYPlot
Code	CombinedDomainXYPlot
Distance : 13

28
Tree	normal
Code	normal
Distance : 13

29
Tree	actualMode
Code	actualMode
Distance : 13

30
Tree	CategoryPlot
Code	CategoryPlot
Distance : 13

31
Tree	withSettings
Code	withSettings
Distance : 13

32
Tree	style
Code	style
Distance : 13

33
Tree	YWithXInterval
Code	YWithXInterval
Distance : 13

34
Tree	DateTimeParser
Code	DateTimeParser
Distance : 13

35
Tree	mu
Code	mu
Distance : 13

36
Tree	NormalDistribution
Code	NormalDistribution
Distance : 13

37
Tree	returnChar
Code	returnChar
Distance : 13

38
Tree	setMillis
Code	setMillis
Distance : 13

39
Tree	declRetType
Code	declRetType
Distance : 13

40
Tree	font
Code	font
Distance : 13

41
Tree	Localized
Code	Localized
Distance : 13

42
Tree	XYPlot
Code	XYPlot
Distance : 13

43
Tree	BivariateFunction
Code	BivariateFunction
Distance : 13

44
Tree	enableGatherExternProperties
Code	enableGatherExternProperties
Distance : 13

45
Tree	typeParameter
Code	typeParameter
Distance : 13

46
Tree	leftType
Code	leftType
Distance : 13

47
Tree	XYDataItem
Code	XYDataItem
Distance : 13

48
Tree	calculator
Code	calculator
Distance : 13

49
Tree	N
Code	N
Distance : 13

50
Tree	MockingProgressImpl
Code	MockingProgressImpl
Distance : 13

51
Tree	f
Code	f
Distance : 13

52
Tree	object
Code	object
Distance : 13

53
Tree	fieldType
Code	fieldType
Distance : 13

54
Tree	ToStringStyle
Code	ToStringStyle
Distance : 13

55
Tree	Euclidean2D
Code	Euclidean2D
Distance : 13

56
Tree	codeChanged
Code	codeChanged
Distance : 13

57
Tree	data
Code	data
Distance : 13

58
Tree	delimiters
Code	delimiters
Distance : 13

59
Tree	stepSize
Code	stepSize
Distance : 13

60
Tree	DEFAULT_MAX_EVALUATIONS
Code	DEFAULT_MAX_EVALUATIONS
Distance : 13

61
Tree	fireAnnotationChanged
Code	fireAnnotationChanged
Distance : 13

62
Tree	TitleChangeEvent
Code	TitleChangeEvent
Distance : 13

63
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 13

64
Tree	FastDateFormat
Code	FastDateFormat
Distance : 13

65
Tree	getTimeInMillis
Code	getTimeInMillis
Distance : 13

66
Tree	evaluate
Code	evaluate
Distance : 13

67
Tree	BubbleXYItemLabelGenerator
Code	BubbleXYItemLabelGenerator
Distance : 13

68
Tree	Token
Code	Token
Distance : 13

69
Tree	compiler
Code	compiler
Distance : 13

70
Tree	stepStart
Code	stepStart
Distance : 13

71
Tree	entities
Code	entities
Distance : 13

72
Tree	FastCosineTransformer
Code	FastCosineTransformer
Distance : 13

73
Tree	readPaint
Code	readPaint
Distance : 13

74
Tree	T
Code	T
Distance : 13

75
Tree	Space
Code	Space
Distance : 13

76
Tree	PaintMap
Code	PaintMap
Distance : 13

77
Tree	Strategy
Code	Strategy
Distance : 13

78
Tree	setEntry
Code	setEntry
Distance : 13

79
Tree	PeepholeOptimizationsPass
Code	PeepholeOptimizationsPass
Distance : 13

80
Tree	X
Code	X
Distance : 13

81
Tree	BetaDistribution
Code	BetaDistribution
Distance : 13

82
Tree	cjs
Code	cjs
Distance : 13

83
Tree	contentStart
Code	contentStart
Distance : 13

84
Tree	getField
Code	getField
Distance : 13

85
Tree	left
Code	left
Distance : 13

86
Tree	actualType
Code	actualType
Distance : 13

87
Tree	defaultAnswer
Code	defaultAnswer
Distance : 13

88
Tree	getNumber
Code	getNumber
Distance : 13

89
Tree	printTo
Code	printTo
Distance : 13

90
Tree	verifyNoMoreInteractions
Code	verifyNoMoreInteractions
Distance : 13

91
Tree	SparseFieldMatrix
Code	SparseFieldMatrix
Distance : 13

92
Tree	madeChange
Code	madeChange
Distance : 13

93
Tree	Circle
Code	Circle
Distance : 13

94
Tree	DefaultBoxAndWhiskerCategoryDataset
Code	DefaultBoxAndWhiskerCategoryDataset
Distance : 13

95
Tree	declaredType
Code	declaredType
Distance : 13

96
Tree	empiricalDistribution
Code	empiricalDistribution
Distance : 13

97
Tree	Calendar
Code	Calendar
Distance : 13

98
Tree	NodeTraversal
Code	NodeTraversal
Distance : 13

99
Tree	MockSettingsImpl
Code	MockSettingsImpl
Distance : 13

100
Tree	InternalPrinter
Code	InternalPrinter
Distance : 13

101
Tree	InputStream
Code	InputStream
Distance : 13

102
Tree	MockHandler
Code	MockHandler
Distance : 13

103
Tree	Comparator
Code	Comparator
Distance : 13

104
Tree	reportCodeChange
Code	reportCodeChange
Distance : 13

105
Tree	Foo
Code	Foo
Distance : 13

106
Tree	LastArguments
Code	LastArguments
Distance : 13

107
Tree	SerialUtils
Code	SerialUtils
Distance : 13

108
Tree	mockSettings
Code	mockSettings
Distance : 13

109
Tree	invocationListeners
Code	invocationListeners
Distance : 13

110
Tree	HierarchicalSet
Code	HierarchicalSet
Distance : 13

111
Tree	CategoryDataset
Code	CategoryDataset
Distance : 13

112
Tree	OHLCItem
Code	OHLCItem
Distance : 13

113
Tree	TranspilationPasses
Code	TranspilationPasses
Distance : 13

114
Tree	MatrixSeriesCollection
Code	MatrixSeriesCollection
Distance : 13

115
Tree	instance
Code	instance
Distance : 13

116
Tree	maybeProcessAccessibilityModifier
Code	maybeProcessAccessibilityModifier
Distance : 13

117
Tree	iRules
Code	iRules
Distance : 13

118
Tree	space
Code	space
Distance : 13

119
Tree	Vector
Code	Vector
Distance : 13

120
Tree	classToMock
Code	classToMock
Distance : 13

121
Tree	MOCKING_PROGRESS
Code	MOCKING_PROGRESS
Distance : 13

122
Tree	Paint
Code	Paint
Distance : 13

123
Tree	Vector1D
Code	Vector1D
Distance : 13

124
Tree	MockCreationSettings
Code	MockCreationSettings
Distance : 13

125
Tree	shape
Code	shape
Distance : 13

126
Tree	FastFourierTransformer
Code	FastFourierTransformer
Distance : 13

127
Tree	Rectangle2D
Code	Rectangle2D
Distance : 13

128
Tree	Range
Code	Range
Distance : 13

129
Tree	getArgumentMatcherStorage
Code	getArgumentMatcherStorage
Distance : 13

130
Tree	Point2D
Code	Point2D
Distance : 13

131
Tree	InternalParser
Code	InternalParser
Distance : 13

132
Tree	mapper
Code	mapper
Distance : 13

133
Tree	TextUtils
Code	TextUtils
Distance : 13

134
Tree	DateTimeFormatter
Code	DateTimeFormatter
Distance : 13

135
Tree	Es6SyntacticScopeCreator
Code	Es6SyntacticScopeCreator
Distance : 13

136
Tree	cal
Code	cal
Distance : 13

137
Tree	FlowScope
Code	FlowScope
Distance : 13

138
Tree	callback
Code	callback
Distance : 13

139
Tree	SparseFieldVector
Code	SparseFieldVector
Distance : 13

140
Tree	BSPTree
Code	BSPTree
Distance : 13

141
Tree	MockingProgress
Code	MockingProgress
Distance : 13

142
Tree	MOCKITO_CORE
Code	MOCKITO_CORE
Distance : 13

143
Tree	mockitoStubber
Code	mockitoStubber
Distance : 13

144
Tree	dataArea
Code	dataArea
Distance : 13

145
Tree	scopeCreator
Code	scopeCreator
Distance : 13

146
Tree	getRandomGenerator
Code	getRandomGenerator
Distance : 13

147
Tree	UniformRandomProvider
Code	UniformRandomProvider
Distance : 13

148
Tree	ItemLabelPosition
Code	ItemLabelPosition
Distance : 13

149
Tree	processTranspile
Code	processTranspile
Distance : 13

150
Tree	writePaint
Code	writePaint
Distance : 13

151
Tree	creator
Code	creator
Distance : 13

152
Tree	CALLS_REAL_METHODS
Code	CALLS_REAL_METHODS
Distance : 13

153
Tree	k
Code	k
Distance : 13

154
Tree	verificationMode
Code	verificationMode
Distance : 13

155
Tree	Shape
Code	Shape
Distance : 13

156
Tree	@
Code	@
Distance : 13

157
Tree	FieldMatrix
Code	FieldMatrix
Distance : 13

158
Tree	ObjectOutputStream
Code	ObjectOutputStream
Distance : 13

159
Tree	EnvTypePair
Code	EnvTypePair
Distance : 13

160
Tree	anchor
Code	anchor
Distance : 13

161
Tree	VerificationDataImpl
Code	VerificationDataImpl
Distance : 13

162
Tree	MockControl
Code	MockControl
Distance : 13

163
Tree	zone
Code	zone
Distance : 13

164
Tree	writeObject
Code	writeObject
Distance : 13

165
Tree	currentFile
Code	currentFile
Distance : 13

166
Tree	DummyStepInterpolator
Code	DummyStepInterpolator
Distance : 13

167
Tree	getLastArguments
Code	getLastArguments
Distance : 13

168
Tree	serialize
Code	serialize
Distance : 13

169
Tree	integrator
Code	integrator
Distance : 13

170
Tree	Complex
Code	Complex
Distance : 13

171
Tree	generator
Code	generator
Distance : 13

172
Tree	StrokeChooserPanel
Code	StrokeChooserPanel
Distance : 13

173
Tree	timeZone
Code	timeZone
Distance : 13

174
Tree	reflectionHashCode
Code	reflectionHashCode
Distance : 13

175
Tree	validateMostStuff
Code	validateMostStuff
Distance : 13

176
Tree	ValueAxis
Code	ValueAxis
Distance : 13

177
Tree	reportOr
Code	reportOr
Distance : 13

178
Tree	Scope
Code	Scope
Distance : 13

179
Tree	XYDifferenceRenderer
Code	XYDifferenceRenderer
Distance : 13

180
Tree	ScopeCreator
Code	ScopeCreator
Distance : 13

181
Tree	float
Code	float
Distance : 13

182
Tree	maybeTemporarilyLiveNodes
Code	maybeTemporarilyLiveNodes
Distance : 13

183
Tree	out.value
Code	out.value
Distance : 13

184
Tree	validateState
Code	validateState
Distance : 13

185
Tree	eigenvectors
Code	eigenvectors
Distance : 13

186
Tree	arrow
Code	arrow
Distance : 13

187
Tree	disableTypeCheck
Code	disableTypeCheck
Distance : 13

188
Tree	xx
Code	xx
Distance : 13

189
Tree	DateTimePrinter
Code	DateTimePrinter
Distance : 13

190
Tree	Coordinates1D
Code	Coordinates1D
Distance : 13

191
Tree	ArithmeticUtils
Code	ArithmeticUtils
Distance : 13

192
Tree	assertTypeEquals
Code	assertTypeEquals
Distance : 13

193
Tree	obtainSaveField
Code	obtainSaveField
Distance : 13

194
Tree	CheckProvidesCallback
Code	CheckProvidesCallback
Distance : 13

195
Tree	tree
Code	tree
Distance : 13

196
Tree	clone.legendArea
Code	clone.legendArea
Distance : 13

197
Tree	xMatrix
Code	xMatrix
Distance : 13

198
Tree	Point
Code	Point
Distance : 13

199
Tree	DurationFormatUtils.Token
Code	DurationFormatUtils.Token
Distance : 13

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; notifyListeners
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; notifyListeners
Distance : 6

1
Tree	return recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Code	return recordDeepStubAnswer ( getMock ( invocation ) , invocation ) ;
Distance : 7

2
Tree	return newDeepStubMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

3
Tree	return getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return getMock ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 7

4
Tree	return recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Code	return recordDeepStubAnswer ( getMock ( invocation ) , container ) ;
Distance : 6

5
Tree	return recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( container ) , invocation ) ;
Distance : 7

6
Tree	return getMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return getMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

7
Tree	return newDeepStubMock ( recordDeepStubAnswer ( invocation ) , container ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( invocation ) , container ) ;
Distance : 7

8
Tree	return newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

9
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

10
Tree	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 6

11
Tree	return getMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

12
Tree	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , container ) ;
Distance : 5

13
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 6

14
Tree	return newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

15
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

16
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

17
Tree	return newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return newDeepStubMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 7

18
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , invocation ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 7

19
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 7

20
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 6

21
Tree	return newDeepStubMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , container ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

22
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( invocation ) , invocation ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( invocation ) , invocation ) ;
Distance : 7

23
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 7

24
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( invocation ) , container ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( invocation ) , container ) ;
Distance : 6

25
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

26
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; field
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; field
Distance : 6

27
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; IllegalArgumentException
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; IllegalArgumentException
Distance : 6

28
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; name
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; name
Distance : 6

29
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; FastMath
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; FastMath
Distance : 6

30
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; expected
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; expected
Distance : 6

31
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; t
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; t
Distance : 6

32
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; x
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; x
Distance : 6

33
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; invocation
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; invocation
Distance : 6

34
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ArrayList
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ArrayList
Distance : 6

35
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; parent
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; parent
Distance : 6

36
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; LINE_JOINER
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; LINE_JOINER
Distance : 6

37
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; mode
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; mode
Distance : 6

38
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; testSame
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; testSame
Distance : 6

39
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; str
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; str
Distance : 6

40
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; reportCodeChange
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; reportCodeChange
Distance : 6

41
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Object
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Object
Distance : 6

42
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; createIllegalArgumentException
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; createIllegalArgumentException
Distance : 6

43
Tree	return newDeepStubMock ( newDeepStubMock ( invocation ) , invocation ) ;
Code	return newDeepStubMock ( newDeepStubMock ( invocation ) , invocation ) ;
Distance : 7

44
Tree	return getMock ( newDeepStubMock ( invocation ) , container ) ;
Code	return getMock ( newDeepStubMock ( invocation ) , container ) ;
Distance : 6

45
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

46
Tree	return newDeepStubMock ( newDeepStubMock ( invocation ) , container ) ;
Code	return newDeepStubMock ( newDeepStubMock ( invocation ) , container ) ;
Distance : 6

47
Tree	return recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( container ) , container ) ;
Distance : 6

48
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Test
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Test
Distance : 6

49
Tree	return getMock ( recordDeepStubAnswer ( invocation ) , container ) ;
Code	return getMock ( recordDeepStubAnswer ( invocation ) , container ) ;
Distance : 7

50
Tree	return getMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , invocation ) ;
Code	return getMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

51
Tree	return getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 7

52
Tree	return newDeepStubMock ( newDeepStubMock ( container ) , container ) ;
Code	return newDeepStubMock ( newDeepStubMock ( container ) , container ) ;
Distance : 7

53
Tree	return newDeepStubMock ( getMock ( container ) , container ) ;
Code	return newDeepStubMock ( getMock ( container ) , container ) ;
Distance : 8

54
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( invocation ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 7

55
Tree	return newDeepStubMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

56
Tree	return getMock ( newDeepStubMock ( container ) , container ) ;
Code	return getMock ( newDeepStubMock ( container ) , container ) ;
Distance : 7

57
Tree	return getMock ( recordDeepStubAnswer ( invocation ) , invocation ) ;
Code	return getMock ( recordDeepStubAnswer ( invocation ) , invocation ) ;
Distance : 8

58
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

59
Tree	return newDeepStubMock ( getMock ( invocation ) , container ) ;
Code	return newDeepStubMock ( getMock ( invocation ) , container ) ;
Distance : 7

60
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( container ) , invocation ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( container ) , invocation ) ;
Distance : 8

61
Tree	return newDeepStubMock ( newDeepStubMock ( container ) , invocation ) ;
Code	return newDeepStubMock ( newDeepStubMock ( container ) , invocation ) ;
Distance : 8

62
Tree	return getMock ( getMock ( invocation ) , container ) ;
Code	return getMock ( getMock ( invocation ) , container ) ;
Distance : 7

63
Tree	return getMock ( newDeepStubMock ( container ) , invocation ) ;
Code	return getMock ( newDeepStubMock ( container ) , invocation ) ;
Distance : 8

64
Tree	return recordDeepStubAnswer ( getMock ( container ) , container ) ;
Code	return recordDeepStubAnswer ( getMock ( container ) , container ) ;
Distance : 7

65
Tree	return newDeepStubMock ( getMock ( invocation ) , invocation ) ;
Code	return newDeepStubMock ( getMock ( invocation ) , invocation ) ;
Distance : 8

66
Tree	return newDeepStubMock ( recordDeepStubAnswer ( container ) , container ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( container ) , container ) ;
Distance : 8

67
Tree	return getMock ( getMock ( invocation ) , invocation ) ;
Code	return getMock ( getMock ( invocation ) , invocation ) ;
Distance : 8

68
Tree	return recordDeepStubAnswer ( getMock ( container ) , invocation ) ;
Code	return recordDeepStubAnswer ( getMock ( container ) , invocation ) ;
Distance : 8

69
Tree	return getMock ( recordDeepStubAnswer ( container ) , container ) ;
Code	return getMock ( recordDeepStubAnswer ( container ) , container ) ;
Distance : 8

70
Tree	return newDeepStubMock ( recordDeepStubAnswer ( container ) , invocation ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( container ) , invocation ) ;
Distance : 9

71
Tree	return newDeepStubMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 7

72
Tree	return getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return getMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

73
Tree	return newDeepStubMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , invocation ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

74
Tree	return newDeepStubMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

75
Tree	return newDeepStubMock ( recordDeepStubAnswer ( container ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

76
Tree	return newDeepStubMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return newDeepStubMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

77
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

78
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

79
Tree	return newDeepStubMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return newDeepStubMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

80
Tree	return getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return getMock ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 8

81
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( container ) , container ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( container ) , container ) ;
Distance : 7

82
Tree	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 6

83
Tree	return newDeepStubMock ( recordDeepStubAnswer ( invocation ) , invocation ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( invocation ) , invocation ) ;
Distance : 8

84
Tree	return recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 7

85
Tree	return getMock ( getMock ( container ) , container ) ;
Code	return getMock ( getMock ( container ) , container ) ;
Distance : 8

86
Tree	return newDeepStubMock ( getMock ( container ) , invocation ) ;
Code	return newDeepStubMock ( getMock ( container ) , invocation ) ;
Distance : 9

87
Tree	return recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 7

88
Tree	return getMock ( getMock ( container ) , invocation ) ;
Code	return getMock ( getMock ( container ) , invocation ) ;
Distance : 9

89
Tree	return newDeepStubMock ( recordDeepStubAnswer ( invocation ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( recordDeepStubAnswer ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

90
Tree	return getMock ( recordDeepStubAnswer ( invocation ) , returnTypeGenericMetadata ) ;
Code	return getMock ( recordDeepStubAnswer ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

91
Tree	return newDeepStubMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 8

92
Tree	return recordDeepStubAnswer ( recordDeepStubAnswer ( container ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( recordDeepStubAnswer ( container ) , returnTypeGenericMetadata ) ;
Distance : 8

93
Tree	return getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Code	return getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 8

94
Tree	return newDeepStubMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return newDeepStubMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

95
Tree	return getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return getMock ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

96
Tree	return recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( getMock ( container ) , returnTypeGenericMetadata ) ;
Distance : 8

97
Tree	return getMock ( recordDeepStubAnswer ( container ) , returnTypeGenericMetadata ) ;
Code	return getMock ( recordDeepStubAnswer ( container ) , returnTypeGenericMetadata ) ;
Distance : 9

98
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ]
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ]
Distance : 6

99
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 5

100
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Preconditions
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Preconditions
Distance : 6

101
Tree	return getMock ( recordDeepStubAnswer ( container ) , invocation ) ;
Code	return getMock ( recordDeepStubAnswer ( container ) , invocation ) ;
Distance : 9

102
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; (
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; (
Distance : 6

103
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; .
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; .
Distance : 6

104
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; }
Distance : 6

105
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; i
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; i
Distance : 6

106
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; assertEquals
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; assertEquals
Distance : 6

107
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; @
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; @
Distance : 6

108
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; []
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; []
Distance : 6

109
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; test
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; test
Distance : 6

110
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; nullNotPermitted
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; nullNotPermitted
Distance : 6

111
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; !
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; !
Distance : 6

112
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; super
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; super
Distance : 6

113
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; T
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; T
Distance : 6

114
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; checkState
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; checkState
Distance : 6

115
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; double
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; double
Distance : 6

116
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; int
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; int
Distance : 6

117
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; value
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; value
Distance : 6

118
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ==
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ==
Distance : 6

119
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; [
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; [
Distance : 6

120
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; -
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; -
Distance : 6

121
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; try
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; try
Distance : 6

122
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; :
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; :
Distance : 6

123
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ()
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ()
Distance : 6

124
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ParamChecks
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ParamChecks
Distance : 6

125
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; List
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; List
Distance : 6

126
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Override
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Override
Distance : 6

127
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Exception
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Exception
Distance : 6

128
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; MathRuntimeException
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; MathRuntimeException
Distance : 6

129
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; f
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; f
Distance : 6

130
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; class
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; class
Distance : 6

131
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; array
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; array
Distance : 6

132
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; m
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; m
Distance : 6

133
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; mock
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; mock
Distance : 6

134
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; new
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; new
Distance : 6

135
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; {}
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; {}
Distance : 6

136
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; =
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; =
Distance : 6

137
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; final
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; final
Distance : 6

138
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; false
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; false
Distance : 6

139
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; length
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; length
Distance : 6

140
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; fireChangeEvent
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; fireChangeEvent
Distance : 6

141
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; serialised
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; serialised
Distance : 6

142
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; type
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; type
Distance : 6

143
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; getInstance
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; getInstance
Distance : 6

144
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; boolean
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; boolean
Distance : 6

145
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; paint
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; paint
Distance : 6

146
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; join
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; join
Distance : 6

147
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; *
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; *
Distance : 6

148
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <
Distance : 6

149
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; c
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; c
Distance : 6

150
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; return
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; return
Distance : 6

151
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; this
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; this
Distance : 6

152
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; >
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; >
Distance : 6

153
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; if
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; if
Distance : 6

154
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; public
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; public
Distance : 6

155
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; null
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; null
Distance : 6

156
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; NUMBER_CONSTANT
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; NUMBER_CONSTANT
Distance : 6

157
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; verify
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; verify
Distance : 6

158
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ,
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ,
Distance : 6

159
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Node
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Node
Distance : 6

160
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; n
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; n
Distance : 6

161
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; String
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; String
Distance : 6

162
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; source
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; source
Distance : 6

163
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; p
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; p
Distance : 6

164
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Math
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Math
Distance : 6

165
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; options
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; options
Distance : 6

166
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Class
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Class
Distance : 6

167
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; toString
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; toString
Distance : 6

168
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; root
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; root
Distance : 6

169
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; {
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; {
Distance : 6

170
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; assertThat
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; assertThat
Distance : 6

171
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; !=
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; !=
Distance : 6

172
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; )
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; )
Distance : 6

173
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <s>
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <s>
Distance : 6

174
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; return
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; return
Distance : 6

175
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <blank>
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <blank>
Distance : 6

176
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ;
Distance : 6

177
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; +
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; +
Distance : 6

178
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; v
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; v
Distance : 6

179
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; e
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; e
Distance : 6

180
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; compiler
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; compiler
Distance : 6

181
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Integer
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Integer
Distance : 6

182
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; lines
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; lines
Distance : 6

183
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; fail
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; fail
Distance : 6

184
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Args
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; Args
Distance : 6

185
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <>
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; <>
Distance : 6

186
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; result
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; result
Distance : 6

187
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; &&
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; &&
Distance : 6

188
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; STRING_CONSTANT
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; STRING_CONSTANT
Distance : 6

189
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; wanted
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; wanted
Distance : 6

190
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ex
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; ex
Distance : 6

191
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; NodeUtil
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; NodeUtil
Distance : 6

192
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; add
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; add
Distance : 6

193
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; checkArgument
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; checkArgument
Distance : 6

194
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; data
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; data
Distance : 6

195
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; NodeTraversal
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; NodeTraversal
Distance : 6

196
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; void
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; void
Distance : 6

197
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; throw
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; throw
Distance : 6

198
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; catch
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; catch
Distance : 6

199
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; true
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; true
Distance : 6

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Distance : 10

1
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } add
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } add
Distance : 10

2
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Distance : 10

3
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } data
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } data
Distance : 10

4
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Distance : 10

5
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } void
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } void
Distance : 10

6
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } throw
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } throw
Distance : 10

7
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } compiler
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } compiler
Distance : 10

8
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } catch
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } catch
Distance : 10

9
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } e
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } e
Distance : 10

10
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } +
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } +
Distance : 10

11
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } n
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } n
Distance : 10

12
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Distance : 10

13
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Distance : 10

14
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } mock
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } mock
Distance : 10

15
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ]
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ]
Distance : 10

16
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } mode
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } mode
Distance : 10

17
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } &&
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } &&
Distance : 10

18
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } public
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } public
Distance : 10

19
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } final
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } final
Distance : 10

20
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } null
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } null
Distance : 10

21
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Distance : 10

22
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Distance : 10

23
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } if
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } if
Distance : 10

24
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ex
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ex
Distance : 10

25
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Distance : 10

26
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } new
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } new
Distance : 10

27
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } =
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } =
Distance : 10

28
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Distance : 10

29
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ()
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ()
Distance : 10

30
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ,
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ,
Distance : 10

31
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } {
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } {
Distance : 10

32
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 10

33
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <
Distance : 10

34
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } .
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } .
Distance : 10

35
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } (
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } (
Distance : 10

36
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ;
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ;
Distance : 10

37
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Distance : 10

38
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 10

39
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <s>
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <s>
Distance : 10

40
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } )
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } )
Distance : 10

41
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } >
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } >
Distance : 10

42
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } js
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } js
Distance : 10

43
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } return
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } return
Distance : 10

44
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } true
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } true
Distance : 10

45
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } this
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } this
Distance : 10

46
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } -
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } -
Distance : 10

47
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } root
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } root
Distance : 10

48
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Distance : 10

49
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } /
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } /
Distance : 10

50
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } long
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } long
Distance : 10

51
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } value
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } value
Distance : 10

52
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } T
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } T
Distance : 10

53
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Distance : 10

54
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } super
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } super
Distance : 10

55
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } instant
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } instant
Distance : 10

56
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } matcher
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } matcher
Distance : 10

57
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } stream
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } stream
Distance : 10

58
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } values
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } values
Distance : 10

59
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Distance : 10

60
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } else
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } else
Distance : 10

61
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } *
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } *
Distance : 10

62
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } y
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } y
Distance : 10

63
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Distance : 10

64
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } abs
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } abs
Distance : 10

65
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

66
Tree	{ return ( Collection ) anyCollection ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) anyCollection ( Any.ANY ) . returnList () ; }
Distance : 8

67
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

68
Tree	{ return ( Collection ) anyCollection ( Any.ANY ) . anyCollection () ; }
Code	{ return ( Collection ) anyCollection ( Any.ANY ) . anyCollection () ; }
Distance : 8

69
Tree	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

70
Tree	{ return ( Collection ) anyCollection ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) anyCollection ( Any.ANY ) . reportMatcher () ; }
Distance : 8

71
Tree	{ return ( Collection ) returnList ( Any.ANY ) . anyCollection () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . anyCollection () ; }
Distance : 8

72
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } !=
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } !=
Distance : 10

73
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Assert
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Assert
Distance : 10

74
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } alpha
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } alpha
Distance : 10

75
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } double
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } double
Distance : 10

76
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Distance : 10

77
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Distance : 10

78
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Distance : 10

79
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Distance : 10

80
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } node
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } node
Distance : 10

81
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getParent
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getParent
Distance : 10

82
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Distance : 10

83
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } setUp
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } setUp
Distance : 10

84
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } out
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } out
Distance : 10

85
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } index
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } index
Distance : 10

86
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } invocations
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } invocations
Distance : 10

87
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } protected
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } protected
Distance : 10

88
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } chrono
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } chrono
Distance : 10

89
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Distance : 10

90
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } instance
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } instance
Distance : 10

91
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Distance : 10

92
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Distance : 10

93
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Distance : 10

94
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } [
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } [
Distance : 10

95
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } i
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } i
Distance : 10

96
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } checkState
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } checkState
Distance : 10

97
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } int
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } int
Distance : 10

98
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } b
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } b
Distance : 10

99
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

100
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Distance : 10

101
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } return;
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } return;
Distance : 10

102
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } char
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } char
Distance : 10

103
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Distance : 10

104
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } size
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } size
Distance : 10

105
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } clone
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } clone
Distance : 10

106
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Double
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Double
Distance : 10

107
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } s
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } s
Distance : 10

108
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Distance : 10

109
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } obj
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } obj
Distance : 10

110
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } contains
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } contains
Distance : 10

111
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <=
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <=
Distance : 10

112
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } String
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } String
Distance : 10

113
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Distance : 10

114
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } str
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } str
Distance : 10

115
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } testSame
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } testSame
Distance : 10

116
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } parent
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } parent
Distance : 10

117
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Distance : 10

118
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . anyCollection () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . anyCollection () ; }
Distance : 8

119
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Object
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Object
Distance : 10

120
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } JSType
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } JSType
Distance : 10

121
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Distance : 10

122
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } static
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } static
Distance : 10

123
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Distance : 10

124
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } source
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } source
Distance : 10

125
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Exception
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Exception
Distance : 10

126
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } join
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } join
Distance : 10

127
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } paint
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } paint
Distance : 10

128
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } boolean
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } boolean
Distance : 10

129
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Distance : 10

130
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } type
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } type
Distance : 10

131
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } serialised
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } serialised
Distance : 10

132
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Distance : 10

133
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } array
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } array
Distance : 10

134
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } f
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } f
Distance : 10

135
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } class
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } class
Distance : 10

136
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Distance : 10

137
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Distance : 10

138
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Distance : 10

139
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Distance : 10

140
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Distance : 10

141
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } a
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } a
Distance : 10

142
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Distance : 10

143
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } get
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } get
Distance : 10

144
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Distance : 10

145
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } {}
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } {}
Distance : 10

146
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Distance : 10

147
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } List
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } List
Distance : 10

148
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Distance : 10

149
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } :
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } :
Distance : 10

150
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } try
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } try
Distance : 10

151
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } m
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } m
Distance : 10

152
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } v
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } v
Distance : 10

153
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } verify
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } verify
Distance : 10

154
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } c
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } c
Distance : 10

155
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } lines
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } lines
Distance : 10

156
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Integer
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Integer
Distance : 10

157
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Node
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Node
Distance : 10

158
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } length
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } length
Distance : 10

159
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Distance : 10

160
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } throws
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } throws
Distance : 10

161
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } expected
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } expected
Distance : 10

162
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } invocation
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } invocation
Distance : 10

163
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Distance : 10

164
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } t
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } t
Distance : 10

165
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } name
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } name
Distance : 10

166
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <>
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } <>
Distance : 10

167
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Args
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Args
Distance : 10

168
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } result
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } result
Distance : 10

169
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Distance : 10

170
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } scope
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } scope
Distance : 10

171
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } append
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } append
Distance : 10

172
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ?
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ?
Distance : 10

173
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } !
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } !
Distance : 10

174
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Distance : 10

175
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } fail
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } fail
Distance : 10

176
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } []
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } []
Distance : 10

177
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } @
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } @
Distance : 10

178
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Distance : 10

179
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } test
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } test
Distance : 10

180
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ==
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } ==
Distance : 10

181
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } equals
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } equals
Distance : 10

182
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Distance : 10

183
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } externs
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } externs
Distance : 10

184
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } for
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } for
Distance : 10

185
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Distance : 10

186
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } d
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } d
Distance : 10

187
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } sb
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } sb
Distance : 10

188
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Override
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Override
Distance : 10

189
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } field
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } field
Distance : 10

190
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } false
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } false
Distance : 10

191
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } x
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } x
Distance : 10

192
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Distance : 10

193
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Test
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Test
Distance : 10

194
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } p
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } p
Distance : 10

195
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Class
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Class
Distance : 10

196
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } options
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } options
Distance : 10

197
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Math
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } Math
Distance : 10

198
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } toString
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } toString
Distance : 10

199
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } stroke
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; } stroke
Distance : 10

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ]
Distance : 8

70
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StrBuilder
Distance : 7

1
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } add
Distance : 7

2
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkArgument
Distance : 7

3
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } data
Distance : 7

4
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeUtil
Distance : 7

5
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } void
Distance : 7

6
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throw
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } compiler
Distance : 7

8
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } catch
Distance : 7

9
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } e
Distance : 7

10
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } +
Distance : 7

11
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } n
Distance : 7

12
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeTraversal
Distance : 7

13
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportCodeChange
Distance : 7

14
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mock
Distance : 7

15
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ]
Distance : 7

16
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mode
Distance : 7

17
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } &&
Distance : 7

18
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } public
Distance : 7

19
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } final
Distance : 7

20
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } null
Distance : 7

21
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getArgumentMatcherStorage
Distance : 7

22
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } wanted
Distance : 7

23
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } if
Distance : 7

24
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ex
Distance : 7

25
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Preconditions
Distance : 7

26
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } new
Distance : 7

27
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } =
Distance : 7

28
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } STRING_CONSTANT
Distance : 7

29
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ()
Distance : 7

30
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ,
Distance : 7

31
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {
Distance : 7

32
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Distance : 7

33
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <
Distance : 7

34
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } .
Distance : 7

35
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } (
Distance : 7

36
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ;
Distance : 7

37
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <blank>
Distance : 7

38
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Distance : 7

39
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <s>
Distance : 7

40
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } )
Distance : 7

41
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } >
Distance : 7

42
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } js
Distance : 7

43
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return
Distance : 7

44
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } true
Distance : 7

45
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } this
Distance : 7

46
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } -
Distance : 7

47
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } root
Distance : 7

48
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NUMBER_CONSTANT
Distance : 7

49
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } /
Distance : 7

50
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } long
Distance : 7

51
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } value
Distance : 7

52
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } T
Distance : 7

53
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setAcceptedLanguage
Distance : 7

54
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } super
Distance : 7

55
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instant
Distance : 7

56
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } matcher
Distance : 7

57
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stream
Distance : 7

58
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } values
Distance : 7

59
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getMessage
Distance : 7

60
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } else
Distance : 7

61
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } *
Distance : 7

62
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } y
Distance : 7

63
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isBlock
Distance : 7

64
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } abs
Distance : 7

65
Tree	{ return anyMap ( Any.ANY ) . returnMap () ; }
Code	{ return anyMap ( Any.ANY ) . returnMap () ; }
Distance : 5

66
Tree	{ return reportMatcher ( Any.ANY ) . anyMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyMap () ; }
Distance : 5

67
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 6

68
Tree	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 6

69
Tree	{ return anyMap ( Any.ANY ) . anyMap () ; }
Code	{ return anyMap ( Any.ANY ) . anyMap () ; }
Distance : 5

70
Tree	{ return anyMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return anyMap ( Any.ANY ) . reportMatcher () ; }
Distance : 5

71
Tree	{ return returnMap ( Any.ANY ) . anyMap () ; }
Code	{ return returnMap ( Any.ANY ) . anyMap () ; }
Distance : 5

72
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !=
Distance : 7

73
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Assert
Distance : 7

74
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } alpha
Distance : 7

75
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } double
Distance : 7

76
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkNotNull
Distance : 7

77
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtils
Distance : 7

78
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Fraction
Distance : 7

79
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } valueOf
Distance : 7

80
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } node
Distance : 7

81
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getParent
Distance : 7

82
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportMatcher
Distance : 7

83
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setUp
Distance : 7

84
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } out
Distance : 7

85
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } index
Distance : 7

86
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocations
Distance : 7

87
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } protected
Distance : 7

88
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } chrono
Distance : 7

89
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } traverseEs6
Distance : 7

90
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instance
Distance : 7

91
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } optimizer
Distance : 7

92
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertTrue
Distance : 7

93
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } simpleMethod
Distance : 7

94
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } [
Distance : 7

95
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } i
Distance : 7

96
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkState
Distance : 7

97
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } int
Distance : 7

98
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } b
Distance : 7

99
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

100
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LanguageMode.ECMASCRIPT_2015
Distance : 7

101
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return;
Distance : 7

102
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } char
Distance : 7

103
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mockingProgress
Distance : 7

104
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } size
Distance : 7

105
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } clone
Distance : 7

106
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Double
Distance : 7

107
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } s
Distance : 7

108
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } PeriodType
Distance : 7

109
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } obj
Distance : 7

110
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } contains
Distance : 7

111
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <=
Distance : 7

112
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } String
Distance : 7

113
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertThat
Distance : 7

114
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } str
Distance : 7

115
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } testSame
Distance : 7

116
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } parent
Distance : 7

117
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StringBuilder
Distance : 7

118
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

119
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Object
Distance : 7

120
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } JSType
Distance : 7

121
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getFirstChild
Distance : 7

122
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } static
Distance : 7

123
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isEmpty
Distance : 7

124
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } source
Distance : 7

125
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Exception
Distance : 7

126
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } join
Distance : 7

127
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } paint
Distance : 7

128
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } boolean
Distance : 7

129
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getInstance
Distance : 7

130
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } type
Distance : 7

131
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } serialised
Distance : 7

132
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fireChangeEvent
Distance : 7

133
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } array
Distance : 7

134
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } f
Distance : 7

135
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } class
Distance : 7

136
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ParamChecks
Distance : 7

137
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } createIllegalArgumentException
Distance : 7

138
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MathRuntimeException
Distance : 7

139
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ArrayList
Distance : 7

140
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LINE_JOINER
Distance : 7

141
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } a
Distance : 7

142
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MutableTimePeriod
Distance : 7

143
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } get
Distance : 7

144
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sqrt
Distance : 7

145
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {}
Distance : 7

146
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } UnivariateFunction
Distance : 7

147
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } List
Distance : 7

148
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } returnZero
Distance : 7

149
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } :
Distance : 7

150
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } try
Distance : 7

151
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } m
Distance : 7

152
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } v
Distance : 7

153
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } verify
Distance : 7

154
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } c
Distance : 7

155
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } lines
Distance : 7

156
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Integer
Distance : 7

157
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Node
Distance : 7

158
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } length
Distance : 7

159
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isNormalBlock
Distance : 7

160
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throws
Distance : 7

161
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } expected
Distance : 7

162
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocation
Distance : 7

163
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } FastMath
Distance : 7

164
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } t
Distance : 7

165
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } name
Distance : 7

166
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <>
Distance : 7

167
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Args
Distance : 7

168
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } result
Distance : 7

169
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } IllegalArgumentException
Distance : 7

170
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } scope
Distance : 7

171
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } append
Distance : 7

172
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ?
Distance : 7

173
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !
Distance : 7

174
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } nullNotPermitted
Distance : 7

175
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fail
Distance : 7

176
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } []
Distance : 7

177
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } @
Distance : 7

178
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertEquals
Distance : 7

179
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } test
Distance : 7

180
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ==
Distance : 7

181
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } equals
Distance : 7

182
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Invocation
Distance : 7

183
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } externs
Distance : 7

184
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } for
Distance : 7

185
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtilities
Distance : 7

186
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } d
Distance : 7

187
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sb
Distance : 7

188
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Override
Distance : 7

189
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } field
Distance : 7

190
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } false
Distance : 7

191
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } x
Distance : 7

192
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } notifyListeners
Distance : 7

193
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Test
Distance : 7

194
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } p
Distance : 7

195
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Class
Distance : 7

196
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } options
Distance : 7

197
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Math
Distance : 7

198
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } toString
Distance : 7

199
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stroke
Distance : 7

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ]
Distance : 8

70
Tree	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } valueOf
Distance : 8

146
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } StrBuilder
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } StrBuilder
Distance : 10

1
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } add
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } add
Distance : 10

2
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } checkArgument
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } checkArgument
Distance : 10

3
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } data
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } data
Distance : 10

4
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } NodeUtil
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } NodeUtil
Distance : 10

5
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } void
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } void
Distance : 10

6
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } throw
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } throw
Distance : 10

7
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } compiler
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } compiler
Distance : 10

8
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } catch
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } catch
Distance : 10

9
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } e
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } e
Distance : 10

10
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } +
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } +
Distance : 10

11
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } n
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } n
Distance : 10

12
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } NodeTraversal
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } NodeTraversal
Distance : 10

13
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } reportCodeChange
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } reportCodeChange
Distance : 10

14
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } mock
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } mock
Distance : 10

15
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ]
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ]
Distance : 10

16
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } mode
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } mode
Distance : 10

17
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } &&
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } &&
Distance : 10

18
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } public
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } public
Distance : 10

19
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } final
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } final
Distance : 10

20
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } null
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } null
Distance : 10

21
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getArgumentMatcherStorage
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getArgumentMatcherStorage
Distance : 10

22
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } wanted
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } wanted
Distance : 10

23
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } if
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } if
Distance : 10

24
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ex
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ex
Distance : 10

25
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Preconditions
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Preconditions
Distance : 10

26
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } new
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } new
Distance : 10

27
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } =
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } =
Distance : 10

28
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } STRING_CONSTANT
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } STRING_CONSTANT
Distance : 10

29
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ()
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ()
Distance : 10

30
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ,
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ,
Distance : 10

31
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } {
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } {
Distance : 10

32
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } }
Distance : 10

33
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <
Distance : 10

34
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } .
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } .
Distance : 10

35
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } (
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } (
Distance : 10

36
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ;
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ;
Distance : 10

37
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <blank>
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <blank>
Distance : 10

38
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ()
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ()
Distance : 10

39
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <s>
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <s>
Distance : 10

40
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } )
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } )
Distance : 10

41
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } >
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } >
Distance : 10

42
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } js
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } js
Distance : 10

43
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } return
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } return
Distance : 10

44
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } true
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } true
Distance : 10

45
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } this
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } this
Distance : 10

46
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } -
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } -
Distance : 10

47
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } root
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } root
Distance : 10

48
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } NUMBER_CONSTANT
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } NUMBER_CONSTANT
Distance : 10

49
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } /
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } /
Distance : 10

50
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } long
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } long
Distance : 10

51
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } value
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } value
Distance : 10

52
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } T
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } T
Distance : 10

53
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } setAcceptedLanguage
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } setAcceptedLanguage
Distance : 10

54
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } super
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } super
Distance : 10

55
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } instant
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } instant
Distance : 10

56
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } matcher
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } matcher
Distance : 10

57
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } stream
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } stream
Distance : 10

58
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } values
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } values
Distance : 10

59
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getMessage
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getMessage
Distance : 10

60
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } else
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } else
Distance : 10

61
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } *
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } *
Distance : 10

62
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } y
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } y
Distance : 10

63
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } isBlock
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } isBlock
Distance : 10

64
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } abs
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } abs
Distance : 10

65
Tree	{ return ( Set ) anySet ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) anySet ( Any.ANY ) . returnSet () ; }
Distance : 8

66
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . anySet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . anySet () ; }
Distance : 8

67
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

68
Tree	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 9

69
Tree	{ return ( Set ) anySet ( Any.ANY ) . anySet () ; }
Code	{ return ( Set ) anySet ( Any.ANY ) . anySet () ; }
Distance : 8

70
Tree	{ return ( Set ) anySet ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) anySet ( Any.ANY ) . reportMatcher () ; }
Distance : 8

71
Tree	{ return ( Set ) returnSet ( Any.ANY ) . anySet () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . anySet () ; }
Distance : 8

72
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } !=
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } !=
Distance : 10

73
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Assert
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Assert
Distance : 10

74
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } alpha
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } alpha
Distance : 10

75
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } double
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } double
Distance : 10

76
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } checkNotNull
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } checkNotNull
Distance : 10

77
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } TestUtils
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } TestUtils
Distance : 10

78
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Fraction
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Fraction
Distance : 10

79
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } valueOf
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } valueOf
Distance : 10

80
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } node
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } node
Distance : 10

81
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getParent
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getParent
Distance : 10

82
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } reportMatcher
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } reportMatcher
Distance : 10

83
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } setUp
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } setUp
Distance : 10

84
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } out
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } out
Distance : 10

85
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } index
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } index
Distance : 10

86
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } invocations
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } invocations
Distance : 10

87
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } protected
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } protected
Distance : 10

88
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } chrono
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } chrono
Distance : 10

89
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } traverseEs6
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } traverseEs6
Distance : 10

90
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } instance
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } instance
Distance : 10

91
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } optimizer
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } optimizer
Distance : 10

92
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } assertTrue
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } assertTrue
Distance : 10

93
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } simpleMethod
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } simpleMethod
Distance : 10

94
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } [
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } [
Distance : 10

95
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } i
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } i
Distance : 10

96
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } checkState
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } checkState
Distance : 10

97
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } int
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } int
Distance : 10

98
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } b
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } b
Distance : 10

99
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

100
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } LanguageMode.ECMASCRIPT_2015
Distance : 10

101
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } return;
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } return;
Distance : 10

102
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } char
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } char
Distance : 10

103
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } mockingProgress
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } mockingProgress
Distance : 10

104
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } size
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } size
Distance : 10

105
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } clone
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } clone
Distance : 10

106
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Double
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Double
Distance : 10

107
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } s
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } s
Distance : 10

108
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } PeriodType
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } PeriodType
Distance : 10

109
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } obj
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } obj
Distance : 10

110
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } contains
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } contains
Distance : 10

111
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <=
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <=
Distance : 10

112
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } String
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } String
Distance : 10

113
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } assertThat
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } assertThat
Distance : 10

114
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } str
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } str
Distance : 10

115
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } testSame
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } testSame
Distance : 10

116
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } parent
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } parent
Distance : 10

117
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } StringBuilder
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } StringBuilder
Distance : 10

118
Tree	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Distance : 9

119
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Object
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Object
Distance : 10

120
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } JSType
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } JSType
Distance : 10

121
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getFirstChild
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getFirstChild
Distance : 10

122
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } static
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } static
Distance : 10

123
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } isEmpty
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } isEmpty
Distance : 10

124
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } source
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } source
Distance : 10

125
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Exception
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Exception
Distance : 10

126
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } join
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } join
Distance : 10

127
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } paint
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } paint
Distance : 10

128
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } boolean
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } boolean
Distance : 10

129
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getInstance
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } getInstance
Distance : 10

130
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } type
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } type
Distance : 10

131
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } serialised
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } serialised
Distance : 10

132
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } fireChangeEvent
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } fireChangeEvent
Distance : 10

133
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } array
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } array
Distance : 10

134
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } f
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } f
Distance : 10

135
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } class
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } class
Distance : 10

136
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ParamChecks
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ParamChecks
Distance : 10

137
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } createIllegalArgumentException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } createIllegalArgumentException
Distance : 10

138
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } MathRuntimeException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } MathRuntimeException
Distance : 10

139
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ArrayList
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ArrayList
Distance : 10

140
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } LINE_JOINER
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } LINE_JOINER
Distance : 10

141
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } a
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } a
Distance : 10

142
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } MutableTimePeriod
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } MutableTimePeriod
Distance : 10

143
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } get
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } get
Distance : 10

144
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } sqrt
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } sqrt
Distance : 10

145
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } {}
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } {}
Distance : 10

146
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } UnivariateFunction
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } UnivariateFunction
Distance : 10

147
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } List
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } List
Distance : 10

148
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } returnZero
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } returnZero
Distance : 10

149
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } :
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } :
Distance : 10

150
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } try
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } try
Distance : 10

151
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } m
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } m
Distance : 10

152
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } v
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } v
Distance : 10

153
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } verify
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } verify
Distance : 10

154
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } c
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } c
Distance : 10

155
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } lines
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } lines
Distance : 10

156
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Integer
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Integer
Distance : 10

157
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Node
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Node
Distance : 10

158
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } length
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } length
Distance : 10

159
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } isNormalBlock
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } isNormalBlock
Distance : 10

160
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } throws
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } throws
Distance : 10

161
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } expected
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } expected
Distance : 10

162
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } invocation
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } invocation
Distance : 10

163
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } FastMath
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } FastMath
Distance : 10

164
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } t
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } t
Distance : 10

165
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } name
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } name
Distance : 10

166
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <>
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } <>
Distance : 10

167
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Args
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Args
Distance : 10

168
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } result
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } result
Distance : 10

169
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } IllegalArgumentException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } IllegalArgumentException
Distance : 10

170
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } scope
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } scope
Distance : 10

171
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } append
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } append
Distance : 10

172
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ?
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ?
Distance : 10

173
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } !
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } !
Distance : 10

174
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } nullNotPermitted
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } nullNotPermitted
Distance : 10

175
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } fail
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } fail
Distance : 10

176
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } []
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } []
Distance : 10

177
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } @
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } @
Distance : 10

178
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } assertEquals
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } assertEquals
Distance : 10

179
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } test
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } test
Distance : 10

180
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ==
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } ==
Distance : 10

181
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } equals
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } equals
Distance : 10

182
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Invocation
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Invocation
Distance : 10

183
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } externs
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } externs
Distance : 10

184
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } for
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } for
Distance : 10

185
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } TestUtilities
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } TestUtilities
Distance : 10

186
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } d
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } d
Distance : 10

187
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } sb
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } sb
Distance : 10

188
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Override
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Override
Distance : 10

189
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } field
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } field
Distance : 10

190
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } false
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } false
Distance : 10

191
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } x
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } x
Distance : 10

192
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } notifyListeners
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } notifyListeners
Distance : 10

193
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Test
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Test
Distance : 10

194
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } p
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } p
Distance : 10

195
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Class
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Class
Distance : 10

196
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } options
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } options
Distance : 10

197
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Math
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } Math
Distance : 10

198
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } toString
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } toString
Distance : 10

199
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } stroke
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } stroke
Distance : 10

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ]
Distance : 8

70
Tree	{ return returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnSet ( Any.ANY ) . returnSet () ; }
Code	{ return returnSet ( Any.ANY ) . returnSet () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Distance : 10

1
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } add
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } add
Distance : 10

2
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Distance : 10

3
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } data
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } data
Distance : 10

4
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Distance : 10

5
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } void
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } void
Distance : 10

6
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } throw
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } throw
Distance : 10

7
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } compiler
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } compiler
Distance : 10

8
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } catch
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } catch
Distance : 10

9
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } e
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } e
Distance : 10

10
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } +
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } +
Distance : 10

11
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } n
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } n
Distance : 10

12
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Distance : 10

13
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Distance : 10

14
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } mock
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } mock
Distance : 10

15
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ]
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ]
Distance : 10

16
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } mode
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } mode
Distance : 10

17
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } &&
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } &&
Distance : 10

18
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } public
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } public
Distance : 10

19
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } final
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } final
Distance : 10

20
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } null
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } null
Distance : 10

21
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Distance : 10

22
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } wanted
Distance : 10

23
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } if
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } if
Distance : 10

24
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ex
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ex
Distance : 10

25
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Distance : 10

26
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } new
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } new
Distance : 10

27
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } =
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } =
Distance : 10

28
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Distance : 10

29
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ()
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ()
Distance : 10

30
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ,
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ,
Distance : 10

31
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } {
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } {
Distance : 10

32
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 10

33
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <
Distance : 10

34
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } .
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } .
Distance : 10

35
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } (
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } (
Distance : 10

36
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ;
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ;
Distance : 10

37
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Distance : 10

38
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 10

39
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <s>
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <s>
Distance : 10

40
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } )
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } )
Distance : 10

41
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } >
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } >
Distance : 10

42
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } js
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } js
Distance : 10

43
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } return
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } return
Distance : 10

44
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } true
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } true
Distance : 10

45
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } this
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } this
Distance : 10

46
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } -
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } -
Distance : 10

47
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } root
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } root
Distance : 10

48
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Distance : 10

49
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } /
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } /
Distance : 10

50
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } long
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } long
Distance : 10

51
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } value
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } value
Distance : 10

52
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } T
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } T
Distance : 10

53
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Distance : 10

54
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } super
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } super
Distance : 10

55
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } instant
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } instant
Distance : 10

56
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } matcher
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } matcher
Distance : 10

57
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } stream
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } stream
Distance : 10

58
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } values
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } values
Distance : 10

59
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Distance : 10

60
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } else
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } else
Distance : 10

61
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } *
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } *
Distance : 10

62
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } y
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } y
Distance : 10

63
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Distance : 10

64
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } abs
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } abs
Distance : 10

65
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

66
Tree	{ return ( List ) anyList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) anyList ( Any.ANY ) . returnList () ; }
Distance : 8

67
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

68
Tree	{ return ( List ) anyList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) anyList ( Any.ANY ) . reportMatcher () ; }
Distance : 8

69
Tree	{ return ( List ) returnList ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . anyList () ; }
Distance : 8

70
Tree	{ return ( List ) anyList ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) anyList ( Any.ANY ) . anyList () ; }
Distance : 8

71
Tree	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

72
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } !=
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } !=
Distance : 10

73
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Assert
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Assert
Distance : 10

74
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } alpha
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } alpha
Distance : 10

75
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } double
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } double
Distance : 10

76
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Distance : 10

77
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Distance : 10

78
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Distance : 10

79
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Distance : 10

80
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } node
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } node
Distance : 10

81
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getParent
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getParent
Distance : 10

82
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Distance : 10

83
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } setUp
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } setUp
Distance : 10

84
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } out
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } out
Distance : 10

85
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } index
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } index
Distance : 10

86
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } invocations
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } invocations
Distance : 10

87
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } protected
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } protected
Distance : 10

88
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } chrono
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } chrono
Distance : 10

89
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Distance : 10

90
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } instance
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } instance
Distance : 10

91
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Distance : 10

92
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Distance : 10

93
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Distance : 10

94
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } [
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } [
Distance : 10

95
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } i
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } i
Distance : 10

96
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } checkState
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } checkState
Distance : 10

97
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } int
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } int
Distance : 10

98
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } b
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } b
Distance : 10

99
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

100
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Distance : 10

101
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } return;
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } return;
Distance : 10

102
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } char
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } char
Distance : 10

103
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Distance : 10

104
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } size
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } size
Distance : 10

105
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } clone
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } clone
Distance : 10

106
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Double
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Double
Distance : 10

107
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } s
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } s
Distance : 10

108
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Distance : 10

109
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } obj
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } obj
Distance : 10

110
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } contains
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } contains
Distance : 10

111
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <=
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <=
Distance : 10

112
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } String
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } String
Distance : 10

113
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Distance : 10

114
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } str
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } str
Distance : 10

115
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } testSame
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } testSame
Distance : 10

116
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } parent
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } parent
Distance : 10

117
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Distance : 10

118
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

119
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Object
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Object
Distance : 10

120
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } JSType
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } JSType
Distance : 10

121
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Distance : 10

122
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } static
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } static
Distance : 10

123
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Distance : 10

124
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } source
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } source
Distance : 10

125
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Exception
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Exception
Distance : 10

126
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } join
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } join
Distance : 10

127
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } paint
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } paint
Distance : 10

128
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } boolean
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } boolean
Distance : 10

129
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Distance : 10

130
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } type
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } type
Distance : 10

131
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } serialised
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } serialised
Distance : 10

132
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Distance : 10

133
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } array
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } array
Distance : 10

134
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } f
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } f
Distance : 10

135
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } class
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } class
Distance : 10

136
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Distance : 10

137
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Distance : 10

138
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Distance : 10

139
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Distance : 10

140
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Distance : 10

141
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } a
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } a
Distance : 10

142
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Distance : 10

143
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } get
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } get
Distance : 10

144
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Distance : 10

145
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } {}
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } {}
Distance : 10

146
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Distance : 10

147
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } List
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } List
Distance : 10

148
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Distance : 10

149
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } :
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } :
Distance : 10

150
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } try
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } try
Distance : 10

151
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } m
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } m
Distance : 10

152
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } v
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } v
Distance : 10

153
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } verify
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } verify
Distance : 10

154
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } c
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } c
Distance : 10

155
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } lines
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } lines
Distance : 10

156
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Integer
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Integer
Distance : 10

157
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Node
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Node
Distance : 10

158
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } length
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } length
Distance : 10

159
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Distance : 10

160
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } throws
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } throws
Distance : 10

161
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } expected
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } expected
Distance : 10

162
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } invocation
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } invocation
Distance : 10

163
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Distance : 10

164
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } t
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } t
Distance : 10

165
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } name
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } name
Distance : 10

166
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <>
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } <>
Distance : 10

167
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Args
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Args
Distance : 10

168
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } result
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } result
Distance : 10

169
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Distance : 10

170
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } scope
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } scope
Distance : 10

171
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } append
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } append
Distance : 10

172
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ?
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ?
Distance : 10

173
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } !
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } !
Distance : 10

174
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Distance : 10

175
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } fail
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } fail
Distance : 10

176
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } []
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } []
Distance : 10

177
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } @
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } @
Distance : 10

178
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Distance : 10

179
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } test
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } test
Distance : 10

180
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ==
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } ==
Distance : 10

181
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } equals
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } equals
Distance : 10

182
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Distance : 10

183
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } externs
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } externs
Distance : 10

184
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } for
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } for
Distance : 10

185
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Distance : 10

186
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } d
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } d
Distance : 10

187
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } sb
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } sb
Distance : 10

188
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Override
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Override
Distance : 10

189
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } field
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } field
Distance : 10

190
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } false
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } false
Distance : 10

191
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } x
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } x
Distance : 10

192
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Distance : 10

193
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Test
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Test
Distance : 10

194
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } p
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } p
Distance : 10

195
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Class
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Class
Distance : 10

196
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } options
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } options
Distance : 10

197
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Math
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } Math
Distance : 10

198
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } toString
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } toString
Distance : 10

199
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } stroke
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; } stroke
Distance : 10

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ]
Distance : 8

70
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ]
Distance : 8

70
Tree	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnString ( Any.ANY ) . returnString () ; }
Code	{ return returnString ( Any.ANY ) . returnString () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher () ; } out
Code	{ return ( T ) reportMatcher () ; } out
Distance : 6

1
Tree	{ return ( T ) reportMatcher () ; } toString
Code	{ return ( T ) reportMatcher () ; } toString
Distance : 6

2
Tree	{ return ( T ) reportMatcher () ; } p
Code	{ return ( T ) reportMatcher () ; } p
Distance : 6

3
Tree	{ return ( T ) reportMatcher () ; } ParamChecks
Code	{ return ( T ) reportMatcher () ; } ParamChecks
Distance : 6

4
Tree	{ return ( T ) reportMatcher () ; } Preconditions
Code	{ return ( T ) reportMatcher () ; } Preconditions
Distance : 6

5
Tree	{ return ( T ) reportMatcher () ; } &&
Code	{ return ( T ) reportMatcher () ; } &&
Distance : 6

6
Tree	{ return ( T ) reportMatcher () ; } value
Code	{ return ( T ) reportMatcher () ; } value
Distance : 6

7
Tree	{ return ( T ) reportMatcher () ; } T
Code	{ return ( T ) reportMatcher () ; } T
Distance : 6

8
Tree	{ return ( T ) reportMatcher () ; } [
Code	{ return ( T ) reportMatcher () ; } [
Distance : 6

9
Tree	{ return ( T ) reportMatcher () ; } class
Code	{ return ( T ) reportMatcher () ; } class
Distance : 6

10
Tree	{ return ( T ) reportMatcher () ; } Override
Code	{ return ( T ) reportMatcher () ; } Override
Distance : 6

11
Tree	{ return ( T ) reportMatcher () ; } Object
Code	{ return ( T ) reportMatcher () ; } Object
Distance : 6

12
Tree	{ return ( T ) reportMatcher () ; } @
Code	{ return ( T ) reportMatcher () ; } @
Distance : 6

13
Tree	{ return ( T ) reportMatcher () ; } assertEquals
Code	{ return ( T ) reportMatcher () ; } assertEquals
Distance : 6

14
Tree	{ return ( T ) reportMatcher () ; } nullNotPermitted
Code	{ return ( T ) reportMatcher () ; } nullNotPermitted
Distance : 6

15
Tree	{ return ( T ) reportMatcher () ; } !
Code	{ return ( T ) reportMatcher () ; } !
Distance : 6

16
Tree	{ return ( T ) reportMatcher () ; } void
Code	{ return ( T ) reportMatcher () ; } void
Distance : 6

17
Tree	{ return ( T ) reportMatcher () ; } throw
Code	{ return ( T ) reportMatcher () ; } throw
Distance : 6

18
Tree	{ return ( T ) reportMatcher () ; } ==
Code	{ return ( T ) reportMatcher () ; } ==
Distance : 6

19
Tree	{ return ( T ) reportMatcher () ; } []
Code	{ return ( T ) reportMatcher () ; } []
Distance : 6

20
Tree	{ return ( T ) reportMatcher () ; } e
Code	{ return ( T ) reportMatcher () ; } e
Distance : 6

21
Tree	{ return ( T ) reportMatcher () ; } index
Code	{ return ( T ) reportMatcher () ; } index
Distance : 6

22
Tree	{ return ( T ) reportMatcher () ; } mock
Code	{ return ( T ) reportMatcher () ; } mock
Distance : 6

23
Tree	{ return ( T ) reportMatcher () ; } +
Code	{ return ( T ) reportMatcher () ; } +
Distance : 6

24
Tree	{ return ( T ) reportMatcher () ; } Class
Code	{ return ( T ) reportMatcher () ; } Class
Distance : 6

25
Tree	{ return ( T ) reportMatcher () ; } double
Code	{ return ( T ) reportMatcher () ; } double
Distance : 6

26
Tree	{ return ( T ) reportMatcher () ; } mode
Code	{ return ( T ) reportMatcher () ; } mode
Distance : 6

27
Tree	{ return ( T ) reportMatcher () ; } {}
Code	{ return ( T ) reportMatcher () ; } {}
Distance : 6

28
Tree	{ return ( T ) reportMatcher () ; } MathRuntimeException
Code	{ return ( T ) reportMatcher () ; } MathRuntimeException
Distance : 6

29
Tree	{ return ( T ) reportMatcher () ; } >
Code	{ return ( T ) reportMatcher () ; } >
Distance : 6

30
Tree	{ return ( T ) reportMatcher () ; } if
Code	{ return ( T ) reportMatcher () ; } if
Distance : 6

31
Tree	{ return ( T ) reportMatcher () ; } final
Code	{ return ( T ) reportMatcher () ; } final
Distance : 6

32
Tree	{ return ( T ) reportMatcher () ; } STRING_CONSTANT
Code	{ return ( T ) reportMatcher () ; } STRING_CONSTANT
Distance : 6

33
Tree	{ return ( T ) reportMatcher () ; } .
Code	{ return ( T ) reportMatcher () ; } .
Distance : 6

34
Tree	{ return ( T ) reportMatcher () ; } false
Code	{ return ( T ) reportMatcher () ; } false
Distance : 6

35
Tree	{ return ( T ) reportMatcher () ; } =
Code	{ return ( T ) reportMatcher () ; } =
Distance : 6

36
Tree	{ return ( T ) reportMatcher () ; } }
Code	{ return ( T ) reportMatcher () ; } }
Distance : 6

37
Tree	{ return ( T ) reportMatcher () ; } <s>
Code	{ return ( T ) reportMatcher () ; } <s>
Distance : 6

38
Tree	{ return ( T ) reportMatcher () ; } <blank>
Code	{ return ( T ) reportMatcher () ; } <blank>
Distance : 6

39
Tree	{ return ( T ) reportMatcher () ; } (
Code	{ return ( T ) reportMatcher () ; } (
Distance : 6

40
Tree	{ return ( T ) reportMatcher () ; } {
Code	{ return ( T ) reportMatcher () ; } {
Distance : 6

41
Tree	{ return ( T ) reportMatcher () ; } )
Code	{ return ( T ) reportMatcher () ; } )
Distance : 6

42
Tree	{ return ( T ) reportMatcher () ; } ;
Code	{ return ( T ) reportMatcher () ; } ;
Distance : 6

43
Tree	{ return ( T ) reportMatcher () ; } ,
Code	{ return ( T ) reportMatcher () ; } ,
Distance : 6

44
Tree	{ return ( T ) reportMatcher () ; } ()
Code	{ return ( T ) reportMatcher () ; } ()
Distance : 6

45
Tree	{ return ( T ) reportMatcher () ; } {
Code	{ return ( T ) reportMatcher () ; } {
Distance : 6

46
Tree	{ return ( T ) reportMatcher () ; } test
Code	{ return ( T ) reportMatcher () ; } test
Distance : 6

47
Tree	{ return ( T ) reportMatcher () ; } int
Code	{ return ( T ) reportMatcher () ; } int
Distance : 6

48
Tree	{ return ( T ) reportMatcher () ; } i
Code	{ return ( T ) reportMatcher () ; } i
Distance : 6

49
Tree	{ return ( T ) reportMatcher () ; } <
Code	{ return ( T ) reportMatcher () ; } <
Distance : 6

50
Tree	{ return ( T ) reportMatcher () ; } dataset
Code	{ return ( T ) reportMatcher () ; } dataset
Distance : 6

51
Tree	{ return ( T ) reportMatcher () ; } return
Code	{ return ( T ) reportMatcher () ; } return
Distance : 6

52
Tree	{ return ( T ) reportMatcher () ; } this
Code	{ return ( T ) reportMatcher () ; } this
Distance : 6

53
Tree	{ return ( T ) reportMatcher () ; } t
Code	{ return ( T ) reportMatcher () ; } t
Distance : 6

54
Tree	{ return ( T ) reportMatcher () ; } IllegalArgumentException
Code	{ return ( T ) reportMatcher () ; } IllegalArgumentException
Distance : 6

55
Tree	{ return ( T ) reportMatcher () ; } expected
Code	{ return ( T ) reportMatcher () ; } expected
Distance : 6

56
Tree	{ return ( T ) reportMatcher () ; } getField
Code	{ return ( T ) reportMatcher () ; } getField
Distance : 6

57
Tree	{ return ( T ) reportMatcher () ; } PlotChangeEvent
Code	{ return ( T ) reportMatcher () ; } PlotChangeEvent
Distance : 6

58
Tree	{ return ( T ) reportMatcher () ; } invocations
Code	{ return ( T ) reportMatcher () ; } invocations
Distance : 6

59
Tree	{ return ( T ) reportMatcher () ; } -
Code	{ return ( T ) reportMatcher () ; } -
Distance : 6

60
Tree	{ return ( T ) reportMatcher () ; } true
Code	{ return ( T ) reportMatcher () ; } true
Distance : 6

61
Tree	{ return ( T ) reportMatcher () ; } return;
Code	{ return ( T ) reportMatcher () ; } return;
Distance : 6

62
Tree	{ return ( T ) reportMatcher () ; } char
Code	{ return ( T ) reportMatcher () ; } char
Distance : 6

63
Tree	{ return ( T ) reportMatcher () ; } get
Code	{ return ( T ) reportMatcher () ; } get
Distance : 6

64
Tree	{ return ( T ) reportMatcher () ; } isEmpty
Code	{ return ( T ) reportMatcher () ; } isEmpty
Distance : 6

65
Tree	{ return ( T ) reportMatcher () ; } setAcceptedLanguage
Code	{ return ( T ) reportMatcher () ; } setAcceptedLanguage
Distance : 6

66
Tree	{ return ( T ) reportMatcher () ; } abs
Code	{ return ( T ) reportMatcher () ; } abs
Distance : 6

67
Tree	{ return ( T ) reportMatcher () ; } static
Code	{ return ( T ) reportMatcher () ; } static
Distance : 6

68
Tree	{ return ( T ) reportMatcher () ; } JSType
Code	{ return ( T ) reportMatcher () ; } JSType
Distance : 6

69
Tree	{ return ( T ) reportMatcher () ; } stream
Code	{ return ( T ) reportMatcher () ; } stream
Distance : 6

70
Tree	{ return ( T ) reportMatcher () ; } ]
Code	{ return ( T ) reportMatcher () ; } ]
Distance : 6

71
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 6

72
Tree	{ return ( T ) reportMatcher () ; } new
Code	{ return ( T ) reportMatcher () ; } new
Distance : 6

73
Tree	{ return ( T ) reportMatcher () ; } Collection
Code	{ return ( T ) reportMatcher () ; } Collection
Distance : 6

74
Tree	{ return ( T ) reportMatcher () ; } NUMBER_CONSTANT
Code	{ return ( T ) reportMatcher () ; } NUMBER_CONSTANT
Distance : 6

75
Tree	{ return ( T ) reportMatcher () ; } else
Code	{ return ( T ) reportMatcher () ; } else
Distance : 6

76
Tree	{ return ( T ) reportMatcher () ; } solver
Code	{ return ( T ) reportMatcher () ; } solver
Distance : 6

77
Tree	{ return ( T ) reportMatcher () ; } TestUtilities
Code	{ return ( T ) reportMatcher () ; } TestUtilities
Distance : 6

78
Tree	{ return ( T ) reportMatcher () ; } d
Code	{ return ( T ) reportMatcher () ; } d
Distance : 6

79
Tree	{ return ( T ) reportMatcher () ; } Invocation
Code	{ return ( T ) reportMatcher () ; } Invocation
Distance : 6

80
Tree	{ return ( T ) reportMatcher () ; } equals
Code	{ return ( T ) reportMatcher () ; } equals
Distance : 6

81
Tree	{ return ( T ) reportMatcher () ; } assertTrue
Code	{ return ( T ) reportMatcher () ; } assertTrue
Distance : 6

82
Tree	{ return ( T ) reportMatcher () ; } /
Code	{ return ( T ) reportMatcher () ; } /
Distance : 6

83
Tree	{ return ( T ) reportMatcher () ; } externs
Code	{ return ( T ) reportMatcher () ; } externs
Distance : 6

84
Tree	{ return ( T ) reportMatcher () ; } for
Code	{ return ( T ) reportMatcher () ; } for
Distance : 6

85
Tree	{ return ( T ) reportMatcher () ; } setUp
Code	{ return ( T ) reportMatcher () ; } setUp
Distance : 6

86
Tree	{ return ( T ) reportMatcher () ; } reportMatcher
Code	{ return ( T ) reportMatcher () ; } reportMatcher
Distance : 6

87
Tree	{ return ( T ) reportMatcher () ; } js
Code	{ return ( T ) reportMatcher () ; } js
Distance : 6

88
Tree	{ return ( T ) reportMatcher () ; } StrBuilder
Code	{ return ( T ) reportMatcher () ; } StrBuilder
Distance : 6

89
Tree	{ return ( T ) reportMatcher () ; } node
Code	{ return ( T ) reportMatcher () ; } node
Distance : 6

90
Tree	{ return ( T ) reportMatcher () ; } getMessage
Code	{ return ( T ) reportMatcher () ; } getMessage
Distance : 6

91
Tree	{ return ( T ) reportMatcher () ; } instant
Code	{ return ( T ) reportMatcher () ; } instant
Distance : 6

92
Tree	{ return ( T ) reportMatcher () ; } matcher
Code	{ return ( T ) reportMatcher () ; } matcher
Distance : 6

93
Tree	{ return ( T ) reportMatcher () ; } PeriodType
Code	{ return ( T ) reportMatcher () ; } PeriodType
Distance : 6

94
Tree	{ return ( T ) reportMatcher () ; } s
Code	{ return ( T ) reportMatcher () ; } s
Distance : 6

95
Tree	{ return ( T ) reportMatcher () ; } public
Code	{ return ( T ) reportMatcher () ; } public
Distance : 6

96
Tree	{ return ( T ) reportMatcher () ; } protected
Code	{ return ( T ) reportMatcher () ; } protected
Distance : 6

97
Tree	{ return ( T ) reportMatcher () ; } values
Code	{ return ( T ) reportMatcher () ; } values
Distance : 6

98
Tree	{ return ( T ) reportMatcher () ; } <=
Code	{ return ( T ) reportMatcher () ; } <=
Distance : 6

99
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 5

100
Tree	{ return ( T ) reportMatcher () ; } chrono
Code	{ return ( T ) reportMatcher () ; } chrono
Distance : 6

101
Tree	{ return ( T ) reportMatcher () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ( T ) reportMatcher () ; } LanguageMode.ECMASCRIPT_2015
Distance : 6

102
Tree	{ return ( T ) reportMatcher () ; } StringBuilder
Code	{ return ( T ) reportMatcher () ; } StringBuilder
Distance : 6

103
Tree	{ return ( T ) reportMatcher () ; } mockingProgress
Code	{ return ( T ) reportMatcher () ; } mockingProgress
Distance : 6

104
Tree	{ return ( T ) reportMatcher () ; } size
Code	{ return ( T ) reportMatcher () ; } size
Distance : 6

105
Tree	{ return ( T ) reportMatcher () ; } MutableTimePeriod
Code	{ return ( T ) reportMatcher () ; } MutableTimePeriod
Distance : 6

106
Tree	{ return ( T ) reportMatcher () ; } a
Code	{ return ( T ) reportMatcher () ; } a
Distance : 6

107
Tree	{ return ( T ) reportMatcher () ; } b
Code	{ return ( T ) reportMatcher () ; } b
Distance : 6

108
Tree	{ return ( T ) reportMatcher () ; } stroke
Code	{ return ( T ) reportMatcher () ; } stroke
Distance : 6

109
Tree	{ return ( T ) reportMatcher () ; } sb
Code	{ return ( T ) reportMatcher () ; } sb
Distance : 6

110
Tree	{ return ( T ) reportMatcher () ; } obj
Code	{ return ( T ) reportMatcher () ; } obj
Distance : 6

111
Tree	{ return ( T ) reportMatcher () ; } scope
Code	{ return ( T ) reportMatcher () ; } scope
Distance : 6

112
Tree	{ return ( T ) reportMatcher () ; } throws
Code	{ return ( T ) reportMatcher () ; } throws
Distance : 6

113
Tree	{ return ( T ) reportMatcher () ; } clone
Code	{ return ( T ) reportMatcher () ; } clone
Distance : 6

114
Tree	{ return ( T ) reportMatcher () ; } Double
Code	{ return ( T ) reportMatcher () ; } Double
Distance : 6

115
Tree	{ return ( T ) reportMatcher () ; } sqrt
Code	{ return ( T ) reportMatcher () ; } sqrt
Distance : 6

116
Tree	{ return ( T ) reportMatcher () ; } returnZero
Code	{ return ( T ) reportMatcher () ; } returnZero
Distance : 6

117
Tree	{ return ( T ) reportMatcher () ; } getArgumentMatcherStorage
Code	{ return ( T ) reportMatcher () ; } getArgumentMatcherStorage
Distance : 6

118
Tree	{ return ( T ) reportMatcher () ; } isBlock
Code	{ return ( T ) reportMatcher () ; } isBlock
Distance : 6

119
Tree	{ return ( T ) reportMatcher () ; } UnivariateFunction
Code	{ return ( T ) reportMatcher () ; } UnivariateFunction
Distance : 6

120
Tree	{ return ( T ) reportMatcher () ; } y
Code	{ return ( T ) reportMatcher () ; } y
Distance : 6

121
Tree	{ return ( T ) reportMatcher () ; } getFirstChild
Code	{ return ( T ) reportMatcher () ; } getFirstChild
Distance : 6

122
Tree	{ return ( T ) reportMatcher () ; } contains
Code	{ return ( T ) reportMatcher () ; } contains
Distance : 6

123
Tree	{ return ( T ) reportMatcher () ; } append
Code	{ return ( T ) reportMatcher () ; } append
Distance : 6

124
Tree	{ return ( T ) reportMatcher () ; } LanguageMode.ECMASCRIPT6
Code	{ return ( T ) reportMatcher () ; } LanguageMode.ECMASCRIPT6
Distance : 6

125
Tree	{ return ( T ) reportMatcher () ; } Node
Code	{ return ( T ) reportMatcher () ; } Node
Distance : 6

126
Tree	{ return ( T ) reportMatcher () ; } verify
Code	{ return ( T ) reportMatcher () ; } verify
Distance : 6

127
Tree	{ return ( T ) reportMatcher () ; } reportCodeChange
Code	{ return ( T ) reportMatcher () ; } reportCodeChange
Distance : 6

128
Tree	{ return ( T ) reportMatcher () ; } assertThat
Code	{ return ( T ) reportMatcher () ; } assertThat
Distance : 6

129
Tree	{ return ( T ) reportMatcher () ; } str
Code	{ return ( T ) reportMatcher () ; } str
Distance : 6

130
Tree	{ return ( T ) reportMatcher () ; } invocation
Code	{ return ( T ) reportMatcher () ; } invocation
Distance : 6

131
Tree	{ return ( T ) reportMatcher () ; } FastMath
Code	{ return ( T ) reportMatcher () ; } FastMath
Distance : 6

132
Tree	{ return ( T ) reportMatcher () ; } parent
Code	{ return ( T ) reportMatcher () ; } parent
Distance : 6

133
Tree	{ return ( T ) reportMatcher () ; } ArrayList
Code	{ return ( T ) reportMatcher () ; } ArrayList
Distance : 6

134
Tree	{ return ( T ) reportMatcher () ; } serialised
Code	{ return ( T ) reportMatcher () ; } serialised
Distance : 6

135
Tree	{ return ( T ) reportMatcher () ; } fireChangeEvent
Code	{ return ( T ) reportMatcher () ; } fireChangeEvent
Distance : 6

136
Tree	{ return ( T ) reportMatcher () ; } x
Code	{ return ( T ) reportMatcher () ; } x
Distance : 6

137
Tree	{ return ( T ) reportMatcher () ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher () ; } createIllegalArgumentException
Distance : 6

138
Tree	{ return ( T ) reportMatcher () ; } testSame
Code	{ return ( T ) reportMatcher () ; } testSame
Distance : 6

139
Tree	{ return ( T ) reportMatcher () ; } LINE_JOINER
Code	{ return ( T ) reportMatcher () ; } LINE_JOINER
Distance : 6

140
Tree	{ return ( T ) reportMatcher () ; } result
Code	{ return ( T ) reportMatcher () ; } result
Distance : 6

141
Tree	{ return ( T ) reportMatcher () ; } :
Code	{ return ( T ) reportMatcher () ; } :
Distance : 6

142
Tree	{ return ( T ) reportMatcher () ; } Args
Code	{ return ( T ) reportMatcher () ; } Args
Distance : 6

143
Tree	{ return ( T ) reportMatcher () ; } fail
Code	{ return ( T ) reportMatcher () ; } fail
Distance : 6

144
Tree	{ return ( T ) reportMatcher () ; } instance
Code	{ return ( T ) reportMatcher () ; } instance
Distance : 6

145
Tree	{ return ( T ) reportMatcher () ; } array
Code	{ return ( T ) reportMatcher () ; } array
Distance : 6

146
Tree	{ return ( T ) reportMatcher () ; } traverseEs6
Code	{ return ( T ) reportMatcher () ; } traverseEs6
Distance : 6

147
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 5

148
Tree	{ return ( T ) reportMatcher () ; } f
Code	{ return ( T ) reportMatcher () ; } f
Distance : 6

149
Tree	{ return ( T ) reportMatcher () ; } Fraction
Code	{ return ( T ) reportMatcher () ; } Fraction
Distance : 6

150
Tree	{ return ( T ) reportMatcher () ; } paint
Code	{ return ( T ) reportMatcher () ; } paint
Distance : 6

151
Tree	{ return ( T ) reportMatcher () ; } try
Code	{ return ( T ) reportMatcher () ; } try
Distance : 6

152
Tree	{ return ( T ) reportMatcher () ; } m
Code	{ return ( T ) reportMatcher () ; } m
Distance : 6

153
Tree	{ return ( T ) reportMatcher () ; } *
Code	{ return ( T ) reportMatcher () ; } *
Distance : 6

154
Tree	{ return ( T ) reportMatcher () ; } join
Code	{ return ( T ) reportMatcher () ; } join
Distance : 6

155
Tree	{ return ( T ) reportMatcher () ; } type
Code	{ return ( T ) reportMatcher () ; } type
Distance : 6

156
Tree	{ return ( T ) reportMatcher () ; } getInstance
Code	{ return ( T ) reportMatcher () ; } getInstance
Distance : 6

157
Tree	{ return ( T ) reportMatcher () ; } checkNotNull
Code	{ return ( T ) reportMatcher () ; } checkNotNull
Distance : 6

158
Tree	{ return ( T ) reportMatcher () ; } TestUtils
Code	{ return ( T ) reportMatcher () ; } TestUtils
Distance : 6

159
Tree	{ return ( T ) reportMatcher () ; } Integer
Code	{ return ( T ) reportMatcher () ; } Integer
Distance : 6

160
Tree	{ return ( T ) reportMatcher () ; } source
Code	{ return ( T ) reportMatcher () ; } source
Distance : 6

161
Tree	{ return ( T ) reportMatcher () ; } root
Code	{ return ( T ) reportMatcher () ; } root
Distance : 6

162
Tree	{ return ( T ) reportMatcher () ; } wanted
Code	{ return ( T ) reportMatcher () ; } wanted
Distance : 6

163
Tree	{ return ( T ) reportMatcher () ; } Math
Code	{ return ( T ) reportMatcher () ; } Math
Distance : 6

164
Tree	{ return ( T ) reportMatcher () ; } options
Code	{ return ( T ) reportMatcher () ; } options
Distance : 6

165
Tree	{ return ( T ) reportMatcher () ; } add
Code	{ return ( T ) reportMatcher () ; } add
Distance : 6

166
Tree	{ return ( T ) reportMatcher () ; } checkArgument
Code	{ return ( T ) reportMatcher () ; } checkArgument
Distance : 6

167
Tree	{ return ( T ) reportMatcher () ; } name
Code	{ return ( T ) reportMatcher () ; } name
Distance : 6

168
Tree	{ return ( T ) reportMatcher () ; } field
Code	{ return ( T ) reportMatcher () ; } field
Distance : 6

169
Tree	{ return ( T ) reportMatcher () ; } NodeTraversal
Code	{ return ( T ) reportMatcher () ; } NodeTraversal
Distance : 6

170
Tree	{ return ( T ) reportMatcher () ; } ex
Code	{ return ( T ) reportMatcher () ; } ex
Distance : 6

171
Tree	{ return ( T ) reportMatcher () ; } List
Code	{ return ( T ) reportMatcher () ; } List
Distance : 6

172
Tree	{ return ( T ) reportMatcher () ; } data
Code	{ return ( T ) reportMatcher () ; } data
Distance : 6

173
Tree	{ return ( T ) reportMatcher () ; } boolean
Code	{ return ( T ) reportMatcher () ; } boolean
Distance : 6

174
Tree	{ return ( T ) reportMatcher () ; } <>
Code	{ return ( T ) reportMatcher () ; } <>
Distance : 6

175
Tree	{ return ( T ) reportMatcher () ; } Assert
Code	{ return ( T ) reportMatcher () ; } Assert
Distance : 6

176
Tree	{ return ( T ) reportMatcher () ; } Exception
Code	{ return ( T ) reportMatcher () ; } Exception
Distance : 6

177
Tree	{ return ( T ) reportMatcher () ; } notifyListeners
Code	{ return ( T ) reportMatcher () ; } notifyListeners
Distance : 6

178
Tree	{ return ( T ) reportMatcher () ; } Test
Code	{ return ( T ) reportMatcher () ; } Test
Distance : 6

179
Tree	{ return ( T ) reportMatcher () ; } c
Code	{ return ( T ) reportMatcher () ; } c
Distance : 6

180
Tree	{ return ( T ) reportMatcher () ; } lines
Code	{ return ( T ) reportMatcher () ; } lines
Distance : 6

181
Tree	{ return ( T ) reportMatcher () ; } String
Code	{ return ( T ) reportMatcher () ; } String
Distance : 6

182
Tree	{ return ( T ) reportMatcher () ; } n
Code	{ return ( T ) reportMatcher () ; } n
Distance : 6

183
Tree	{ return ( T ) reportMatcher () ; } compiler
Code	{ return ( T ) reportMatcher () ; } compiler
Distance : 6

184
Tree	{ return ( T ) reportMatcher () ; } NodeUtil
Code	{ return ( T ) reportMatcher () ; } NodeUtil
Distance : 6

185
Tree	{ return ( T ) reportMatcher () ; } null
Code	{ return ( T ) reportMatcher () ; } null
Distance : 6

186
Tree	{ return ( T ) reportMatcher () ; } checkState
Code	{ return ( T ) reportMatcher () ; } checkState
Distance : 6

187
Tree	{ return ( T ) reportMatcher () ; } !=
Code	{ return ( T ) reportMatcher () ; } !=
Distance : 6

188
Tree	{ return ( T ) reportMatcher () ; } super
Code	{ return ( T ) reportMatcher () ; } super
Distance : 6

189
Tree	{ return ( T ) reportMatcher () ; } long
Code	{ return ( T ) reportMatcher () ; } long
Distance : 6

190
Tree	{ return ( T ) reportMatcher () ; } simpleMethod
Code	{ return ( T ) reportMatcher () ; } simpleMethod
Distance : 6

191
Tree	{ return ( T ) reportMatcher () ; } optimizer
Code	{ return ( T ) reportMatcher () ; } optimizer
Distance : 6

192
Tree	{ return ( T ) reportMatcher () ; } length
Code	{ return ( T ) reportMatcher () ; } length
Distance : 6

193
Tree	{ return ( T ) reportMatcher () ; } alpha
Code	{ return ( T ) reportMatcher () ; } alpha
Distance : 6

194
Tree	{ return ( T ) reportMatcher () ; } getParent
Code	{ return ( T ) reportMatcher () ; } getParent
Distance : 6

195
Tree	{ return ( T ) reportMatcher () ; } ?
Code	{ return ( T ) reportMatcher () ; } ?
Distance : 6

196
Tree	{ return ( T ) reportMatcher () ; } catch
Code	{ return ( T ) reportMatcher () ; } catch
Distance : 6

197
Tree	{ return ( T ) reportMatcher () ; } v
Code	{ return ( T ) reportMatcher () ; } v
Distance : 6

198
Tree	{ return ( T ) reportMatcher () ; } valueOf
Code	{ return ( T ) reportMatcher () ; } valueOf
Distance : 6

199
Tree	{ return ( T ) reportMatcher () ; } isNormalBlock
Code	{ return ( T ) reportMatcher () ; } isNormalBlock
Distance : 6

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } externs
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } externs
Distance : 6

1
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } FastMath
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } FastMath
Distance : 6

2
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } reportCodeChange
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } reportCodeChange
Distance : 6

3
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } IllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } IllegalArgumentException
Distance : 6

4
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } !=
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } !=
Distance : 6

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } testSame
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } testSame
Distance : 6

6
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } parent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } parent
Distance : 6

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } createIllegalArgumentException
Distance : 6

8
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } str
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } str
Distance : 6

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } LINE_JOINER
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } LINE_JOINER
Distance : 6

10
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } assertThat
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } assertThat
Distance : 6

11
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } invocation
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } invocation
Distance : 6

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ,
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ,
Distance : 6

13
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } .
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } .
Distance : 6

14
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } x
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } x
Distance : 6

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } assertEquals
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } assertEquals
Distance : 6

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } T
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } T
Distance : 6

17
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } []
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } []
Distance : 6

18
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } throws
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } throws
Distance : 6

19
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } returnZero
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } returnZero
Distance : 6

20
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getFirstChild
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getFirstChild
Distance : 6

21
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } UnivariateFunction
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } UnivariateFunction
Distance : 6

22
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } expected
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } expected
Distance : 6

23
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } sb
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } sb
Distance : 6

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } name
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } name
Distance : 6

25
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } field
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } field
Distance : 6

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } (
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } (
Distance : 6

27
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } =
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } =
Distance : 6

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } }
Distance : 6

29
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ()
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ()
Distance : 6

30
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } {
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } {
Distance : 6

31
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } new
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } new
Distance : 6

32
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } STRING_CONSTANT
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } STRING_CONSTANT
Distance : 6

33
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } NUMBER_CONSTANT
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } NUMBER_CONSTANT
Distance : 6

34
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } return
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } return
Distance : 6

35
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } &&
Distance : 6

36
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } assertTrue
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } assertTrue
Distance : 6

37
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } super
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } super
Distance : 6

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } value
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } value
Distance : 6

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } checkState
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } checkState
Distance : 6

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } int
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } int
Distance : 6

41
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } i
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } i
Distance : 6

42
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } .
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } .
Distance : 6

43
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <blank>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <blank>
Distance : 6

44
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ;
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ;
Distance : 6

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } )
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } )
Distance : 6

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } checkArgument
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } checkArgument
Distance : 6

47
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } t
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } t
Distance : 6

48
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <s>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <s>
Distance : 6

49
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } !
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } !
Distance : 6

50
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } d
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } d
Distance : 6

51
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } index
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } index
Distance : 6

52
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } :
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } :
Distance : 6

53
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fail
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fail
Distance : 6

54
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } List
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } List
Distance : 6

55
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Args
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Args
Distance : 6

56
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } try
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } try
Distance : 6

57
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getParent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getParent
Distance : 6

58
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 6

59
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

60
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 6

61
Tree	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

62
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 7

63
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 7

64
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 7

65
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 8

66
Tree	{ return ( clazz ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 7

67
Tree	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( T ) ; }
Distance : 7

68
Tree	{ return ( clazz ) returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 8

69
Tree	{ return ( T ) returnFor ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 8

70
Tree	{ return ( clazz ) returnFor ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) . returnFor ( T ) ; }
Distance : 8

71
Tree	{ return ( clazz ) returnFor ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 9

72
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } node
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } node
Distance : 6

73
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } isBlock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } isBlock
Distance : 6

74
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } setUp
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } setUp
Distance : 6

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } invocations
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } invocations
Distance : 6

76
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } equals
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } equals
Distance : 6

77
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } for
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } for
Distance : 6

78
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Invocation
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Invocation
Distance : 6

79
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } js
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } js
Distance : 6

80
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } TestUtilities
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } TestUtilities
Distance : 6

81
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } StrBuilder
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } StrBuilder
Distance : 6

82
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } reportMatcher
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } reportMatcher
Distance : 6

83
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } StringBuilder
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } StringBuilder
Distance : 6

84
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } size
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } size
Distance : 6

85
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } scope
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } scope
Distance : 6

86
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } paint
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } paint
Distance : 6

87
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } append
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } append
Distance : 6

88
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } result
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } result
Distance : 6

89
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } nullNotPermitted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } nullNotPermitted
Distance : 6

90
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } m
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } m
Distance : 6

91
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } @
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } @
Distance : 6

92
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } false
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } false
Distance : 6

93
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } double
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } double
Distance : 6

94
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } values
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } values
Distance : 6

95
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } protected
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } protected
Distance : 6

96
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } out
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } out
Distance : 6

97
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } test
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } test
Distance : 6

98
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } return;
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } return;
Distance : 6

99
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

100
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } get
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } get
Distance : 6

101
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } >
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } >
Distance : 6

102
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } public
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } public
Distance : 6

103
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } final
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } final
Distance : 6

104
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } this
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } this
Distance : 6

105
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <
Distance : 6

106
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } if
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } if
Distance : 6

107
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ArrayList
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ArrayList
Distance : 6

108
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fireChangeEvent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fireChangeEvent
Distance : 6

109
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getInstance
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getInstance
Distance : 6

110
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } join
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } join
Distance : 6

111
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } JSType
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } JSType
Distance : 6

112
Tree	{ return ( T ) returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 7

113
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ]
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ]
Distance : 6

114
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } length
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } length
Distance : 6

115
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } v
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } v
Distance : 6

116
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Integer
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Integer
Distance : 6

117
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } verify
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } verify
Distance : 6

118
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } null
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } null
Distance : 6

119
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } +
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } +
Distance : 6

120
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } static
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } static
Distance : 6

121
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } setAcceptedLanguage
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } setAcceptedLanguage
Distance : 6

122
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } notifyListeners
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } notifyListeners
Distance : 6

123
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } c
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } c
Distance : 6

124
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } {}
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } {}
Distance : 6

125
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mock
Distance : 6

126
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } true
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } true
Distance : 6

127
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mode
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mode
Distance : 6

128
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } *
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } *
Distance : 6

129
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } -
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } -
Distance : 6

130
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } lines
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } lines
Distance : 6

131
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } boolean
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } boolean
Distance : 6

132
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } isEmpty
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } isEmpty
Distance : 6

133
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } char
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } char
Distance : 6

134
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } instant
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } instant
Distance : 6

135
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } else
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } else
Distance : 6

136
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } stream
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } stream
Distance : 6

137
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getMessage
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getMessage
Distance : 6

138
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } abs
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } abs
Distance : 6

139
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } matcher
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } matcher
Distance : 6

140
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } serialised
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } serialised
Distance : 6

141
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Exception
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Exception
Distance : 6

142
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Preconditions
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Preconditions
Distance : 6

143
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } compiler
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } compiler
Distance : 6

144
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ParamChecks
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ParamChecks
Distance : 6

145
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } array
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } array
Distance : 6

146
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <>
Distance : 6

147
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } contains
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } contains
Distance : 6

148
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } chrono
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } chrono
Distance : 6

149
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Node
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Node
Distance : 6

150
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } traverseEs6
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } traverseEs6
Distance : 6

151
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } a
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } a
Distance : 6

152
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 6

153
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } MutableTimePeriod
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } MutableTimePeriod
Distance : 6

154
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } b
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } b
Distance : 6

155
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } s
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } s
Distance : 6

156
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } isNormalBlock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } isNormalBlock
Distance : 6

157
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } obj
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } obj
Distance : 6

158
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <=
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } <=
Distance : 6

159
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Double
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Double
Distance : 6

160
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } clone
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } clone
Distance : 6

161
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } f
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } f
Distance : 6

162
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Override
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Override
Distance : 6

163
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } stroke
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } stroke
Distance : 6

164
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Object
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Object
Distance : 6

165
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } String
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } String
Distance : 6

166
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } MathRuntimeException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } MathRuntimeException
Distance : 6

167
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } n
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } n
Distance : 6

168
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } throw
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } throw
Distance : 6

169
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } catch
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } catch
Distance : 6

170
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } void
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } void
Distance : 6

171
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ==
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ==
Distance : 6

172
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Assert
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Assert
Distance : 6

173
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ?
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ?
Distance : 6

174
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } e
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } e
Distance : 6

175
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Fraction
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Fraction
Distance : 6

176
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } /
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } /
Distance : 6

177
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } long
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } long
Distance : 6

178
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } TestUtils
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } TestUtils
Distance : 6

179
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } [
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } [
Distance : 6

180
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } sqrt
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } sqrt
Distance : 6

181
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } PeriodType
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } PeriodType
Distance : 6

182
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } class
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } class
Distance : 6

183
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } checkNotNull
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } checkNotNull
Distance : 6

184
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } type
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } type
Distance : 6

185
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Math
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Math
Distance : 6

186
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } root
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } root
Distance : 6

187
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } NodeUtil
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } NodeUtil
Distance : 6

188
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } wanted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } wanted
Distance : 6

189
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } data
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } data
Distance : 6

190
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } add
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } add
Distance : 6

191
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } source
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } source
Distance : 6

192
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ex
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ex
Distance : 6

193
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } toString
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } toString
Distance : 6

194
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } options
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } options
Distance : 6

195
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } p
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } p
Distance : 6

196
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Test
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Test
Distance : 6

197
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Class
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Class
Distance : 6

198
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } NodeTraversal
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } NodeTraversal
Distance : 6

199
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mockingProgress
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mockingProgress
Distance : 6

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } reportMatcher
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } reportMatcher
Distance : 8

1
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } wanted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } wanted
Distance : 8

2
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } data
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } data
Distance : 8

3
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } add
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } add
Distance : 8

4
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } NodeTraversal
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } NodeTraversal
Distance : 8

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ex
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ex
Distance : 8

6
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ==
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ==
Distance : 8

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } final
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } final
Distance : 8

8
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } void
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } void
Distance : 8

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } throw
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } throw
Distance : 8

10
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } n
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } n
Distance : 8

11
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } e
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } e
Distance : 8

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } String
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } String
Distance : 8

13
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } compiler
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } compiler
Distance : 8

14
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } {}
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } {}
Distance : 8

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } mock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } mock
Distance : 8

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } true
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } true
Distance : 8

17
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } mode
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } mode
Distance : 8

18
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } catch
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } catch
Distance : 8

19
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } public
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } public
Distance : 8

20
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <
Distance : 8

21
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } null
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } null
Distance : 8

22
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } NodeUtil
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } NodeUtil
Distance : 8

23
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } LanguageMode.ECMASCRIPT6
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } LanguageMode.ECMASCRIPT6
Distance : 8

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } root
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } root
Distance : 8

25
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } -
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } -
Distance : 8

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } NUMBER_CONSTANT
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } NUMBER_CONSTANT
Distance : 8

27
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } STRING_CONSTANT
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } STRING_CONSTANT
Distance : 8

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } new
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } new
Distance : 8

29
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } {
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } {
Distance : 8

30
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ()
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ()
Distance : 8

31
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } }
Distance : 8

32
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } =
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } =
Distance : 8

33
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ,
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ,
Distance : 8

34
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } .
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } .
Distance : 8

35
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } )
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } )
Distance : 8

36
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ;
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ;
Distance : 8

37
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <blank>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <blank>
Distance : 8

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } {
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } {
Distance : 8

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <s>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <s>
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } (
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } (
Distance : 8

41
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } if
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } if
Distance : 8

42
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } StrBuilder
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } StrBuilder
Distance : 8

43
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } this
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } this
Distance : 8

44
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ]
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ]
Distance : 8

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } [
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } [
Distance : 8

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Preconditions
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Preconditions
Distance : 8

47
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Math
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Math
Distance : 8

48
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } return
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } return
Distance : 8

49
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } >
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } >
Distance : 8

50
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } long
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } long
Distance : 8

51
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } instance
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } instance
Distance : 8

52
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } T
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } T
Distance : 8

53
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } &&
Distance : 8

54
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } static
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } static
Distance : 8

55
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } super
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } super
Distance : 8

56
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } matcher
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } matcher
Distance : 8

57
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } setAcceptedLanguage
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } setAcceptedLanguage
Distance : 8

58
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } y
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } y
Distance : 8

59
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } optimizer
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } optimizer
Distance : 8

60
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } instant
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } instant
Distance : 8

61
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getArgumentMatcherStorage
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getArgumentMatcherStorage
Distance : 8

62
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } stream
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } stream
Distance : 8

63
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getMessage
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getMessage
Distance : 8

64
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } abs
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } abs
Distance : 8

65
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } else
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } else
Distance : 8

66
Tree	{ return ( Object ) returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 10

67
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

68
Tree	{ return ( Object ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 9

69
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 9

70
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 8

71
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

72
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } value
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } value
Distance : 8

73
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } assertTrue
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } assertTrue
Distance : 8

74
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } checkState
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } checkState
Distance : 8

75
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } i
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } i
Distance : 8

76
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } /
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } /
Distance : 8

77
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Fraction
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Fraction
Distance : 8

78
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } checkNotNull
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } checkNotNull
Distance : 8

79
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ?
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ?
Distance : 8

80
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Assert
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Assert
Distance : 8

81
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } index
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } index
Distance : 8

82
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } node
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } node
Distance : 8

83
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } setUp
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } setUp
Distance : 8

84
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getParent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getParent
Distance : 8

85
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } invocations
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } invocations
Distance : 8

86
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } out
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } out
Distance : 8

87
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } protected
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } protected
Distance : 8

88
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } values
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } values
Distance : 8

89
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } contains
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } contains
Distance : 8

90
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } chrono
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } chrono
Distance : 8

91
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } valueOf
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } valueOf
Distance : 8

92
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } alpha
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } alpha
Distance : 8

93
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } externs
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } externs
Distance : 8

94
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } simpleMethod
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } simpleMethod
Distance : 8

95
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } +
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } +
Distance : 8

96
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } !=
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } !=
Distance : 8

97
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } int
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } int
Distance : 8

98
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } stroke
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } stroke
Distance : 8

99
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

100
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } a
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } a
Distance : 8

101
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } mockingProgress
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } mockingProgress
Distance : 8

102
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } return;
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } return;
Distance : 8

103
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } size
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } size
Distance : 8

104
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } StringBuilder
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } StringBuilder
Distance : 8

105
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } sqrt
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } sqrt
Distance : 8

106
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } clone
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } clone
Distance : 8

107
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } PeriodType
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } PeriodType
Distance : 8

108
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Double
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Double
Distance : 8

109
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <=
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <=
Distance : 8

110
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } obj
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } obj
Distance : 8

111
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } isNormalBlock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } isNormalBlock
Distance : 8

112
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } s
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } s
Distance : 8

113
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } invocation
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } invocation
Distance : 8

114
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } assertThat
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } assertThat
Distance : 8

115
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } LINE_JOINER
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } LINE_JOINER
Distance : 8

116
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } createIllegalArgumentException
Distance : 8

117
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

118
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 8

119
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } class
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } class
Distance : 8

120
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } get
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } get
Distance : 8

121
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } JSType
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } JSType
Distance : 8

122
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } isEmpty
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } isEmpty
Distance : 8

123
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } char
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } char
Distance : 8

124
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } source
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } source
Distance : 8

125
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } toString
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } toString
Distance : 8

126
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } type
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } type
Distance : 8

127
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } *
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } *
Distance : 8

128
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } boolean
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } boolean
Distance : 8

129
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } join
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } join
Distance : 8

130
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } serialised
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } serialised
Distance : 8

131
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getInstance
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getInstance
Distance : 8

132
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } fireChangeEvent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } fireChangeEvent
Distance : 8

133
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } throws
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } throws
Distance : 8

134
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ArrayList
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ArrayList
Distance : 8

135
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } array
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } array
Distance : 8

136
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ParamChecks
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } ParamChecks
Distance : 8

137
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } f
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } f
Distance : 8

138
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } x
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } x
Distance : 8

139
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Override
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Override
Distance : 8

140
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } parent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } parent
Distance : 8

141
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } str
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } str
Distance : 8

142
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } MutableTimePeriod
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } MutableTimePeriod
Distance : 8

143
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } b
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } b
Distance : 8

144
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <>
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } <>
Distance : 8

145
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } returnZero
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } returnZero
Distance : 8

146
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } MathRuntimeException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } MathRuntimeException
Distance : 8

147
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } UnivariateFunction
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } UnivariateFunction
Distance : 8

148
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Args
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Args
Distance : 8

149
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getFirstChild
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } getFirstChild
Distance : 8

150
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } result
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } result
Distance : 8

151
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } m
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } m
Distance : 8

152
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } paint
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } paint
Distance : 8

153
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Node
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Node
Distance : 8

154
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Exception
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Exception
Distance : 8

155
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } lines
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } lines
Distance : 8

156
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } verify
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } verify
Distance : 8

157
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Integer
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Integer
Distance : 8

158
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } v
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } v
Distance : 8

159
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } length
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } length
Distance : 8

160
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } TestUtils
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } TestUtils
Distance : 8

161
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } IllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } IllegalArgumentException
Distance : 8

162
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } reportCodeChange
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } reportCodeChange
Distance : 8

163
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } FastMath
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } FastMath
Distance : 8

164
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } expected
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } expected
Distance : 8

165
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } name
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } name
Distance : 8

166
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } field
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } field
Distance : 8

167
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } List
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } List
Distance : 8

168
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } fail
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } fail
Distance : 8

169
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } try
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } try
Distance : 8

170
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } t
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } t
Distance : 8

171
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } sb
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } sb
Distance : 8

172
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } append
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } append
Distance : 8

173
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } isBlock
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } isBlock
Distance : 8

174
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } assertEquals
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } assertEquals
Distance : 8

175
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } !
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } !
Distance : 8

176
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } []
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } []
Distance : 8

177
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } :
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } :
Distance : 8

178
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } test
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } test
Distance : 8

179
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } @
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } @
Distance : 8

180
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } false
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } false
Distance : 8

181
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } nullNotPermitted
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } nullNotPermitted
Distance : 8

182
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } d
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } d
Distance : 8

183
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } double
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } double
Distance : 8

184
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Object
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Object
Distance : 8

185
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } scope
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } scope
Distance : 8

186
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } TestUtilities
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } TestUtilities
Distance : 8

187
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } checkArgument
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } checkArgument
Distance : 8

188
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Invocation
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Invocation
Distance : 8

189
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } for
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } for
Distance : 8

190
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } equals
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } equals
Distance : 8

191
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } js
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } js
Distance : 8

192
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } options
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } options
Distance : 8

193
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } p
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } p
Distance : 8

194
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Test
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Test
Distance : 8

195
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Class
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } Class
Distance : 8

196
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } notifyListeners
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } notifyListeners
Distance : 8

197
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } c
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } c
Distance : 8

198
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } testSame
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } testSame
Distance : 8

199
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } traverseEs6
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; } traverseEs6
Distance : 8

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Distance : 8

70
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Distance : 8

70
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Distance : 8

70
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Distance : 8

70
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Distance : 8

70
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } {
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ]
Distance : 8

70
Tree	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } valueOf
Distance : 8

146
Tree	{ return returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ]
Distance : 8

70
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } index
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } index
Distance : 8

1
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } options
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } options
Distance : 8

2
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } p
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } p
Distance : 8

3
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } &&
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } &&
Distance : 8

4
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } T
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } T
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } super
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } super
Distance : 8

6
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } value
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } value
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } class
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Object
Distance : 8

9
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } MathRuntimeException
Distance : 8

10
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Override
Distance : 8

11
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertEquals
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertEquals
Distance : 8

12
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } !
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } !
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } []
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } []
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } nullNotPermitted
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } nullNotPermitted
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } throw
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } throw
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } catch
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } catch
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } void
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } void
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ==
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } double
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } double
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } node
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } node
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } >
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } >
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } source
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } source
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } null
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } null
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } toString
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } toString
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } @
Distance : 8

26
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } mock
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } {}
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } {}
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } if
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } if
Distance : 8

29
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <
Distance : 8

30
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } this
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } this
Distance : 8

31
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } final
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } final
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } =
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } =
Distance : 8

33
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } mode
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } mode
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ()
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ()
Distance : 8

36
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <blank>
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <blank>
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } }
Distance : 8

38
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <s>
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <s>
Distance : 8

39
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } (
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } (
Distance : 8

40
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ;
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ;
Distance : 8

41
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } )
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } )
Distance : 8

42
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } .
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } .
Distance : 8

43
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ,
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ,
Distance : 8

44
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } +
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } +
Distance : 8

45
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } {
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } {
Distance : 8

46
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } test
Distance : 8

47
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } false
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } true
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } true
Distance : 8

49
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } new
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } new
Distance : 8

50
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } dataset
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } dataset
Distance : 8

51
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } IllegalArgumentException
Distance : 8

52
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } reportCodeChange
Distance : 8

53
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } FastMath
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } expected
Distance : 8

55
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } -
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } -
Distance : 8

56
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } invocations
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } invocations
Distance : 8

57
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } [
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } [
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Preconditions
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Preconditions
Distance : 8

59
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } char
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } char
Distance : 8

60
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } isEmpty
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } isEmpty
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } JSType
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } JSType
Distance : 8

62
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } get
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } get
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } abs
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } abs
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } matcher
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } matcher
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } setAcceptedLanguage
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } setAcceptedLanguage
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } static
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } static
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } values
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } values
Distance : 8

68
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } protected
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } protected
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ]
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ]
Distance : 8

70
Tree	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

71
Tree	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

72
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } return
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } return
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } PlotChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } PlotChangeEvent
Distance : 8

74
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } NUMBER_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } NUMBER_CONSTANT
Distance : 8

75
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } out
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } out
Distance : 8

76
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } d
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } d
Distance : 8

77
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } equals
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } equals
Distance : 8

78
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } for
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } for
Distance : 8

79
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Invocation
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Invocation
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } /
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } /
Distance : 8

81
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } long
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } long
Distance : 8

82
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertTrue
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertTrue
Distance : 8

83
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } public
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } public
Distance : 8

84
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } externs
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } externs
Distance : 8

85
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } StrBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } StrBuilder
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } TestUtilities
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } TestUtilities
Distance : 8

87
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } js
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } js
Distance : 8

88
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getMessage
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getMessage
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } stream
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } stream
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } else
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } else
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } instant
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } instant
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } s
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } s
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } isNormalBlock
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } isNormalBlock
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } reportMatcher
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } reportMatcher
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Collection
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Collection
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getField
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getField
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } STRING_CONSTANT
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } obj
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } obj
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

100
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } traverseEs6
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } traverseEs6
Distance : 8

101
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } size
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } size
Distance : 8

102
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } return;
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } return;
Distance : 8

103
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } mockingProgress
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } mockingProgress
Distance : 8

104
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } a
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } a
Distance : 8

105
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LanguageMode.ECMASCRIPT_2015
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LanguageMode.ECMASCRIPT_2015
Distance : 8

106
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } MutableTimePeriod
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } MutableTimePeriod
Distance : 8

107
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } b
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } b
Distance : 8

108
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } scope
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } scope
Distance : 8

109
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } throws
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } throws
Distance : 8

110
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } StringBuilder
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } StringBuilder
Distance : 8

111
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } returnZero
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } returnZero
Distance : 8

112
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Double
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Double
Distance : 8

113
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } PeriodType
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } PeriodType
Distance : 8

114
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } clone
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } clone
Distance : 8

115
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } sqrt
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } sqrt
Distance : 8

116
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } isBlock
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } isBlock
Distance : 8

117
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } append
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } append
Distance : 8

118
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } sb
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } sb
Distance : 8

119
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LanguageMode.ECMASCRIPT6
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LanguageMode.ECMASCRIPT6
Distance : 8

120
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } stroke
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } stroke
Distance : 8

121
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getFirstChild
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getFirstChild
Distance : 8

122
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } contains
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } contains
Distance : 8

123
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } chrono
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } chrono
Distance : 8

124
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } UnivariateFunction
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } UnivariateFunction
Distance : 8

125
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } lines
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } lines
Distance : 8

126
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } verify
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } verify
Distance : 8

127
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } str
Distance : 8

128
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LINE_JOINER
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertThat
Distance : 8

130
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } invocation
Distance : 8

131
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ArrayList
Distance : 8

132
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fireChangeEvent
Distance : 8

133
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getInstance
Distance : 8

134
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } serialised
Distance : 8

135
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } createIllegalArgumentException
Distance : 8

136
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } parent
Distance : 8

137
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } x
Distance : 8

138
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } testSame
Distance : 8

139
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } :
Distance : 8

140
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fail
Distance : 8

141
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } List
Distance : 8

142
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Args
Distance : 8

143
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } alpha
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } alpha
Distance : 8

144
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } f
Distance : 8

145
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } valueOf
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } valueOf
Distance : 8

146
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

147
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <>
Distance : 8

148
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ParamChecks
Distance : 8

149
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ?
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ?
Distance : 8

150
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } result
Distance : 8

151
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } try
Distance : 8

152
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } join
Distance : 8

153
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } boolean
Distance : 8

154
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } *
Distance : 8

155
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } type
Distance : 8

156
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } TestUtils
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } TestUtils
Distance : 8

157
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } length
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } length
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } v
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } v
Distance : 8

159
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } checkNotNull
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } checkNotNull
Distance : 8

160
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Integer
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Integer
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } NodeUtil
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } NodeUtil
Distance : 8

162
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } root
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } root
Distance : 8

163
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Math
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Math
Distance : 8

164
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } checkArgument
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } checkArgument
Distance : 8

165
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } field
Distance : 8

166
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } t
Distance : 8

167
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } name
Distance : 8

168
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } data
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } data
Distance : 8

169
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } NodeTraversal
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } NodeTraversal
Distance : 8

170
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } wanted
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } wanted
Distance : 8

171
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } paint
Distance : 8

172
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } m
Distance : 8

173
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ex
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ex
Distance : 8

174
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Assert
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Assert
Distance : 8

175
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Test
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Test
Distance : 8

176
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Class
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Class
Distance : 8

177
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } notifyListeners
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } notifyListeners
Distance : 8

178
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } c
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } c
Distance : 8

179
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } n
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } n
Distance : 8

180
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } e
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } e
Distance : 8

181
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } String
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } String
Distance : 8

182
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } add
Distance : 8

183
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } checkState
Distance : 8

184
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } compiler
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } compiler
Distance : 8

185
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } i
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } i
Distance : 8

186
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } !=
Distance : 8

187
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } simpleMethod
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } simpleMethod
Distance : 8

188
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getArgumentMatcherStorage
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getArgumentMatcherStorage
Distance : 8

189
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } y
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } y
Distance : 8

190
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } optimizer
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } optimizer
Distance : 8

191
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getParent
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getParent
Distance : 8

192
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } setUp
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } setUp
Distance : 8

193
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Fraction
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Fraction
Distance : 8

194
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } array
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } array
Distance : 8

195
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } int
Distance : 8

196
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Exception
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Exception
Distance : 8

197
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Node
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Node
Distance : 8

198
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } instance
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } instance
Distance : 8

199
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <=
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } <=
Distance : 8

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } reportMatcher
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } reportMatcher
Distance : 2

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } wanted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } wanted
Distance : 2

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } data
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } data
Distance : 2

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } add
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } add
Distance : 2

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NodeTraversal
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NodeTraversal
Distance : 2

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ex
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ex
Distance : 2

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ==
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ==
Distance : 2

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } final
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } final
Distance : 2

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } void
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } void
Distance : 2

9
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } throw
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } throw
Distance : 2

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } n
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } n
Distance : 2

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } e
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } e
Distance : 2

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } String
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } String
Distance : 2

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } compiler
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } compiler
Distance : 2

14
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {}
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {}
Distance : 2

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mock
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mock
Distance : 2

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } true
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } true
Distance : 2

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mode
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mode
Distance : 2

18
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } catch
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } catch
Distance : 2

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } public
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } public
Distance : 2

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <
Distance : 2

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } null
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } null
Distance : 2

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NodeUtil
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NodeUtil
Distance : 2

23
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LanguageMode.ECMASCRIPT6
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LanguageMode.ECMASCRIPT6
Distance : 2

24
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } root
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } root
Distance : 2

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } -
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } -
Distance : 2

26
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NUMBER_CONSTANT
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NUMBER_CONSTANT
Distance : 2

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } STRING_CONSTANT
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } STRING_CONSTANT
Distance : 2

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } new
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } new
Distance : 2

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {
Distance : 2

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ()
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ()
Distance : 2

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } }
Distance : 2

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } =
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } =
Distance : 2

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ,
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ,
Distance : 2

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } .
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } .
Distance : 2

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } )
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } )
Distance : 2

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ;
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ;
Distance : 2

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <blank>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <blank>
Distance : 2

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } (
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } (
Distance : 2

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <s>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <s>
Distance : 2

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } (
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } (
Distance : 2

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } if
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } if
Distance : 2

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } StrBuilder
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } StrBuilder
Distance : 2

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } this
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } this
Distance : 2

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ]
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ]
Distance : 2

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } [
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } [
Distance : 2

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Preconditions
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Preconditions
Distance : 2

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Math
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Math
Distance : 2

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } return
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } return
Distance : 2

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } >
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } >
Distance : 2

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } long
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } long
Distance : 2

51
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } instance
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } instance
Distance : 2

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } T
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } T
Distance : 2

53
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } &&
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } &&
Distance : 2

54
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } static
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } static
Distance : 2

55
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } super
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } super
Distance : 2

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } matcher
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } matcher
Distance : 2

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } setAcceptedLanguage
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } setAcceptedLanguage
Distance : 2

58
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } y
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } y
Distance : 2

59
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } optimizer
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } optimizer
Distance : 2

60
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } instant
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } instant
Distance : 2

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getArgumentMatcherStorage
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getArgumentMatcherStorage
Distance : 2

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } stream
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } stream
Distance : 2

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getMessage
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getMessage
Distance : 2

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } abs
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } abs
Distance : 2

65
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } else
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } else
Distance : 2

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( error ) ; }
Distance : 4

67
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { e = handleVerifyException ( e ) ; }
Distance : 3

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( error ) ; }
Distance : 3

69
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Distance : 3

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 2

71
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 2

72
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } value
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } value
Distance : 2

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertTrue
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertTrue
Distance : 2

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } checkState
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } checkState
Distance : 2

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } i
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } i
Distance : 2

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } /
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } /
Distance : 2

77
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Fraction
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Fraction
Distance : 2

78
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } checkNotNull
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } checkNotNull
Distance : 2

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ?
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ?
Distance : 2

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Assert
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Assert
Distance : 2

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } index
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } index
Distance : 2

82
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } node
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } node
Distance : 2

83
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } setUp
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } setUp
Distance : 2

84
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getParent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getParent
Distance : 2

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } invocations
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } invocations
Distance : 2

86
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } out
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } out
Distance : 2

87
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } protected
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } protected
Distance : 2

88
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } values
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } values
Distance : 2

89
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } contains
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } contains
Distance : 2

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } chrono
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } chrono
Distance : 2

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } valueOf
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } valueOf
Distance : 2

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } alpha
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } alpha
Distance : 2

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } externs
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } externs
Distance : 2

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } simpleMethod
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } simpleMethod
Distance : 2

95
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } +
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } +
Distance : 2

96
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !=
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !=
Distance : 2

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } int
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } int
Distance : 2

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } stroke
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } stroke
Distance : 2

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

100
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } a
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } a
Distance : 2

101
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mockingProgress
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mockingProgress
Distance : 2

102
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } return;
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } return;
Distance : 2

103
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } size
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } size
Distance : 2

104
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } StringBuilder
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } StringBuilder
Distance : 2

105
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } sqrt
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } sqrt
Distance : 2

106
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } clone
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } clone
Distance : 2

107
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } PeriodType
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } PeriodType
Distance : 2

108
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Double
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Double
Distance : 2

109
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <=
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <=
Distance : 2

110
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } obj
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } obj
Distance : 2

111
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } isNormalBlock
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } isNormalBlock
Distance : 2

112
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } s
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } s
Distance : 2

113
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } invocation
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } invocation
Distance : 2

114
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertThat
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertThat
Distance : 2

115
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LINE_JOINER
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LINE_JOINER
Distance : 2

116
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } createIllegalArgumentException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } createIllegalArgumentException
Distance : 2

117
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LanguageMode.ECMASCRIPT_2015
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LanguageMode.ECMASCRIPT_2015
Distance : 2

118
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 2

119
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } class
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } class
Distance : 2

120
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } get
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } get
Distance : 2

121
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } JSType
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } JSType
Distance : 2

122
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } isEmpty
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } isEmpty
Distance : 2

123
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } char
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } char
Distance : 2

124
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } source
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } source
Distance : 2

125
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } toString
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } toString
Distance : 2

126
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } type
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } type
Distance : 2

127
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } *
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } *
Distance : 2

128
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } boolean
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } boolean
Distance : 2

129
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } join
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } join
Distance : 2

130
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } serialised
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } serialised
Distance : 2

131
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getInstance
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getInstance
Distance : 2

132
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } fireChangeEvent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } fireChangeEvent
Distance : 2

133
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } throws
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } throws
Distance : 2

134
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ArrayList
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ArrayList
Distance : 2

135
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } array
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } array
Distance : 2

136
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ParamChecks
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ParamChecks
Distance : 2

137
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } f
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } f
Distance : 2

138
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } x
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } x
Distance : 2

139
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Override
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Override
Distance : 2

140
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } parent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } parent
Distance : 2

141
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } str
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } str
Distance : 2

142
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } MutableTimePeriod
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } MutableTimePeriod
Distance : 2

143
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } b
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } b
Distance : 2

144
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <>
Distance : 2

145
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } returnZero
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } returnZero
Distance : 2

146
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } MathRuntimeException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } MathRuntimeException
Distance : 2

147
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } UnivariateFunction
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } UnivariateFunction
Distance : 2

148
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Args
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Args
Distance : 2

149
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getFirstChild
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } getFirstChild
Distance : 2

150
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } result
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } result
Distance : 2

151
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } m
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } m
Distance : 2

152
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } paint
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } paint
Distance : 2

153
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Node
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Node
Distance : 2

154
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Exception
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Exception
Distance : 2

155
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } lines
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } lines
Distance : 2

156
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } verify
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } verify
Distance : 2

157
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Integer
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Integer
Distance : 2

158
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } v
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } v
Distance : 2

159
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } length
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } length
Distance : 2

160
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } TestUtils
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } TestUtils
Distance : 2

161
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } IllegalArgumentException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } IllegalArgumentException
Distance : 2

162
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } reportCodeChange
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } reportCodeChange
Distance : 2

163
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } FastMath
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } FastMath
Distance : 2

164
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } expected
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } expected
Distance : 2

165
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } name
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } name
Distance : 2

166
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } field
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } field
Distance : 2

167
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } List
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } List
Distance : 2

168
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } fail
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } fail
Distance : 2

169
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } try
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } try
Distance : 2

170
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } t
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } t
Distance : 2

171
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } sb
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } sb
Distance : 2

172
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } append
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } append
Distance : 2

173
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } isBlock
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } isBlock
Distance : 2

174
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertEquals
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertEquals
Distance : 2

175
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !
Distance : 2

176
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } []
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } []
Distance : 2

177
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } :
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } :
Distance : 2

178
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } test
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } test
Distance : 2

179
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } @
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } @
Distance : 2

180
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } false
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } false
Distance : 2

181
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } nullNotPermitted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } nullNotPermitted
Distance : 2

182
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } d
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } d
Distance : 2

183
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } double
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } double
Distance : 2

184
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Object
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Object
Distance : 2

185
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } scope
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } scope
Distance : 2

186
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } TestUtilities
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } TestUtilities
Distance : 2

187
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } checkArgument
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } checkArgument
Distance : 2

188
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Invocation
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Invocation
Distance : 2

189
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } for
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } for
Distance : 2

190
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } equals
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } equals
Distance : 2

191
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } js
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } js
Distance : 2

192
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } options
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } options
Distance : 2

193
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } p
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } p
Distance : 2

194
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Test
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Test
Distance : 2

195
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Class
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Class
Distance : 2

196
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } notifyListeners
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } notifyListeners
Distance : 2

197
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } c
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } c
Distance : 2

198
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } testSame
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } testSame
Distance : 2

199
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } traverseEs6
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } traverseEs6
Distance : 2

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 3

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 4

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 4

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 4

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

8
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

9
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

11
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

13
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

15
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

16
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

18
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

19
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

20
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

21
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

22
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

24
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

25
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

26
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

27
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

28
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

29
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

30
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

31
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

32
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

33
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

34
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

35
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

36
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

37
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

38
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

39
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

40
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

41
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

42
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

43
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

44
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

45
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

46
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

47
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 5

48
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

49
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

50
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

51
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

52
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

53
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

54
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

55
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 5

56
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

57
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

58
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

59
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

60
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

61
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

62
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

63
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

64
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

65
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

66
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

67
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

68
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

69
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 5

70
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

71
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

72
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

73
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

74
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

75
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

76
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

77
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

78
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

79
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

80
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

81
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

82
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

83
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

84
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

85
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

86
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

87
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

88
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

89
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

90
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

91
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

92
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

93
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

94
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

95
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

96
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

97
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

98
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

99
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

100
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

101
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

102
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

103
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

104
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

105
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

106
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

107
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

108
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

109
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

110
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

111
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

112
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

113
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

114
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

115
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

116
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

117
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

118
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

119
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

120
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

121
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

122
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

123
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

124
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

125
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

126
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

127
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

128
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

129
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

130
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

131
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

132
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

133
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

134
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

135
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

136
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

137
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

138
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

139
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

140
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

141
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

142
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

143
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

144
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

145
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

146
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

147
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

148
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

149
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

150
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

151
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

152
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

153
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

154
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

155
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

156
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

157
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

158
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

159
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

160
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

161
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

162
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

163
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 6

164
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

165
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

166
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

167
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

168
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

169
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

170
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

171
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

172
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

173
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

174
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

175
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

176
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

177
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

178
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

179
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

180
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

181
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

182
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

183
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

184
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

185
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

186
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 6

187
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

188
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () ) )
Distance : 6

189
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

190
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

191
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () ) )
Distance : 7

192
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

193
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 7

194
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

195
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

196
Tree	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

197
Tree	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new LocationImpl ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

198
Tree	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Code	new LocationImpl ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () ) )
Distance : 7

199
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () ) )
Distance : 7

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 3

1
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

2
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 4

3
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

4
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 5

5
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

6
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

7
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

8
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

9
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

10
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

11
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

12
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

13
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

14
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

15
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 4

16
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

17
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 5

18
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

19
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 4

20
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

21
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 5

22
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 4

23
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

24
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

25
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 5

26
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

27
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

28
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

29
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

30
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

31
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 4

32
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

33
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

34
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

35
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 5

36
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 5

37
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 5

38
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

39
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 4

40
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

41
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

42
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

43
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 6

44
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

45
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

46
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

47
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

48
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

49
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

50
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

51
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , undesired )
Distance : 6

52
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

53
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

54
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

55
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

56
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

57
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

58
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

59
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

60
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 7

61
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 5

62
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

63
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

64
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

65
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () , undesired )
Distance : 5

66
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

67
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 6

68
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 6

69
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

70
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

71
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

72
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

73
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

74
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

75
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . join () , undesired )
Distance : 6

76
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 5

77
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 7

78
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 6

79
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

80
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

81
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

82
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

83
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

84
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 6

85
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 6

86
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 6

87
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

88
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , undesired )
Distance : 7

89
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

90
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 7

91
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 6

92
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

93
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getMock () , undesired )
Distance : 7

94
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

95
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

96
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 5

97
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

98
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

99
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 6

100
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

101
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

102
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

103
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

104
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 7

105
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

106
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . join () , undesired )
Distance : 6

107
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

108
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 5

109
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

110
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 6

111
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

112
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 6

113
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

114
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

115
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

116
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . join () , undesired )
Distance : 7

117
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

118
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 6

119
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

120
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 6

121
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 7

122
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

123
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

124
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 7

125
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . join () , undesired )
Distance : 6

126
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 6

127
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

128
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

129
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

130
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 7

131
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 6

132
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 6

133
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

134
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . join () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

135
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . join () , undesired )
Distance : 7

136
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 7

137
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

138
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 7

139
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getMock () , undesired )
Distance : 7

140
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 6

141
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

142
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 5

143
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 6

144
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 7

145
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . join () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 6

146
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 6

147
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

148
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

149
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 7

150
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

151
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 7

152
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 7

153
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 5

154
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 6

155
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 6

156
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

157
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 7

158
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

159
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 6

160
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

161
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

162
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 6

163
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 6

164
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , undesired )
Distance : 7

165
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 7

166
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 8

167
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 6

168
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . safelyGetMockName () , scenario )
Distance : 5

169
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 6

170
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

171
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

172
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

173
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 5

174
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 7

175
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 6

176
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 7

177
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . safelyGetMockName () , undesired )
Distance : 7

178
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 7

179
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 7

180
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . safelyGetMockName () , scenario )
Distance : 6

181
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 6

182
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getLocation () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 7

183
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

184
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getMock () , scenario )
Distance : 5

185
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 6

186
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 7

187
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 6

188
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , scenario . join () , undesired )
Distance : 7

189
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . join () , scenario )
Distance : 6

190
Tree	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Code	safelyGetMockName ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . getLocation () , undesired )
Distance : 8

191
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . getLocation () , undesired )
Distance : 6

192
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . safelyGetMockName () , undesired )
Distance : 8

193
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , undesired . getMock () , undesired )
Distance : 7

194
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , scenario . getMock () , scenario )
Distance : 6

195
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getMock () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . join () + STRING_CONSTANT , scenario . getMock () , undesired )
Distance : 7

196
Tree	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Code	getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . safelyGetMockName () + STRING_CONSTANT , scenario . getLocation () , scenario )
Distance : 7

197
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . join () , undesired )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getMock () + STRING_CONSTANT , undesired . join () , undesired )
Distance : 6

198
Tree	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Code	getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , undesired . getLocation () , scenario )
Distance : 6

199
Tree	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . join () , scenario )
Code	join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + scenario . getLocation () + STRING_CONSTANT , scenario . join () , scenario )
Distance : 7

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 9

1
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 10

2
Tree	return setDefaultPaint ;
Code	return setDefaultPaint ;
Distance : 10

3
Tree	return doSlicing ;
Code	return doSlicing ;
Distance : 10

4
Tree	return SystemUtils ;
Code	return SystemUtils ;
Distance : 10

5
Tree	return toInspect ;
Code	return toInspect ;
Distance : 10

6
Tree	return for ;
Code	return for ;
Distance : 10

7
Tree	return assert ;
Code	return assert ;
Distance : 10

8
Tree	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Distance : 10

9
Tree	return Object ;
Code	return Object ;
Distance : 10

10
Tree	return toRemove ;
Code	return toRemove ;
Distance : 10

11
Tree	return maybeThisType ;
Code	return maybeThisType ;
Distance : 10

12
Tree	return OtherClass ;
Code	return OtherClass ;
Distance : 10

13
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 10

14
Tree	return canModifyExterns ;
Code	return canModifyExterns ;
Distance : 10

15
Tree	return FALSE ;
Code	return FALSE ;
Distance : 10

16
Tree	return isEquals ;
Code	return isEquals ;
Distance : 10

17
Tree	return getSizes ;
Code	return getSizes ;
Distance : 10

18
Tree	return ModifyType.ROUND ;
Code	return ModifyType.ROUND ;
Distance : 10

19
Tree	return outcome.booleanValues ;
Code	return outcome.booleanValues ;
Distance : 10

20
Tree	return pname ;
Code	return pname ;
Distance : 10

21
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 10

22
Tree	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Code	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Distance : 10

23
Tree	return MultivariateVectorFunction ;
Code	return MultivariateVectorFunction ;
Distance : 10

24
Tree	return categoryMargin ;
Code	return categoryMargin ;
Distance : 10

25
Tree	return VECTOR_LENGTHS_MISMATCH ;
Code	return VECTOR_LENGTHS_MISMATCH ;
Distance : 10

26
Tree	return parameters ;
Code	return parameters ;
Distance : 10

27
Tree	return serial ;
Code	return serial ;
Distance : 10

28
Tree	return noStubFunctions ;
Code	return noStubFunctions ;
Distance : 10

29
Tree	return isInferred ;
Code	return isInferred ;
Distance : 10

30
Tree	return mocksToBeVerifiedInOrder ;
Code	return mocksToBeVerifiedInOrder ;
Distance : 10

31
Tree	return %= ;
Code	return %= ;
Distance : 10

32
Tree	return incompletePaint ;
Code	return incompletePaint ;
Distance : 10

33
Tree	return jsType ;
Code	return jsType ;
Distance : 10

34
Tree	return Token ;
Code	return Token ;
Distance : 10

35
Tree	return AxisLocation ;
Code	return AxisLocation ;
Distance : 10

36
Tree	return epsilon ;
Code	return epsilon ;
Distance : 10

37
Tree	return int ;
Code	return int ;
Distance : 10

38
Tree	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Code	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Distance : 10

39
Tree	return firstNonNull ;
Code	return firstNonNull ;
Distance : 10

40
Tree	return nullSafeGet ;
Code	return nullSafeGet ;
Distance : 10

41
Tree	return unflowable ;
Code	return unflowable ;
Distance : 10

42
Tree	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Code	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Distance : 10

43
Tree	return minimum ;
Code	return minimum ;
Distance : 10

44
Tree	return another ;
Code	return another ;
Distance : 10

45
Tree	return ExtendedMessageFormat ;
Code	return ExtendedMessageFormat ;
Distance : 10

46
Tree	return updateTypeOfArguments ;
Code	return updateTypeOfArguments ;
Distance : 10

47
Tree	return jacobian.length ;
Code	return jacobian.length ;
Distance : 10

48
Tree	return RandomSource.WELL_19937_C ;
Code	return RandomSource.WELL_19937_C ;
Distance : 10

49
Tree	return mode ;
Code	return mode ;
Distance : 10

50
Tree	return NoMoreInvocationsVerifier ;
Code	return NoMoreInvocationsVerifier ;
Distance : 10

51
Tree	return NormalDistribution ;
Code	return NormalDistribution ;
Distance : 10

52
Tree	return testArrowFunction3 ;
Code	return testArrowFunction3 ;
Distance : 10

53
Tree	return WEEKS ;
Code	return WEEKS ;
Distance : 10

54
Tree	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

55
Tree	return DateTimeParser ;
Code	return DateTimeParser ;
Distance : 10

56
Tree	return shouldPreservesGoogProvidesAndRequires ;
Code	return shouldPreservesGoogProvidesAndRequires ;
Distance : 10

57
Tree	return scaled ;
Code	return scaled ;
Distance : 10

58
Tree	return tokenLen ;
Code	return tokenLen ;
Distance : 10

59
Tree	return DEFAULT_ULPS ;
Code	return DEFAULT_ULPS ;
Distance : 10

60
Tree	return Set ;
Code	return Set ;
Distance : 10

61
Tree	return nvars ;
Code	return nvars ;
Distance : 10

62
Tree	return <= ;
Code	return <= ;
Distance : 10

63
Tree	return applySingletonGetter ;
Code	return applySingletonGetter ;
Distance : 10

64
Tree	return InOrderWrapper ;
Code	return InOrderWrapper ;
Distance : 10

65
Tree	return LiveVariablesAnalysis ;
Code	return LiveVariablesAnalysis ;
Distance : 10

66
Tree	return JAVA_1_5 ;
Code	return JAVA_1_5 ;
Distance : 10

67
Tree	return MemoizedTypedScopeCreator ;
Code	return MemoizedTypedScopeCreator ;
Distance : 10

68
Tree	return actualMethod ;
Code	return actualMethod ;
Distance : 10

69
Tree	return newPropType ;
Code	return newPropType ;
Distance : 10

70
Tree	return wantedInvocationCount ;
Code	return wantedInvocationCount ;
Distance : 10

71
Tree	return ARROW_FN ;
Code	return ARROW_FN ;
Distance : 10

72
Tree	return retType ;
Code	return retType ;
Distance : 10

73
Tree	return charMatcher ;
Code	return charMatcher ;
Distance : 10

74
Tree	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Code	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Distance : 10

75
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 10

76
Tree	return hasDuplicateDeclarationSuppression ;
Code	return hasDuplicateDeclarationSuppression ;
Distance : 10

77
Tree	return isSubtypeOfHelper ;
Code	return isSubtypeOfHelper ;
Distance : 10

78
Tree	return YIntervalRenderer ;
Code	return YIntervalRenderer ;
Distance : 10

79
Tree	return s2 ;
Code	return s2 ;
Distance : 10

80
Tree	return anchorUnusedVars ;
Code	return anchorUnusedVars ;
Distance : 10

81
Tree	return foundSize ;
Code	return foundSize ;
Distance : 10

82
Tree	return testNotConstantArgument ;
Code	return testNotConstantArgument ;
Distance : 10

83
Tree	return nullOrUndefined ;
Code	return nullOrUndefined ;
Distance : 10

84
Tree	return recvType ;
Code	return recvType ;
Distance : 10

85
Tree	return declaredType ;
Code	return declaredType ;
Distance : 10

86
Tree	return firstChunk ;
Code	return firstChunk ;
Distance : 10

87
Tree	return TestObject ;
Code	return TestObject ;
Distance : 10

88
Tree	return GaussianRandomGenerator ;
Code	return GaussianRandomGenerator ;
Distance : 10

89
Tree	return compare ;
Code	return compare ;
Distance : 10

90
Tree	return newClusters ;
Code	return newClusters ;
Distance : 10

91
Tree	return boolean ;
Code	return boolean ;
Distance : 10

92
Tree	return thiz ;
Code	return thiz ;
Distance : 10

93
Tree	return SubChord ;
Code	return SubChord ;
Distance : 10

94
Tree	return verificationMode ;
Code	return verificationMode ;
Distance : 10

95
Tree	return CharSet ;
Code	return CharSet ;
Distance : 10

96
Tree	return ? ;
Code	return ? ;
Distance : 10

97
Tree	return getPollingPeriod ;
Code	return getPollingPeriod ;
Distance : 10

98
Tree	return residuals ;
Code	return residuals ;
Distance : 10

99
Tree	return propType ;
Code	return propType ;
Distance : 10

100
Tree	return preserveClosurePrimitives ;
Code	return preserveClosurePrimitives ;
Distance : 10

101
Tree	return MyComparableObjectSeries ;
Code	return MyComparableObjectSeries ;
Distance : 10

102
Tree	return delimiters.length ;
Code	return delimiters.length ;
Distance : 10

103
Tree	return matchingMock ;
Code	return matchingMock ;
Distance : 10

104
Tree	return modType ;
Code	return modType ;
Distance : 10

105
Tree	return Stroke ;
Code	return Stroke ;
Distance : 10

106
Tree	return ignored ;
Code	return ignored ;
Distance : 10

107
Tree	return delimLen ;
Code	return delimLen ;
Distance : 10

108
Tree	return mapper ;
Code	return mapper ;
Distance : 10

109
Tree	return MODIFY_TRUNCATE ;
Code	return MODIFY_TRUNCATE ;
Distance : 10

110
Tree	return ak2 ;
Code	return ak2 ;
Distance : 10

111
Tree	return targetType ;
Code	return targetType ;
Distance : 10

112
Tree	return missingMethodMode ;
Code	return missingMethodMode ;
Distance : 10

113
Tree	return testTransients ;
Code	return testTransients ;
Distance : 10

114
Tree	return declType ;
Code	return declType ;
Distance : 10

115
Tree	return instant ;
Code	return instant ;
Distance : 9

116
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

117
Tree	return byte ;
Code	return byte ;
Distance : 10

118
Tree	return Comparable ;
Code	return Comparable ;
Distance : 10

119
Tree	return localInstant ;
Code	return localInstant ;
Distance : 9

120
Tree	return preserveGoogProvidesAndRequires ;
Code	return preserveGoogProvidesAndRequires ;
Distance : 10

121
Tree	return columnDimension ;
Code	return columnDimension ;
Distance : 10

122
Tree	return voidType ;
Code	return voidType ;
Distance : 10

123
Tree	return K ;
Code	return K ;
Distance : 10

124
Tree	return O ;
Code	return O ;
Distance : 10

125
Tree	return firstChar ;
Code	return firstChar ;
Distance : 10

126
Tree	return TypeI ;
Code	return TypeI ;
Distance : 10

127
Tree	return normProduct ;
Code	return normProduct ;
Distance : 10

128
Tree	return instance ;
Code	return instance ;
Distance : 10

129
Tree	return ! ;
Code	return ! ;
Distance : 10

130
Tree	return null ;
Code	return null ;
Distance : 10

131
Tree	return - ;
Code	return - ;
Distance : 10

132
Tree	return >= ;
Code	return >= ;
Distance : 10

133
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 10

134
Tree	return delimiters ;
Code	return delimiters ;
Distance : 10

135
Tree	return before ;
Code	return before ;
Distance : 10

136
Tree	return populationLimit ;
Code	return populationLimit ;
Distance : 10

137
Tree	return != ;
Code	return != ;
Distance : 10

138
Tree	return strategy ;
Code	return strategy ;
Distance : 10

139
Tree	return Builder ;
Code	return Builder ;
Distance : 10

140
Tree	return convertLocalToUTC ;
Code	return convertLocalToUTC ;
Distance : 9

141
Tree	return p1c ;
Code	return p1c ;
Distance : 10

142
Tree	return TimePeriodValue ;
Code	return TimePeriodValue ;
Distance : 10

143
Tree	return removeLen ;
Code	return removeLen ;
Distance : 10

144
Tree	return Null.NULL ;
Code	return Null.NULL ;
Distance : 10

145
Tree	return OngoingVerifyingMode ;
Code	return OngoingVerifyingMode ;
Distance : 10

146
Tree	return iZone ;
Code	return iZone ;
Distance : 9

147
Tree	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Distance : 10

148
Tree	return itimeStyle ;
Code	return itimeStyle ;
Distance : 10

149
Tree	return outData ;
Code	return outData ;
Distance : 10

150
Tree	return iElementPairs ;
Code	return iElementPairs ;
Distance : 10

151
Tree	return ChartPanel ;
Code	return ChartPanel ;
Distance : 10

152
Tree	return maximum ;
Code	return maximum ;
Distance : 10

153
Tree	return iObjectIndexTemplateKey ;
Code	return iObjectIndexTemplateKey ;
Distance : 10

154
Tree	return low ;
Code	return low ;
Distance : 10

155
Tree	return ignoredMatcher ;
Code	return ignoredMatcher ;
Distance : 10

156
Tree	return icon ;
Code	return icon ;
Distance : 10

157
Tree	return synchronized ;
Code	return synchronized ;
Distance : 10

158
Tree	return foundType ;
Code	return foundType ;
Distance : 10

159
Tree	return delimMatcher ;
Code	return delimMatcher ;
Distance : 10

160
Tree	return cols ;
Code	return cols ;
Distance : 10

161
Tree	return testClassPropUnused1 ;
Code	return testClassPropUnused1 ;
Distance : 10

162
Tree	return throwableClass ;
Code	return throwableClass ;
Distance : 10

163
Tree	return rowDimension ;
Code	return rowDimension ;
Distance : 10

164
Tree	return comparator ;
Code	return comparator ;
Distance : 10

165
Tree	return Graphics2D ;
Code	return Graphics2D ;
Distance : 10

166
Tree	return field ;
Code	return field ;
Distance : 10

167
Tree	return -= ;
Code	return -= ;
Distance : 10

168
Tree	return funType ;
Code	return funType ;
Distance : 10

169
Tree	return &= ;
Code	return &= ;
Distance : 10

170
Tree	return typeMap ;
Code	return typeMap ;
Distance : 10

171
Tree	return DEFAULT_CUT_OFF ;
Code	return DEFAULT_CUT_OFF ;
Distance : 10

172
Tree	return xInt ;
Code	return xInt ;
Distance : 10

173
Tree	return one ;
Code	return one ;
Distance : 10

174
Tree	return margin ;
Code	return margin ;
Distance : 10

175
Tree	return RemoveUnusedClassPropertiesTest ;
Code	return RemoveUnusedClassPropertiesTest ;
Distance : 10

176
Tree	return StandardBasicTypes.TIMESTAMP ;
Code	return StandardBasicTypes.TIMESTAMP ;
Distance : 10

177
Tree	return extends ;
Code	return extends ;
Distance : 10

178
Tree	return typeToMock ;
Code	return typeToMock ;
Distance : 10

179
Tree	return isAllType ;
Code	return isAllType ;
Distance : 10

180
Tree	return JAVA_1_4 ;
Code	return JAVA_1_4 ;
Distance : 10

181
Tree	return actualValue ;
Code	return actualValue ;
Distance : 10

182
Tree	return continue; ;
Code	return continue; ;
Distance : 10

183
Tree	return JSTypeNative.NO_OBJECT_TYPE ;
Code	return JSTypeNative.NO_OBJECT_TYPE ;
Distance : 10

184
Tree	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

185
Tree	return minorTickCount ;
Code	return minorTickCount ;
Distance : 10

186
Tree	return RELAX ;
Code	return RELAX ;
Distance : 10

187
Tree	return DUPLICATE_REQUIRE ;
Code	return DUPLICATE_REQUIRE ;
Distance : 10

188
Tree	return returnValues ;
Code	return returnValues ;
Distance : 10

189
Tree	return transformer ;
Code	return transformer ;
Distance : 10

190
Tree	return ModifyType.TRUNCATE ;
Code	return ModifyType.TRUNCATE ;
Distance : 10

191
Tree	return TestSubObject ;
Code	return TestSubObject ;
Distance : 10

192
Tree	return newSourceInd ;
Code	return newSourceInd ;
Distance : 10

193
Tree	return InlineVariablesConstantsTest ;
Code	return InlineVariablesConstantsTest ;
Distance : 10

194
Tree	return appendField ;
Code	return appendField ;
Distance : 10

195
Tree	return bitIndex ;
Code	return bitIndex ;
Distance : 10

196
Tree	return Type ;
Code	return Type ;
Distance : 10

197
Tree	return UnitSphereSampler ;
Code	return UnitSphereSampler ;
Distance : 10

198
Tree	return lastWasGap ;
Code	return lastWasGap ;
Distance : 10

199
Tree	return occurrences ;
Code	return occurrences ;
Distance : 10

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 9

1
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 10

2
Tree	return setDefaultPaint ;
Code	return setDefaultPaint ;
Distance : 10

3
Tree	return doSlicing ;
Code	return doSlicing ;
Distance : 10

4
Tree	return SystemUtils ;
Code	return SystemUtils ;
Distance : 10

5
Tree	return toInspect ;
Code	return toInspect ;
Distance : 10

6
Tree	return for ;
Code	return for ;
Distance : 10

7
Tree	return assert ;
Code	return assert ;
Distance : 10

8
Tree	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Distance : 10

9
Tree	return Object ;
Code	return Object ;
Distance : 10

10
Tree	return toRemove ;
Code	return toRemove ;
Distance : 10

11
Tree	return maybeThisType ;
Code	return maybeThisType ;
Distance : 10

12
Tree	return OtherClass ;
Code	return OtherClass ;
Distance : 10

13
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 10

14
Tree	return canModifyExterns ;
Code	return canModifyExterns ;
Distance : 10

15
Tree	return FALSE ;
Code	return FALSE ;
Distance : 10

16
Tree	return isEquals ;
Code	return isEquals ;
Distance : 10

17
Tree	return getSizes ;
Code	return getSizes ;
Distance : 10

18
Tree	return ModifyType.ROUND ;
Code	return ModifyType.ROUND ;
Distance : 10

19
Tree	return outcome.booleanValues ;
Code	return outcome.booleanValues ;
Distance : 10

20
Tree	return pname ;
Code	return pname ;
Distance : 10

21
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 10

22
Tree	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Code	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Distance : 10

23
Tree	return MultivariateVectorFunction ;
Code	return MultivariateVectorFunction ;
Distance : 10

24
Tree	return categoryMargin ;
Code	return categoryMargin ;
Distance : 10

25
Tree	return VECTOR_LENGTHS_MISMATCH ;
Code	return VECTOR_LENGTHS_MISMATCH ;
Distance : 10

26
Tree	return parameters ;
Code	return parameters ;
Distance : 10

27
Tree	return serial ;
Code	return serial ;
Distance : 10

28
Tree	return noStubFunctions ;
Code	return noStubFunctions ;
Distance : 10

29
Tree	return isInferred ;
Code	return isInferred ;
Distance : 10

30
Tree	return mocksToBeVerifiedInOrder ;
Code	return mocksToBeVerifiedInOrder ;
Distance : 10

31
Tree	return %= ;
Code	return %= ;
Distance : 10

32
Tree	return incompletePaint ;
Code	return incompletePaint ;
Distance : 10

33
Tree	return jsType ;
Code	return jsType ;
Distance : 10

34
Tree	return Token ;
Code	return Token ;
Distance : 10

35
Tree	return AxisLocation ;
Code	return AxisLocation ;
Distance : 10

36
Tree	return epsilon ;
Code	return epsilon ;
Distance : 10

37
Tree	return int ;
Code	return int ;
Distance : 10

38
Tree	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Code	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Distance : 10

39
Tree	return firstNonNull ;
Code	return firstNonNull ;
Distance : 10

40
Tree	return nullSafeGet ;
Code	return nullSafeGet ;
Distance : 10

41
Tree	return unflowable ;
Code	return unflowable ;
Distance : 10

42
Tree	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Code	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Distance : 10

43
Tree	return minimum ;
Code	return minimum ;
Distance : 10

44
Tree	return another ;
Code	return another ;
Distance : 10

45
Tree	return ExtendedMessageFormat ;
Code	return ExtendedMessageFormat ;
Distance : 10

46
Tree	return updateTypeOfArguments ;
Code	return updateTypeOfArguments ;
Distance : 10

47
Tree	return jacobian.length ;
Code	return jacobian.length ;
Distance : 10

48
Tree	return RandomSource.WELL_19937_C ;
Code	return RandomSource.WELL_19937_C ;
Distance : 10

49
Tree	return mode ;
Code	return mode ;
Distance : 10

50
Tree	return NoMoreInvocationsVerifier ;
Code	return NoMoreInvocationsVerifier ;
Distance : 10

51
Tree	return NormalDistribution ;
Code	return NormalDistribution ;
Distance : 10

52
Tree	return testArrowFunction3 ;
Code	return testArrowFunction3 ;
Distance : 10

53
Tree	return WEEKS ;
Code	return WEEKS ;
Distance : 10

54
Tree	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

55
Tree	return DateTimeParser ;
Code	return DateTimeParser ;
Distance : 10

56
Tree	return shouldPreservesGoogProvidesAndRequires ;
Code	return shouldPreservesGoogProvidesAndRequires ;
Distance : 10

57
Tree	return scaled ;
Code	return scaled ;
Distance : 10

58
Tree	return tokenLen ;
Code	return tokenLen ;
Distance : 10

59
Tree	return DEFAULT_ULPS ;
Code	return DEFAULT_ULPS ;
Distance : 10

60
Tree	return Set ;
Code	return Set ;
Distance : 10

61
Tree	return nvars ;
Code	return nvars ;
Distance : 10

62
Tree	return <= ;
Code	return <= ;
Distance : 10

63
Tree	return applySingletonGetter ;
Code	return applySingletonGetter ;
Distance : 10

64
Tree	return InOrderWrapper ;
Code	return InOrderWrapper ;
Distance : 10

65
Tree	return LiveVariablesAnalysis ;
Code	return LiveVariablesAnalysis ;
Distance : 10

66
Tree	return JAVA_1_5 ;
Code	return JAVA_1_5 ;
Distance : 10

67
Tree	return MemoizedTypedScopeCreator ;
Code	return MemoizedTypedScopeCreator ;
Distance : 10

68
Tree	return actualMethod ;
Code	return actualMethod ;
Distance : 10

69
Tree	return newPropType ;
Code	return newPropType ;
Distance : 10

70
Tree	return wantedInvocationCount ;
Code	return wantedInvocationCount ;
Distance : 10

71
Tree	return ARROW_FN ;
Code	return ARROW_FN ;
Distance : 10

72
Tree	return retType ;
Code	return retType ;
Distance : 10

73
Tree	return charMatcher ;
Code	return charMatcher ;
Distance : 10

74
Tree	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Code	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Distance : 10

75
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 10

76
Tree	return hasDuplicateDeclarationSuppression ;
Code	return hasDuplicateDeclarationSuppression ;
Distance : 10

77
Tree	return isSubtypeOfHelper ;
Code	return isSubtypeOfHelper ;
Distance : 10

78
Tree	return YIntervalRenderer ;
Code	return YIntervalRenderer ;
Distance : 10

79
Tree	return s2 ;
Code	return s2 ;
Distance : 10

80
Tree	return anchorUnusedVars ;
Code	return anchorUnusedVars ;
Distance : 10

81
Tree	return foundSize ;
Code	return foundSize ;
Distance : 10

82
Tree	return testNotConstantArgument ;
Code	return testNotConstantArgument ;
Distance : 10

83
Tree	return nullOrUndefined ;
Code	return nullOrUndefined ;
Distance : 10

84
Tree	return recvType ;
Code	return recvType ;
Distance : 10

85
Tree	return declaredType ;
Code	return declaredType ;
Distance : 10

86
Tree	return firstChunk ;
Code	return firstChunk ;
Distance : 10

87
Tree	return TestObject ;
Code	return TestObject ;
Distance : 10

88
Tree	return GaussianRandomGenerator ;
Code	return GaussianRandomGenerator ;
Distance : 10

89
Tree	return compare ;
Code	return compare ;
Distance : 10

90
Tree	return newClusters ;
Code	return newClusters ;
Distance : 10

91
Tree	return boolean ;
Code	return boolean ;
Distance : 10

92
Tree	return thiz ;
Code	return thiz ;
Distance : 10

93
Tree	return SubChord ;
Code	return SubChord ;
Distance : 10

94
Tree	return verificationMode ;
Code	return verificationMode ;
Distance : 10

95
Tree	return CharSet ;
Code	return CharSet ;
Distance : 10

96
Tree	return ? ;
Code	return ? ;
Distance : 10

97
Tree	return getPollingPeriod ;
Code	return getPollingPeriod ;
Distance : 10

98
Tree	return residuals ;
Code	return residuals ;
Distance : 10

99
Tree	return propType ;
Code	return propType ;
Distance : 10

100
Tree	return preserveClosurePrimitives ;
Code	return preserveClosurePrimitives ;
Distance : 10

101
Tree	return MyComparableObjectSeries ;
Code	return MyComparableObjectSeries ;
Distance : 10

102
Tree	return delimiters.length ;
Code	return delimiters.length ;
Distance : 10

103
Tree	return matchingMock ;
Code	return matchingMock ;
Distance : 10

104
Tree	return modType ;
Code	return modType ;
Distance : 10

105
Tree	return Stroke ;
Code	return Stroke ;
Distance : 10

106
Tree	return ignored ;
Code	return ignored ;
Distance : 10

107
Tree	return delimLen ;
Code	return delimLen ;
Distance : 10

108
Tree	return mapper ;
Code	return mapper ;
Distance : 10

109
Tree	return MODIFY_TRUNCATE ;
Code	return MODIFY_TRUNCATE ;
Distance : 10

110
Tree	return ak2 ;
Code	return ak2 ;
Distance : 10

111
Tree	return targetType ;
Code	return targetType ;
Distance : 10

112
Tree	return missingMethodMode ;
Code	return missingMethodMode ;
Distance : 10

113
Tree	return testTransients ;
Code	return testTransients ;
Distance : 10

114
Tree	return declType ;
Code	return declType ;
Distance : 10

115
Tree	return instant ;
Code	return instant ;
Distance : 9

116
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

117
Tree	return byte ;
Code	return byte ;
Distance : 10

118
Tree	return Comparable ;
Code	return Comparable ;
Distance : 10

119
Tree	return localInstant ;
Code	return localInstant ;
Distance : 9

120
Tree	return preserveGoogProvidesAndRequires ;
Code	return preserveGoogProvidesAndRequires ;
Distance : 10

121
Tree	return columnDimension ;
Code	return columnDimension ;
Distance : 10

122
Tree	return voidType ;
Code	return voidType ;
Distance : 10

123
Tree	return K ;
Code	return K ;
Distance : 10

124
Tree	return O ;
Code	return O ;
Distance : 10

125
Tree	return firstChar ;
Code	return firstChar ;
Distance : 10

126
Tree	return TypeI ;
Code	return TypeI ;
Distance : 10

127
Tree	return normProduct ;
Code	return normProduct ;
Distance : 10

128
Tree	return instance ;
Code	return instance ;
Distance : 10

129
Tree	return ! ;
Code	return ! ;
Distance : 10

130
Tree	return null ;
Code	return null ;
Distance : 10

131
Tree	return - ;
Code	return - ;
Distance : 10

132
Tree	return >= ;
Code	return >= ;
Distance : 10

133
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 10

134
Tree	return delimiters ;
Code	return delimiters ;
Distance : 10

135
Tree	return before ;
Code	return before ;
Distance : 10

136
Tree	return populationLimit ;
Code	return populationLimit ;
Distance : 10

137
Tree	return != ;
Code	return != ;
Distance : 10

138
Tree	return strategy ;
Code	return strategy ;
Distance : 10

139
Tree	return Builder ;
Code	return Builder ;
Distance : 10

140
Tree	return convertLocalToUTC ;
Code	return convertLocalToUTC ;
Distance : 9

141
Tree	return p1c ;
Code	return p1c ;
Distance : 10

142
Tree	return TimePeriodValue ;
Code	return TimePeriodValue ;
Distance : 10

143
Tree	return removeLen ;
Code	return removeLen ;
Distance : 10

144
Tree	return Null.NULL ;
Code	return Null.NULL ;
Distance : 10

145
Tree	return OngoingVerifyingMode ;
Code	return OngoingVerifyingMode ;
Distance : 10

146
Tree	return iZone ;
Code	return iZone ;
Distance : 9

147
Tree	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Distance : 10

148
Tree	return itimeStyle ;
Code	return itimeStyle ;
Distance : 10

149
Tree	return outData ;
Code	return outData ;
Distance : 10

150
Tree	return iElementPairs ;
Code	return iElementPairs ;
Distance : 10

151
Tree	return ChartPanel ;
Code	return ChartPanel ;
Distance : 10

152
Tree	return maximum ;
Code	return maximum ;
Distance : 10

153
Tree	return iObjectIndexTemplateKey ;
Code	return iObjectIndexTemplateKey ;
Distance : 10

154
Tree	return low ;
Code	return low ;
Distance : 10

155
Tree	return ignoredMatcher ;
Code	return ignoredMatcher ;
Distance : 10

156
Tree	return icon ;
Code	return icon ;
Distance : 10

157
Tree	return synchronized ;
Code	return synchronized ;
Distance : 10

158
Tree	return foundType ;
Code	return foundType ;
Distance : 10

159
Tree	return delimMatcher ;
Code	return delimMatcher ;
Distance : 10

160
Tree	return cols ;
Code	return cols ;
Distance : 10

161
Tree	return testClassPropUnused1 ;
Code	return testClassPropUnused1 ;
Distance : 10

162
Tree	return throwableClass ;
Code	return throwableClass ;
Distance : 10

163
Tree	return rowDimension ;
Code	return rowDimension ;
Distance : 10

164
Tree	return comparator ;
Code	return comparator ;
Distance : 10

165
Tree	return Graphics2D ;
Code	return Graphics2D ;
Distance : 10

166
Tree	return field ;
Code	return field ;
Distance : 10

167
Tree	return -= ;
Code	return -= ;
Distance : 10

168
Tree	return funType ;
Code	return funType ;
Distance : 10

169
Tree	return &= ;
Code	return &= ;
Distance : 10

170
Tree	return typeMap ;
Code	return typeMap ;
Distance : 10

171
Tree	return DEFAULT_CUT_OFF ;
Code	return DEFAULT_CUT_OFF ;
Distance : 10

172
Tree	return xInt ;
Code	return xInt ;
Distance : 10

173
Tree	return one ;
Code	return one ;
Distance : 10

174
Tree	return margin ;
Code	return margin ;
Distance : 10

175
Tree	return RemoveUnusedClassPropertiesTest ;
Code	return RemoveUnusedClassPropertiesTest ;
Distance : 10

176
Tree	return StandardBasicTypes.TIMESTAMP ;
Code	return StandardBasicTypes.TIMESTAMP ;
Distance : 10

177
Tree	return extends ;
Code	return extends ;
Distance : 10

178
Tree	return typeToMock ;
Code	return typeToMock ;
Distance : 10

179
Tree	return isAllType ;
Code	return isAllType ;
Distance : 10

180
Tree	return JAVA_1_4 ;
Code	return JAVA_1_4 ;
Distance : 10

181
Tree	return actualValue ;
Code	return actualValue ;
Distance : 10

182
Tree	return continue; ;
Code	return continue; ;
Distance : 10

183
Tree	return JSTypeNative.NO_OBJECT_TYPE ;
Code	return JSTypeNative.NO_OBJECT_TYPE ;
Distance : 10

184
Tree	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

185
Tree	return minorTickCount ;
Code	return minorTickCount ;
Distance : 10

186
Tree	return RELAX ;
Code	return RELAX ;
Distance : 10

187
Tree	return DUPLICATE_REQUIRE ;
Code	return DUPLICATE_REQUIRE ;
Distance : 10

188
Tree	return returnValues ;
Code	return returnValues ;
Distance : 10

189
Tree	return transformer ;
Code	return transformer ;
Distance : 10

190
Tree	return ModifyType.TRUNCATE ;
Code	return ModifyType.TRUNCATE ;
Distance : 10

191
Tree	return TestSubObject ;
Code	return TestSubObject ;
Distance : 10

192
Tree	return newSourceInd ;
Code	return newSourceInd ;
Distance : 10

193
Tree	return InlineVariablesConstantsTest ;
Code	return InlineVariablesConstantsTest ;
Distance : 10

194
Tree	return appendField ;
Code	return appendField ;
Distance : 10

195
Tree	return bitIndex ;
Code	return bitIndex ;
Distance : 10

196
Tree	return Type ;
Code	return Type ;
Distance : 10

197
Tree	return UnitSphereSampler ;
Code	return UnitSphereSampler ;
Distance : 10

198
Tree	return lastWasGap ;
Code	return lastWasGap ;
Distance : 10

199
Tree	return occurrences ;
Code	return occurrences ;
Distance : 10

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 9

1
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 10

2
Tree	return setDefaultPaint ;
Code	return setDefaultPaint ;
Distance : 10

3
Tree	return doSlicing ;
Code	return doSlicing ;
Distance : 10

4
Tree	return SystemUtils ;
Code	return SystemUtils ;
Distance : 10

5
Tree	return toInspect ;
Code	return toInspect ;
Distance : 10

6
Tree	return for ;
Code	return for ;
Distance : 10

7
Tree	return assert ;
Code	return assert ;
Distance : 10

8
Tree	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Distance : 10

9
Tree	return Object ;
Code	return Object ;
Distance : 10

10
Tree	return toRemove ;
Code	return toRemove ;
Distance : 10

11
Tree	return maybeThisType ;
Code	return maybeThisType ;
Distance : 10

12
Tree	return OtherClass ;
Code	return OtherClass ;
Distance : 10

13
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 10

14
Tree	return canModifyExterns ;
Code	return canModifyExterns ;
Distance : 10

15
Tree	return FALSE ;
Code	return FALSE ;
Distance : 10

16
Tree	return isEquals ;
Code	return isEquals ;
Distance : 10

17
Tree	return getSizes ;
Code	return getSizes ;
Distance : 10

18
Tree	return ModifyType.ROUND ;
Code	return ModifyType.ROUND ;
Distance : 10

19
Tree	return outcome.booleanValues ;
Code	return outcome.booleanValues ;
Distance : 10

20
Tree	return pname ;
Code	return pname ;
Distance : 10

21
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 10

22
Tree	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Code	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Distance : 10

23
Tree	return MultivariateVectorFunction ;
Code	return MultivariateVectorFunction ;
Distance : 10

24
Tree	return categoryMargin ;
Code	return categoryMargin ;
Distance : 10

25
Tree	return VECTOR_LENGTHS_MISMATCH ;
Code	return VECTOR_LENGTHS_MISMATCH ;
Distance : 10

26
Tree	return parameters ;
Code	return parameters ;
Distance : 10

27
Tree	return serial ;
Code	return serial ;
Distance : 10

28
Tree	return noStubFunctions ;
Code	return noStubFunctions ;
Distance : 10

29
Tree	return isInferred ;
Code	return isInferred ;
Distance : 10

30
Tree	return mocksToBeVerifiedInOrder ;
Code	return mocksToBeVerifiedInOrder ;
Distance : 10

31
Tree	return %= ;
Code	return %= ;
Distance : 10

32
Tree	return incompletePaint ;
Code	return incompletePaint ;
Distance : 10

33
Tree	return jsType ;
Code	return jsType ;
Distance : 10

34
Tree	return Token ;
Code	return Token ;
Distance : 10

35
Tree	return AxisLocation ;
Code	return AxisLocation ;
Distance : 10

36
Tree	return epsilon ;
Code	return epsilon ;
Distance : 10

37
Tree	return int ;
Code	return int ;
Distance : 10

38
Tree	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Code	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Distance : 10

39
Tree	return firstNonNull ;
Code	return firstNonNull ;
Distance : 10

40
Tree	return nullSafeGet ;
Code	return nullSafeGet ;
Distance : 10

41
Tree	return unflowable ;
Code	return unflowable ;
Distance : 10

42
Tree	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Code	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Distance : 10

43
Tree	return minimum ;
Code	return minimum ;
Distance : 10

44
Tree	return another ;
Code	return another ;
Distance : 10

45
Tree	return ExtendedMessageFormat ;
Code	return ExtendedMessageFormat ;
Distance : 10

46
Tree	return updateTypeOfArguments ;
Code	return updateTypeOfArguments ;
Distance : 10

47
Tree	return jacobian.length ;
Code	return jacobian.length ;
Distance : 10

48
Tree	return RandomSource.WELL_19937_C ;
Code	return RandomSource.WELL_19937_C ;
Distance : 10

49
Tree	return mode ;
Code	return mode ;
Distance : 10

50
Tree	return NoMoreInvocationsVerifier ;
Code	return NoMoreInvocationsVerifier ;
Distance : 10

51
Tree	return NormalDistribution ;
Code	return NormalDistribution ;
Distance : 10

52
Tree	return testArrowFunction3 ;
Code	return testArrowFunction3 ;
Distance : 10

53
Tree	return WEEKS ;
Code	return WEEKS ;
Distance : 10

54
Tree	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

55
Tree	return DateTimeParser ;
Code	return DateTimeParser ;
Distance : 10

56
Tree	return shouldPreservesGoogProvidesAndRequires ;
Code	return shouldPreservesGoogProvidesAndRequires ;
Distance : 10

57
Tree	return scaled ;
Code	return scaled ;
Distance : 10

58
Tree	return tokenLen ;
Code	return tokenLen ;
Distance : 10

59
Tree	return DEFAULT_ULPS ;
Code	return DEFAULT_ULPS ;
Distance : 10

60
Tree	return Set ;
Code	return Set ;
Distance : 10

61
Tree	return nvars ;
Code	return nvars ;
Distance : 10

62
Tree	return <= ;
Code	return <= ;
Distance : 10

63
Tree	return applySingletonGetter ;
Code	return applySingletonGetter ;
Distance : 10

64
Tree	return InOrderWrapper ;
Code	return InOrderWrapper ;
Distance : 10

65
Tree	return LiveVariablesAnalysis ;
Code	return LiveVariablesAnalysis ;
Distance : 10

66
Tree	return JAVA_1_5 ;
Code	return JAVA_1_5 ;
Distance : 10

67
Tree	return MemoizedTypedScopeCreator ;
Code	return MemoizedTypedScopeCreator ;
Distance : 10

68
Tree	return actualMethod ;
Code	return actualMethod ;
Distance : 10

69
Tree	return newPropType ;
Code	return newPropType ;
Distance : 10

70
Tree	return wantedInvocationCount ;
Code	return wantedInvocationCount ;
Distance : 10

71
Tree	return ARROW_FN ;
Code	return ARROW_FN ;
Distance : 10

72
Tree	return retType ;
Code	return retType ;
Distance : 10

73
Tree	return charMatcher ;
Code	return charMatcher ;
Distance : 10

74
Tree	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Code	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Distance : 10

75
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 10

76
Tree	return hasDuplicateDeclarationSuppression ;
Code	return hasDuplicateDeclarationSuppression ;
Distance : 10

77
Tree	return isSubtypeOfHelper ;
Code	return isSubtypeOfHelper ;
Distance : 10

78
Tree	return YIntervalRenderer ;
Code	return YIntervalRenderer ;
Distance : 10

79
Tree	return s2 ;
Code	return s2 ;
Distance : 10

80
Tree	return anchorUnusedVars ;
Code	return anchorUnusedVars ;
Distance : 10

81
Tree	return foundSize ;
Code	return foundSize ;
Distance : 10

82
Tree	return testNotConstantArgument ;
Code	return testNotConstantArgument ;
Distance : 10

83
Tree	return nullOrUndefined ;
Code	return nullOrUndefined ;
Distance : 10

84
Tree	return recvType ;
Code	return recvType ;
Distance : 10

85
Tree	return declaredType ;
Code	return declaredType ;
Distance : 10

86
Tree	return firstChunk ;
Code	return firstChunk ;
Distance : 10

87
Tree	return TestObject ;
Code	return TestObject ;
Distance : 10

88
Tree	return GaussianRandomGenerator ;
Code	return GaussianRandomGenerator ;
Distance : 10

89
Tree	return compare ;
Code	return compare ;
Distance : 10

90
Tree	return newClusters ;
Code	return newClusters ;
Distance : 10

91
Tree	return boolean ;
Code	return boolean ;
Distance : 10

92
Tree	return thiz ;
Code	return thiz ;
Distance : 10

93
Tree	return SubChord ;
Code	return SubChord ;
Distance : 10

94
Tree	return verificationMode ;
Code	return verificationMode ;
Distance : 10

95
Tree	return CharSet ;
Code	return CharSet ;
Distance : 10

96
Tree	return ? ;
Code	return ? ;
Distance : 10

97
Tree	return getPollingPeriod ;
Code	return getPollingPeriod ;
Distance : 10

98
Tree	return residuals ;
Code	return residuals ;
Distance : 10

99
Tree	return propType ;
Code	return propType ;
Distance : 10

100
Tree	return preserveClosurePrimitives ;
Code	return preserveClosurePrimitives ;
Distance : 10

101
Tree	return MyComparableObjectSeries ;
Code	return MyComparableObjectSeries ;
Distance : 10

102
Tree	return delimiters.length ;
Code	return delimiters.length ;
Distance : 10

103
Tree	return matchingMock ;
Code	return matchingMock ;
Distance : 10

104
Tree	return modType ;
Code	return modType ;
Distance : 10

105
Tree	return Stroke ;
Code	return Stroke ;
Distance : 10

106
Tree	return ignored ;
Code	return ignored ;
Distance : 10

107
Tree	return delimLen ;
Code	return delimLen ;
Distance : 10

108
Tree	return mapper ;
Code	return mapper ;
Distance : 10

109
Tree	return MODIFY_TRUNCATE ;
Code	return MODIFY_TRUNCATE ;
Distance : 10

110
Tree	return ak2 ;
Code	return ak2 ;
Distance : 10

111
Tree	return targetType ;
Code	return targetType ;
Distance : 10

112
Tree	return missingMethodMode ;
Code	return missingMethodMode ;
Distance : 10

113
Tree	return testTransients ;
Code	return testTransients ;
Distance : 10

114
Tree	return declType ;
Code	return declType ;
Distance : 10

115
Tree	return instant ;
Code	return instant ;
Distance : 9

116
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

117
Tree	return byte ;
Code	return byte ;
Distance : 10

118
Tree	return Comparable ;
Code	return Comparable ;
Distance : 10

119
Tree	return localInstant ;
Code	return localInstant ;
Distance : 9

120
Tree	return preserveGoogProvidesAndRequires ;
Code	return preserveGoogProvidesAndRequires ;
Distance : 10

121
Tree	return columnDimension ;
Code	return columnDimension ;
Distance : 10

122
Tree	return voidType ;
Code	return voidType ;
Distance : 10

123
Tree	return K ;
Code	return K ;
Distance : 10

124
Tree	return O ;
Code	return O ;
Distance : 10

125
Tree	return firstChar ;
Code	return firstChar ;
Distance : 10

126
Tree	return TypeI ;
Code	return TypeI ;
Distance : 10

127
Tree	return normProduct ;
Code	return normProduct ;
Distance : 10

128
Tree	return instance ;
Code	return instance ;
Distance : 10

129
Tree	return ! ;
Code	return ! ;
Distance : 10

130
Tree	return null ;
Code	return null ;
Distance : 10

131
Tree	return - ;
Code	return - ;
Distance : 10

132
Tree	return >= ;
Code	return >= ;
Distance : 10

133
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 10

134
Tree	return delimiters ;
Code	return delimiters ;
Distance : 10

135
Tree	return before ;
Code	return before ;
Distance : 10

136
Tree	return populationLimit ;
Code	return populationLimit ;
Distance : 10

137
Tree	return != ;
Code	return != ;
Distance : 10

138
Tree	return strategy ;
Code	return strategy ;
Distance : 10

139
Tree	return Builder ;
Code	return Builder ;
Distance : 10

140
Tree	return convertLocalToUTC ;
Code	return convertLocalToUTC ;
Distance : 9

141
Tree	return p1c ;
Code	return p1c ;
Distance : 10

142
Tree	return TimePeriodValue ;
Code	return TimePeriodValue ;
Distance : 10

143
Tree	return removeLen ;
Code	return removeLen ;
Distance : 10

144
Tree	return Null.NULL ;
Code	return Null.NULL ;
Distance : 10

145
Tree	return OngoingVerifyingMode ;
Code	return OngoingVerifyingMode ;
Distance : 10

146
Tree	return iZone ;
Code	return iZone ;
Distance : 9

147
Tree	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Distance : 10

148
Tree	return itimeStyle ;
Code	return itimeStyle ;
Distance : 10

149
Tree	return outData ;
Code	return outData ;
Distance : 10

150
Tree	return iElementPairs ;
Code	return iElementPairs ;
Distance : 10

151
Tree	return ChartPanel ;
Code	return ChartPanel ;
Distance : 10

152
Tree	return maximum ;
Code	return maximum ;
Distance : 10

153
Tree	return iObjectIndexTemplateKey ;
Code	return iObjectIndexTemplateKey ;
Distance : 10

154
Tree	return low ;
Code	return low ;
Distance : 10

155
Tree	return ignoredMatcher ;
Code	return ignoredMatcher ;
Distance : 10

156
Tree	return icon ;
Code	return icon ;
Distance : 10

157
Tree	return synchronized ;
Code	return synchronized ;
Distance : 10

158
Tree	return foundType ;
Code	return foundType ;
Distance : 10

159
Tree	return delimMatcher ;
Code	return delimMatcher ;
Distance : 10

160
Tree	return cols ;
Code	return cols ;
Distance : 10

161
Tree	return testClassPropUnused1 ;
Code	return testClassPropUnused1 ;
Distance : 10

162
Tree	return throwableClass ;
Code	return throwableClass ;
Distance : 10

163
Tree	return rowDimension ;
Code	return rowDimension ;
Distance : 10

164
Tree	return comparator ;
Code	return comparator ;
Distance : 10

165
Tree	return Graphics2D ;
Code	return Graphics2D ;
Distance : 10

166
Tree	return field ;
Code	return field ;
Distance : 10

167
Tree	return -= ;
Code	return -= ;
Distance : 10

168
Tree	return funType ;
Code	return funType ;
Distance : 10

169
Tree	return &= ;
Code	return &= ;
Distance : 10

170
Tree	return typeMap ;
Code	return typeMap ;
Distance : 10

171
Tree	return DEFAULT_CUT_OFF ;
Code	return DEFAULT_CUT_OFF ;
Distance : 10

172
Tree	return xInt ;
Code	return xInt ;
Distance : 10

173
Tree	return one ;
Code	return one ;
Distance : 10

174
Tree	return margin ;
Code	return margin ;
Distance : 10

175
Tree	return RemoveUnusedClassPropertiesTest ;
Code	return RemoveUnusedClassPropertiesTest ;
Distance : 10

176
Tree	return StandardBasicTypes.TIMESTAMP ;
Code	return StandardBasicTypes.TIMESTAMP ;
Distance : 10

177
Tree	return extends ;
Code	return extends ;
Distance : 10

178
Tree	return typeToMock ;
Code	return typeToMock ;
Distance : 10

179
Tree	return isAllType ;
Code	return isAllType ;
Distance : 10

180
Tree	return JAVA_1_4 ;
Code	return JAVA_1_4 ;
Distance : 10

181
Tree	return actualValue ;
Code	return actualValue ;
Distance : 10

182
Tree	return continue; ;
Code	return continue; ;
Distance : 10

183
Tree	return JSTypeNative.NO_OBJECT_TYPE ;
Code	return JSTypeNative.NO_OBJECT_TYPE ;
Distance : 10

184
Tree	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

185
Tree	return minorTickCount ;
Code	return minorTickCount ;
Distance : 10

186
Tree	return RELAX ;
Code	return RELAX ;
Distance : 10

187
Tree	return DUPLICATE_REQUIRE ;
Code	return DUPLICATE_REQUIRE ;
Distance : 10

188
Tree	return returnValues ;
Code	return returnValues ;
Distance : 10

189
Tree	return transformer ;
Code	return transformer ;
Distance : 10

190
Tree	return ModifyType.TRUNCATE ;
Code	return ModifyType.TRUNCATE ;
Distance : 10

191
Tree	return TestSubObject ;
Code	return TestSubObject ;
Distance : 10

192
Tree	return newSourceInd ;
Code	return newSourceInd ;
Distance : 10

193
Tree	return InlineVariablesConstantsTest ;
Code	return InlineVariablesConstantsTest ;
Distance : 10

194
Tree	return appendField ;
Code	return appendField ;
Distance : 10

195
Tree	return bitIndex ;
Code	return bitIndex ;
Distance : 10

196
Tree	return Type ;
Code	return Type ;
Distance : 10

197
Tree	return UnitSphereSampler ;
Code	return UnitSphereSampler ;
Distance : 10

198
Tree	return lastWasGap ;
Code	return lastWasGap ;
Distance : 10

199
Tree	return occurrences ;
Code	return occurrences ;
Distance : 10

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

1
Tree	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

2
Tree	long result = result . convertLocalToUTC ( localInstant , false ) ;
Code	long result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

4
Tree	long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

5
Tree	long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

6
Tree	int result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

7
Tree	char result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	char result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

8
Tree	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

9
Tree	long instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

10
Tree	long result = result . convertLocalToUTC ( instant , false ) ;
Code	long result = result . convertLocalToUTC ( instant , false ) ;
Distance : 4

11
Tree	boolean result = iZone . convertLocalToUTC ( instant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

12
Tree	long result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 3

13
Tree	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

14
Tree	long result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	long result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 4

15
Tree	long iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	long iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

16
Tree	int result = iZone . convertLocalToUTC ( instant , false ) ;
Code	int result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

17
Tree	byte result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

18
Tree	char result = iZone . convertLocalToUTC ( instant , false ) ;
Code	char result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

19
Tree	long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	short result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	short result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

21
Tree	void result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	void result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	long result = iZone . convertLocalToUTC ( instant , false ) ;
Code	long result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

23
Tree	int result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	int result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

24
Tree	long result = instant . convertLocalToUTC ( instant , false ) ;
Code	long result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 4

25
Tree	long result = instant . convertLocalToUTC ( iZone , false ) ;
Code	long result = instant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

26
Tree	double result = iZone . convertLocalToUTC ( instant , false ) ;
Code	double result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

27
Tree	float result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	float result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

28
Tree	byte result = iZone . convertLocalToUTC ( instant , false ) ;
Code	byte result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

29
Tree	long localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Code	long localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

30
Tree	short result = iZone . convertLocalToUTC ( instant , false ) ;
Code	short result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

31
Tree	void result = iZone . convertLocalToUTC ( instant , false ) ;
Code	void result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

32
Tree	long result = result . convertLocalToUTC ( iZone , false ) ;
Code	long result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 4

33
Tree	boolean result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

34
Tree	boolean result = result . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

35
Tree	long result = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	long result = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 4

36
Tree	long iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

37
Tree	long iZone = result . convertLocalToUTC ( localInstant , false ) ;
Code	long iZone = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

38
Tree	float result = iZone . convertLocalToUTC ( instant , false ) ;
Code	float result = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

39
Tree	int result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	int result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

40
Tree	int result = result . convertLocalToUTC ( localInstant , false ) ;
Code	int result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

41
Tree	char result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	char result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

42
Tree	char result = result . convertLocalToUTC ( localInstant , false ) ;
Code	char result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

43
Tree	boolean result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

44
Tree	boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

45
Tree	long iZone = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long iZone = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

46
Tree	long result = iZone . convertLocalToUTC ( result , false ) ;
Code	long result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 3

47
Tree	long instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	long instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 4

48
Tree	long result = iZone . convertLocalToUTC ( instant , true ) ;
Code	long result = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 4

49
Tree	int iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

50
Tree	double result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	double result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

51
Tree	boolean result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

52
Tree	long instant = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long instant = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

53
Tree	long instant = result . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

54
Tree	long iZone = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long iZone = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

55
Tree	int result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	int result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

56
Tree	char result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	char result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

57
Tree	boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

58
Tree	boolean result = result . convertLocalToUTC ( instant , false ) ;
Code	boolean result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

59
Tree	long result = iZone . convertLocalToUTC ( iZone , true ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , true ) ;
Distance : 4

60
Tree	short result = iZone . convertLocalToUTC ( result , false ) ;
Code	short result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

61
Tree	double result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	double result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

62
Tree	double result = result . convertLocalToUTC ( localInstant , false ) ;
Code	double result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

63
Tree	long instant = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

64
Tree	long iZone = result . convertLocalToUTC ( instant , false ) ;
Code	long iZone = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

65
Tree	int instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

66
Tree	byte result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	byte result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

67
Tree	int result = result . convertLocalToUTC ( instant , false ) ;
Code	int result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

68
Tree	char instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	char instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

69
Tree	byte result = result . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

70
Tree	char result = result . convertLocalToUTC ( instant , false ) ;
Code	char result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

71
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

72
Tree	char iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	char iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

73
Tree	char result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	char result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

74
Tree	boolean result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	boolean result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

75
Tree	long result = localInstant . convertLocalToUTC ( localInstant , true ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

76
Tree	long localInstant = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long localInstant = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

77
Tree	double iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

78
Tree	long localInstant = result . convertLocalToUTC ( localInstant , false ) ;
Code	long localInstant = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

79
Tree	int result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	int result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

80
Tree	short result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	short result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

81
Tree	short result = result . convertLocalToUTC ( localInstant , false ) ;
Code	short result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

82
Tree	long instant = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long instant = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

83
Tree	long iZone = localInstant . convertLocalToUTC ( instant , false ) ;
Code	long iZone = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

84
Tree	char result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	char result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

85
Tree	int result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	int result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

86
Tree	void result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	void result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

87
Tree	void result = result . convertLocalToUTC ( localInstant , false ) ;
Code	void result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

88
Tree	int iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	int iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

89
Tree	byte result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

90
Tree	char result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	char result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

91
Tree	byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

92
Tree	char iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	char iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

93
Tree	boolean localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

94
Tree	boolean result = instant . convertLocalToUTC ( instant , false ) ;
Code	boolean result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

95
Tree	long instant = result . convertLocalToUTC ( instant , false ) ;
Code	long instant = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

96
Tree	long iZone = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	long iZone = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

97
Tree	boolean iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	boolean iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

98
Tree	long result = instant . convertLocalToUTC ( localInstant , true ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

99
Tree	long localInstant = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	long localInstant = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

100
Tree	double result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	double result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

101
Tree	short result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	short result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

102
Tree	int localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	int localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

103
Tree	short iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	short iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

104
Tree	long iZone = instant . convertLocalToUTC ( instant , false ) ;
Code	long iZone = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

105
Tree	char localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	char localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

106
Tree	void result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	void result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

107
Tree	void iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	void iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

108
Tree	int result = instant . convertLocalToUTC ( instant , false ) ;
Code	int result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

109
Tree	char result = instant . convertLocalToUTC ( instant , false ) ;
Code	char result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

110
Tree	byte result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

111
Tree	boolean instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	boolean instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

112
Tree	double instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

113
Tree	long instant = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	long instant = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

114
Tree	boolean result = iZone . convertLocalToUTC ( result , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

115
Tree	long result = result . convertLocalToUTC ( instant , true ) ;
Code	long result = result . convertLocalToUTC ( instant , true ) ;
Distance : 5

116
Tree	double result = result . convertLocalToUTC ( instant , false ) ;
Code	double result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

117
Tree	long instant = localInstant . convertLocalToUTC ( instant , false ) ;
Code	long instant = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

118
Tree	float result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	float result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

119
Tree	long result = localInstant . convertLocalToUTC ( result , false ) ;
Code	long result = localInstant . convertLocalToUTC ( result , false ) ;
Distance : 4

120
Tree	float result = result . convertLocalToUTC ( localInstant , false ) ;
Code	float result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

121
Tree	long localInstant = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long localInstant = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

122
Tree	int instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	int instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

123
Tree	long iZone = iZone . convertLocalToUTC ( result , false ) ;
Code	long iZone = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

124
Tree	short result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	short result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

125
Tree	byte instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	byte instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

126
Tree	char instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	char instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

127
Tree	int result = iZone . convertLocalToUTC ( result , false ) ;
Code	int result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

128
Tree	byte result = result . convertLocalToUTC ( instant , false ) ;
Code	byte result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

129
Tree	boolean result = iZone . convertLocalToUTC ( instant , true ) ;
Code	boolean result = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

130
Tree	char result = iZone . convertLocalToUTC ( result , false ) ;
Code	char result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

131
Tree	void result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	void result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

132
Tree	double result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

133
Tree	long result = localInstant . convertLocalToUTC ( instant , true ) ;
Code	long result = localInstant . convertLocalToUTC ( instant , true ) ;
Distance : 5

134
Tree	long iZone = iZone . convertLocalToUTC ( instant , true ) ;
Code	long iZone = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

135
Tree	double result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	double result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

136
Tree	double iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	double iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

137
Tree	long localInstant = result . convertLocalToUTC ( instant , false ) ;
Code	long localInstant = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

138
Tree	int result = iZone . convertLocalToUTC ( instant , true ) ;
Code	int result = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

139
Tree	long instant = instant . convertLocalToUTC ( instant , false ) ;
Code	long instant = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

140
Tree	short result = result . convertLocalToUTC ( instant , false ) ;
Code	short result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

141
Tree	byte result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	byte result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

142
Tree	short instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	short instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

143
Tree	float result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	float result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

144
Tree	char result = iZone . convertLocalToUTC ( instant , true ) ;
Code	char result = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

145
Tree	float iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	float iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

146
Tree	long result = instant . convertLocalToUTC ( result , false ) ;
Code	long result = instant . convertLocalToUTC ( result , false ) ;
Distance : 4

147
Tree	void result = result . convertLocalToUTC ( instant , false ) ;
Code	void result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

148
Tree	long result = result . convertLocalToUTC ( result , false ) ;
Code	long result = result . convertLocalToUTC ( result , false ) ;
Distance : 4

149
Tree	void instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	void instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

150
Tree	byte iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	byte iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

151
Tree	double localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

152
Tree	long localInstant = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	long localInstant = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

153
Tree	short result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	short result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

154
Tree	long result = instant . convertLocalToUTC ( instant , true ) ;
Code	long result = instant . convertLocalToUTC ( instant , true ) ;
Distance : 5

155
Tree	long localInstant = localInstant . convertLocalToUTC ( instant , false ) ;
Code	long localInstant = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

156
Tree	double result = instant . convertLocalToUTC ( instant , false ) ;
Code	double result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

157
Tree	long instant = iZone . convertLocalToUTC ( result , false ) ;
Code	long instant = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

158
Tree	void result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	void result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

159
Tree	short result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	short result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

160
Tree	int localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Code	int localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

161
Tree	short iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	short iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

162
Tree	float result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	float result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

163
Tree	byte localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	byte localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

164
Tree	char localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Code	char localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

165
Tree	void result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	void result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

166
Tree	void iZone = iZone . convertLocalToUTC ( instant , false ) ;
Code	void iZone = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

167
Tree	byte result = instant . convertLocalToUTC ( instant , false ) ;
Code	byte result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

168
Tree	boolean result = result . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 5

169
Tree	double instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	double instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

170
Tree	long instant = iZone . convertLocalToUTC ( instant , true ) ;
Code	long instant = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

171
Tree	double result = iZone . convertLocalToUTC ( result , false ) ;
Code	double result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

172
Tree	boolean localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Code	boolean localInstant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

173
Tree	long result = iZone . convertLocalToUTC ( result , true ) ;
Code	long result = iZone . convertLocalToUTC ( result , true ) ;
Distance : 4

174
Tree	long iZone = result . convertLocalToUTC ( iZone , false ) ;
Code	long iZone = result . convertLocalToUTC ( iZone , false ) ;
Distance : 5

175
Tree	byte result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	byte result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

176
Tree	long localInstant = instant . convertLocalToUTC ( instant , false ) ;
Code	long localInstant = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

177
Tree	short localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	short localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

178
Tree	float instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	float instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

179
Tree	int result = result . convertLocalToUTC ( iZone , false ) ;
Code	int result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 5

180
Tree	short result = instant . convertLocalToUTC ( instant , false ) ;
Code	short result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

181
Tree	char result = result . convertLocalToUTC ( iZone , false ) ;
Code	char result = result . convertLocalToUTC ( iZone , false ) ;
Distance : 5

182
Tree	byte instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	byte instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

183
Tree	void localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	void localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

184
Tree	byte result = iZone . convertLocalToUTC ( result , false ) ;
Code	byte result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

185
Tree	void result = instant . convertLocalToUTC ( instant , false ) ;
Code	void result = instant . convertLocalToUTC ( instant , false ) ;
Distance : 5

186
Tree	long result = result . convertLocalToUTC ( localInstant , true ) ;
Code	long result = result . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

187
Tree	boolean result = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	boolean result = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

188
Tree	boolean iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Code	boolean iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 5

189
Tree	boolean iZone = result . convertLocalToUTC ( localInstant , false ) ;
Code	boolean iZone = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

190
Tree	float result = iZone . convertLocalToUTC ( localInstant , true ) ;
Code	float result = iZone . convertLocalToUTC ( localInstant , true ) ;
Distance : 4

191
Tree	long iZone = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	long iZone = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

192
Tree	long localInstant = iZone . convertLocalToUTC ( result , false ) ;
Code	long localInstant = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

193
Tree	short instant = iZone . convertLocalToUTC ( instant , false ) ;
Code	short instant = iZone . convertLocalToUTC ( instant , false ) ;
Distance : 5

194
Tree	byte result = iZone . convertLocalToUTC ( instant , true ) ;
Code	byte result = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

195
Tree	float result = localInstant . convertLocalToUTC ( instant , false ) ;
Code	float result = localInstant . convertLocalToUTC ( instant , false ) ;
Distance : 5

196
Tree	int result = localInstant . convertLocalToUTC ( iZone , false ) ;
Code	int result = localInstant . convertLocalToUTC ( iZone , false ) ;
Distance : 5

197
Tree	float result = result . convertLocalToUTC ( instant , false ) ;
Code	float result = result . convertLocalToUTC ( instant , false ) ;
Distance : 5

198
Tree	double result = iZone . convertLocalToUTC ( instant , true ) ;
Code	double result = iZone . convertLocalToUTC ( instant , true ) ;
Distance : 5

199
Tree	int iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Code	int iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 9

1
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 10

2
Tree	return setDefaultPaint ;
Code	return setDefaultPaint ;
Distance : 10

3
Tree	return doSlicing ;
Code	return doSlicing ;
Distance : 10

4
Tree	return SystemUtils ;
Code	return SystemUtils ;
Distance : 10

5
Tree	return toInspect ;
Code	return toInspect ;
Distance : 10

6
Tree	return for ;
Code	return for ;
Distance : 10

7
Tree	return assert ;
Code	return assert ;
Distance : 10

8
Tree	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Distance : 10

9
Tree	return Object ;
Code	return Object ;
Distance : 10

10
Tree	return toRemove ;
Code	return toRemove ;
Distance : 10

11
Tree	return maybeThisType ;
Code	return maybeThisType ;
Distance : 10

12
Tree	return OtherClass ;
Code	return OtherClass ;
Distance : 10

13
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 10

14
Tree	return canModifyExterns ;
Code	return canModifyExterns ;
Distance : 10

15
Tree	return FALSE ;
Code	return FALSE ;
Distance : 10

16
Tree	return isEquals ;
Code	return isEquals ;
Distance : 10

17
Tree	return getSizes ;
Code	return getSizes ;
Distance : 10

18
Tree	return ModifyType.ROUND ;
Code	return ModifyType.ROUND ;
Distance : 10

19
Tree	return outcome.booleanValues ;
Code	return outcome.booleanValues ;
Distance : 10

20
Tree	return pname ;
Code	return pname ;
Distance : 10

21
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 10

22
Tree	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Code	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Distance : 10

23
Tree	return MultivariateVectorFunction ;
Code	return MultivariateVectorFunction ;
Distance : 10

24
Tree	return categoryMargin ;
Code	return categoryMargin ;
Distance : 10

25
Tree	return VECTOR_LENGTHS_MISMATCH ;
Code	return VECTOR_LENGTHS_MISMATCH ;
Distance : 10

26
Tree	return parameters ;
Code	return parameters ;
Distance : 10

27
Tree	return serial ;
Code	return serial ;
Distance : 10

28
Tree	return noStubFunctions ;
Code	return noStubFunctions ;
Distance : 10

29
Tree	return isInferred ;
Code	return isInferred ;
Distance : 10

30
Tree	return mocksToBeVerifiedInOrder ;
Code	return mocksToBeVerifiedInOrder ;
Distance : 10

31
Tree	return %= ;
Code	return %= ;
Distance : 10

32
Tree	return incompletePaint ;
Code	return incompletePaint ;
Distance : 10

33
Tree	return jsType ;
Code	return jsType ;
Distance : 10

34
Tree	return Token ;
Code	return Token ;
Distance : 10

35
Tree	return AxisLocation ;
Code	return AxisLocation ;
Distance : 10

36
Tree	return epsilon ;
Code	return epsilon ;
Distance : 10

37
Tree	return int ;
Code	return int ;
Distance : 10

38
Tree	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Code	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Distance : 10

39
Tree	return firstNonNull ;
Code	return firstNonNull ;
Distance : 10

40
Tree	return nullSafeGet ;
Code	return nullSafeGet ;
Distance : 10

41
Tree	return unflowable ;
Code	return unflowable ;
Distance : 10

42
Tree	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Code	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Distance : 10

43
Tree	return minimum ;
Code	return minimum ;
Distance : 10

44
Tree	return another ;
Code	return another ;
Distance : 10

45
Tree	return ExtendedMessageFormat ;
Code	return ExtendedMessageFormat ;
Distance : 10

46
Tree	return updateTypeOfArguments ;
Code	return updateTypeOfArguments ;
Distance : 10

47
Tree	return jacobian.length ;
Code	return jacobian.length ;
Distance : 10

48
Tree	return RandomSource.WELL_19937_C ;
Code	return RandomSource.WELL_19937_C ;
Distance : 10

49
Tree	return mode ;
Code	return mode ;
Distance : 10

50
Tree	return NoMoreInvocationsVerifier ;
Code	return NoMoreInvocationsVerifier ;
Distance : 10

51
Tree	return NormalDistribution ;
Code	return NormalDistribution ;
Distance : 10

52
Tree	return testArrowFunction3 ;
Code	return testArrowFunction3 ;
Distance : 10

53
Tree	return WEEKS ;
Code	return WEEKS ;
Distance : 10

54
Tree	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

55
Tree	return DateTimeParser ;
Code	return DateTimeParser ;
Distance : 10

56
Tree	return shouldPreservesGoogProvidesAndRequires ;
Code	return shouldPreservesGoogProvidesAndRequires ;
Distance : 10

57
Tree	return scaled ;
Code	return scaled ;
Distance : 10

58
Tree	return tokenLen ;
Code	return tokenLen ;
Distance : 10

59
Tree	return DEFAULT_ULPS ;
Code	return DEFAULT_ULPS ;
Distance : 10

60
Tree	return Set ;
Code	return Set ;
Distance : 10

61
Tree	return nvars ;
Code	return nvars ;
Distance : 10

62
Tree	return <= ;
Code	return <= ;
Distance : 10

63
Tree	return applySingletonGetter ;
Code	return applySingletonGetter ;
Distance : 10

64
Tree	return InOrderWrapper ;
Code	return InOrderWrapper ;
Distance : 10

65
Tree	return LiveVariablesAnalysis ;
Code	return LiveVariablesAnalysis ;
Distance : 10

66
Tree	return JAVA_1_5 ;
Code	return JAVA_1_5 ;
Distance : 10

67
Tree	return MemoizedTypedScopeCreator ;
Code	return MemoizedTypedScopeCreator ;
Distance : 10

68
Tree	return actualMethod ;
Code	return actualMethod ;
Distance : 10

69
Tree	return newPropType ;
Code	return newPropType ;
Distance : 10

70
Tree	return wantedInvocationCount ;
Code	return wantedInvocationCount ;
Distance : 10

71
Tree	return ARROW_FN ;
Code	return ARROW_FN ;
Distance : 10

72
Tree	return retType ;
Code	return retType ;
Distance : 10

73
Tree	return charMatcher ;
Code	return charMatcher ;
Distance : 10

74
Tree	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Code	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Distance : 10

75
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 10

76
Tree	return hasDuplicateDeclarationSuppression ;
Code	return hasDuplicateDeclarationSuppression ;
Distance : 10

77
Tree	return isSubtypeOfHelper ;
Code	return isSubtypeOfHelper ;
Distance : 10

78
Tree	return YIntervalRenderer ;
Code	return YIntervalRenderer ;
Distance : 10

79
Tree	return s2 ;
Code	return s2 ;
Distance : 10

80
Tree	return anchorUnusedVars ;
Code	return anchorUnusedVars ;
Distance : 10

81
Tree	return foundSize ;
Code	return foundSize ;
Distance : 10

82
Tree	return testNotConstantArgument ;
Code	return testNotConstantArgument ;
Distance : 10

83
Tree	return nullOrUndefined ;
Code	return nullOrUndefined ;
Distance : 10

84
Tree	return recvType ;
Code	return recvType ;
Distance : 10

85
Tree	return declaredType ;
Code	return declaredType ;
Distance : 10

86
Tree	return firstChunk ;
Code	return firstChunk ;
Distance : 10

87
Tree	return TestObject ;
Code	return TestObject ;
Distance : 10

88
Tree	return GaussianRandomGenerator ;
Code	return GaussianRandomGenerator ;
Distance : 10

89
Tree	return compare ;
Code	return compare ;
Distance : 10

90
Tree	return newClusters ;
Code	return newClusters ;
Distance : 10

91
Tree	return boolean ;
Code	return boolean ;
Distance : 10

92
Tree	return thiz ;
Code	return thiz ;
Distance : 10

93
Tree	return SubChord ;
Code	return SubChord ;
Distance : 10

94
Tree	return verificationMode ;
Code	return verificationMode ;
Distance : 10

95
Tree	return CharSet ;
Code	return CharSet ;
Distance : 10

96
Tree	return ? ;
Code	return ? ;
Distance : 10

97
Tree	return getPollingPeriod ;
Code	return getPollingPeriod ;
Distance : 10

98
Tree	return residuals ;
Code	return residuals ;
Distance : 10

99
Tree	return propType ;
Code	return propType ;
Distance : 10

100
Tree	return preserveClosurePrimitives ;
Code	return preserveClosurePrimitives ;
Distance : 10

101
Tree	return MyComparableObjectSeries ;
Code	return MyComparableObjectSeries ;
Distance : 10

102
Tree	return delimiters.length ;
Code	return delimiters.length ;
Distance : 10

103
Tree	return matchingMock ;
Code	return matchingMock ;
Distance : 10

104
Tree	return modType ;
Code	return modType ;
Distance : 10

105
Tree	return Stroke ;
Code	return Stroke ;
Distance : 10

106
Tree	return ignored ;
Code	return ignored ;
Distance : 10

107
Tree	return delimLen ;
Code	return delimLen ;
Distance : 10

108
Tree	return mapper ;
Code	return mapper ;
Distance : 10

109
Tree	return MODIFY_TRUNCATE ;
Code	return MODIFY_TRUNCATE ;
Distance : 10

110
Tree	return ak2 ;
Code	return ak2 ;
Distance : 10

111
Tree	return targetType ;
Code	return targetType ;
Distance : 10

112
Tree	return missingMethodMode ;
Code	return missingMethodMode ;
Distance : 10

113
Tree	return testTransients ;
Code	return testTransients ;
Distance : 10

114
Tree	return declType ;
Code	return declType ;
Distance : 10

115
Tree	return instant ;
Code	return instant ;
Distance : 9

116
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

117
Tree	return byte ;
Code	return byte ;
Distance : 10

118
Tree	return Comparable ;
Code	return Comparable ;
Distance : 10

119
Tree	return localInstant ;
Code	return localInstant ;
Distance : 9

120
Tree	return preserveGoogProvidesAndRequires ;
Code	return preserveGoogProvidesAndRequires ;
Distance : 10

121
Tree	return columnDimension ;
Code	return columnDimension ;
Distance : 10

122
Tree	return voidType ;
Code	return voidType ;
Distance : 10

123
Tree	return K ;
Code	return K ;
Distance : 10

124
Tree	return O ;
Code	return O ;
Distance : 10

125
Tree	return firstChar ;
Code	return firstChar ;
Distance : 10

126
Tree	return TypeI ;
Code	return TypeI ;
Distance : 10

127
Tree	return normProduct ;
Code	return normProduct ;
Distance : 10

128
Tree	return instance ;
Code	return instance ;
Distance : 10

129
Tree	return ! ;
Code	return ! ;
Distance : 10

130
Tree	return null ;
Code	return null ;
Distance : 10

131
Tree	return - ;
Code	return - ;
Distance : 10

132
Tree	return >= ;
Code	return >= ;
Distance : 10

133
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 10

134
Tree	return delimiters ;
Code	return delimiters ;
Distance : 10

135
Tree	return before ;
Code	return before ;
Distance : 10

136
Tree	return populationLimit ;
Code	return populationLimit ;
Distance : 10

137
Tree	return != ;
Code	return != ;
Distance : 10

138
Tree	return strategy ;
Code	return strategy ;
Distance : 10

139
Tree	return Builder ;
Code	return Builder ;
Distance : 10

140
Tree	return convertLocalToUTC ;
Code	return convertLocalToUTC ;
Distance : 9

141
Tree	return p1c ;
Code	return p1c ;
Distance : 10

142
Tree	return TimePeriodValue ;
Code	return TimePeriodValue ;
Distance : 10

143
Tree	return removeLen ;
Code	return removeLen ;
Distance : 10

144
Tree	return Null.NULL ;
Code	return Null.NULL ;
Distance : 10

145
Tree	return OngoingVerifyingMode ;
Code	return OngoingVerifyingMode ;
Distance : 10

146
Tree	return iZone ;
Code	return iZone ;
Distance : 9

147
Tree	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Distance : 10

148
Tree	return itimeStyle ;
Code	return itimeStyle ;
Distance : 10

149
Tree	return outData ;
Code	return outData ;
Distance : 10

150
Tree	return iElementPairs ;
Code	return iElementPairs ;
Distance : 10

151
Tree	return ChartPanel ;
Code	return ChartPanel ;
Distance : 10

152
Tree	return maximum ;
Code	return maximum ;
Distance : 10

153
Tree	return iObjectIndexTemplateKey ;
Code	return iObjectIndexTemplateKey ;
Distance : 10

154
Tree	return low ;
Code	return low ;
Distance : 10

155
Tree	return ignoredMatcher ;
Code	return ignoredMatcher ;
Distance : 10

156
Tree	return icon ;
Code	return icon ;
Distance : 10

157
Tree	return synchronized ;
Code	return synchronized ;
Distance : 10

158
Tree	return foundType ;
Code	return foundType ;
Distance : 10

159
Tree	return delimMatcher ;
Code	return delimMatcher ;
Distance : 10

160
Tree	return cols ;
Code	return cols ;
Distance : 10

161
Tree	return testClassPropUnused1 ;
Code	return testClassPropUnused1 ;
Distance : 10

162
Tree	return throwableClass ;
Code	return throwableClass ;
Distance : 10

163
Tree	return rowDimension ;
Code	return rowDimension ;
Distance : 10

164
Tree	return comparator ;
Code	return comparator ;
Distance : 10

165
Tree	return Graphics2D ;
Code	return Graphics2D ;
Distance : 10

166
Tree	return field ;
Code	return field ;
Distance : 10

167
Tree	return -= ;
Code	return -= ;
Distance : 10

168
Tree	return funType ;
Code	return funType ;
Distance : 10

169
Tree	return &= ;
Code	return &= ;
Distance : 10

170
Tree	return typeMap ;
Code	return typeMap ;
Distance : 10

171
Tree	return DEFAULT_CUT_OFF ;
Code	return DEFAULT_CUT_OFF ;
Distance : 10

172
Tree	return xInt ;
Code	return xInt ;
Distance : 10

173
Tree	return one ;
Code	return one ;
Distance : 10

174
Tree	return margin ;
Code	return margin ;
Distance : 10

175
Tree	return RemoveUnusedClassPropertiesTest ;
Code	return RemoveUnusedClassPropertiesTest ;
Distance : 10

176
Tree	return StandardBasicTypes.TIMESTAMP ;
Code	return StandardBasicTypes.TIMESTAMP ;
Distance : 10

177
Tree	return extends ;
Code	return extends ;
Distance : 10

178
Tree	return typeToMock ;
Code	return typeToMock ;
Distance : 10

179
Tree	return isAllType ;
Code	return isAllType ;
Distance : 10

180
Tree	return JAVA_1_4 ;
Code	return JAVA_1_4 ;
Distance : 10

181
Tree	return actualValue ;
Code	return actualValue ;
Distance : 10

182
Tree	return continue; ;
Code	return continue; ;
Distance : 10

183
Tree	return JSTypeNative.NO_OBJECT_TYPE ;
Code	return JSTypeNative.NO_OBJECT_TYPE ;
Distance : 10

184
Tree	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

185
Tree	return minorTickCount ;
Code	return minorTickCount ;
Distance : 10

186
Tree	return RELAX ;
Code	return RELAX ;
Distance : 10

187
Tree	return DUPLICATE_REQUIRE ;
Code	return DUPLICATE_REQUIRE ;
Distance : 10

188
Tree	return returnValues ;
Code	return returnValues ;
Distance : 10

189
Tree	return transformer ;
Code	return transformer ;
Distance : 10

190
Tree	return ModifyType.TRUNCATE ;
Code	return ModifyType.TRUNCATE ;
Distance : 10

191
Tree	return TestSubObject ;
Code	return TestSubObject ;
Distance : 10

192
Tree	return newSourceInd ;
Code	return newSourceInd ;
Distance : 10

193
Tree	return InlineVariablesConstantsTest ;
Code	return InlineVariablesConstantsTest ;
Distance : 10

194
Tree	return appendField ;
Code	return appendField ;
Distance : 10

195
Tree	return bitIndex ;
Code	return bitIndex ;
Distance : 10

196
Tree	return Type ;
Code	return Type ;
Distance : 10

197
Tree	return UnitSphereSampler ;
Code	return UnitSphereSampler ;
Distance : 10

198
Tree	return lastWasGap ;
Code	return lastWasGap ;
Distance : 10

199
Tree	return occurrences ;
Code	return occurrences ;
Distance : 10

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 9

1
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 10

2
Tree	return setDefaultPaint ;
Code	return setDefaultPaint ;
Distance : 10

3
Tree	return doSlicing ;
Code	return doSlicing ;
Distance : 10

4
Tree	return SystemUtils ;
Code	return SystemUtils ;
Distance : 10

5
Tree	return toInspect ;
Code	return toInspect ;
Distance : 10

6
Tree	return for ;
Code	return for ;
Distance : 10

7
Tree	return assert ;
Code	return assert ;
Distance : 10

8
Tree	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Distance : 10

9
Tree	return Object ;
Code	return Object ;
Distance : 10

10
Tree	return toRemove ;
Code	return toRemove ;
Distance : 10

11
Tree	return maybeThisType ;
Code	return maybeThisType ;
Distance : 10

12
Tree	return OtherClass ;
Code	return OtherClass ;
Distance : 10

13
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 10

14
Tree	return canModifyExterns ;
Code	return canModifyExterns ;
Distance : 10

15
Tree	return FALSE ;
Code	return FALSE ;
Distance : 10

16
Tree	return isEquals ;
Code	return isEquals ;
Distance : 10

17
Tree	return getSizes ;
Code	return getSizes ;
Distance : 10

18
Tree	return ModifyType.ROUND ;
Code	return ModifyType.ROUND ;
Distance : 10

19
Tree	return outcome.booleanValues ;
Code	return outcome.booleanValues ;
Distance : 10

20
Tree	return pname ;
Code	return pname ;
Distance : 10

21
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 10

22
Tree	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Code	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Distance : 10

23
Tree	return MultivariateVectorFunction ;
Code	return MultivariateVectorFunction ;
Distance : 10

24
Tree	return categoryMargin ;
Code	return categoryMargin ;
Distance : 10

25
Tree	return VECTOR_LENGTHS_MISMATCH ;
Code	return VECTOR_LENGTHS_MISMATCH ;
Distance : 10

26
Tree	return parameters ;
Code	return parameters ;
Distance : 10

27
Tree	return serial ;
Code	return serial ;
Distance : 10

28
Tree	return noStubFunctions ;
Code	return noStubFunctions ;
Distance : 10

29
Tree	return isInferred ;
Code	return isInferred ;
Distance : 10

30
Tree	return mocksToBeVerifiedInOrder ;
Code	return mocksToBeVerifiedInOrder ;
Distance : 10

31
Tree	return %= ;
Code	return %= ;
Distance : 10

32
Tree	return incompletePaint ;
Code	return incompletePaint ;
Distance : 10

33
Tree	return jsType ;
Code	return jsType ;
Distance : 10

34
Tree	return Token ;
Code	return Token ;
Distance : 10

35
Tree	return AxisLocation ;
Code	return AxisLocation ;
Distance : 10

36
Tree	return epsilon ;
Code	return epsilon ;
Distance : 10

37
Tree	return int ;
Code	return int ;
Distance : 10

38
Tree	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Code	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Distance : 10

39
Tree	return firstNonNull ;
Code	return firstNonNull ;
Distance : 10

40
Tree	return nullSafeGet ;
Code	return nullSafeGet ;
Distance : 10

41
Tree	return unflowable ;
Code	return unflowable ;
Distance : 10

42
Tree	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Code	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Distance : 10

43
Tree	return minimum ;
Code	return minimum ;
Distance : 10

44
Tree	return another ;
Code	return another ;
Distance : 10

45
Tree	return ExtendedMessageFormat ;
Code	return ExtendedMessageFormat ;
Distance : 10

46
Tree	return updateTypeOfArguments ;
Code	return updateTypeOfArguments ;
Distance : 10

47
Tree	return jacobian.length ;
Code	return jacobian.length ;
Distance : 10

48
Tree	return RandomSource.WELL_19937_C ;
Code	return RandomSource.WELL_19937_C ;
Distance : 10

49
Tree	return mode ;
Code	return mode ;
Distance : 10

50
Tree	return NoMoreInvocationsVerifier ;
Code	return NoMoreInvocationsVerifier ;
Distance : 10

51
Tree	return NormalDistribution ;
Code	return NormalDistribution ;
Distance : 10

52
Tree	return testArrowFunction3 ;
Code	return testArrowFunction3 ;
Distance : 10

53
Tree	return WEEKS ;
Code	return WEEKS ;
Distance : 10

54
Tree	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

55
Tree	return DateTimeParser ;
Code	return DateTimeParser ;
Distance : 10

56
Tree	return shouldPreservesGoogProvidesAndRequires ;
Code	return shouldPreservesGoogProvidesAndRequires ;
Distance : 10

57
Tree	return scaled ;
Code	return scaled ;
Distance : 10

58
Tree	return tokenLen ;
Code	return tokenLen ;
Distance : 10

59
Tree	return DEFAULT_ULPS ;
Code	return DEFAULT_ULPS ;
Distance : 10

60
Tree	return Set ;
Code	return Set ;
Distance : 10

61
Tree	return nvars ;
Code	return nvars ;
Distance : 10

62
Tree	return <= ;
Code	return <= ;
Distance : 10

63
Tree	return applySingletonGetter ;
Code	return applySingletonGetter ;
Distance : 10

64
Tree	return InOrderWrapper ;
Code	return InOrderWrapper ;
Distance : 10

65
Tree	return LiveVariablesAnalysis ;
Code	return LiveVariablesAnalysis ;
Distance : 10

66
Tree	return JAVA_1_5 ;
Code	return JAVA_1_5 ;
Distance : 10

67
Tree	return MemoizedTypedScopeCreator ;
Code	return MemoizedTypedScopeCreator ;
Distance : 10

68
Tree	return actualMethod ;
Code	return actualMethod ;
Distance : 10

69
Tree	return newPropType ;
Code	return newPropType ;
Distance : 10

70
Tree	return wantedInvocationCount ;
Code	return wantedInvocationCount ;
Distance : 10

71
Tree	return ARROW_FN ;
Code	return ARROW_FN ;
Distance : 10

72
Tree	return retType ;
Code	return retType ;
Distance : 10

73
Tree	return charMatcher ;
Code	return charMatcher ;
Distance : 10

74
Tree	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Code	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Distance : 10

75
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 10

76
Tree	return hasDuplicateDeclarationSuppression ;
Code	return hasDuplicateDeclarationSuppression ;
Distance : 10

77
Tree	return isSubtypeOfHelper ;
Code	return isSubtypeOfHelper ;
Distance : 10

78
Tree	return YIntervalRenderer ;
Code	return YIntervalRenderer ;
Distance : 10

79
Tree	return s2 ;
Code	return s2 ;
Distance : 10

80
Tree	return anchorUnusedVars ;
Code	return anchorUnusedVars ;
Distance : 10

81
Tree	return foundSize ;
Code	return foundSize ;
Distance : 10

82
Tree	return testNotConstantArgument ;
Code	return testNotConstantArgument ;
Distance : 10

83
Tree	return nullOrUndefined ;
Code	return nullOrUndefined ;
Distance : 10

84
Tree	return recvType ;
Code	return recvType ;
Distance : 10

85
Tree	return declaredType ;
Code	return declaredType ;
Distance : 10

86
Tree	return firstChunk ;
Code	return firstChunk ;
Distance : 10

87
Tree	return TestObject ;
Code	return TestObject ;
Distance : 10

88
Tree	return GaussianRandomGenerator ;
Code	return GaussianRandomGenerator ;
Distance : 10

89
Tree	return compare ;
Code	return compare ;
Distance : 10

90
Tree	return newClusters ;
Code	return newClusters ;
Distance : 10

91
Tree	return boolean ;
Code	return boolean ;
Distance : 10

92
Tree	return thiz ;
Code	return thiz ;
Distance : 10

93
Tree	return SubChord ;
Code	return SubChord ;
Distance : 10

94
Tree	return verificationMode ;
Code	return verificationMode ;
Distance : 10

95
Tree	return CharSet ;
Code	return CharSet ;
Distance : 10

96
Tree	return ? ;
Code	return ? ;
Distance : 10

97
Tree	return getPollingPeriod ;
Code	return getPollingPeriod ;
Distance : 10

98
Tree	return residuals ;
Code	return residuals ;
Distance : 10

99
Tree	return propType ;
Code	return propType ;
Distance : 10

100
Tree	return preserveClosurePrimitives ;
Code	return preserveClosurePrimitives ;
Distance : 10

101
Tree	return MyComparableObjectSeries ;
Code	return MyComparableObjectSeries ;
Distance : 10

102
Tree	return delimiters.length ;
Code	return delimiters.length ;
Distance : 10

103
Tree	return matchingMock ;
Code	return matchingMock ;
Distance : 10

104
Tree	return modType ;
Code	return modType ;
Distance : 10

105
Tree	return Stroke ;
Code	return Stroke ;
Distance : 10

106
Tree	return ignored ;
Code	return ignored ;
Distance : 10

107
Tree	return delimLen ;
Code	return delimLen ;
Distance : 10

108
Tree	return mapper ;
Code	return mapper ;
Distance : 10

109
Tree	return MODIFY_TRUNCATE ;
Code	return MODIFY_TRUNCATE ;
Distance : 10

110
Tree	return ak2 ;
Code	return ak2 ;
Distance : 10

111
Tree	return targetType ;
Code	return targetType ;
Distance : 10

112
Tree	return missingMethodMode ;
Code	return missingMethodMode ;
Distance : 10

113
Tree	return testTransients ;
Code	return testTransients ;
Distance : 10

114
Tree	return declType ;
Code	return declType ;
Distance : 10

115
Tree	return instant ;
Code	return instant ;
Distance : 9

116
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

117
Tree	return byte ;
Code	return byte ;
Distance : 10

118
Tree	return Comparable ;
Code	return Comparable ;
Distance : 10

119
Tree	return localInstant ;
Code	return localInstant ;
Distance : 9

120
Tree	return preserveGoogProvidesAndRequires ;
Code	return preserveGoogProvidesAndRequires ;
Distance : 10

121
Tree	return columnDimension ;
Code	return columnDimension ;
Distance : 10

122
Tree	return voidType ;
Code	return voidType ;
Distance : 10

123
Tree	return K ;
Code	return K ;
Distance : 10

124
Tree	return O ;
Code	return O ;
Distance : 10

125
Tree	return firstChar ;
Code	return firstChar ;
Distance : 10

126
Tree	return TypeI ;
Code	return TypeI ;
Distance : 10

127
Tree	return normProduct ;
Code	return normProduct ;
Distance : 10

128
Tree	return instance ;
Code	return instance ;
Distance : 10

129
Tree	return ! ;
Code	return ! ;
Distance : 10

130
Tree	return null ;
Code	return null ;
Distance : 10

131
Tree	return - ;
Code	return - ;
Distance : 10

132
Tree	return >= ;
Code	return >= ;
Distance : 10

133
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 10

134
Tree	return delimiters ;
Code	return delimiters ;
Distance : 10

135
Tree	return before ;
Code	return before ;
Distance : 10

136
Tree	return populationLimit ;
Code	return populationLimit ;
Distance : 10

137
Tree	return != ;
Code	return != ;
Distance : 10

138
Tree	return strategy ;
Code	return strategy ;
Distance : 10

139
Tree	return Builder ;
Code	return Builder ;
Distance : 10

140
Tree	return convertLocalToUTC ;
Code	return convertLocalToUTC ;
Distance : 9

141
Tree	return p1c ;
Code	return p1c ;
Distance : 10

142
Tree	return TimePeriodValue ;
Code	return TimePeriodValue ;
Distance : 10

143
Tree	return removeLen ;
Code	return removeLen ;
Distance : 10

144
Tree	return Null.NULL ;
Code	return Null.NULL ;
Distance : 10

145
Tree	return OngoingVerifyingMode ;
Code	return OngoingVerifyingMode ;
Distance : 10

146
Tree	return iZone ;
Code	return iZone ;
Distance : 9

147
Tree	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Distance : 10

148
Tree	return itimeStyle ;
Code	return itimeStyle ;
Distance : 10

149
Tree	return outData ;
Code	return outData ;
Distance : 10

150
Tree	return iElementPairs ;
Code	return iElementPairs ;
Distance : 10

151
Tree	return ChartPanel ;
Code	return ChartPanel ;
Distance : 10

152
Tree	return maximum ;
Code	return maximum ;
Distance : 10

153
Tree	return iObjectIndexTemplateKey ;
Code	return iObjectIndexTemplateKey ;
Distance : 10

154
Tree	return low ;
Code	return low ;
Distance : 10

155
Tree	return ignoredMatcher ;
Code	return ignoredMatcher ;
Distance : 10

156
Tree	return icon ;
Code	return icon ;
Distance : 10

157
Tree	return synchronized ;
Code	return synchronized ;
Distance : 10

158
Tree	return foundType ;
Code	return foundType ;
Distance : 10

159
Tree	return delimMatcher ;
Code	return delimMatcher ;
Distance : 10

160
Tree	return cols ;
Code	return cols ;
Distance : 10

161
Tree	return testClassPropUnused1 ;
Code	return testClassPropUnused1 ;
Distance : 10

162
Tree	return throwableClass ;
Code	return throwableClass ;
Distance : 10

163
Tree	return rowDimension ;
Code	return rowDimension ;
Distance : 10

164
Tree	return comparator ;
Code	return comparator ;
Distance : 10

165
Tree	return Graphics2D ;
Code	return Graphics2D ;
Distance : 10

166
Tree	return field ;
Code	return field ;
Distance : 10

167
Tree	return -= ;
Code	return -= ;
Distance : 10

168
Tree	return funType ;
Code	return funType ;
Distance : 10

169
Tree	return &= ;
Code	return &= ;
Distance : 10

170
Tree	return typeMap ;
Code	return typeMap ;
Distance : 10

171
Tree	return DEFAULT_CUT_OFF ;
Code	return DEFAULT_CUT_OFF ;
Distance : 10

172
Tree	return xInt ;
Code	return xInt ;
Distance : 10

173
Tree	return one ;
Code	return one ;
Distance : 10

174
Tree	return margin ;
Code	return margin ;
Distance : 10

175
Tree	return RemoveUnusedClassPropertiesTest ;
Code	return RemoveUnusedClassPropertiesTest ;
Distance : 10

176
Tree	return StandardBasicTypes.TIMESTAMP ;
Code	return StandardBasicTypes.TIMESTAMP ;
Distance : 10

177
Tree	return extends ;
Code	return extends ;
Distance : 10

178
Tree	return typeToMock ;
Code	return typeToMock ;
Distance : 10

179
Tree	return isAllType ;
Code	return isAllType ;
Distance : 10

180
Tree	return JAVA_1_4 ;
Code	return JAVA_1_4 ;
Distance : 10

181
Tree	return actualValue ;
Code	return actualValue ;
Distance : 10

182
Tree	return continue; ;
Code	return continue; ;
Distance : 10

183
Tree	return JSTypeNative.NO_OBJECT_TYPE ;
Code	return JSTypeNative.NO_OBJECT_TYPE ;
Distance : 10

184
Tree	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

185
Tree	return minorTickCount ;
Code	return minorTickCount ;
Distance : 10

186
Tree	return RELAX ;
Code	return RELAX ;
Distance : 10

187
Tree	return DUPLICATE_REQUIRE ;
Code	return DUPLICATE_REQUIRE ;
Distance : 10

188
Tree	return returnValues ;
Code	return returnValues ;
Distance : 10

189
Tree	return transformer ;
Code	return transformer ;
Distance : 10

190
Tree	return ModifyType.TRUNCATE ;
Code	return ModifyType.TRUNCATE ;
Distance : 10

191
Tree	return TestSubObject ;
Code	return TestSubObject ;
Distance : 10

192
Tree	return newSourceInd ;
Code	return newSourceInd ;
Distance : 10

193
Tree	return InlineVariablesConstantsTest ;
Code	return InlineVariablesConstantsTest ;
Distance : 10

194
Tree	return appendField ;
Code	return appendField ;
Distance : 10

195
Tree	return bitIndex ;
Code	return bitIndex ;
Distance : 10

196
Tree	return Type ;
Code	return Type ;
Distance : 10

197
Tree	return UnitSphereSampler ;
Code	return UnitSphereSampler ;
Distance : 10

198
Tree	return lastWasGap ;
Code	return lastWasGap ;
Distance : 10

199
Tree	return occurrences ;
Code	return occurrences ;
Distance : 10

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return false ;
Code	return false ;
Distance : 9

1
Tree	return DateTimeFormatter ;
Code	return DateTimeFormatter ;
Distance : 10

2
Tree	return setDefaultPaint ;
Code	return setDefaultPaint ;
Distance : 10

3
Tree	return doSlicing ;
Code	return doSlicing ;
Distance : 10

4
Tree	return SystemUtils ;
Code	return SystemUtils ;
Distance : 10

5
Tree	return toInspect ;
Code	return toInspect ;
Distance : 10

6
Tree	return for ;
Code	return for ;
Distance : 10

7
Tree	return assert ;
Code	return assert ;
Distance : 10

8
Tree	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ;
Distance : 10

9
Tree	return Object ;
Code	return Object ;
Distance : 10

10
Tree	return toRemove ;
Code	return toRemove ;
Distance : 10

11
Tree	return maybeThisType ;
Code	return maybeThisType ;
Distance : 10

12
Tree	return OtherClass ;
Code	return OtherClass ;
Distance : 10

13
Tree	return HotSwapCompilerPass ;
Code	return HotSwapCompilerPass ;
Distance : 10

14
Tree	return canModifyExterns ;
Code	return canModifyExterns ;
Distance : 10

15
Tree	return FALSE ;
Code	return FALSE ;
Distance : 10

16
Tree	return isEquals ;
Code	return isEquals ;
Distance : 10

17
Tree	return getSizes ;
Code	return getSizes ;
Distance : 10

18
Tree	return ModifyType.ROUND ;
Code	return ModifyType.ROUND ;
Distance : 10

19
Tree	return outcome.booleanValues ;
Code	return outcome.booleanValues ;
Distance : 10

20
Tree	return pname ;
Code	return pname ;
Distance : 10

21
Tree	return ModifyType.CEILING ;
Code	return ModifyType.CEILING ;
Distance : 10

22
Tree	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Code	return DEFAULT_NOT_BLANK_EX_MESSAGE ;
Distance : 10

23
Tree	return MultivariateVectorFunction ;
Code	return MultivariateVectorFunction ;
Distance : 10

24
Tree	return categoryMargin ;
Code	return categoryMargin ;
Distance : 10

25
Tree	return VECTOR_LENGTHS_MISMATCH ;
Code	return VECTOR_LENGTHS_MISMATCH ;
Distance : 10

26
Tree	return parameters ;
Code	return parameters ;
Distance : 10

27
Tree	return serial ;
Code	return serial ;
Distance : 10

28
Tree	return noStubFunctions ;
Code	return noStubFunctions ;
Distance : 10

29
Tree	return isInferred ;
Code	return isInferred ;
Distance : 10

30
Tree	return mocksToBeVerifiedInOrder ;
Code	return mocksToBeVerifiedInOrder ;
Distance : 10

31
Tree	return %= ;
Code	return %= ;
Distance : 10

32
Tree	return incompletePaint ;
Code	return incompletePaint ;
Distance : 10

33
Tree	return jsType ;
Code	return jsType ;
Distance : 10

34
Tree	return Token ;
Code	return Token ;
Distance : 10

35
Tree	return AxisLocation ;
Code	return AxisLocation ;
Distance : 10

36
Tree	return epsilon ;
Code	return epsilon ;
Distance : 10

37
Tree	return int ;
Code	return int ;
Distance : 10

38
Tree	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Code	return LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM ;
Distance : 10

39
Tree	return firstNonNull ;
Code	return firstNonNull ;
Distance : 10

40
Tree	return nullSafeGet ;
Code	return nullSafeGet ;
Distance : 10

41
Tree	return unflowable ;
Code	return unflowable ;
Distance : 10

42
Tree	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Code	return LocalizedFormats.DIFFERENT_ROWS_LENGTHS ;
Distance : 10

43
Tree	return minimum ;
Code	return minimum ;
Distance : 10

44
Tree	return another ;
Code	return another ;
Distance : 10

45
Tree	return ExtendedMessageFormat ;
Code	return ExtendedMessageFormat ;
Distance : 10

46
Tree	return updateTypeOfArguments ;
Code	return updateTypeOfArguments ;
Distance : 10

47
Tree	return jacobian.length ;
Code	return jacobian.length ;
Distance : 10

48
Tree	return RandomSource.WELL_19937_C ;
Code	return RandomSource.WELL_19937_C ;
Distance : 10

49
Tree	return mode ;
Code	return mode ;
Distance : 10

50
Tree	return NoMoreInvocationsVerifier ;
Code	return NoMoreInvocationsVerifier ;
Distance : 10

51
Tree	return NormalDistribution ;
Code	return NormalDistribution ;
Distance : 10

52
Tree	return testArrowFunction3 ;
Code	return testArrowFunction3 ;
Distance : 10

53
Tree	return WEEKS ;
Code	return WEEKS ;
Distance : 10

54
Tree	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

55
Tree	return DateTimeParser ;
Code	return DateTimeParser ;
Distance : 10

56
Tree	return shouldPreservesGoogProvidesAndRequires ;
Code	return shouldPreservesGoogProvidesAndRequires ;
Distance : 10

57
Tree	return scaled ;
Code	return scaled ;
Distance : 10

58
Tree	return tokenLen ;
Code	return tokenLen ;
Distance : 10

59
Tree	return DEFAULT_ULPS ;
Code	return DEFAULT_ULPS ;
Distance : 10

60
Tree	return Set ;
Code	return Set ;
Distance : 10

61
Tree	return nvars ;
Code	return nvars ;
Distance : 10

62
Tree	return <= ;
Code	return <= ;
Distance : 10

63
Tree	return applySingletonGetter ;
Code	return applySingletonGetter ;
Distance : 10

64
Tree	return InOrderWrapper ;
Code	return InOrderWrapper ;
Distance : 10

65
Tree	return LiveVariablesAnalysis ;
Code	return LiveVariablesAnalysis ;
Distance : 10

66
Tree	return JAVA_1_5 ;
Code	return JAVA_1_5 ;
Distance : 10

67
Tree	return MemoizedTypedScopeCreator ;
Code	return MemoizedTypedScopeCreator ;
Distance : 10

68
Tree	return actualMethod ;
Code	return actualMethod ;
Distance : 10

69
Tree	return newPropType ;
Code	return newPropType ;
Distance : 10

70
Tree	return wantedInvocationCount ;
Code	return wantedInvocationCount ;
Distance : 10

71
Tree	return ARROW_FN ;
Code	return ARROW_FN ;
Distance : 10

72
Tree	return retType ;
Code	return retType ;
Distance : 10

73
Tree	return charMatcher ;
Code	return charMatcher ;
Distance : 10

74
Tree	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Code	return LocalizedFormats.AT_LEAST_ONE_ROW ;
Distance : 10

75
Tree	return JSTypeNative.GLOBAL_THIS ;
Code	return JSTypeNative.GLOBAL_THIS ;
Distance : 10

76
Tree	return hasDuplicateDeclarationSuppression ;
Code	return hasDuplicateDeclarationSuppression ;
Distance : 10

77
Tree	return isSubtypeOfHelper ;
Code	return isSubtypeOfHelper ;
Distance : 10

78
Tree	return YIntervalRenderer ;
Code	return YIntervalRenderer ;
Distance : 10

79
Tree	return s2 ;
Code	return s2 ;
Distance : 10

80
Tree	return anchorUnusedVars ;
Code	return anchorUnusedVars ;
Distance : 10

81
Tree	return foundSize ;
Code	return foundSize ;
Distance : 10

82
Tree	return testNotConstantArgument ;
Code	return testNotConstantArgument ;
Distance : 10

83
Tree	return nullOrUndefined ;
Code	return nullOrUndefined ;
Distance : 10

84
Tree	return recvType ;
Code	return recvType ;
Distance : 10

85
Tree	return declaredType ;
Code	return declaredType ;
Distance : 10

86
Tree	return firstChunk ;
Code	return firstChunk ;
Distance : 10

87
Tree	return TestObject ;
Code	return TestObject ;
Distance : 10

88
Tree	return GaussianRandomGenerator ;
Code	return GaussianRandomGenerator ;
Distance : 10

89
Tree	return compare ;
Code	return compare ;
Distance : 10

90
Tree	return newClusters ;
Code	return newClusters ;
Distance : 10

91
Tree	return boolean ;
Code	return boolean ;
Distance : 10

92
Tree	return thiz ;
Code	return thiz ;
Distance : 10

93
Tree	return SubChord ;
Code	return SubChord ;
Distance : 10

94
Tree	return verificationMode ;
Code	return verificationMode ;
Distance : 10

95
Tree	return CharSet ;
Code	return CharSet ;
Distance : 10

96
Tree	return ? ;
Code	return ? ;
Distance : 10

97
Tree	return getPollingPeriod ;
Code	return getPollingPeriod ;
Distance : 10

98
Tree	return residuals ;
Code	return residuals ;
Distance : 10

99
Tree	return propType ;
Code	return propType ;
Distance : 10

100
Tree	return preserveClosurePrimitives ;
Code	return preserveClosurePrimitives ;
Distance : 10

101
Tree	return MyComparableObjectSeries ;
Code	return MyComparableObjectSeries ;
Distance : 10

102
Tree	return delimiters.length ;
Code	return delimiters.length ;
Distance : 10

103
Tree	return matchingMock ;
Code	return matchingMock ;
Distance : 10

104
Tree	return modType ;
Code	return modType ;
Distance : 10

105
Tree	return Stroke ;
Code	return Stroke ;
Distance : 10

106
Tree	return ignored ;
Code	return ignored ;
Distance : 10

107
Tree	return delimLen ;
Code	return delimLen ;
Distance : 10

108
Tree	return mapper ;
Code	return mapper ;
Distance : 10

109
Tree	return MODIFY_TRUNCATE ;
Code	return MODIFY_TRUNCATE ;
Distance : 10

110
Tree	return ak2 ;
Code	return ak2 ;
Distance : 10

111
Tree	return targetType ;
Code	return targetType ;
Distance : 10

112
Tree	return missingMethodMode ;
Code	return missingMethodMode ;
Distance : 10

113
Tree	return testTransients ;
Code	return testTransients ;
Distance : 10

114
Tree	return declType ;
Code	return declType ;
Distance : 10

115
Tree	return instant ;
Code	return instant ;
Distance : 9

116
Tree	return CHAR_CONS ;
Code	return CHAR_CONS ;
Distance : 10

117
Tree	return byte ;
Code	return byte ;
Distance : 10

118
Tree	return Comparable ;
Code	return Comparable ;
Distance : 10

119
Tree	return localInstant ;
Code	return localInstant ;
Distance : 9

120
Tree	return preserveGoogProvidesAndRequires ;
Code	return preserveGoogProvidesAndRequires ;
Distance : 10

121
Tree	return columnDimension ;
Code	return columnDimension ;
Distance : 10

122
Tree	return voidType ;
Code	return voidType ;
Distance : 10

123
Tree	return K ;
Code	return K ;
Distance : 10

124
Tree	return O ;
Code	return O ;
Distance : 10

125
Tree	return firstChar ;
Code	return firstChar ;
Distance : 10

126
Tree	return TypeI ;
Code	return TypeI ;
Distance : 10

127
Tree	return normProduct ;
Code	return normProduct ;
Distance : 10

128
Tree	return instance ;
Code	return instance ;
Distance : 10

129
Tree	return ! ;
Code	return ! ;
Distance : 10

130
Tree	return null ;
Code	return null ;
Distance : 10

131
Tree	return - ;
Code	return - ;
Distance : 10

132
Tree	return >= ;
Code	return >= ;
Distance : 10

133
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 10

134
Tree	return delimiters ;
Code	return delimiters ;
Distance : 10

135
Tree	return before ;
Code	return before ;
Distance : 10

136
Tree	return populationLimit ;
Code	return populationLimit ;
Distance : 10

137
Tree	return != ;
Code	return != ;
Distance : 10

138
Tree	return strategy ;
Code	return strategy ;
Distance : 10

139
Tree	return Builder ;
Code	return Builder ;
Distance : 10

140
Tree	return convertLocalToUTC ;
Code	return convertLocalToUTC ;
Distance : 9

141
Tree	return p1c ;
Code	return p1c ;
Distance : 10

142
Tree	return TimePeriodValue ;
Code	return TimePeriodValue ;
Distance : 10

143
Tree	return removeLen ;
Code	return removeLen ;
Distance : 10

144
Tree	return Null.NULL ;
Code	return Null.NULL ;
Distance : 10

145
Tree	return OngoingVerifyingMode ;
Code	return OngoingVerifyingMode ;
Distance : 10

146
Tree	return iZone ;
Code	return iZone ;
Distance : 9

147
Tree	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Code	return LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ;
Distance : 10

148
Tree	return itimeStyle ;
Code	return itimeStyle ;
Distance : 10

149
Tree	return outData ;
Code	return outData ;
Distance : 10

150
Tree	return iElementPairs ;
Code	return iElementPairs ;
Distance : 10

151
Tree	return ChartPanel ;
Code	return ChartPanel ;
Distance : 10

152
Tree	return maximum ;
Code	return maximum ;
Distance : 10

153
Tree	return iObjectIndexTemplateKey ;
Code	return iObjectIndexTemplateKey ;
Distance : 10

154
Tree	return low ;
Code	return low ;
Distance : 10

155
Tree	return ignoredMatcher ;
Code	return ignoredMatcher ;
Distance : 10

156
Tree	return icon ;
Code	return icon ;
Distance : 10

157
Tree	return synchronized ;
Code	return synchronized ;
Distance : 10

158
Tree	return foundType ;
Code	return foundType ;
Distance : 10

159
Tree	return delimMatcher ;
Code	return delimMatcher ;
Distance : 10

160
Tree	return cols ;
Code	return cols ;
Distance : 10

161
Tree	return testClassPropUnused1 ;
Code	return testClassPropUnused1 ;
Distance : 10

162
Tree	return throwableClass ;
Code	return throwableClass ;
Distance : 10

163
Tree	return rowDimension ;
Code	return rowDimension ;
Distance : 10

164
Tree	return comparator ;
Code	return comparator ;
Distance : 10

165
Tree	return Graphics2D ;
Code	return Graphics2D ;
Distance : 10

166
Tree	return field ;
Code	return field ;
Distance : 10

167
Tree	return -= ;
Code	return -= ;
Distance : 10

168
Tree	return funType ;
Code	return funType ;
Distance : 10

169
Tree	return &= ;
Code	return &= ;
Distance : 10

170
Tree	return typeMap ;
Code	return typeMap ;
Distance : 10

171
Tree	return DEFAULT_CUT_OFF ;
Code	return DEFAULT_CUT_OFF ;
Distance : 10

172
Tree	return xInt ;
Code	return xInt ;
Distance : 10

173
Tree	return one ;
Code	return one ;
Distance : 10

174
Tree	return margin ;
Code	return margin ;
Distance : 10

175
Tree	return RemoveUnusedClassPropertiesTest ;
Code	return RemoveUnusedClassPropertiesTest ;
Distance : 10

176
Tree	return StandardBasicTypes.TIMESTAMP ;
Code	return StandardBasicTypes.TIMESTAMP ;
Distance : 10

177
Tree	return extends ;
Code	return extends ;
Distance : 10

178
Tree	return typeToMock ;
Code	return typeToMock ;
Distance : 10

179
Tree	return isAllType ;
Code	return isAllType ;
Distance : 10

180
Tree	return JAVA_1_4 ;
Code	return JAVA_1_4 ;
Distance : 10

181
Tree	return actualValue ;
Code	return actualValue ;
Distance : 10

182
Tree	return continue; ;
Code	return continue; ;
Distance : 10

183
Tree	return JSTypeNative.NO_OBJECT_TYPE ;
Code	return JSTypeNative.NO_OBJECT_TYPE ;
Distance : 10

184
Tree	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Code	return GlobalTypeInfoCollector.INTERFACE_METHOD_NOT_IMPLEMENTED ;
Distance : 10

185
Tree	return minorTickCount ;
Code	return minorTickCount ;
Distance : 10

186
Tree	return RELAX ;
Code	return RELAX ;
Distance : 10

187
Tree	return DUPLICATE_REQUIRE ;
Code	return DUPLICATE_REQUIRE ;
Distance : 10

188
Tree	return returnValues ;
Code	return returnValues ;
Distance : 10

189
Tree	return transformer ;
Code	return transformer ;
Distance : 10

190
Tree	return ModifyType.TRUNCATE ;
Code	return ModifyType.TRUNCATE ;
Distance : 10

191
Tree	return TestSubObject ;
Code	return TestSubObject ;
Distance : 10

192
Tree	return newSourceInd ;
Code	return newSourceInd ;
Distance : 10

193
Tree	return InlineVariablesConstantsTest ;
Code	return InlineVariablesConstantsTest ;
Distance : 10

194
Tree	return appendField ;
Code	return appendField ;
Distance : 10

195
Tree	return bitIndex ;
Code	return bitIndex ;
Distance : 10

196
Tree	return Type ;
Code	return Type ;
Distance : 10

197
Tree	return UnitSphereSampler ;
Code	return UnitSphereSampler ;
Distance : 10

198
Tree	return lastWasGap ;
Code	return lastWasGap ;
Distance : 10

199
Tree	return occurrences ;
Code	return occurrences ;
Distance : 10

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
Distance : 0

1
Tree	Partial newPartial = new Partial ( newTypes , iChronology , iChronology ) ;
Code	Partial newPartial = new Partial ( newTypes , iChronology , iChronology ) ;
Distance : 1

2
Tree	Partial newPartial = new Partial ( newValues , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( newValues , newValues , iChronology ) ;
Distance : 1

3
Tree	Partial newPartial = new Partial ( newTypes , newTypes , iChronology ) ;
Code	Partial newPartial = new Partial ( newTypes , newTypes , iChronology ) ;
Distance : 1

4
Tree	Partial newPartial = new Partial ( newPartial , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( newPartial , newValues , iChronology ) ;
Distance : 1

5
Tree	Partial newTypes = new Partial ( newTypes , newValues , iChronology ) ;
Code	Partial newTypes = new Partial ( newTypes , newValues , iChronology ) ;
Distance : 1

6
Tree	Partial newPartial = new Partial ( newTypes , newValues , newTypes ) ;
Code	Partial newPartial = new Partial ( newTypes , newValues , newTypes ) ;
Distance : 1

7
Tree	Partial newPartial = new Partial ( iChronology , newValues , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , iChronology ) ;
Distance : 1

8
Tree	Partial newPartial = new Partial ( newTypes , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( newTypes , iChronology , newValues ) ;
Distance : 2

9
Tree	Partial newPartial = new Partial ( newValues , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , newValues , newValues ) ;
Distance : 2

10
Tree	Partial newPartial = new Partial ( newValues , iChronology , iChronology ) ;
Code	Partial newPartial = new Partial ( newValues , iChronology , iChronology ) ;
Distance : 2

11
Tree	Partial newPartial = new Partial ( newTypes , newPartial , iChronology ) ;
Code	Partial newPartial = new Partial ( newTypes , newPartial , iChronology ) ;
Distance : 1

12
Tree	Partial newPartial = new Partial ( newTypes , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( newTypes , newTypes , newValues ) ;
Distance : 2

13
Tree	Partial newValues = new Partial ( newTypes , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( newTypes , newValues , iChronology ) ;
Distance : 1

14
Tree	Partial newPartial = new Partial ( newTypes , newValues , newPartial ) ;
Code	Partial newPartial = new Partial ( newTypes , newValues , newPartial ) ;
Distance : 1

15
Tree	Partial newPartial = new Partial ( newPartial , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( newPartial , newValues , newValues ) ;
Distance : 2

16
Tree	Partial newPartial = new Partial ( newValues , newTypes , iChronology ) ;
Code	Partial newPartial = new Partial ( newValues , newTypes , iChronology ) ;
Distance : 2

17
Tree	Partial newTypes = new Partial ( newTypes , newValues , newValues ) ;
Code	Partial newTypes = new Partial ( newTypes , newValues , newValues ) ;
Distance : 2

18
Tree	Partial newPartial = new Partial ( newPartial , iChronology , iChronology ) ;
Code	Partial newPartial = new Partial ( newPartial , iChronology , iChronology ) ;
Distance : 2

19
Tree	Partial newTypes = new Partial ( newTypes , iChronology , iChronology ) ;
Code	Partial newTypes = new Partial ( newTypes , iChronology , iChronology ) ;
Distance : 2

20
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Distance : 2

21
Tree	Partial newPartial = new Partial ( iChronology , iChronology , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , iChronology ) ;
Distance : 2

22
Tree	Partial newPartial = new Partial ( newTypes , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( newTypes , newValues , newValues ) ;
Distance : 1

23
Tree	Partial newValues = new Partial ( newTypes , newTypes , iChronology ) ;
Code	Partial newValues = new Partial ( newTypes , newTypes , iChronology ) ;
Distance : 2

24
Tree	Partial newPartial = new Partial ( newTypes , iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( newTypes , iChronology , newTypes ) ;
Distance : 2

25
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 3

26
Tree	Partial newTypes = new Partial ( newTypes , newTypes , iChronology ) ;
Code	Partial newTypes = new Partial ( newTypes , newTypes , iChronology ) ;
Distance : 2

27
Tree	Partial newPartial = new Partial ( newTypes , newTypes , newTypes ) ;
Code	Partial newPartial = new Partial ( newTypes , newTypes , newTypes ) ;
Distance : 2

28
Tree	Partial newPartial = new Partial ( iChronology , newTypes , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , iChronology ) ;
Distance : 2

29
Tree	Partial iChronology = new Partial ( newTypes , newValues , iChronology ) ;
Code	Partial iChronology = new Partial ( newTypes , newValues , iChronology ) ;
Distance : 1

30
Tree	Partial newPartial = new Partial ( newValues , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , iChronology , newValues ) ;
Distance : 3

31
Tree	Partial newPartial = new Partial ( newTypes , newPartial , newValues ) ;
Code	Partial newPartial = new Partial ( newTypes , newPartial , newValues ) ;
Distance : 2

32
Tree	Partial newTypes = new Partial ( newPartial , newValues , iChronology ) ;
Code	Partial newTypes = new Partial ( newPartial , newValues , iChronology ) ;
Distance : 2

33
Tree	Partial newPartial = new Partial ( newPartial , newValues , newTypes ) ;
Code	Partial newPartial = new Partial ( newPartial , newValues , newTypes ) ;
Distance : 2

34
Tree	Partial newValues = new Partial ( newTypes , newValues , newValues ) ;
Code	Partial newValues = new Partial ( newTypes , newValues , newValues ) ;
Distance : 2

35
Tree	Partial newTypes = new Partial ( newTypes , newValues , newTypes ) ;
Code	Partial newTypes = new Partial ( newTypes , newValues , newTypes ) ;
Distance : 2

36
Tree	Partial newTypes = new Partial ( iChronology , newValues , iChronology ) ;
Code	Partial newTypes = new Partial ( iChronology , newValues , iChronology ) ;
Distance : 2

37
Tree	Partial newValues = new Partial ( newTypes , iChronology , iChronology ) ;
Code	Partial newValues = new Partial ( newTypes , iChronology , iChronology ) ;
Distance : 2

38
Tree	Partial newPartial = new Partial ( newTypes , iChronology , newPartial ) ;
Code	Partial newPartial = new Partial ( newTypes , iChronology , newPartial ) ;
Distance : 2

39
Tree	Partial newPartial = new Partial ( iChronology , newValues , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newTypes ) ;
Distance : 2

40
Tree	Partial newPartial = new Partial ( newValues , newPartial , iChronology ) ;
Code	Partial newPartial = new Partial ( newValues , newPartial , iChronology ) ;
Distance : 2

41
Tree	Partial newPartial = new Partial ( newValues , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , newTypes , newValues ) ;
Distance : 3

42
Tree	Partial newPartial = new Partial ( newPartial , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( newPartial , iChronology , newValues ) ;
Distance : 3

43
Tree	Partial newValues = new Partial ( newValues , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( newValues , newValues , iChronology ) ;
Distance : 2

44
Tree	Partial newTypes = new Partial ( newTypes , iChronology , newValues ) ;
Code	Partial newTypes = new Partial ( newTypes , iChronology , newValues ) ;
Distance : 3

45
Tree	Partial newPartial = new Partial ( newValues , newValues , newPartial ) ;
Code	Partial newPartial = new Partial ( newValues , newValues , newPartial ) ;
Distance : 2

46
Tree	Partial newPartial = new Partial ( newValues , newValues , newTypes ) ;
Code	Partial newPartial = new Partial ( newValues , newValues , newTypes ) ;
Distance : 2

47
Tree	Partial newTypes = new Partial ( newValues , newValues , iChronology ) ;
Code	Partial newTypes = new Partial ( newValues , newValues , iChronology ) ;
Distance : 2

48
Tree	Partial newPartial = new Partial ( newPartial , newTypes , iChronology ) ;
Code	Partial newPartial = new Partial ( newPartial , newTypes , iChronology ) ;
Distance : 2

49
Tree	Partial newPartial = new Partial ( newTypes , newTypes , newPartial ) ;
Code	Partial newPartial = new Partial ( newTypes , newTypes , newPartial ) ;
Distance : 2

50
Tree	Partial newTypes = new Partial ( iChronology , iChronology , iChronology ) ;
Code	Partial newTypes = new Partial ( iChronology , iChronology , iChronology ) ;
Distance : 3

51
Tree	Partial newTypes = new Partial ( newValues , iChronology , iChronology ) ;
Code	Partial newTypes = new Partial ( newValues , iChronology , iChronology ) ;
Distance : 3

52
Tree	Partial newTypes = new Partial ( newTypes , newPartial , iChronology ) ;
Code	Partial newTypes = new Partial ( newTypes , newPartial , iChronology ) ;
Distance : 2

53
Tree	Partial newPartial = new Partial ( newPartial , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( newPartial , newTypes , newValues ) ;
Distance : 3

54
Tree	Partial newPartial = new Partial ( newValues , iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( newValues , iChronology , newTypes ) ;
Distance : 3

55
Tree	Partial newPartial = new Partial ( newTypes , newPartial , newTypes ) ;
Code	Partial newPartial = new Partial ( newTypes , newPartial , newTypes ) ;
Distance : 2

56
Tree	Partial newPartial = new Partial ( iChronology , newPartial , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , newPartial , iChronology ) ;
Distance : 2

57
Tree	Partial newTypes = new Partial ( newTypes , newTypes , newValues ) ;
Code	Partial newTypes = new Partial ( newTypes , newTypes , newValues ) ;
Distance : 3

58
Tree	Partial newValues = new Partial ( newPartial , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( newPartial , newValues , iChronology ) ;
Distance : 2

59
Tree	Partial newPartial = new Partial ( newPartial , newValues , newPartial ) ;
Code	Partial newPartial = new Partial ( newPartial , newValues , newPartial ) ;
Distance : 2

60
Tree	Partial iChronology = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 4

61
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 3

62
Tree	Partial iChronology = new Partial ( newTypes , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( newTypes , newValues , newValues ) ;
Distance : 2

63
Tree	Partial newValues = new Partial ( newTypes , newValues , newTypes ) ;
Code	Partial newValues = new Partial ( newTypes , newValues , newTypes ) ;
Distance : 2

64
Tree	Partial newValues = new Partial ( iChronology , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , iChronology ) ;
Distance : 2

65
Tree	Partial iChronology = new Partial ( newTypes , iChronology , iChronology ) ;
Code	Partial iChronology = new Partial ( newTypes , iChronology , iChronology ) ;
Distance : 2

66
Tree	Partial newPartial = new Partial ( iChronology , newValues , newPartial ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newPartial ) ;
Distance : 2

67
Tree	Partial newTypes = new Partial ( newPartial , newValues , newValues ) ;
Code	Partial newTypes = new Partial ( newPartial , newValues , newValues ) ;
Distance : 3

68
Tree	Partial newTypes = new Partial ( newValues , newTypes , iChronology ) ;
Code	Partial newTypes = new Partial ( newValues , newTypes , iChronology ) ;
Distance : 3

69
Tree	Partial newTypes = new Partial ( newPartial , iChronology , iChronology ) ;
Code	Partial newTypes = new Partial ( newPartial , iChronology , iChronology ) ;
Distance : 3

70
Tree	Partial newPartial = new Partial ( newValues , newTypes , newTypes ) ;
Code	Partial newPartial = new Partial ( newValues , newTypes , newTypes ) ;
Distance : 3

71
Tree	Partial iChronology = new Partial ( newValues , newValues , iChronology ) ;
Code	Partial iChronology = new Partial ( newValues , newValues , iChronology ) ;
Distance : 2

72
Tree	Partial newPartial = new Partial ( newPartial , newPartial , iChronology ) ;
Code	Partial newPartial = new Partial ( newPartial , newPartial , iChronology ) ;
Distance : 2

73
Tree	Partial newTypes = new Partial ( newValues , newValues , newValues ) ;
Code	Partial newTypes = new Partial ( newValues , newValues , newValues ) ;
Distance : 3

74
Tree	Partial newTypes = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newTypes = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

75
Tree	Partial newValues = new Partial ( newTypes , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( newTypes , iChronology , newValues ) ;
Distance : 3

76
Tree	Partial newPartial = new Partial ( newValues , newPartial , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , newPartial , newValues ) ;
Distance : 3

77
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newTypes ) ;
Distance : 3

78
Tree	Partial iChronology = new Partial ( newTypes , newTypes , iChronology ) ;
Code	Partial iChronology = new Partial ( newTypes , newTypes , iChronology ) ;
Distance : 2

79
Tree	Partial newValues = new Partial ( newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newValues ) ;
Distance : 3

80
Tree	Partial newTypes = new Partial ( newValues , newValues , newTypes ) ;
Code	Partial newTypes = new Partial ( newValues , newValues , newTypes ) ;
Distance : 3

81
Tree	Partial newTypes = new Partial ( newPartial , newTypes , iChronology ) ;
Code	Partial newTypes = new Partial ( newPartial , newTypes , iChronology ) ;
Distance : 3

82
Tree	Partial newValues = new Partial ( newValues , iChronology , iChronology ) ;
Code	Partial newValues = new Partial ( newValues , iChronology , iChronology ) ;
Distance : 3

83
Tree	Partial newValues = new Partial ( newTypes , newPartial , iChronology ) ;
Code	Partial newValues = new Partial ( newTypes , newPartial , iChronology ) ;
Distance : 2

84
Tree	Partial newPartial = new Partial ( newValues , iChronology , newPartial ) ;
Code	Partial newPartial = new Partial ( newValues , iChronology , newPartial ) ;
Distance : 3

85
Tree	Partial newPartial = new Partial ( newTypes , newPartial , newPartial ) ;
Code	Partial newPartial = new Partial ( newTypes , newPartial , newPartial ) ;
Distance : 2

86
Tree	Partial newPartial = new Partial ( newPartial , newTypes , newTypes ) ;
Code	Partial newPartial = new Partial ( newPartial , newTypes , newTypes ) ;
Distance : 3

87
Tree	Partial iChronology = new Partial ( newPartial , newValues , iChronology ) ;
Code	Partial iChronology = new Partial ( newPartial , newValues , iChronology ) ;
Distance : 2

88
Tree	Partial newValues = new Partial ( newTypes , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( newTypes , newTypes , newValues ) ;
Distance : 3

89
Tree	Partial newTypes = new Partial ( newTypes , newTypes , newTypes ) ;
Code	Partial newTypes = new Partial ( newTypes , newTypes , newTypes ) ;
Distance : 3

90
Tree	Partial newTypes = new Partial ( iChronology , newTypes , iChronology ) ;
Code	Partial newTypes = new Partial ( iChronology , newTypes , iChronology ) ;
Distance : 3

91
Tree	Partial newPartial = new Partial ( newPartial , newPartial , newValues ) ;
Code	Partial newPartial = new Partial ( newPartial , newPartial , newValues ) ;
Distance : 3

92
Tree	Partial newValues = new Partial ( newTypes , newValues , newPartial ) ;
Code	Partial newValues = new Partial ( newTypes , newValues , newPartial ) ;
Distance : 2

93
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newTypes ) ;
Distance : 3

94
Tree	Partial iChronology = new Partial ( newTypes , newValues , newTypes ) ;
Code	Partial iChronology = new Partial ( newTypes , newValues , newTypes ) ;
Distance : 2

95
Tree	Partial iChronology = new Partial ( iChronology , newValues , iChronology ) ;
Code	Partial iChronology = new Partial ( iChronology , newValues , iChronology ) ;
Distance : 2

96
Tree	Partial newTypes = new Partial ( newTypes , iChronology , newTypes ) ;
Code	Partial newTypes = new Partial ( newTypes , iChronology , newTypes ) ;
Distance : 3

97
Tree	Partial newPartial = new Partial ( newPartial , iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( newPartial , iChronology , newTypes ) ;
Distance : 3

98
Tree	Partial newTypes = new Partial ( newValues , iChronology , newValues ) ;
Code	Partial newTypes = new Partial ( newValues , iChronology , newValues ) ;
Distance : 4

99
Tree	Partial newTypes = new Partial ( newTypes , newPartial , newValues ) ;
Code	Partial newTypes = new Partial ( newTypes , newPartial , newValues ) ;
Distance : 3

100
Tree	Partial newPartial = new Partial ( iChronology , newPartial , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newPartial , newValues ) ;
Distance : 3

101
Tree	Partial newTypes = new Partial ( newPartial , newValues , newTypes ) ;
Code	Partial newTypes = new Partial ( newPartial , newValues , newTypes ) ;
Distance : 3

102
Tree	Partial newValues = new Partial ( newValues , newTypes , iChronology ) ;
Code	Partial newValues = new Partial ( newValues , newTypes , iChronology ) ;
Distance : 3

103
Tree	Partial newPartial = new Partial ( newValues , newTypes , newPartial ) ;
Code	Partial newPartial = new Partial ( newValues , newTypes , newPartial ) ;
Distance : 3

104
Tree	Partial newValues = new Partial ( newPartial , iChronology , iChronology ) ;
Code	Partial newValues = new Partial ( newPartial , iChronology , iChronology ) ;
Distance : 3

105
Tree	Partial newPartial = new Partial ( newPartial , iChronology , newPartial ) ;
Code	Partial newPartial = new Partial ( newPartial , iChronology , newPartial ) ;
Distance : 3

106
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

107
Tree	Partial newTypes = new Partial ( newTypes , iChronology , newPartial ) ;
Code	Partial newTypes = new Partial ( newTypes , iChronology , newPartial ) ;
Distance : 3

108
Tree	Partial iChronology = new Partial ( newTypes , iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( newTypes , iChronology , newValues ) ;
Distance : 3

109
Tree	Partial newTypes = new Partial ( iChronology , newValues , newTypes ) ;
Code	Partial newTypes = new Partial ( iChronology , newValues , newTypes ) ;
Distance : 3

110
Tree	Partial newTypes = new Partial ( newValues , newPartial , iChronology ) ;
Code	Partial newTypes = new Partial ( newValues , newPartial , iChronology ) ;
Distance : 3

111
Tree	Partial newValues = new Partial ( newTypes , iChronology , newTypes ) ;
Code	Partial newValues = new Partial ( newTypes , iChronology , newTypes ) ;
Distance : 3

112
Tree	Partial newValues = new Partial ( iChronology , iChronology , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , iChronology ) ;
Distance : 3

113
Tree	Partial newPartial = new Partial ( iChronology , iChronology , newPartial ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology , newPartial ) ;
Distance : 3

114
Tree	Partial newPartial = new Partial ( newValues , newPartial , newTypes ) ;
Code	Partial newPartial = new Partial ( newValues , newPartial , newTypes ) ;
Distance : 3

115
Tree	Partial newTypes = new Partial ( newValues , newTypes , newValues ) ;
Code	Partial newTypes = new Partial ( newValues , newTypes , newValues ) ;
Distance : 4

116
Tree	Partial newTypes = new Partial ( newPartial , iChronology , newValues ) ;
Code	Partial newTypes = new Partial ( newPartial , iChronology , newValues ) ;
Distance : 4

117
Tree	Partial newTypes = new Partial ( newValues , newValues , newPartial ) ;
Code	Partial newTypes = new Partial ( newValues , newValues , newPartial ) ;
Distance : 3

118
Tree	Partial iChronology = new Partial ( newValues , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( newValues , newValues , newValues ) ;
Distance : 3

119
Tree	Partial newValues = new Partial ( newValues , newValues , newTypes ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newTypes ) ;
Distance : 3

120
Tree	Partial iChronology = new Partial ( newValues , iChronology , iChronology ) ;
Code	Partial iChronology = new Partial ( newValues , iChronology , iChronology ) ;
Distance : 3

121
Tree	Partial newTypes = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial newTypes = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 4

122
Tree	Partial iChronology = new Partial ( newTypes , newPartial , iChronology ) ;
Code	Partial iChronology = new Partial ( newTypes , newPartial , iChronology ) ;
Distance : 2

123
Tree	Partial newValues = new Partial ( newPartial , newTypes , iChronology ) ;
Code	Partial newValues = new Partial ( newPartial , newTypes , iChronology ) ;
Distance : 3

124
Tree	Partial newPartial = new Partial ( newPartial , newTypes , newPartial ) ;
Code	Partial newPartial = new Partial ( newPartial , newTypes , newPartial ) ;
Distance : 3

125
Tree	Partial newTypes = new Partial ( newTypes , newTypes , newPartial ) ;
Code	Partial newTypes = new Partial ( newTypes , newTypes , newPartial ) ;
Distance : 3

126
Tree	Partial iChronology = new Partial ( newTypes , newTypes , newValues ) ;
Code	Partial iChronology = new Partial ( newTypes , newTypes , newValues ) ;
Distance : 3

127
Tree	Partial newValues = new Partial ( newTypes , newTypes , newTypes ) ;
Code	Partial newValues = new Partial ( newTypes , newTypes , newTypes ) ;
Distance : 3

128
Tree	Partial newTypes = new Partial ( newPartial , newPartial , iChronology ) ;
Code	Partial newTypes = new Partial ( newPartial , newPartial , iChronology ) ;
Distance : 3

129
Tree	Partial newValues = new Partial ( iChronology , newTypes , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , iChronology ) ;
Distance : 3

130
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newPartial ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newPartial ) ;
Distance : 3

131
Tree	Partial iChronology = new Partial ( newTypes , newValues , newPartial ) ;
Code	Partial iChronology = new Partial ( newTypes , newValues , newPartial ) ;
Distance : 2

132
Tree	Partial newPartial = new Partial ( newPartial , newPartial , newTypes ) ;
Code	Partial newPartial = new Partial ( newPartial , newPartial , newTypes ) ;
Distance : 3

133
Tree	Partial newTypes = new Partial ( newPartial , newTypes , newValues ) ;
Code	Partial newTypes = new Partial ( newPartial , newTypes , newValues ) ;
Distance : 4

134
Tree	Partial newValues = new Partial ( newValues , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( newValues , iChronology , newValues ) ;
Distance : 4

135
Tree	Partial newTypes = new Partial ( newValues , iChronology , newTypes ) ;
Code	Partial newTypes = new Partial ( newValues , iChronology , newTypes ) ;
Distance : 4

136
Tree	Partial newValues = new Partial ( newTypes , newPartial , newValues ) ;
Code	Partial newValues = new Partial ( newTypes , newPartial , newValues ) ;
Distance : 3

137
Tree	Partial newTypes = new Partial ( newTypes , newPartial , newTypes ) ;
Code	Partial newTypes = new Partial ( newTypes , newPartial , newTypes ) ;
Distance : 3

138
Tree	Partial newTypes = new Partial ( iChronology , newPartial , iChronology ) ;
Code	Partial newTypes = new Partial ( iChronology , newPartial , iChronology ) ;
Distance : 3

139
Tree	Partial newTypes = new Partial ( newPartial , newValues , newPartial ) ;
Code	Partial newTypes = new Partial ( newPartial , newValues , newPartial ) ;
Distance : 3

140
Tree	Partial iChronology = new Partial ( newPartial , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( newPartial , newValues , newValues ) ;
Distance : 3

141
Tree	Partial newPartial = new Partial ( iChronology , newPartial , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , newPartial , newTypes ) ;
Distance : 3

142
Tree	Partial iChronology = new Partial ( newValues , newTypes , iChronology ) ;
Code	Partial iChronology = new Partial ( newValues , newTypes , iChronology ) ;
Distance : 3

143
Tree	Partial newTypes = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newTypes = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 4

144
Tree	Partial newValues = new Partial ( newPartial , newValues , newTypes ) ;
Code	Partial newValues = new Partial ( newPartial , newValues , newTypes ) ;
Distance : 3

145
Tree	Partial iChronology = new Partial ( newPartial , iChronology , iChronology ) ;
Code	Partial iChronology = new Partial ( newPartial , iChronology , iChronology ) ;
Distance : 3

146
Tree	Partial newTypes = new Partial ( iChronology , newValues , newPartial ) ;
Code	Partial newTypes = new Partial ( iChronology , newValues , newPartial ) ;
Distance : 3

147
Tree	Partial iChronology = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

148
Tree	Partial newValues = new Partial ( newPartial , newValues , newValues ) ;
Code	Partial newValues = new Partial ( newPartial , newValues , newValues ) ;
Distance : 3

149
Tree	Partial newValues = new Partial ( newTypes , iChronology , newPartial ) ;
Code	Partial newValues = new Partial ( newTypes , iChronology , newPartial ) ;
Distance : 3

150
Tree	Partial iChronology = new Partial ( newTypes , iChronology , newTypes ) ;
Code	Partial iChronology = new Partial ( newTypes , iChronology , newTypes ) ;
Distance : 3

151
Tree	Partial newValues = new Partial ( newValues , newPartial , iChronology ) ;
Code	Partial newValues = new Partial ( newValues , newPartial , iChronology ) ;
Distance : 3

152
Tree	Partial newPartial = new Partial ( newValues , newPartial , newPartial ) ;
Code	Partial newPartial = new Partial ( newValues , newPartial , newPartial ) ;
Distance : 3

153
Tree	Partial newValues = new Partial ( newValues , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newTypes , newValues ) ;
Distance : 4

154
Tree	Partial newTypes = new Partial ( newValues , newTypes , newTypes ) ;
Code	Partial newTypes = new Partial ( newValues , newTypes , newTypes ) ;
Distance : 4

155
Tree	Partial newValues = new Partial ( newPartial , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( newPartial , iChronology , newValues ) ;
Distance : 4

156
Tree	Partial newTypes = new Partial ( newPartial , iChronology , newTypes ) ;
Code	Partial newTypes = new Partial ( newPartial , iChronology , newTypes ) ;
Distance : 4

157
Tree	Partial newValues = new Partial ( newValues , newValues , newPartial ) ;
Code	Partial newValues = new Partial ( newValues , newValues , newPartial ) ;
Distance : 3

158
Tree	Partial iChronology = new Partial ( newValues , newValues , newTypes ) ;
Code	Partial iChronology = new Partial ( newValues , newValues , newTypes ) ;
Distance : 3

159
Tree	Partial newTypes = new Partial ( newValues , newPartial , newValues ) ;
Code	Partial newTypes = new Partial ( newValues , newPartial , newValues ) ;
Distance : 4

160
Tree	Partial iChronology = new Partial ( newPartial , newTypes , iChronology ) ;
Code	Partial iChronology = new Partial ( newPartial , newTypes , iChronology ) ;
Distance : 3

161
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 4

162
Tree	Partial newTypes = new Partial ( iChronology , iChronology , newTypes ) ;
Code	Partial newTypes = new Partial ( iChronology , iChronology , newTypes ) ;
Distance : 4

163
Tree	Partial newValues = new Partial ( newTypes , newTypes , newPartial ) ;
Code	Partial newValues = new Partial ( newTypes , newTypes , newPartial ) ;
Distance : 3

164
Tree	Partial iChronology = new Partial ( newTypes , newTypes , newTypes ) ;
Code	Partial iChronology = new Partial ( newTypes , newTypes , newTypes ) ;
Distance : 3

165
Tree	Partial iChronology = new Partial ( iChronology , newTypes , iChronology ) ;
Code	Partial iChronology = new Partial ( iChronology , newTypes , iChronology ) ;
Distance : 3

166
Tree	Partial newValues = new Partial ( newPartial , newPartial , iChronology ) ;
Code	Partial newValues = new Partial ( newPartial , newPartial , iChronology ) ;
Distance : 3

167
Tree	Partial newPartial = new Partial ( newPartial , newPartial , newPartial ) ;
Code	Partial newPartial = new Partial ( newPartial , newPartial , newPartial ) ;
Distance : 3

168
Tree	Partial newTypes = new Partial ( newValues , iChronology , newPartial ) ;
Code	Partial newTypes = new Partial ( newValues , iChronology , newPartial ) ;
Distance : 4

169
Tree	Partial iChronology = new Partial ( newValues , iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( newValues , iChronology , newValues ) ;
Distance : 4

170
Tree	Partial newTypes = new Partial ( newTypes , newPartial , newPartial ) ;
Code	Partial newTypes = new Partial ( newTypes , newPartial , newPartial ) ;
Distance : 3

171
Tree	Partial newValues = new Partial ( newPartial , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( newPartial , newTypes , newValues ) ;
Distance : 4

172
Tree	Partial iChronology = new Partial ( iChronology , iChronology , iChronology ) ;
Code	Partial iChronology = new Partial ( iChronology , iChronology , iChronology ) ;
Distance : 3

173
Tree	Partial iChronology = new Partial ( newTypes , newPartial , newValues ) ;
Code	Partial iChronology = new Partial ( newTypes , newPartial , newValues ) ;
Distance : 3

174
Tree	Partial newTypes = new Partial ( newPartial , newTypes , newTypes ) ;
Code	Partial newTypes = new Partial ( newPartial , newTypes , newTypes ) ;
Distance : 4

175
Tree	Partial newValues = new Partial ( iChronology , newValues , newTypes ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newTypes ) ;
Distance : 3

176
Tree	Partial newValues = new Partial ( newTypes , newPartial , newTypes ) ;
Code	Partial newValues = new Partial ( newTypes , newPartial , newTypes ) ;
Distance : 3

177
Tree	Partial newValues = new Partial ( iChronology , newPartial , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newPartial , iChronology ) ;
Distance : 3

178
Tree	Partial newPartial = new Partial ( iChronology , newPartial , newPartial ) ;
Code	Partial newPartial = new Partial ( iChronology , newPartial , newPartial ) ;
Distance : 3

179
Tree	Partial newValues = new Partial ( newPartial , newValues , newPartial ) ;
Code	Partial newValues = new Partial ( newPartial , newValues , newPartial ) ;
Distance : 3

180
Tree	Partial iChronology = new Partial ( newPartial , newValues , newTypes ) ;
Code	Partial iChronology = new Partial ( newPartial , newValues , newTypes ) ;
Distance : 3

181
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 4

182
Tree	Partial newTypes = new Partial ( newPartial , newPartial , newValues ) ;
Code	Partial newTypes = new Partial ( newPartial , newPartial , newValues ) ;
Distance : 4

183
Tree	Partial newTypes = new Partial ( iChronology , newTypes , newTypes ) ;
Code	Partial newTypes = new Partial ( iChronology , newTypes , newTypes ) ;
Distance : 4

184
Tree	Partial newValues = new Partial ( iChronology , newValues , newPartial ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newPartial ) ;
Distance : 3

185
Tree	Partial iChronology = new Partial ( newTypes , iChronology , newPartial ) ;
Code	Partial iChronology = new Partial ( newTypes , iChronology , newPartial ) ;
Distance : 3

186
Tree	Partial newTypes = new Partial ( newTypes , newValues , newPartial ) ;
Code	Partial newTypes = new Partial ( newTypes , newValues , newPartial ) ;
Distance : 2

187
Tree	Partial iChronology = new Partial ( iChronology , newValues , newTypes ) ;
Code	Partial iChronology = new Partial ( iChronology , newValues , newTypes ) ;
Distance : 3

188
Tree	Partial newTypes = new Partial ( iChronology , newPartial , newValues ) ;
Code	Partial newTypes = new Partial ( iChronology , newPartial , newValues ) ;
Distance : 4

189
Tree	Partial newTypes = new Partial ( newValues , newTypes , newPartial ) ;
Code	Partial newTypes = new Partial ( newValues , newTypes , newPartial ) ;
Distance : 4

190
Tree	Partial iChronology = new Partial ( newValues , newTypes , newValues ) ;
Code	Partial iChronology = new Partial ( newValues , newTypes , newValues ) ;
Distance : 4

191
Tree	Partial newTypes = new Partial ( newPartial , iChronology , newPartial ) ;
Code	Partial newTypes = new Partial ( newPartial , iChronology , newPartial ) ;
Distance : 4

192
Tree	Partial iChronology = new Partial ( newPartial , iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( newPartial , iChronology , newValues ) ;
Distance : 4

193
Tree	Partial newValues = new Partial ( newValues , newTypes , newTypes ) ;
Code	Partial newValues = new Partial ( newValues , newTypes , newTypes ) ;
Distance : 4

194
Tree	Partial newValues = new Partial ( newPartial , iChronology , newTypes ) ;
Code	Partial newValues = new Partial ( newPartial , iChronology , newTypes ) ;
Distance : 4

195
Tree	Partial iChronology = new Partial ( newValues , newValues , newPartial ) ;
Code	Partial iChronology = new Partial ( newValues , newValues , newPartial ) ;
Distance : 3

196
Tree	Partial newTypes = new Partial ( iChronology , iChronology , newPartial ) ;
Code	Partial newTypes = new Partial ( iChronology , iChronology , newPartial ) ;
Distance : 4

197
Tree	Partial newValues = new Partial ( newValues , iChronology , newTypes ) ;
Code	Partial newValues = new Partial ( newValues , iChronology , newTypes ) ;
Distance : 4

198
Tree	Partial iChronology = new Partial ( newValues , newPartial , iChronology ) ;
Code	Partial iChronology = new Partial ( newValues , newPartial , iChronology ) ;
Distance : 3

199
Tree	Partial newValues = new Partial ( newValues , newPartial , newValues ) ;
Code	Partial newValues = new Partial ( newValues , newPartial , newValues ) ;
Distance : 4

========================================================================


