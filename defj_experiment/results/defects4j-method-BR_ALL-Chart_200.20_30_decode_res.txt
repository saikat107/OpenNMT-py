========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 30
Wrong
========================================================================
False

0
Tree	int
Code	int
Distance : 23

1
Tree	calendar
Code	calendar
Distance : 24

2
Tree	flag
Code	flag
Distance : 24

3
Tree	paint
Code	paint
Distance : 24

4
Tree	r1
Code	r1
Distance : 24

5
Tree	result
Code	result
Distance : 24

6
Tree	hashCode
Code	hashCode
Distance : 24

7
Tree	panel
Code	panel
Distance : 24

8
Tree	double
Code	double
Distance : 24

9
Tree	this
Code	this
Distance : 23

10
Tree	( value / value - - )
Code	( value / value - - )
Distance : 20

11
Tree	( value / value - ] )
Code	( value / value - ] )
Distance : 20

12
Tree	( ( / value - - )
Code	( ( / value - - )
Distance : 19

13
Tree	( value / value - ? )
Code	( value / value - ? )
Distance : 20

14
Tree	( int / value - ] )
Code	( int / value - ] )
Distance : 19

15
Tree	( value / value - + )
Code	( value / value - + )
Distance : 20

16
Tree	( value / value - >= )
Code	( value / value - >= )
Distance : 20

17
Tree	( value / value - <= )
Code	( value / value - <= )
Distance : 20

18
Tree	( value / value - [] )
Code	( value / value - [] )
Distance : 20

19
Tree	( int / value - ? )
Code	( int / value - ? )
Distance : 19

20
Tree	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

21
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

22
Tree	( int ) ( ( int - this . lowerBound ) / ( this . lowerBound - this . ) ) * NUMBER_CONSTANT )
Code	( int ) ( ( int - this . lowerBound ) / ( this . lowerBound - this . ) ) * NUMBER_CONSTANT )
Distance : 3

23
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . value ) * NUMBER_CONSTANT )
Distance : 2

24
Tree	( int ) ( ( int - this . lowerBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Code	( int ) ( ( int - this . lowerBound ) / ( this . lowerBound - this . value ) * NUMBER_CONSTANT )
Distance : 3

25
Tree	( int ) ( ( value - this . upperBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . upperBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

26
Tree	( int ) ( ( value - this . value ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . value ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

27
Tree	( int ) ( ( int - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( int - this . lowerBound ) / ( this . value - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

28
Tree	( int ) ( ( int - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( int - this . value ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

29
Tree	( double ) ( ( int - this . upperBound ) / ( this . lowerBound - this . ( ) * NUMBER_CONSTANT )
Code	( double ) ( ( int - this . upperBound ) / ( this . lowerBound - this . ( ) * NUMBER_CONSTANT )
Distance : 5

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 300
Wrong
========================================================================
False

0
Tree	{ super ( stroke ) ; this . value = paint ; }
Code	{ super ( stroke ) ; this . value = paint ; }
Distance : 9

1
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = paint ; }
Distance : 9

2
Tree	{ super ( STRING_CONSTANT ) ; this . value = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = paint ; }
Distance : 10

3
Tree	{ super ( value ) ; this . value = paint ; }
Code	{ super ( value ) ; this . value = paint ; }
Distance : 10

4
Tree	{ super ( stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke ) ; this . value = paint . clone () ; }
Distance : 12

5
Tree	{ super ( outlinePaint ) ; this . value = paint ; }
Code	{ super ( outlinePaint ) ; this . value = paint ; }
Distance : 9

6
Tree	{ super ( outlineStroke ) ; this . value = paint ; }
Code	{ super ( outlineStroke ) ; this . value = paint ; }
Distance : 9

7
Tree	{ super ( paint ) ; this . value = paint . clone () ; }
Code	{ super ( paint ) ; this . value = paint . clone () ; }
Distance : 12

8
Tree	{ super ( stroke ) ; this . value = paint ; if }
Code	{ super ( stroke ) ; this . value = paint ; if }
Distance : 10

9
Tree	{ super ( paint ) ; this . value = paint ; }
Code	{ super ( paint ) ; this . value = paint ; }
Distance : 9

10
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = paint . valueOf () ; }
Distance : 9

11
Tree	{ super ( paint , paint , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , paint , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 9

12
Tree	{ super ( stroke , outlinePaint , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , outlinePaint , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 8

13
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

14
Tree	{ super ( stroke , stroke , alpha ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , alpha ) ; this . value = paint . clone () ; }
Distance : 9

15
Tree	{ super ( stroke , stroke , value , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , value , stroke ) ; this . value = paint ; }
Distance : 6

16
Tree	{ super ( STRING_CONSTANT ) ; this . value = outlineStroke ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = outlineStroke ; }
Distance : 10

17
Tree	{ super ( stroke , outlineStroke , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlineStroke , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 5

18
Tree	{ super ( stroke ) ; this . value = new HashMap [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new HashMap [ NUMBER_CONSTANT ] ; }
Distance : 13

19
Tree	{ super ( stroke ) ; this . value = new java.util.ArrayList [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new java.util.ArrayList [ NUMBER_CONSTANT ] ; }
Distance : 13

20
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint . valueOf () ; }
Distance : 8

21
Tree	{ super ( paint , paint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , paint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 8

22
Tree	{ super ( stroke , outlinePaint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , outlinePaint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 7

23
Tree	{ super ( null , stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

24
Tree	{ super ( paint , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( paint , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 12

25
Tree	{ super ( stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 12

26
Tree	{ super ( null , stroke , outlineStroke , stroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlineStroke , stroke , stroke , stroke ) ; this . value = paint ; }
Distance : 7

27
Tree	{ super ( outlinePaint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( outlinePaint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 9

28
Tree	{ super ( stroke , paint ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , paint ) ; this . value = new int [] { outlineStroke } ; }
Distance : 13

29
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

30
Tree	{ super ( outlinePaint , stroke ) ; this . value = paint ; }
Code	{ super ( outlinePaint , stroke ) ; this . value = paint ; }
Distance : 8

31
Tree	{ super ( paint , outlinePaint ) ; this . value = paint ; }
Code	{ super ( paint , outlinePaint ) ; this . value = paint ; }
Distance : 7

32
Tree	{ super ( paint ) ; this . value = new GeneralPath ( outlinePaint ) ; }
Code	{ super ( paint ) ; this . value = new GeneralPath ( outlinePaint ) ; }
Distance : 13

33
Tree	{ super ( stroke , outlineStroke ) ; }
Code	{ super ( stroke , outlineStroke ) ; }
Distance : 12

34
Tree	{ super ( stroke , paint ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , paint ) ; this . value = paint . clone () ; }
Distance : 11

35
Tree	{ super ( paint ) ; this . value = new GeneralPath ( stroke ) ; }
Code	{ super ( paint ) ; this . value = new GeneralPath ( stroke ) ; }
Distance : 13

36
Tree	{ super ( stroke , stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , stroke ) ; this . value = paint . valueOf () ; }
Distance : 11

37
Tree	{ super ( paint , paint ) ; }
Code	{ super ( paint , paint ) ; }
Distance : 13

38
Tree	{ super ( stroke ) ; this . value = new java.util.ArrayList ( outlinePaint ) ; }
Code	{ super ( stroke ) ; this . value = new java.util.ArrayList ( outlinePaint ) ; }
Distance : 13

39
Tree	{ super ( stroke ) ; this . value = new java.util.ArrayList ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = new java.util.ArrayList ( stroke ) ; }
Distance : 13

40
Tree	{ super ( paint ) ; this . value = new GeneralPath ( paint ) ; }
Code	{ super ( paint ) ; this . value = new GeneralPath ( paint ) ; }
Distance : 13

41
Tree	{ super ( stroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 10

42
Tree	{ super ( stroke , outlinePaint ) ; }
Code	{ super ( stroke , outlinePaint ) ; }
Distance : 12

43
Tree	{ super ( paint ) ; this . value = new GeneralPath ( outlineStroke ) ; }
Code	{ super ( paint ) ; this . value = new GeneralPath ( outlineStroke ) ; }
Distance : 13

44
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . stroke = paint ; }
Distance : 10

45
Tree	{ super ( stroke , stroke ) ; this . value = zFormat ( stroke ) ; }
Code	{ super ( stroke , stroke ) ; this . value = zFormat ( stroke ) ; }
Distance : 11

46
Tree	{ super ( stroke , stroke ) ; this . value = Color.RED ( paint ) ; }
Code	{ super ( stroke , stroke ) ; this . value = Color.RED ( paint ) ; }
Distance : 11

47
Tree	{ super ( paint , paint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , paint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 11

48
Tree	{ super ( stroke ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new long [] { outlineStroke } ; }
Distance : 14

49
Tree	{ super ( stroke , stroke , outlinePaint ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlinePaint ) ; this . value = paint ; }
Distance : 6

50
Tree	{ super ( paint , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , stroke ) ; this . value = paint . clone () ; }
Distance : 10

51
Tree	{ super ( stroke , outlineStroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , outlineStroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 8

52
Tree	{ super ( value , stroke ) ; }
Code	{ super ( value , stroke ) ; }
Distance : 13

53
Tree	{ super ( paint ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( paint ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 14

54
Tree	{ super ( stroke , outlinePaint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlinePaint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

55
Tree	{ super ( stroke ? BasicStroke.CAP_ROUND : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? BasicStroke.CAP_ROUND : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

56
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 9

57
Tree	{ super ( stroke , stroke , value ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , value ) ; this . value = paint ; }
Distance : 7

58
Tree	{ super ( SeriesException , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( SeriesException , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

59
Tree	{ super ( stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 14

60
Tree	{ super ( value != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( value != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 9

61
Tree	{ super ( stroke , stroke ) ; this . value = paint . stroke () ; }
Code	{ super ( stroke , stroke ) ; this . value = paint . stroke () ; }
Distance : 11

62
Tree	{ super ( stroke ? [] : Year.MINIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? [] : Year.MINIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

63
Tree	{ super ( stroke , paint ) ; this . value = paint ; }
Code	{ super ( stroke , paint ) ; this . value = paint ; }
Distance : 8

64
Tree	{ super ( outlinePaint , stroke ) ; }
Code	{ super ( outlinePaint , stroke ) ; }
Distance : 13

65
Tree	{ super ( paint , paint ) ; this . value = paint . clone () ; }
Code	{ super ( paint , paint ) ; this . value = paint . clone () ; }
Distance : 11

66
Tree	{ super ( paint , outlineStroke ) ; }
Code	{ super ( paint , outlineStroke ) ; }
Distance : 12

67
Tree	{ super ( paint , outlinePaint ) ; }
Code	{ super ( paint , outlinePaint ) ; }
Distance : 12

68
Tree	{ super ( value ) ; this . value = stroke ; }
Code	{ super ( value ) ; this . value = stroke ; }
Distance : 10

69
Tree	{ super ( stroke , outlineStroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlineStroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

70
Tree	{ super ( stroke . createLineRegion () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . createLineRegion () , stroke ) ; this . value = paint ; }
Distance : 8

71
Tree	{ super ( stroke . getDefaultFillPaint () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . getDefaultFillPaint () , stroke ) ; this . value = paint ; }
Distance : 8

72
Tree	{ super ( Color.RED , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( Color.RED , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

73
Tree	{ super ( stroke ? && : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? && : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

74
Tree	{ super ( stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke ) ; this . value = paint . valueOf () ; }
Distance : 12

75
Tree	{ super ( [ , stroke ) ; this . value = paint ; }
Code	{ super ( [ , stroke ) ; this . value = paint ; }
Distance : 8

76
Tree	{ super ( stroke , stroke , alpha ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , alpha ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

77
Tree	{ super ( stroke , stroke ) ; this . value = paint . createNumberArray2D () ; }
Code	{ super ( stroke , stroke ) ; this . value = paint . createNumberArray2D () ; }
Distance : 11

78
Tree	{ super ( paint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 12

79
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlineStroke = paint ; }
Distance : 10

80
Tree	{ super ( paint , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( paint , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 12

81
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlinePaint = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . outlinePaint = paint ; }
Distance : 10

82
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . paint = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . paint = paint ; }
Distance : 10

83
Tree	{ super ( paint , stroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke ) ; this . value = paint ; }
Distance : 7

84
Tree	{ super ( stroke ) ; this . value = stroke ; }
Code	{ super ( stroke ) ; this . value = stroke ; }
Distance : 9

85
Tree	{ super ( STRING_CONSTANT ) ; this . stroke = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . stroke = paint ; }
Distance : 11

86
Tree	{ super ( super , stroke ) ; this . value = paint ; }
Code	{ super ( super , stroke ) ; this . value = paint ; }
Distance : 8

87
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

88
Tree	{ super ( value ) ; this . value = paint . clone () ; }
Code	{ super ( value ) ; this . value = paint . clone () ; }
Distance : 13

89
Tree	{ super ( stroke , stroke ) ; this . value = formatter ( stroke ) ; }
Code	{ super ( stroke , stroke ) ; this . value = formatter ( stroke ) ; }
Distance : 11

90
Tree	{ super ( stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

91
Tree	{ super ( STRING_CONSTANT ) ; this . paint = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . paint = paint ; }
Distance : 11

92
Tree	{ super ( [] , stroke ) ; this . value = paint ; }
Code	{ super ( [] , stroke ) ; this . value = paint ; }
Distance : 8

93
Tree	{ super ( STRING_CONSTANT ) ; this . outlineStroke = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . outlineStroke = paint ; }
Distance : 11

94
Tree	{ super ( outlinePaint ) ; this . value = stroke ; }
Code	{ super ( outlinePaint ) ; this . value = stroke ; }
Distance : 9

95
Tree	{ super ( paint ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( paint ) ; this . value = new double [] { outlineStroke } ; }
Distance : 14

96
Tree	{ super ( stroke ? ++ : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? ++ : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

97
Tree	{ super ( [ , stroke , outlinePaint ) ; this . value = paint ; }
Code	{ super ( [ , stroke , outlinePaint ) ; this . value = paint ; }
Distance : 6

98
Tree	{ super ( paint ) ; this . value = paint ; if }
Code	{ super ( paint ) ; this . value = paint ; if }
Distance : 10

99
Tree	{ super ( stroke ) ; this . value = paint . createNumberArray2D () ; }
Code	{ super ( stroke ) ; this . value = paint . createNumberArray2D () ; }
Distance : 12

100
Tree	{ super ( stroke ) ; this . value = paint . stroke () ; }
Code	{ super ( stroke ) ; this . value = paint . stroke () ; }
Distance : 12

101
Tree	{ super ( stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Distance : 12

102
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Distance : 8

103
Tree	{ super ( stroke , paint ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , paint ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

104
Tree	{ super ( stroke , outlinePaint ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , outlinePaint ) ; this . value = paint . clone () ; }
Distance : 10

105
Tree	{ super ( stroke , stroke ) ; }
Code	{ super ( stroke , stroke ) ; }
Distance : 13

106
Tree	{ super ( SeriesException , stroke ) ; this . value = paint ; }
Code	{ super ( SeriesException , stroke ) ; this . value = paint ; }
Distance : 8

107
Tree	{ super ( stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 12

108
Tree	{ super ( Color.BLUE , stroke ) ; this . value = paint ; }
Code	{ super ( Color.BLUE , stroke ) ; this . value = paint ; }
Distance : 8

109
Tree	{ super ( paint , paint , outlineStroke ) ; this . value = paint ; }
Code	{ super ( paint , paint , outlineStroke ) ; this . value = paint ; }
Distance : 6

110
Tree	{ super ( [ , outlinePaint ) ; this . value = paint ; }
Code	{ super ( [ , outlinePaint ) ; this . value = paint ; }
Distance : 8

111
Tree	{ super ( outlineStroke ) ; this . value = stroke ; }
Code	{ super ( outlineStroke ) ; this . value = stroke ; }
Distance : 9

112
Tree	{ super ( [ , paint ) ; this . value = paint ; }
Code	{ super ( [ , paint ) ; this . value = paint ; }
Distance : 9

113
Tree	{ super ( stroke , paint ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , paint ) ; this . value = paint . valueOf () ; }
Distance : 11

114
Tree	{ super ( stroke != null ? paint : outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke != null ? paint : outlineStroke ) ; this . value = paint ; }
Distance : 9

115
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

116
Tree	{ super ( stroke . min () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . min () , stroke ) ; this . value = paint ; }
Distance : 8

117
Tree	{ super ( stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke ) ; this . value = paint ; }
Distance : 8

118
Tree	{ super ( stroke != null ? outlineStroke : paint ) ; this . value = paint ; }
Code	{ super ( stroke != null ? outlineStroke : paint ) ; this . value = paint ; }
Distance : 8

119
Tree	{ super ( stroke != null ? outlineStroke : stroke ) ; this . value = paint ; }
Code	{ super ( stroke != null ? outlineStroke : stroke ) ; this . value = paint ; }
Distance : 8

120
Tree	{ super ( stroke ) ; this . value = paint ; false }
Code	{ super ( stroke ) ; this . value = paint ; false }
Distance : 10

121
Tree	{ super ( stroke . getX () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . getX () , stroke ) ; this . value = paint ; }
Distance : 8

122
Tree	{ super ( stroke , stroke , value , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , value , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

123
Tree	{ super ( stroke ) ; this . value = paint ; ObjectUtils }
Code	{ super ( stroke ) ; this . value = paint ; ObjectUtils }
Distance : 10

124
Tree	{ super ( stroke , outlineStroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlineStroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

125
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 8

126
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Distance : 8

127
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = paint . valueOf () ; }
Distance : 9

128
Tree	{ super ( STRING_CONSTANT ) ; this . alpha = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . alpha = paint ; }
Distance : 11

129
Tree	{ super ( STRING_CONSTANT ) ; this . value = outlinePaint ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = outlinePaint ; }
Distance : 10

130
Tree	{ super ( value ) ; this . value = paint ; if }
Code	{ super ( value ) ; this . value = paint ; if }
Distance : 11

131
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 5

132
Tree	{ super ( stroke , outlinePaint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlinePaint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 7

133
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = outlineStroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = outlineStroke ; }
Distance : 9

134
Tree	{ super ( BasicStroke.JOIN_BEVEL , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( BasicStroke.JOIN_BEVEL , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

135
Tree	{ super ( paint , paint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , paint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

136
Tree	{ super ( paint ) ; this . value = paint ; super }
Code	{ super ( paint ) ; this . value = paint ; super }
Distance : 10

137
Tree	{ super ( stroke . class () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . class () , stroke ) ; this . value = paint ; }
Distance : 8

138
Tree	{ super ( stroke , stroke , value ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , value ) ; this . value = paint . clone () ; }
Distance : 10

139
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 4

140
Tree	{ super ( null , stroke , outlineStroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlineStroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

141
Tree	{ super ( null , stroke , stroke , stroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , stroke , stroke , stroke , stroke ) ; this . value = paint ; }
Distance : 7

142
Tree	{ super ( null , stroke , stroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , stroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

143
Tree	{ super ( stroke ) ; this . value = paint ; catch }
Code	{ super ( stroke ) ; this . value = paint ; catch }
Distance : 10

144
Tree	{ super ( stroke ) ; this . value = paint ; null }
Code	{ super ( stroke ) ; this . value = paint ; null }
Distance : 10

145
Tree	{ super ( stroke , outlineStroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , outlineStroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 9

146
Tree	{ super ( null , stroke , outlinePaint , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlinePaint , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

147
Tree	{ super ( stroke , stroke , alpha , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , alpha , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

148
Tree	{ super ( stroke , outlinePaint , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlinePaint , outlineStroke ) ; this . value = paint ; }
Distance : 5

149
Tree	{ super ( stroke , stroke , alpha ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , alpha ) ; this . value = paint ; }
Distance : 6

150
Tree	{ super ( null , stroke , outlinePaint , stroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlinePaint , stroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

151
Tree	{ super ( stroke ) ; this . value = paint ; return }
Code	{ super ( stroke ) ; this . value = paint ; return }
Distance : 10

152
Tree	{ super ( stroke , paint ) ; }
Code	{ super ( stroke , paint ) ; }
Distance : 13

153
Tree	{ super ( paint ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 13

154
Tree	{ super ( outlineStroke != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( outlineStroke != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 9

155
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 10

156
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

157
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( outlineStroke ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( outlineStroke ) ; }
Distance : 13

158
Tree	{ super ( stroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke ) ; this . value = paint . clone () ; }
Distance : 11

159
Tree	{ super ( stroke ) ; this . value = formatter ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = formatter ( stroke ) ; }
Distance : 12

160
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 10

161
Tree	{ super ( paint , paint , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( paint , paint , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 5

162
Tree	{ super ( paint ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Code	{ super ( paint ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Distance : 12

163
Tree	{ super ( value , stroke ) ; this . value = paint ; }
Code	{ super ( value , stroke ) ; this . value = paint ; }
Distance : 8

164
Tree	{ super ( stroke , outlinePaint , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlinePaint , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 4

165
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 7

166
Tree	{ super ( stroke ) ; this . value = new Line2D.Double [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new Line2D.Double [ NUMBER_CONSTANT ] ; }
Distance : 13

167
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 10

168
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 10

169
Tree	{ super ( stroke ) ; this . value = new DialLayerChangeEvent [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new DialLayerChangeEvent [ NUMBER_CONSTANT ] ; }
Distance : 13

170
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 10

171
Tree	{ super ( [ , stroke , alpha ) ; this . value = paint ; }
Code	{ super ( [ , stroke , alpha ) ; this . value = paint ; }
Distance : 6

172
Tree	{ super ( stroke , paint , outlineStroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

173
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( paint ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( paint ) ; }
Distance : 13

174
Tree	{ super ( stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 14

175
Tree	{ super ( stroke , stroke , alpha , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , alpha , stroke ) ; this . value = paint ; }
Distance : 6

176
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = new long [] { outlineStroke } ; }
Distance : 10

177
Tree	{ super ( stroke != null ? outlineStroke : outlinePaint ) ; this . value = paint ; }
Code	{ super ( stroke != null ? outlineStroke : outlinePaint ) ; this . value = paint ; }
Distance : 8

178
Tree	{ super ( stroke != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 8

179
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 9

180
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

181
Tree	{ super ( value ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( value ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 14

182
Tree	{ super ( stroke != null ? outlineStroke : outlineStroke ) ; this . value = stroke ; }
Code	{ super ( stroke != null ? outlineStroke : outlineStroke ) ; this . value = stroke ; }
Distance : 8

183
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

184
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 9

185
Tree	{ super ( paint , outlineStroke ) ; this . value = paint ; }
Code	{ super ( paint , outlineStroke ) ; this . value = paint ; }
Distance : 7

186
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 10

187
Tree	{ super ( stroke ) ; this . value = new BasicStroke [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new BasicStroke [ NUMBER_CONSTANT ] ; }
Distance : 13

188
Tree	{ super ( outlinePaint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( outlinePaint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 12

189
Tree	{ super ( paint . valueOf () , stroke ) ; this . value = paint ; }
Code	{ super ( paint . valueOf () , stroke ) ; this . value = paint ; }
Distance : 8

190
Tree	{ super ( stroke . getMessage () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . getMessage () , stroke ) ; this . value = paint ; }
Distance : 8

191
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 10

192
Tree	{ super ( stroke . toolTipText () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . toolTipText () , stroke ) ; this . value = paint ; }
Distance : 8

193
Tree	{ super ( [ , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( [ , stroke , stroke ) ; this . value = paint ; }
Distance : 7

194
Tree	{ super ( stroke , stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Code	{ super ( stroke , stroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Distance : 11

195
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . alpha = paint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . alpha = paint ; }
Distance : 10

196
Tree	{ super ( super , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( super , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

197
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = outlinePaint ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = outlinePaint ; }
Distance : 9

198
Tree	{ super ( [] , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( [] , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

199
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 5

200
Tree	{ super ( paint ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( paint ) ; this . value = new int [] { outlineStroke } ; }
Distance : 14

201
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 9

202
Tree	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( paint , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 7

203
Tree	{ super ( stroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

204
Tree	{ super ( stroke , outlinePaint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlinePaint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

205
Tree	{ super ( stroke ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath [ NUMBER_CONSTANT ] ; }
Distance : 13

206
Tree	{ super ( stroke ) ; this . value = paint ; super }
Code	{ super ( stroke ) ; this . value = paint ; super }
Distance : 10

207
Tree	{ super ( Color.RED , stroke ) ; this . value = paint ; }
Code	{ super ( Color.RED , stroke ) ; this . value = paint ; }
Distance : 8

208
Tree	{ super ( null , stroke , outlineStroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlineStroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

209
Tree	{ super ( STRING_CONSTANT ) ; this . value = value ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = value ; }
Distance : 9

210
Tree	{ super ( stroke ) ; this . value = new boolean [] { outlinePaint } ; }
Code	{ super ( stroke ) ; this . value = new boolean [] { outlinePaint } ; }
Distance : 14

211
Tree	{ super ( paint ) ; this . value = paint . valueOf () ; }
Code	{ super ( paint ) ; this . value = paint . valueOf () ; }
Distance : 12

212
Tree	{ super ( stroke , stroke , value ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke , value ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

213
Tree	{ super ( stroke . valueOf () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . valueOf () , stroke ) ; this . value = paint ; }
Distance : 8

214
Tree	{ super ( outlinePaint ) ; this . value = paint . clone () ; }
Code	{ super ( outlinePaint ) ; this . value = paint . clone () ; }
Distance : 12

215
Tree	{ super ( paint ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( paint ) ; this . value = new long [] { outlineStroke } ; }
Distance : 14

216
Tree	{ super ( stroke ? [] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? [] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

217
Tree	{ super ( stroke ) ; this . value = paint . readStroke () ; }
Code	{ super ( stroke ) ; this . value = paint . readStroke () ; }
Distance : 12

218
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 11

219
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 11

220
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 8

221
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 11

222
Tree	{ super ( SeriesException , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( SeriesException , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

223
Tree	{ super ( paint ) ; this . value = stroke ; }
Code	{ super ( paint ) ; this . value = stroke ; }
Distance : 9

224
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 11

225
Tree	{ super ( paint ) ; this . value = new HashMap [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new HashMap [ NUMBER_CONSTANT ] ; }
Distance : 13

226
Tree	{ super ( paint ) ; this . value = new java.util.ArrayList [ NUMBER_CONSTANT ] ; }
Code	{ super ( paint ) ; this . value = new java.util.ArrayList [ NUMBER_CONSTANT ] ; }
Distance : 13

227
Tree	{ super ( stroke ) ; this . value = new double [] { outlinePaint } ; }
Code	{ super ( stroke ) ; this . value = new double [] { outlinePaint } ; }
Distance : 14

228
Tree	{ super ( stroke ) ; this . value = paint . getX () ; }
Code	{ super ( stroke ) ; this . value = paint . getX () ; }
Distance : 12

229
Tree	{ super ( null , stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

230
Tree	{ super ( [ , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( [ , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

231
Tree	{ super ( BasicStroke.JOIN_BEVEL , stroke ) ; this . value = paint ; }
Code	{ super ( BasicStroke.JOIN_BEVEL , stroke ) ; this . value = paint ; }
Distance : 8

232
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

233
Tree	{ super ( paint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Code	{ super ( paint != null ? outlineStroke : outlineStroke ) ; this . value = paint ; }
Distance : 8

234
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = new long [] { outlineStroke } ; }
Distance : 11

235
Tree	{ super ( stroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

236
Tree	{ super ( stroke . getBase () , stroke ) ; this . value = paint ; }
Code	{ super ( stroke . getBase () , stroke ) ; this . value = paint ; }
Distance : 8

237
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 11

238
Tree	{ super ( BasicStroke.CAP_ROUND , stroke ) ; this . value = paint ; }
Code	{ super ( BasicStroke.CAP_ROUND , stroke ) ; this . value = paint ; }
Distance : 8

239
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 10

240
Tree	{ super ( paint , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( paint , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 5

241
Tree	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . valueOf () ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke ) ; this . value = paint . valueOf () ; }
Distance : 8

242
Tree	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , paint , outlineStroke , stroke ) ; this . value = paint . clone () ; }
Distance : 8

243
Tree	{ super ( stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 5

244
Tree	{ super ( stroke , stroke , value ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , stroke , value ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 12

245
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 8

246
Tree	{ super ( stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlineStroke ) ; this . value = paint ; }
Distance : 7

247
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( outlinePaint ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( outlinePaint ) ; }
Distance : 13

248
Tree	{ super ( stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

249
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 10

250
Tree	{ super ( [ , paint , outlineStroke ) ; this . value = paint ; }
Code	{ super ( [ , paint , outlineStroke ) ; this . value = paint ; }
Distance : 7

251
Tree	{ super ( stroke , outlinePaint ) ; this . value = paint ; }
Code	{ super ( stroke , outlinePaint ) ; this . value = paint ; }
Distance : 7

252
Tree	{ super ( STRING_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( STRING_CONSTANT ) ; this . value = stroke ; }
Distance : 10

253
Tree	{ super ( stroke ) ; this . value = Color.RED ( paint ) ; }
Code	{ super ( stroke ) ; this . value = Color.RED ( paint ) ; }
Distance : 12

254
Tree	{ super ( paint , paint ) ; this . value = paint ; }
Code	{ super ( paint , paint ) ; this . value = paint ; }
Distance : 8

255
Tree	{ super ( STRING_CONSTANT ) ; this . outlinePaint = paint ; }
Code	{ super ( STRING_CONSTANT ) ; this . outlinePaint = paint ; }
Distance : 11

256
Tree	{ super ( stroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 11

257
Tree	{ super ( stroke ) ; this . value = zFormat ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = zFormat ( stroke ) ; }
Distance : 12

258
Tree	{ super ( [ , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( [ , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

259
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = paint ; }
Distance : 6

260
Tree	{ super ( stroke , paint ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , paint ) ; this . value = Color.RED ( stroke ) ; }
Distance : 11

261
Tree	{ super ( paint , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

262
Tree	{ super ( stroke ) ; this . value = Color.RED ( outlinePaint ) ; }
Code	{ super ( stroke ) ; this . value = Color.RED ( outlinePaint ) ; }
Distance : 12

263
Tree	{ super ( super , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( super , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

264
Tree	{ super ( stroke , paint , outlineStroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , paint , outlineStroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 11

265
Tree	{ super ( stroke ) ; this . value = new GeneralPath ( stroke ) ; }
Code	{ super ( stroke ) ; this . value = new GeneralPath ( stroke ) ; }
Distance : 13

266
Tree	{ super ( paint ? [] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( paint ? [] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

267
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = getDefaultShadowsVisible ( stroke ) ; }
Distance : 9

268
Tree	{ super ( stroke ? BasicStroke.JOIN_BEVEL : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? BasicStroke.JOIN_BEVEL : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

269
Tree	{ super ( [ , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( [ , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

270
Tree	{ super ( stroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 13

271
Tree	{ super ( super , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( super , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

272
Tree	{ super ( null , stroke , outlinePaint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( null , stroke , outlinePaint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 5

273
Tree	{ super ( paint , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( paint , stroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 4

274
Tree	{ super ( Color.RED , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( Color.RED , stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

275
Tree	{ super ( stroke ? ] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? ] : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

276
Tree	{ super ( value ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( value ) ; this . value = Color.RED ( stroke ) ; }
Distance : 13

277
Tree	{ super ( [ , stroke ) ; this . value = new int [] { outlineStroke } ; }
Code	{ super ( [ , stroke ) ; this . value = new int [] { outlineStroke } ; }
Distance : 13

278
Tree	{ super ( [] , stroke ) ; this . value = new double [] { outlineStroke } ; }
Code	{ super ( [] , stroke ) ; this . value = new double [] { outlineStroke } ; }
Distance : 13

279
Tree	{ super ( stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 14

280
Tree	{ super ( stroke , stroke ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( stroke , stroke ) ; this . value = new long [] { outlineStroke } ; }
Distance : 13

281
Tree	{ super ( stroke ? Year.MINIMUM_YEAR : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? Year.MINIMUM_YEAR : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

282
Tree	{ super ( [ , stroke ) ; this . value = new long [] { outlineStroke } ; }
Code	{ super ( [ , stroke ) ; this . value = new long [] { outlineStroke } ; }
Distance : 13

283
Tree	{ super ( [] , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( [] , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 6

284
Tree	{ super ( stroke , stroke , value , stroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , value , stroke ) ; this . value = paint . clone () ; }
Distance : 9

285
Tree	{ super ( stroke , outlineStroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( stroke , outlineStroke , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

286
Tree	{ super ( paint , paint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , paint , outlineStroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 9

287
Tree	{ super ( stroke , stroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , stroke , outlineStroke ) ; this . value = paint ; }
Distance : 5

288
Tree	{ super ( stroke , stroke , outlineStroke ) ; this . value = zFormat ( stroke ) ; }
Code	{ super ( stroke , stroke , outlineStroke ) ; this . value = zFormat ( stroke ) ; }
Distance : 9

289
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = paint . clone () ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke ) ; this . value = paint . clone () ; }
Distance : 8

290
Tree	{ super ( paint , stroke ) ; this . value = Color.RED ( stroke ) ; }
Code	{ super ( paint , stroke ) ; this . value = Color.RED ( stroke ) ; }
Distance : 10

291
Tree	{ super ( stroke ? BasicStroke : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Code	{ super ( stroke ? BasicStroke : Year.MAXIMUM_YEAR ) ; this . value = paint ; }
Distance : 9

292
Tree	{ super ( stroke , stroke , outlineStroke , outlineStroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , outlineStroke , stroke ) ; this . value = paint ; }
Distance : 4

293
Tree	{ super ( stroke , outlineStroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlineStroke , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

294
Tree	{ super ( stroke , paint ) ; this . value = new boolean [] { outlineStroke } ; }
Code	{ super ( stroke , paint ) ; this . value = new boolean [] { outlineStroke } ; }
Distance : 13

295
Tree	{ super ( stroke , stroke , value , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , value , stroke , stroke ) ; this . value = paint ; }
Distance : 5

296
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = stroke ; }
Distance : 9

297
Tree	{ super ( paint , stroke , value ) ; this . value = paint ; }
Code	{ super ( paint , stroke , value ) ; this . value = paint ; }
Distance : 6

298
Tree	{ super ( stroke , outlinePaint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , outlinePaint , outlineStroke , stroke , stroke ) ; this . value = paint ; }
Distance : 6

299
Tree	{ super ( stroke , stroke , outlineStroke , paint , stroke ) ; this . value = paint ; }
Code	{ super ( stroke , stroke , outlineStroke , paint , stroke ) ; this . value = paint ; }
Distance : 5

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 340
Wrong
========================================================================
False

0
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

1
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

2
Tree	if ( index . calculatePieDatasetTotal ( index ) ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index ) ) { return; }
Distance : 14

3
Tree	if ( index != that.zValues ) { return; }
Code	if ( index != that.zValues ) { return; }
Distance : 13

4
Tree	if ( index . getKey () ) { return; }
Code	if ( index . getKey () ) { return; }
Distance : 14

5
Tree	if ( ! index . isEmptyOrNull ( index ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( index ) ) { return; }
Distance : 15

6
Tree	if ( ! key . isOrsonPDFAvailable ( index ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( index ) ) { return; }
Distance : 15

7
Tree	if ( ! index . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

8
Tree	if ( index . getKey ( index ) == null ) { return; }
Code	if ( index . getKey ( index ) == null ) { return; }
Distance : 14

9
Tree	if ( ! index . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

10
Tree	if ( index . getVisibleSeriesArray ( index ) ) { return; }
Code	if ( index . getVisibleSeriesArray ( index ) ) { return; }
Distance : 14

11
Tree	if ( index > index ) { return; }
Code	if ( index > index ) { return; }
Distance : 13

12
Tree	if ( index . that.zValues ( index ) ) { return; }
Code	if ( index . that.zValues ( index ) ) { return; }
Distance : 14

13
Tree	if ( index . defaultOutlinePaint ( index ) ) { return; }
Code	if ( index . defaultOutlinePaint ( index ) ) { return; }
Distance : 14

14
Tree	if ( index . calculateColumnTotal () ) { return; }
Code	if ( index . calculateColumnTotal () ) { return; }
Distance : 14

15
Tree	if ( index . calculateColumnTotal ( index ) ) { return; }
Code	if ( index . calculateColumnTotal ( index ) ) { return; }
Distance : 14

16
Tree	if ( index . calculatePieDatasetTotal () ) { return; }
Code	if ( index . calculatePieDatasetTotal () ) { return; }
Distance : 14

17
Tree	if ( index . getVisibleSeriesArray () ) { return; }
Code	if ( index . getVisibleSeriesArray () ) { return; }
Distance : 14

18
Tree	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.GRAY , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.GRAY , index , key ) ; }
Distance : 8

19
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; null }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; null }
Distance : 11

20
Tree	if ( index . Number () ) { return; }
Code	if ( index . Number () ) { return; }
Distance : 14

21
Tree	if ( index . calculatePieDatasetTotal ( index , false ) ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index , false ) ) { return; }
Distance : 14

22
Tree	if ( ! Year.MINIMUM_YEAR () ) { return; }
Code	if ( ! Year.MINIMUM_YEAR () ) { return; }
Distance : 14

23
Tree	if ( ! getKey () ) { return; }
Code	if ( ! getKey () ) { return; }
Distance : 14

24
Tree	if ( ! createXYAreaChart () ) { return; }
Code	if ( ! createXYAreaChart () ) { return; }
Distance : 14

25
Tree	if ( TextAnchor.CENTER () ) { return; }
Code	if ( TextAnchor.CENTER () ) { return; }
Distance : 14

26
Tree	if ( ! IllegalStateException () ) { return; }
Code	if ( ! IllegalStateException () ) { return; }
Distance : 14

27
Tree	if ( ! key . isOrsonPDFAvailable () ) { return; }
Code	if ( ! key . isOrsonPDFAvailable () ) { return; }
Distance : 16

28
Tree	if ( Color.BLACK () == null ) { return; }
Code	if ( Color.BLACK () == null ) { return; }
Distance : 15

29
Tree	if ( index . that.zValues ( index ) == null ) { return; }
Code	if ( index . that.zValues ( index ) == null ) { return; }
Distance : 14

30
Tree	if ( ! index . getFirstMillisecond ( index ) ) { return; }
Code	if ( ! index . getFirstMillisecond ( index ) ) { return; }
Distance : 15

31
Tree	if ( index . defaultOutlinePaint ( index ) == null ) { return; }
Code	if ( index . defaultOutlinePaint ( index ) == null ) { return; }
Distance : 14

32
Tree	if ( Color.GRAY () == null ) { return; }
Code	if ( Color.GRAY () == null ) { return; }
Distance : 15

33
Tree	if ( ! index . containsInstanceOf ( index ) ) { return; }
Code	if ( ! index . containsInstanceOf ( index ) ) { return; }
Distance : 15

34
Tree	if ( index . getEntities ( index ) == null ) { return; }
Code	if ( index . getEntities ( index ) == null ) { return; }
Distance : 14

35
Tree	if ( ! index . getDataset ( index ) ) { return; }
Code	if ( ! index . getDataset ( index ) ) { return; }
Distance : 15

36
Tree	if ( ! index . isOrsonPDFAvailable ( index , true ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( index , true ) ) { return; }
Distance : 15

37
Tree	if ( isRangeCrosshairVisible ( index ) ) { return; }
Code	if ( isRangeCrosshairVisible ( index ) ) { return; }
Distance : 15

38
Tree	if ( ! StandardURLTagFragmentGenerator () ) { return; }
Code	if ( ! StandardURLTagFragmentGenerator () ) { return; }
Distance : 14

39
Tree	if ( index . RectangleEdge ( index ) == null ) { return; }
Code	if ( index . RectangleEdge ( index ) == null ) { return; }
Distance : 14

40
Tree	if ( ! index . hashCode ( index ) ) { return; }
Code	if ( ! index . hashCode ( index ) ) { return; }
Distance : 15

41
Tree	if ( index . calculateColumnTotal () == null ) { return; }
Code	if ( index . calculateColumnTotal () == null ) { return; }
Distance : 15

42
Tree	if ( ! hasUniqueID ( index , key ) ) { return; }
Code	if ( ! hasUniqueID ( index , key ) ) { return; }
Distance : 14

43
Tree	if ( index . MonthDateFormat () ) { return; }
Code	if ( index . MonthDateFormat () ) { return; }
Distance : 14

44
Tree	if ( index . that.zValues () ) { return; }
Code	if ( index . that.zValues () ) { return; }
Distance : 14

45
Tree	if ( index . RectangleEdge ( index ) ) { return; }
Code	if ( index . RectangleEdge ( index ) ) { return; }
Distance : 14

46
Tree	if ( index . calculateColumnTotal ( index , false ) ) { return; }
Code	if ( index . calculateColumnTotal ( index , false ) ) { return; }
Distance : 14

47
Tree	if ( index . defaultOutlinePaint () ) { return; }
Code	if ( index . defaultOutlinePaint () ) { return; }
Distance : 14

48
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

49
Tree	if ( index . getEntities ( index ) ) { return; }
Code	if ( index . getEntities ( index ) ) { return; }
Distance : 14

50
Tree	if ( index < NUMBER_CONSTANT ) { key = null ; null }
Code	if ( index < NUMBER_CONSTANT ) { key = null ; null }
Distance : 10

51
Tree	if ( index > key ) { return; }
Code	if ( index > key ) { return; }
Distance : 13

52
Tree	if ( ! IllegalArgumentException ( index , key ) ) { return; }
Code	if ( ! IllegalArgumentException ( index , key ) ) { return; }
Distance : 14

53
Tree	if ( ! hasUniqueID ( index ) ) { return; }
Code	if ( ! hasUniqueID ( index ) ) { return; }
Distance : 15

54
Tree	if ( Color.GRAY ( index ) ) { return; }
Code	if ( Color.GRAY ( index ) ) { return; }
Distance : 15

55
Tree	if ( index != null ) { } }
Code	if ( index != null ) { } }
Distance : 13

56
Tree	if ( index > key ) { super(); }
Code	if ( index > key ) { super(); }
Distance : 13

57
Tree	if ( index >= NUMBER_CONSTANT ) { null }
Code	if ( index >= NUMBER_CONSTANT ) { null }
Distance : 12

58
Tree	if ( getText ( index ) ) { return; }
Code	if ( getText ( index ) ) { return; }
Distance : 15

59
Tree	if ( key != null ) { return; }
Code	if ( key != null ) { return; }
Distance : 14

60
Tree	if ( index < NUMBER_CONSTANT ) { return; } renderer
Code	if ( index < NUMBER_CONSTANT ) { return; } renderer
Distance : 12

61
Tree	if ( Color.GRAY () ) { return; }
Code	if ( Color.GRAY () ) { return; }
Distance : 14

62
Tree	if ( ! SeriesException ( index , key ) ) { return; }
Code	if ( ! SeriesException ( index , key ) ) { return; }
Distance : 14

63
Tree	if ( index < NUMBER_CONSTANT ) { { }
Code	if ( index < NUMBER_CONSTANT ) { { }
Distance : 11

64
Tree	if ( index . getVisibleSeriesArray ( index ) == null ) { return; }
Code	if ( index . getVisibleSeriesArray ( index ) == null ) { return; }
Distance : 14

65
Tree	if ( index < NUMBER_CONSTANT ) { return; } put
Code	if ( index < NUMBER_CONSTANT ) { return; } put
Distance : 12

66
Tree	if ( index . RectangleEdge ( index , false ) ) { return; }
Code	if ( index . RectangleEdge ( index , false ) ) { return; }
Distance : 14

67
Tree	if ( key < NUMBER_CONSTANT ) { null }
Code	if ( key < NUMBER_CONSTANT ) { null }
Distance : 12

68
Tree	if ( index . getKey ( index ) ) { return; }
Code	if ( index . getKey ( index ) ) { return; }
Distance : 14

69
Tree	if ( ! index . isOrsonPDFAvailable ( index , false ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( index , false ) ) { return; }
Distance : 15

70
Tree	if ( index . Number ( index ) ) { return; }
Code	if ( index . Number ( index ) ) { return; }
Distance : 14

71
Tree	if ( key < NUMBER_CONSTANT ) { super(); }
Code	if ( key < NUMBER_CONSTANT ) { super(); }
Distance : 12

72
Tree	if ( index . getEntities ( index , false ) ) { return; }
Code	if ( index . getEntities ( index , false ) ) { return; }
Distance : 14

73
Tree	if ( index . getKey ( index , false ) ) { return; }
Code	if ( index . getKey ( index , false ) ) { return; }
Distance : 14

74
Tree	if ( index <= NUMBER_CONSTANT ) { if }
Code	if ( index <= NUMBER_CONSTANT ) { if }
Distance : 12

75
Tree	if ( index != null && index < NUMBER_CONSTANT ) { null }
Code	if ( index != null && index < NUMBER_CONSTANT ) { null }
Distance : 15

76
Tree	if ( index != index ) { null }
Code	if ( index != index ) { null }
Distance : 13

77
Tree	if ( this == index ) { return; }
Code	if ( this == index ) { return; }
Distance : 14

78
Tree	if ( ! index ( key ) ) { super(); }
Code	if ( ! index ( key ) ) { super(); }
Distance : 14

79
Tree	if ( key != index ) { return; }
Code	if ( key != index ) { return; }
Distance : 14

80
Tree	if ( this == key ) { null }
Code	if ( this == key ) { null }
Distance : 14

81
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

82
Tree	if ( index > index ) { null }
Code	if ( index > index ) { null }
Distance : 13

83
Tree	if ( index != return; && index < NUMBER_CONSTANT ) { return; }
Code	if ( index != return; && index < NUMBER_CONSTANT ) { return; }
Distance : 15

84
Tree	if ( index > key ) { null }
Code	if ( index > key ) { null }
Distance : 13

85
Tree	if ( index . Number ( index ) == null ) { return; }
Code	if ( index . Number ( index ) == null ) { return; }
Distance : 14

86
Tree	if ( index != null && key < NUMBER_CONSTANT ) { super(); }
Code	if ( index != null && key < NUMBER_CONSTANT ) { super(); }
Distance : 14

87
Tree	if ( index . MonthDateFormat ( index ) == null ) { return; }
Code	if ( index . MonthDateFormat ( index ) == null ) { return; }
Distance : 14

88
Tree	if ( index . Number ( index , false ) ) { return; }
Code	if ( index . Number ( index , false ) ) { return; }
Distance : 14

89
Tree	if ( TextAnchor.CENTER != null ) { return; }
Code	if ( TextAnchor.CENTER != null ) { return; }
Distance : 14

90
Tree	if ( ! StandardURLTagFragmentGenerator ( STRING_CONSTANT ) ) { return; }
Code	if ( ! StandardURLTagFragmentGenerator ( STRING_CONSTANT ) ) { return; }
Distance : 14

91
Tree	if ( true != null ) { return; }
Code	if ( true != null ) { return; }
Distance : 14

92
Tree	if ( ! BasicStroke ( STRING_CONSTANT ) ) { return; }
Code	if ( ! BasicStroke ( STRING_CONSTANT ) ) { return; }
Distance : 14

93
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; return; }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; return; }
Distance : 11

94
Tree	if ( key != index ) { super(); }
Code	if ( key != index ) { super(); }
Distance : 14

95
Tree	if ( index != null ) { null }
Code	if ( index != null ) { null }
Distance : 13

96
Tree	if ( float () == null ) { return; }
Code	if ( float () == null ) { return; }
Distance : 15

97
Tree	if ( this == key ) { super(); }
Code	if ( this == key ) { super(); }
Distance : 14

98
Tree	if ( index <= NUMBER_CONSTANT ) { super(); }
Code	if ( index <= NUMBER_CONSTANT ) { super(); }
Distance : 12

99
Tree	if ( index . getVisibleSeriesArray ( index , true ) ) { return; }
Code	if ( index . getVisibleSeriesArray ( index , true ) ) { return; }
Distance : 14

100
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

101
Tree	if ( Color.BLACK () ) { return; }
Code	if ( Color.BLACK () ) { return; }
Distance : 14

102
Tree	if ( ! key . isEmptyOrNull () ) { return; }
Code	if ( ! key . isEmptyOrNull () ) { return; }
Distance : 16

103
Tree	if ( getText () == null ) { return; }
Code	if ( getText () == null ) { return; }
Distance : 15

104
Tree	if ( index <= NUMBER_CONSTANT ) { null }
Code	if ( index <= NUMBER_CONSTANT ) { null }
Distance : 12

105
Tree	if ( index () == null ) { return; }
Code	if ( index () == null ) { return; }
Distance : 14

106
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

107
Tree	if ( isRangeCrosshairVisible != null ) { return; }
Code	if ( isRangeCrosshairVisible != null ) { return; }
Distance : 14

108
Tree	if ( index . MonthDateFormat ( index ) ) { return; }
Code	if ( index . MonthDateFormat ( index ) ) { return; }
Distance : 14

109
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

110
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

111
Tree	if ( ! hasUniqueID () ) { return; }
Code	if ( ! hasUniqueID () ) { return; }
Distance : 14

112
Tree	if ( Color.BLACK != null ) { return; }
Code	if ( Color.BLACK != null ) { return; }
Distance : 14

113
Tree	if ( Color.ORANGE () == null ) { return; }
Code	if ( Color.ORANGE () == null ) { return; }
Distance : 15

114
Tree	if ( index != >= ) { return; }
Code	if ( index != >= ) { return; }
Distance : 13

115
Tree	if ( index . RectangleEdge () ) { return; }
Code	if ( index . RectangleEdge () ) { return; }
Distance : 14

116
Tree	if ( ! SeriesException ( index ) ) { return; }
Code	if ( ! SeriesException ( index ) ) { return; }
Distance : 15

117
Tree	if ( index . defaultOutlinePaint () == null ) { return; }
Code	if ( index . defaultOutlinePaint () == null ) { return; }
Distance : 15

118
Tree	if ( ! index . getFirstMillisecond () ) { return; }
Code	if ( ! index . getFirstMillisecond () ) { return; }
Distance : 15

119
Tree	if ( isRangeCrosshairVisible () ) { return; }
Code	if ( isRangeCrosshairVisible () ) { return; }
Distance : 14

120
Tree	if ( index . getVisibleSeriesArray () == null ) { return; }
Code	if ( index . getVisibleSeriesArray () == null ) { return; }
Distance : 15

121
Tree	if ( index . calculatePieDatasetTotal () == null ) { return; }
Code	if ( index . calculatePieDatasetTotal () == null ) { return; }
Distance : 15

122
Tree	if ( ! IllegalArgumentException () ) { return; }
Code	if ( ! IllegalArgumentException () ) { return; }
Distance : 14

123
Tree	if ( index != that.legendArea ) { return; }
Code	if ( index != that.legendArea ) { return; }
Distance : 13

124
Tree	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( index , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( index , index , key ) ; }
Distance : 8

125
Tree	if ( ! getLabelFont ( index ) ) { return; }
Code	if ( ! getLabelFont ( index ) ) { return; }
Distance : 15

126
Tree	if ( Color.GRAY != null ) { return; }
Code	if ( Color.GRAY != null ) { return; }
Distance : 14

127
Tree	if ( ! Year.MINIMUM_YEAR ( index , key ) ) { return; }
Code	if ( ! Year.MINIMUM_YEAR ( index , key ) ) { return; }
Distance : 14

128
Tree	if ( key != null && key < NUMBER_CONSTANT ) { return; }
Code	if ( key != null && key < NUMBER_CONSTANT ) { return; }
Distance : 15

129
Tree	if ( ! Year.MINIMUM_YEAR ( index ) ) { return; }
Code	if ( ! Year.MINIMUM_YEAR ( index ) ) { return; }
Distance : 15

130
Tree	if ( index != Year.MINIMUM_YEAR ) { return; }
Code	if ( index != Year.MINIMUM_YEAR ) { return; }
Distance : 13

131
Tree	if ( TextAnchor.CENTER ( index ) ) { return; }
Code	if ( TextAnchor.CENTER ( index ) ) { return; }
Distance : 15

132
Tree	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( Color.BLACK , index , key ) ; }
Distance : 8

133
Tree	if ( ! getLabelFont ( index , key ) ) { return; }
Code	if ( ! getLabelFont ( index , key ) ) { return; }
Distance : 14

134
Tree	if ( index . calculatePieDatasetTotal ( index ) == null ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index ) == null ) { return; }
Distance : 14

135
Tree	if ( index . that.zValues () == null ) { return; }
Code	if ( index . that.zValues () == null ) { return; }
Distance : 15

136
Tree	if ( ! key . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

137
Tree	if ( ! SeriesException () ) { return; }
Code	if ( ! SeriesException () ) { return; }
Distance : 14

138
Tree	if ( ! index . isOrsonPDFAvailable () ) { return; }
Code	if ( ! index . isOrsonPDFAvailable () ) { return; }
Distance : 15

139
Tree	if ( ! index . isEmptyOrNull ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

140
Tree	if ( key <= NUMBER_CONSTANT ) { if }
Code	if ( key <= NUMBER_CONSTANT ) { if }
Distance : 13

141
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

142
Tree	if ( Color.ORANGE != null ) { return; }
Code	if ( Color.ORANGE != null ) { return; }
Distance : 14

143
Tree	if ( index < NUMBER_CONSTANT ) { key = null ; return; }
Code	if ( index < NUMBER_CONSTANT ) { key = null ; return; }
Distance : 10

144
Tree	if ( ! index . isNaN ( index ) ) { return; }
Code	if ( ! index . isNaN ( index ) ) { return; }
Distance : 15

145
Tree	if ( index > index ) { super(); }
Code	if ( index > index ) { super(); }
Distance : 13

146
Tree	if ( index != super(); && index < NUMBER_CONSTANT ) { return; }
Code	if ( index != super(); && index < NUMBER_CONSTANT ) { return; }
Distance : 15

147
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

148
Tree	if ( index != null && key < NUMBER_CONSTANT ) { null }
Code	if ( index != null && key < NUMBER_CONSTANT ) { null }
Distance : 14

149
Tree	if ( ! BasicStroke () ) { return; }
Code	if ( ! BasicStroke () ) { return; }
Distance : 14

150
Tree	if ( ! IllegalArgumentException ( STRING_CONSTANT ) ) { return; }
Code	if ( ! IllegalArgumentException ( STRING_CONSTANT ) ) { return; }
Distance : 14

151
Tree	if ( g1 () ) { return; }
Code	if ( g1 () ) { return; }
Distance : 14

152
Tree	if ( isDomainCrosshairVisible () ) { return; }
Code	if ( isDomainCrosshairVisible () ) { return; }
Distance : 14

153
Tree	if ( isRangeCrosshairVisible () == null ) { return; }
Code	if ( isRangeCrosshairVisible () == null ) { return; }
Distance : 15

154
Tree	if ( ! getLabelFont ( STRING_CONSTANT ) ) { return; }
Code	if ( ! getLabelFont ( STRING_CONSTANT ) ) { return; }
Distance : 14

155
Tree	if ( key < NUMBER_CONSTANT ) { null }
Code	if ( key < NUMBER_CONSTANT ) { null }
Distance : 12

156
Tree	if ( float ( index ) ) { return; }
Code	if ( float ( index ) ) { return; }
Distance : 15

157
Tree	if ( ! index . isNaN ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . isNaN ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

158
Tree	if ( index != null && index < NUMBER_CONSTANT ) { super(); }
Code	if ( index != null && index < NUMBER_CONSTANT ) { super(); }
Distance : 15

159
Tree	if ( ! index ) { return; } put
Code	if ( ! index ) { return; } put
Distance : 15

160
Tree	if ( index . getEntities () ) { return; }
Code	if ( index . getEntities () ) { return; }
Distance : 14

161
Tree	if ( ! SeriesException ( STRING_CONSTANT ) ) { return; }
Code	if ( ! SeriesException ( STRING_CONSTANT ) ) { return; }
Distance : 14

162
Tree	if ( ! key ( index ) ) { super(); }
Code	if ( ! key ( index ) ) { super(); }
Distance : 15

163
Tree	if ( index . that.zValues ( index , false ) ) { return; }
Code	if ( index . that.zValues ( index , false ) ) { return; }
Distance : 14

164
Tree	if ( ! index . getID ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . getID ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

165
Tree	if ( index != key ) { null }
Code	if ( index != key ) { null }
Distance : 13

166
Tree	if ( ! index . containsInstanceOf () ) { return; }
Code	if ( ! index . containsInstanceOf () ) { return; }
Distance : 15

167
Tree	if ( index . that.zValues ( index ) > index ) { return; }
Code	if ( index . that.zValues ( index ) > index ) { return; }
Distance : 14

168
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

169
Tree	if ( index . defaultOutlinePaint ( index ) > index ) { return; }
Code	if ( index . defaultOutlinePaint ( index ) > index ) { return; }
Distance : 14

170
Tree	if ( index . defaultOutlinePaint ( index , false ) ) { return; }
Code	if ( index . defaultOutlinePaint ( index , false ) ) { return; }
Distance : 14

171
Tree	if ( index . getVisibleSeriesArray ( index ) > index ) { super(); }
Code	if ( index . getVisibleSeriesArray ( index ) > index ) { super(); }
Distance : 14

172
Tree	if ( index ( index ) ) { return; }
Code	if ( index ( index ) ) { return; }
Distance : 14

173
Tree	if ( ! Year.MINIMUM_YEAR ( STRING_CONSTANT ) ) { return; }
Code	if ( ! Year.MINIMUM_YEAR ( STRING_CONSTANT ) ) { return; }
Distance : 14

174
Tree	if ( index . RectangleEdge ( index ) > index ) { return; }
Code	if ( index . RectangleEdge ( index ) > index ) { return; }
Distance : 14

175
Tree	if ( ! index . getDataset () ) { return; }
Code	if ( ! index . getDataset () ) { return; }
Distance : 15

176
Tree	if ( ! index ( key ) ) { return; }
Code	if ( ! index ( key ) ) { return; }
Distance : 14

177
Tree	if ( index . calculatePieDatasetTotal ( index ) > index ) { super(); }
Code	if ( index . calculatePieDatasetTotal ( index ) > index ) { super(); }
Distance : 14

178
Tree	if ( key < NUMBER_CONSTANT ) { } }
Code	if ( key < NUMBER_CONSTANT ) { } }
Distance : 12

179
Tree	if ( ! index ) { null }
Code	if ( ! index ) { null }
Distance : 14

180
Tree	if ( index . getEntities ( index ) > index ) { return; }
Code	if ( index . getEntities ( index ) > index ) { return; }
Distance : 14

181
Tree	if ( ! index . hashCode () ) { return; }
Code	if ( ! index . hashCode () ) { return; }
Distance : 15

182
Tree	if ( index >= NUMBER_CONSTANT ) { super(); }
Code	if ( index >= NUMBER_CONSTANT ) { super(); }
Distance : 12

183
Tree	if ( TextAnchor.CENTER () == null ) { return; }
Code	if ( TextAnchor.CENTER () == null ) { return; }
Distance : 15

184
Tree	if ( index >= NUMBER_CONSTANT ) { return; }
Code	if ( index >= NUMBER_CONSTANT ) { return; }
Distance : 12

185
Tree	if ( ! index . isEmptyOrNull ( index , true ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( index , true ) ) { return; }
Distance : 15

186
Tree	if ( index . getKey ( index ) > index ) { return; }
Code	if ( index . getKey ( index ) > index ) { return; }
Distance : 14

187
Tree	if ( ! index . isNaN () ) { return; }
Code	if ( ! index . isNaN () ) { return; }
Distance : 15

188
Tree	if ( ! index ( index ) ) { return; }
Code	if ( ! index ( index ) ) { return; }
Distance : 15

189
Tree	if ( index >= NUMBER_CONSTANT ) { if }
Code	if ( index >= NUMBER_CONSTANT ) { if }
Distance : 12

190
Tree	if ( index != null return; index . defaultOutlinePaint ( index ) ) { return; }
Code	if ( index != null return; index . defaultOutlinePaint ( index ) ) { return; }
Distance : 14

191
Tree	if ( key != null ) { null }
Code	if ( key != null ) { null }
Distance : 14

192
Tree	if ( ! IllegalArgumentException ( index ) ) { return; }
Code	if ( ! IllegalArgumentException ( index ) ) { return; }
Distance : 15

193
Tree	if ( ! index . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

194
Tree	if ( ! index . getDataset ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . getDataset ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

195
Tree	if ( ! index ( index ) ) { null }
Code	if ( ! index ( index ) ) { null }
Distance : 15

196
Tree	if ( key >= NUMBER_CONSTANT ) { return; }
Code	if ( key >= NUMBER_CONSTANT ) { return; }
Distance : 13

197
Tree	if ( key <= NUMBER_CONSTANT ) { null }
Code	if ( key <= NUMBER_CONSTANT ) { null }
Distance : 13

198
Tree	if ( index != null } index . iterateDomainBounds ( index ) ) { return; }
Code	if ( index != null } index . iterateDomainBounds ( index ) ) { return; }
Distance : 14

199
Tree	if ( Color.ORANGE ( index ) ) { return; }
Code	if ( Color.ORANGE ( index ) ) { return; }
Distance : 15

200
Tree	if ( index < NUMBER_CONSTANT ) { throw index . getExplodePercent ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . getExplodePercent ( Color.BLACK , index , key ) ; }
Distance : 8

201
Tree	if ( key <= NUMBER_CONSTANT ) { super(); }
Code	if ( key <= NUMBER_CONSTANT ) { super(); }
Distance : 13

202
Tree	if ( ! key . isEmptyOrNull ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! key . isEmptyOrNull ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

203
Tree	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( index , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( index , index , key ) ; }
Distance : 8

204
Tree	if ( index < NUMBER_CONSTANT ) { throw index . isEmptyOrNull ( Color.GRAY , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . isEmptyOrNull ( Color.GRAY , index , key ) ; }
Distance : 8

205
Tree	if ( index != null } index . isEmptyOrNull ( index ) ) { return; }
Code	if ( index != null } index . isEmptyOrNull ( index ) ) { return; }
Distance : 14

206
Tree	if ( index < NUMBER_CONSTANT ) { index = null ; super(); }
Code	if ( index < NUMBER_CONSTANT ) { index = null ; super(); }
Distance : 11

207
Tree	if ( index != return; ) { super(); }
Code	if ( index != return; ) { super(); }
Distance : 13

208
Tree	if ( ! key . isOrsonPDFAvailable ( index , true ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( index , true ) ) { return; }
Distance : 15

209
Tree	if ( ! index . getFirstMillisecond ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . getFirstMillisecond ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

210
Tree	if ( index < NUMBER_CONSTANT ) { key = null ; super(); }
Code	if ( index < NUMBER_CONSTANT ) { key = null ; super(); }
Distance : 10

211
Tree	if ( ! index . containsInstanceOf ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . containsInstanceOf ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

212
Tree	if ( index != null return; index . findZBounds ( index ) ) { return; }
Code	if ( index != null return; index . findZBounds ( index ) ) { return; }
Distance : 14

213
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

214
Tree	if ( ! getKey ( STRING_CONSTANT ) ) { return; }
Code	if ( ! getKey ( STRING_CONSTANT ) ) { return; }
Distance : 14

215
Tree	if ( ! createXYAreaChart ( STRING_CONSTANT ) ) { return; }
Code	if ( ! createXYAreaChart ( STRING_CONSTANT ) ) { return; }
Distance : 14

216
Tree	if ( ! IllegalStateException ( STRING_CONSTANT ) ) { return; }
Code	if ( ! IllegalStateException ( STRING_CONSTANT ) ) { return; }
Distance : 14

217
Tree	if ( Color.GREEN != null ) { return; }
Code	if ( Color.GREEN != null ) { return; }
Distance : 14

218
Tree	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( Color.GRAY , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . defaultOutlinePaint ( Color.GRAY , index , key ) ; }
Distance : 8

219
Tree	if ( index < NUMBER_CONSTANT ) { index = return; ; return; }
Code	if ( index < NUMBER_CONSTANT ) { index = return; ; return; }
Distance : 11

220
Tree	if ( index < NUMBER_CONSTANT ) { key = return; ; return; }
Code	if ( index < NUMBER_CONSTANT ) { key = return; ; return; }
Distance : 10

221
Tree	if ( g1 ( index ) ) { return; }
Code	if ( g1 ( index ) ) { return; }
Distance : 15

222
Tree	if ( key != key ) { return; }
Code	if ( key != key ) { return; }
Distance : 14

223
Tree	if ( isDomainCrosshairVisible ( index ) ) { return; }
Code	if ( isDomainCrosshairVisible ( index ) ) { return; }
Distance : 15

224
Tree	if ( index != null } index . getID ( index ) ) { return; }
Code	if ( index != null } index . getID ( index ) ) { return; }
Distance : 14

225
Tree	if ( ! key ) { } }
Code	if ( ! key ) { } }
Distance : 14

226
Tree	if ( ! index . isOrsonPDFAvailable ( index ) ) { return; }
Code	if ( ! index . isOrsonPDFAvailable ( index ) ) { return; }
Distance : 15

227
Tree	if ( ! key . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

228
Tree	if ( index < NUMBER_CONSTANT ) { index = super(); ; return; }
Code	if ( index < NUMBER_CONSTANT ) { index = super(); ; return; }
Distance : 11

229
Tree	if ( index < NUMBER_CONSTANT ) { key = super(); ; return; }
Code	if ( index < NUMBER_CONSTANT ) { key = super(); ; return; }
Distance : 10

230
Tree	if ( ! index . hashCode ( STRING_CONSTANT , key ) ) { return; }
Code	if ( ! index . hashCode ( STRING_CONSTANT , key ) ) { return; }
Distance : 13

231
Tree	if ( Color.YELLOW != null ) { return; }
Code	if ( Color.YELLOW != null ) { return; }
Distance : 14

232
Tree	if ( Color.WHITE != null ) { return; }
Code	if ( Color.WHITE != null ) { return; }
Distance : 14

233
Tree	if ( this == index ) { if }
Code	if ( this == index ) { if }
Distance : 14

234
Tree	if ( ! index . getID ( index ) ) { return; }
Code	if ( ! index . getID ( index ) ) { return; }
Distance : 15

235
Tree	if ( index < NUMBER_CONSTANT ) { throw index . isEmptyOrNull ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . isEmptyOrNull ( Color.BLACK , index , key ) ; }
Distance : 8

236
Tree	if ( index != ++ ) { return; }
Code	if ( index != ++ ) { return; }
Distance : 13

237
Tree	if ( key < NUMBER_CONSTANT ) { return; }
Code	if ( key < NUMBER_CONSTANT ) { return; }
Distance : 12

238
Tree	if ( index . getVisibleSeriesArray ( index , false ) ) { return; }
Code	if ( index . getVisibleSeriesArray ( index , false ) ) { return; }
Distance : 14

239
Tree	if ( index . RectangleEdge () == null ) { return; }
Code	if ( index . RectangleEdge () == null ) { return; }
Distance : 15

240
Tree	if ( index . getKey () == null ) { return; }
Code	if ( index . getKey () == null ) { return; }
Distance : 15

241
Tree	if ( index . getEntities () == null ) { return; }
Code	if ( index . getEntities () == null ) { return; }
Distance : 15

242
Tree	if ( key >= NUMBER_CONSTANT ) { if }
Code	if ( key >= NUMBER_CONSTANT ) { if }
Distance : 13

243
Tree	if ( index != key ) { super(); }
Code	if ( index != key ) { super(); }
Distance : 13

244
Tree	if ( ! index . isNaN ( index , false ) ) { return; }
Code	if ( ! index . isNaN ( index , false ) ) { return; }
Distance : 15

245
Tree	if ( index . MonthDateFormat () == null ) { return; }
Code	if ( index . MonthDateFormat () == null ) { return; }
Distance : 15

246
Tree	if ( Color.ORANGE () ) { return; }
Code	if ( Color.ORANGE () ) { return; }
Distance : 14

247
Tree	if ( ! StandardURLTagFragmentGenerator ( index ) ) { return; }
Code	if ( ! StandardURLTagFragmentGenerator ( index ) ) { return; }
Distance : 15

248
Tree	if ( index () ) { return; }
Code	if ( index () ) { return; }
Distance : 13

249
Tree	if ( this == key ) { } }
Code	if ( this == key ) { } }
Distance : 14

250
Tree	if ( index != that.legendLine ) { return; }
Code	if ( index != that.legendLine ) { return; }
Distance : 13

251
Tree	if ( getText () ) { return; }
Code	if ( getText () ) { return; }
Distance : 14

252
Tree	if ( index . Number () == null ) { return; }
Code	if ( index . Number () == null ) { return; }
Distance : 15

253
Tree	if ( ! index . getID ( index , false ) ) { return; }
Code	if ( ! index . getID ( index , false ) ) { return; }
Distance : 15

254
Tree	if ( ! index . getDataset ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . getDataset ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

255
Tree	if ( index != return; ) { return; }
Code	if ( index != return; ) { return; }
Distance : 13

256
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

257
Tree	if ( index != super(); ) { return; }
Code	if ( index != super(); ) { return; }
Distance : 13

258
Tree	if ( ! key ) { super(); }
Code	if ( ! key ) { super(); }
Distance : 14

259
Tree	if ( ! key . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! key . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

260
Tree	if ( ! index ) { super(); }
Code	if ( ! index ) { super(); }
Distance : 14

261
Tree	if ( ! key ( index ) ) { return; }
Code	if ( ! key ( index ) ) { return; }
Distance : 15

262
Tree	if ( this == key ) { return; }
Code	if ( this == key ) { return; }
Distance : 14

263
Tree	if ( key != null ) { super(); }
Code	if ( key != null ) { super(); }
Distance : 14

264
Tree	if ( ! BasicStroke ( index ) ) { return; }
Code	if ( ! BasicStroke ( index ) ) { return; }
Distance : 15

265
Tree	if ( key <= NUMBER_CONSTANT ) { return; }
Code	if ( key <= NUMBER_CONSTANT ) { return; }
Distance : 13

266
Tree	if ( ! index . isEmptyOrNull ( index , false ) ) { return; }
Code	if ( ! index . isEmptyOrNull ( index , false ) ) { return; }
Distance : 15

267
Tree	if ( g1 () == null ) { return; }
Code	if ( g1 () == null ) { return; }
Distance : 15

268
Tree	if ( ! hasUniqueID ( STRING_CONSTANT ) ) { return; }
Code	if ( ! hasUniqueID ( STRING_CONSTANT ) ) { return; }
Distance : 14

269
Tree	if ( index <= NUMBER_CONSTANT ) { return; }
Code	if ( index <= NUMBER_CONSTANT ) { return; }
Distance : 12

270
Tree	if ( index . calculateColumnTotal ( index ) == null ) { return; }
Code	if ( index . calculateColumnTotal ( index ) == null ) { return; }
Distance : 14

271
Tree	if ( ! index ( index ) ) { super(); }
Code	if ( ! index ( index ) ) { super(); }
Distance : 15

272
Tree	if ( Color.BLACK ( index ) ) { return; }
Code	if ( Color.BLACK ( index ) ) { return; }
Distance : 15

273
Tree	if ( ! index . getFirstMillisecond ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . getFirstMillisecond ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

274
Tree	if ( index != c.seriesList ) { return; }
Code	if ( index != c.seriesList ) { return; }
Distance : 13

275
Tree	if ( ! key . isOrsonPDFAvailable ( index , false ) ) { return; }
Code	if ( ! key . isOrsonPDFAvailable ( index , false ) ) { return; }
Distance : 15

276
Tree	if ( index != / ) { return; }
Code	if ( index != / ) { return; }
Distance : 13

277
Tree	if ( ! getKey ( index ) ) { return; }
Code	if ( ! getKey ( index ) ) { return; }
Distance : 15

278
Tree	if ( index != <= ) { return; }
Code	if ( index != <= ) { return; }
Distance : 13

279
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

280
Tree	if ( ! createXYAreaChart ( index ) ) { return; }
Code	if ( ! createXYAreaChart ( index ) ) { return; }
Distance : 15

281
Tree	if ( ! getLabelFont () ) { return; }
Code	if ( ! getLabelFont () ) { return; }
Distance : 14

282
Tree	if ( index != null } index . calculateStackTotal ( index ) ) { return; }
Code	if ( index != null } index . calculateStackTotal ( index ) ) { return; }
Distance : 14

283
Tree	if ( isDomainCrosshairVisible () == null ) { return; }
Code	if ( isDomainCrosshairVisible () == null ) { return; }
Distance : 15

284
Tree	if ( ! getKey ( index , key ) ) { return; }
Code	if ( ! getKey ( index , key ) ) { return; }
Distance : 14

285
Tree	if ( ! index . isNaN ( index , true ) ) { return; }
Code	if ( ! index . isNaN ( index , true ) ) { return; }
Distance : 15

286
Tree	if ( index != null return; index . getFirstMillisecond ( index ) ) { return; }
Code	if ( index != null return; index . getFirstMillisecond ( index ) ) { return; }
Distance : 14

287
Tree	if ( ! index . getID ( index , true ) ) { return; }
Code	if ( ! index . getID ( index , true ) ) { return; }
Distance : 15

288
Tree	if ( key < NUMBER_CONSTANT ) { super(); }
Code	if ( key < NUMBER_CONSTANT ) { super(); }
Distance : 12

289
Tree	if ( index . getVisibleSeriesArray ( index ) > index ) { return; }
Code	if ( index . getVisibleSeriesArray ( index ) > index ) { return; }
Distance : 14

290
Tree	if ( ! index . isNaN ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . isNaN ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

291
Tree	if ( this == index ) { super(); }
Code	if ( this == index ) { super(); }
Distance : 14

292
Tree	if ( ! key ) { null }
Code	if ( ! key ) { null }
Distance : 14

293
Tree	if ( index != null return; index . getDomainOrder ( index ) ) { return; }
Code	if ( index != null return; index . getDomainOrder ( index ) ) { return; }
Distance : 14

294
Tree	if ( ! createXYAreaChart ( index , key ) ) { return; }
Code	if ( ! createXYAreaChart ( index , key ) ) { return; }
Distance : 14

295
Tree	if ( index != null return; index . isOrsonPDFAvailable ( index ) ) { return; }
Code	if ( index != null return; index . isOrsonPDFAvailable ( index ) ) { return; }
Distance : 14

296
Tree	if ( index != null && key < NUMBER_CONSTANT ) { return; }
Code	if ( index != null && key < NUMBER_CONSTANT ) { return; }
Distance : 14

297
Tree	if ( ! IllegalStateException ( index , key ) ) { return; }
Code	if ( ! IllegalStateException ( index , key ) ) { return; }
Distance : 14

298
Tree	if ( ! index . containsInstanceOf ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . containsInstanceOf ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

299
Tree	if ( ! index . getID () ) { return; }
Code	if ( ! index . getID () ) { return; }
Distance : 15

300
Tree	if ( ! IllegalStateException ( index ) ) { return; }
Code	if ( ! IllegalStateException ( index ) ) { return; }
Distance : 15

301
Tree	if ( index != null return; index . getMaximumItemWidth ( index ) ) { return; }
Code	if ( index != null return; index . getMaximumItemWidth ( index ) ) { return; }
Distance : 14

302
Tree	if ( ! key ( key ) ) { return; }
Code	if ( ! key ( key ) ) { return; }
Distance : 14

303
Tree	if ( index . calculatePieDatasetTotal ( index ) > index ) { return; }
Code	if ( index . calculatePieDatasetTotal ( index ) > index ) { return; }
Distance : 14

304
Tree	if ( index != BasicStroke ) { return; }
Code	if ( index != BasicStroke ) { return; }
Distance : 13

305
Tree	if ( ! key ) { return; }
Code	if ( ! key ) { return; }
Distance : 14

306
Tree	if ( ! key ( index ) ) { null }
Code	if ( ! key ( index ) ) { null }
Distance : 15

307
Tree	if ( ! StandardURLTagFragmentGenerator ( index , key ) ) { return; }
Code	if ( ! StandardURLTagFragmentGenerator ( index , key ) ) { return; }
Distance : 14

308
Tree	if ( ! index . isEmptyOrNull () ) { return; }
Code	if ( ! index . isEmptyOrNull () ) { return; }
Distance : 15

309
Tree	if ( float () ) { return; }
Code	if ( float () ) { return; }
Distance : 14

310
Tree	if ( key != key ) { super(); }
Code	if ( key != key ) { super(); }
Distance : 14

311
Tree	if ( ! BasicStroke ( index , key ) ) { return; }
Code	if ( ! BasicStroke ( index , key ) ) { return; }
Distance : 14

312
Tree	if ( ! key . isEmptyOrNull ( index ) ) { return; }
Code	if ( ! key . isEmptyOrNull ( index ) ) { return; }
Distance : 15

313
Tree	if ( ! index . getID ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . getID ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

314
Tree	if ( ! index . hashCode ( NUMBER_CONSTANT ) ) { return; }
Code	if ( ! index . hashCode ( NUMBER_CONSTANT ) ) { return; }
Distance : 15

315
Tree	if ( key != null && index < NUMBER_CONSTANT ) { return; }
Code	if ( key != null && index < NUMBER_CONSTANT ) { return; }
Distance : 15

316
Tree	if ( this == index ) { null }
Code	if ( this == index ) { null }
Distance : 14

317
Tree	if ( ! key ( key ) ) { super(); }
Code	if ( ! key ( key ) ) { super(); }
Distance : 14

318
Tree	if ( key > index ) { return; }
Code	if ( key > index ) { return; }
Distance : 14

319
Tree	if ( index . calculateColumnTotal ( index ) > index ) { return; }
Code	if ( index . calculateColumnTotal ( index ) > index ) { return; }
Distance : 14

320
Tree	if ( key > key ) { return; }
Code	if ( key > key ) { return; }
Distance : 14

321
Tree	if ( key > index ) { super(); }
Code	if ( key > index ) { super(); }
Distance : 14

322
Tree	if ( ! index ) { return; } renderer
Code	if ( ! index ) { return; } renderer
Distance : 15

323
Tree	if ( index <= NUMBER_CONSTANT ) { return; } renderer
Code	if ( index <= NUMBER_CONSTANT ) { return; } renderer
Distance : 13

324
Tree	if ( index <= NUMBER_CONSTANT ) { return; } put
Code	if ( index <= NUMBER_CONSTANT ) { return; } put
Distance : 13

325
Tree	if ( index != null && index < NUMBER_CONSTANT ) { return; }
Code	if ( index != null && index < NUMBER_CONSTANT ) { return; }
Distance : 15

326
Tree	if ( this == key ) { return; } renderer
Code	if ( this == key ) { return; } renderer
Distance : 15

327
Tree	if ( key >= NUMBER_CONSTANT ) { super(); }
Code	if ( key >= NUMBER_CONSTANT ) { super(); }
Distance : 13

328
Tree	if ( this == key ) { return; } put
Code	if ( this == key ) { return; } put
Distance : 15

329
Tree	if ( key >= NUMBER_CONSTANT ) { null }
Code	if ( key >= NUMBER_CONSTANT ) { null }
Distance : 13

330
Tree	if ( index >= NUMBER_CONSTANT ) { return; } renderer
Code	if ( index >= NUMBER_CONSTANT ) { return; } renderer
Distance : 13

331
Tree	if ( index >= NUMBER_CONSTANT ) { return; } put
Code	if ( index >= NUMBER_CONSTANT ) { return; } put
Distance : 13

332
Tree	if ( key > key ) { super(); }
Code	if ( key > key ) { super(); }
Distance : 14

333
Tree	if ( index < NUMBER_CONSTANT ) { if }
Code	if ( index < NUMBER_CONSTANT ) { if }
Distance : 11

334
Tree	if ( ! index ) { } }
Code	if ( ! index ) { } }
Distance : 14

335
Tree	if ( key < NUMBER_CONSTANT ) { if }
Code	if ( key < NUMBER_CONSTANT ) { if }
Distance : 12

336
Tree	if ( index < NUMBER_CONSTANT ) { return; } renderer
Code	if ( index < NUMBER_CONSTANT ) { return; } renderer
Distance : 12

337
Tree	if ( index < NUMBER_CONSTANT ) { return; } put
Code	if ( index < NUMBER_CONSTANT ) { return; } put
Distance : 12

338
Tree	if ( index < NUMBER_CONSTANT ) { throw index . defaultStroke ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . defaultStroke ( Color.BLACK , index , key ) ; }
Distance : 8

339
Tree	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.BLACK , index , key ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw index . findZBounds ( Color.BLACK , index , key ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 170
Wrong
========================================================================
False

0
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; }
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; }
Distance : 12

1
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) /
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) /
Distance : 16

2
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

3
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) else
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) else
Distance : 16

4
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) {}
Distance : 16

5
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT ) ; }
Distance : 14

6
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( if , length , length ) ; } ObjectUtils
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( if , length , length ) ; } ObjectUtils
Distance : 19

7
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 24

8
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . != ( != , length , length ) ; } anchor
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . != ( != , length , length ) ; } anchor
Distance : 20

9
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( if , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( if , length , length ) ; } Color.RED
Distance : 20

10
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( if , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( if , length , length ) ; } public
Distance : 20

11
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( IllegalArgumentException , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( IllegalArgumentException , length , length ) ; } SerialUtilities
Distance : 20

12
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != new ) { throw length . != ( != , length , length ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != new ) { throw length . != ( != , length , length ) ; } p2
Distance : 20

13
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( != , length , length ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( != , length , length ) ; } a1
Distance : 20

14
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } a1
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } a1
Distance : 19

15
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . != ( != , length , length ) ; } double
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . != ( != , length , length ) ; } double
Distance : 20

16
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != ( ) { throw length . IllegalArgumentException ( IllegalArgumentException , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != ( ) { throw length . IllegalArgumentException ( IllegalArgumentException , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 24

17
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != this ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } a1
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != this ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } a1
Distance : 13

18
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Distance : 24

19
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( if , length , length ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( if , length , length ) ; } GradientPaint
Distance : 19

20
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != throw ) { throw length . != ( if , length , length ) ; } GradientPaint
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != throw ) { throw length . != ( if , length , length ) ; } GradientPaint
Distance : 20

21
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != . ) { throw length . new ( categoryKeys.length , length , length ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != . ) { throw length . new ( categoryKeys.length , length , length ) ; } Color.RED
Distance : 20

22
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( if , length , length ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( if , length , length ) ; } public
Distance : 19

23
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 25

24
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( != , length , length ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( != , length , length ) ; } anchor
Distance : 19

25
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( categoryKeys.length , length , length ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( categoryKeys.length , length , length ) ; } double
Distance : 20

26
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 24

27
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 24

28
Tree	if ( length * length . != ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( != ) ; } double
Code	if ( length * length . != ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( != ) ; } double
Distance : 12

29
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != this ) { throw new IllegalArgumentException ( != ) ; } ObjectUtilities
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != this ) { throw new IllegalArgumentException ( != ) ; } ObjectUtilities
Distance : 13

30
Tree	if ( length * length . categoryKeys.length ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; } ObjectUtils
Code	if ( length * length . categoryKeys.length ( - NUMBER_CONSTANT ) != IllegalArgumentException ) { throw new IllegalArgumentException ( if ) ; } ObjectUtils
Distance : 12

31
Tree	if ( length * length . != ( - NUMBER_CONSTANT ) != throw ) { throw new IllegalArgumentException ( if ) ; } DialLayerChangeEvent
Code	if ( length * length . != ( - NUMBER_CONSTANT ) != throw ) { throw new IllegalArgumentException ( if ) ; } DialLayerChangeEvent
Distance : 12

32
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . != ( STRING_CONSTANT , length , throw ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . != ( STRING_CONSTANT , length , throw ) ; } GradientPaint
Distance : 19

33
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Distance : 24

34
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Distance : 24

35
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Distance : 24

36
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . IllegalArgumentException ( if , length , length ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . IllegalArgumentException ( if , length , length ) ; } SerialUtilities
Distance : 19

37
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 24

38
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . STRING_CONSTANT ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . STRING_CONSTANT ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Distance : 25

39
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 25

40
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( != , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( != , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Distance : 24

41
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

42
Tree	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

43
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; }
Distance : 17

44
Tree	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

45
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . this ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . this ( STRING_CONSTANT , length , length ) ; }
Distance : 18

46
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Distance : 24

47
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != throw ) regions
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != throw ) regions
Distance : 16

48
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != this ) (
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != this ) (
Distance : 16

49
Tree	if ( length * length . categoryKeys.length ( - NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( if ) ; }
Code	if ( length * length . categoryKeys.length ( - NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( if ) ; }
Distance : 11

50
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) ==
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) ==
Distance : 16

51
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &&
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != IllegalArgumentException ) &&
Distance : 16

52
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != != ) [
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != != ) [
Distance : 16

53
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != STRING_CONSTANT ) +
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != STRING_CONSTANT ) +
Distance : 16

54
Tree	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != if ) <
Code	if ( length / ( length & ( length / length < NUMBER_CONSTANT ) ) != if ) <
Distance : 16

55
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Distance : 24

56
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Distance : 24

57
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . categoryKeys.length ( ( , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . categoryKeys.length ( ( , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Distance : 25

58
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 25

59
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Distance : 25

60
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Distance : 24

61
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( throw , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( throw , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Distance : 24

62
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Distance : 24

63
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } a1
Distance : 24

64
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } public
Distance : 18

65
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . throw ( this , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . throw ( this , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } GradientPaint
Distance : 25

66
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 24

67
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Distance : 25

68
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Distance : 24

69
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } Color.RED
Distance : 18

70
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.RED
Distance : 24

71
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Distance : 24

72
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . this ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . this ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Distance : 25

73
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , length , throw ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , length , throw ) ; } SerialUtilities
Distance : 19

74
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( != ) ; } deepClone
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( != ) ; } deepClone
Distance : 13

75
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } a1
Distance : 18

76
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . ) ( != , length , length , length , length ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . ) ( != , length , length , length , length ) ; } a1
Distance : 24

77
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( STRING_CONSTANT , throw , throw ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( STRING_CONSTANT , throw , throw ) ; } GradientPaint
Distance : 19

78
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , this , IllegalArgumentException ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , this , IllegalArgumentException ) ; } SerialUtilities
Distance : 18

79
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , this , != ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , this , != ) ; } public
Distance : 19

80
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( STRING_CONSTANT , IllegalArgumentException , throw ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( STRING_CONSTANT , IllegalArgumentException , throw ) ; } Color.RED
Distance : 19

81
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } final
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } final
Distance : 22

82
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } !=
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } !=
Distance : 22

83
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } hashCode
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } hashCode
Distance : 23

84
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } double
Distance : 18

85
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } c2
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } c2
Distance : 23

86
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } ObjectUtils
Distance : 18

87
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . new ( STRING_CONSTANT , != , throw ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . new ( STRING_CONSTANT , != , throw ) ; } ObjectUtils
Distance : 19

88
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . new ( categoryKeys.length , length , length , length , length ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . new ( categoryKeys.length , length , length , length , length ) ; } p2
Distance : 24

89
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . this ( != , length , length , length , length ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . this ( != , length , length , length , length ) ; } double
Distance : 24

90
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( IllegalArgumentException , length , length , length , length ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( IllegalArgumentException , length , length , length , length ) ; } anchor
Distance : 23

91
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . categoryKeys.length ( STRING_CONSTANT , categoryKeys.length , throw ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . categoryKeys.length ( STRING_CONSTANT , categoryKeys.length , throw ) ; } p2
Distance : 19

92
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; } a1
Distance : 18

93
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT ) ; } ObjectUtils
Distance : 15

94
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( != , length , length , length , length ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . categoryKeys.length ( != , length , length , length , length ) ; } GradientPaint
Distance : 24

95
Tree	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } DatasetUtilities
Code	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } DatasetUtilities
Distance : 10

96
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Color.red
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } Color.red
Distance : 9

97
Tree	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } hashCode
Code	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } hashCode
Distance : 10

98
Tree	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } c2
Code	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } c2
Distance : 10

99
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } !=
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } !=
Distance : 9

100
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } Color.RED
Distance : 14

101
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . new ( STRING_CONSTANT ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . new ( STRING_CONSTANT ) ; } public
Distance : 15

102
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . categoryKeys.length ( != , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . categoryKeys.length ( != , length , length ) ; } Color.RED
Distance : 22

103
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } SerialUtilities
Distance : 14

104
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } p2
Distance : 14

105
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . throw ( STRING_CONSTANT ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . throw ( STRING_CONSTANT ) ; } double
Distance : 15

106
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT ) ; } anchor
Distance : 15

107
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , startData , throw ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , startData , throw ) ; } double
Distance : 19

108
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( if , length , length , length , length ) ; } Color.RED
Distance : 23

109
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . throw ( != , length , length , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != throw ) { throw length . throw ( != , length , length , length , length ) ; } public
Distance : 24

110
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( != , length , length , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( != , length , length , length , length ) ; } SerialUtilities
Distance : 23

111
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT ) ; } GradientPaint
Distance : 15

112
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . this ( categoryKeys.length , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . this ( categoryKeys.length , length , length ) ; } public
Distance : 22

113
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , IllegalArgumentException ) ; } anchor
Distance : 18

114
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( != , length , length ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . IllegalArgumentException ( != , length , length ) ; } GradientPaint
Distance : 21

115
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , != , new ) ; } a1
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , != , new ) ; } a1
Distance : 18

116
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != if ) { throw length . startData ( != , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != if ) { throw length . startData ( != , length , length ) ; } SerialUtilities
Distance : 22

117
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } p2
Distance : 18

118
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != ( ) { throw length . IllegalArgumentException ( STRING_CONSTANT , IllegalArgumentException , throw ) ; } SerialUtilities
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != ( ) { throw length . IllegalArgumentException ( STRING_CONSTANT , IllegalArgumentException , throw ) ; } SerialUtilities
Distance : 18

119
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , != , throw ) ; } p2
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , != , throw ) ; } p2
Distance : 18

120
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . startData ( STRING_CONSTANT , startData , != ) ; } anchor
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . startData ( STRING_CONSTANT , startData , != ) ; } anchor
Distance : 19

121
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , this , throw ) ; } Color.RED
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , this , throw ) ; } Color.RED
Distance : 18

122
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , throw ) ; } p2
Distance : 18

123
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } a1
Distance : 18

124
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } ObjectUtils
Distance : 18

125
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( if , length , length , length , length ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( if , length , length , length , length ) ; } ObjectUtils
Distance : 23

126
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( != , length , length ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . IllegalArgumentException ( != , length , length ) ; } ObjectUtils
Distance : 21

127
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != new ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; } double
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != new ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; } double
Distance : 18

128
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != throw ) { throw length . IllegalArgumentException ( STRING_CONSTANT , if , != ) ; } GradientPaint
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != throw ) { throw length . IllegalArgumentException ( STRING_CONSTANT , if , != ) ; } GradientPaint
Distance : 18

129
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } Color.RED
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } Color.RED
Distance : 18

130
Tree	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( != != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

131
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } public
Distance : 18

132
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length ) ; } GradientPaint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length ) ; } GradientPaint
Distance : 19

133
Tree	if ( != != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( != != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

134
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . categoryKeys.length ( categoryKeys.length , length , length ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != categoryKeys.length ) { throw length . categoryKeys.length ( categoryKeys.length , length , length ) ; } double
Distance : 22

135
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . this ( this , length , length ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != != ) { throw length . this ( this , length , length ) ; } anchor
Distance : 22

136
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , IllegalArgumentException , IllegalArgumentException ) ; } ObjectUtils
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != IllegalArgumentException ) { throw length . != ( STRING_CONSTANT , IllegalArgumentException , IllegalArgumentException ) ; } ObjectUtils
Distance : 19

137
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( != , length , length ) ; } p2
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( != , length , length ) ; } p2
Distance : 21

138
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } anchor
Distance : 18

139
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . categoryKeys.length ( categoryKeys.length , length , length ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . categoryKeys.length ( categoryKeys.length , length , length ) ; } a1
Distance : 22

140
Tree	if ( ( != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( != this . categoryKeys.length [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

141
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( IllegalArgumentException , length , length ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( IllegalArgumentException , length , length ) ; } ObjectUtils
Distance : 19

142
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( STRING_CONSTANT , categoryKeys.length , throw ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( STRING_CONSTANT , categoryKeys.length , throw ) ; }
Distance : 18

143
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . throw ( STRING_CONSTANT , length , length ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . throw ( STRING_CONSTANT , length , length ) ; } double
Distance : 19

144
Tree	if ( this != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( this != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 9

145
Tree	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } final
Code	if ( categoryKeys.length != this . IllegalArgumentException [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; } final
Distance : 9

146
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( if ) ; } readPaint
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != != ) { throw new IllegalArgumentException ( if ) ; } readPaint
Distance : 13

147
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } a1
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT ) ; } a1
Distance : 14

148
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } p2
Distance : 24

149
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . new ( STRING_CONSTANT , != , throw ) ; } public
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != != ) { throw length . new ( STRING_CONSTANT , != , throw ) ; } public
Distance : 19

150
Tree	if ( length * length . if ( - NUMBER_CONSTANT ) != ) ) { throw new IllegalArgumentException ( if ) ; } printStackTrace
Code	if ( length * length . if ( - NUMBER_CONSTANT ) != ) ) { throw new IllegalArgumentException ( if ) ; } printStackTrace
Distance : 13

151
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , != , IllegalArgumentException ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . != ( STRING_CONSTANT , != , IllegalArgumentException ) ; } anchor
Distance : 19

152
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } double
Distance : 24

153
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != if ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length ) ; } SerialUtilities
Distance : 18

154
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . STRING_CONSTANT ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . STRING_CONSTANT ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } anchor
Distance : 25

155
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( ( , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( ( , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } public
Distance : 24

156
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

157
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , throw ) ; }
Distance : 17

158
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( this , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( this , length , length ) ; }
Distance : 18

159
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.red
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } Color.red
Distance : 23

160
Tree	if ( ( length / length < NUMBER_CONSTANT ) == if ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == if ) { throw length . != ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

161
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . != ( if , length , length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != startData ) { throw length . != ( if , length , length ) ; }
Distance : 19

162
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . this ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . this ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

163
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != if ) { throw length . IllegalArgumentException ( if , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

164
Tree	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . throw ( != , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * NUMBER_CONSTANT * length != IllegalArgumentException ) { throw length . throw ( != , length , length ) ; }
Distance : 21

165
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( if , length , length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . != ( if , length , length , length , length ) ; }
Distance : 23

166
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . categoryKeys.length ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ObjectUtils
Distance : 25

167
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( [ , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != IllegalArgumentException ) { throw length . IllegalArgumentException ( [ , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } SerialUtilities
Distance : 24

168
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != new ) { throw length . STRING_CONSTANT ( != , length , length ) ; } p2
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != new ) { throw length . STRING_CONSTANT ( != , length , length ) ; } p2
Distance : 20

169
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } DatasetUtilities
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } DatasetUtilities
Distance : 22

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 470
Correct
========================================================================
True

0
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

1
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

2
Tree	final = new ArrayList < () ;
Code	final = new ArrayList < () ;
Distance : 6

3
Tree	final = true ;
Code	final = true ;
Distance : 4

4
Tree	put = new ArrayList < () ;
Code	put = new ArrayList < () ;
Distance : 6

5
Tree	dataset = new ArrayList < () ;
Code	dataset = new ArrayList < () ;
Distance : 6

6
Tree	this . dataset = null ;
Code	this . dataset = null ;
Distance : 4

7
Tree	this . dataset = Color.BLACK ;
Code	this . dataset = Color.BLACK ;
Distance : 4

8
Tree	put = true ;
Code	put = true ;
Distance : 4

9
Tree	this . dataset = ( dataset ) dataset . setDataset () ; public
Code	this . dataset = ( dataset ) dataset . setDataset () ; public
Distance : 9

10
Tree	dataset = new ChartPanel < () ;
Code	dataset = new ChartPanel < () ;
Distance : 6

11
Tree	dataset = new StandardPieToolTipGenerator < () ;
Code	dataset = new StandardPieToolTipGenerator < () ;
Distance : 6

12
Tree	dataset = false ;
Code	dataset = false ;
Distance : 4

13
Tree	dataset = new java.util.ArrayList < () ;
Code	dataset = new java.util.ArrayList < () ;
Distance : 6

14
Tree	dataset = NUMBER_CONSTANT / dataset ; public
Code	dataset = NUMBER_CONSTANT / dataset ; public
Distance : 6

15
Tree	dataset = dataset ; a1
Code	dataset = dataset ; a1
Distance : 4

16
Tree	dataset = new RendererChangeEvent < () ;
Code	dataset = new RendererChangeEvent < () ;
Distance : 6

17
Tree	dataset = dataset ; p2
Code	dataset = dataset ; p2
Distance : 4

18
Tree	dataset = dataset ; anchor
Code	dataset = dataset ; anchor
Distance : 4

19
Tree	dataset = NUMBER_CONSTANT / dataset ; Color.RED
Code	dataset = NUMBER_CONSTANT / dataset ; Color.RED
Distance : 6

20
Tree	this . dataset = ( dataset ) dataset . setDataset () ; double
Code	this . dataset = ( dataset ) dataset . setDataset () ; double
Distance : 9

21
Tree	dataset = dataset ; double
Code	dataset = dataset ; double
Distance : 4

22
Tree	this . dataset = dataset . setDataset () ; Color.RED
Code	this . dataset = dataset . setDataset () ; Color.RED
Distance : 8

23
Tree	this . dataset = setDataset ( dataset ) ; public
Code	this . dataset = setDataset ( dataset ) ; public
Distance : 5

24
Tree	dataset = dataset ; ObjectUtils
Code	dataset = dataset ; ObjectUtils
Distance : 4

25
Tree	this . dataset = setDataset ( dataset ) ; Color.RED
Code	this . dataset = setDataset ( dataset ) ; Color.RED
Distance : 5

26
Tree	dataset = new DefaultXYDataset < () ;
Code	dataset = new DefaultXYDataset < () ;
Distance : 6

27
Tree	dataset = new StringBuilder < () ;
Code	dataset = new StringBuilder < () ;
Distance : 6

28
Tree	dataset . setDataset ( this , dataset ) ; public
Code	dataset . setDataset ( this , dataset ) ; public
Distance : 5

29
Tree	dataset . setDataset ( this , dataset ) ; SerialUtilities
Code	dataset . setDataset ( this , dataset ) ; SerialUtilities
Distance : 5

30
Tree	dataset . setDataset ( this , dataset ) ; GradientPaint
Code	dataset . setDataset ( this , dataset ) ; GradientPaint
Distance : 5

31
Tree	this . dataset = Color.ORANGE ;
Code	this . dataset = Color.ORANGE ;
Distance : 4

32
Tree	dataset . setDataset ( this , dataset ) ; a1
Code	dataset . setDataset ( this , dataset ) ; a1
Distance : 5

33
Tree	dataset . setDataset ( this , dataset ) ; ObjectUtils
Code	dataset . setDataset ( this , dataset ) ; ObjectUtils
Distance : 5

34
Tree	dataset = new LegendGraphic < () ;
Code	dataset = new LegendGraphic < () ;
Distance : 6

35
Tree	this . dataset = true ; a1
Code	this . dataset = true ; a1
Distance : 5

36
Tree	dataset . setDataset ( this , dataset ) ; double
Code	dataset . setDataset ( this , dataset ) ; double
Distance : 5

37
Tree	dataset = dataset . setDataset ( dataset ) ; p2
Code	dataset = dataset . setDataset ( dataset ) ; p2
Distance : 5

38
Tree	dataset = dataset . setDataset ( dataset ) ; ObjectUtils
Code	dataset = dataset . setDataset ( dataset ) ; ObjectUtils
Distance : 5

39
Tree	dataset = dataset . setDataset ( dataset ) ; anchor
Code	dataset = dataset . setDataset ( dataset ) ; anchor
Distance : 5

40
Tree	dataset = dataset . setDataset ( dataset ) ; double
Code	dataset = dataset . setDataset ( dataset ) ; double
Distance : 5

41
Tree	this . dataset = Color.YELLOW ;
Code	this . dataset = Color.YELLOW ;
Distance : 4

42
Tree	dataset . setDataset ( this , dataset ) ; anchor
Code	dataset . setDataset ( this , dataset ) ; anchor
Distance : 5

43
Tree	this . dataset = dataset ; double
Code	this . dataset = dataset ; double
Distance : 5

44
Tree	this . dataset = dataset . setDataset ( dataset ) ; Color.RED
Code	this . dataset = dataset . setDataset ( dataset ) ; Color.RED
Distance : 7

45
Tree	this . dataset = dataset . setDataset ( dataset ) ; public
Code	this . dataset = dataset . setDataset ( dataset ) ; public
Distance : 7

46
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; anchor
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; anchor
Distance : 5

47
Tree	dataset . setDataset ( dataset ) ; Color.RED
Code	dataset . setDataset ( dataset ) ; Color.RED
Distance : 3

48
Tree	dataset . setDataset ( dataset ) ; public
Code	dataset . setDataset ( dataset ) ; public
Distance : 3

49
Tree	dataset . setDataset ( dataset ) ; SerialUtilities
Code	dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 3

50
Tree	dataset . setDataset ( dataset ) ; GradientPaint
Code	dataset . setDataset ( dataset ) ; GradientPaint
Distance : 3

51
Tree	dataset . setDataset ( dataset ) ; a1
Code	dataset . setDataset ( dataset ) ; a1
Distance : 3

52
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; ObjectUtils
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; ObjectUtils
Distance : 5

53
Tree	dataset . setDataset ( dataset ) ; p2
Code	dataset . setDataset ( dataset ) ; p2
Distance : 3

54
Tree	this . dataset = dataset . setDataset () ; p2
Code	this . dataset = dataset . setDataset () ; p2
Distance : 8

55
Tree	this . dataset = dataset . setDataset () ; ObjectUtils
Code	this . dataset = dataset . setDataset () ; ObjectUtils
Distance : 8

56
Tree	this . dataset = dataset . setDataset () ; anchor
Code	this . dataset = dataset . setDataset () ; anchor
Distance : 8

57
Tree	this . dataset = dataset . setDataset () ; double
Code	this . dataset = dataset . setDataset () ; double
Distance : 8

58
Tree	this . dataset = ( dataset ) dataset . setDataset () ; Color.RED
Code	this . dataset = ( dataset ) dataset . setDataset () ; Color.RED
Distance : 9

59
Tree	this . dataset = ( dataset ) dataset . setDataset () ; a1
Code	this . dataset = ( dataset ) dataset . setDataset () ; a1
Distance : 9

60
Tree	this . dataset = ( dataset ) dataset . setDataset () ; GradientPaint
Code	this . dataset = ( dataset ) dataset . setDataset () ; GradientPaint
Distance : 9

61
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; p2
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; p2
Distance : 5

62
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; a1
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; a1
Distance : 5

63
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; GradientPaint
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; GradientPaint
Distance : 5

64
Tree	this . dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Code	this . dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 7

65
Tree	this . dataset = ( dataset ) dataset . setDataset () ; anchor
Code	this . dataset = ( dataset ) dataset . setDataset () ; anchor
Distance : 9

66
Tree	dataset . setDataset ( this , dataset ) ; Color.RED
Code	dataset . setDataset ( this , dataset ) ; Color.RED
Distance : 5

67
Tree	this . dataset = ( dataset ) dataset . setDataset () ; ObjectUtils
Code	this . dataset = ( dataset ) dataset . setDataset () ; ObjectUtils
Distance : 9

68
Tree	this . dataset = dataset . setDataset ( dataset ) ; GradientPaint
Code	this . dataset = dataset . setDataset ( dataset ) ; GradientPaint
Distance : 7

69
Tree	this . dataset = dataset . setDataset ( dataset ) ; a1
Code	this . dataset = dataset . setDataset ( dataset ) ; a1
Distance : 7

70
Tree	this . dataset = dataset . setDataset ( dataset ) ; p2
Code	this . dataset = dataset . setDataset ( dataset ) ; p2
Distance : 7

71
Tree	this . dataset = dataset . setDataset ( dataset ) ; ObjectUtils
Code	this . dataset = dataset . setDataset ( dataset ) ; ObjectUtils
Distance : 7

72
Tree	this . dataset = dataset . setDataset ( dataset ) ; double
Code	this . dataset = dataset . setDataset ( dataset ) ; double
Distance : 7

73
Tree	this . dataset = dataset ; anchor
Code	this . dataset = dataset ; anchor
Distance : 5

74
Tree	dataset = NUMBER_CONSTANT / dataset ; anchor
Code	dataset = NUMBER_CONSTANT / dataset ; anchor
Distance : 6

75
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Distance : 5

76
Tree	this . dataset = ( dataset ) dataset . setDataset () ; p2
Code	this . dataset = ( dataset ) dataset . setDataset () ; p2
Distance : 9

77
Tree	dataset = Color.YELLOW ;
Code	dataset = Color.YELLOW ;
Distance : 4

78
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Distance : 5

79
Tree	this . dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Code	this . dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Distance : 9

80
Tree	dataset = dataset . setDataset ( dataset ) ; Color.RED
Code	dataset = dataset . setDataset ( dataset ) ; Color.RED
Distance : 5

81
Tree	dataset = dataset . setDataset ( dataset ) ; GradientPaint
Code	dataset = dataset . setDataset ( dataset ) ; GradientPaint
Distance : 5

82
Tree	dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Code	dataset = dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 5

83
Tree	setDataset ( dataset.data ) ;
Code	setDataset ( dataset.data ) ;
Distance : 1

84
Tree	setDataset ( StandardPieToolTipGenerator ) ;
Code	setDataset ( StandardPieToolTipGenerator ) ;
Distance : 1

85
Tree	dataset * dataset ;
Code	dataset * dataset ;
Distance : 3

86
Tree	dataset Color.GRAY dataset ;
Code	dataset Color.GRAY dataset ;
Distance : 3

87
Tree	setDataset ( key ) ;
Code	setDataset ( key ) ;
Distance : 1

88
Tree	setDataset ( Range ) ;
Code	setDataset ( Range ) ;
Distance : 1

89
Tree	dataset = new StringBuilder ( dataset ) ;
Code	dataset = new StringBuilder ( dataset ) ;
Distance : 4

90
Tree	dataset = setDataset () ;
Code	dataset = setDataset () ;
Distance : 4

91
Tree	this . dataset = Color.WHITE ;
Code	this . dataset = Color.WHITE ;
Distance : 4

92
Tree	this . dataset = new ArrayList ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new ArrayList ( dataset ) . setDataset ( dataset ) ;
Distance : 10

93
Tree	dataset = dataset . setDataset () ;
Code	dataset = dataset . setDataset () ;
Distance : 5

94
Tree	this . dataset = return; ;
Code	this . dataset = return; ;
Distance : 4

95
Tree	this . dataset = new Range ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new Range ( dataset ) . setDataset ( dataset ) ;
Distance : 10

96
Tree	this . dataset = new StandardPieToolTipGenerator ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new StandardPieToolTipGenerator ( dataset ) . setDataset ( dataset ) ;
Distance : 10

97
Tree	dataset = dataset . setDataset ( i ) ;
Code	dataset = dataset . setDataset ( i ) ;
Distance : 5

98
Tree	this . dataset = new RendererChangeEvent ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new RendererChangeEvent ( dataset ) . setDataset ( dataset ) ;
Distance : 10

99
Tree	dataset = dataset . setDataset ( dataset ) ;
Code	dataset = dataset . setDataset ( dataset ) ;
Distance : 4

100
Tree	dataset = return; ;
Code	dataset = return; ;
Distance : 4

101
Tree	dataset = new RendererChangeEvent ( dataset ) ;
Code	dataset = new RendererChangeEvent ( dataset ) ;
Distance : 4

102
Tree	dataset . setDataset ( this , dataset ) ;
Code	dataset . setDataset ( this , dataset ) ;
Distance : 4

103
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

104
Tree	dataset = Color.ORANGE ;
Code	dataset = Color.ORANGE ;
Distance : 4

105
Tree	dataset = java.util.ArrayList ;
Code	dataset = java.util.ArrayList ;
Distance : 4

106
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

107
Tree	this . dataset = new MarkerChangeEvent ( dataset ) ;
Code	this . dataset = new MarkerChangeEvent ( dataset ) ;
Distance : 6

108
Tree	this . dataset = getDefaultShadowsVisible ;
Code	this . dataset = getDefaultShadowsVisible ;
Distance : 4

109
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

110
Tree	dataset = new Paint ( dataset ) ;
Code	dataset = new Paint ( dataset ) ;
Distance : 4

111
Tree	setDataset ( MarkerChangeEvent ) ;
Code	setDataset ( MarkerChangeEvent ) ;
Distance : 1

112
Tree	this . dataset = new ArrayList ( dataset ) ;
Code	this . dataset = new ArrayList ( dataset ) ;
Distance : 6

113
Tree	dataset = Color.WHITE ;
Code	dataset = Color.WHITE ;
Distance : 4

114
Tree	dataset = getDefaultShadowsVisible ;
Code	dataset = getDefaultShadowsVisible ;
Distance : 4

115
Tree	this . dataset = new Range ( dataset ) ;
Code	this . dataset = new Range ( dataset ) ;
Distance : 6

116
Tree	dataset index dataset ;
Code	dataset index dataset ;
Distance : 3

117
Tree	RectangleEdge = setDataset () ;
Code	RectangleEdge = setDataset () ;
Distance : 4

118
Tree	dataset == dataset ;
Code	dataset == dataset ;
Distance : 3

119
Tree	setDataset ( dataset ) ;
Code	setDataset ( dataset ) ;
Distance : 0

120
Tree	dataset = NUMBER_CONSTANT / dataset ; SerialUtilities
Code	dataset = NUMBER_CONSTANT / dataset ; SerialUtilities
Distance : 6

121
Tree	this . dataset = new java.util.ArrayList ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new java.util.ArrayList ( dataset ) . setDataset ( dataset ) ;
Distance : 10

122
Tree	dataset = dataset . setDataset ( starts ) ;
Code	dataset = dataset . setDataset ( starts ) ;
Distance : 5

123
Tree	dataset = dataset . setDataset ( starts , dataset ) ;
Code	dataset = dataset . setDataset ( starts , dataset ) ;
Distance : 6

124
Tree	dataset = dataset . setDataset ( section , dataset ) ;
Code	dataset = dataset . setDataset ( section , dataset ) ;
Distance : 6

125
Tree	dataset = dataset . setDataset ( path , dataset ) ;
Code	dataset = dataset . setDataset ( path , dataset ) ;
Distance : 6

126
Tree	dataset = dataset . setDataset ( state.workingLine , dataset ) ;
Code	dataset = dataset . setDataset ( state.workingLine , dataset ) ;
Distance : 6

127
Tree	this . dataset = Color.GREEN ;
Code	this . dataset = Color.GREEN ;
Distance : 4

128
Tree	( = ( dataset ) dataset . setDataset () ;
Code	( = ( dataset ) dataset . setDataset () ;
Distance : 6

129
Tree	dataset = dataset . setDataset ( baseResourceClass , dataset ) ;
Code	dataset = dataset . setDataset ( baseResourceClass , dataset ) ;
Distance : 6

130
Tree	dataset = dataset . setDataset ( Color.YELLOW , dataset ) ;
Code	dataset = dataset . setDataset ( Color.YELLOW , dataset ) ;
Distance : 6

131
Tree	dataset = dataset . setDataset ( baseName , dataset ) ;
Code	dataset = dataset . setDataset ( baseName , dataset ) ;
Distance : 6

132
Tree	getSectionOutlinesVisible = ( dataset ) dataset . setDataset () ;
Code	getSectionOutlinesVisible = ( dataset ) dataset . setDataset () ;
Distance : 6

133
Tree	MarkerChangeEvent = ( dataset ) dataset . setDataset () ;
Code	MarkerChangeEvent = ( dataset ) dataset . setDataset () ;
Distance : 6

134
Tree	RendererChangeEvent = ( dataset ) dataset . setDataset () ;
Code	RendererChangeEvent = ( dataset ) dataset . setDataset () ;
Distance : 6

135
Tree	RectangleEdge = ( dataset ) dataset . setDataset () ;
Code	RectangleEdge = ( dataset ) dataset . setDataset () ;
Distance : 6

136
Tree	LegendItem = ( dataset ) dataset . setDataset () ;
Code	LegendItem = ( dataset ) dataset . setDataset () ;
Distance : 6

137
Tree	dataset . setDataset ( this , dataset ) ; p2
Code	dataset . setDataset ( this , dataset ) ; p2
Distance : 5

138
Tree	dataset = dataset . setDataset ( dataset ) ; public
Code	dataset = dataset . setDataset ( dataset ) ; public
Distance : 5

139
Tree	XYDataset = ( dataset ) dataset . setDataset () ;
Code	XYDataset = ( dataset ) dataset . setDataset () ;
Distance : 6

140
Tree	dataset = dataset . setDataset ( Color.YELLOW ) ;
Code	dataset = dataset . setDataset ( Color.YELLOW ) ;
Distance : 5

141
Tree	String = ( dataset ) dataset . setDataset () ;
Code	String = ( dataset ) dataset . setDataset () ;
Distance : 6

142
Tree	final = ( dataset ) dataset . setDataset () ;
Code	final = ( dataset ) dataset . setDataset () ;
Distance : 6

143
Tree	this . dataset = ( dataset ) dataset . setDataset () ;
Code	this . dataset = ( dataset ) dataset . setDataset () ;
Distance : 8

144
Tree	dataset = dataset . setDataset ( section ) ;
Code	dataset = dataset . setDataset ( section ) ;
Distance : 5

145
Tree	dataset = dataset . setDataset ( path ) ;
Code	dataset = dataset . setDataset ( path ) ;
Distance : 5

146
Tree	this . dataset = new LegendGraphic ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new LegendGraphic ( dataset ) . setDataset ( dataset ) ;
Distance : 10

147
Tree	dataset = dataset . setDataset ( state.workingLine ) ;
Code	dataset = dataset . setDataset ( state.workingLine ) ;
Distance : 5

148
Tree	dataset = dataset . setDataset ( baseResourceClass ) ;
Code	dataset = dataset . setDataset ( baseResourceClass ) ;
Distance : 5

149
Tree	this . dataset = new ChartPanel ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new ChartPanel ( dataset ) . setDataset ( dataset ) ;
Distance : 10

150
Tree	dataset = dataset . setDataset ( Color.RED , dataset ) ;
Code	dataset = dataset . setDataset ( Color.RED , dataset ) ;
Distance : 6

151
Tree	dataset = dataset . setDataset ( that.y ) ;
Code	dataset = dataset . setDataset ( that.y ) ;
Distance : 5

152
Tree	this . dataset = new Line2D.Double ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new Line2D.Double ( dataset ) . setDataset ( dataset ) ;
Distance : 10

153
Tree	this . dataset = super(); ;
Code	this . dataset = super(); ;
Distance : 4

154
Tree	dataset = super(); ;
Code	dataset = super(); ;
Distance : 4

155
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

156
Tree	dataset = . ;
Code	dataset = . ;
Distance : 4

157
Tree	dataset = ( dataset ) dataset . setDataset () ;
Code	dataset = ( dataset ) dataset . setDataset () ;
Distance : 6

158
Tree	dataset = dataset . setDataset ( i , dataset ) ;
Code	dataset = dataset . setDataset ( i , dataset ) ;
Distance : 6

159
Tree	this . dataset = new DefaultXYDataset ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new DefaultXYDataset ( dataset ) . setDataset ( dataset ) ;
Distance : 10

160
Tree	dataset = NUMBER_CONSTANT / dataset ; double
Code	dataset = NUMBER_CONSTANT / dataset ; double
Distance : 6

161
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; public
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; public
Distance : 5

162
Tree	dataset . setDataset () ; a1
Code	dataset . setDataset () ; a1
Distance : 5

163
Tree	dataset = setDataset () ; a1
Code	dataset = setDataset () ; a1
Distance : 5

164
Tree	dataset = setDataset () ; GradientPaint
Code	dataset = setDataset () ; GradientPaint
Distance : 5

165
Tree	dataset = setDataset () ; SerialUtilities
Code	dataset = setDataset () ; SerialUtilities
Distance : 5

166
Tree	setDataset () ; Color.RED
Code	setDataset () ; Color.RED
Distance : 4

167
Tree	setDataset () ; GradientPaint
Code	setDataset () ; GradientPaint
Distance : 4

168
Tree	setDataset () ; a1
Code	setDataset () ; a1
Distance : 4

169
Tree	setDataset () ; p2
Code	setDataset () ; p2
Distance : 4

170
Tree	dataset . setDataset () ; ObjectUtils
Code	dataset . setDataset () ; ObjectUtils
Distance : 5

171
Tree	setDataset () ; ObjectUtils
Code	setDataset () ; ObjectUtils
Distance : 4

172
Tree	this . dataset = null ; c2
Code	this . dataset = null ; c2
Distance : 5

173
Tree	dataset = setDataset () ; public
Code	dataset = setDataset () ; public
Distance : 5

174
Tree	this . dataset = null ; hashCode
Code	this . dataset = null ; hashCode
Distance : 5

175
Tree	this . dataset = null ; DatasetUtilities
Code	this . dataset = null ; DatasetUtilities
Distance : 5

176
Tree	this . dataset = null ; !=
Code	this . dataset = null ; !=
Distance : 5

177
Tree	this . dataset = null ; final
Code	this . dataset = null ; final
Distance : 5

178
Tree	dataset = setDataset () ; Color.RED
Code	dataset = setDataset () ; Color.RED
Distance : 5

179
Tree	setDataset () ; anchor
Code	setDataset () ; anchor
Distance : 4

180
Tree	dataset = true ; ObjectUtilities
Code	dataset = true ; ObjectUtilities
Distance : 5

181
Tree	dataset = this . dataset ; GradientPaint
Code	dataset = this . dataset ; GradientPaint
Distance : 6

182
Tree	dataset = true ; double
Code	dataset = true ; double
Distance : 5

183
Tree	dataset = this . dataset . setDataset () ; SerialUtilities
Code	dataset = this . dataset . setDataset () ; SerialUtilities
Distance : 8

184
Tree	dataset = this . dataset . setDataset () ; GradientPaint
Code	dataset = this . dataset . setDataset () ; GradientPaint
Distance : 8

185
Tree	dataset = this . dataset . setDataset () ; a1
Code	dataset = this . dataset . setDataset () ; a1
Distance : 8

186
Tree	dataset = this . dataset . setDataset () ; p2
Code	dataset = this . dataset . setDataset () ; p2
Distance : 8

187
Tree	dataset = this . dataset . setDataset () ; ObjectUtils
Code	dataset = this . dataset . setDataset () ; ObjectUtils
Distance : 8

188
Tree	dataset = this . dataset . setDataset () ; anchor
Code	dataset = this . dataset . setDataset () ; anchor
Distance : 8

189
Tree	dataset = NUMBER_CONSTANT ; ObjectUtils
Code	dataset = NUMBER_CONSTANT ; ObjectUtils
Distance : 5

190
Tree	dataset = null ; c2
Code	dataset = null ; c2
Distance : 5

191
Tree	dataset = null ; hashCode
Code	dataset = null ; hashCode
Distance : 5

192
Tree	dataset = null ; Color.red
Code	dataset = null ; Color.red
Distance : 5

193
Tree	dataset = null ; DatasetUtilities
Code	dataset = null ; DatasetUtilities
Distance : 5

194
Tree	dataset = null ; !=
Code	dataset = null ; !=
Distance : 5

195
Tree	dataset = null ; final
Code	dataset = null ; final
Distance : 5

196
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; readPaint
Code	this . dataset = dataset . setDataset ( dataset , false ) ; readPaint
Distance : 9

197
Tree	dataset = this . dataset ; ObjectUtils
Code	dataset = this . dataset ; ObjectUtils
Distance : 6

198
Tree	dataset = this . dataset ; p2
Code	dataset = this . dataset ; p2
Distance : 6

199
Tree	dataset . setDataset () ; p2
Code	dataset . setDataset () ; p2
Distance : 5

200
Tree	dataset . setDataset () ; anchor
Code	dataset . setDataset () ; anchor
Distance : 5

201
Tree	dataset = this . dataset . setDataset () ; public
Code	dataset = this . dataset . setDataset () ; public
Distance : 8

202
Tree	dataset . setDataset () ; double
Code	dataset . setDataset () ; double
Distance : 5

203
Tree	setDataset ( dataset , STRING_CONSTANT ) ; p2
Code	setDataset ( dataset , STRING_CONSTANT ) ; p2
Distance : 3

204
Tree	dataset = dataset . setDataset () ; anchor
Code	dataset = dataset . setDataset () ; anchor
Distance : 6

205
Tree	this . setDataset () ; a1
Code	this . setDataset () ; a1
Distance : 5

206
Tree	dataset = dataset . setDataset () ; double
Code	dataset = dataset . setDataset () ; double
Distance : 6

207
Tree	dataset = true ; a1
Code	dataset = true ; a1
Distance : 5

208
Tree	this . setDataset () ; double
Code	this . setDataset () ; double
Distance : 5

209
Tree	this . setDataset () ; anchor
Code	this . setDataset () ; anchor
Distance : 5

210
Tree	this . setDataset () ; ObjectUtils
Code	this . setDataset () ; ObjectUtils
Distance : 5

211
Tree	dataset = dataset . setDataset () ; p2
Code	dataset = dataset . setDataset () ; p2
Distance : 6

212
Tree	setDataset () ; SerialUtilities
Code	setDataset () ; SerialUtilities
Distance : 4

213
Tree	this . dataset = dataset ; ObjectUtils
Code	this . dataset = dataset ; ObjectUtils
Distance : 5

214
Tree	this . dataset = dataset ; p2
Code	this . dataset = dataset ; p2
Distance : 5

215
Tree	this . dataset = dataset ; Color.RED
Code	this . dataset = dataset ; Color.RED
Distance : 5

216
Tree	this . dataset = dataset ; SerialUtilities
Code	this . dataset = dataset ; SerialUtilities
Distance : 5

217
Tree	this . dataset = dataset ; GradientPaint
Code	this . dataset = dataset ; GradientPaint
Distance : 5

218
Tree	this . dataset = dataset ; a1
Code	this . dataset = dataset ; a1
Distance : 5

219
Tree	this . dataset = dataset ; anchor
Code	this . dataset = dataset ; anchor
Distance : 5

220
Tree	this . dataset = dataset ; public
Code	this . dataset = dataset ; public
Distance : 5

221
Tree	dataset = true ; DialLayerChangeEvent
Code	dataset = true ; DialLayerChangeEvent
Distance : 5

222
Tree	dataset = dataset . setDataset () ; a1
Code	dataset = dataset . setDataset () ; a1
Distance : 6

223
Tree	dataset = dataset . setDataset () ; GradientPaint
Code	dataset = dataset . setDataset () ; GradientPaint
Distance : 6

224
Tree	this . setDataset () ; Color.RED
Code	this . setDataset () ; Color.RED
Distance : 5

225
Tree	setDataset ( dataset , STRING_CONSTANT ) ; public
Code	setDataset ( dataset , STRING_CONSTANT ) ; public
Distance : 3

226
Tree	setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Code	setDataset ( dataset , STRING_CONSTANT ) ; SerialUtilities
Distance : 3

227
Tree	setDataset ( dataset , STRING_CONSTANT ) ; GradientPaint
Code	setDataset ( dataset , STRING_CONSTANT ) ; GradientPaint
Distance : 3

228
Tree	setDataset ( dataset , STRING_CONSTANT ) ; a1
Code	setDataset ( dataset , STRING_CONSTANT ) ; a1
Distance : 3

229
Tree	setDataset ( dataset , STRING_CONSTANT ) ; ObjectUtils
Code	setDataset ( dataset , STRING_CONSTANT ) ; ObjectUtils
Distance : 3

230
Tree	this . setDataset () ; SerialUtilities
Code	this . setDataset () ; SerialUtilities
Distance : 5

231
Tree	setDataset ( dataset , STRING_CONSTANT ) ; anchor
Code	setDataset ( dataset , STRING_CONSTANT ) ; anchor
Distance : 3

232
Tree	setDataset ( dataset , STRING_CONSTANT ) ; double
Code	setDataset ( dataset , STRING_CONSTANT ) ; double
Distance : 3

233
Tree	dataset = NUMBER_CONSTANT ; double
Code	dataset = NUMBER_CONSTANT ; double
Distance : 5

234
Tree	dataset = this . dataset ; public
Code	dataset = this . dataset ; public
Distance : 6

235
Tree	dataset = this . dataset ; SerialUtilities
Code	dataset = this . dataset ; SerialUtilities
Distance : 6

236
Tree	this . setDataset () ; public
Code	this . setDataset () ; public
Distance : 5

237
Tree	this . setDataset () ; GradientPaint
Code	this . setDataset () ; GradientPaint
Distance : 5

238
Tree	dataset = dataset . setDataset () ; public
Code	dataset = dataset . setDataset () ; public
Distance : 6

239
Tree	dataset = dataset . setDataset () ; ObjectUtils
Code	dataset = dataset . setDataset () ; ObjectUtils
Distance : 6

240
Tree	dataset = dataset . setDataset () ; SerialUtilities
Code	dataset = dataset . setDataset () ; SerialUtilities
Distance : 6

241
Tree	dataset = dataset . setDataset () ; Color.RED
Code	dataset = dataset . setDataset () ; Color.RED
Distance : 6

242
Tree	dataset = this . dataset . setDataset () ; double
Code	dataset = this . dataset . setDataset () ; double
Distance : 8

243
Tree	setDataset () ;
Code	setDataset () ;
Distance : 3

244
Tree	setDataset ( dataset ) ; Color.RED
Code	setDataset ( dataset ) ; Color.RED
Distance : 1

245
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; printStackTrace
Code	this . dataset = dataset . setDataset ( dataset , false ) ; printStackTrace
Distance : 9

246
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; double
Code	this . dataset = dataset . setDataset ( dataset , false ) ; double
Distance : 9

247
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; ObjectUtilities
Code	this . dataset = dataset . setDataset ( dataset , false ) ; ObjectUtilities
Distance : 9

248
Tree	setDataset ( dataset ) ; a1
Code	setDataset ( dataset ) ; a1
Distance : 1

249
Tree	dataset = Color.BLACK ;
Code	dataset = Color.BLACK ;
Distance : 4

250
Tree	setDataset ( dataset ) ; GradientPaint
Code	setDataset ( dataset ) ; GradientPaint
Distance : 1

251
Tree	setDataset ( dataset ) ; ObjectUtils
Code	setDataset ( dataset ) ; ObjectUtils
Distance : 1

252
Tree	setDataset ( dataset ) ; anchor
Code	setDataset ( dataset ) ; anchor
Distance : 1

253
Tree	setDataset ( dataset ) ; double
Code	setDataset ( dataset ) ; double
Distance : 1

254
Tree	dataset = NUMBER_CONSTANT ; p2
Code	dataset = NUMBER_CONSTANT ; p2
Distance : 5

255
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

256
Tree	final = null ;
Code	final = null ;
Distance : 4

257
Tree	setDataset ( dataset ) ; public
Code	setDataset ( dataset ) ; public
Distance : 1

258
Tree	final = dataset ;
Code	final = dataset ;
Distance : 3

259
Tree	put = dataset ;
Code	put = dataset ;
Distance : 3

260
Tree	dataset = NUMBER_CONSTANT ; Color.RED
Code	dataset = NUMBER_CONSTANT ; Color.RED
Distance : 5

261
Tree	String = new ArrayList < () ;
Code	String = new ArrayList < () ;
Distance : 6

262
Tree	String = true ;
Code	String = true ;
Distance : 4

263
Tree	dataset = this . dataset ;
Code	dataset = this . dataset ;
Distance : 5

264
Tree	this . dataset = Color.GRAY ;
Code	this . dataset = Color.GRAY ;
Distance : 4

265
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; a1
Code	this . dataset = dataset . setDataset ( dataset , false ) ; a1
Distance : 9

266
Tree	dataset = NUMBER_CONSTANT ; public
Code	dataset = NUMBER_CONSTANT ; public
Distance : 5

267
Tree	dataset = NUMBER_CONSTANT ; SerialUtilities
Code	dataset = NUMBER_CONSTANT ; SerialUtilities
Distance : 5

268
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; ObjectUtils
Code	this . dataset = dataset . setDataset ( dataset , false ) ; ObjectUtils
Distance : 9

269
Tree	put = null ;
Code	put = null ;
Distance : 4

270
Tree	setDataset ( dataset ) ; SerialUtilities
Code	setDataset ( dataset ) ; SerialUtilities
Distance : 1

271
Tree	dataset = new MarkerChangeEvent < () ;
Code	dataset = new MarkerChangeEvent < () ;
Distance : 6

272
Tree	dataset = NUMBER_CONSTANT ;
Code	dataset = NUMBER_CONSTANT ;
Distance : 4

273
Tree	XYDataset = new ArrayList < () ;
Code	XYDataset = new ArrayList < () ;
Distance : 6

274
Tree	String = null ;
Code	String = null ;
Distance : 4

275
Tree	String = dataset ;
Code	String = dataset ;
Distance : 3

276
Tree	XYDataset = true ;
Code	XYDataset = true ;
Distance : 4

277
Tree	this . dataset = new Paint ( dataset ) ;
Code	this . dataset = new Paint ( dataset ) ;
Distance : 6

278
Tree	dataset Color.BLACK dataset ;
Code	dataset Color.BLACK dataset ;
Distance : 3

279
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

280
Tree	String = setDataset () ;
Code	String = setDataset () ;
Distance : 4

281
Tree	this . dataset = new DefaultXYDataset ( dataset ) ;
Code	this . dataset = new DefaultXYDataset ( dataset ) ;
Distance : 6

282
Tree	this . dataset . setDataset ( dataset ) ;
Code	this . dataset . setDataset ( dataset ) ;
Distance : 4

283
Tree	this . setDataset () ;
Code	this . setDataset () ;
Distance : 4

284
Tree	this . dataset . setDataset () ;
Code	this . dataset . setDataset () ;
Distance : 5

285
Tree	dataset = new java.util.ArrayList ( dataset ) ;
Code	dataset = new java.util.ArrayList ( dataset ) ;
Distance : 4

286
Tree	RendererChangeEvent = new ArrayList < () ;
Code	RendererChangeEvent = new ArrayList < () ;
Distance : 6

287
Tree	( = setDataset () ;
Code	( = setDataset () ;
Distance : 4

288
Tree	MarkerChangeEvent = new ArrayList < () ;
Code	MarkerChangeEvent = new ArrayList < () ;
Distance : 6

289
Tree	dataset . setDataset () ;
Code	dataset . setDataset () ;
Distance : 4

290
Tree	RendererChangeEvent = true ;
Code	RendererChangeEvent = true ;
Distance : 4

291
Tree	dataset = dataset . setDataset ( getItemShape ) ;
Code	dataset = dataset . setDataset ( getItemShape ) ;
Distance : 5

292
Tree	dataset - dataset ;
Code	dataset - dataset ;
Distance : 3

293
Tree	dataset . setDataset ( dataset ) ; ObjectUtils
Code	dataset . setDataset ( dataset ) ; ObjectUtils
Distance : 3

294
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

295
Tree	dataset = NUMBER_CONSTANT / dataset ; ObjectUtils
Code	dataset = NUMBER_CONSTANT / dataset ; ObjectUtils
Distance : 6

296
Tree	final = setDataset () ;
Code	final = setDataset () ;
Distance : 4

297
Tree	dataset = this . dataset . setDataset () ;
Code	dataset = this . dataset . setDataset () ;
Distance : 7

298
Tree	XYDataset = null ;
Code	XYDataset = null ;
Distance : 4

299
Tree	this . dataset = new ChartPanel ( dataset ) ;
Code	this . dataset = new ChartPanel ( dataset ) ;
Distance : 6

300
Tree	XYDataset = dataset ;
Code	XYDataset = dataset ;
Distance : 3

301
Tree	float = true ;
Code	float = true ;
Distance : 4

302
Tree	this . dataset = Color.RED ;
Code	this . dataset = Color.RED ;
Distance : 4

303
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 4

304
Tree	RendererChangeEvent = null ;
Code	RendererChangeEvent = null ;
Distance : 4

305
Tree	this . dataset = dataset ( dataset ) ;
Code	this . dataset = dataset ( dataset ) ;
Distance : 5

306
Tree	this . dataset = null ; Color.red
Code	this . dataset = null ; Color.red
Distance : 5

307
Tree	RendererChangeEvent = dataset ;
Code	RendererChangeEvent = dataset ;
Distance : 3

308
Tree	MarkerChangeEvent = null ;
Code	MarkerChangeEvent = null ;
Distance : 4

309
Tree	setDataset ( LegendItem ) ;
Code	setDataset ( LegendItem ) ;
Distance : 1

310
Tree	MarkerChangeEvent = dataset ;
Code	MarkerChangeEvent = dataset ;
Distance : 3

311
Tree	this . dataset = dataset . setDataset ( dataset , true ) ;
Code	this . dataset = dataset . setDataset ( dataset , true ) ;
Distance : 8

312
Tree	dataset false dataset ;
Code	dataset false dataset ;
Distance : 3

313
Tree	getSectionOutlinesVisible = null ;
Code	getSectionOutlinesVisible = null ;
Distance : 4

314
Tree	dataset . setDataset ( dataset ) ;
Code	dataset . setDataset ( dataset ) ;
Distance : 2

315
Tree	dataset = new Range ( dataset ) ;
Code	dataset = new Range ( dataset ) ;
Distance : 4

316
Tree	dataset = NUMBER_CONSTANT / dataset ; p2
Code	dataset = NUMBER_CONSTANT / dataset ; p2
Distance : 6

317
Tree	this . dataset = dataset . setDataset ( dataset ) ; anchor
Code	this . dataset = dataset . setDataset ( dataset ) ; anchor
Distance : 7

318
Tree	this . dataset = new LegendGraphic ( dataset ) ;
Code	this . dataset = new LegendGraphic ( dataset ) ;
Distance : 6

319
Tree	dataset = this . dataset . setDataset () ; Color.RED
Code	dataset = this . dataset . setDataset () ; Color.RED
Distance : 8

320
Tree	this . dataset = dataset . setDataset ( dataset , false ) ;
Code	this . dataset = dataset . setDataset ( dataset , false ) ;
Distance : 8

321
Tree	dataset if dataset ;
Code	dataset if dataset ;
Distance : 3

322
Tree	setDataset () ; double
Code	setDataset () ; double
Distance : 4

323
Tree	setDataset ( XYDataset ) ;
Code	setDataset ( XYDataset ) ;
Distance : 1

324
Tree	this . dataset . setDataset () ; ObjectUtils
Code	this . dataset . setDataset () ; ObjectUtils
Distance : 6

325
Tree	dataset true dataset ;
Code	dataset true dataset ;
Distance : 3

326
Tree	this . dataset = new StandardPieToolTipGenerator ( dataset ) ;
Code	this . dataset = new StandardPieToolTipGenerator ( dataset ) ;
Distance : 6

327
Tree	dataset = new ChartPanel ( dataset ) ;
Code	dataset = new ChartPanel ( dataset ) ;
Distance : 4

328
Tree	dataset = new StandardPieToolTipGenerator ( dataset ) ;
Code	dataset = new StandardPieToolTipGenerator ( dataset ) ;
Distance : 4

329
Tree	dataset = new ArrayList ( dataset ) ;
Code	dataset = new ArrayList ( dataset ) ;
Distance : 4

330
Tree	XYDataset = setDataset () ;
Code	XYDataset = setDataset () ;
Distance : 4

331
Tree	setDataset ( TableXYDataset ) ;
Code	setDataset ( TableXYDataset ) ;
Distance : 1

332
Tree	this . dataset = setDataset ( dataset ) ;
Code	this . dataset = setDataset ( dataset ) ;
Distance : 4

333
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; double
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; double
Distance : 5

334
Tree	this . dataset = dataset ( dataset ) ; double
Code	this . dataset = dataset ( dataset ) ; double
Distance : 6

335
Tree	this . dataset . setDataset () ; Color.RED
Code	this . dataset . setDataset () ; Color.RED
Distance : 6

336
Tree	dataset = null ;
Code	dataset = null ;
Distance : 4

337
Tree	getSectionOutlinesVisible = setDataset () ;
Code	getSectionOutlinesVisible = setDataset () ;
Distance : 4

338
Tree	this . dataset = dataset ; public
Code	this . dataset = dataset ; public
Distance : 5

339
Tree	MarkerChangeEvent = setDataset () ;
Code	MarkerChangeEvent = setDataset () ;
Distance : 4

340
Tree	this . dataset = dataset ; SerialUtilities
Code	this . dataset = dataset ; SerialUtilities
Distance : 5

341
Tree	this . dataset . setDataset () ; public
Code	this . dataset . setDataset () ; public
Distance : 6

342
Tree	this . dataset = dataset ; GradientPaint
Code	this . dataset = dataset ; GradientPaint
Distance : 5

343
Tree	this . dataset = dataset ; a1
Code	this . dataset = dataset ; a1
Distance : 5

344
Tree	this . dataset = dataset ; p2
Code	this . dataset = dataset ; p2
Distance : 5

345
Tree	this . dataset = new java.util.ArrayList ( dataset ) ;
Code	this . dataset = new java.util.ArrayList ( dataset ) ;
Distance : 6

346
Tree	this . dataset = dataset ; ObjectUtils
Code	this . dataset = dataset ; ObjectUtils
Distance : 5

347
Tree	this . dataset . setDataset () ; SerialUtilities
Code	this . dataset . setDataset () ; SerialUtilities
Distance : 6

348
Tree	this . dataset . setDataset () ; GradientPaint
Code	this . dataset . setDataset () ; GradientPaint
Distance : 6

349
Tree	this . dataset = new RendererChangeEvent ( dataset ) ;
Code	this . dataset = new RendererChangeEvent ( dataset ) ;
Distance : 6

350
Tree	this . dataset = dataset ; Color.RED
Code	this . dataset = dataset ; Color.RED
Distance : 5

351
Tree	this . dataset = dataset . setDataset () ; public
Code	this . dataset = dataset . setDataset () ; public
Distance : 8

352
Tree	this . dataset . setDataset () ; a1
Code	this . dataset . setDataset () ; a1
Distance : 6

353
Tree	put = ( dataset ) dataset . setDataset () ;
Code	put = ( dataset ) dataset . setDataset () ;
Distance : 6

354
Tree	dataset = Color.GREEN ;
Code	dataset = Color.GREEN ;
Distance : 4

355
Tree	this . dataset = true ; deepClone
Code	this . dataset = true ; deepClone
Distance : 5

356
Tree	setDataset () ; public
Code	setDataset () ; public
Distance : 4

357
Tree	this . dataset = dataset . setDataset () ; GradientPaint
Code	this . dataset = dataset . setDataset () ; GradientPaint
Distance : 8

358
Tree	RendererChangeEvent = setDataset () ;
Code	RendererChangeEvent = setDataset () ;
Distance : 4

359
Tree	dataset = setDataset () ; p2
Code	dataset = setDataset () ; p2
Distance : 5

360
Tree	dataset null dataset ;
Code	dataset null dataset ;
Distance : 3

361
Tree	dataset = NUMBER_CONSTANT ; GradientPaint
Code	dataset = NUMBER_CONSTANT ; GradientPaint
Distance : 5

362
Tree	this . dataset . setDataset () ; p2
Code	this . dataset . setDataset () ; p2
Distance : 6

363
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; deepClone
Code	this . dataset = dataset . setDataset ( dataset , false ) ; deepClone
Distance : 9

364
Tree	dataset = new DefaultXYDataset ( dataset ) ;
Code	dataset = new DefaultXYDataset ( dataset ) ;
Distance : 4

365
Tree	put = setDataset () ;
Code	put = setDataset () ;
Distance : 4

366
Tree	dataset = this . dataset ; a1
Code	dataset = this . dataset ; a1
Distance : 6

367
Tree	dataset = true ; printStackTrace
Code	dataset = true ; printStackTrace
Distance : 5

368
Tree	dataset = dataset . setDataset ( Color.RED ) ;
Code	dataset = dataset . setDataset ( Color.RED ) ;
Distance : 5

369
Tree	dataset . setDataset ( dataset ) ; anchor
Code	dataset . setDataset ( dataset ) ; anchor
Distance : 3

370
Tree	setDataset ( dataset ) ;
Code	setDataset ( dataset ) ;
Distance : 0

371
Tree	this . dataset . setDataset () ; anchor
Code	this . dataset . setDataset () ; anchor
Distance : 6

372
Tree	dataset = new MarkerChangeEvent ( dataset ) ;
Code	dataset = new MarkerChangeEvent ( dataset ) ;
Distance : 4

373
Tree	this . dataset = dataset . setDataset () ; a1
Code	this . dataset = dataset . setDataset () ; a1
Distance : 8

374
Tree	dataset = setDataset () ; anchor
Code	dataset = setDataset () ; anchor
Distance : 5

375
Tree	dataset = setDataset () ; double
Code	dataset = setDataset () ; double
Distance : 5

376
Tree	dataset = true ; ObjectUtils
Code	dataset = true ; ObjectUtils
Distance : 5

377
Tree	this . dataset = dataset ( dataset ) ; ObjectUtils
Code	this . dataset = dataset ( dataset ) ; ObjectUtils
Distance : 6

378
Tree	dataset . setDataset () ; Color.RED
Code	dataset . setDataset () ; Color.RED
Distance : 5

379
Tree	LegendItem = setDataset () ;
Code	LegendItem = setDataset () ;
Distance : 4

380
Tree	setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Code	setDataset ( dataset , STRING_CONSTANT ) ; Color.RED
Distance : 3

381
Tree	dataset . setDataset () ; public
Code	dataset . setDataset () ; public
Distance : 5

382
Tree	this . dataset . setDataset () ; double
Code	this . dataset . setDataset () ; double
Distance : 6

383
Tree	dataset = ( dataset ) dataset . setDataset () ; Color.RED
Code	dataset = ( dataset ) dataset . setDataset () ; Color.RED
Distance : 7

384
Tree	dataset . setDataset () ; SerialUtilities
Code	dataset . setDataset () ; SerialUtilities
Distance : 5

385
Tree	this . dataset = dataset . setDataset () ;
Code	this . dataset = dataset . setDataset () ;
Distance : 7

386
Tree	setDataset ( RendererChangeEvent ) ;
Code	setDataset ( RendererChangeEvent ) ;
Distance : 1

387
Tree	this . dataset . setDataset ( dataset ) ; p2
Code	this . dataset . setDataset ( dataset ) ; p2
Distance : 5

388
Tree	dataset = this . dataset ; anchor
Code	dataset = this . dataset ; anchor
Distance : 6

389
Tree	dataset . setDataset () ; GradientPaint
Code	dataset . setDataset () ; GradientPaint
Distance : 5

390
Tree	this . dataset = true ; readPaint
Code	this . dataset = true ; readPaint
Distance : 5

391
Tree	dataset = ( dataset ) dataset . setDataset () ; public
Code	dataset = ( dataset ) dataset . setDataset () ; public
Distance : 7

392
Tree	dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Code	dataset = ( dataset ) dataset . setDataset () ; SerialUtilities
Distance : 7

393
Tree	dataset = ( dataset ) dataset . setDataset () ; GradientPaint
Code	dataset = ( dataset ) dataset . setDataset () ; GradientPaint
Distance : 7

394
Tree	dataset = ( dataset ) dataset . setDataset () ; a1
Code	dataset = ( dataset ) dataset . setDataset () ; a1
Distance : 7

395
Tree	dataset = NUMBER_CONSTANT / dataset ; GradientPaint
Code	dataset = NUMBER_CONSTANT / dataset ; GradientPaint
Distance : 6

396
Tree	this . dataset = dataset ; double
Code	this . dataset = dataset ; double
Distance : 5

397
Tree	dataset = this . dataset ; double
Code	dataset = this . dataset ; double
Distance : 6

398
Tree	this . dataset . setDataset ( dataset ) ; Color.RED
Code	this . dataset . setDataset ( dataset ) ; Color.RED
Distance : 5

399
Tree	this . dataset . setDataset ( dataset ) ; public
Code	this . dataset . setDataset ( dataset ) ; public
Distance : 5

400
Tree	dataset = ( dataset ) dataset . setDataset () ; p2
Code	dataset = ( dataset ) dataset . setDataset () ; p2
Distance : 7

401
Tree	this . dataset . setDataset ( dataset ) ; SerialUtilities
Code	this . dataset . setDataset ( dataset ) ; SerialUtilities
Distance : 5

402
Tree	this . dataset . setDataset ( dataset ) ; anchor
Code	this . dataset . setDataset ( dataset ) ; anchor
Distance : 5

403
Tree	this . dataset . setDataset ( dataset ) ; double
Code	this . dataset . setDataset ( dataset ) ; double
Distance : 5

404
Tree	dataset = NUMBER_CONSTANT ; anchor
Code	dataset = NUMBER_CONSTANT ; anchor
Distance : 5

405
Tree	this . dataset = dataset ( dataset ) ; Color.RED
Code	this . dataset = dataset ( dataset ) ; Color.RED
Distance : 6

406
Tree	this . dataset = dataset ( dataset ) ; public
Code	this . dataset = dataset ( dataset ) ; public
Distance : 6

407
Tree	this . dataset = dataset ( dataset ) ; SerialUtilities
Code	this . dataset = dataset ( dataset ) ; SerialUtilities
Distance : 6

408
Tree	dataset = setDataset () ; ObjectUtils
Code	dataset = setDataset () ; ObjectUtils
Distance : 5

409
Tree	this . dataset = dataset ( dataset ) ; GradientPaint
Code	this . dataset = dataset ( dataset ) ; GradientPaint
Distance : 6

410
Tree	dataset = this . dataset ; Color.RED
Code	dataset = this . dataset ; Color.RED
Distance : 6

411
Tree	MarkerChangeEvent = true ;
Code	MarkerChangeEvent = true ;
Distance : 4

412
Tree	getSectionOutlinesVisible = dataset ;
Code	getSectionOutlinesVisible = dataset ;
Distance : 3

413
Tree	this . dataset = dataset ( dataset ) ; anchor
Code	this . dataset = dataset ( dataset ) ; anchor
Distance : 6

414
Tree	getSectionOutlinesVisible = new ArrayList < () ;
Code	getSectionOutlinesVisible = new ArrayList < () ;
Distance : 6

415
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

416
Tree	getSectionOutlinesVisible = true ;
Code	getSectionOutlinesVisible = true ;
Distance : 4

417
Tree	LegendItem = null ;
Code	LegendItem = null ;
Distance : 4

418
Tree	setDataset ( dataset ) ; p2
Code	setDataset ( dataset ) ; p2
Distance : 1

419
Tree	LegendItem = new ArrayList < () ;
Code	LegendItem = new ArrayList < () ;
Distance : 6

420
Tree	LegendItem = dataset ;
Code	LegendItem = dataset ;
Distance : 3

421
Tree	RectangleEdge = new ArrayList < () ;
Code	RectangleEdge = new ArrayList < () ;
Distance : 6

422
Tree	RectangleEdge = null ;
Code	RectangleEdge = null ;
Distance : 4

423
Tree	LegendItem = true ;
Code	LegendItem = true ;
Distance : 4

424
Tree	dataset = dataset . setDataset ( getItemShape , dataset ) ;
Code	dataset = dataset . setDataset ( getItemShape , dataset ) ;
Distance : 6

425
Tree	RectangleEdge = dataset ;
Code	RectangleEdge = dataset ;
Distance : 3

426
Tree	this . dataset . setDataset ( dataset ) ; GradientPaint
Code	this . dataset . setDataset ( dataset ) ; GradientPaint
Distance : 5

427
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

428
Tree	dataset = Color.GRAY ;
Code	dataset = Color.GRAY ;
Distance : 4

429
Tree	dataset = Color.RED ;
Code	dataset = Color.RED ;
Distance : 4

430
Tree	this . dataset = setDataset ( dataset ) ; GradientPaint
Code	this . dataset = setDataset ( dataset ) ; GradientPaint
Distance : 5

431
Tree	dataset = ( dataset ) dataset . setDataset () ; ObjectUtils
Code	dataset = ( dataset ) dataset . setDataset () ; ObjectUtils
Distance : 7

432
Tree	this . dataset = true ; printStackTrace
Code	this . dataset = true ; printStackTrace
Distance : 5

433
Tree	this . dataset = dataset ( dataset ) ; p2
Code	this . dataset = dataset ( dataset ) ; p2
Distance : 6

434
Tree	this . dataset = true ; double
Code	this . dataset = true ; double
Distance : 5

435
Tree	this . dataset = setDataset ( dataset ) ; a1
Code	this . dataset = setDataset ( dataset ) ; a1
Distance : 5

436
Tree	this . dataset = setDataset ( dataset ) ; p2
Code	this . dataset = setDataset ( dataset ) ; p2
Distance : 5

437
Tree	this . dataset = true ; ObjectUtilities
Code	this . dataset = true ; ObjectUtilities
Distance : 5

438
Tree	this . dataset = setDataset ( dataset ) ; ObjectUtils
Code	this . dataset = setDataset ( dataset ) ; ObjectUtils
Distance : 5

439
Tree	this . dataset = true ; ObjectUtils
Code	this . dataset = true ; ObjectUtils
Distance : 5

440
Tree	this . dataset = true ; DialLayerChangeEvent
Code	this . dataset = true ; DialLayerChangeEvent
Distance : 5

441
Tree	this . dataset = setDataset ( dataset ) ; anchor
Code	this . dataset = setDataset ( dataset ) ; anchor
Distance : 5

442
Tree	this . dataset = setDataset ( dataset ) ; double
Code	this . dataset = setDataset ( dataset ) ; double
Distance : 5

443
Tree	this . dataset . setDataset ( dataset ) ; a1
Code	this . dataset . setDataset ( dataset ) ; a1
Distance : 5

444
Tree	dataset = NUMBER_CONSTANT ; a1
Code	dataset = NUMBER_CONSTANT ; a1
Distance : 5

445
Tree	RectangleEdge = true ;
Code	RectangleEdge = true ;
Distance : 4

446
Tree	float = null ;
Code	float = null ;
Distance : 4

447
Tree	dataset = dataset ; Color.RED
Code	dataset = dataset ; Color.RED
Distance : 4

448
Tree	setDataset ( dataset , STRING_CONSTANT ) ;
Code	setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 2

449
Tree	dataset = ( dataset ) dataset . setDataset () ; double
Code	dataset = ( dataset ) dataset . setDataset () ; double
Distance : 7

450
Tree	this . dataset = new MarkerChangeEvent ( dataset ) . setDataset ( dataset ) ;
Code	this . dataset = new MarkerChangeEvent ( dataset ) . setDataset ( dataset ) ;
Distance : 10

451
Tree	this . dataset . setDataset ( dataset ) ; ObjectUtils
Code	this . dataset . setDataset ( dataset ) ; ObjectUtils
Distance : 5

452
Tree	dataset = dataset . setDataset ( dataset ) ; a1
Code	dataset = dataset . setDataset ( dataset ) ; a1
Distance : 5

453
Tree	dataset . setDataset ( dataset ) ; double
Code	dataset . setDataset ( dataset ) ; double
Distance : 3

454
Tree	dataset = dataset ; public
Code	dataset = dataset ; public
Distance : 4

455
Tree	dataset = new Range < () ;
Code	dataset = new Range < () ;
Distance : 6

456
Tree	float = dataset ;
Code	float = dataset ;
Distance : 3

457
Tree	put = new java.util.ArrayList < () ;
Code	put = new java.util.ArrayList < () ;
Distance : 6

458
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

459
Tree	dataset = true ; readPaint
Code	dataset = true ; readPaint
Distance : 5

460
Tree	dataset = ( dataset ) dataset . setDataset () ; anchor
Code	dataset = ( dataset ) dataset . setDataset () ; anchor
Distance : 7

461
Tree	dataset = true ; deepClone
Code	dataset = true ; deepClone
Distance : 5

462
Tree	this . dataset = dataset . setDataset () ; SerialUtilities
Code	this . dataset = dataset . setDataset () ; SerialUtilities
Distance : 8

463
Tree	dataset = dataset ; SerialUtilities
Code	dataset = dataset ; SerialUtilities
Distance : 4

464
Tree	this . dataset = setDataset ( dataset ) ; SerialUtilities
Code	this . dataset = setDataset ( dataset ) ; SerialUtilities
Distance : 5

465
Tree	dataset = dataset ; GradientPaint
Code	dataset = dataset ; GradientPaint
Distance : 4

466
Tree	dataset = NUMBER_CONSTANT / dataset ; a1
Code	dataset = NUMBER_CONSTANT / dataset ; a1
Distance : 6

467
Tree	this . dataset = dataset ( dataset ) ; a1
Code	this . dataset = dataset ( dataset ) ; a1
Distance : 6

468
Tree	this . dataset = dataset . setDataset ( dataset , false ) ; DialLayerChangeEvent
Code	this . dataset = dataset . setDataset ( dataset , false ) ; DialLayerChangeEvent
Distance : 9

469
Tree	this . setDataset () ; p2
Code	this . setDataset () ; p2
Distance : 5

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 380
Wrong
========================================================================
False

0
Tree	iterator2 iterator2 = p2 . iterator2 ( ( p1 ) return; ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( p1 ) return; ) ;
Distance : 6

1
Tree	iterator2 p1 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 p1 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	iterator2 p1 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 p1 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 7

3
Tree	iterator2 p2 = p2 . iterator2 ( ( double ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( double ) NUMBER_CONSTANT ) ;
Distance : 7

4
Tree	iterator2 p2 = this . iterator2 . PathIterator () ;
Code	iterator2 p2 = this . iterator2 . PathIterator () ;
Distance : 7

5
Tree	iterator2 iterator2 = p2 . iterator2 ( PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( PathIterator ) ;
Distance : 3

6
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

7
Tree	iterator2 p2 = p2 . iterator2 ( return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( return; ) ;
Distance : 4

8
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

9
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , Locale.UK ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , Locale.UK ) ;
Distance : 6

10
Tree	iterator2 p2 = p1 . iterator2 ( PathIterator ) ;
Code	iterator2 p2 = p1 . iterator2 ( PathIterator ) ;
Distance : 5

11
Tree	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT , true ) ;
Code	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT , true ) ;
Distance : 6

12
Tree	iterator2 p2 = p1 . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p1 . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

13
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , null ) ;
Distance : 5

14
Tree	iterator2 p2 = p2 . p1 ( iterator2 ) ;
Code	iterator2 p2 = p2 . p1 ( iterator2 ) ;
Distance : 4

15
Tree	iterator2 iterator2 ;
Code	iterator2 iterator2 ;
Distance : 8

16
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 , null ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 , null ) ;
Distance : 6

17
Tree	iterator2 iterator2 = this . p1 . iterator2 () ;
Code	iterator2 iterator2 = this . p1 . iterator2 () ;
Distance : 6

18
Tree	iterator2 p2 = p1 . iterator2 ( PathIterator , null ) ;
Code	iterator2 p2 = p1 . iterator2 ( PathIterator , null ) ;
Distance : 6

19
Tree	iterator2 iterator2 = p2 . iterator2 ( p1 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( p1 ) ;
Distance : 3

20
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) null ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) null ) ;
Distance : 6

21
Tree	iterator2 p2 = p2 . iterator2 ( this . p2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( this . p2 ) ;
Distance : 6

22
Tree	iterator2 iterator2 = p2 . iterator2 ( this . p2 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( this . p2 ) ;
Distance : 5

23
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 13

24
Tree	iterator2 p2 = p1 . iterator2 ( null ) ;
Code	iterator2 p2 = p1 . iterator2 ( null ) ;
Distance : 4

25
Tree	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

26
Tree	iterator2 iterator2 = p1 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 7

27
Tree	iterator2 p1 ;
Code	iterator2 p1 ;
Distance : 8

28
Tree	iterator2 p2 = XYBubbleRenderer . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = XYBubbleRenderer . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

29
Tree	iterator2 p2 = Color.GRAY . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = Color.GRAY . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

30
Tree	iterator2 p2 = iterateToFindZBounds . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = iterateToFindZBounds . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

31
Tree	iterator2 p2 = getRawDataItem . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = getRawDataItem . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

32
Tree	iterator2 p2 = getDomainAxisForDataset . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = getDomainAxisForDataset . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

33
Tree	iterator2 p2 = StrokeChooserPanel . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = StrokeChooserPanel . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	PathIterator p2 = DomainOrder.ASCENDING . PathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator p2 = DomainOrder.ASCENDING . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 4

35
Tree	iterator2 p2 = iterateToFindZBounds . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = iterateToFindZBounds . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

36
Tree	iterator2 iterator2 = p2 . PathIterator ( STRING_CONSTANT , true ) ;
Code	iterator2 iterator2 = p2 . PathIterator ( STRING_CONSTANT , true ) ;
Distance : 5

37
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Distance : 5

38
Tree	iterator2 p2 = p1 . PathIterator () ;
Code	iterator2 p2 = p1 . PathIterator () ;
Distance : 7

39
Tree	iterator2 p2 = p1 . PathIterator ( STRING_CONSTANT , true ) ;
Code	iterator2 p2 = p1 . PathIterator ( STRING_CONSTANT , true ) ;
Distance : 7

40
Tree	PathIterator p2 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Code	PathIterator p2 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	iterator2 p2 = p1 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p1 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 8

42
Tree	iterator2 p2 = PathIterator ( Color.GRAY ) ;
Code	iterator2 p2 = PathIterator ( Color.GRAY ) ;
Distance : 5

43
Tree	iterator2 p2 = PathIterator ( RenderingHints.KEY_TEXT_ANTIALIASING ) ;
Code	iterator2 p2 = PathIterator ( RenderingHints.KEY_TEXT_ANTIALIASING ) ;
Distance : 5

44
Tree	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Distance : 4

45
Tree	iterator2 iterator2 = p1 . iterator2 () ;
Code	iterator2 iterator2 = p1 . iterator2 () ;
Distance : 6

46
Tree	iterator2 p2 = p2 . iterator2 ( ( long ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( long ) NUMBER_CONSTANT ) ;
Distance : 7

47
Tree	PathIterator p2 = p2 . iterator2 ( null ) ;
Code	PathIterator p2 = p2 . iterator2 ( null ) ;
Distance : 2

48
Tree	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , true ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , true ) ;
Distance : 6

49
Tree	iterator2 iterator2 = p1 . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p1 . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 4

50
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) null ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) null ) ;
Distance : 7

51
Tree	iterator2 p2 = this . iterator2 . iterator2 ( p1 ) ;
Code	iterator2 p2 = this . iterator2 . iterator2 ( p1 ) ;
Distance : 7

52
Tree	iterator2 p2 ;
Code	iterator2 p2 ;
Distance : 7

53
Tree	iterator2 p1 = PathIterator ( this . p2 ) ;
Code	iterator2 p1 = PathIterator ( this . p2 ) ;
Distance : 7

54
Tree	iterator2 p1 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p1 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

55
Tree	PathIterator iterator2 = p1 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	PathIterator iterator2 = p1 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 7

56
Tree	iterator2 p1 = iterator2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p1 = iterator2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

57
Tree	iterator2 p2 = p2 . iterator2 ( p1 , this . PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( p1 , this . PathIterator ) ;
Distance : 8

58
Tree	static iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) super(); ) ;
Code	static iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) super(); ) ;
Distance : 8

59
Tree	PathIterator p2 = PathIterator ( PathIterator . PathIterator ( null ) ) ;
Code	PathIterator p2 = PathIterator ( PathIterator . PathIterator ( null ) ) ;
Distance : 6

60
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , this . p1 ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , this . p1 ) ;
Distance : 8

61
Tree	static iterator2 p2 = p2 . PathIterator ( ( iterator2 [] ) null ) ;
Code	static iterator2 p2 = p2 . PathIterator ( ( iterator2 [] ) null ) ;
Distance : 7

62
Tree	static iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) return; ) ;
Code	static iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) return; ) ;
Distance : 8

63
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , PathIterator . iterator2 ( iterator2 ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , PathIterator . iterator2 ( iterator2 ) ) ;
Distance : 11

64
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , PathIterator . iterator2 ( null ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , PathIterator . iterator2 ( null ) ) ;
Distance : 10

65
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , iterator2 . PathIterator ( super(); ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , iterator2 . PathIterator ( super(); ) ) ;
Distance : 11

66
Tree	PathIterator iterator2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( iterator2 ) ) ;
Code	PathIterator iterator2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( iterator2 ) ) ;
Distance : 9

67
Tree	iterator2 iterator2 = p2 . PathIterator ( iterator2 , p2 . PathIterator ( null ) ) ;
Code	iterator2 iterator2 = p2 . PathIterator ( iterator2 , p2 . PathIterator ( null ) ) ;
Distance : 9

68
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , p2 . iterator2 ( super(); ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , p2 . iterator2 ( super(); ) ) ;
Distance : 10

69
Tree	iterator2 p2 = iterator2 . iterator2 ( this . PathIterator ) ;
Code	iterator2 p2 = iterator2 . iterator2 ( this . PathIterator ) ;
Distance : 7

70
Tree	iterator2 p1 = PathIterator ( p1 ) ;
Code	iterator2 p1 = PathIterator ( p1 ) ;
Distance : 6

71
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , iterator2 . iterator2 ( iterator2 ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , iterator2 . iterator2 ( iterator2 ) ) ;
Distance : 10

72
Tree	iterator2 p2 = p2 . iterator2 ( p2 , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( p2 , null ) ;
Distance : 5

73
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , return; ) ;
Distance : 6

74
Tree	iterator2 iterator2 = p1 . iterator2 ( null ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( null ) ;
Distance : 3

75
Tree	iterator2 p2 = this . iterator2 . PathIterator () ; put
Code	iterator2 p2 = this . iterator2 . PathIterator () ; put
Distance : 8

76
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) return; ) ;
Distance : 8

77
Tree	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Distance : 7

78
Tree	iterator2 iterator2 = this . iterator2 . iterator2 ( iterator2 ) ;
Code	iterator2 iterator2 = this . iterator2 . iterator2 ( iterator2 ) ;
Distance : 6

79
Tree	iterator2 p1 = p1 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p1 = p1 . iterator2 ( STRING_CONSTANT ) ;
Distance : 5

80
Tree	iterator2 p2 = p2 . iterator2 ( ( p1 ) super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( p1 ) super(); ) ;
Distance : 7

81
Tree	iterator2 iterator2 = PathIterator ( this . p1 ) ;
Code	iterator2 iterator2 = PathIterator ( this . p1 ) ;
Distance : 6

82
Tree	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT ) ; put
Code	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT ) ; put
Distance : 5

83
Tree	iterator2 iterator2 = this . p2 . iterator2 () ;
Code	iterator2 iterator2 = this . p2 . iterator2 () ;
Distance : 6

84
Tree	iterator2 p1 = PathIterator ( p2 ) ;
Code	iterator2 p1 = PathIterator ( p2 ) ;
Distance : 6

85
Tree	iterator2 p2 = p2 . iterator2 ( ( iterator2 ) super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( iterator2 ) super(); ) ;
Distance : 7

86
Tree	iterator2 p2 = p1 . iterator2 ( ( p1 ) return; ) ;
Code	iterator2 p2 = p1 . iterator2 ( ( p1 ) return; ) ;
Distance : 8

87
Tree	iterator2 iterator2 = p2 . PathIterator ( PathIterator ) ;
Code	iterator2 iterator2 = p2 . PathIterator ( PathIterator ) ;
Distance : 3

88
Tree	iterator2 p1 = p1 . iterator2 () ;
Code	iterator2 p1 = p1 . iterator2 () ;
Distance : 7

89
Tree	iterator2 p2 = p2 . iterator2 ( return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( return; ) ;
Distance : 4

90
Tree	iterator2 p2 = p1 . PathIterator ( PathIterator ) ;
Code	iterator2 p2 = p1 . PathIterator ( PathIterator ) ;
Distance : 5

91
Tree	iterator2 p2 ; deepClone
Code	iterator2 p2 ; deepClone
Distance : 8

92
Tree	iterator2 p1 = PathIterator ( iterator2 ) ;
Code	iterator2 p1 = PathIterator ( iterator2 ) ;
Distance : 6

93
Tree	iterator2 p1 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p1 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

94
Tree	iterator2 p2 = PathIterator ( PathIterator ) ; put
Code	iterator2 p2 = PathIterator ( PathIterator ) ; put
Distance : 6

95
Tree	iterator2 p2 = p2 . iterator2 ( null , return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( null , return; ) ;
Distance : 5

96
Tree	iterator2 p2 = p2 . iterator2 ( ( p1 ) return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( p1 ) return; ) ;
Distance : 7

97
Tree	iterator2 iterator2 = p2 . iterator2 ( p2 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( p2 ) ;
Distance : 3

98
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 . class ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 . class ) ;
Distance : 7

99
Tree	iterator2 p2 = getRawDataItem . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = getRawDataItem . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

100
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 12

101
Tree	iterator2 p2 = getDomainAxisForDataset . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = getDomainAxisForDataset . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

102
Tree	iterator2 iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

103
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , c.seriesList ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , c.seriesList ) ;
Distance : 6

104
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; deepClone
Distance : 6

105
Tree	iterator2 p2 = p2 . iterator2 () ; put
Code	iterator2 p2 = p2 . iterator2 () ; put
Distance : 7

106
Tree	iterator2 iterator2 p2 = p2 . PathIterator ( super(); ) ;
Code	iterator2 iterator2 p2 = p2 . PathIterator ( super(); ) ;
Distance : 4

107
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Distance : 16

108
Tree	protected iterator2 p2 = p2 . PathIterator ( super(); ) ;
Code	protected iterator2 p2 = p2 . PathIterator ( super(); ) ;
Distance : 4

109
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

110
Tree	iterator2 p1 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p1 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 13

111
Tree	iterator2 p1 = p1 . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p1 = p1 . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

112
Tree	iterator2 p2 = PathIterator ( p1 ) ;
Code	iterator2 p2 = PathIterator ( p1 ) ;
Distance : 5

113
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DialLayerChangeEvent
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DialLayerChangeEvent
Distance : 16

114
Tree	iterator2 p2 = p1 . iterator2 ( ( PathIterator ) return; ) ;
Code	iterator2 p2 = p1 . iterator2 ( ( PathIterator ) return; ) ;
Distance : 8

115
Tree	iterator2 p2 = p2 . iterator2 ( p1 . class ) ;
Code	iterator2 p2 = p2 . iterator2 ( p1 . class ) ;
Distance : 6

116
Tree	iterator2 p2 = p2 . PathIterator ( iterator2 , that.defaultPaint ) ;
Code	iterator2 p2 = p2 . PathIterator ( iterator2 , that.defaultPaint ) ;
Distance : 6

117
Tree	protected iterator2 iterator2 = p2 . PathIterator ( iterator2 ) ;
Code	protected iterator2 iterator2 = p2 . PathIterator ( iterator2 ) ;
Distance : 4

118
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , getLowerMargin ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , getLowerMargin ) ;
Distance : 5

119
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Distance : 5

120
Tree	protected iterator2 iterator2 = p2 . PathIterator ( super(); ) ;
Code	protected iterator2 iterator2 = p2 . PathIterator ( super(); ) ;
Distance : 4

121
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; c2
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; c2
Distance : 16

122
Tree	iterator2 p2 = iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DatasetUtilities
Code	iterator2 p2 = iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DatasetUtilities
Distance : 16

123
Tree	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Distance : 7

124
Tree	iterator2 p2 = p1 . iterator2 ( p1 ) ;
Code	iterator2 p2 = p1 . iterator2 ( p1 ) ;
Distance : 5

125
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ObjectUtilities
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ObjectUtilities
Distance : 16

126
Tree	iterator2 p2 = p2 . iterator2 ( null , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( null , null ) ;
Distance : 5

127
Tree	iterator2 p1 = this . p2 . PathIterator () ;
Code	iterator2 p1 = this . p2 . PathIterator () ;
Distance : 7

128
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; printStackTrace
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; printStackTrace
Distance : 16

129
Tree	iterator2 p2 = p2 . p2 ( iterator2 ) ;
Code	iterator2 p2 = p2 . p2 ( iterator2 ) ;
Distance : 4

130
Tree	iterator2 iterator2 = p2 . iterator2 ( null , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( null , null ) ;
Distance : 4

131
Tree	iterator2 p1 = this . iterator2 . PathIterator () ;
Code	iterator2 p1 = this . iterator2 . PathIterator () ;
Distance : 7

132
Tree	iterator2 iterator2 = p2 . iterator2 ( this . PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( this . PathIterator ) ;
Distance : 5

133
Tree	iterator2 p2 = this . p1 . iterator2 () ;
Code	iterator2 p2 = this . p1 . iterator2 () ;
Distance : 7

134
Tree	iterator2 p2 = PathIterator ( p2 ) ;
Code	iterator2 p2 = PathIterator ( p2 ) ;
Distance : 5

135
Tree	iterator2 iterator2 = p2 . iterator2 ( super(); ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( super(); ) ;
Distance : 3

136
Tree	iterator2 p2 = p2 . iterator2 ( PathIterator , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( PathIterator , null ) ;
Distance : 5

137
Tree	iterator2 p2 = p2 . PathIterator ( return; , null ) ;
Code	iterator2 p2 = p2 . PathIterator ( return; , null ) ;
Distance : 5

138
Tree	PathIterator p2 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Code	PathIterator p2 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Distance : 5

139
Tree	iterator2 p2 = p2 . PathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; put
Code	iterator2 p2 = p2 . PathIterator ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; put
Distance : 12

140
Tree	iterator2 p2 = this . p2 . iterator2 () ;
Code	iterator2 p2 = this . p2 . iterator2 () ;
Distance : 7

141
Tree	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Distance : 2

142
Tree	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Distance : 4

143
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 ) ;
Distance : 5

144
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; put
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; put
Distance : 14

145
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; DialLayerChangeEvent
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; DialLayerChangeEvent
Distance : 6

146
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

147
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 . class ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 . class ) ;
Distance : 5

148
Tree	iterator2 p1 = PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( NUMBER_CONSTANT ) ;
Distance : 6

149
Tree	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

150
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; printStackTrace
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; printStackTrace
Distance : 12

151
Tree	iterator2 iterator2 = this . iterator2 . iterator2 () ;
Code	iterator2 iterator2 = this . iterator2 . iterator2 () ;
Distance : 6

152
Tree	iterator2 p2 = p2 . iterator2 ( p1 ) ;
Code	iterator2 p2 = p2 . iterator2 ( p1 ) ;
Distance : 4

153
Tree	iterator2 p2 = StrokeChooserPanel . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = StrokeChooserPanel . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

154
Tree	iterator2 p2 = this . iterator2 . PathIterator ( p2 ) ;
Code	iterator2 p2 = this . iterator2 . PathIterator ( p2 ) ;
Distance : 7

155
Tree	iterator2 p2 = this . p2 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = this . p2 . iterator2 ( iterator2 ) ;
Distance : 6

156
Tree	protected iterator2 p2 = p2 . iterator2 ( null ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( null ) ;
Distance : 3

157
Tree	static iterator2 p2 = p2 . PathIterator ( iterator2 ) ;
Code	static iterator2 p2 = p2 . PathIterator ( iterator2 ) ;
Distance : 4

158
Tree	iterator2 p2 = DomainOrder.ASCENDING . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = DomainOrder.ASCENDING . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

159
Tree	iterator2 p2 = p2 . iterator2 ( this . PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( this . PathIterator ) ;
Distance : 6

160
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Distance : 7

161
Tree	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) null ) ;
Code	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) null ) ;
Distance : 7

162
Tree	iterator2 p1 = p1 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p1 = p1 . iterator2 ( STRING_CONSTANT ) ;
Distance : 5

163
Tree	iterator2 iterator2 = PathIterator ( p2 ) ;
Code	iterator2 iterator2 = PathIterator ( p2 ) ;
Distance : 5

164
Tree	iterator2 p2 = DomainOrder.DESCENDING . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = DomainOrder.DESCENDING . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

165
Tree	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

166
Tree	iterator2 iterator2 = this . iterator2 . iterator2 ( p1 ) ;
Code	iterator2 iterator2 = this . iterator2 . iterator2 ( p1 ) ;
Distance : 6

167
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; c2
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; c2
Distance : 6

168
Tree	iterator2 p2 ; DialLayerChangeEvent
Code	iterator2 p2 ; DialLayerChangeEvent
Distance : 8

169
Tree	iterator2 p1 = p1 . iterator2 () ;
Code	iterator2 p1 = p1 . iterator2 () ;
Distance : 7

170
Tree	iterator2 p2 = PathIterator ( p2 . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = PathIterator ( p2 . PathIterator ( iterator2 ) ) ;
Distance : 7

171
Tree	iterator2 p2 = p2 . iterator2 ( DatasetChangeEvent ) ;
Code	iterator2 p2 = p2 . iterator2 ( DatasetChangeEvent ) ;
Distance : 4

172
Tree	iterator2 iterator2 = PathIterator ( p1 ) ;
Code	iterator2 iterator2 = PathIterator ( p1 ) ;
Distance : 5

173
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( super(); ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( super(); ) ) ;
Distance : 9

174
Tree	iterator2 p2 = p2 . iterator2 ( this . p1 ) ;
Code	iterator2 p2 = p2 . iterator2 ( this . p1 ) ;
Distance : 6

175
Tree	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

176
Tree	iterator2 p2 = iterator2 ( this . p2 ) ;
Code	iterator2 p2 = iterator2 ( this . p2 ) ;
Distance : 7

177
Tree	iterator2 p2 ; c2
Code	iterator2 p2 ; c2
Distance : 8

178
Tree	iterator2 p2 ; DatasetUtilities
Code	iterator2 p2 ; DatasetUtilities
Distance : 8

179
Tree	iterator2 iterator2 = PathIterator ( this . p2 ) ;
Code	iterator2 iterator2 = PathIterator ( this . p2 ) ;
Distance : 6

180
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( return; ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( return; ) ) ;
Distance : 9

181
Tree	iterator2 p2 = PathIterator ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 p2 = PathIterator ( ( PathIterator [] ) PathIterator ) ;
Distance : 9

182
Tree	iterator2 p2 = p2 . iterator2 ( ( p1 ) null ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( p1 ) null ) ;
Distance : 6

183
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . class ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . class ) ;
Distance : 6

184
Tree	iterator2 p2 ; ObjectUtilities
Code	iterator2 p2 ; ObjectUtilities
Distance : 8

185
Tree	PathIterator iterator2 = p2 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Code	PathIterator iterator2 = p2 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Distance : 7

186
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Distance : 8

187
Tree	iterator2 iterator2 = p2 . iterator2 ( p2 , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( p2 , null ) ;
Distance : 4

188
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

189
Tree	iterator2 p2 ; printStackTrace
Code	iterator2 p2 ; printStackTrace
Distance : 8

190
Tree	iterator2 iterator2 = p2 . iterator2 ( p1 . class ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( p1 . class ) ;
Distance : 5

191
Tree	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) return; ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) return; ) ;
Distance : 7

192
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ObjectUtilities
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ObjectUtilities
Distance : 18

193
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; printStackTrace
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; printStackTrace
Distance : 18

194
Tree	iterator2 p2 = PathIterator ( ( PathIterator [] ) super(); ) ;
Code	iterator2 p2 = PathIterator ( ( PathIterator [] ) super(); ) ;
Distance : 9

195
Tree	iterator2 p2 ; !=
Code	iterator2 p2 ; !=
Distance : 8

196
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 18

197
Tree	iterator2 p2 = p2 . iterator2 ( NUMBER_CONSTANT ) ; put
Code	iterator2 p2 = p2 . iterator2 ( NUMBER_CONSTANT ) ; put
Distance : 5

198
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Distance : 18

199
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 8

200
Tree	protected iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) PathIterator ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) PathIterator ) ;
Distance : 8

201
Tree	iterator2 p2 = this . iterator2 . PathIterator ( iterator2 ) ;
Code	iterator2 p2 = this . iterator2 . PathIterator ( iterator2 ) ;
Distance : 7

202
Tree	iterator2 p2 = p1 . iterator2 ( this . PathIterator ) ;
Code	iterator2 p2 = p1 . iterator2 ( this . PathIterator ) ;
Distance : 7

203
Tree	iterator2 iterator2 = iterator2 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 iterator2 = iterator2 . iterator2 ( STRING_CONSTANT ) ;
Distance : 4

204
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Distance : 10

205
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 13

206
Tree	iterator2 p2 = PathIterator ( this . p1 ) ;
Code	iterator2 p2 = PathIterator ( this . p1 ) ;
Distance : 7

207
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Distance : 3

208
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DialLayerChangeEvent
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DialLayerChangeEvent
Distance : 18

209
Tree	iterator2 p2 = PathIterator ( this . PathIterator ) ; put
Code	iterator2 p2 = PathIterator ( this . PathIterator ) ; put
Distance : 8

210
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 ) ;
Distance : 3

211
Tree	iterator2 p2 = PathIterator ( this . PathIterator ) ;
Code	iterator2 p2 = PathIterator ( this . PathIterator ) ;
Distance : 7

212
Tree	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

213
Tree	static iterator2 p2 = p2 . iterator2 ( super(); ) ;
Code	static iterator2 p2 = p2 . iterator2 ( super(); ) ;
Distance : 4

214
Tree	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p1 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 17

215
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Distance : 8

216
Tree	iterator2 p1 = this . p1 . iterator2 () ;
Code	iterator2 p1 = this . p1 . iterator2 () ;
Distance : 7

217
Tree	iterator2 p1 = p2 . iterator2 ( this . PathIterator ) ;
Code	iterator2 p1 = p2 . iterator2 ( this . PathIterator ) ;
Distance : 6

218
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; c2
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; c2
Distance : 18

219
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , float ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , float ) ;
Distance : 6

220
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , TextFragment.DEFAULT_FONT ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , TextFragment.DEFAULT_FONT ) ;
Distance : 6

221
Tree	PathIterator p2 = p2 . iterator2 ( iterator2 , Color.BLACK ) ;
Code	PathIterator p2 = p2 . iterator2 ( iterator2 , Color.BLACK ) ;
Distance : 5

222
Tree	iterator2 p2 = p2 . iterator2 ( p1 . PathIterator ( null ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( p1 . PathIterator ( null ) ) ;
Distance : 8

223
Tree	PathIterator p2 = p2 . iterator2 ( null ) ;
Code	PathIterator p2 = p2 . iterator2 ( null ) ;
Distance : 2

224
Tree	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Code	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Distance : 6

225
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

226
Tree	iterator2 p2 = p1 . PathIterator ( ( PathIterator [] ) super(); ) ;
Code	iterator2 p2 = p1 . PathIterator ( ( PathIterator [] ) super(); ) ;
Distance : 9

227
Tree	iterator2 p1 = p2 . iterator2 ( iterator2 . class ) ;
Code	iterator2 p1 = p2 . iterator2 ( iterator2 . class ) ;
Distance : 6

228
Tree	iterator2 p2 = this . p1 . iterator2 ( iterator2 ) ;
Code	iterator2 p2 = this . p1 . iterator2 ( iterator2 ) ;
Distance : 7

229
Tree	iterator2 iterator2 = PathIterator ( this . PathIterator ) ;
Code	iterator2 iterator2 = PathIterator ( this . PathIterator ) ;
Distance : 6

230
Tree	iterator2 p2 = p2 . iterator2 () ;
Code	iterator2 p2 = p2 . iterator2 () ;
Distance : 6

231
Tree	iterator2 iterator2 = PathIterator ( PathIterator ) ;
Code	iterator2 iterator2 = PathIterator ( PathIterator ) ;
Distance : 5

232
Tree	iterator2 p2 = p2 . iterator2 ( super(); , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( super(); , null ) ;
Distance : 5

233
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DatasetUtilities
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DatasetUtilities
Distance : 18

234
Tree	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( null ) ;
Distance : 2

235
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 7

236
Tree	iterator2 iterator2 = p1 . PathIterator ( iterator2 ) ;
Code	iterator2 iterator2 = p1 . PathIterator ( iterator2 ) ;
Distance : 4

237
Tree	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p1 = p2 . iterator2 ( STRING_CONSTANT ) ;
Distance : 4

238
Tree	iterator2 iterator2 = p1 . iterator2 () ;
Code	iterator2 iterator2 = p1 . iterator2 () ;
Distance : 6

239
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 , null ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 , null ) ;
Distance : 5

240
Tree	iterator2 p2 = p2 . iterator2 ( p2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( p2 ) ;
Distance : 4

241
Tree	protected iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

242
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , XYBubbleRenderer ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , XYBubbleRenderer ) ;
Distance : 6

243
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( iterator2 ) ) ;
Distance : 11

244
Tree	iterator2 p1 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	iterator2 p1 = p2 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 8

245
Tree	iterator2 iterator2 = PathIterator ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 iterator2 = PathIterator ( iterator2 . PathIterator ( null ) ) ;
Distance : 6

246
Tree	iterator2 p1 = p2 . iterator2 () ;
Code	iterator2 p1 = p2 . iterator2 () ;
Distance : 6

247
Tree	iterator2 iterator2 = p2 . p2 ( iterator2 ) ;
Code	iterator2 iterator2 = p2 . p2 ( iterator2 ) ;
Distance : 3

248
Tree	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Distance : 4

249
Tree	iterator2 p2 = PathIterator ( p1 . PathIterator ( null ) ) ;
Code	iterator2 p2 = PathIterator ( p1 . PathIterator ( null ) ) ;
Distance : 7

250
Tree	iterator2 p2 = p2 . iterator2 ( path ) ;
Code	iterator2 p2 = p2 . iterator2 ( path ) ;
Distance : 4

251
Tree	iterator2 iterator2 = PathIterator ( PathIterator . PathIterator ( PathIterator ) ) ;
Code	iterator2 iterator2 = PathIterator ( PathIterator . PathIterator ( PathIterator ) ) ;
Distance : 7

252
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( PathIterator ) ) ;
Distance : 9

253
Tree	iterator2 p2 = p1 . iterator2 ( null ) ;
Code	iterator2 p2 = p1 . iterator2 ( null ) ;
Distance : 4

254
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Distance : 7

255
Tree	iterator2 p2 = PathIterator ( p2 . PathIterator ( null ) ) ;
Code	iterator2 p2 = PathIterator ( p2 . PathIterator ( null ) ) ;
Distance : 6

256
Tree	iterator2 iterator2 = PathIterator ( PathIterator . PathIterator ( super(); ) ) ;
Code	iterator2 iterator2 = PathIterator ( PathIterator . PathIterator ( super(); ) ) ;
Distance : 7

257
Tree	iterator2 p2 = LayeredBarRenderer . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = LayeredBarRenderer . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

258
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , Locale.UK ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , Locale.UK ) ;
Distance : 5

259
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . iterator2 ( null ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . iterator2 ( null ) ) ;
Distance : 10

260
Tree	iterator2 p2 = p2 . iterator2 ( PeriodAxisLabelInfo ) ;
Code	iterator2 p2 = p2 . iterator2 ( PeriodAxisLabelInfo ) ;
Distance : 4

261
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

262
Tree	iterator2 p2 = p1 . iterator2 ( ( long ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p1 . iterator2 ( ( long ) NUMBER_CONSTANT ) ;
Distance : 8

263
Tree	iterator2 p2 = PathIterator ( ( PathIterator [] ) return; ) ;
Code	iterator2 p2 = PathIterator ( ( PathIterator [] ) return; ) ;
Distance : 9

264
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 , this . PathIterator ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 , this . PathIterator ) ;
Distance : 9

265
Tree	iterator2 p2 = p2 . iterator2 ( p1 , null ) ;
Code	iterator2 p2 = p2 . iterator2 ( p1 , null ) ;
Distance : 5

266
Tree	iterator2 iterator2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( iterator2 ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 13

267
Tree	iterator2 p1 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 p1 = p1 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 5

268
Tree	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( PathIterator [] ) null ) ;
Distance : 6

269
Tree	iterator2 p2 = p1 . p2 ( iterator2 ) ;
Code	iterator2 p2 = p1 . p2 ( iterator2 ) ;
Distance : 5

270
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; DatasetUtilities
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; DatasetUtilities
Distance : 6

271
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; ObjectUtilities
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; ObjectUtilities
Distance : 6

272
Tree	iterator2 p2 = p1 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Distance : 9

273
Tree	PathIterator iterator2 = p1 . iterator2 ( iterator2 ) ;
Code	PathIterator iterator2 = p1 . iterator2 ( iterator2 ) ;
Distance : 3

274
Tree	iterator2 iterator2 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 3

275
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; printStackTrace
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ; printStackTrace
Distance : 6

276
Tree	iterator2 p2 = PathIterator ( p1 . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = PathIterator ( p1 . PathIterator ( iterator2 ) ) ;
Distance : 8

277
Tree	iterator2 iterator2 = . . iterator2 ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = . . iterator2 ( NUMBER_CONSTANT ) ;
Distance : 4

278
Tree	PathIterator p2 = PathIterator ( NUMBER_CONSTANT ) ; !=
Code	PathIterator p2 = PathIterator ( NUMBER_CONSTANT ) ; !=
Distance : 6

279
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( super(); ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , p2 . PathIterator ( super(); ) ) ;
Distance : 11

280
Tree	iterator2 iterator2 = p2 . iterator2 ( p2 . class ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( p2 . class ) ;
Distance : 5

281
Tree	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( super(); ) ;
Distance : 4

282
Tree	iterator2 p2 = p1 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 p2 = p1 . iterator2 ( ( PathIterator [] ) PathIterator ) ;
Distance : 9

283
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; deepClone
Distance : 12

284
Tree	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) return; ) ;
Code	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) return; ) ;
Distance : 8

285
Tree	iterator2 p2 = Color.BLUE . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = Color.BLUE . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

286
Tree	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT , true ) ;
Code	iterator2 p2 = p2 . iterator2 ( STRING_CONSTANT , true ) ;
Distance : 6

287
Tree	iterator2 p2 = p2 . PathIterator ( DateTickUnitType.DAY ) ;
Code	iterator2 p2 = p2 . PathIterator ( DateTickUnitType.DAY ) ;
Distance : 4

288
Tree	iterator2 iterator2 = this . iterator2 . PathIterator ( p2 ) ;
Code	iterator2 iterator2 = this . iterator2 . PathIterator ( p2 ) ;
Distance : 6

289
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DialLayerChangeEvent
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DialLayerChangeEvent
Distance : 12

290
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; c2
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; c2
Distance : 12

291
Tree	iterator2 p2 = p2 . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 4

292
Tree	iterator2 p2 = p1 . iterator2 ( p1 . class ) ;
Code	iterator2 p2 = p1 . iterator2 ( p1 . class ) ;
Distance : 7

293
Tree	iterator2 iterator2 = p2 . iterator2 ( p1 , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( p1 , null ) ;
Distance : 4

294
Tree	PathIterator iterator2 = this . p2 . iterator2 ( iterator2 ) ;
Code	PathIterator iterator2 = this . p2 . iterator2 ( iterator2 ) ;
Distance : 4

295
Tree	PathIterator p2 = PathIterator ( Color.BLACK ) ;
Code	PathIterator p2 = PathIterator ( Color.BLACK ) ;
Distance : 5

296
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT ) ;
Distance : 5

297
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , getLowerMargin ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , getLowerMargin ) ;
Distance : 6

298
Tree	PathIterator p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DatasetUtilities
Code	PathIterator p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; DatasetUtilities
Distance : 11

299
Tree	iterator2 iterator2 = p2 . iterator2 ( super(); , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( super(); , null ) ;
Distance : 4

300
Tree	iterator2 p2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 7

301
Tree	iterator2 p2 = p2 . iterator2 ( baseName ) ;
Code	iterator2 p2 = p2 . iterator2 ( baseName ) ;
Distance : 4

302
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ObjectUtilities
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; ObjectUtilities
Distance : 12

303
Tree	iterator2 p2 = p2 . iterator2 ( baseResourceClass ) ;
Code	iterator2 p2 = p2 . iterator2 ( baseResourceClass ) ;
Distance : 4

304
Tree	iterator2 iterator2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( ( float ) NUMBER_CONSTANT ) ;
Distance : 6

305
Tree	protected iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Code	protected iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Distance : 8

306
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 16

307
Tree	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

308
Tree	iterator2 p1 = PathIterator ( this . PathIterator ) ;
Code	iterator2 p1 = PathIterator ( this . PathIterator ) ;
Distance : 7

309
Tree	iterator2 p1 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p1 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

310
Tree	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) PathIterator ) ;
Code	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) PathIterator ) ;
Distance : 8

311
Tree	static iterator2 p2 = p2 . iterator2 ( null ) ;
Code	static iterator2 p2 = p2 . iterator2 ( null ) ;
Distance : 3

312
Tree	PathIterator iterator2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Code	PathIterator iterator2 = p2 . iterator2 ( ( PathIterator ) return; ) ;
Distance : 5

313
Tree	iterator2 p2 = p2 . iterator2 ( p1 ) ;
Code	iterator2 p2 = p2 . iterator2 ( p1 ) ;
Distance : 4

314
Tree	iterator2 p2 = p1 . iterator2 ( null , null ) ;
Code	iterator2 p2 = p1 . iterator2 ( null , null ) ;
Distance : 6

315
Tree	iterator2 iterator2 = PathIterator ( DateTickUnitType.DAY ) ;
Code	iterator2 iterator2 = PathIterator ( DateTickUnitType.DAY ) ;
Distance : 5

316
Tree	iterator2 p2 = PathIterator ( Color.red ) ;
Code	iterator2 p2 = PathIterator ( Color.red ) ;
Distance : 5

317
Tree	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) null ) ;
Code	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) null ) ;
Distance : 7

318
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

319
Tree	iterator2 p1 = p2 . iterator2 ( iterator2 , null ) ;
Code	iterator2 p1 = p2 . iterator2 ( iterator2 , null ) ;
Distance : 5

320
Tree	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

321
Tree	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) return; ) ;
Code	protected iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) return; ) ;
Distance : 8

322
Tree	PathIterator p2 = p2 . iterator2 ( p2 ) ;
Code	PathIterator p2 = p2 . iterator2 ( p2 ) ;
Distance : 3

323
Tree	iterator2 iterator2 = PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

324
Tree	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 16

325
Tree	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , false ) ;
Code	iterator2 p2 = p1 . iterator2 ( STRING_CONSTANT , false ) ;
Distance : 7

326
Tree	iterator2 p2 = p2 . PathIterator ( info1 ) ;
Code	iterator2 p2 = p2 . PathIterator ( info1 ) ;
Distance : 4

327
Tree	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT , false ) ;
Distance : 5

328
Tree	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( STRING_CONSTANT ) ;
Distance : 3

329
Tree	iterator2 p1 = this . iterator2 . PathIterator ( iterator2 ) ;
Code	iterator2 p1 = this . iterator2 . PathIterator ( iterator2 ) ;
Distance : 7

330
Tree	iterator2 iterator2 = p2 . iterator2 () ;
Code	iterator2 iterator2 = p2 . iterator2 () ;
Distance : 5

331
Tree	iterator2 iterator2 = p1 . iterator2 ( this . PathIterator ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( this . PathIterator ) ;
Distance : 6

332
Tree	iterator2 p2 = p2 . iterator2 ( CompositeTitle ) ;
Code	iterator2 p2 = p2 . iterator2 ( CompositeTitle ) ;
Distance : 4

333
Tree	iterator2 iterator2 = p2 . iterator2 ( iterator2 , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( iterator2 , null ) ;
Distance : 4

334
Tree	iterator2 p2 = PathIterator ( Color.RED ) ;
Code	iterator2 p2 = PathIterator ( Color.RED ) ;
Distance : 5

335
Tree	iterator2 p2 = p1 . iterator2 ( this . p2 ) ;
Code	iterator2 p2 = p1 . iterator2 ( this . p2 ) ;
Distance : 7

336
Tree	iterator2 p2 = PathIterator ( ( PathIterator [] ) null ) ;
Code	iterator2 p2 = PathIterator ( ( PathIterator [] ) null ) ;
Distance : 8

337
Tree	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) super(); ) ;
Code	iterator2 iterator2 = PathIterator ( ( PathIterator [] ) super(); ) ;
Distance : 8

338
Tree	iterator2 p2 = p2 . PathIterator ( GridArrangement ) ;
Code	iterator2 p2 = p2 . PathIterator ( GridArrangement ) ;
Distance : 4

339
Tree	iterator2 p2 = PathIterator ( state.workingLine ) ;
Code	iterator2 p2 = PathIterator ( state.workingLine ) ;
Distance : 5

340
Tree	iterator2 p2 = PathIterator ( PathIterator ) ;
Code	iterator2 p2 = PathIterator ( PathIterator ) ;
Distance : 5

341
Tree	iterator2 iterator2 = p2 . iterator2 ( super(); ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( super(); ) ;
Distance : 3

342
Tree	iterator2 iterator2 = p2 . iterator2 ( PathIterator , null ) ;
Code	iterator2 iterator2 = p2 . iterator2 ( PathIterator , null ) ;
Distance : 4

343
Tree	iterator2 p2 = p2 . iterator2 ( p2 . class ) ;
Code	iterator2 p2 = p2 . iterator2 ( p2 . class ) ;
Distance : 6

344
Tree	iterator2 p2 = PathIterator ( getKey ) ;
Code	iterator2 p2 = PathIterator ( getKey ) ;
Distance : 5

345
Tree	iterator2 p2 = p2 . iterator2 ( getItemShape ) ;
Code	iterator2 p2 = p2 . iterator2 ( getItemShape ) ;
Distance : 4

346
Tree	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 iterator2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

347
Tree	iterator2 p2 = PathIterator ( DatasetChangeEvent ) ;
Code	iterator2 p2 = PathIterator ( DatasetChangeEvent ) ;
Distance : 5

348
Tree	iterator2 p1 = PathIterator ( this . p1 ) ;
Code	iterator2 p1 = PathIterator ( this . p1 ) ;
Distance : 7

349
Tree	iterator2 p2 = XYBubbleRenderer . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = XYBubbleRenderer . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

350
Tree	iterator2 p2 = DomainOrder.DESCENDING . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = DomainOrder.DESCENDING . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

351
Tree	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( PathIterator [] ) super(); ) ;
Distance : 8

352
Tree	iterator2 p2 = LayeredBarRenderer . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = LayeredBarRenderer . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

353
Tree	iterator2 p2 = Color.BLUE . PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = Color.BLUE . PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

354
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

355
Tree	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , PathIterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

356
Tree	static iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) PathIterator ) ;
Code	static iterator2 p2 = p2 . PathIterator ( ( PathIterator [] ) PathIterator ) ;
Distance : 8

357
Tree	iterator2 p2 = PathIterator ( DateTickUnitType.DAY ) ;
Code	iterator2 p2 = PathIterator ( DateTickUnitType.DAY ) ;
Distance : 5

358
Tree	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( NUMBER_CONSTANT ) ;
Distance : 5

359
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

360
Tree	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , false ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( STRING_CONSTANT , false ) ;
Distance : 6

361
Tree	iterator2 p2 = Color.GRAY . PathIterator ( STRING_CONSTANT ) ;
Code	iterator2 p2 = Color.GRAY . PathIterator ( STRING_CONSTANT ) ;
Distance : 5

362
Tree	iterator2 p2 = p1 . iterator2 () ;
Code	iterator2 p2 = p1 . iterator2 () ;
Distance : 7

363
Tree	iterator2 iterator2 = p1 . iterator2 ( null ) ;
Code	iterator2 iterator2 = p1 . iterator2 ( null ) ;
Distance : 3

364
Tree	iterator2 iterator2 = p1 . PathIterator ( iterator2 . class ) ;
Code	iterator2 iterator2 = p1 . PathIterator ( iterator2 . class ) ;
Distance : 6

365
Tree	iterator2 p1 = p2 . iterator2 ( iterator2 ) ;
Code	iterator2 p1 = p2 . iterator2 ( iterator2 ) ;
Distance : 4

366
Tree	iterator2 iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) PathIterator ) ;
Code	iterator2 iterator2 p2 = p2 . iterator2 ( ( iterator2 [] ) PathIterator ) ;
Distance : 8

367
Tree	iterator2 p2 = p2 . iterator2 ( p2 , this . PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( p2 , this . PathIterator ) ;
Distance : 8

368
Tree	protected iterator2 iterator2 = p2 . PathIterator ( ( PathIterator [] ) PathIterator ) ;
Code	protected iterator2 iterator2 = p2 . PathIterator ( ( PathIterator [] ) PathIterator ) ;
Distance : 8

369
Tree	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	iterator2 p2 = PathIterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 17

370
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 , this . p2 ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 , this . p2 ) ;
Distance : 8

371
Tree	iterator2 p1 = PathIterator ( ( PathIterator [] ) return; ) ;
Code	iterator2 p1 = PathIterator ( ( PathIterator [] ) return; ) ;
Distance : 9

372
Tree	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( iterator2 ) ) ;
Code	iterator2 p2 = PathIterator ( PathIterator . PathIterator ( iterator2 ) ) ;
Distance : 8

373
Tree	iterator2 p1 = PathIterator ( ( PathIterator [] ) null ) ;
Code	iterator2 p1 = PathIterator ( ( PathIterator [] ) null ) ;
Distance : 8

374
Tree	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Code	iterator2 p2 = p2 . iterator2 ( iterator2 . PathIterator ( null ) ) ;
Distance : 8

375
Tree	iterator2 p2 = PathIterator ( iterator2 . PathIterator ( super(); ) ) ;
Code	iterator2 p2 = PathIterator ( iterator2 . PathIterator ( super(); ) ) ;
Distance : 8

376
Tree	PathIterator iterator2 = p2 . iterator2 ( p1 , this . iterator2 ) ;
Code	PathIterator iterator2 = p2 . iterator2 ( p1 , this . iterator2 ) ;
Distance : 6

377
Tree	iterator2 p2 = p2 . iterator2 ( PathIterator ) ;
Code	iterator2 p2 = p2 . iterator2 ( PathIterator ) ;
Distance : 4

378
Tree	iterator2 p2 = p2 . iterator2 ( ( int ) NUMBER_CONSTANT ) ;
Code	iterator2 p2 = p2 . iterator2 ( ( int ) NUMBER_CONSTANT ) ;
Distance : 7

379
Tree	iterator2 iterator2 = p2 . PathIterator ( ( long ) NUMBER_CONSTANT ) ;
Code	iterator2 iterator2 = p2 . PathIterator ( ( long ) NUMBER_CONSTANT ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 440
Correct
========================================================================
True

0
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

1
Tree	{ return createStandardDateTickUnits ; }
Code	{ return createStandardDateTickUnits ; }
Distance : 10

2
Tree	{ return [] ; }
Code	{ return [] ; }
Distance : 10

3
Tree	{ return SeriesException ; }
Code	{ return SeriesException ; }
Distance : 10

4
Tree	{ return getDataset ; }
Code	{ return getDataset ; }
Distance : 10

5
Tree	{ return super ; }
Code	{ return super ; }
Distance : 10

6
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

7
Tree	{ return getRawDataItem ; }
Code	{ return getRawDataItem ; }
Distance : 10

8
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

9
Tree	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 8

10
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

11
Tree	{ return ! ImageMapUtilities ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

12
Tree	{ return ( double ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

13
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , false , false ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , false , false ) ; }
Distance : 11

14
Tree	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 6

15
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , false , true ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , false , true ) ; }
Distance : 11

16
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

17
Tree	{ return ( double ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

18
Tree	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

19
Tree	{ return createStandardDateTickUnits [ toolTipText ] . htmlEscape () ; }
Code	{ return createStandardDateTickUnits [ toolTipText ] . htmlEscape () ; }
Distance : 9

20
Tree	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

21
Tree	{ throw new IllegalArgumentException ( toolTipText ) ; }
Code	{ throw new IllegalArgumentException ( toolTipText ) ; }
Distance : 8

22
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

23
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

24
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

25
Tree	{ return toolTipText . htmlEscape ( BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return toolTipText . htmlEscape ( BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
Distance : 7

26
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Integer ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Integer ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 7

27
Tree	{ throw new DialLayerChangeEvent ( toolTipText ) ; }
Code	{ throw new DialLayerChangeEvent ( toolTipText ) ; }
Distance : 8

28
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

29
Tree	{ return this ; } public
Code	{ return this ; } public
Distance : 11

30
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 9

31
Tree	{ return STRING_CONSTANT ; } double
Code	{ return STRING_CONSTANT ; } double
Distance : 10

32
Tree	{ return STRING_CONSTANT ; } anchor
Code	{ return STRING_CONSTANT ; } anchor
Distance : 10

33
Tree	{ return htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 7

34
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new ChartChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new ChartChangeEvent () ) + STRING_CONSTANT ; }
Distance : 3

35
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 5

36
Tree	{ return ! toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

37
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 6

38
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 9

39
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 9

40
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 8

41
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

42
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 9

43
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

44
Tree	{ return htmlEscape ( toolTipText , return; , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , return; , toolTipText ) ; }
Distance : 8

45
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

46
Tree	{ throw new [] ( toolTipText ) ; }
Code	{ throw new [] ( toolTipText ) ; }
Distance : 8

47
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new ChartChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new ChartChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

48
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HighLowItemLabelGenerator () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HighLowItemLabelGenerator () ) + STRING_CONSTANT ; }
Distance : 3

49
Tree	{ return htmlEscape ( toolTipText , return; , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , return; , ImageMapUtilities ) ; }
Distance : 9

50
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

51
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND ) ; }
Distance : 5

52
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Distance : 9

53
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 10

54
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

55
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

56
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Distance : 8

57
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Distance : 4

58
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Distance : 4

59
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , return; , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , return; , ImageMapUtilities ) ; }
Distance : 7

60
Tree	{ return null ; } c2
Code	{ return null ; } c2
Distance : 11

61
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 6

62
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

63
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } !=
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } !=
Distance : 5

64
Tree	{ return this ; } Color.RED
Code	{ return this ; } Color.RED
Distance : 11

65
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( getBase , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( getBase , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

66
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , true , false ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , true , false ) ; }
Distance : 12

67
Tree	{ return toolTipText . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) ; }
Distance : 7

68
Tree	{ return toolTipText . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , toolTipText ) ; }
Distance : 7

69
Tree	{ return NUMBER_CONSTANT * Year.MAXIMUM_YEAR ; }
Code	{ return NUMBER_CONSTANT * Year.MAXIMUM_YEAR ; }
Distance : 10

70
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 9

71
Tree	{ return throw ; }
Code	{ return throw ; }
Distance : 10

72
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } final
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } final
Distance : 5

73
Tree	{ return null ; } Color.red
Code	{ return null ; } Color.red
Distance : 11

74
Tree	{ return null ; } DatasetUtilities
Code	{ return null ; } DatasetUtilities
Distance : 11

75
Tree	{ return null ; } !=
Code	{ return null ; } !=
Distance : 11

76
Tree	{ return null ; } final
Code	{ return null ; } final
Distance : 11

77
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } c2
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } c2
Distance : 8

78
Tree	{ return createXYAreaChart [ toolTipText ] . htmlEscape () ; }
Code	{ return createXYAreaChart [ toolTipText ] . htmlEscape () ; }
Distance : 9

79
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , true ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , true ) ; }
Distance : 5

80
Tree	{ return toolTipText . htmlEscape ( state.workingLine , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( state.workingLine , toolTipText ) ; }
Distance : 7

81
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } final
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } final
Distance : 8

82
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } final
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } final
Distance : 7

83
Tree	{ return [] [ toolTipText ] . htmlEscape () ; }
Code	{ return [] [ toolTipText ] . htmlEscape () ; }
Distance : 9

84
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) ; }
Distance : 6

85
Tree	{ throw new && ( toolTipText ) ; }
Code	{ throw new && ( toolTipText ) ; }
Distance : 8

86
Tree	{ return ( double ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

87
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

88
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke () ) + STRING_CONSTANT ; }
Distance : 5

89
Tree	{ return NUMBER_CONSTANT * } ; }
Code	{ return NUMBER_CONSTANT * } ; }
Distance : 10

90
Tree	{ return ! htmlEscape ( toolTipText ) ; } a1
Code	{ return ! htmlEscape ( toolTipText ) ; } a1
Distance : 7

91
Tree	{ return ImageMapUtilities ; } printStackTrace
Code	{ return ImageMapUtilities ; } printStackTrace
Distance : 10

92
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } c2
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } c2
Distance : 7

93
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } hashCode
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } hashCode
Distance : 7

94
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } Color.red
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } Color.red
Distance : 7

95
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } DatasetUtilities
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } DatasetUtilities
Distance : 7

96
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } !=
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; } !=
Distance : 7

97
Tree	{ return ImageMapUtilities ; } ObjectUtils
Code	{ return ImageMapUtilities ; } ObjectUtils
Distance : 10

98
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , true , true ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , true , true ) ; }
Distance : 12

99
Tree	{ return toolTipText . htmlEscape ( toolTipText , false ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , false ) ; }
Distance : 6

100
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new javascriptEscape ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new javascriptEscape ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

101
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 1

102
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } hashCode
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } hashCode
Distance : 5

103
Tree	{ return ! htmlEscape ( toolTipText ) ; } printStackTrace
Code	{ return ! htmlEscape ( toolTipText ) ; } printStackTrace
Distance : 7

104
Tree	{ return getRawDataItem . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getRawDataItem . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

105
Tree	{ return createStandardDateTickUnits . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return createStandardDateTickUnits . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

106
Tree	{ return htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 9

107
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 4

108
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

109
Tree	{ return NUMBER_CONSTANT * [] ; }
Code	{ return NUMBER_CONSTANT * [] ; }
Distance : 10

110
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , faces ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , faces ) ; }
Distance : 5

111
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , [ ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , [ ) ; }
Distance : 5

112
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 8

113
Tree	{ return NUMBER_CONSTANT * RenderingHints.KEY_TEXT_ANTIALIASING ; }
Code	{ return NUMBER_CONSTANT * RenderingHints.KEY_TEXT_ANTIALIASING ; }
Distance : 10

114
Tree	{ return getRawDataItem [ ImageMapUtilities ] . htmlEscape () ; }
Code	{ return getRawDataItem [ ImageMapUtilities ] . htmlEscape () ; }
Distance : 8

115
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new StandardURLTagFragmentGenerator () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new StandardURLTagFragmentGenerator () ) + STRING_CONSTANT ; }
Distance : 4

116
Tree	{ return ( double ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( double ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

117
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Distance : 5

118
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , true , false ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , true , false ) ; }
Distance : 11

119
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , true , true ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText , null , true , true ) ; }
Distance : 11

120
Tree	{ return toolTipText . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

121
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( dataArea , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( dataArea , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

122
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( that.arrowStroke , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( that.arrowStroke , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

123
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

124
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

125
Tree	{ return getDataset . htmlEscape ( toolTipText ) ; }
Code	{ return getDataset . htmlEscape ( toolTipText ) ; }
Distance : 5

126
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 1

127
Tree	{ return NUMBER_CONSTANT * ; ; }
Code	{ return NUMBER_CONSTANT * ; ; }
Distance : 10

128
Tree	{ return ( long ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

129
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

130
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 4

131
Tree	{ return STRING_CONSTANT ; } ObjectUtils
Code	{ return STRING_CONSTANT ; } ObjectUtils
Distance : 10

132
Tree	{ return ! toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

133
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Distance : 5

134
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 9

135
Tree	{ return STRING_CONSTANT ; } p2
Code	{ return STRING_CONSTANT ; } p2
Distance : 10

136
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent () ) + STRING_CONSTANT ; }
Distance : 3

137
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 3

138
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

139
Tree	{ throw new Integer ( toolTipText ) ; }
Code	{ throw new Integer ( toolTipText ) ; }
Distance : 8

140
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

141
Tree	{ return ( int ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

142
Tree	{ return toolTipText . htmlEscape ( BasicStroke.CAP_ROUND ) ; }
Code	{ return toolTipText . htmlEscape ( BasicStroke.CAP_ROUND ) ; }
Distance : 6

143
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 8

144
Tree	{ return NUMBER_CONSTANT * BasicStroke.JOIN_BEVEL ; }
Code	{ return NUMBER_CONSTANT * BasicStroke.JOIN_BEVEL ; }
Distance : 10

145
Tree	{ return NUMBER_CONSTANT * throw ; }
Code	{ return NUMBER_CONSTANT * throw ; }
Distance : 10

146
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Distance : 9

147
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

148
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new getBounds2D ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new getBounds2D ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

149
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

150
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer () ) + STRING_CONSTANT ; }
Distance : 4

151
Tree	{ return ! toolTipText ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ! toolTipText ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 9

152
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } put
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } put
Distance : 6

153
Tree	{ return toolTipText . htmlEscape ( BasicStroke.JOIN_BEVEL ) ; }
Code	{ return toolTipText . htmlEscape ( BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

154
Tree	{ return ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( state.workingLine , toolTipText ) ; }
Distance : 6

155
Tree	{ return false ; } ObjectUtilities
Code	{ return false ; } ObjectUtilities
Distance : 11

156
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 9

157
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

158
Tree	{ return ! htmlEscape ( toolTipText ) ; } double
Code	{ return ! htmlEscape ( toolTipText ) ; } double
Distance : 7

159
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

160
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

161
Tree	{ return [] . htmlEscape ( toolTipText ) ; }
Code	{ return [] . htmlEscape ( toolTipText ) ; }
Distance : 5

162
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , true ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , true ) ; }
Distance : 6

163
Tree	{ return toolTipText . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

164
Tree	{ return false ; } ObjectUtils
Code	{ return false ; } ObjectUtils
Distance : 11

165
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 4

166
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } ObjectUtilities
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } ObjectUtilities
Distance : 6

167
Tree	{ return SeriesException . htmlEscape ( toolTipText ) ; }
Code	{ return SeriesException . htmlEscape ( toolTipText ) ; }
Distance : 5

168
Tree	{ return false ; } DialLayerChangeEvent
Code	{ return false ; } DialLayerChangeEvent
Distance : 11

169
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } readPaint
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } readPaint
Distance : 6

170
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape () ) ; }
Distance : 8

171
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , false ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , false ) ; }
Distance : 7

172
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

173
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , that.entities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , that.entities ) ; }
Distance : 5

174
Tree	{ return toolTipText . htmlEscape ( toolTipText , PlotOrientation.VERTICAL ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , PlotOrientation.VERTICAL ) ; }
Distance : 6

175
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 7

176
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } hashCode
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } hashCode
Distance : 8

177
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 9

178
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Double () ) + STRING_CONSTANT ; }
Distance : 4

179
Tree	{ return htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , null , ImageMapUtilities ) ; }
Distance : 8

180
Tree	{ return toolTipText . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING ) ; }
Code	{ return toolTipText . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING ) ; }
Distance : 6

181
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

182
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , true ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , true ) ; }
Distance : 7

183
Tree	{ return htmlEscape ( toolTipText , super(); , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , super(); , ImageMapUtilities ) ; }
Distance : 9

184
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; }
Distance : 6

185
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new RuntimeException ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new RuntimeException ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

186
Tree	{ return getDataset . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getDataset . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

187
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } !=
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } !=
Distance : 4

188
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

189
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities , null , true , false ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities , null , true , false ) ; }
Distance : 11

190
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

191
Tree	{ return [] . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return [] . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

192
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

193
Tree	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , toolTipText ) ; }
Distance : 6

194
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , false ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , false ) ; }
Distance : 6

195
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

196
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; }
Distance : 5

197
Tree	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

198
Tree	{ return ( int ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

199
Tree	{ throw new SeriesException ( toolTipText ) ; }
Code	{ throw new SeriesException ( toolTipText ) ; }
Distance : 8

200
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 7

201
Tree	{ return super [ ImageMapUtilities ] . htmlEscape () ; }
Code	{ return super [ ImageMapUtilities ] . htmlEscape () ; }
Distance : 8

202
Tree	{ return getDataset [ toolTipText ] . htmlEscape () ; }
Code	{ return getDataset [ toolTipText ] . htmlEscape () ; }
Distance : 9

203
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) ; }
Distance : 6

204
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

205
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

206
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

207
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities , null , true , true ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities , null , true , true ) ; }
Distance : 11

208
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

209
Tree	{ return ( long ) toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

210
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } c2
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } c2
Distance : 5

211
Tree	{ return ! ImageMapUtilities ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 8

212
Tree	{ return toolTipText . htmlEscape ( toolTipText , return; , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , return; , ImageMapUtilities ) ; }
Distance : 8

213
Tree	{ return ImageMapUtilities ; } deepClone
Code	{ return ImageMapUtilities ; } deepClone
Distance : 10

214
Tree	{ return false ; } a1
Code	{ return false ; } a1
Distance : 11

215
Tree	{ return htmlEscape ( toolTipText , super(); , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , super(); , toolTipText ) ; }
Distance : 8

216
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , [ ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.CAP_ROUND , [ ) ; }
Distance : 6

217
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 8

218
Tree	{ return ! htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! htmlEscape ( ImageMapUtilities ) ; }
Distance : 7

219
Tree	{ return super . htmlEscape ( toolTipText ) ; }
Code	{ return super . htmlEscape ( toolTipText ) ; }
Distance : 5

220
Tree	{ return false ; } deepClone
Code	{ return false ; } deepClone
Distance : 11

221
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } DatasetUtilities
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } DatasetUtilities
Distance : 4

222
Tree	{ return ! ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

223
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } Color.red
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } Color.red
Distance : 8

224
Tree	{ return toolTipText . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return toolTipText . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING , BasicStroke.JOIN_BEVEL ) ; }
Distance : 7

225
Tree	{ return createStandardDateTickUnits . htmlEscape ( toolTipText ) ; }
Code	{ return createStandardDateTickUnits . htmlEscape ( toolTipText ) ; }
Distance : 5

226
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } ObjectUtils
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } ObjectUtils
Distance : 6

227
Tree	{ return false ; } readPaint
Code	{ return false ; } readPaint
Distance : 11

228
Tree	{ return htmlEscape ( toolTipText , + , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , + , ImageMapUtilities ) ; }
Distance : 8

229
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

230
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

231
Tree	{ return htmlEscape ( ImageMapUtilities , return; , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , return; , ImageMapUtilities ) ; }
Distance : 8

232
Tree	{ return STRING_CONSTANT ; } Color.RED
Code	{ return STRING_CONSTANT ; } Color.RED
Distance : 10

233
Tree	{ return STRING_CONSTANT ; } public
Code	{ return STRING_CONSTANT ; } public
Distance : 10

234
Tree	{ return SeriesException . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return SeriesException . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

235
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } DialLayerChangeEvent
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } DialLayerChangeEvent
Distance : 6

236
Tree	{ return ( double ) ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 8

237
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } renderer
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } renderer
Distance : 6

238
Tree	{ return ( double ) ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( double ) ImageMapUtilities ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

239
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( Color.RED , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( Color.RED , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

240
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } a1
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } a1
Distance : 6

241
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

242
Tree	{ return getRawDataItem . htmlEscape ( toolTipText ) ; }
Code	{ return getRawDataItem . htmlEscape ( toolTipText ) ; }
Distance : 5

243
Tree	{ return STRING_CONSTANT ; } SerialUtilities
Code	{ return STRING_CONSTANT ; } SerialUtilities
Distance : 10

244
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

245
Tree	{ return super . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return super . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

246
Tree	{ return STRING_CONSTANT ; } GradientPaint
Code	{ return STRING_CONSTANT ; } GradientPaint
Distance : 10

247
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } Color.red
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } Color.red
Distance : 4

248
Tree	{ return STRING_CONSTANT ; } a1
Code	{ return STRING_CONSTANT ; } a1
Distance : 10

249
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

250
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } deepClone
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } deepClone
Distance : 6

251
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

252
Tree	{ return ImageMapUtilities ; }
Code	{ return ImageMapUtilities ; }
Distance : 9

253
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } DatasetUtilities
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } DatasetUtilities
Distance : 8

254
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , ImageMapUtilities . htmlEscape () ) ; }
Distance : 9

255
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } DatasetUtilities
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } DatasetUtilities
Distance : 5

256
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; } renderer
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; } renderer
Distance : 9

257
Tree	{ return ! toolTipText ( toolTipText , toolTipText ) ; }
Code	{ return ! toolTipText ( toolTipText , toolTipText ) ; }
Distance : 8

258
Tree	{ return ( float ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( float ) toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

259
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 9

260
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } put
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } put
Distance : 6

261
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } hashCode
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } hashCode
Distance : 4

262
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new StandardURLTagFragmentGenerator ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new StandardURLTagFragmentGenerator ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

263
Tree	{ return getRawDataItem [ toolTipText ] . htmlEscape () ; }
Code	{ return getRawDataItem [ toolTipText ] . htmlEscape () ; }
Distance : 9

264
Tree	{ throw new RuntimeException ( toolTipText ) ; }
Code	{ throw new RuntimeException ( toolTipText ) ; }
Distance : 8

265
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

266
Tree	{ return ImageMapUtilities . htmlEscape ( state.workingLine ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( state.workingLine ) ; }
Distance : 5

267
Tree	{ return NUMBER_CONSTANT * ( ; }
Code	{ return NUMBER_CONSTANT * ( ; }
Distance : 9

268
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

269
Tree	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( RenderingHints.KEY_TEXT_ANTIALIASING ) ; }
Distance : 5

270
Tree	{ return getValue . htmlEscape ( toolTipText ) ; }
Code	{ return getValue . htmlEscape ( toolTipText ) ; }
Distance : 5

271
Tree	{ return super [ toolTipText ] . htmlEscape () ; }
Code	{ return super [ toolTipText ] . htmlEscape () ; }
Distance : 9

272
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText () ) + STRING_CONSTANT ; }
Distance : 2

273
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GradientPaint ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GradientPaint ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

274
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HashMap ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HashMap ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

275
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new toolTipText ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

276
Tree	{ return throw [ toolTipText ] . htmlEscape () ; }
Code	{ return throw [ toolTipText ] . htmlEscape () ; }
Distance : 9

277
Tree	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( BasicStroke.JOIN_BEVEL ) ; }
Distance : 5

278
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 5

279
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

280
Tree	{ throw new getRawDataItem ( toolTipText ) ; }
Code	{ throw new getRawDataItem ( toolTipText ) ; }
Distance : 8

281
Tree	{ return ImageMapUtilities . htmlEscape ( state.workingLine , BasicStroke.JOIN_BEVEL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( state.workingLine , BasicStroke.JOIN_BEVEL ) ; }
Distance : 6

282
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new Integer ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

283
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HighLowItemLabelGenerator ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HighLowItemLabelGenerator ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

284
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

285
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new BasicStroke.CAP_ROUND () ) + STRING_CONSTANT ; }
Distance : 3

286
Tree	{ return ( int ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( int ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

287
Tree	{ return SeriesException [ toolTipText ] . htmlEscape () ; }
Code	{ return SeriesException [ toolTipText ] . htmlEscape () ; }
Distance : 9

288
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

289
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } c2
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } c2
Distance : 5

290
Tree	{ throw new ChartChangeEvent ( toolTipText ) ; }
Code	{ throw new ChartChangeEvent ( toolTipText ) ; }
Distance : 8

291
Tree	{ return ! htmlEscape ( toolTipText ) ; } ObjectUtilities
Code	{ return ! htmlEscape ( toolTipText ) ; } ObjectUtilities
Distance : 7

292
Tree	{ return toolTipText ; }
Code	{ return toolTipText ; }
Distance : 9

293
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new RuntimeException () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new RuntimeException () ) + STRING_CONSTANT ; }
Distance : 4

294
Tree	{ throw new GeneralPath ( toolTipText ) ; }
Code	{ throw new GeneralPath ( toolTipText ) ; }
Distance : 8

295
Tree	{ return ! htmlEscape ( toolTipText ) ; } ObjectUtils
Code	{ return ! htmlEscape ( toolTipText ) ; } ObjectUtils
Distance : 7

296
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GradientPaint () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GradientPaint () ) + STRING_CONSTANT ; }
Distance : 3

297
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } c2
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } c2
Distance : 4

298
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new MarkerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

299
Tree	{ return this ; }
Code	{ return this ; }
Distance : 10

300
Tree	{ return ! htmlEscape ( toolTipText ) ; } readPaint
Code	{ return ! htmlEscape ( toolTipText ) ; } readPaint
Distance : 7

301
Tree	{ return null ; }
Code	{ return null ; }
Distance : 10

302
Tree	{ return toolTipText . htmlEscape ( toolTipText , getLowerMargin ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , getLowerMargin ) ; }
Distance : 6

303
Tree	{ return getCategoryIndex ; }
Code	{ return getCategoryIndex ; }
Distance : 10

304
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , PlotOrientation.VERTICAL ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , PlotOrientation.VERTICAL ) ; }
Distance : 5

305
Tree	{ return toolTipText . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( BasicStroke.CAP_ROUND , toolTipText ) ; }
Distance : 7

306
Tree	{ return ! htmlEscape ( toolTipText ) ; } deepClone
Code	{ return ! htmlEscape ( toolTipText ) ; } deepClone
Distance : 7

307
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } c2
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } c2
Distance : 1

308
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } hashCode
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } hashCode
Distance : 1

309
Tree	{ return NUMBER_CONSTANT * super ; }
Code	{ return NUMBER_CONSTANT * super ; }
Distance : 10

310
Tree	{ return this ; } GradientPaint
Code	{ return this ; } GradientPaint
Distance : 11

311
Tree	{ return this ; } SerialUtilities
Code	{ return this ; } SerialUtilities
Distance : 11

312
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 10

313
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } Color.red
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } Color.red
Distance : 1

314
Tree	{ return null ; } hashCode
Code	{ return null ; } hashCode
Distance : 11

315
Tree	{ return ( double ) toolTipText ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ( double ) toolTipText ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 9

316
Tree	{ return new HashMap ( toolTipText ) ; }
Code	{ return new HashMap ( toolTipText ) ; }
Distance : 7

317
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

318
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } c2
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } c2
Distance : 8

319
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

320
Tree	{ return this ; } p2
Code	{ return this ; } p2
Distance : 11

321
Tree	{ return this ; } ObjectUtils
Code	{ return this ; } ObjectUtils
Distance : 11

322
Tree	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 10

323
Tree	{ return getCategoryIndex . htmlEscape ( toolTipText ) ; }
Code	{ return getCategoryIndex . htmlEscape ( toolTipText ) ; }
Distance : 5

324
Tree	{ return new ArrayList ( toolTipText ) ; }
Code	{ return new ArrayList ( toolTipText ) ; }
Distance : 7

325
Tree	{ return throw . htmlEscape ( toolTipText ) ; }
Code	{ return throw . htmlEscape ( toolTipText ) ; }
Distance : 5

326
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape () . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 5

327
Tree	{ return new Integer ( toolTipText ) ; }
Code	{ return new Integer ( toolTipText ) ; }
Distance : 7

328
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Distance : 9

329
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } hashCode
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } hashCode
Distance : 8

330
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } DatasetUtilities
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } DatasetUtilities
Distance : 1

331
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 2

332
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } Color.red
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } Color.red
Distance : 8

333
Tree	{ return this ; } anchor
Code	{ return this ; } anchor
Distance : 11

334
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Distance : 3

335
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } !=
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } !=
Distance : 5

336
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } DatasetUtilities
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } DatasetUtilities
Distance : 8

337
Tree	{ return getValue ; }
Code	{ return getValue ; }
Distance : 10

338
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } !=
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } !=
Distance : 8

339
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Integer () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Integer () ) + STRING_CONSTANT ; }
Distance : 5

340
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 0

341
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } final
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } final
Distance : 8

342
Tree	{ return this ; } double
Code	{ return this ; } double
Distance : 11

343
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; } renderer
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; } renderer
Distance : 6

344
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new DialLayerChangeEvent () ) + STRING_CONSTANT ; }
Distance : 4

345
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; } put
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , false ) ; } put
Distance : 6

346
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GeneralPath ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GeneralPath ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 4

347
Tree	{ return false ; } double
Code	{ return false ; } double
Distance : 11

348
Tree	{ return NUMBER_CONSTANT * [ ; }
Code	{ return NUMBER_CONSTANT * [ ; }
Distance : 10

349
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

350
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } final
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } final
Distance : 4

351
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new javascriptEscape () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new javascriptEscape () ) + STRING_CONSTANT ; }
Distance : 4

352
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

353
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GeneralPath () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new GeneralPath () ) + STRING_CONSTANT ; }
Distance : 3

354
Tree	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
Distance : 5

355
Tree	{ return createXYAreaChart . htmlEscape ( toolTipText ) ; }
Code	{ return createXYAreaChart . htmlEscape ( toolTipText ) ; }
Distance : 5

356
Tree	{ return new DialLayerChangeEvent ( toolTipText ) ; }
Code	{ return new DialLayerChangeEvent ( toolTipText ) ; }
Distance : 7

357
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; }
Distance : 5

358
Tree	{ return false ; } printStackTrace
Code	{ return false ; } printStackTrace
Distance : 11

359
Tree	{ return new stepped ( toolTipText ) ; }
Code	{ return new stepped ( toolTipText ) ; }
Distance : 7

360
Tree	{ return new Object ( toolTipText ) ; }
Code	{ return new Object ( toolTipText ) ; }
Distance : 7

361
Tree	{ return this ; } a1
Code	{ return this ; } a1
Distance : 11

362
Tree	{ return createXYAreaChart ; }
Code	{ return createXYAreaChart ; }
Distance : 10

363
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } hashCode
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } hashCode
Distance : 5

364
Tree	{ return new ImageMapUtils ( toolTipText ) ; }
Code	{ return new ImageMapUtils ( toolTipText ) ; }
Distance : 7

365
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } renderer
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; } renderer
Distance : 6

366
Tree	{ return ! htmlEscape ( toolTipText ) ; }
Code	{ return ! htmlEscape ( toolTipText ) ; }
Distance : 6

367
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } final
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } final
Distance : 7

368
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } !=
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } !=
Distance : 7

369
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HashMap () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new HashMap () ) + STRING_CONSTANT ; }
Distance : 3

370
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } DatasetUtilities
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } DatasetUtilities
Distance : 7

371
Tree	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; }
Code	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; }
Distance : 7

372
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } Color.red
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } Color.red
Distance : 7

373
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } hashCode
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } hashCode
Distance : 7

374
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , false , true ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , false , true ) ; }
Distance : 12

375
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 7

376
Tree	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape () . htmlEscape ( toolTipText ) ; }
Distance : 6

377
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 5

378
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Double () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , new Double () ) + STRING_CONSTANT ; }
Distance : 5

379
Tree	{ return throw . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return throw . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

380
Tree	{ return htmlEscape ( toolTipText , toolTipText , null , false , false ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText , null , false , false ) ; }
Distance : 12

381
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 8

382
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

383
Tree	{ return ( int ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

384
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } renderer
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } renderer
Distance : 3

385
Tree	{ return getCategoryIndex . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getCategoryIndex . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

386
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } put
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; } put
Distance : 3

387
Tree	{ return getValue . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getValue . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

388
Tree	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } !=
Code	{ return htmlEscape ( this , toolTipText . htmlEscape ( toolTipText ) ) ; } !=
Distance : 8

389
Tree	{ return new Range ( toolTipText ) ; }
Code	{ return new Range ( toolTipText ) ; }
Distance : 7

390
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

391
Tree	{ return new GeneralPath ( toolTipText ) ; }
Code	{ return new GeneralPath ( toolTipText ) ; }
Distance : 7

392
Tree	{ return ( double ) toolTipText ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ( double ) toolTipText ( toolTipText , ImageMapUtilities ) ; }
Distance : 8

393
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; }
Distance : 8

394
Tree	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

395
Tree	{ return new Year ( toolTipText ) ; }
Code	{ return new Year ( toolTipText ) ; }
Distance : 7

396
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape () ) ; }
Distance : 8

397
Tree	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } c2
Code	{ return ImageMapUtilities . htmlEscape () . htmlEscape ( toolTipText ) ; } c2
Distance : 7

398
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities . htmlEscape () ) ; }
Distance : 10

399
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

400
Tree	{ return super . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return super . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

401
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

402
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 10

403
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , new BasicStroke ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

404
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } double
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } double
Distance : 6

405
Tree	{ return htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

406
Tree	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; } renderer
Code	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; } renderer
Distance : 8

407
Tree	{ return ImageMapUtilities ; } double
Code	{ return ImageMapUtilities ; } double
Distance : 10

408
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

409
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 7

410
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

411
Tree	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } printStackTrace
Code	{ return STRING_CONSTANT + ImageMapUtilities + STRING_CONSTANT ; } printStackTrace
Distance : 6

412
Tree	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape () . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

413
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape () ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape () ) ; }
Distance : 9

414
Tree	{ return ! toolTipText ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! toolTipText ( toolTipText , ImageMapUtilities ) ; }
Distance : 8

415
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 8

416
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; } put
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText . htmlEscape () ) ; } put
Distance : 9

417
Tree	{ return ! toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

418
Tree	{ return ( long ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( long ) toolTipText ( ImageMapUtilities , toolTipText ) ; }
Distance : 9

419
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

420
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 8

421
Tree	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Code	{ return htmlEscape ( this , ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ) ; }
Distance : 7

422
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities . htmlEscape ( toolTipText ) ) ; }
Distance : 8

423
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } final
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } final
Distance : 5

424
Tree	{ return ! toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return ! toolTipText . htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 7

425
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } !=
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } !=
Distance : 1

426
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 8

427
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } final
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; } final
Distance : 1

428
Tree	{ return toolTipText . htmlEscape ( state.workingLine ) ; }
Code	{ return toolTipText . htmlEscape ( state.workingLine ) ; }
Distance : 6

429
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , getLowerMargin ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , getLowerMargin ) ; }
Distance : 5

430
Tree	{ return toolTipText . htmlEscape ( toolTipText , true ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , true ) ; }
Distance : 6

431
Tree	{ return ImageMapUtilities ; } readPaint
Code	{ return ImageMapUtilities ; } readPaint
Distance : 10

432
Tree	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; } put
Code	{ return ! ImageMapUtilities ( toolTipText , toolTipText ) ; } put
Distance : 8

433
Tree	{ return ImageMapUtilities ; } a1
Code	{ return ImageMapUtilities ; } a1
Distance : 10

434
Tree	{ return ! htmlEscape ( toolTipText ) ; } DialLayerChangeEvent
Code	{ return ! htmlEscape ( toolTipText ) ; } DialLayerChangeEvent
Distance : 7

435
Tree	{ return ImageMapUtilities ; } DialLayerChangeEvent
Code	{ return ImageMapUtilities ; } DialLayerChangeEvent
Distance : 10

436
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } Color.red
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } Color.red
Distance : 5

437
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } DatasetUtilities
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; } DatasetUtilities
Distance : 5

438
Tree	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } Color.red
Code	{ return ! ImageMapUtilities . htmlEscape ( toolTipText ) ; } Color.red
Distance : 5

439
Tree	{ return ImageMapUtilities ; } ObjectUtilities
Code	{ return ImageMapUtilities ; } ObjectUtilities
Distance : 10

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 210
Wrong
========================================================================
False

0
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

1
Tree	{ super ( time . getDefault () ) ; time = time ; }
Code	{ super ( time . getDefault () ) ; time = time ; }
Distance : 9

2
Tree	{ super ( STRING_CONSTANT ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = time ; }
Distance : 9

3
Tree	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

4
Tree	{ Locale = time ; }
Code	{ Locale = time ; }
Distance : 10

5
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; if }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; if }
Distance : 6

6
Tree	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

7
Tree	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; time = Locale ; }
Distance : 10

8
Tree	{ super ( time . getDefault () ) ; Locale = time ; }
Code	{ super ( time . getDefault () ) ; Locale = time ; }
Distance : 9

9
Tree	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 4

10
Tree	{ return; time = time ; }
Code	{ return; time = time ; }
Distance : 10

11
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

12
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = time ; }
Distance : 8

13
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = time ; }
Distance : 8

14
Tree	{ super ( Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( Locale . getDefault () ) ; Locale = time ; }
Distance : 9

15
Tree	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

16
Tree	{ super ( time , time , time , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; time = time ; }
Distance : 8

17
Tree	{ super ( time , zone , time , Locale . getDefault () ) ; }
Code	{ super ( time , zone , time , Locale . getDefault () ) ; }
Distance : 3

18
Tree	{ super ( time , time , time , time . getDefault () ) ; }
Code	{ super ( time , time , time , time . getDefault () ) ; }
Distance : 5

19
Tree	{ super ( STRING_CONSTANT ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT ) ; zone = time ; }
Distance : 10

20
Tree	{ super(); time = time ; }
Code	{ super(); time = time ; }
Distance : 10

21
Tree	{ ; }
Code	{ ; }
Distance : 11

22
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Distance : 3

23
Tree	{ time = time ; }
Code	{ time = time ; }
Distance : 10

24
Tree	{ this ( time , true ) ; }
Code	{ this ( time , true ) ; }
Distance : 6

25
Tree	{ null time = time ; }
Code	{ null time = time ; }
Distance : 10

26
Tree	{ this ( time . getDefault () , Locale ) ; }
Code	{ this ( time . getDefault () , Locale ) ; }
Distance : 6

27
Tree	{ super ( STRING_CONSTANT ) ; time = time ; }
Code	{ super ( STRING_CONSTANT ) ; time = time ; }
Distance : 10

28
Tree	{ super ( time , Locale , time , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

29
Tree	{ this ( time , Locale , time , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () ) ; }
Distance : 3

30
Tree	{ this ( time , time , Locale ) ; }
Code	{ this ( time , time , Locale ) ; }
Distance : 4

31
Tree	{ super ( time , time , time , time . getDefault () ) ; time . getDefault () ; }
Code	{ super ( time , time , time , time . getDefault () ) ; time . getDefault () ; }
Distance : 10

32
Tree	{ super ( time , time , time , Locale . getDefault () ) ; time . getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; time . getDefault () ; }
Distance : 9

33
Tree	{ this ( time , zone , time ) ; }
Code	{ this ( time , zone , time ) ; }
Distance : 4

34
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

35
Tree	{ this ( time , Locale , Locale ) ; }
Code	{ this ( time , Locale , Locale ) ; }
Distance : 4

36
Tree	{ super ( time , Locale , time , time . getDefault () ) ; time . getDefault () ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; time . getDefault () ; }
Distance : 10

37
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; time . getDefault () ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; time . getDefault () ; }
Distance : 9

38
Tree	{ zone = zone ; }
Code	{ zone = zone ; }
Distance : 10

39
Tree	{ this ( time , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

40
Tree	{ super ( time , time , time , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time , time , time . getDefault () ) ; Locale = time ; }
Distance : 9

41
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale = time ; }
Distance : 8

42
Tree	{ super ( time , time , time , time . getDefault () ) ; time = time ; }
Code	{ super ( time , time , time , time . getDefault () ) ; time = time ; }
Distance : 9

43
Tree	{ super ( STRING_CONSTANT ) ; time = zone ; }
Code	{ super ( STRING_CONSTANT ) ; time = zone ; }
Distance : 10

44
Tree	{ this ( time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time . getDefault () , zone . getDefault () ) ; }
Distance : 4

45
Tree	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; zone = Locale ; }
Distance : 9

46
Tree	{ super ( time . getDefault () ) ; time = Locale ; }
Code	{ super ( time . getDefault () ) ; time = Locale ; }
Distance : 9

47
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; time = Locale ; }
Distance : 7

48
Tree	{ this ( time , time , Locale , Locale , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale , time , Locale , Locale . getDefault () ) ; }
Distance : 9

49
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; XYBarRenderer.defaultBarPainter }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; XYBarRenderer.defaultBarPainter }
Distance : 6

50
Tree	{ super ( time , null , null , Locale , zone . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , Locale , zone . getDefault () ) ; Locale = time ; }
Distance : 10

51
Tree	{ super ( time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time . getDefault () ) ; zone = Locale ; }
Distance : 9

52
Tree	{ this ( time , time , time ) ; }
Code	{ this ( time , time , time ) ; }
Distance : 5

53
Tree	{ super ( zone . getDefault () ) ; time = time ; }
Code	{ super ( zone . getDefault () ) ; time = time ; }
Distance : 9

54
Tree	{ this ( Locale . getDefault () , time ) ; }
Code	{ this ( Locale . getDefault () , time ) ; }
Distance : 6

55
Tree	{ this ( time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time . getDefault () , time . getDefault () ) ; }
Distance : 4

56
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; time = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; time = time ; }
Distance : 8

57
Tree	{ this ( time , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

58
Tree	{ super ( time , time . getDefault () ) ; time = time ; }
Code	{ super ( time , time . getDefault () ) ; time = time ; }
Distance : 8

59
Tree	{ super ( STRING_CONSTANT ) ; Locale = zone ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = zone ; }
Distance : 9

60
Tree	{ null Locale = time ; }
Code	{ null Locale = time ; }
Distance : 10

61
Tree	{ this ( time , Locale , Locale , time . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , time . getDefault () ) ; }
Distance : 3

62
Tree	{ this ( zone . getDefault () , time ) ; }
Code	{ this ( zone . getDefault () , time ) ; }
Distance : 6

63
Tree	{ super ( time , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = time ; }
Distance : 7

64
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; ServletUtilities.tempOneTimeFilePrefix }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; ServletUtilities.tempOneTimeFilePrefix }
Distance : 6

65
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

66
Tree	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

67
Tree	{ super ( time , Locale , time , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; Locale = time ; }
Distance : 9

68
Tree	{ super ( time , time , Locale , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , Locale , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

69
Tree	{ this ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 3

70
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

71
Tree	{ this ( time , this , Locale . getDefault () ) ; }
Code	{ this ( time , this , Locale . getDefault () ) ; }
Distance : 1

72
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; / }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; / }
Distance : 6

73
Tree	{ super ( time , time , time , time . getDefault () ) ; zone . getDefault () ; }
Code	{ super ( time , time , time , time . getDefault () ) ; zone . getDefault () ; }
Distance : 10

74
Tree	{ this ( zone . getDefault () , zone ) ; }
Code	{ this ( zone . getDefault () , zone ) ; }
Distance : 6

75
Tree	{ ; } SerialUtilities
Code	{ ; } SerialUtilities
Distance : 12

76
Tree	{ ; } GradientPaint
Code	{ ; } GradientPaint
Distance : 12

77
Tree	{ this ( time , zone , time , time . getDefault () ) ; }
Code	{ this ( time , zone , time , time . getDefault () ) ; }
Distance : 3

78
Tree	{ this ( time , time , time , zone . getDefault () ) ; }
Code	{ this ( time , time , time , zone . getDefault () ) ; }
Distance : 4

79
Tree	{ this ( zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( zone . getDefault () , time . getDefault () ) ; }
Distance : 5

80
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; throw }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; throw }
Distance : 6

81
Tree	{ this ( zone , this , time . getDefault () ) ; }
Code	{ this ( zone , this , time . getDefault () ) ; }
Distance : 3

82
Tree	{ ; } a1
Code	{ ; } a1
Distance : 12

83
Tree	{ this ( zone , time , Locale . getDefault () ) ; }
Code	{ this ( zone , time , Locale . getDefault () ) ; }
Distance : 2

84
Tree	{ this ( time , time , time , time . getDefault () ) ; }
Code	{ this ( time , time , time , time . getDefault () ) ; }
Distance : 4

85
Tree	{ this ( time , time , zone ) ; }
Code	{ this ( time , time , zone ) ; }
Distance : 5

86
Tree	{ this ( time , zone , Locale ) ; }
Code	{ this ( time , zone , Locale ) ; }
Distance : 3

87
Tree	{ ; } p2
Code	{ ; } p2
Distance : 12

88
Tree	{ super ( time , time , time , Locale . getDefault () ) ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; }
Distance : 4

89
Tree	{ ; } Color.RED
Code	{ ; } Color.RED
Distance : 12

90
Tree	{ time = time ; } put
Code	{ time = time ; } put
Distance : 11

91
Tree	{ ; } ObjectUtils
Code	{ ; } ObjectUtils
Distance : 12

92
Tree	{ this ( time , time , time ) ; } put
Code	{ this ( time , time , time ) ; } put
Distance : 6

93
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; } put
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; } put
Distance : 4

94
Tree	{ this ( time . getDefault () , Locale ) ; } put
Code	{ this ( time . getDefault () , Locale ) ; } put
Distance : 7

95
Tree	{ ; } anchor
Code	{ ; } anchor
Distance : 12

96
Tree	{ this ( time , zone , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 7

97
Tree	{ this ( time , false ) ; } DatasetUtilities
Code	{ this ( time , false ) ; } DatasetUtilities
Distance : 7

98
Tree	{ this ( time , false ) ; } Color.red
Code	{ this ( time , false ) ; } Color.red
Distance : 7

99
Tree	{ ; } double
Code	{ ; } double
Distance : 12

100
Tree	{ this ( Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 5

101
Tree	{ this ( time , time , Locale . getDefault () ) ; } put
Code	{ this ( time , time , Locale . getDefault () ) ; } put
Distance : 2

102
Tree	{ this ( Locale , this , zone . getDefault () ) ; }
Code	{ this ( Locale , this , zone . getDefault () ) ; }
Distance : 3

103
Tree	{ this ( time , Locale , zone ) ; }
Code	{ this ( time , Locale , zone ) ; }
Distance : 5

104
Tree	{ this ( time , false ) ; } r2
Code	{ this ( time , false ) ; } r2
Distance : 7

105
Tree	{ this ( time , false ) ; } key
Code	{ this ( time , false ) ; } key
Distance : 7

106
Tree	{ Locale = zone ; }
Code	{ Locale = zone ; }
Distance : 10

107
Tree	{ this ( time , zone , zone ) ; }
Code	{ this ( time , zone , zone ) ; }
Distance : 4

108
Tree	{ super ( STRING_CONSTANT ) ; time = time ; } put
Code	{ super ( STRING_CONSTANT ) ; time = time ; } put
Distance : 11

109
Tree	{ ; } public
Code	{ ; } public
Distance : 12

110
Tree	{ this ( time , Locale , time ) ; }
Code	{ this ( time , Locale , time ) ; }
Distance : 5

111
Tree	{ this ( time , time , time , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

112
Tree	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , time , Locale . getDefault () ) ; Locale = time ; }
Distance : 10

113
Tree	{ this ( time , time , time , time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time , time , Locale , Locale . getDefault () ) ; }
Distance : 9

114
Tree	{ this ( Locale , this , time . getDefault () ) ; }
Code	{ this ( Locale , this , time . getDefault () ) ; }
Distance : 3

115
Tree	{ null time = Locale ; }
Code	{ null time = Locale ; }
Distance : 9

116
Tree	{ super ( time , Locale , time , time . getDefault () ) ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; }
Distance : 5

117
Tree	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

118
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; }
Distance : 4

119
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; time = time ; }
Distance : 8

120
Tree	{ this ( time , time , time , Locale , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , time , Locale , Locale . getDefault () ) ; }
Distance : 9

121
Tree	{ super ( time , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( time , Locale . getDefault () ) ; zone = time ; }
Distance : 7

122
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = time ; }
Distance : 8

123
Tree	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

124
Tree	{ super ( time , Locale , time , time . getDefault () ) ; time = time ; }
Code	{ super ( time , Locale , time , time . getDefault () ) ; time = time ; }
Distance : 9

125
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; fireChangeEvent }
Distance : 6

126
Tree	{ this ( time . getDefault () , zone ) ; }
Code	{ this ( time . getDefault () , zone ) ; }
Distance : 6

127
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; BarRenderer.defaultBarPainter }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; BarRenderer.defaultBarPainter }
Distance : 6

128
Tree	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 3

129
Tree	{ time = zone ; }
Code	{ time = zone ; }
Distance : 9

130
Tree	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , Locale , time , Locale . getDefault () ) ; Locale = time ; }
Distance : 8

131
Tree	{ this ( zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( zone . getDefault () , zone . getDefault () ) ; }
Distance : 5

132
Tree	{ super ( time , time . getDefault () ) ; zone = time ; }
Code	{ super ( time , time . getDefault () ) ; zone = time ; }
Distance : 8

133
Tree	{ super ( time , time , time , time . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , time , time . getDefault () ) ; Locale . getDefault () ; }
Distance : 10

134
Tree	{ this ( time , time , time , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () ) ; }
Distance : 3

135
Tree	{ super ( time , time , Locale , time . getDefault () ) ; }
Code	{ super ( time , time , Locale , time . getDefault () ) ; }
Distance : 4

136
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 4

137
Tree	{ super ( time . getDefault () , STRING_CONSTANT , time . getDefault () ) ; if }
Code	{ super ( time . getDefault () , STRING_CONSTANT , time . getDefault () ) ; if }
Distance : 7

138
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

139
Tree	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , Locale , time . getDefault () ) ; Locale = time ; }
Distance : 10

140
Tree	{ this ( Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 5

141
Tree	{ super ( time , null , null , Locale , time . getDefault () ) ; time = time ; }
Code	{ super ( time , null , null , Locale , time . getDefault () ) ; time = time ; }
Distance : 10

142
Tree	{ this ( zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 5

143
Tree	{ super ( STRING_CONSTANT ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT ) ; Locale = Locale ; }
Distance : 9

144
Tree	{ Locale = Locale ; }
Code	{ Locale = Locale ; }
Distance : 10

145
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; return }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; return }
Distance : 6

146
Tree	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Code	{ super ( STRING_CONSTANT ) ; zone = zone ; }
Distance : 10

147
Tree	{ this ( Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , zone . getDefault () ) ; }
Distance : 5

148
Tree	{ this ( time , time , Locale , time . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () ) ; }
Distance : 3

149
Tree	{ this ( time , Locale , time , time . getDefault () ) ; }
Code	{ this ( time , Locale , time , time . getDefault () ) ; }
Distance : 4

150
Tree	{ this ( time , this , zone . getDefault () ) ; }
Code	{ this ( time , this , zone . getDefault () ) ; }
Distance : 2

151
Tree	{ this ( time , Locale , time , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

152
Tree	{ super ( time . getDefault () ) ; zone = time ; }
Code	{ super ( time . getDefault () ) ; zone = time ; }
Distance : 9

153
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; zone = time ; }
Distance : 10

154
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = time ; }
Distance : 10

155
Tree	{ this ( Locale , time , Locale . getDefault () ) ; }
Code	{ this ( Locale , time , Locale . getDefault () ) ; }
Distance : 2

156
Tree	{ this ( Locale , false ) ; }
Code	{ this ( Locale , false ) ; }
Distance : 7

157
Tree	{ this ( zone . getDefault () , Locale ) ; }
Code	{ this ( zone . getDefault () , Locale ) ; }
Distance : 6

158
Tree	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; else }
Code	{ super ( time . getDefault () , STRING_CONSTANT , Locale . getDefault () ) ; else }
Distance : 6

159
Tree	{ super ( time , Locale . getDefault () ) ; time = time ; }
Code	{ super ( time , Locale . getDefault () ) ; time = time ; }
Distance : 7

160
Tree	{ super ( time , time , Locale , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time , Locale , time . getDefault () ) ; Locale = time ; }
Distance : 8

161
Tree	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

162
Tree	{ this ( time , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

163
Tree	{ this ( time , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , zone . getDefault () ) ; }
Distance : 4

164
Tree	{ time = Locale ; }
Code	{ time = Locale ; }
Distance : 9

165
Tree	{ super ( Locale . getDefault () ) ; time = time ; }
Code	{ super ( Locale . getDefault () ) ; time = time ; }
Distance : 9

166
Tree	{ super ( time , time . getDefault () ) ; time = Locale ; }
Code	{ super ( time , time . getDefault () ) ; time = Locale ; }
Distance : 8

167
Tree	{ this ( time . getDefault () , time ) ; }
Code	{ this ( time . getDefault () , time ) ; }
Distance : 6

168
Tree	{ null time = zone ; }
Code	{ null time = zone ; }
Distance : 9

169
Tree	{ super ( time , null , null , zone , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , zone , Locale . getDefault () ) ; Locale = time ; }
Distance : 9

170
Tree	{ this time = time ; }
Code	{ this time = time ; }
Distance : 9

171
Tree	{ super(); time = Locale ; }
Code	{ super(); time = Locale ; }
Distance : 9

172
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = time ; }
Distance : 8

173
Tree	{ this ( zone , true ) ; }
Code	{ this ( zone , true ) ; }
Distance : 6

174
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; time = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; time = time ; }
Distance : 7

175
Tree	{ this ( time , time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , time . getDefault () ) ; }
Distance : 5

176
Tree	{ super ( time . getDefault () ) ; time = zone ; }
Code	{ super ( time . getDefault () ) ; time = zone ; }
Distance : 9

177
Tree	{ super ( time , Locale , Locale , time . getDefault () ) ; }
Code	{ super ( time , Locale , Locale , time . getDefault () ) ; }
Distance : 4

178
Tree	{ this ( time , time , time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 7

179
Tree	{ null zone = time ; }
Code	{ null zone = time ; }
Distance : 10

180
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = time ; }
Distance : 8

181
Tree	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Distance : 4

182
Tree	{ this ( Locale . getDefault () , zone ) ; }
Code	{ this ( Locale . getDefault () , zone ) ; }
Distance : 6

183
Tree	{ this ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 3

184
Tree	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

185
Tree	{ super ( time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () ) ; Locale = Locale ; }
Distance : 9

186
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 4

187
Tree	{ this ( time , time , Locale , time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

188
Tree	{ this ( zone , this , zone . getDefault () ) ; }
Code	{ this ( zone , this , zone . getDefault () ) ; }
Distance : 3

189
Tree	{ this ( zone , false ) ; }
Code	{ this ( zone , false ) ; }
Distance : 6

190
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; zone = time ; }
Distance : 7

191
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; time = Locale ; }
Distance : 10

192
Tree	{ zone = time ; }
Code	{ zone = time ; }
Distance : 10

193
Tree	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

194
Tree	{ super(); Locale = time ; }
Code	{ super(); Locale = time ; }
Distance : 10

195
Tree	{ this ( time , Locale , time , time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , time , time , time , Locale , Locale . getDefault () ) ; }
Distance : 9

196
Tree	{ this ( time , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 5

197
Tree	{ this ( time , time , time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 8

198
Tree	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Distance : 5

199
Tree	{ super ( time , zone , time , time . getDefault () ) ; }
Code	{ super ( time , zone , time , time . getDefault () ) ; }
Distance : 4

200
Tree	{ this ( time , time , Locale , time , time , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , time , time , Locale , Locale . getDefault () ) ; }
Distance : 9

201
Tree	{ super ( time , time . getDefault () ) ; Locale = time ; }
Code	{ super ( time , time . getDefault () ) ; Locale = time ; }
Distance : 8

202
Tree	{ zone = Locale ; }
Code	{ zone = Locale ; }
Distance : 9

203
Tree	{ this ( Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , time . getDefault () ) ; }
Distance : 5

204
Tree	{ this ( Locale , true ) ; }
Code	{ this ( Locale , true ) ; }
Distance : 7

205
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = time ; }
Distance : 7

206
Tree	{ this ( time , time , time . getDefault () ) ; }
Code	{ this ( time , time , time . getDefault () ) ; }
Distance : 2

207
Tree	{ this ( Locale . getDefault () , Locale ) ; }
Code	{ this ( Locale . getDefault () , Locale ) ; }
Distance : 6

208
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = time ; }
Distance : 10

209
Tree	{ super ( time , zone . getDefault () ) ; Locale = time ; }
Code	{ super ( time , zone . getDefault () ) ; Locale = time ; }
Distance : 7

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 400
Wrong
========================================================================
False

0
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

1
Tree	if ( this . XYDataset () ) { return result ; }
Code	if ( this . XYDataset () ) { return result ; }
Distance : 4

2
Tree	if ( int ( dataset , dataset ) ) { return result ; }
Code	if ( int ( dataset , dataset ) ) { return result ; }
Distance : 5

3
Tree	if ( ! DomainOrder () ) { return result ; }
Code	if ( ! DomainOrder () ) { return result ; }
Distance : 3

4
Tree	if ( result != null ) { return setTotal ( this , dataset ) ; }
Code	if ( result != null ) { return setTotal ( this , dataset ) ; }
Distance : 8

5
Tree	if ( result . put ( dataset ) ) { return result ; }
Code	if ( result . put ( dataset ) ) { return result ; }
Distance : 6

6
Tree	if ( result != null ) { return this . result . result ; }
Code	if ( result != null ) { return this . result . result ; }
Distance : 6

7
Tree	if ( result . calculatePieDatasetTotal ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

8
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

9
Tree	if ( put ( dataset ) ) { return result ; }
Code	if ( put ( dataset ) ) { return result ; }
Distance : 4

10
Tree	if ( result . isEmpty () ) { return result ; }
Code	if ( result . isEmpty () ) { return result ; }
Distance : 4

11
Tree	if ( ! ( dataset ) ) { return result ; }
Code	if ( ! ( dataset ) ) { return result ; }
Distance : 4

12
Tree	if ( result . put ( dataset ) ) { return this . dataset . result ; }
Code	if ( result . put ( dataset ) ) { return this . dataset . result ; }
Distance : 10

13
Tree	if ( result . getDataset ( dataset ) ) { return result ; }
Code	if ( result . getDataset ( dataset ) ) { return result ; }
Distance : 6

14
Tree	if ( result . isEmpty ( dataset ) ) { return result ; }
Code	if ( result . isEmpty ( dataset ) ) { return result ; }
Distance : 6

15
Tree	if ( result . put () ) { return result ; }
Code	if ( result . put () ) { return result ; }
Distance : 4

16
Tree	if ( d ( dataset ) ) { return result ; }
Code	if ( d ( dataset ) ) { return result ; }
Distance : 4

17
Tree	if ( result != null ) { return result . ArrayUtils ( dataset ) ; }
Code	if ( result != null ) { return result . ArrayUtils ( dataset ) ; }
Distance : 7

18
Tree	if ( result != null ) { return this . result ; }
Code	if ( result != null ) { return this . result ; }
Distance : 4

19
Tree	if ( result != null ) { return this . dataset ; }
Code	if ( result != null ) { return this . dataset ; }
Distance : 5

20
Tree	if ( this . dataset . clear ( result ) ) { return result ; }
Code	if ( this . dataset . clear ( result ) ) { return result ; }
Distance : 7

21
Tree	if ( this . dataset . isEmpty ( dataset ) ) { return result ; }
Code	if ( this . dataset . isEmpty ( dataset ) ) { return result ; }
Distance : 7

22
Tree	if ( int ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( int ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

23
Tree	if ( result . calculatePieDatasetTotal ( dataset , result ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( dataset , result ) ) { return result ; }
Distance : 7

24
Tree	if ( result ( dataset ) ) { return dataset ; }
Code	if ( result ( dataset ) ) { return dataset ; }
Distance : 5

25
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

26
Tree	if ( ! ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( ! ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

27
Tree	if ( TableXYDataset ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( TableXYDataset ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

28
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

29
Tree	if ( result . isEmpty () ) { return this . dataset . dataset ; }
Code	if ( result . isEmpty () ) { return this . dataset . dataset ; }
Distance : 9

30
Tree	if ( result ) { return result ; } !=
Code	if ( result ) { return result ; } !=
Distance : 4

31
Tree	if ( iterateRangeBounds ( dataset , dataset ) ) { return result ; }
Code	if ( iterateRangeBounds ( dataset , dataset ) ) { return result ; }
Distance : 5

32
Tree	if ( result ) { return dataset ; }
Code	if ( result ) { return dataset ; }
Distance : 4

33
Tree	if ( this . dataset . equal () ) { return result ; }
Code	if ( this . dataset . equal () ) { return result ; }
Distance : 5

34
Tree	if ( result . getDataset ( dataset , true ) ) { return result ; }
Code	if ( result . getDataset ( dataset , true ) ) { return result ; }
Distance : 7

35
Tree	if ( CloneNotSupportedException () ) { return result ; }
Code	if ( CloneNotSupportedException () ) { return result ; }
Distance : 3

36
Tree	if ( result ( dataset ) ) { return result ; } renderer
Code	if ( result ( dataset ) ) { return result ; } renderer
Distance : 5

37
Tree	if ( new DatasetUtils ( dataset ) . getPeriod ( result ) ) { return result ; }
Code	if ( new DatasetUtils ( dataset ) . getPeriod ( result ) ) { return result ; }
Distance : 9

38
Tree	if ( this . dataset . put ( dataset ) ) { return result ; }
Code	if ( this . dataset . put ( dataset ) ) { return result ; }
Distance : 7

39
Tree	if ( this . dataset () ) { return result ; }
Code	if ( this . dataset () ) { return result ; }
Distance : 4

40
Tree	if ( result != null ) { return result . findZBounds () ; }
Code	if ( result != null ) { return result . findZBounds () ; }
Distance : 5

41
Tree	if ( ! XYDataset ( Color.GRAY ) ) { return result ; }
Code	if ( ! XYDataset ( Color.GRAY ) ) { return result ; }
Distance : 5

42
Tree	if ( put () ) { return result ; }
Code	if ( put () ) { return result ; }
Distance : 3

43
Tree	if ( result != if ) { return result ; }
Code	if ( result != if ) { return result ; }
Distance : 3

44
Tree	if ( ! result . equal ( result ) ) { return result ; }
Code	if ( ! result . equal ( result ) ) { return result ; }
Distance : 7

45
Tree	if ( result ) { return result ; } c2
Code	if ( result ) { return result ; } c2
Distance : 4

46
Tree	if ( isRangeCrosshairVisible () ) { return result ; }
Code	if ( isRangeCrosshairVisible () ) { return result ; }
Distance : 3

47
Tree	if ( result . getText ( dataset ) ) { return result ; }
Code	if ( result . getText ( dataset ) ) { return result ; }
Distance : 6

48
Tree	if ( new MarkerChangeEvent ( dataset ) . hashCode ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . hashCode ( result ) ) { return result ; }
Distance : 9

49
Tree	if ( ! XYDataset ( dataset ) ) { return result ; }
Code	if ( ! XYDataset ( dataset ) ) { return result ; }
Distance : 5

50
Tree	if ( new DatasetUtils ( dataset ) . clone ( result ) ) { return result ; }
Code	if ( new DatasetUtils ( dataset ) . clone ( result ) ) { return result ; }
Distance : 9

51
Tree	if ( result . put ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . put ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

52
Tree	if ( result . findDomainBounds ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . findDomainBounds ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

53
Tree	if ( result . createPieChart ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . createPieChart ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

54
Tree	if ( result . isEmptyOrNull ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . isEmptyOrNull ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

55
Tree	if ( result != null ) { return result . combine () ; }
Code	if ( result != null ) { return result . combine () ; }
Distance : 5

56
Tree	if ( result ) { return result ; }
Code	if ( result ) { return result ; }
Distance : 3

57
Tree	if ( result . getDataset ( dataset ) ) { return this . result . result ; }
Code	if ( result . getDataset ( dataset ) ) { return this . result . result ; }
Distance : 10

58
Tree	if ( result != null && result . getID ( result ) ) { return result ; }
Code	if ( result != null && result . getID ( result ) ) { return result ; }
Distance : 9

59
Tree	if ( result != null ) { return result . that.sublabelPaint () ; }
Code	if ( result != null ) { return result . that.sublabelPaint () ; }
Distance : 5

60
Tree	if ( new MarkerChangeEvent ( dataset ) . getPeriod ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . getPeriod ( result ) ) { return result ; }
Distance : 9

61
Tree	if ( result != null ) { return result . clear () ; }
Code	if ( result != null ) { return result . clear () ; }
Distance : 5

62
Tree	if ( ! d () ) { return result ; }
Code	if ( ! d () ) { return result ; }
Distance : 3

63
Tree	if ( result != null ) { return result . findRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

64
Tree	if ( ! XYDataset ( dataset ) ) { return result ; }
Code	if ( ! XYDataset ( dataset ) ) { return result ; }
Distance : 5

65
Tree	if ( iterateRangeBounds ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( iterateRangeBounds ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

66
Tree	if ( ! isEmpty () ) { return result ; }
Code	if ( ! isEmpty () ) { return result ; }
Distance : 3

67
Tree	if ( dataset . dataset ( result ) ) { return result ; }
Code	if ( dataset . dataset ( result ) ) { return result ; }
Distance : 5

68
Tree	if ( ! RendererChangeEvent () ) { return result ; }
Code	if ( ! RendererChangeEvent () ) { return result ; }
Distance : 3

69
Tree	if ( result ) { return result ; } hashCode
Code	if ( result ) { return result ; } hashCode
Distance : 4

70
Tree	if ( result . XYDataset ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . XYDataset ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

71
Tree	if ( [ () ) { return result ; }
Code	if ( [ () ) { return result ; }
Distance : 3

72
Tree	if ( result != null ) { return result . combine ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . combine ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

73
Tree	if ( this . dataset . findDomainBounds () ) { return result ; }
Code	if ( this . dataset . findDomainBounds () ) { return result ; }
Distance : 5

74
Tree	if ( result . isEmpty ( dataset ) ) { return this . dataset . dataset ; }
Code	if ( result . isEmpty ( dataset ) ) { return this . dataset . dataset ; }
Distance : 11

75
Tree	if ( result != null ) { return result . type ( dataset ) ; }
Code	if ( result != null ) { return result . type ( dataset ) ; }
Distance : 7

76
Tree	if ( result != null ) { return clone ( this , dataset ) ; }
Code	if ( result != null ) { return clone ( this , dataset ) ; }
Distance : 8

77
Tree	if ( result . put ( result , true ) ) { return result ; }
Code	if ( result . put ( result , true ) ) { return result ; }
Distance : 8

78
Tree	if ( result . dataset ( result ) ) { return result ; }
Code	if ( result . dataset ( result ) ) { return result ; }
Distance : 5

79
Tree	if ( d ( dataset , dataset , true ) ) { return result ; }
Code	if ( d ( dataset , dataset , true ) ) { return result ; }
Distance : 7

80
Tree	if ( result . findDomainBounds ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . findDomainBounds ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

81
Tree	if ( this . showBase () ) { return result ; }
Code	if ( this . showBase () ) { return result ; }
Distance : 4

82
Tree	if ( result ) { return result ; } Color.red
Code	if ( result ) { return result ; } Color.red
Distance : 4

83
Tree	if ( result . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

84
Tree	if ( this . groupPaint () ) { return result ; }
Code	if ( this . groupPaint () ) { return result ; }
Distance : 4

85
Tree	if ( this . domainMarkers () ) { return result ; }
Code	if ( this . domainMarkers () ) { return result ; }
Distance : 4

86
Tree	if ( this . dataset . isOrsonPDFAvailable ( result ) ) { return result ; }
Code	if ( this . dataset . isOrsonPDFAvailable ( result ) ) { return result ; }
Distance : 7

87
Tree	if ( ! result . getDomainOrder ( result ) ) { return result ; }
Code	if ( ! result . getDomainOrder ( result ) ) { return result ; }
Distance : 7

88
Tree	if ( ! DatasetUtils () ) { return result ; }
Code	if ( ! DatasetUtils () ) { return result ; }
Distance : 3

89
Tree	if ( this . dataset . hashCode () ) { return result ; }
Code	if ( this . dataset . hashCode () ) { return result ; }
Distance : 5

90
Tree	if ( result != null ) { return result . findRangeBounds () ; }
Code	if ( result != null ) { return result . findRangeBounds () ; }
Distance : 5

91
Tree	if ( result != null ) { return result . defaultLegendShape () ; }
Code	if ( result != null ) { return result . defaultLegendShape () ; }
Distance : 5

92
Tree	if ( result != null ) { return result . findZBounds ( dataset ) ; }
Code	if ( result != null ) { return result . findZBounds ( dataset ) ; }
Distance : 7

93
Tree	if ( result ( dataset , dataset , true ) ) { return result ; }
Code	if ( result ( dataset , dataset , true ) ) { return result ; }
Distance : 7

94
Tree	if ( ! hasUniqueID () ) { return result ; }
Code	if ( ! hasUniqueID () ) { return result ; }
Distance : 3

95
Tree	if ( result != null ) { return result . ArrayUtils () ; }
Code	if ( result != null ) { return result . ArrayUtils () ; }
Distance : 5

96
Tree	if ( result . XYDataset () ) { return result ; }
Code	if ( result . XYDataset () ) { return result ; }
Distance : 4

97
Tree	if ( ! ( dataset , dataset , true ) ) { return result ; }
Code	if ( ! ( dataset , dataset , true ) ) { return result ; }
Distance : 7

98
Tree	if ( [ ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( [ ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

99
Tree	if ( result . calculatePieDatasetTotal ( dataset , dataset ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( dataset , dataset ) ) { return result ; }
Distance : 7

100
Tree	if ( result ) { return result ; } else if
Code	if ( result ) { return result ; } else if
Distance : 5

101
Tree	if ( new MarkerChangeEvent ( dataset ) . clone ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . clone ( result ) ) { return result ; }
Distance : 9

102
Tree	if ( result . getDataset () ) { return result ; }
Code	if ( result . getDataset () ) { return result ; }
Distance : 4

103
Tree	if ( result . put ( result ) ) { return result ; }
Code	if ( result . put ( result ) ) { return result ; }
Distance : 6

104
Tree	if ( ! result . isEmptyOrNull ( result ) ) { return result ; }
Code	if ( ! result . isEmptyOrNull ( result ) ) { return result ; }
Distance : 7

105
Tree	if ( result != null ) { return result ; } else else
Code	if ( result != null ) { return result ; } else else
Distance : 4

106
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

107
Tree	if ( iterateRangeBounds ( dataset ) ) { return result ; }
Code	if ( iterateRangeBounds ( dataset ) ) { return result ; }
Distance : 4

108
Tree	if ( result != null ) { return getDataset ( this , dataset ) ; }
Code	if ( result != null ) { return getDataset ( this , dataset ) ; }
Distance : 8

109
Tree	if ( result != null ) { return getCategoryIndex ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return getCategoryIndex ( STRING_CONSTANT ) ; }
Distance : 6

110
Tree	if ( result . put ( result ) ) { return this . result . dataset ; }
Code	if ( result . put ( result ) ) { return this . result . dataset ; }
Distance : 10

111
Tree	if ( result . getText ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . getText ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

112
Tree	if ( int ( dataset , dataset , true ) ) { return result ; }
Code	if ( int ( dataset , dataset , true ) ) { return result ; }
Distance : 7

113
Tree	if ( new MarkerChangeEvent () . minY ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . minY ( result ) ) { return result ; }
Distance : 8

114
Tree	if ( result . isEmpty ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( result . isEmpty ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 8

115
Tree	if ( result != null ) { return result ; } else /
Code	if ( result != null ) { return result ; } else /
Distance : 4

116
Tree	if ( iterateRangeBounds ( dataset , dataset , true ) ) { return result ; }
Code	if ( iterateRangeBounds ( dataset , dataset , true ) ) { return result ; }
Distance : 7

117
Tree	if ( int ( dataset ) ) { return result ; }
Code	if ( int ( dataset ) ) { return result ; }
Distance : 4

118
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

119
Tree	if ( TableXYDataset ( dataset , dataset , true ) ) { return result ; }
Code	if ( TableXYDataset ( dataset , dataset , true ) ) { return result ; }
Distance : 7

120
Tree	if ( new MarkerChangeEvent ( dataset ) . getValue ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . getValue ( result ) ) { return result ; }
Distance : 9

121
Tree	if ( result . put ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . put ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

122
Tree	if ( new MarkerChangeEvent ( dataset ) . deepClone ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . deepClone ( result ) ) { return result ; }
Distance : 9

123
Tree	if ( result != null ) { return result . findStackedRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

124
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , that.data ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , that.data ) ; }
Distance : 9

125
Tree	if ( result . findDomainBounds () ) { return result ; }
Code	if ( result . findDomainBounds () ) { return result ; }
Distance : 4

126
Tree	if ( new MarkerChangeEvent ( dataset ) . findRangeBounds ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent ( dataset ) . findRangeBounds ( result ) ) { return result ; }
Distance : 9

127
Tree	if ( result . isEmpty ( dataset , result ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , result ) ) { return result ; }
Distance : 7

128
Tree	if ( new Range ( dataset ) . clone ( result ) ) { return result ; }
Code	if ( new Range ( dataset ) . clone ( result ) ) { return result ; }
Distance : 9

129
Tree	if ( new MarkerChangeEvent () . minY ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . minY ( dataset ) ) { return result ; }
Distance : 8

130
Tree	if ( result . isEmpty () ) { return this . result . dataset ; }
Code	if ( result . isEmpty () ) { return this . result . dataset ; }
Distance : 8

131
Tree	if ( new MarkerChangeEvent () . findZBounds ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . findZBounds ( dataset ) ) { return result ; }
Distance : 8

132
Tree	if ( result . calculatePieDatasetTotal ( dataset ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( dataset ) ) { return result ; }
Distance : 6

133
Tree	if ( result . put ( dataset , true ) ) { return result ; }
Code	if ( result . put ( dataset , true ) ) { return result ; }
Distance : 7

134
Tree	if ( new MarkerChangeEvent () . defaultLegendShape ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . defaultLegendShape ( dataset ) ) { return result ; }
Distance : 8

135
Tree	if ( d ( dataset , dataset ) ) { return result ; }
Code	if ( d ( dataset , dataset ) ) { return result ; }
Distance : 5

136
Tree	if ( result . isEmptyOrNull () ) { return result ; }
Code	if ( result . isEmptyOrNull () ) { return result ; }
Distance : 4

137
Tree	if ( result != null && result . findStackedRangeBounds ( dataset ) ) { return result ; }
Code	if ( result != null && result . findStackedRangeBounds ( dataset ) ) { return result ; }
Distance : 9

138
Tree	if ( result ) { return result ; } else {
Code	if ( result ) { return result ; } else {
Distance : 5

139
Tree	if ( result . isEmpty ( dataset , true ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , true ) ) { return result ; }
Distance : 7

140
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

141
Tree	if ( new XYDataset ( dataset ) . clone ( result ) ) { return result ; }
Code	if ( new XYDataset ( dataset ) . clone ( result ) ) { return result ; }
Distance : 9

142
Tree	if ( result != null ) { return result . combine ( dataset ) ; }
Code	if ( result != null ) { return result . combine ( dataset ) ; }
Distance : 7

143
Tree	if ( result != null ) { return setTotal ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return setTotal ( STRING_CONSTANT ) ; }
Distance : 6

144
Tree	if ( put ( Color.GRAY ) ) { return result ; }
Code	if ( put ( Color.GRAY ) ) { return result ; }
Distance : 4

145
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , Color.BLACK ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , Color.BLACK ) ; }
Distance : 9

146
Tree	if ( result ) { return result ; } else else
Code	if ( result ) { return result ; } else else
Distance : 5

147
Tree	if ( result . calculatePieDatasetTotal () ) { return result ; }
Code	if ( result . calculatePieDatasetTotal () ) { return result ; }
Distance : 4

148
Tree	if ( result != null ) { return result . clear ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . clear ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

149
Tree	if ( ! XYDataset () ) { return result ; }
Code	if ( ! XYDataset () ) { return result ; }
Distance : 3

150
Tree	if ( this . dataset . put ( result ) ) { return result ; }
Code	if ( this . dataset . put ( result ) ) { return result ; }
Distance : 7

151
Tree	if ( result != null ) { return result ; } else catch
Code	if ( result != null ) { return result ; } else catch
Distance : 4

152
Tree	if ( this . labelType () ) { return result ; }
Code	if ( this . labelType () ) { return result ; }
Distance : 4

153
Tree	if ( result != null ) { return getDataset ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return getDataset ( STRING_CONSTANT ) ; }
Distance : 6

154
Tree	if ( result . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

155
Tree	if ( result != null ) { return result . DatasetUtils () ; }
Code	if ( result != null ) { return result . DatasetUtils () ; }
Distance : 5

156
Tree	if ( result != null ) { return result ; } else ]
Code	if ( result != null ) { return result ; } else ]
Distance : 4

157
Tree	if ( ! d ( dataset ) ) { return result ; }
Code	if ( ! d ( dataset ) ) { return result ; }
Distance : 5

158
Tree	if ( [ ( dataset , dataset , true ) ) { return result ; }
Code	if ( [ ( dataset , dataset , true ) ) { return result ; }
Distance : 7

159
Tree	if ( result != null ) { return result . findZBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . findZBounds ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

160
Tree	if ( result . calculatePieDatasetTotal ( dataset , true ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( dataset , true ) ) { return result ; }
Distance : 7

161
Tree	if ( ! result . DomainOrder ( result ) ) { return result ; }
Code	if ( ! result . DomainOrder ( result ) ) { return result ; }
Distance : 7

162
Tree	if ( new MarkerChangeEvent () . findStackedRangeBounds ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . findStackedRangeBounds ( dataset ) ) { return result ; }
Distance : 8

163
Tree	if ( ! result . isOrsonPDFAvailable ( result ) ) { return result ; }
Code	if ( ! result . isOrsonPDFAvailable ( result ) ) { return result ; }
Distance : 7

164
Tree	if ( result . calculatePieDatasetTotal ( dataset , false ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( dataset , false ) ) { return result ; }
Distance : 7

165
Tree	if ( ! result . XYDataset ( result ) ) { return result ; }
Code	if ( ! result . XYDataset ( result ) ) { return result ; }
Distance : 7

166
Tree	if ( d ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( d ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

167
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , true ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , true ) ; }
Distance : 9

168
Tree	if ( result ) { return result ; } else /
Code	if ( result ) { return result ; } else /
Distance : 5

169
Tree	if ( ! isEmpty ( dataset ) ) { return result ; }
Code	if ( ! isEmpty ( dataset ) ) { return result ; }
Distance : 5

170
Tree	if ( result != null ) { return result ; } else if
Code	if ( result != null ) { return result ; } else if
Distance : 4

171
Tree	if ( result != null ) { return this . result . clear () ; }
Code	if ( result != null ) { return this . result . clear () ; }
Distance : 7

172
Tree	if ( this . isEmpty () ) { return result ; }
Code	if ( this . isEmpty () ) { return result ; }
Distance : 4

173
Tree	if ( new MarkerChangeEvent () . combine ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . combine ( result ) ) { return result ; }
Distance : 8

174
Tree	if ( dataset . dataset ( dataset ) ) { return result ; }
Code	if ( dataset . dataset ( dataset ) ) { return result ; }
Distance : 5

175
Tree	if ( this . dataset . put () ) { return result ; }
Code	if ( this . dataset . put () ) { return result ; }
Distance : 5

176
Tree	if ( result () ) { return result ; }
Code	if ( result () ) { return result ; }
Distance : 3

177
Tree	if ( dataset != null ) { return result ; } else {
Code	if ( dataset != null ) { return result ; } else {
Distance : 3

178
Tree	if ( result . getText () ) { return result ; }
Code	if ( result . getText () ) { return result ; }
Distance : 4

179
Tree	if ( ! hasUniqueID ( dataset ) ) { return result ; }
Code	if ( ! hasUniqueID ( dataset ) ) { return result ; }
Distance : 5

180
Tree	if ( ! result . getDataset ( result ) ) { return result ; }
Code	if ( ! result . getDataset ( result ) ) { return result ; }
Distance : 7

181
Tree	if ( result . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( result . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 6

182
Tree	if ( TableXYDataset () ) { return result ; }
Code	if ( TableXYDataset () ) { return result ; }
Distance : 3

183
Tree	if ( ! RendererChangeEvent ( dataset ) ) { return result ; }
Code	if ( ! RendererChangeEvent ( dataset ) ) { return result ; }
Distance : 5

184
Tree	if ( result != null ) { return this . result . findZBounds () ; }
Code	if ( result != null ) { return this . result . findZBounds () ; }
Distance : 7

185
Tree	if ( result . put ( NUMBER_CONSTANT , result ) ) { return result ; }
Code	if ( result . put ( NUMBER_CONSTANT , result ) ) { return result ; }
Distance : 8

186
Tree	if ( result != null && result . findZBounds ( dataset ) ) { return result ; }
Code	if ( result != null && result . findZBounds ( dataset ) ) { return result ; }
Distance : 9

187
Tree	if ( result . getRawDataItem ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . getRawDataItem ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

188
Tree	if ( result != null ) { return append ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return append ( STRING_CONSTANT ) ; }
Distance : 6

189
Tree	if ( d ( Color.GRAY ) ) { return result ; }
Code	if ( d ( Color.GRAY ) ) { return result ; }
Distance : 4

190
Tree	if ( result != null ) { return result ; } else {}
Code	if ( result != null ) { return result ; } else {}
Distance : 4

191
Tree	if ( result != null ) { return setDataset ( this , dataset ) ; }
Code	if ( result != null ) { return setDataset ( this , dataset ) ; }
Distance : 8

192
Tree	if ( d () ) { return result ; }
Code	if ( d () ) { return result ; }
Distance : 3

193
Tree	if ( CloneNotSupportedException ( dataset ) ) { return result ; }
Code	if ( CloneNotSupportedException ( dataset ) ) { return result ; }
Distance : 4

194
Tree	if ( this . dataset . isOrsonPDFAvailable () ) { return result ; }
Code	if ( this . dataset . isOrsonPDFAvailable () ) { return result ; }
Distance : 5

195
Tree	if ( result . XYDataset ( dataset ) ) { return result ; }
Code	if ( result . XYDataset ( dataset ) ) { return result ; }
Distance : 6

196
Tree	if ( isRangeCrosshairVisible ( dataset , dataset ) ) { return result ; }
Code	if ( isRangeCrosshairVisible ( dataset , dataset ) ) { return result ; }
Distance : 5

197
Tree	if ( this . dataset . isEmpty () ) { return result ; }
Code	if ( this . dataset . isEmpty () ) { return result ; }
Distance : 5

198
Tree	if ( result != null ) { return clone ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return clone ( STRING_CONSTANT ) ; }
Distance : 6

199
Tree	if ( ! ( Color.GRAY ) ) { return result ; }
Code	if ( ! ( Color.GRAY ) ) { return result ; }
Distance : 4

200
Tree	if ( result != null ) { return this . dataset . findZBounds () ; }
Code	if ( result != null ) { return this . dataset . findZBounds () ; }
Distance : 8

201
Tree	if ( result != null && result . findZBounds ( result ) ) { return result ; }
Code	if ( result != null && result . findZBounds ( result ) ) { return result ; }
Distance : 9

202
Tree	if ( new MarkerChangeEvent () . findZBounds ( result ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . findZBounds ( result ) ) { return result ; }
Distance : 8

203
Tree	if ( result != null ) { return this . result . dataset ; }
Code	if ( result != null ) { return this . result . dataset ; }
Distance : 6

204
Tree	if ( d ( TableXYDataset ) ) { return result ; }
Code	if ( d ( TableXYDataset ) ) { return result ; }
Distance : 4

205
Tree	if ( ! MarkerChangeEvent ( dataset ) ) { return result ; }
Code	if ( ! MarkerChangeEvent ( dataset ) ) { return result ; }
Distance : 5

206
Tree	if ( dataset ( result ) ) { return result ; }
Code	if ( dataset ( result ) ) { return result ; }
Distance : 3

207
Tree	if ( isRangeCrosshairVisible ( dataset ) ) { return result ; }
Code	if ( isRangeCrosshairVisible ( dataset ) ) { return result ; }
Distance : 4

208
Tree	if ( result != null ) { return findZBounds ( this , dataset ) ; }
Code	if ( result != null ) { return findZBounds ( this , dataset ) ; }
Distance : 8

209
Tree	if ( isRangeCrosshairVisible ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( isRangeCrosshairVisible ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

210
Tree	if ( result . put ( dataset , dataset ) ) { return result ; }
Code	if ( result . put ( dataset , dataset ) ) { return result ; }
Distance : 7

211
Tree	if ( put ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( put ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

212
Tree	if ( result . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . getDataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

213
Tree	if ( result . put ( dataset , false ) ) { return result ; }
Code	if ( result . put ( dataset , false ) ) { return result ; }
Distance : 7

214
Tree	if ( ! XYDataset ( MarkerChangeEvent ) ) { return result ; }
Code	if ( ! XYDataset ( MarkerChangeEvent ) ) { return result ; }
Distance : 5

215
Tree	if ( result . put ( dataset ) ) { return this . result . dataset ; }
Code	if ( result . put ( dataset ) ) { return this . result . dataset ; }
Distance : 10

216
Tree	if ( result . dataset ( dataset ) ) { return result ; }
Code	if ( result . dataset ( dataset ) ) { return result ; }
Distance : 5

217
Tree	if ( [ ( dataset ) ) { return result ; }
Code	if ( [ ( dataset ) ) { return result ; }
Distance : 4

218
Tree	if ( XYDataset ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( XYDataset ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

219
Tree	if ( ! () ) { return result ; }
Code	if ( ! () ) { return result ; }
Distance : 3

220
Tree	if ( result != null ) { return this . dataset . dataset ; }
Code	if ( result != null ) { return this . dataset . dataset ; }
Distance : 7

221
Tree	if ( result != null ) { return this . result . findRangeBounds () ; }
Code	if ( result != null ) { return this . result . findRangeBounds () ; }
Distance : 7

222
Tree	if ( result != null ) { return this . dataset . indexOf () ; }
Code	if ( result != null ) { return this . dataset . indexOf () ; }
Distance : 8

223
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset , that.data ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset , that.data ) ; }
Distance : 9

224
Tree	if ( result != null && result . hashCodeForPaint ( dataset ) ) { return result ; }
Code	if ( result != null && result . hashCodeForPaint ( dataset ) ) { return result ; }
Distance : 9

225
Tree	if ( ! ( MarkerChangeEvent ) ) { return result ; }
Code	if ( ! ( MarkerChangeEvent ) ) { return result ; }
Distance : 4

226
Tree	if ( ! DomainOrder ( dataset ) ) { return result ; }
Code	if ( ! DomainOrder ( dataset ) ) { return result ; }
Distance : 5

227
Tree	if ( ! DatasetUtils ( dataset ) ) { return result ; }
Code	if ( ! DatasetUtils ( dataset ) ) { return result ; }
Distance : 5

228
Tree	if ( result . isEmpty ( dataset , false ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , false ) ) { return result ; }
Distance : 7

229
Tree	if ( result . isEmpty ( result ) ) { return result ; }
Code	if ( result . isEmpty ( result ) ) { return result ; }
Distance : 6

230
Tree	if ( result != null ) { return this . result . indexOf () ; }
Code	if ( result != null ) { return this . result . indexOf () ; }
Distance : 7

231
Tree	if ( result . findDomainBounds ( dataset , false ) ) { return result ; }
Code	if ( result . findDomainBounds ( dataset , false ) ) { return result ; }
Distance : 7

232
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , * ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , * ) ; }
Distance : 9

233
Tree	if ( result != null ) { return Range ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return Range ( STRING_CONSTANT ) ; }
Distance : 6

234
Tree	if ( result != null ) { return result . findStackedRangeBounds () ; }
Code	if ( result != null ) { return result . findStackedRangeBounds () ; }
Distance : 5

235
Tree	if ( this . dataset . isEmptyOrNull ( result ) ) { return result ; }
Code	if ( this . dataset . isEmptyOrNull ( result ) ) { return result ; }
Distance : 7

236
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , TableXYDataset ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , TableXYDataset ) ; }
Distance : 9

237
Tree	if ( new DatasetUtils () . minY ( dataset ) ) { return result ; }
Code	if ( new DatasetUtils () . minY ( dataset ) ) { return result ; }
Distance : 8

238
Tree	if ( result != null ) { return append ( this , dataset ) ; }
Code	if ( result != null ) { return append ( this , dataset ) ; }
Distance : 8

239
Tree	if ( ! Color.GRAY () ) { return result ; }
Code	if ( ! Color.GRAY () ) { return result ; }
Distance : 3

240
Tree	if ( this . minY () ) { return result ; }
Code	if ( this . minY () ) { return result ; }
Distance : 4

241
Tree	if ( result . getDataset ( dataset , result ) ) { return result ; }
Code	if ( result . getDataset ( dataset , result ) ) { return result ; }
Distance : 7

242
Tree	if ( this . dataset . getDataset ( result ) ) { return result ; }
Code	if ( this . dataset . getDataset ( result ) ) { return result ; }
Distance : 7

243
Tree	if ( result ) { return result ; } else catch
Code	if ( result ) { return result ; } else catch
Distance : 5

244
Tree	if ( this . dataset . isEmpty ( result ) ) { return result ; }
Code	if ( this . dataset . isEmpty ( result ) ) { return result ; }
Distance : 7

245
Tree	if ( result != null ) { return result ; } else (
Code	if ( result != null ) { return result ; } else (
Distance : 4

246
Tree	if ( ! ( XYDataset ) ) { return result ; }
Code	if ( ! ( XYDataset ) ) { return result ; }
Distance : 4

247
Tree	if ( result . calculatePieDatasetTotal ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . calculatePieDatasetTotal ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

248
Tree	if ( put ( MarkerChangeEvent ) ) { return result ; }
Code	if ( put ( MarkerChangeEvent ) ) { return result ; }
Distance : 4

249
Tree	if ( TableXYDataset ( dataset ) ) { return result ; }
Code	if ( TableXYDataset ( dataset ) ) { return result ; }
Distance : 4

250
Tree	if ( ! ( TableXYDataset ) ) { return result ; }
Code	if ( ! ( TableXYDataset ) ) { return result ; }
Distance : 4

251
Tree	if ( result != null ) { return clone.data ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return clone.data ( STRING_CONSTANT ) ; }
Distance : 6

252
Tree	if ( result != null && result . hashCodeForPaint ( result ) ) { return result ; }
Code	if ( result != null && result . hashCodeForPaint ( result ) ) { return result ; }
Distance : 9

253
Tree	if ( result != null ) { return result . defaultLegendShape ( dataset ) ; }
Code	if ( result != null ) { return result . defaultLegendShape ( dataset ) ; }
Distance : 7

254
Tree	if ( result != null ) { return result . DatasetUtils ( dataset ) ; }
Code	if ( result != null ) { return result . DatasetUtils ( dataset ) ; }
Distance : 7

255
Tree	if ( this . dataset . clear () ) { return result ; }
Code	if ( this . dataset . clear () ) { return result ; }
Distance : 5

256
Tree	if ( result != null ) { return this . dataset . findRangeBounds () ; }
Code	if ( result != null ) { return this . dataset . findRangeBounds () ; }
Distance : 8

257
Tree	if ( this . dataset . equal ( result ) ) { return result ; }
Code	if ( this . dataset . equal ( result ) ) { return result ; }
Distance : 7

258
Tree	if ( ! XYDataset ( [ ) ) { return result ; }
Code	if ( ! XYDataset ( [ ) ) { return result ; }
Distance : 5

259
Tree	if ( ! Color.GRAY ( dataset ) ) { return result ; }
Code	if ( ! Color.GRAY ( dataset ) ) { return result ; }
Distance : 5

260
Tree	if ( this . data () ) { return result ; }
Code	if ( this . data () ) { return result ; }
Distance : 4

261
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset , Color.BLACK ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset , Color.BLACK ) ; }
Distance : 9

262
Tree	if ( result != null ) { return Range ( this , dataset ) ; }
Code	if ( result != null ) { return Range ( this , dataset ) ; }
Distance : 8

263
Tree	if ( result . result ( dataset ) ) { return result ; }
Code	if ( result . result ( dataset ) ) { return result ; }
Distance : 6

264
Tree	if ( result != null ) { return clone.data ( this , dataset ) ; }
Code	if ( result != null ) { return clone.data ( this , dataset ) ; }
Distance : 8

265
Tree	if ( ! MarkerChangeEvent ( Color.GRAY ) ) { return result ; }
Code	if ( ! MarkerChangeEvent ( Color.GRAY ) ) { return result ; }
Distance : 5

266
Tree	if ( ! MarkerChangeEvent () ) { return result ; }
Code	if ( ! MarkerChangeEvent () ) { return result ; }
Distance : 3

267
Tree	if ( ! ( dataset , dataset ) ) { return result ; }
Code	if ( ! ( dataset , dataset ) ) { return result ; }
Distance : 5

268
Tree	if ( ! fireDatasetChanged () ) { return result ; }
Code	if ( ! fireDatasetChanged () ) { return result ; }
Distance : 3

269
Tree	if ( ! result . isEmpty ( result ) ) { return result ; }
Code	if ( ! result . isEmpty ( result ) ) { return result ; }
Distance : 7

270
Tree	if ( new DatasetUtils () . findZBounds ( dataset ) ) { return result ; }
Code	if ( new DatasetUtils () . findZBounds ( dataset ) ) { return result ; }
Distance : 8

271
Tree	if ( result != null ) { return result . type ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . type ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

272
Tree	if ( result != null && result . getID ( dataset ) ) { return result ; }
Code	if ( result != null && result . getID ( dataset ) ) { return result ; }
Distance : 9

273
Tree	if ( result . getText ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . getText ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

274
Tree	if ( result != null ) { return result ; } else {
Code	if ( result != null ) { return result ; } else {
Distance : 4

275
Tree	if ( result . put ( dataset , result ) ) { return result ; }
Code	if ( result . put ( dataset , result ) ) { return result ; }
Distance : 7

276
Tree	if ( result . getDataset ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . getDataset ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

277
Tree	if ( result != null ) { return this . result . findStackedRangeBounds () ; }
Code	if ( result != null ) { return this . result . findStackedRangeBounds () ; }
Distance : 7

278
Tree	if ( put ( dataset , dataset ) ) { return result ; }
Code	if ( put ( dataset , dataset ) ) { return result ; }
Distance : 5

279
Tree	if ( result . isEmpty ( dataset ) ) { return this . result . dataset ; }
Code	if ( result . isEmpty ( dataset ) ) { return this . result . dataset ; }
Distance : 10

280
Tree	if ( result != null ) { return result . findRangeBounds ( dataset , findRangeBounds ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset , findRangeBounds ) ; }
Distance : 9

281
Tree	if ( iterateRangeBounds () ) { return result ; }
Code	if ( iterateRangeBounds () ) { return result ; }
Distance : 3

282
Tree	if ( result != null ) { return DomainOrder.DESCENDING ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return DomainOrder.DESCENDING ( STRING_CONSTANT ) ; }
Distance : 6

283
Tree	if ( ! XYDataset ( Year.MINIMUM_YEAR ) ) { return result ; }
Code	if ( ! XYDataset ( Year.MINIMUM_YEAR ) ) { return result ; }
Distance : 5

284
Tree	if ( result != null ) { return findZBounds ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return findZBounds ( STRING_CONSTANT ) ; }
Distance : 6

285
Tree	if ( result . XYDataset ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( result . XYDataset ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 6

286
Tree	if ( result != null ) { return result . that.sublabelPaint ( dataset ) ; }
Code	if ( result != null ) { return result . that.sublabelPaint ( dataset ) ; }
Distance : 7

287
Tree	if ( result != null ) { return DomainOrder.DESCENDING ( this , dataset ) ; }
Code	if ( result != null ) { return DomainOrder.DESCENDING ( this , dataset ) ; }
Distance : 8

288
Tree	if ( new MarkerChangeEvent () . combine ( dataset ) ) { return result ; }
Code	if ( new MarkerChangeEvent () . combine ( dataset ) ) { return result ; }
Distance : 8

289
Tree	if ( this . dataset . getDataset ( dataset ) ) { return result ; }
Code	if ( this . dataset . getDataset ( dataset ) ) { return result ; }
Distance : 7

290
Tree	if ( this . dataset . isEmptyOrNull () ) { return result ; }
Code	if ( this . dataset . isEmptyOrNull () ) { return result ; }
Distance : 5

291
Tree	if ( put ( TableXYDataset ) ) { return result ; }
Code	if ( put ( TableXYDataset ) ) { return result ; }
Distance : 4

292
Tree	if ( [ ( dataset , dataset ) ) { return result ; }
Code	if ( [ ( dataset , dataset ) ) { return result ; }
Distance : 5

293
Tree	if ( ! XYDataset ( XYDataset ) ) { return result ; }
Code	if ( ! XYDataset ( XYDataset ) ) { return result ; }
Distance : 5

294
Tree	if ( ! fireDatasetChanged ( dataset ) ) { return result ; }
Code	if ( ! fireDatasetChanged ( dataset ) ) { return result ; }
Distance : 5

295
Tree	if ( result != null && result . findRangeBounds ( dataset ) ) { return result ; }
Code	if ( result != null && result . findRangeBounds ( dataset ) ) { return result ; }
Distance : 9

296
Tree	if ( put ( dataset , dataset , true ) ) { return result ; }
Code	if ( put ( dataset , dataset , true ) ) { return result ; }
Distance : 7

297
Tree	if ( this . Range () ) { return result ; }
Code	if ( this . Range () ) { return result ; }
Distance : 4

298
Tree	if ( ! XYDataset ( DatasetChangeEvent ) ) { return result ; }
Code	if ( ! XYDataset ( DatasetChangeEvent ) ) { return result ; }
Distance : 5

299
Tree	if ( result . getDataset ( dataset , dataset ) ) { return result ; }
Code	if ( result . getDataset ( dataset , dataset ) ) { return result ; }
Distance : 7

300
Tree	if ( result . dataset ( dataset ) ) { return dataset ; }
Code	if ( result . dataset ( dataset ) ) { return dataset ; }
Distance : 6

301
Tree	if ( ! result . equal ( dataset ) ) { return result ; }
Code	if ( ! result . equal ( dataset ) ) { return result ; }
Distance : 7

302
Tree	if ( dataset ) { return result ; }
Code	if ( dataset ) { return result ; }
Distance : 2

303
Tree	if ( result ) { return result ; } else {}
Code	if ( result ) { return result ; } else {}
Distance : 5

304
Tree	if ( ! XYDataset ( year ) ) { return result ; }
Code	if ( ! XYDataset ( year ) ) { return result ; }
Distance : 5

305
Tree	if ( result != null ) { return getCategoryIndex ( this , dataset ) ; }
Code	if ( result != null ) { return getCategoryIndex ( this , dataset ) ; }
Distance : 8

306
Tree	if ( result != null ) { return setDataset ( STRING_CONSTANT ) ; }
Code	if ( result != null ) { return setDataset ( STRING_CONSTANT ) ; }
Distance : 6

307
Tree	if ( isRangeCrosshairVisible ( dataset , dataset , true ) ) { return result ; }
Code	if ( isRangeCrosshairVisible ( dataset , dataset , true ) ) { return result ; }
Distance : 7

308
Tree	if ( result ) { return result ; } DatasetUtilities
Code	if ( result ) { return result ; } DatasetUtilities
Distance : 4

309
Tree	if ( result != null ) { return result . findRangeBounds ( dataset ) ; }
Code	if ( result != null ) { return result . findRangeBounds ( dataset ) ; }
Distance : 7

310
Tree	if ( result . isEmpty ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Code	if ( result . isEmpty ( NUMBER_CONSTANT , dataset ) ) { return result ; }
Distance : 8

311
Tree	if ( dataset != null ) { return this . dataset . dataset ; }
Code	if ( dataset != null ) { return this . dataset . dataset ; }
Distance : 6

312
Tree	if ( result . getRawDataItem () ) { return result ; }
Code	if ( result . getRawDataItem () ) { return result ; }
Distance : 4

313
Tree	if ( result ) { return result ; } else ]
Code	if ( result ) { return result ; } else ]
Distance : 5

314
Tree	if ( dataset . result ( dataset ) ) { return result ; }
Code	if ( dataset . result ( dataset ) ) { return result ; }
Distance : 5

315
Tree	if ( result != null ) { return result . clear ( dataset ) ; }
Code	if ( result != null ) { return result . clear ( dataset ) ; }
Distance : 7

316
Tree	if ( result . findDomainBounds ( dataset ) ) { return result ; }
Code	if ( result . findDomainBounds ( dataset ) ) { return result ; }
Distance : 6

317
Tree	if ( ! result . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( ! result . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 7

318
Tree	if ( result != null && result . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( result != null && result . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 9

319
Tree	if ( result . put ( result , dataset ) ) { return result ; }
Code	if ( result . put ( result , dataset ) ) { return result ; }
Distance : 8

320
Tree	if ( result != null ) { return result . that.sublabelPaint ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . that.sublabelPaint ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

321
Tree	if ( result . put ( result , result ) ) { return result ; }
Code	if ( result . put ( result , result ) ) { return result ; }
Distance : 8

322
Tree	if ( result != null ) { return dataset ; }
Code	if ( result != null ) { return dataset ; }
Distance : 3

323
Tree	if ( d ( MarkerChangeEvent ) ) { return result ; }
Code	if ( d ( MarkerChangeEvent ) ) { return result ; }
Distance : 4

324
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

325
Tree	if ( result . put ( dataset ) ) { return this . result . result ; }
Code	if ( result . put ( dataset ) ) { return this . result . result ; }
Distance : 10

326
Tree	if ( result != null && result . findStackedRangeBounds ( result ) ) { return result ; }
Code	if ( result != null && result . findStackedRangeBounds ( result ) ) { return result ; }
Distance : 9

327
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset ) ; }
Distance : 7

328
Tree	if ( result . getDataset () ) { return this . dataset . dataset ; }
Code	if ( result . getDataset () ) { return this . dataset . dataset ; }
Distance : 9

329
Tree	if ( dataset != null ) { return this . dataset ; }
Code	if ( dataset != null ) { return this . dataset ; }
Distance : 4

330
Tree	if ( result . getDataset ( dataset , false ) ) { return result ; }
Code	if ( result . getDataset ( dataset , false ) ) { return result ; }
Distance : 7

331
Tree	if ( XYDataset ( dataset , dataset ) ) { return result ; }
Code	if ( XYDataset ( dataset , dataset ) ) { return result ; }
Distance : 5

332
Tree	if ( result != null ) { return result . DatasetUtils ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . DatasetUtils ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

333
Tree	if ( int () ) { return result ; }
Code	if ( int () ) { return result ; }
Distance : 3

334
Tree	if ( result ) { return result ; } else (
Code	if ( result ) { return result ; } else (
Distance : 5

335
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset , TableXYDataset ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset , TableXYDataset ) ; }
Distance : 9

336
Tree	if ( result . isEmpty ( dataset , dataset ) ) { return result ; }
Code	if ( result . isEmpty ( dataset , dataset ) ) { return result ; }
Distance : 7

337
Tree	if ( result != null ) { return result ; } else [
Code	if ( result != null ) { return result ; } else [
Distance : 4

338
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

339
Tree	if ( ! XYDataset ( TableXYDataset ) ) { return result ; }
Code	if ( ! XYDataset ( TableXYDataset ) ) { return result ; }
Distance : 5

340
Tree	if ( result . createPieChart () ) { return result ; }
Code	if ( result . createPieChart () ) { return result ; }
Distance : 4

341
Tree	if ( result . getDataset ( dataset ) ) { return this . result . dataset ; }
Code	if ( result . getDataset ( dataset ) ) { return this . result . dataset ; }
Distance : 10

342
Tree	if ( dataset . result ( result ) ) { return result ; }
Code	if ( dataset . result ( result ) ) { return result ; }
Distance : 5

343
Tree	if ( result != null ) { return result . findStackedRangeBounds ( dataset , * ) ; }
Code	if ( result != null ) { return result . findStackedRangeBounds ( dataset , * ) ; }
Distance : 9

344
Tree	if ( result . getDataset () ) { return this . result . dataset ; }
Code	if ( result . getDataset () ) { return this . result . dataset ; }
Distance : 8

345
Tree	if ( result . isEmpty () ) { return this . dataset . result ; }
Code	if ( result . isEmpty () ) { return this . dataset . result ; }
Distance : 8

346
Tree	if ( dataset != null ) { return this . dataset . result ; }
Code	if ( dataset != null ) { return this . dataset . result ; }
Distance : 5

347
Tree	if ( this . dataset . getDomainBounds () ) { return result ; }
Code	if ( this . dataset . getDomainBounds () ) { return result ; }
Distance : 5

348
Tree	if ( result . result ( result ) ) { return result ; }
Code	if ( result . result ( result ) ) { return result ; }
Distance : 6

349
Tree	if ( dataset != null ) { return dataset ; }
Code	if ( dataset != null ) { return dataset ; }
Distance : 2

350
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

351
Tree	if ( result != null ) { return this . dataset . result ; }
Code	if ( result != null ) { return this . dataset . result ; }
Distance : 6

352
Tree	if ( result ( dataset , dataset ) ) { return result ; }
Code	if ( result ( dataset , dataset ) ) { return result ; }
Distance : 5

353
Tree	if ( result . put () ) { return this . dataset . dataset ; }
Code	if ( result . put () ) { return this . dataset . dataset ; }
Distance : 9

354
Tree	if ( result ) { return result ; } else throw
Code	if ( result ) { return result ; } else throw
Distance : 5

355
Tree	if ( this . dataset . getDataset () ) { return result ; }
Code	if ( this . dataset . getDataset () ) { return result ; }
Distance : 5

356
Tree	if ( dataset != null ) { return this . result . result ; }
Code	if ( dataset != null ) { return this . result . result ; }
Distance : 5

357
Tree	if ( result . put () ) { return this . result . result ; }
Code	if ( result . put () ) { return this . result . result ; }
Distance : 8

358
Tree	if ( result ) { return result ; } else [
Code	if ( result ) { return result ; } else [
Distance : 5

359
Tree	if ( result ( dataset , dataset , dataset ) ) { return result ; }
Code	if ( result ( dataset , dataset , dataset ) ) { return result ; }
Distance : 7

360
Tree	if ( result != null ) { return result . type () ; }
Code	if ( result != null ) { return result . type () ; }
Distance : 5

361
Tree	if ( result != super(); ) { return result ; }
Code	if ( result != super(); ) { return result ; }
Distance : 3

362
Tree	if ( TableXYDataset ( dataset , dataset ) ) { return result ; }
Code	if ( TableXYDataset ( dataset , dataset ) ) { return result ; }
Distance : 5

363
Tree	if ( result != null ) { return result . defaultLegendShape ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . defaultLegendShape ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

364
Tree	if ( result . getDataset () ) { return this . dataset . result ; }
Code	if ( result . getDataset () ) { return this . dataset . result ; }
Distance : 8

365
Tree	if ( result != null ) { return result . ArrayUtils ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( result != null ) { return result . ArrayUtils ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

366
Tree	if ( result . dataset ( result ) ) { return dataset ; }
Code	if ( result . dataset ( result ) ) { return dataset ; }
Distance : 6

367
Tree	if ( dataset != return; ) { return this . dataset ; }
Code	if ( dataset != return; ) { return this . dataset ; }
Distance : 5

368
Tree	if ( result ( result ) ) { return result ; }
Code	if ( result ( result ) ) { return result ; }
Distance : 4

369
Tree	if ( result . isEmpty ( dataset ) ) { return this . result . result ; }
Code	if ( result . isEmpty ( dataset ) ) { return this . result . result ; }
Distance : 10

370
Tree	if ( result != null ) { return this . dataset . clear () ; }
Code	if ( result != null ) { return this . dataset . clear () ; }
Distance : 8

371
Tree	if ( XYDataset ( dataset , dataset , true ) ) { return result ; }
Code	if ( XYDataset ( dataset , dataset , true ) ) { return result ; }
Distance : 7

372
Tree	if ( dataset != return; ) { return this . result ; }
Code	if ( dataset != return; ) { return this . result ; }
Distance : 4

373
Tree	if ( result . put ( dataset ) ) { return this . dataset . dataset ; }
Code	if ( result . put ( dataset ) ) { return this . dataset . dataset ; }
Distance : 11

374
Tree	if ( result ( result ) ) { return dataset ; }
Code	if ( result ( result ) ) { return dataset ; }
Distance : 5

375
Tree	if ( result != if ) { return result ; }
Code	if ( result != if ) { return result ; }
Distance : 3

376
Tree	if ( result ) { return result ; } final
Code	if ( result ) { return result ; } final
Distance : 4

377
Tree	if ( result != return; ) { return this . result ; }
Code	if ( result != return; ) { return this . result ; }
Distance : 5

378
Tree	if ( result . put () ) { return this . result . dataset ; }
Code	if ( result . put () ) { return this . result . dataset ; }
Distance : 8

379
Tree	if ( dataset != null ) { return dataset ; }
Code	if ( dataset != null ) { return dataset ; }
Distance : 2

380
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

381
Tree	if ( result != null ) { return this . dataset . findStackedRangeBounds () ; }
Code	if ( result != null ) { return this . dataset . findStackedRangeBounds () ; }
Distance : 8

382
Tree	if ( result != return; ) { return this . dataset ; }
Code	if ( result != return; ) { return this . dataset ; }
Distance : 6

383
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

384
Tree	if ( result != return; ) { return dataset ; }
Code	if ( result != return; ) { return dataset ; }
Distance : 4

385
Tree	if ( dataset ( result ) ) { return dataset ; }
Code	if ( dataset ( result ) ) { return dataset ; }
Distance : 4

386
Tree	if ( result != super(); ) { return this . result ; }
Code	if ( result != super(); ) { return this . result ; }
Distance : 5

387
Tree	if ( result != super(); ) { return result ; }
Code	if ( result != super(); ) { return result ; }
Distance : 3

388
Tree	if ( dataset ( dataset ) ) { return dataset ; }
Code	if ( dataset ( dataset ) ) { return dataset ; }
Distance : 4

389
Tree	if ( dataset != null ) { return this . result . dataset ; }
Code	if ( dataset != null ) { return this . result . dataset ; }
Distance : 5

390
Tree	if ( result . put () ) { return this . dataset . result ; }
Code	if ( result . put () ) { return this . dataset . result ; }
Distance : 8

391
Tree	if ( result != super(); ) { return this . dataset ; }
Code	if ( result != super(); ) { return this . dataset ; }
Distance : 6

392
Tree	if ( dataset ) { return dataset ; }
Code	if ( dataset ) { return dataset ; }
Distance : 3

393
Tree	if ( result != return; ) { return this . result . dataset ; }
Code	if ( result != return; ) { return this . result . dataset ; }
Distance : 7

394
Tree	if ( result != return; ) { return this . dataset . dataset ; }
Code	if ( result != return; ) { return this . dataset . dataset ; }
Distance : 8

395
Tree	if ( result ( dataset ) ) { return result ; } put
Code	if ( result ( dataset ) ) { return result ; } put
Distance : 5

396
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

397
Tree	if ( result != return; ) { return result ; }
Code	if ( result != return; ) { return result ; }
Distance : 3

398
Tree	if ( result != null ) { return dataset ; }
Code	if ( result != null ) { return dataset ; }
Distance : 3

399
Tree	if ( result != return; ) { return dataset ; }
Code	if ( result != return; ) { return dataset ; }
Distance : 4

========================================================================


